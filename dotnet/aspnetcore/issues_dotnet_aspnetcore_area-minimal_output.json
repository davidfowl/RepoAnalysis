[
  {
    "id": "MDU6SXNzdWUzOTA5MjIzNDk=",
    "title": "Add additional configuration sources for the WebHostBuilder in the WebApplicationFactory",
    "url": "https://github.com/dotnet/aspnetcore/issues/4898",
    "createdAt": "2018-07-09T23:42:32Z",
    "lastUpdated": "2023-06-20T21:45:04Z",
    "body": "#### Is this a Bug or Feature request?:\r\nFeature request.\r\n\r\n#### Description of the problem:\r\nThere are some situations where users have manifested the desire to configure some aspects of the app for testing purposes through environment variables and other mechanisms.\r\n\r\nWe normally recommend overriding ConfigureWebHostBuilder to do these types of changes, but there are a couple of opinions that the WebApplicationFactory makes about what environment the app is using and where the content root is found from.\r\n\r\nIn both cases, these pieces of data are defined statically in code. \r\n* In the default setup of the WebApplicationFactory for the environment the tests run on.\r\n* In the WebApplicationFactoryContentRoot attributes for the content roots of the app.\r\n\r\nI\u0027ve discussed this with a bunch of people and we want to switch to a system based on config to allow these things to be configured based on the environment. This way, these settings that the factory needs to correctly boot up the project can be defined when the tests are going to run in addition to at compile time without users customizing the factory.\r\n\r\n#### Proposed changes\r\n* Add an additional step to WebApplicationFactory to add additional configuration sources to the webhostbuilder we create.\r\n* Switch from custom implementations for determining the content root and the environment to run on to use config.\r\n* Provide three additional configuration sources in the appropriate order:\r\n  * Static config source. Maps our attributes to config keys and defaults the environment to \u0022Development\u0022\r\n* Environment variables provider. Maps environment variables with a prefix ASPNETCOREINTEGRATIONTEST\r\n* Optional json file appSettings.integrationtests.json to allow these things to be specified on a json file.\r\n\r\nAny new customization that needs to be added for testing purposes will be done this way.\r\n",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-mvc",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQwMzk2ODYwNQ==",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "@javiercn, please assign cost to this issue.",
        "createdAt": "2018-07-10T21:16:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/4898#issuecomment-403968605"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQxNjgxODM2Ng==",
        "parentId": null,
        "author": "minuz",
        "content": "This sounds very interesting...I recently had to this to configure the InMemoryEmail provider for test purposes. \r\n\r\n\u0060\u0060\u0060c#\r\n        protected override IWebHostBuilder CreateWebHostBuilder()\r\n        {\r\n            var assemblyPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\r\n            return WebApi.Program.BuildWebHost(Array.Empty\u003Cstring\u003E())\r\n                                 .ConfigureAppConfiguration(builder =\u003E builder.AddJsonFile($\u0022{assemblyPath}/appsettings.testing.json\u0022));\r\n        }\r\n\u0060\u0060\u0060\r\n\r\nAnd I thought this was simple enough and still ensures the host setup runs exactly like it would in prod.",
        "createdAt": "2018-08-29T04:13:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/4898#issuecomment-416818366"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWUzOTA5MjI5OTY=",
    "title": "GetDocumentInsider code should not overwrite up-to-date API descriptions",
    "url": "https://github.com/dotnet/aspnetcore/issues/4913",
    "createdAt": "2018-09-07T22:53:55Z",
    "lastUpdated": "2024-03-01T22:55:55Z",
    "body": "#### Is this a Bug or Feature request?\r\nEnhancement that\u0027s part of #4896\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project)\r\n1. Create a test project with a \u0060\u003CServiceProjectReference/\u003E\u0060 to an (experimental) web site providing an \u0060IDocumentProvider\u0060 service\r\n2. Build the project\r\n3. Notice build creates the expected API description file (aka Swagger or OpenAPI document)\r\n4. Without deleting the above file, build the project again\r\n5. Notice the timestamp of the description file changes and the client code is generated again\r\n\r\n#### Description of the problem\r\nThe timestamp change is a problem because it extends the build time unnecessarily.\r\n\r\nProblem does not occur when the document generation tool relies on \u0060%(Uri)\u0060 metadata. That is, the download option works well already.\r\n\r\n#### Version of \u0060Microsoft.AspNetCore.Mvc\u0060 or \u0060Microsoft.AspNetCore.App\u0060 or \u0060Microsoft.AspNetCore.All\u0060\r\nSee the [features/client.code.generation branch](https://github.com/aspnet/Mvc/tree/feature/client.code.generation) branch. That work is intended for the 2.2 Preview 3 milestone.",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde847tw-9",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-12-28T03:43:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/4913#issuecomment-1001852861"
      },
      {
        "id": "IC_kwDOAQzde85MAYw-",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:25:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/4913#issuecomment-1275169854"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWUzOTA5MjM2ODA=",
    "title": "Create an Analyzer to prevent usage of reserved keywords in code",
    "url": "https://github.com/dotnet/aspnetcore/issues/4930",
    "createdAt": "2018-10-31T17:20:51Z",
    "lastUpdated": "2024-02-26T23:57:23Z",
    "body": "People are hitting these type of issues more and more: https://github.com/aspnet/Mvc/issues/7876\r\nThe idea is to have an Analyzer which will be aware of all the reserved words we have in different places and will warn users about their name choices.\r\n\r\n@rynowak what are your thoughts about this?",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-mvc",
      "analyzer",
      "severity-minor",
      "affected-medium",
      "feature-mvc-execution-pipeline",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQzNDgwNTA5Ng==",
        "parentId": null,
        "author": "rynowak",
        "content": "If we limit this to parameters that seems fine. If I made a list of things to have analyzers for, I think this would be roughly in the middle \uD83D\uDC4D ",
        "createdAt": "2018-10-31T18:50:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/4930#issuecomment-434805096"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQzNDg0NDYzMw==",
        "parentId": null,
        "author": "poke",
        "content": "To pick up an idea I had before: Is there any chance we could change this, maybe with 3.0, so that internally different keys are used? We could maybe use a feature flag, so people could always choose the old behavior for compatibility.",
        "createdAt": "2018-10-31T20:56:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/4930#issuecomment-434844633"
      },
      {
        "id": "IC_kwDOAQzde847twUJ",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-12-28T03:29:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/4930#issuecomment-1001850121"
      },
      {
        "id": "IC_kwDOAQzde85MAYyT",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:25:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/4930#issuecomment-1275169939"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0NjAzMDUwODM=",
    "title": "Provide an option on FromRouteAttribute that allows decoding the value being bound",
    "url": "https://github.com/dotnet/aspnetcore/issues/11544",
    "createdAt": "2019-06-25T09:13:42Z",
    "lastUpdated": "2024-03-01T22:55:55Z",
    "body": "The rights of my users are at \u0060/api/admin/users/{userId}/rights\u0060\r\n\r\nAnd my controller is as simple as \r\n\r\n\u0060\u0060\u0060cs\r\n[Route(\u0022/api/admin/users/{userId}/rights\u0022)]\r\npublic async Task\u003CIActionResult\u003E GetRights([FromRoute]string userId)\r\n{\r\n    var rights = await _someService.GetRights(userId);\r\n    return Ok(rights);\r\n}\r\n\u0060\u0060\u0060\r\n\r\nor \r\n\r\n\u0060\u0060\u0060cs\r\n[HttpPut(\u0022{userId}\u0022)]\r\npublic async Task\u003CIActionResult\u003E Update(string userId, [FromBody]UpdateUserViewModel parameters)\r\n{\r\n    var user = await _employeService.Update(userId, parameters);\r\n    return Ok(user);\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThe problem I have is that, the userIds of my users may contains a \u0060/\u0060 which is encoded to \u0060%2F\u0060 in the Uri. But userId doesn\u0027t decode \u0060%2F\u0060 so my string contains \u0060%2F\u0060. It\u0027s fine for me, I can deal with that.\r\n\r\nBut the userIds of my users may contains a \u0060\u002B\u0060 which is encoded to \u0060%2B\u0060 in the Uri. And now, the userId decode the \u0060%2B\u0060 to \u0060\u002B\u0060 \uD83D\uDE32\r\n\r\nCurrently, I can\u0027t use \u0060WebUtility.UrlDecode(userId)\u0060 because \u0060userId\u0060 may contains a \u0060\u002B\u0060 which would be send as \u0060%2B\u0060 decoded as \u0060\u002B\u0060 and finally to \u0060 \u0060. My only actual solution is to replace \u0060%2F\u0060 to \u0060/\u0060 which is ugly and does not solve all the possibility : \u0060%252F\u0060\r\n\r\nI saw a recommandation to use \u0060[FromQuery]\u0060 instead of \u0060[FromRoute]\u0060 but it\u0027s obvious that if both exist, it\u0027s because they have semantic difference.\r\n\r\nIt seems that\u0027s not the first time the problem appears : https://github.com/aspnet/Mvc/issues/4599, https://github.com/aspnet/AspNetCore/issues/2655, https://github.com/aspnet/AspNetCore/issues/4445 and I\u0027d like to know if it\u0027s on the roadmap to change this behavior or not. \r\n\r\nCould you please this time consider this bug ? I\u0027d be happy to help.",
    "upvotes": 34,
    "labels": [
      "enhancement",
      "area-mvc",
      "feature-model-binding",
      "severity-minor",
      "affected-medium",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUwNjgwMjY4MQ==",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "Thanks for contacting us, @SchroterQuentin.\r\nWe\u0027ll provide an option so that \u0060FromRoute\u0060 attribute decodes specific (by you) parameters.",
        "createdAt": "2019-06-28T16:49:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-506802681"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUwNzE0NDE4MA==",
        "parentId": null,
        "author": "SchroterQuentin",
        "content": "The problem exist on [HttpGet] [HttpPost] [HttpPut] etc. Is there a way to handle all this problems in one area ? Or do we have to add this options on all this attributes ?\r\n\r\nI\u0027m actually not understanding how would work this option ? ",
        "createdAt": "2019-07-01T07:10:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-507144180"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxMDA0OTgyNA==",
        "parentId": null,
        "author": "bachratyg",
        "content": "Also see aspnet/Mvc#6388\r\n\r\nThe hosts partially decodes the percent encoding and explicitly skips decoding %2F here:\r\n\u0060\u0060\u0060\r\nMicrosoft.AspNetCore.Server.IIS \u003E Microsoft.AspNetCore.HttpSys.Internal.RequestUriBuilder.UnescapePercentEncoding\r\nMicrosoft.AspNetCore.Server.HttpSys \u003E Microsoft.AspNetCore.HttpSys.Internal.RequestUriBuilder.UnescapePercentEncoding\r\nMicrosoft.AspNetCore.Server.Kestrel.Core \u003E Microsoft.AspNetCore.Internal.UrlDecoder.UnescapePercentEncoding\r\n\u0060\u0060\u0060\r\nThe main problem is Routing or MVC model binding cannot reliably decode the partially decoded segment. Ideally the server should not do any decoding especially not partial. (Full decoding is not possible since it would introduce new segments.)\r\n\r\nIf the server behavior is not allowed to change (even behind a compatibility flag) then the router middleware could be modified to use the raw request url from IHttpRequestFetaure.RawTarget (which is not yet decoded) to get proper encoded tokens then decode as needed.\r\n\r\nA possible workaround: inject a middleware before routing takes place that restores the original undecoded path from IHttpRequestFeature.RawTarget then in another middleware after routing decode the RouteData tokens.",
        "createdAt": "2019-07-10T12:57:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-510049824"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyNTA1OTE0MA==",
        "parentId": null,
        "author": "pranavkm",
        "content": "As part of doing this, ensure binding to non-string values that require decoded values work. See https://github.com/aspnet/AspNetCore/issues/11134",
        "createdAt": "2019-08-26T22:33:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-525059140"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwNjc5ODI5OQ==",
        "parentId": null,
        "author": "ArthurHNL",
        "content": "Can we get an update on this? I just spent half an hour debugging my API before I found out that Route parameters are not URL decoded by default.",
        "createdAt": "2020-03-31T18:32:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-606798299"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwNzE3NTc2NA==",
        "parentId": null,
        "author": "DanielBryars",
        "content": "Yeah, this behaviour is pretty _weird_. \r\n\r\nIf you can\u0027t fix it then this FromRouteAttribute option would be a good compromise for me. Or perhaps provide an example implementation of the middleware suggested by  https://github.com/Eilon in https://github.com/aspnet/Mvc/issues/6388 \r\n",
        "createdAt": "2020-04-01T10:45:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-607175764"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxODQxNzc3NQ==",
        "parentId": null,
        "author": "stefanluchian",
        "content": "I see that this bug lives since at least 2017 and there is not even a workaround about it.\r\nIn .Net Core you don\u0027t allow us to do WCF anymore, so we are forced to do REST.\r\nIn REST we need to send parameters via Route, not via Query.\r\nSo we need to use [FromRoute], which should happen short before Model-Binding, but definitely after Routing.\r\nSo there is no worry about decoding %2B into /.\r\nThen why is nothing happening here?\r\nYou closed any other Issues (at least 4 peaces counted) and now you let this open for loooong time.\r\nHow many developers do you need to comment on this issue, before you consider it worthy to look upon?",
        "createdAt": "2020-04-23T14:12:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-618417775"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxODQ2MjI3NA==",
        "parentId": null,
        "author": "pranavkm",
        "content": "\u003E Can we get an update on this? \r\n\r\nWe will consider fixing this in the upcoming 5.0 release. That said, the plan is to not have this decoding on by default - you explicitly would have to opt-in to this behavior. For current releases, you should be able to unblock yourselves by explicitly url decoding values in your action that you know require to be decoded.",
        "createdAt": "2020-04-23T15:24:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-618462274"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY0MTU2MjQ1NA==",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-06-09T20:51:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-641562454"
      },
      {
        "id": "IC_kwDOAQzde841KaG4",
        "parentId": null,
        "author": "skovalyova",
        "content": "I face the same issue when passing encoded URI as part of route. In this case, \u0060:\u0060 is decoded automatically, but \u0060//\u0060 remain encoded (\u0060http:%2F%2F\u0060). I have to use \u0060HttpUtility.UrlDecode\u0060 as a workaround or use query parameters instead.",
        "createdAt": "2021-08-03T15:01:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-891920824"
      },
      {
        "id": "IC_kwDOAQzde842mp77",
        "parentId": null,
        "author": "talshloman",
        "content": "I faced the same issue when passing encoded URI as query parameters.\r\nI had to Get a request and I excepted to get a model. one of the props was string and we send encoded string due to we want to pass \u0027\u002B\u0027.\r\n\r\nI tried every solution I found on google, but no one work. so I started to try myself and I found a solution. I explicit the get set.\r\nNow all work as expected.\r\n\r\nIn you example\r\n\u0060[Route(\u0022/api/admin/users/{userId}/rights\u0022)]\r\n  public async Task\u003CIActionResult\u003E GetRights([FromRoute]GetRightsRequest userId)\r\n  {\r\n      var rights = await _someService.GetRights(userId);\r\n      return Ok(rights);\r\n  }\r\n  \r\n  public class GetRightsRequest\r\n  {\r\n  private string _userId\r\n   public string UserId{get{return _userId;} set{_userId = value;}}\r\n  }\u0060\r\n\r\nIn my case instead [FromRoute] I use [FromQuery] but I think it will work.\r\nIn addition, I don\u0027t really know why this work, and when I use automatic get set ({get; set;}) it didn\u0027t work.",
        "createdAt": "2021-09-09T13:34:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-916102907"
      },
      {
        "id": "IC_kwDOAQzde844VKJ4",
        "parentId": null,
        "author": "ItayBenNer",
        "content": "Hi devs, please advise if not dealing the route cause of this issue, please provide a proper workaround this is not that small of a thing, the DOTNET core FW should be working according to REST standards this partial escaping is really a wired behavior \\:",
        "createdAt": "2021-10-17T08:13:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-945070712"
      },
      {
        "id": "IC_kwDOAQzde845G56e",
        "parentId": null,
        "author": "celluj34",
        "content": "A workaround is to provide your own model binder and provider:\r\n\r\n\u0060\u0060\u0060cs\r\n// Startup.cs : ConfigureServices\r\n\r\n            services.AddMvcCore(options =\u003E\r\n                    {\r\n                        options.ModelBinderProviders.Insert(0, new DecodePathStringsBinderProvider());\r\n                    });\r\n\r\n\r\n    public class DecodePathStringsBinderProvider : IModelBinderProvider\r\n    {\r\n        public IModelBinder? GetBinder(ModelBinderProviderContext context)\r\n        {\r\n            return context.Metadata.ModelType == typeof(string) \u0026\u0026 context.BindingInfo.BindingSource == BindingSource.Path /* or Route, or whatever you want */ ? new BinderTypeModelBinder(typeof(DecodePathStringsBinder)) : null;\r\n        }\r\n    }\r\n\r\n    public class DecodePathStringsBinder : IModelBinder\r\n    {\r\n        public Task BindModelAsync(ModelBindingContext bindingContext)\r\n        {\r\n            if (bindingContext == null)\r\n            {\r\n                throw new ArgumentNullException(nameof(bindingContext));\r\n            }\r\n\r\n            var modelName = bindingContext.ModelName;\r\n\r\n            // Try to fetch the value of the argument by name\r\n            var valueProviderResult = bindingContext.ValueProvider.GetValue(modelName);\r\n            if (valueProviderResult == ValueProviderResult.None)\r\n            {\r\n                return Task.CompletedTask;\r\n            }\r\n\r\n            var value = valueProviderResult.FirstValue;\r\n            var urlDecode = HttpUtility.UrlDecode(value);\r\n\r\n            bindingContext.ModelState.SetModelValue(modelName, urlDecode, value);\r\n            bindingContext.Result = ModelBindingResult.Success(urlDecode);\r\n\r\n            return Task.CompletedTask;\r\n        }\r\n    }\r\n\u0060\u0060\u0060\r\n\u0060\u0060\u0060",
        "createdAt": "2021-11-02T19:42:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-958111390"
      },
      {
        "id": "IC_kwDOAQzde847tujV",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-12-28T02:58:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1001842901"
      },
      {
        "id": "IC_kwDOAQzde84-E3Z_",
        "parentId": null,
        "author": "Nils-Berghs",
        "content": "What am I missing? I can\u0027t understand that this isn\u0027t fixable in 6 years. It is very easy:\r\n\r\n- Evaluate the route\r\n- Decode route params\r\n- Pass them to the controller action/page/...\r\n\r\n~~A solution is even given in the workaround described by @celluj34~~ The soltution described by @celluj34 does NOT always work. It works for the \u0060/\u0060 but if there are other \u0027escaped\u0027 characters in the route param they are already decoded, and decoding them again may cause issues.\r\n\r\nExamples (input string in unencoded form):\r\n- \u0027ab/cd\u0027 =\u003E decodes ok\r\n- \u0027ab%cd\u0027 =\u003E decodes ok\r\n- \u0027ab%12\u0027 =\u003E ERROR, in the model binder the % character is already encoded and decoding again will decode %12\r\n\r\n**THERE IS NO SOLUTION FOR THIS PROBLEM POSSIBLE**\r\nAn idea would be to replace \u0060%2f\u0060 by \u0060/\u0060, but there is no way to know if the percentage was already decoded or not! \r\n\r\n\r\nIs there any reason why route parameters should not be fully URL decoded, by default? I can think of none. And if there is, is it as devastating as the problem above? In short route parameter can not be used in asp .net core (unless you know all possible values in advance....)\r\n\r\n\r\n",
        "createdAt": "2022-02-16T12:54:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1041462911"
      },
      {
        "id": "IC_kwDOAQzde85Bagr3",
        "parentId": null,
        "author": "asprna",
        "content": "For me, this only happens when the controller inherits from ControllerBase class. The workaround for me is that instead of ControllerBase, I inherit the controller from the Controller class.\r\n",
        "createdAt": "2022-04-13T01:53:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1097468663"
      },
      {
        "id": "IC_kwDOAQzde85BcJdv",
        "parentId": null,
        "author": "Nils-Berghs",
        "content": "@asprna I can not confirm this, for me it happens both with Controller and ControllerBase as base class. (Maybe this depends on the .net core version, after all this bug could have been fixed in 3.1)",
        "createdAt": "2022-04-13T10:39:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1097897839"
      },
      {
        "id": "IC_kwDOAQzde85BmaTp",
        "parentId": null,
        "author": "asprna",
        "content": "@Nils-Berghs I am currently using .net core 3.1",
        "createdAt": "2022-04-16T06:46:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1100588265"
      },
      {
        "id": "IC_kwDOAQzde85BmpHB",
        "parentId": null,
        "author": "asprna",
        "content": "@Nils-Berghs Actually you are right. The actual workaround is to get the value from the query string. \r\n\r\n \u0060\r\n[ApiController]\r\n[Route(\u0022api/v1/[controller]\u0022)]\r\npublic class TestController : ControllerBase\r\n{\r\n\t\t[HttpGet(\u0022Successful\u0022)]\r\n\t\tpublic async Task\u003CIActionResult\u003E Successful([FromQuery] string token)\r\n\t\t{\r\n\t\t\treturn Ok(token);\r\n\t\t}\r\n\t}\u0060",
        "createdAt": "2022-04-16T12:01:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1100648897"
      },
      {
        "id": "IC_kwDOAQzde85LcIyc",
        "parentId": null,
        "author": "kammerjaeger",
        "content": "What is the current state of this? It is another 3/4 of a year, when will we see a fix?\r\nThe user input \u0022abc/cde/xyz%2Fuvw\u0022 cannot be differentiated on the server side from \u0022abc/cde/xyz/uvw\u0022 or any other combination.\r\n**This is a serious problem.**",
        "createdAt": "2022-10-03T15:47:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1265667228"
      },
      {
        "id": "IC_kwDOAQzde85MAY9o",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:26:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1275170664"
      },
      {
        "id": "IC_kwDOAQzde85MAajE",
        "parentId": null,
        "author": "thegrahamking",
        "content": "We are experiencing this issue and, running on Azure App Service, have yet to find a workaround other than switching to FromQuery which makes this one route inconsistent with all the others in our RESTful service.\r\n\r\nThis issue needs to be fixed or a code example of a valid workaround which allows us to continue using FromRoute provided.",
        "createdAt": "2022-10-11T19:32:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1275177156"
      },
      {
        "id": "IC_kwDOAQzde85Qfvim",
        "parentId": null,
        "author": "Nils-Berghs",
        "content": "BUMP, please stop development on .net 8, and fix bugs like this first....  \r\n\r\n- Moved to 3.1 milestone (Jun 2019)\r\n- Moved to 5 planning (Jan 2020)\r\n- Moved to 6 planning\r\n- Moved to 7 planning (Dec 2021)\r\n- Moved to 8 planning (Oct 2022)\r\n\r\nMore managers / scrum master than developers?",
        "createdAt": "2022-12-14T06:51:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1350498470"
      },
      {
        "id": "IC_kwDOAQzde85QgD4Z",
        "parentId": null,
        "author": "davidfowl",
        "content": "cc @Tratcher ",
        "createdAt": "2022-12-14T07:57:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1350581785"
      },
      {
        "id": "IC_kwDOAQzde85QlYbd",
        "parentId": null,
        "author": "Tratcher",
        "content": "The real fix here is much deeper: https://github.com/dotnet/aspnetcore/issues/30655. The server needs to make the path available as individual, fully decoded segments so that the the app / model binder isn\u0027t left dealing with this ambiguous escaping state. Routing would need to be updated to consume the path as individual segments. Model binding shouldn\u0027t need to be updated once routing is delivering the correct route values.",
        "createdAt": "2022-12-14T18:51:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1351976669"
      },
      {
        "id": "IC_kwDOAQzde85Uva8j",
        "parentId": null,
        "author": "JMonsorno",
        "content": "Following the example from @celluj34 I made a sample app and library, don\u0027t judge the 5.0 references, that works for my purposes and addresses others concerns; namely @Nils-Berghs example and my own of raw \u0022%2525\u0022 testcase. Feeling it\u0027s a bit unpolished for a nuget package but will decode the raw route - following some Angular influences I called \u0022unsafe\u0022 - or if you want the controller to handle it uniquely it return back the raw value all by application level setup and controller level replacement of \u0060[FromRoute]\u0060 with \u0060[FromRouteUnsafe]\u0060 or \u0060[FromRouteRaw]\u0060 respectively.\r\n\r\nhttps://github.com/JMonsorno/CustomRouteBinderProvider",
        "createdAt": "2023-02-08T00:50:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1421717283"
      },
      {
        "id": "IC_kwDOAQzde85tMrkD",
        "parentId": null,
        "author": "code-bringer",
        "content": "I\u0027ve just encountered this bug :( Is there any update on it? It would be nice to have some options that may change routing behavior for this specific case with slash encoding.\r\nMy use case is the following:\r\nI have entity keys from multiple external systems, for some of them these keys look like numbers, for others, it could be guids. But of course, there is a system with keys that with slashes inside(it mimics some folder structure).\r\nSo in my case, I already have multiple endpoints with the following routing scheme:\r\n\u0060\u0060\u0060csharp\r\n[HttpGet(\u0022documents/for/{externalKeyId}/{documentType}\u0022)]\r\npublic async IAsyncEnumerable\u003CDocument\u003E GetDocuments(\r\n\t[FromRoute] string externalKeyId,\r\n\t[FromRoute] DocumentType documentType,\r\n\t[FromQuery] DateTime? startDate,\r\n\t[FromQuery] DateTime? endDate,\r\n\t[EnumeratorCancellation] CancellationToken cancel = default\r\n)\r\n\u0060\u0060\u0060\r\nSo as you can see keys with slashes inside are real pain in the neck.",
        "createdAt": "2023-11-29T14:49:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1832040707"
      },
      {
        "id": "IC_kwDOAQzde85x1rYa",
        "parentId": null,
        "author": "Odonno",
        "content": "Having a use case for this at the moment, it is frustrating to have an incomplete decoded string. \u0060%20\u0060 works fine but not \u0060%2F\u0060.\r\n\r\nI am gonna go with the solution provided by @JMonsorno until a definitive solution is implemented.",
        "createdAt": "2024-01-25T10:44:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1909896730"
      },
      {
        "id": "IC_kwDOAQzde85ykqRK",
        "parentId": null,
        "author": "rudism",
        "content": "Here\u0027s my slightly simplified version of @JMonsorno\u0027s code that will apply the modified decoding behavior to all \u0060[FromRoute] string\u0060 parameters by default without using custom parameter attributes:\r\n\r\n\u0060\u0060\u0060csharp\r\nusing Microsoft.AspNetCore.Http.Features;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.Mvc.ModelBinding;\r\nusing Microsoft.AspNetCore.Mvc.ModelBinding.Binders;\r\nusing Microsoft.AspNetCore.Mvc.ModelBinding.Metadata;\r\n\r\nnamespace My.Project.Namespace;\r\n\r\npublic class RouteUnsafeBinder : IModelBinder {\r\n  public Task BindModelAsync(ModelBindingContext bindingContext) {\r\n    ArgumentNullException.ThrowIfNull(bindingContext);\r\n\r\n    var modelName = bindingContext.ModelName;\r\n\r\n    // make sure the param we want was extracted in the standard method\r\n    // this will be the partially-decoded value that we\u0027re looking to avoid using here\r\n    if (!bindingContext.ActionContext.RouteData.Values.ContainsKey(modelName))\r\n      throw new NotSupportedException();\r\n\r\n    // wrap the param in curly braces so we can look for it in the [Route(...)] path\r\n    var templateToMatch = $\u0022{{{modelName}}}\u0022;\r\n\r\n    // if this is null then the developer forgot the [Route(...)] attribute\r\n    var request = bindingContext.HttpContext.Request;\r\n    var template = (bindingContext.ActionContext.ActionDescriptor.AttributeRouteInfo?.Template)\r\n      ?? throw new NotSupportedException();\r\n\r\n    // get the raw url that was called\r\n    var rawTarget = bindingContext.HttpContext.Features.Get\u003CIHttpRequestFeature\u003E()?.RawTarget\r\n      ?? throw new NotSupportedException();\r\n    // strip the query string\r\n    var path = new Uri($\u0022{request.Scheme}://{request.Host}{rawTarget}\u0022).AbsolutePath;\r\n\r\n    // go through route template and find which segment we need to extract by index\r\n    var index = template\r\n      .Split(\u0027/\u0027, StringSplitOptions.RemoveEmptyEntries)\r\n      .Select((segment, index) =\u003E new { segment, index })\r\n      .SingleOrDefault(iter =\u003E\r\n          iter.segment.Equals(templateToMatch, StringComparison.OrdinalIgnoreCase))\r\n      ?.index;\r\n\r\n    var segments = path.ToString().Split(\u0027/\u0027, StringSplitOptions.RemoveEmptyEntries);\r\n\r\n    if (index.HasValue) {\r\n      // extract and decode the target path segment\r\n      var rawUrlSegment = segments[index.Value];\r\n      var decoded = Uri.UnescapeDataString(rawUrlSegment);\r\n      bindingContext.Result = ModelBindingResult.Success(decoded);\r\n    } else {\r\n      // can\u0027t think of any scenarios where we\u0027d hit this\r\n      throw new NotSupportedException();\r\n    }\r\n\r\n    return Task.CompletedTask;\r\n  }\r\n}\r\n\r\npublic class FromRouteUnsafeModelBinder : IModelBinderProvider {\r\n  public IModelBinder? GetBinder(ModelBinderProviderContext context) {\r\n    if (context.Metadata is not DefaultModelMetadata metadata) return null;\r\n    var attribs = metadata.Attributes.ParameterAttributes;\r\n    return attribs == null\r\n      ? null\r\n      // handle all [FromRoute] string parameters\r\n      : attribs.Any(pa =\u003E pa.GetType() == typeof(FromRouteAttribute))\r\n          \u0026\u0026 metadata.ModelType == typeof(string)\r\n        ? new BinderTypeModelBinder(typeof(RouteUnsafeBinder))\r\n        : null;\r\n  }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nI apply this binder at startup when I\u0027m configuring services like this:\r\n\r\n\u0060\u0060\u0060csharp\r\n    services.AddControllers(opts =\u003E {\r\n      opts.ModelBinderProviders.Insert(0, new FromRouteUnsafeModelBinder());\r\n    })\r\n\u0060\u0060\u0060",
        "createdAt": "2024-02-01T20:44:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11544#issuecomment-1922212938"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1MzkyODIzMjk=",
    "title": "ConfigureTestServices : since 3.0 does not override my service configuration for addhttpClient",
    "url": "https://github.com/dotnet/aspnetcore/issues/17937",
    "createdAt": "2019-12-17T20:04:27Z",
    "lastUpdated": "2023-06-20T21:45:09Z",
    "body": "### Describe the bug\r\nI have an app that was in ASP .Net Core 2.1 and updated it to 3.1 recently. I have some integration tests in my solution. I used the Microsfot doc when created it : https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-3.1\r\n\r\nWhen I updated everything and tried to keep using my \u0022ConfigureTestServices\u0022, now I have an error like \u0022The HttpClient factory already has a registered client with the type \u0027#######.####\u0027. Client types must be unique. Consider using inheritance to create multiple unique types with the same API surface.\u0022\r\n\r\nFrom what I\u0027ve read seems to be related to changes to IHostBuilder ?\r\n\r\n### To Reproduce\r\nCode could be found here : https://github.com/SebHonorine/BugTest\r\n\r\n2 integration tests are in error :\r\nSubmit_Should_Delete_Cart_After_Post\r\nDelete_Should_Delete_Cart\r\n\r\nJust launch the test that use ConfigureTestServices to ovveride my \u0022AddHttpClient\u0022\r\n\r\nMessage : \r\n--\u003ESystem.InvalidOperationException : The HttpClient factory already has a registered client with the type \u0027AccesTi.Carts.Infrastructure.IDispatcherClient\u0027. Client types must be unique. Consider using inheritance to create multiple unique types with the same API surface.\r\n\r\n\r\n### Further technical details\r\n- ASP.NET Core version 3.1\r\n- Include the output of \u0060dotnet --info\u0060\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.802 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview8-013656 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19405.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28405-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview8-28405-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nI did this post last week : https://github.com/aspnet/AspNetCore.Docs/issues/16100\r\nmight reference it.\r\n\r\nThank you and sorry for bothering you guys.\r\n",
    "upvotes": 5,
    "labels": [
      "investigate",
      "enhancement",
      "area-mvc",
      "severity-minor",
      "affected-medium",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2NzEyNTU1OA==",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "Thanks for contacting us.\r\nWe will look into this during the 5.0 release.",
        "createdAt": "2019-12-18T17:11:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17937#issuecomment-567125558"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2NzE2MjEwMA==",
        "parentId": null,
        "author": "mfjerome",
        "content": "\uD83D\uDC4D \u002B1 for this issue.\r\n\r\nAfter upgrading our project to .NET Core 3.1, a big part of our integration test suite is failing because our mocked http clients are no longer being registered in the tests to override the real implementations from the startup. \r\n\r\nThere is no plan to release bug fixes to .NET Core 3.x before .NET 5 next year?  It feels a bit far..",
        "createdAt": "2019-12-18T18:51:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17937#issuecomment-567162100"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2NzIzOTMyMg==",
        "parentId": null,
        "author": "johnkors",
        "content": "I had a similar experience, where I ended up manually adjusting my container in tests:\r\n\r\n\u0060\u0060\u0060csharp\r\nvar serviceDescriptors = services.Where(descriptor =\u003E descriptor.ServiceType == typeof(IDoStuff));\r\nforeach (var service in serviceDescriptors)\r\n{\r\n    var t = services.Remove(service);\r\n}\r\n\r\nservices.AddSingleton\u003CIDoStuff, Mock\u003E(s =\u003E new Mock());\r\n\u0060\u0060\u0060\r\n\r\nBut adding to the discussion: \r\n\u003EClient types must be unique.\r\n\r\nIn .NET Core 2.1, we could create many HttpClients from the same type (class) using named types. I used named types for configuring the same client with different configuration, [for example as in here](https://github.com/icenorge/PayEx.Client/blob/master/src/PayEx.Client/ServiceCollectionExtensions.cs#L12). Is that no longer supported in .NET Core 3.1?\r\n",
        "createdAt": "2019-12-18T22:22:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17937#issuecomment-567239322"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2NzI0NzAzNA==",
        "parentId": null,
        "author": "SebHonorine",
        "content": "I tried to do the remove trick and it does not work for httpClient. Also, my issue here is that we are loosing the main feature of overriding services as it used to in integration test. \r\nWe loosing an awesome feature in my opinion and waiting .net 5 is kinda hard to accept. But yeah i should have been more carefull during 3.0 preview.",
        "createdAt": "2019-12-18T22:47:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17937#issuecomment-567247034"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2NzQzMjMzNA==",
        "parentId": null,
        "author": "johnkors",
        "content": "Yeah, the manual removal trick I mentioned was not for HttpClientFactory based HttpClient registrations, as that is a bit more involved.\r\n\r\nIt seems like there is a breaking change in .NET Core 3 when it comes to registering multiple HttpClients of the same _type_, meaning you would have to migrate to using named clients instead.\r\n\r\nIn .NET Core 2.1, this was supported:\r\n\u0060\u0060\u0060csharp\r\nservices.AddHttpClient\u003CMyHttpClient\u003E(\u0022client1\u0022);\r\nservices.AddHttpClient\u003CMyHttpClient\u003E(\u0022client2\u0022);\r\nservices.AddHttpClient\u003CMyHttpClient\u003E(\u0022client3\u0022);\r\n\r\n\r\nvar httpClient = _clientFactory.CreateClient(\u0022client1\u0022);\r\n\u0060\u0060\u0060\r\n\r\nIn .NET Core \u003E3.0, the above throws exceptions at startup (\u0060The HttpClient factory already has a registered client with the type\u0060, and we have to either subclass \u0060MyHttpClient\u0060, or migrate to non-typed clients using named registrations instead:\r\n\r\n\u0060\u0060\u0060csharp\r\nservices.AddHttpClient(\u0022client1\u0022);\r\nservices.AddHttpClient(\u0022client2\u0022);\r\nservices.AddHttpClient(\u0022client3\u0022);\r\n\r\nvar httpClient = _clientFactory.CreateClient(\u0022client1\u0022);\r\n\u0060\u0060\u0060\r\n\r\nIt\u0027s not mentioned in the documentation for breaking changes, @mkArtakMSFT ..?\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/core/compatibility/2.2-3.0",
        "createdAt": "2019-12-19T10:30:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17937#issuecomment-567432334"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2NzQ1NTU5Mg==",
        "parentId": null,
        "author": "johnkors",
        "content": "I found this issue about the regression, https://github.com/aspnet/Extensions/pull/2710\r\n\r\nSo it looks like there will be a fix in 3.1.2.",
        "createdAt": "2019-12-19T11:41:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17937#issuecomment-567455592"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2NzYzMjcxNw==",
        "parentId": null,
        "author": "SebHonorine",
        "content": "ho good findings. \r\nSeems to be related. I though the ConfigureTestService was doing a real override of the httpClient of the startup. It looks like it just add the httpClient and doing a kind of validation to change it to the fake one during runtime.\r\nBut thank you.",
        "createdAt": "2019-12-19T19:37:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17937#issuecomment-567632717"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY5NDIyOTA5Mw==",
        "parentId": null,
        "author": "KristofferBerge",
        "content": "@mkArtakMSFT Is this still planned for the 5.0.0 release?",
        "createdAt": "2020-09-17T13:22:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17937#issuecomment-694229093"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwNjMxODgwMw==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-10-09T17:48:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17937#issuecomment-706318803"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1NDEyODczNzM=",
    "title": "WebApplicationFactory does not work from when CreateHostBuilder is from another class \u002B assembly, instead of the entry point assembly.",
    "url": "https://github.com/dotnet/aspnetcore/issues/17994",
    "createdAt": "2019-12-21T05:48:43Z",
    "lastUpdated": "2023-06-20T21:45:10Z",
    "body": "### Related\r\n\r\nThis issue is related to #8210 and (archived) [Hosting #1517](https://github.com/aspnet/Hosting/issues/1517)\r\n\r\n---\r\n## Problem\r\n\r\nThe \u0060WebApplicationFactory\u0060 doesn\u0027t work right when the \u0022entry point assembly\u0022 references _another_ assembly which contains the \u0060CreateHostBuilder\u0060 logic. Current code (I think) requires a method called \u0060CreateHostBuilder\u0060 to exist in the entry point assembly, only.\r\n\r\n---\r\n\r\n## Repo\r\n\r\nA full repo of this problem [can be found here](https://github.com/PureKrome/WebAppFactoryRepo) in GitHub.\r\n\r\n---\r\n## Description\r\n\r\nI have a pretty standard ASP.NET Core 3.1 web api application and i\u0027m trying to use the \u0060WebAppFactory\u0060 to test my web application.\r\n\r\nFor my \u0060program.cs\u0060 file, instead of adding my custom code in there (e.g. wire up Serilog, etc), I actually have a nuget package which I then re-use everywhere. So if I change my \u0060program.cs\u0060 logic, I can just update various webapi applications with the latest nuget, instead of having to change the copy/paste code in each webapi \u0060program.cs\u0060 class. Works really well.\r\n\r\nGiven this type of setup, the \u0060WebApplicationFactory\u0060 fails to \u0060ResolveHostBuilderFactory\u0060 because the _entry point assembly_ doesn\u0027t contain the \u0060CreateHostBuilder\u003CT\u003E\u0060 method. And therefore stuff isn\u0027t working 100% right.\r\n\r\nFor example.\r\n\r\nthis is my \u0060program.cs\u0060\r\n\r\n\u0060\u0060\u0060\r\npublic class Program\r\n{\r\n    public static Task Main()\r\n    {\r\n        var options = new MainOptions\r\n        {\r\n            FirstLoggingInformationMessage = \u0022~~~ Starting FooBar Web Api  ~~~\u0022\r\n        };\r\n\r\n        return Homely.AspNetCore.Hosting.CoreApp.Program.Main\u003CStartup\u003E(options);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThat\u0027s it. Notice how it\u0027s very different to the default template _on first glance_. So my \u0060program.cs\u0060 class literally says: -\u003E call some other assembly\u0027s \u0060Main\u0060 method and do stuff. It\u0027s this _other_ \u0060Main\u003CT\u003E(..)\u0060 method that contains the typical template logic. \r\n\r\n([That \u0060Main\u0060 method logic](https://github.com/Homely/Homely.AspNetCore.Hosting.CoreApp/blob/master/src/Homely.AspNetCore.Hosting.CoreApp/Program.cs#L57) is literally -\u003E setup Serilog, do the normal program.cs templated stuff ... then flush the Serilog on exit. So just logging plumbing wrapped around the _default_ program.cs Main logic).\r\n\r\nOkay - so my entry point assembly just calls some _other_ assembly. Nothing crazy.\r\n\r\nExcept ... it doesn\u0027t work in this case because the \u0060WebApplicationFactory.CreateHostBuilder()\u0060 [code does this](https://github.com/aspnet/AspNetCore/blob/f7f80fdbaaa0283e8e2e89ceed7abf7fe413b17c/src/Mvc/Mvc.Testing/src/WebApplicationFactory.cs#L318)....\r\n\r\n\u0060\u0060\u0060\r\nprotected virtual IHostBuilder CreateHostBuilder()\r\n{\r\n    var hostBuilder = HostFactoryResolver.ResolveHostBuilderFactory\u003CIHostBuilder\u003E(typeof(TEntryPoint).Assembly)?.Invoke(Array.Empty\u003Cstring\u003E());\r\n    \r\n\u003Csnip\u003E\r\n}\r\n\u0060\u0060\u0060\r\n\r\nand [that \u0060RHBF\u0060 method then does this](https://github.com/aspnet/Extensions/blob/master/src/Shared/src/HostFactoryResolver/HostFactoryResolver.cs#L32) ...\r\n\r\n\u0060\u0060\u0060\r\n        public static Func\u003Cstring[], THostBuilder\u003E ResolveHostBuilderFactory\u003CTHostBuilder\u003E(Assembly assembly)\r\n        {\r\n            return ResolveFactory\u003CTHostBuilder\u003E(assembly, CreateHostBuilder);\r\n        }\r\n\r\n        private static Func\u003Cstring[], T\u003E ResolveFactory\u003CT\u003E(Assembly assembly, string name)\r\n        {\r\n            var programType = assembly?.EntryPoint?.DeclaringType;\r\n            if (programType == null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n           \u003Csnip\u003E\r\n        }\r\n\u0060\u0060\u0060\r\n\r\nand the \u0060assembly?.EntryPoint?.DeclaringType\u0060 ends up returning \u0060null\u0060. Sadness :(\r\n\r\nSo .. I\u0027m not sure what can be done here, for this scenario.\r\nIt\u0027s like I wish the code could \u0027see\u0027 that the entry point assembly is not the right place to check, but _another_ assembly which I tell it, is what should be checked.\r\n\r\nSecondly, I also tried this:\r\n\r\n\u0060\u0060\u0060\r\npublic class WebAppFactory : WebApplicationFactory\u003CHomely.AspNetCore.Hosting.CoreApp.Program\u003E\r\n\u0060\u0060\u0060\r\n\r\nbut that errored with: \u0060System.InvalidOperationException : The provided Type \u0027Program\u0027 does not belong to an assembly with an entry point. A common cause for this error is providing a Type from a class library.\u0060 That\u0027s _exactly_ what I\u0027m trying to do, though :P\r\n\r\nSo - would love some help, please?\r\n\r\n---\r\n\r\n\u0060\u0060\u0060\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n\u0060\u0060\u0060",
    "upvotes": 9,
    "labels": [
      "investigate",
      "enhancement",
      "area-mvc",
      "affected-few",
      "severity-major",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwNjMxODgyNg==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-10-09T17:48:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17994#issuecomment-706318826"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg3MDkxMTI5Mg==",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "@davidfowl is this fixed by your recent changes to support top-level statements, etc.?",
        "createdAt": "2021-06-29T20:56:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17994#issuecomment-870911292"
      },
      {
        "id": "IC_kwDOAQzde841ZKL1",
        "parentId": null,
        "author": "davidfowl",
        "content": "Yes it\u0027ll work but @PureKrome your repo would need to override the right method \u0060ConfigureWebHost\u0060 instaed of \u0060CreateHostBuilder\u0060",
        "createdAt": "2021-08-10T07:12:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17994#issuecomment-895787765"
      },
      {
        "id": "IC_kwDOAQzde841ZQDq",
        "parentId": null,
        "author": "PureKrome",
        "content": "\u003E Yes it\u0027ll work but @PureKrome your repo would need to override the right method \u0060ConfigureWebHost\u0060 instaed of \u0060CreateHostBuilder\u0060\r\n\r\nThanks @davidfowl for the reply! The \u0022Yes it\u0027ll work\u0022 ... is this in any specific version of .NET Core? Or in .NET 6?",
        "createdAt": "2021-08-10T07:52:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17994#issuecomment-895811818"
      },
      {
        "id": "IC_kwDOAQzde841ZXep",
        "parentId": null,
        "author": "davidfowl",
        "content": ".NET 6",
        "createdAt": "2021-08-10T08:37:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17994#issuecomment-895842217"
      },
      {
        "id": "IC_kwDOAQzde85MhVHK",
        "parentId": null,
        "author": "javiercn",
        "content": "@davidfowl seems this can be closed?",
        "createdAt": "2022-10-19T10:47:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17994#issuecomment-1283805642"
      },
      {
        "id": "IC_kwDOAQzde85XA72P",
        "parentId": null,
        "author": "ChrisRichner",
        "content": "Hi All\r\n\r\n@PureKrome  I\u0027m currently trying to extract the Startup classes in a Shared Class Library (Nuget) as well.  Facing the extact same Error in .net 7.0.\r\n\r\nDid you find a working solution to this in the meanwhile?\r\n\r\nThanks\r\n\r\n",
        "createdAt": "2023-03-08T09:34:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17994#issuecomment-1459862927"
      },
      {
        "id": "IC_kwDOAQzde85XBcnO",
        "parentId": null,
        "author": "PureKrome",
        "content": "@ChrisRichner nope. I don\u0027t _think_ I did. I\u0027ve also started moving over to minimal api\u0027s .. so _again_ i\u0027m not sure how this will play out. My issue was that I like to use some _common_ startup stuff, which is why I put it into a shared class library / nuget ... which sounds like what you were/are doing. \uD83E\uDEF1\uD83C\uDFFB\u200D\uD83E\uDEF2\uD83C\uDFFB\r\n\r\nI\u0027ve yet to do this with minimal api\u0027s and \u0022see\u0022 how that would look ... let along trying any E2E testing using a WAF with minimal api\u0027s.\r\n\r\nI\u0027m sorry I\u0027m not the messenger of positive news :(",
        "createdAt": "2023-03-08T11:07:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17994#issuecomment-1459997134"
      },
      {
        "id": "IC_kwDOAQzde85XCodX",
        "parentId": null,
        "author": "ChrisRichner",
        "content": "@PureKrome  Thank you for your quick Feedback on this Issue. \r\n\r\nI\u0027ve found a working solution where I only need to \u0022fix\u0022 some lines of code to make it work\r\n\r\n    protected override IWebHostBuilder CreateWebHostBuilder()\r\n    {  \r\n        // Just referencing my Head Project Program.cs. CreateWebHostBuilder() which then just calls the SharedLibrary.CreateWebHostBuilder() internally.\r\n        // Hope this does the trick for my current Project  (fingers crossed :)\r\n        var builder = Program.CreateWebHostBuilder(Array.Empty\u003Cstring\u003E());\r\n\r\n        if (builder is not null)\r\n        {\r\n            return builder.UseEnvironment(Environments.Development);\r\n        }\r\n\r\n        return null;\r\n    }",
        "createdAt": "2023-03-08T15:10:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17994#issuecomment-1460307799"
      },
      {
        "id": "IC_kwDOAQzde85XFiE_",
        "parentId": null,
        "author": "PureKrome",
        "content": "@ChrisRichner interesting! how does this work?",
        "createdAt": "2023-03-09T00:15:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17994#issuecomment-1461068095"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1NDY3NDQyNzM=",
    "title": "Error page can\u0027t handle POST errors",
    "url": "https://github.com/dotnet/aspnetcore/issues/18186",
    "createdAt": "2020-01-08T09:33:58Z",
    "lastUpdated": "2024-03-01T22:55:56Z",
    "body": "I think there is a bug in ExceptionHandlerMiddleware.cs.\r\nif exception is throw during \u0022POST\u0022 then Exception Handler call ExceptionHandlingPath  also using \u0022POST\u0022. I think it should call ExceptionHandlingPath using \u0022GET\u0022, so please add ClearHttpContext following line: \r\n\r\ncontext.Request.Method = \u0022GET\u0022;\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "bug",
      "Needs: Design",
      "area-mvc",
      "severity-nice-to-have",
      "affected-very-few",
      "reevaluate",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3MjI3MTU5Nw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "This seems somewhat reasonable. It would be breaking to existing users though so we\u0027ll have to introduce it as a new option.",
        "createdAt": "2020-01-08T21:45:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-572271597"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3MjI3MTg0OA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "We would review a PR contributing this fix if you\u0027re interested @gbbsoft .",
        "createdAt": "2020-01-08T21:45:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-572271848"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3MjI3NDg3Mw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "One thing that does come to mind though is that since this would have to be an opt-in feature, it might not solve the problem most users would have with this behavior. If the original problem is that the exception page logic is matching against Method and not expecting POST then a simple fix is to change the logic to allow POSTs. If we add this functionality, it would **also** require the user to understand this problem and change their app, so I\u0027m not sure exactly what the value here is.",
        "createdAt": "2020-01-08T21:53:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-572274873"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3MjI4NjAzMg==",
        "parentId": null,
        "author": "gbbsoft",
        "content": "More interesting is when exception is in \u0022DELETE\u0022 or \u0022UPDATE\u0022... :-)",
        "createdAt": "2020-01-08T22:21:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-572286032"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3MjM5MTcyNQ==",
        "parentId": null,
        "author": "rynowak",
        "content": "\u003E One thing that does come to mind though is that since this would have to be an opt-in feature, it might not solve the problem most users would have with this behavior. \r\n\r\nWhy does it have to be opt-in? We wouldn\u0027t add a new option in a patch, so it would be in 5.0 which is a major.\r\n\r\nPlaying devils advocate a bit - this might have been the first time we\u0027ve heard this complaint. Are more people depending on the current behavior?",
        "createdAt": "2020-01-09T05:16:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-572391725"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3MjY5NDcwNw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "@rynowak Sure, we could also just take the break.",
        "createdAt": "2020-01-09T18:38:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-572694707"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3MjY5ODgyOA==",
        "parentId": null,
        "author": "gbbsoft",
        "content": "\u003E We would review a PR contributing this fix if you\u0027re interested @gbbsoft .\r\n\r\nWhat does it mean?",
        "createdAt": "2020-01-09T18:48:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-572698828"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3MjcwMTQzMQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "@gbbsoft I was suggesting that if you wanted to contribute this fix yourself, we\u0027d be happy to review a Pull Request. If not, that\u0027s fine, it\u0027s on our queue and we\u0027ll look at it for a future release.",
        "createdAt": "2020-01-09T18:51:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-572701431"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NTIzNDc5Nw==",
        "parentId": null,
        "author": "Tratcher",
        "content": "FYI this has come up at least once before and we declined to change it. https://github.com/dotnet/aspnetcore/issues/3555. I don\u0027t recommend taking this change now.\r\n\r\nWe want to preserve as much information as possible so the error page can accurately report what the original request was trying to do. Note we preserve the request body, method, query, headers, etc.. Changing only some of them would put the request in an inconsistent state (e.g. a GET request with a Content-Length header, a body, query parameters for some other page, etc..) and the results will be unpredictable.\r\n\r\nChanging the path is necessary for re-routing the requests. The original path is preserved in a request feature: https://github.com/dotnet/aspnetcore/blob/master/src/Middleware/Diagnostics/src/ExceptionHandler/ExceptionHandlerFeature.cs.\r\n\r\nThe alternative is trying to capture the complete state of the original request and creating a completely new request structure for the exception handling. That\u0027s expensive, error prone, breaks extensibility, and fragile to maintain.",
        "createdAt": "2020-01-16T16:32:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-575234797"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NTIzNzg2Mw==",
        "parentId": null,
        "author": "Tratcher",
        "content": "\u003E More interesting is when exception is in \u0022DELETE\u0022 or \u0022UPDATE\u0022... :-)\r\n\r\nThis does mean your exception handling endpoint needs to be capable of handling a wide variety of request. DELETE and UPDATE don\u0027t worry me, you control that endpoint, you control the behavior of any methods applied there.",
        "createdAt": "2020-01-16T16:39:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-575237863"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NTI1MDkxMg==",
        "parentId": null,
        "author": "gbbsoft",
        "content": "@Tratcher So you can add option in ExceptionHandlerOptions: \u0022bool ForceGET\u0022 (or similar) with default to false. This will not break any existing code. \r\n\r\nAnd add in ExceptionHandlerFeature variable to remember original operation.",
        "createdAt": "2020-01-16T17:08:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-575250912"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NTI1NjQxNQ==",
        "parentId": null,
        "author": "Tratcher",
        "content": "That doesn\u0027t address the issue of the request being in an inconsistent state.",
        "createdAt": "2020-01-16T17:22:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-575256415"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NTI1ODYwMA==",
        "parentId": null,
        "author": "vaughanr",
        "content": "@Tratcher your explanation makes sense to me. I did the pr just because it was marked as a good first issue. I\u0027m happy to withdraw it myself and find a better one.",
        "createdAt": "2020-01-16T17:27:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-575258600"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NTI2MTYxNA==",
        "parentId": null,
        "author": "Tratcher",
        "content": "Thanks @vaughanr. At the very least this needs more design before we can proceed to a PR. ",
        "createdAt": "2020-01-16T17:34:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-575261614"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NTI3NTE2NA==",
        "parentId": null,
        "author": "gbbsoft",
        "content": "My main issue was: when exception had been during \u0022POST\u0022 my error page was not called at all.",
        "createdAt": "2020-01-16T18:07:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-575275164"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NTI3ODM5NQ==",
        "parentId": null,
        "author": "Tratcher",
        "content": "@gbbsoft right. That can be addressed in routing like in https://github.com/dotnet/aspnetcore/issues/3555. How is the route set up for your error page?",
        "createdAt": "2020-01-16T18:15:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-575278395"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NTMwMjQ4MQ==",
        "parentId": null,
        "author": "gbbsoft",
        "content": "My application is more complicate, because I have isolated multi-instance of my application, so path is https://gbbdance.gbbsoft.pl/eM_Studio/ where \u0022eM_Studio\u0022 is an instance name. Than I created special ExceptionHandlerMiddleware to pass instance name to /Error, because there is no official way to create Path to Error dynamical.\r\n\r\nExcept it my Config() is \u0022normal\u0022:\r\n\r\n                app.UseMiddleware\u003CGbbDance.Lib.ExceptionHandlerMiddleware\u003E(new object[1]\r\n                    {\r\n                        Microsoft.Extensions.Options.Options.Create(new ExceptionHandlerOptions\r\n                            {\r\n                                ExceptionHandlingPath = new PathString(\u0022/Error\u0022)\r\n                            })\r\n                    });\r\n\r\nAnd /Error was from template with small modifications:\r\n\r\n                 [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]\r\n                 [AllowAnonymous]\r\n                 public class ErrorModel : PageModel\r\n                    {\r\n                        private readonly Data.ApplicationDbContext DB;\r\n                        public ErrorModel(Data.ApplicationDbContext db)\r\n                        {\r\n                            DB = db;\r\n                        }\r\n                        public string RequestId { get; set; }\r\n                        public string Message { get; set; }\r\n                        public bool ShowRequestId =\u003E !string.IsNullOrEmpty(RequestId);\r\n                        public void OnGet()\r\n                        {\r\n                            RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;\r\n                            var exceptionHandlerPathFeature = HttpContext.Features.Get\u003CIExceptionHandlerPathFeature\u003E();\r\n                            if (exceptionHandlerPathFeature != null)\r\n                            {\r\n                                 // get message from exception, sometimes convert it, and save it in DB\r\n                                Message = DB.OurGetExceptionMessageUI(exceptionHandlerPathFeature.Error, exceptionHandlerPathFeature.Path, Request.QueryString.ToString());\r\n                            }\r\n                        }\r\n                    }\r\n\r\nLater I had to add:\r\n\r\n        // 2019-09-19: called then error on any \u0022OnPost\u0022 procedures.\r\n        public void OnPost()\r\n        {\r\n            OnGet();\r\n        }\r\n\r\nLater I rewrote ExceptionHandlerMiddleware to better process exceptions in OnPosts.",
        "createdAt": "2020-01-16T19:17:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-575302481"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NTM1MjgxNg==",
        "parentId": null,
        "author": "Tratcher",
        "content": "So the only part you needed to workaround the title issue is this?\r\n\u0060\u0060\u0060\r\n    public void OnPost()\r\n    {\r\n        OnGet();\r\n    }\r\n\u0060\u0060\u0060\r\n\r\n@pranavkm is there a way to make a razor page handle any method? We should update our error page.\r\nhttps://github.com/dotnet/aspnetcore/blob/44e44931fe4050e82b2877047b5104d779147f78/src/ProjectTemplates/Web.ProjectTemplates/content/RazorPagesWeb-CSharp/Pages/Error.cshtml.cs#L26\r\n\r\n@NTaylorMullen said this would work on a normal controller, so our other template is probably not affected.\r\nhttps://github.com/dotnet/aspnetcore/blob/44e44931fe4050e82b2877047b5104d779147f78/src/ProjectTemplates/Web.ProjectTemplates/content/StarterWeb-CSharp/Controllers/HomeController.cs#L41",
        "createdAt": "2020-01-16T21:22:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-575352816"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NTM2MDg1MQ==",
        "parentId": null,
        "author": "gbbsoft",
        "content": "Looking at this today: Yes. The simple (but I don\u0027t know if the best) is add OnPost with redirection to OnGet in /Error\r\n\r\nThe idea to correct template is very good! I spend some hours to find out why /Error is not called during OnPost.",
        "createdAt": "2020-01-16T21:43:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-575360851"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NTczMTI0Nw==",
        "parentId": null,
        "author": "pranavkm",
        "content": "\u003E @pranavkm is there a way to make a razor page handle any method? We should update our error page.\r\n\r\nThe Page will still execute if no handler matches. A fairly trivial way to fix this would be to lazily evaluate \u0060RequestId\u0060:\r\n\r\n\u0060\u0060\u0060C#\r\npublic string RequestId =\u003E Activity.Current?.Id ?? HttpContext.TraceIdentifier;\r\n\r\npublic bool ShowRequestId =\u003E !string.IsNullOrEmpty(RequestId);\r\n\r\nprivate readonly ILogger\u003CErrorModel\u003E _logger;\r\n\r\npublic ErrorModel(ILogger\u003CErrorModel\u003E logger)\r\n{\r\n    _logger = logger;\r\n}\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2020-01-17T17:59:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-575731247"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY0MTU5MDYxMg==",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-06-09T21:26:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-641590612"
      },
      {
        "id": "IC_kwDOAQzde844w39p",
        "parentId": null,
        "author": "halter73",
        "content": "If we change the behavior here, we should add the original verb to the \u0060IExceptionHandlerPathFeature\u0060.",
        "createdAt": "2021-10-26T21:20:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-952336233"
      },
      {
        "id": "IC_kwDOAQzde85MAZHY",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:26:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18186#issuecomment-1275171288"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1Njc5MDYxNTE=",
    "title": "JsonPatchDocument.ApplyTo\u003CT\u003E should respect validation attributes on the target model",
    "url": "https://github.com/dotnet/aspnetcore/issues/19170",
    "createdAt": "2020-02-19T22:59:26Z",
    "lastUpdated": "2024-02-14T20:24:04Z",
    "body": "We\u0027re adding JSON Patch support to an existing ASP.NET Core 2.2 REST API.\r\n\r\nThe models already have extensive use of custom validation attributes to validate the bodies of normal REST object-oriented HTTP POST and PATCH requests. This is working well.\r\n\r\nHowever, when applying changes to a model object via JSON Patch \u0060JsonPatchDocument.ApplyTo\u003CT\u003E()\u0060, the validation attributes on the classes are ignored and invalid values can be applied to the object via a Replace operation, or to a new subobject via an Add operation, without any error being generated.\r\n\r\nNote that this is distinct from checking the model state after the changes are applied, because depending on how the model classes are coded providing an invalid value for a property will not result in an invalid model. For example, in our model code providing an invalid value to an enum-based property does _not_ cause the property value to change from the existing (valid) value, and does _not_ cause the model class property setter to emit an exception, because if we _did_ throw an exception there we\u0027d get a generic error from the JSON deserializer rather than a specific error from the custom validation attribute we wrote for enumerations; the invalid data in the request does _not_ invalidate the model.\r\n\r\nIdeally, \u0060JsonPatchDocument.ApplyTo\u003CT\u003E()\u0060 should respect any validation attributes on the properties of the object (and subobject(s)) being patched, and should echo any validation failure errors into the \u0060JsonPatchError\u0060 collection it emits so they can be returned to the caller if desired.\r\n\r\nThis was already suggested in https://github.com/aspnet/JsonPatch/issues/18 and https://github.com/dotnet/aspnetcore/issues/7677 and the arguments against it were (in my opinion) weak. Manually coding an extra explicit \u0060TryValidateObject()\u0060 should _not_ be needed. Manually coding an extra explicit \u0060TryValidateModel()\u0060 should _not_ be needed (and again, _may not work_ depending on how the class behaves when given invalid data, so https://github.com/dotnet/aspnetcore/issues/7158 is not a complete solution).\r\n\r\nThe assumption that the validation attributes will be automatically applied by JSON Patch the same way they are applied by a HTTP PATCH or POST of that model is reasonable, and should be supported.",
    "upvotes": 13,
    "labels": [
      "enhancement",
      "area-mvc",
      "feature-json-patch",
      "affected-few",
      "severity-minor",
      "area-minimal",
      "area-networking"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU4OTIxNjMwOA==",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to happen for the coming release. We will reassess the backlog following the current release and consider this item at that time. However, keep in mind that there are many other high priority features with which it will be competing for resources.",
        "createdAt": "2020-02-20T17:35:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/19170#issuecomment-589216308"
      },
      {
        "id": "IC_kwDOAQzde85MAZI8",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:27:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/19170#issuecomment-1275171388"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1Njg2MjczMzU=",
    "title": "Provide api for building Json Pointers.",
    "url": "https://github.com/dotnet/aspnetcore/issues/19211",
    "createdAt": "2020-02-20T22:58:34Z",
    "lastUpdated": "2023-06-20T22:23:09Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\n\r\nThe methods of \u0060JsonPatchDocument\u0060 accept string \u0060path\u0060 parameters which each accept strings with no additional validations.\r\n\r\nIn order to build various patches a user must build these strings appropriately. In my experience that often means joining a significant number of small strings together repeatedly with something like \u0060var path = prefix \u002B \u0022/\u0022 \u002B Utilities.EncodeForJsonPointer(pathitem);\u0060. \r\n\r\nOften I have paths where highly accessed short constant string tokens are used repeatedly and I\u0027ve probably made some poor decisions in how to lay my code out to efficiently produce appropriate responses.\r\n\r\nFor example I might have a controller method that returns a document like this:\r\n\r\n\u0060\u0060\u0060csharp\r\npublic ActionResult DoThing() {\r\n    return JsonPatchDocument.Add(\u0022/\u0022 \u002B Utilities.EncodeForJsonPointer(MyParameterObject.Bindings.DoThing) \u002B \u0022/-\u0022, new Thing());\r\n}\r\n\u0060\u0060\u0060\r\n\r\nMy utility method here is encoding the property according to https://tools.ietf.org/html/rfc6901, effectively:\r\n\r\n\u0060\u0060\u0060csharp\r\npublic static EncodeForJsonPointer(string input) =\u003E input.Replace(\u0022~\u0022, \u0022~0\u0022).Replace(\u0022/\u0022, \u0022~1\u0022);\r\n\u0060\u0060\u0060\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nIt would be nice if there was an easy to use api that provided some guidance on how to make these things.\r\n\r\nHaving a type that is not \u0060string\u0060 in a common namespace that a library author or application dev might reasonably be expected to have at hand would encourage coupling to the improved type and discourage fixating on this primitive form.\r\n\r\n\r\n### Additional context\r\n\r\nAt the very least \u0060JsonPatchDocument\u0060 utilizes string paths that are expected to be in a well known format yet I cannot find any documentation on starting from https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.jsonpatch.jsonpatchdocument if I didn\u0027t already know what I was doing with it.",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-mvc",
      "feature-json-patch",
      "severity-minor",
      "affected-very-few",
      "area-minimal",
      "area-networking"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU5MDI1NzI0OQ==",
        "parentId": null,
        "author": "javiercn",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to happen for the coming release. We will reassess the backlog following the current release and consider this item at that time. However, keep in mind that there are many other high priority features with which it will be competing for resources.",
        "createdAt": "2020-02-24T10:34:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/19211#issuecomment-590257249"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1NzA5MjAwMTQ=",
    "title": "MapHost endpoint routing",
    "url": "https://github.com/dotnet/aspnetcore/issues/19354",
    "createdAt": "2020-02-25T23:32:38Z",
    "lastUpdated": "2024-03-01T22:55:57Z",
    "body": "### Describe the bug\r\nIn endpoint routing today routes are defined around paths. There\u0027s an additional constraint you can add for a host, but only after already defining a path. Instead what I want to do is map all requests to a specific host as the primary pivot. This can be done today but it is inelegant (I have to define a catch-all route), and in-efficient (route values would still be extracted).\r\n\r\n### To Reproduce\r\nHere\u0027s what I have to write today:\r\n\u0060\u0060\u0060 C#\r\nendpoints.Map(\u0022/{**path}\u0022, handler).RequireHost(host);\r\n\u0060\u0060\u0060\r\nProposal:\r\n\u0060\u0060\u0060 C#\r\nendpoints.MapHost(host, handler);\r\n\u0060\u0060\u0060\r\n",
    "upvotes": 4,
    "labels": [
      "enhancement",
      "area-mvc",
      "api-suggestion",
      "feature-routing",
      "severity-nice-to-have",
      "affected-few",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU5MTM4NjM0NQ==",
        "parentId": null,
        "author": "javiercn",
        "content": "@Tratcher can you add a bit more info here?\r\n\r\nWhat is the scenario you have in mind.\r\n\r\n* Would you map the host directly with an implicit catch-all route?\r\n* Would you offer the ability to pass in the route pattern explicitly as an option?\r\n* Do you mean for this to be literally equivalent to \u0060endpoints.Map(\u0022/{**path}\u0022, handler).RequireHost(host)\u0060?",
        "createdAt": "2020-02-26T11:47:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/19354#issuecomment-591386345"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU5MTUwMzA0Mg==",
        "parentId": null,
        "author": "rynowak",
        "content": "We had some discussion offline before this issue was created. I think the key points are:\r\n\r\n- This can be done today but it is inelegant (I have to define a catch-all route)\r\n- in-efficient (route values would still be extracted)\r\n\r\nThe proxy wants this, because it\u0027s a fairly common thing for proxies to route traffic solely on host. The behavior would be the same as a catch-all route. \r\n\r\n- It\u0027s easy for us to make a first-class API for this, I just don\u0027t want it to cause confusion.\r\n- I have a *cool* idea about how to make this non-allocating.\r\n\r\n----\r\n\r\nWe should add support for unnamed route parameters (or optionally \u0060_\u0060 as a prefix for non-capturing\u0060). Unnamed route parameters would not be used during URL parsing, and would not support parameter transformers, nor constraints (since they never have a value). \r\n\r\nI haven\u0027t totally made up my mind yet whether I think a route with unnamed parameters should support link generation, or whether unnamed route parameters can be optional.\r\n\r\nThe ability to control capturing and matching separately is really nice.\r\n\r\nThere\u0027s a big difference when a route has parameters vs when it don\u0027t be. https://github.com/dotnet/aspnetcore/blob/master/src/Http/Routing/src/Matching/DfaMatcher.cs#L115 - routes with parameters allocate a \u0060string\u0060 (for each value), a \u0060KeyValuePair\u003Cstring, object\u003E[]\u0060 for the backing store, and a \u0060RouteValueDictionary\u0060.\r\n\r\nA route without parameters doesn\u0027t allocate **anything** during matching. An RVD is allocated only if someone tries to access it - and they likely won\u0027t for the proxy case.\r\n\r\n----\r\n\r\nThe option of supporting \u0060_\u0060 as a prefix requires more ceremony overall to use, but it\u0027s much more flexible. These routes *can* be used with link generation if you want (since the parameter has a name), so it\u0027s more obvious that they should follow all of the normal rules except for capturing. \r\n",
        "createdAt": "2020-02-26T16:01:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/19354#issuecomment-591503042"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYyODg1NjI0OQ==",
        "parentId": null,
        "author": "Tratcher",
        "content": "For reference, this is how the proxy builds routes today:\r\nhttps://github.com/microsoft/reverse-proxy/blob/1d8a868d7aa12cbc8345c93b40193234f7d400da/src/ReverseProxy/Service/DynamicEndpoints/RuntimeRouteBuilder.cs#L48-L68",
        "createdAt": "2020-05-14T19:58:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/19354#issuecomment-628856249"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYzMjMzOTgyOA==",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "@Tratcher do you want to tackle this?",
        "createdAt": "2020-05-21T20:53:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/19354#issuecomment-632339828"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYzMjM5NzMwNQ==",
        "parentId": null,
        "author": "Tratcher",
        "content": "We\u0027re not blocked by this at the moment, but we\u0027ll see how the perf benchmarks work out. ",
        "createdAt": "2020-05-21T23:31:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/19354#issuecomment-632397305"
      },
      {
        "id": "IC_kwDOAQzde847tuG_",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-12-28T02:50:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/19354#issuecomment-1001841087"
      },
      {
        "id": "IC_kwDOAQzde85MAZJn",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:27:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/19354#issuecomment-1275171431"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU2NjYxNjQ5NDU=",
    "title": "JsonPatchDocument should use System.Text.Json in ASP.NET vNext",
    "url": "https://github.com/dotnet/aspnetcore/issues/24333",
    "createdAt": "2020-07-27T10:08:59Z",
    "lastUpdated": "2025-01-21T22:58:46Z",
    "body": "Related to https://github.com/dotnet/aspnetcore/issues/16968\r\nWill you accept pull-request with this feature?",
    "upvotes": 73,
    "labels": [
      "enhancement",
      "area-mvc",
      "feature-json-patch",
      "affected-few",
      "severity-minor",
      "area-minimal",
      "area-networking"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2NDI2ODMwNw==",
        "parentId": null,
        "author": "xperiandri",
        "content": "I propose to:\r\n* add \u0060IOperation\u0060 interface\r\n* create new package \u0060Microsoft.AspNetCore.JsonPatch.Newtonsoft\u0060 referencing https://github.com/dotnet/aspnetcore/blob/master/src/Features/JsonPatch/src/Operations/Operation.cs as link with conditional compilation namespace\r\n* add package \u0060Microsoft.AspNetCore.JsonPatch.System.Text\u0060 referencing https://github.com/dotnet/aspnetcore/blob/master/src/Features/JsonPatch/src/Operations/Operation.cs as link with conditional compilation namespace",
        "createdAt": "2020-07-27T10:18:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-664268307"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2NDUxMzczOQ==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-07-27T16:52:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-664513739"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2NDUxMzk5MA==",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "Thanks for your willingness to help.\r\nWe would prefer to think more about this first and decide on the direction we want to go before asking for help.",
        "createdAt": "2020-07-27T16:53:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-664513990"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY5MTIwOTk3MA==",
        "parentId": null,
        "author": "null-d3v",
        "content": "There have been many issues reported regarding json patch still being tied to Newtonsoft.Json deserialization. The issues are caused by adverse effects of the association, or directly indicating dissatisfaction with it:\r\nhttps://github.com/dotnet/aspnetcore/issues/12994\r\nhttps://github.com/dotnet/aspnetcore/issues/13938\r\nhttps://github.com/dotnet/aspnetcore/issues/14035\r\nhttps://github.com/dotnet/aspnetcore/issues/16968\r\nhttps://github.com/dotnet/aspnetcore/issues/22216\r\nhttps://github.com/dotnet/aspnetcore/issues/22620\r\n\r\nSystem.Text.Json has merits over Newtonsoft.Json [purported by Microsoft](https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/#user-content-the-future-of-json-in-net-core-30) with indication to fully remove the Json.NET dependency from ASP.NET Core.\r\n\u003E Thus, we want to remove the Json.NET dependency from ASP.NET Core 3.0, so that customers can choose which version to use, without fearing they might accidentally break the underlying platform.\r\n\r\nConfiguration of json patch to only use Newtonsoft.Json processing for patch requests is contrived, requiring building an entire separate service collection with complete MVC to pull an input formatter with appropriate DI.\r\n\r\nTo indicate the intent of complete System.Text.Json support in ASP.NET Core, not have the support, and then to consistently delay in the face of consistent issues is extremely discouraging:\r\nhttps://github.com/dotnet/aspnetcore/issues/12994#issuecomment-521031088\r\nhttps://github.com/dotnet/aspnetcore/issues/14035#issuecomment-532773409\r\nhttps://github.com/dotnet/aspnetcore/issues/14035#issuecomment-552260138\r\nhttps://github.com/dotnet/aspnetcore/issues/16968#issuecomment-620212910\r\n",
        "createdAt": "2020-09-11T17:03:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-691209970"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwMjAzNDkyNA==",
        "parentId": null,
        "author": "erwan-joly",
        "content": "I wonder if the easiest way to have that feature added wouldn\u0027t be to fork the feature project https://github.com/dotnet/aspnetcore/commits/master/src/Features/JsonPatch in another repo\r\nmake it works without newtonsoft \r\nthen ask dotnet/aspnetcore if they want to replace newtonsoft json patch to that one",
        "createdAt": "2020-10-01T10:13:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-702034924"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyNTM4NDgxNg==",
        "parentId": null,
        "author": "??",
        "content": "This is bit of an annoying oversight. Any news?",
        "createdAt": "2020-11-11T12:02:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-725384816"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc0NzcyMzcyMg==",
        "parentId": null,
        "author": "erwan-joly",
        "content": "https://github.com/gregsdennis/json-everything",
        "createdAt": "2020-12-17T21:51:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-747723722"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc2MDMwNzYyNw==",
        "parentId": null,
        "author": "natelaff",
        "content": "\u002B1, Everything is moving to System.Text.Json... Swagger, Refit, etc... this needs to be addressed.",
        "createdAt": "2021-01-14T16:28:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-760307627"
      },
      {
        "id": "IC_kwDOAQzde840y4cz",
        "parentId": null,
        "author": "sulmar",
        "content": "Do you have any plans to use JsonPatchDocument with System.Text.Json in upcoming .NET 6 ?\r\nIt will be very handy in Minimal API.",
        "createdAt": "2021-07-23T16:24:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-885753651"
      },
      {
        "id": "IC_kwDOAQzde84142JF",
        "parentId": null,
        "author": "Havunen",
        "content": "Has anybody found good open source json patch library for system text json?",
        "createdAt": "2021-08-23T20:21:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-904094277"
      },
      {
        "id": "IC_kwDOAQzde8415BeD",
        "parentId": null,
        "author": "erwan-joly",
        "content": "\u003E Has anybody found good open source json patch library for system text json?\r\n\r\nhttps://github.com/dotnet/aspnetcore/issues/24333#issuecomment-747723722",
        "createdAt": "2021-08-23T21:19:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-904140675"
      },
      {
        "id": "IC_kwDOAQzde847qk3D",
        "parentId": null,
        "author": "winromulus",
        "content": "A lot of projects have dropped support for Newtonsoft.Json (especially for annotations)  in favor of System.Text.Json\r\nSome projects, like the Kubernetes C# client rely heavily on support for JSON Patch.\r\nIs it possible to re-evaluate the priority on this in light of increased requests for support on this topic? It\u0027s been years since it was considered low-priority since few projects had been ported to System.Text.Json at the time.",
        "createdAt": "2021-12-25T13:17:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1001016771"
      },
      {
        "id": "IC_kwDOAQzde848jFDl",
        "parentId": null,
        "author": "Grizzlly",
        "content": "@pranavkm I think this is worth looking into. It is a bummer that we have to rely on Newtonsoft.\r\n\r\nThe [code in the documentation](https://docs.microsoft.com/en-us/aspnet/core/web-api/jsonpatch?view=aspnetcore-6.0#json-patch-addnewtonsoftjson-and-systemtextjson) throws \u0060ASP0000\u0060 warning. This should be mentioned in the docs imo.",
        "createdAt": "2022-01-18T20:59:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1015828709"
      },
      {
        "id": "IC_kwDOAQzde84-V1iF",
        "parentId": null,
        "author": "beachwalker",
        "content": " Still a issue? Keeps us from switching.",
        "createdAt": "2022-02-19T07:00:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1045911685"
      },
      {
        "id": "IC_kwDOAQzde84-atIb",
        "parentId": null,
        "author": "Grizzlly",
        "content": "\u003E Still a issue? Keeps us from switching.\r\n\r\nYes.",
        "createdAt": "2022-02-21T19:57:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1047187995"
      },
      {
        "id": "IC_kwDOAQzde84_Ppfc",
        "parentId": null,
        "author": "rqueizan",
        "content": "Install this package Microsoft.AspNetCore.Mvc.Formatters.Json for System.Text.Json",
        "createdAt": "2022-03-07T19:44:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1061066716"
      },
      {
        "id": "IC_kwDOAQzde84_PqmF",
        "parentId": null,
        "author": "erwan-joly",
        "content": "\u003E Install this package Microsoft.AspNetCore.Mvc.Formatters.Json for System.Text.Json\r\n\r\nThis seems to use newtonsoft from Microsoft.AspNetCore.JsonPatch",
        "createdAt": "2022-03-07T19:50:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1061071237"
      },
      {
        "id": "IC_kwDOAQzde84_Psb-",
        "parentId": null,
        "author": "rqueizan",
        "content": "\u003E \u003E Install this package Microsoft.AspNetCore.Mvc.Formatters.Json for System.Text.Json\r\n\u003E \r\n\u003E This seems to use newtonsoft from Microsoft.AspNetCore.JsonPatch\r\n\r\n![image](https://user-images.githubusercontent.com/18214796/157108270-b1efd03e-dcc3-4add-9d90-5a6fb7df4e95.png)\r\n\r\n![image](https://user-images.githubusercontent.com/18214796/157108371-2f4a5cdb-3b66-4bbc-93a4-6e6c4d6ca78e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/18214796/157108498-6c740112-d67d-4707-a006-b8e04afbacf5.png)\r\n\r\nI am not using Newtonsoft.Json!",
        "createdAt": "2022-03-07T19:59:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1061078782"
      },
      {
        "id": "IC_kwDOAQzde84_Putf",
        "parentId": null,
        "author": "erwan-joly",
        "content": "\u003E \u003E \u003E Install this package Microsoft.AspNetCore.Mvc.Formatters.Json for System.Text.Json\r\n\u003E \u003E \r\n\u003E \u003E \r\n\u003E \u003E This seems to use newtonsoft from Microsoft.AspNetCore.JsonPatch\r\n\u003E \r\n\u003E ![image](https://user-images.githubusercontent.com/18214796/157108270-b1efd03e-dcc3-4add-9d90-5a6fb7df4e95.png)\r\n\u003E \r\n\u003E ![image](https://user-images.githubusercontent.com/18214796/157108371-2f4a5cdb-3b66-4bbc-93a4-6e6c4d6ca78e.png)\r\n\u003E \r\n\u003E ![image](https://user-images.githubusercontent.com/18214796/157108498-6c740112-d67d-4707-a006-b8e04afbacf5.png)\r\n\u003E \r\n\u003E I am not using Newtonsoft.Json!\r\n\r\nIndirectly your are https://www.nuget.org/packages/Microsoft.AspNetCore.JsonPatch/",
        "createdAt": "2022-03-07T20:10:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1061088095"
      },
      {
        "id": "IC_kwDOAQzde84_P0Og",
        "parentId": null,
        "author": "rqueizan",
        "content": "\u003E \u003E \u003E \u003E Install this package Microsoft.AspNetCore.Mvc.Formatters.Json for System.Text.Json\r\n\u003E \u003E \u003E \r\n\u003E \u003E \u003E \r\n\u003E \u003E \u003E This seems to use newtonsoft from Microsoft.AspNetCore.JsonPatch\r\n\u003E \u003E \r\n\u003E \u003E \r\n\u003E \u003E ![image](https://user-images.githubusercontent.com/18214796/157108270-b1efd03e-dcc3-4add-9d90-5a6fb7df4e95.png)\r\n\u003E \u003E ![image](https://user-images.githubusercontent.com/18214796/157108371-2f4a5cdb-3b66-4bbc-93a4-6e6c4d6ca78e.png)\r\n\u003E \u003E ![image](https://user-images.githubusercontent.com/18214796/157108498-6c740112-d67d-4707-a006-b8e04afbacf5.png)\r\n\u003E \u003E I am not using Newtonsoft.Json!\r\n\u003E \r\n\u003E Indirectly your are https://www.nuget.org/packages/Microsoft.AspNetCore.JsonPatch/\r\n\r\nYou are rigth\r\n      \u0022Microsoft.AspNetCore.JsonPatch/2.2.0\u0022: {\r\n        \u0022dependencies\u0022: {\r\n          \u0022Microsoft.CSharp\u0022: \u00224.7.0\u0022,\r\n          \u0022Newtonsoft.Json\u0022: \u002211.0.2\u0022\r\n        },\r\n        \u0022runtime\u0022: {\r\n          \u0022lib/netstandard2.0/Microsoft.AspNetCore.JsonPatch.dll\u0022: {\r\n            \u0022assemblyVersion\u0022: \u00222.2.0.0\u0022,\r\n            \u0022fileVersion\u0022: \u00222.2.0.18316\u0022\r\n          }\r\n        }\r\n      },\r\n",
        "createdAt": "2022-03-07T20:34:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1061110688"
      },
      {
        "id": "IC_kwDOAQzde84_c2pt",
        "parentId": null,
        "author": "OpenSpacesAndPlaces",
        "content": "Ran into this too. \r\n\r\nHaving to manually read the body and parse with Newtonsoft since System.Text.Json doesn\u0027t work as the controller default.",
        "createdAt": "2022-03-10T21:38:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1064528493"
      },
      {
        "id": "IC_kwDOAQzde84_c7gT",
        "parentId": null,
        "author": "seanoneill-payroc",
        "content": "also having to steer away from system.text.json because of this",
        "createdAt": "2022-03-10T22:06:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1064548371"
      },
      {
        "id": "IC_kwDOAQzde85Cxn0O",
        "parentId": null,
        "author": "pdevito3",
        "content": "\u002B1 \r\n\r\nSurprised this is marked as \u0060affected-few\u0060 and wasn\u0027t even considered for .NET 7. [The solution in the MS docs](https://docs.microsoft.com/en-us/aspnet/core/web-api/jsonpatch?view=aspnetcore-6.0#add-support-for-json-patch-when-using-systemtextjson) doesn\u0027t even work for me.\r\n\r\n@mkArtakMSFT I know you were thinking through solutions, but do you guys have any more recent updates on this?",
        "createdAt": "2022-05-07T22:08:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1120304398"
      },
      {
        "id": "IC_kwDOAQzde85DNqj0",
        "parentId": null,
        "author": "pdevito3",
        "content": "So I was just playing around with what it might look like to convert my controllers to minimal APIs and noticed that we don\u0027t currently have \u0060MapPatch\u0060, but that it\u0027s coming in .NET 7.\r\n\r\n@davidfowl @captainsafia I saw that you guys had some traffic on that in #36198 and want to raise the flag on this issue in case you\u0027re not aware. Thinking many people will reach for a \u0060Patchdoc\u0060 when setting it up and this will block that option for them as far as I can tell -- unless there\u0027s a way to set that patch endpoint to use newtonsoft explicitly but even so, that would be somewhat hacky.",
        "createdAt": "2022-05-16T13:12:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1127655668"
      },
      {
        "id": "IC_kwDOAQzde85DiAKq",
        "parentId": null,
        "author": "davidfowl",
        "content": "@pdevito3 Thanks! I\u0027m not sure we\u0027ll be able to pull this off for .NET 7 as patch support for System.Text.Json is currently unplanned but this is something we should get ahead of at least in the docs. Maybe we can write a sample converter to make this work in the mean time.",
        "createdAt": "2022-05-20T14:42:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1132987050"
      },
      {
        "id": "IC_kwDOAQzde85DknEm",
        "parentId": null,
        "author": "Havunen",
        "content": "I started implementing this myself, its based on aspnet version. https://github.com/Havunen/SystemTextJsonPatch",
        "createdAt": "2022-05-21T17:07:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1133670694"
      },
      {
        "id": "IC_kwDOAQzde85Dk_In",
        "parentId": null,
        "author": "davidfowl",
        "content": "@Havunen WONDERFUL! We should point people to this for now. Are there any other implementations that you are aware of?\r\n",
        "createdAt": "2022-05-21T21:14:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1133769255"
      },
      {
        "id": "IC_kwDOAQzde85DlDEv",
        "parentId": null,
        "author": "erwan-joly",
        "content": "\u003E @Havunen WONDERFUL! We should point people to this for now. Are there any other implementations that you are aware of?\r\n\r\nhttps://github.com/dotnet/aspnetcore/issues/24333#issuecomment-747723722",
        "createdAt": "2022-05-21T23:54:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1133785391"
      },
      {
        "id": "IC_kwDOAQzde85EmIZW",
        "parentId": null,
        "author": "natilivni",
        "content": "Any update on this?",
        "createdAt": "2022-06-09T08:47:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1150846550"
      },
      {
        "id": "IC_kwDOAQzde85EmItn",
        "parentId": null,
        "author": "davidfowl",
        "content": "We are not doing this for .NET 7, the work isn\u0027t planned and doesn\u0027t fit into the release based on the other work we\u0027re already doing.\r\n\r\nPS: This item is in the backlog.",
        "createdAt": "2022-06-09T08:48:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1150847847"
      },
      {
        "id": "IC_kwDOAQzde85FBuxZ",
        "parentId": null,
        "author": "stevendarby",
        "content": "Could MS please clarify what their commitment to AspNetCore.JsonPatch is, as it\u0027s looking pretty shaky to me. Reasons for thinking this:\r\n- STJ was released with .NET Core 3.0 in late 2019 and with no support now or in upcoming 7.0, late 2023 is the earliest it could be supported. 4 years!\r\n- Bugs and requests against it just seem to get backlogged (including two of mine) despite very little activity in that area. I think JsonPatch sharing a backlog with core ASP.NET Core means it\u0027ll always be deprioritised unless a conscious push is made.\r\n- Key MS developers are endorsing 3rd party libraries instead \uD83D\uDE1F ",
        "createdAt": "2022-06-16T20:03:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1158081625"
      },
      {
        "id": "IC_kwDOAQzde85FEPCA",
        "parentId": null,
        "author": "Havunen",
        "content": "\u003E Bugs and requests against it just seem to get backlogged (including two of mine) despite very little activity in that area. I think JsonPatch sharing a backlog with core ASP.NET Core means it\u0027ll always be deprioritised unless a conscious push is made \r\n\r\nCan you try out SystemTextJsonPatch? I believe I have fixed both the issues you reported about AspNetCore.JsonPatch.\r\nI know its not the official Microsoft package but personally I just needed a package that works and does not depend on Newtonsoft.",
        "createdAt": "2022-06-17T10:32:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1158738048"
      },
      {
        "id": "IC_kwDOAQzde85SnPX5",
        "parentId": null,
        "author": "hexjourney",
        "content": "This issue doesn\u0027t impact a small number of customers...",
        "createdAt": "2023-01-17T20:35:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1386018297"
      },
      {
        "id": "IC_kwDOAQzde85VOixR",
        "parentId": null,
        "author": "carlblanchard",
        "content": "Why isn\u0027t System.Text.Json adopting JsonPatchDocument? \r\nIt\u0027s a web standard technology, after all, if you want people to adopt System.Text.Json over NewtonSoft you\u0027re going to address people\u0027s demands not just ignore them and say it\u0027s on the backlog. ",
        "createdAt": "2023-02-14T14:54:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1429875793"
      },
      {
        "id": "IC_kwDOAQzde85Wc-rO",
        "parentId": null,
        "author": "payoff",
        "content": "@davidfowl any plan to release in .NET 8?",
        "createdAt": "2023-03-01T16:25:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1450437326"
      },
      {
        "id": "IC_kwDOAQzde85dsg2K",
        "parentId": null,
        "author": "lennieh",
        "content": "Minimal API in .Net 7 supports patch operations. Has anyone worked out how to use this with JsonPatchDocument??",
        "createdAt": "2023-06-01T12:17:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1571949962"
      },
      {
        "id": "IC_kwDOAQzde85dtZE9",
        "parentId": null,
        "author": "sulmar",
        "content": "You can do it, step by step, this way, for example:\r\n\r\n\u0060\u0060\u0060 bash\r\ndotnet add package Newtonsoft.Json\r\n\u0060\u0060\u0060 \r\n\r\n\u0060\u0060\u0060 csharp\r\napp.MapPatch(\u0022/\u0022, async (HttpContext context) =\u003E\r\n{\r\n    if (context.Request.HasJsonContentType())\r\n    {       \r\n        using var reader = new StreamReader(context.Request.Body);\r\n        var json = await reader.ReadToEndAsync();\r\n        var doc = JsonConvert.DeserializeObject\u003CJsonPatchDocument\u003E(json);\r\n\r\n        var originalDocument = new Models.Document();  // change to get an entity from database\r\n        doc.ApplyTo(originalDocument);\r\n\r\n        return Results.Ok(originalDocument);        \r\n    }\r\n    return Results.BadRequest();\r\n});\r\n\r\n\r\npublic class Document\r\n{\r\n    public string Baz { get; set; } = \u0022qux\u0022;\r\n    public string[] Hello { get; set; }\r\n    public string Foo { get; set; } = \u0022bar\u0022;\r\n}\r\n\r\n\u0060\u0060\u0060\r\n\r\nWith this solution Newtonsoft.Json is used only for single endpoint.\r\n\r\nMaybe someone knows a better solution?",
        "createdAt": "2023-06-01T14:38:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1572180285"
      },
      {
        "id": "IC_kwDOAQzde85dtfro",
        "parentId": null,
        "author": "payoff",
        "content": "\u003E Maybe someone knows a better solution?\r\n\r\nProbably use: \r\nhttps://github.com/Havunen/SystemTextJsonPatch\r\n",
        "createdAt": "2023-06-01T14:52:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1572207336"
      },
      {
        "id": "IC_kwDOAQzde85dtq6t",
        "parentId": null,
        "author": "deleteLater",
        "content": "For those who prefer to avoid adding the \u0060Microsoft.AspNetCore.Mvc.NewtonsoftJson\u0060 package and an extra input formatter, as mentioned in the [documentation](https://learn.microsoft.com/en-us/aspnet/core/web-api/jsonpatch?view=aspnetcore-6.0#add-support-for-json-patch-when-using-systemtextjson), here\u0027s an alternative solution:\r\n\r\n\u0060\u0060\u0060csharp\r\n[HttpPatch]\r\npublic async Task\u003CApiResponse\u003Cbool\u003E\u003E PatchAsync([FromBody] JsonElement jsonElement)\r\n{\r\n    // Use Newtonsoft.Json.JsonConvert to deserialize the JSON string into a JsonPatchDocument\r\n    var patch = JsonConvert.DeserializeObject\u003CJsonPatchDocument\u003E(jsonElement.GetRawText());\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2023-06-01T15:18:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1572253357"
      },
      {
        "id": "IC_kwDOAQzde85dtuCo",
        "parentId": null,
        "author": "sulmar",
        "content": "Thank to @deleteLater we can use in Minimal Api:\r\n\r\n\u0060\u0060\u0060 csharp\r\napp.MapPatch(\u0022/\u0022, async ([FromBody] JsonElement jsonElement) =\u003E\r\n{\r\n      var json = jsonElement.GetRawText();\r\n\r\n      var doc = JsonConvert.DeserializeObject\u003CJsonPatchDocument\u003E(json);\r\n\r\n      var originalDocument = new JsonPatchDocumentMinimalApi.Models.Document();\r\n      doc.ApplyTo(originalDocument);\r\n\r\n      return Results.Ok(originalDocument);\r\n});\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2023-06-01T15:26:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1572266152"
      },
      {
        "id": "IC_kwDOAQzde85dtvuJ",
        "parentId": null,
        "author": "sulmar",
        "content": "I\u0027m looking for better implementation yet.\r\n\r\nI thought about using my own implemention of IModelBinder but in the minimal api seems not to be supported.\r\n\r\nIn .NET 7 for Custom Binding we can use only  TryParse or BindAsync methods:\r\nhttps://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/parameter-binding?view=aspnetcore-7.0#custom-binding\r\n\r\nIt is easy to add for own model but not for JsonPatchDocument. \r\n\r\n",
        "createdAt": "2023-06-01T15:28:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1572273033"
      },
      {
        "id": "IC_kwDOAQzde85gA-bE",
        "parentId": null,
        "author": "tjmcdonough",
        "content": "@Havunen solution works very well. I have just given the GitHub project a star :) Highly recommend we all use this until Microsoft comes up with a solution",
        "createdAt": "2023-06-28T06:52:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1610868420"
      },
      {
        "id": "IC_kwDOAQzde85kUCtf",
        "parentId": null,
        "author": "zinov",
        "content": "\u003E I\u0027m looking for better implementation yet.\r\n\u003E \r\n\u003E I thought about using my own implemention of IModelBinder but in the minimal api seems not to be supported.\r\n\u003E \r\n\u003E In .NET 7 for Custom Binding we can use only TryParse or BindAsync methods: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/parameter-binding?view=aspnetcore-7.0#custom-binding\r\n\u003E \r\n\u003E It is easy to add for own model but not for JsonPatchDocument.\r\n\r\nthis is something that should be coming with the framework instead of doing a custom model binder to map all parameters. Microsoft should follow the standard: https://datatracker.ietf.org/doc/html/rfc6902",
        "createdAt": "2023-08-17T21:02:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-1682975583"
      },
      {
        "id": "IC_kwDOAQzde8562v36",
        "parentId": null,
        "author": "Arkovski",
        "content": "[mkArtakMSFT](https://github.com/mkArtakMSFT) you\u0027re thinking quite a lot, maybe time to do anything? :) ",
        "createdAt": "2024-04-17T12:42:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-2061172218"
      },
      {
        "id": "IC_kwDOAQzde86C7K17",
        "parentId": null,
        "author": "rohitvipin",
        "content": "Happy 4 year anniversary for a very important issue :(",
        "createdAt": "2024-06-28T09:59:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-2196548987"
      },
      {
        "id": "IC_kwDOAQzde86LQpkb",
        "parentId": null,
        "author": "DanielThyselius",
        "content": "\u003E \u003E Bugs and requests against it just seem to get backlogged (including two of mine) despite very little activity in that area. I think JsonPatch sharing a backlog with core ASP.NET Core means it\u0027ll always be deprioritised unless a conscious push is made\r\n\u003E \r\n\u003E Can you try out SystemTextJsonPatch? I believe I have fixed both the issues you reported about AspNetCore.JsonPatch. I know its not the official Microsoft package but personally I just needed a package that works and does not depend on Newtonsoft.\r\n\r\nI\u0027ve tried this out and it worked out of the box, brilliant work!",
        "createdAt": "2024-09-07T18:20:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-2336397595"
      },
      {
        "id": "IC_kwDOAQzde86S_v__",
        "parentId": null,
        "author": "lincoln42",
        "content": "Its niggling and neglected issues like this that cause many enterprise projects to abandon using the .Net framework entirely and move other API frameworks like Python FastAPI (https://medium.com/@david.danier/how-to-handle-patch-requests-with-fastapi-c9a47ac51f04) or Java SpringBoot 3 (https://www.baeldung.com/spring-rest-json-patch). \n\n.Net is regarded as incomplete for enterprise work due to such issues and makes advocating for it\u0027s continued use in the enterprise really difficult when competing frameworks offer a friction free developer experience.",
        "createdAt": "2024-11-09T11:47:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24333#issuecomment-2466185215"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3MTEyNTA2NzQ=",
    "title": "Microsoft.dotnet-openapi should generate files in the project hive",
    "url": "https://github.com/dotnet/aspnetcore/issues/26428",
    "createdAt": "2020-09-29T15:56:47Z",
    "lastUpdated": "2023-06-20T22:09:50Z",
    "body": "When using **Microsoft.dotnet-openapi** tool, files are generated in the _/obj_ folder.\r\nIn some projects, we are required to extend generated files by using _partial_ or extension methods.\r\nTo make this possible, it would be helpful to generate files inside the project hive.\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-mvc",
      "feature-openapi",
      "affected-very-few",
      "severity-blocking",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwMDg0MjIzOQ==",
        "parentId": null,
        "author": "pranavkm",
        "content": "@ddobric it shouldn\u0027t really matter where the code is generated. The compiler will work fine as long as the generated types are partial. Is there a specific scenario that is blocked?",
        "createdAt": "2020-09-29T16:49:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26428#issuecomment-700842239"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwMTU2MzA2Ng==",
        "parentId": null,
        "author": "ddobric",
        "content": "It is more about how to deal with generates code. It is not fist time that we make usage of generated code. We had and have that for long time. For example WCF. \nExpectation so following:\n1. Devs generate code with out of VS and do whatever they think it is right .\n2. Devs use VS to generate code. On this case dev1 generates code in obj folder. In the meantime service was changed and dev one opens the solution. I guess, VS will generate code against new service version, which might not be right one. \nIt would be helpful to generate code in as the part of the solution, so we can commit it to the repo. In that case regeneration of the code should happen explicitly on demand.\nSome projects required that and some don\u0027t. It should be good to support both approaches.\n\nThanks \n",
        "createdAt": "2020-09-30T18:24:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26428#issuecomment-701563066"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwMjI2MjY1MA==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-10-01T16:47:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26428#issuecomment-702262650"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3MTI4MTIzMjc=",
    "title": "Implement an alternative to startup running twice when using WebApplicationFactory",
    "url": "https://github.com/dotnet/aspnetcore/issues/26487",
    "createdAt": "2020-10-01T12:49:24Z",
    "lastUpdated": "2023-06-20T21:54:51Z",
    "body": "So, I know it\u0027s [by design](https://github.com/dotnet/aspnetcore/issues/19404#issuecomment-593653580), but I\u2019m running into another instance where startup getting called twice when using \u0060WebApplicationFactory\u0060 is causing me major headaches.\r\n\r\nI added some code for this specific instance below, but the short version is that when I\u2019m adding Auth into my API, it runs fine when doing startup normally, but when using the web host factory it\u0027s messing up my auth setup with a \u0060System.InvalidOperationException : Scheme already exists: Identity.Application error.\u0060 error. \r\n\r\n## New Feature Request\r\nMaybe I\u2019m just not getting the best way to override things, but in my mind it makes more sense to have (at the the option of using) a distinct StartupTesting or something of that nature that can be run once to configure my testing host exactly how I want. This is how Laravel does it an it seems more manageable. \r\n\u00A0\r\n\u00A0Related to #19404\r\n\u00A0\r\n\r\n## Details on this particular error\r\nWhen using Auth, the API will run fine, but the integration tests will break, throwing a \u0060-------- System.InvalidOperationException : Scheme already exists: Identity.Application\u0060 error.\r\n\r\nI started googling for this and it seems like the main resolution is generally to remove \u0060AddDefaultIdentity\u0060 to either stop a clash with \u0060IdentityHostingStartup\u0060 or prevent [IdentityHostintgStartup.cs](https://stackoverflow.com/questions/51161729/addidentity-fails-invalidoperationexception-scheme-already-exists-identity) from causing some overlap.\r\n\r\nI\u0027m not using AddDefaultIdentity and I\u0027m not seeing a IdentityHostintgStartup.cs get generated, so I\u0027m not quite sure what the deal is here. Presumably, something is calling \u0060AddAuthentication\u0060 with the same identity scheme twice. This may be be due to \u0060CustomWebApplicationFactory\u0060 running through startup multiple times, but I need to investigate more.\r\n\r\nIt does look like, when debugging any integration test that \u0060services.AddIdentity\u003CApplicationUser, IdentityRole\u003E().AddEntityFrameworkStores\u003CIdentityDbContext\u003E().AddDefaultTokenProviders();\u0060 is getting hit twice and, when commenting that line out, I get a different error: \u0060-------- System.InvalidOperationException : Scheme already exists: Bearer\u0060 which, again, is presumably happening because of startup getting run twice in \u0060CustomWebApplicationFactory\u0060.\r\n\r\nWebAppFactory\r\n\u0060\u0060\u0060csharp\r\n\r\nnamespace VetClinic.Api.Tests\r\n{\r\n    using Infrastructure.Persistence.Contexts;\r\n    using Microsoft.AspNetCore.Hosting;\r\n    using Microsoft.AspNetCore.Mvc.Testing;\r\n    using Microsoft.EntityFrameworkCore;\r\n    using Microsoft.Extensions.DependencyInjection;\r\n    using Respawn;\r\n    using System;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using System.Net.Http;\r\n    using System.Text;\r\n    using System.Threading.Tasks;\r\n    using WebApi;\r\n\r\n    public class CustomWebApplicationFactory : WebApplicationFactory\u003CStartup\u003E\r\n    {\r\n        // checkpoint for respawn to clear the database when spenning up each time\r\n        private static Checkpoint checkpoint = new Checkpoint\r\n        {\r\n            \r\n        };\r\n\r\n        protected override void ConfigureWebHost(IWebHostBuilder builder)\r\n        {\r\n            builder.UseEnvironment(\u0022Testing\u0022);\r\n\r\n            builder.ConfigureServices(async services =\u003E\r\n            {\r\n                services.AddEntityFrameworkInMemoryDatabase();\r\n\r\n                // Create a new service provider.\r\n                var provider = services\r\n                    .AddEntityFrameworkInMemoryDatabase()\r\n                    .BuildServiceProvider();\r\n\r\n                // Add a database context (VetClinicDbContext) using an in-memory \r\n                // database for testing.\r\n                services.AddDbContext\u003CVetClinicDbContext\u003E(options =\u003E\r\n                {\r\n                    options.UseInMemoryDatabase(\u0022InMemoryDbForTesting\u0022);\r\n                    options.UseInternalServiceProvider(provider);\r\n                });\r\n\r\n                // Build the service provider.\r\n                var sp = services.BuildServiceProvider();\r\n\r\n                // Create a scope to obtain a reference to the database\r\n                // context (ApplicationDbContext).\r\n                using (var scope = sp.CreateScope())\r\n                {\r\n                    var scopedServices = scope.ServiceProvider;\r\n                    var db = scopedServices.GetRequiredService\u003CVetClinicDbContext\u003E();\r\n\r\n                    // Ensure the database is created.\r\n                    db.Database.EnsureCreated();\r\n\r\n                    try\r\n                    {\r\n                        await checkpoint.Reset(db.Database.GetDbConnection());\r\n                    }\r\n                    catch\r\n                    {\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        public HttpClient GetAnonymousClient()\r\n        {\r\n            return CreateClient();\r\n        }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nStartup\r\n\u0060\u0060\u0060csharp\r\nnamespace WebApi\r\n{\r\n    using Application;\r\n    using Microsoft.AspNetCore.Builder;\r\n    using Microsoft.AspNetCore.Hosting;\r\n    using Microsoft.Extensions.Configuration;\r\n    using Microsoft.Extensions.DependencyInjection;\r\n    using Infrastructure.Persistence;\r\n    using Infrastructure.Shared;\r\n    using Infrastructure.Persistence.Seeders;\r\n    using Infrastructure.Persistence.Contexts;\r\n    using WebApi.Extensions;\r\n    using Infrastructure.Identity;\r\n    using Infrastructure.Identity.Entities;\r\n    using Microsoft.AspNetCore.Identity;\r\n    using Infrastructure.Identity.Seeders;\r\n    using WebApi.Services;\r\n    using Application.Interfaces;\r\n\r\n    public class StartupDevelopment\r\n    {\r\n        public IConfiguration _config { get; }\r\n        public StartupDevelopment(IConfiguration configuration)\r\n        {\r\n            _config = configuration;\r\n        }\r\n\r\n        // This method gets called by the runtime. Use this method to add services to the container.\r\n        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddCorsService(\u0022MyCorsPolicy\u0022);\r\n            services.AddApplicationLayer();\r\n            services.AddIdentityInfrastructure(_config);\r\n            services.AddPersistenceInfrastructure(_config);\r\n            services.AddSharedInfrastructure(_config);\r\n            services.AddControllers()\r\n                .AddNewtonsoftJson();\r\n            services.AddApiVersioningExtension();\r\n            services.AddHealthChecks();\r\n            services.AddSingleton\u003CICurrentUserService, CurrentUserService\u003E();\r\n\r\n            #region Dynamic Services\r\n            services.AddSwaggerExtension();\r\n            #endregion\r\n        }\r\n\r\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n        {\r\n            app.UseDeveloperExceptionPage();\r\n\r\n            #region Entity Context Region - Do Not Delete\r\n\r\n                using (var context = app.ApplicationServices.GetService\u003CVetClinicDbContext\u003E())\r\n                {\r\n                    context.Database.EnsureCreated();\r\n\r\n                    #region VetClinicDbContext Seeder Region - Do Not Delete\r\n                    \r\n                    PetSeeder.SeedSamplePetData(app.ApplicationServices.GetService\u003CVetClinicDbContext\u003E());\r\n                    VetSeeder.SeedSampleVetData(app.ApplicationServices.GetService\u003CVetClinicDbContext\u003E());\r\n                    CitySeeder.SeedSampleCityData(app.ApplicationServices.GetService\u003CVetClinicDbContext\u003E());\r\n                    #endregion\r\n                }\r\n\r\n            #endregion\r\n\r\n            #region Identity Context Region - Do Not Delete\r\n\r\n            var userManager = app.ApplicationServices.GetService\u003CUserManager\u003CApplicationUser\u003E\u003E();\r\n            var roleManager = app.ApplicationServices.GetService\u003CRoleManager\u003CIdentityRole\u003E\u003E();\r\n            RoleSeeder.SeedDemoRolesAsync(roleManager);\r\n\r\n            // user seeders -- do not delete this comment\r\n            pdevitoSeeder.SeedUserAsync(userManager);\r\n\r\n            #endregion\r\n\r\n            app.UseCors(\u0022MyCorsPolicy\u0022);\r\n\r\n            app.UseRouting();\r\n            app.UseAuthentication();\r\n            app.UseAuthorization();\r\n            app.UseErrorHandlingMiddleware();\r\n            app.UseEndpoints(endpoints =\u003E\r\n            {\r\n                endpoints.MapHealthChecks(\u0022/api/health\u0022);\r\n                endpoints.MapControllers();\r\n            });\r\n\r\n            #region Dynamic App\r\n            app.UseSwaggerExtension();\r\n            #endregion\r\n        }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nIdentity Extension\r\n\u0060\u0060\u0060csharp\r\nnamespace Infrastructure.Identity\r\n{\r\n    using Application.Exceptions;\r\n    using Application.Interfaces;\r\n    using Application.Wrappers;\r\n    using Domain.Settings;\r\n    using Infrastructure.Identity.Entities;\r\n    using Infrastructure.Identity.Services;\r\n    using Microsoft.AspNetCore.Authentication.JwtBearer;\r\n    using Microsoft.AspNetCore.Http;\r\n    using Microsoft.AspNetCore.Identity;\r\n    using Microsoft.EntityFrameworkCore;\r\n    using Microsoft.Extensions.Configuration;\r\n    using Microsoft.Extensions.DependencyInjection;\r\n    using Microsoft.IdentityModel.Tokens;\r\n    using Newtonsoft.Json;\r\n    using System;\r\n    using System.Text;\r\n\r\n    public static class ServiceExtensions\r\n    {\r\n        public static void AddIdentityInfrastructure(this IServiceCollection services, IConfiguration configuration)\r\n        {\r\n            /*services.AddDbContext\u003CIdentityDbContext\u003E(options =\u003E\r\n                options.UseInMemoryDatabase(\u0022IdentityDb\u0022));*/\r\n            if (configuration.GetValue\u003Cbool\u003E(\u0022UseInMemoryDatabase\u0022))\r\n            {\r\n                services.AddDbContext\u003CIdentityDbContext\u003E(options =\u003E\r\n                    options.UseInMemoryDatabase(\u0022IdentityDb\u0022));\r\n            }\r\n            else\r\n            {\r\n                services.AddDbContext\u003CIdentityDbContext\u003E(options =\u003E\r\n                options.UseSqlServer(\r\n                    configuration.GetConnectionString(\u0022IdentityConnection\u0022),\r\n                    b =\u003E b.MigrationsAssembly(typeof(IdentityDbContext).Assembly.FullName)));\r\n            }\r\n            services.AddIdentity\u003CApplicationUser, IdentityRole\u003E().AddEntityFrameworkStores\u003CIdentityDbContext\u003E().AddDefaultTokenProviders();\r\n\r\n            #region Services\r\n            services.AddScoped\u003CIAccountService, AccountService\u003E();\r\n            #endregion\r\n\r\n            // for craftsman updates to work appropriately, do not remove identity option lines\r\n            services.Configure\u003CIdentityOptions\u003E(options =\u003E\r\n            {\r\n                options.User.RequireUniqueEmail = true;\r\n\r\n                options.Password.RequiredLength = 6;\r\n                options.Password.RequireDigit = true;\r\n                options.Password.RequireLowercase = true;\r\n                options.Password.RequireUppercase = true;\r\n                options.Password.RequireNonAlphanumeric = true;\r\n            });\r\n\r\n            services.Configure\u003CJwtSettings\u003E(configuration.GetSection(\u0022JwtSettings\u0022));\r\n            services.AddAuthentication(options =\u003E\r\n            {\r\n                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\r\n                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\r\n            })\r\n                .AddJwtBearer(o =\u003E\r\n                {\r\n                    o.RequireHttpsMetadata = false;\r\n                    o.SaveToken = false;\r\n                    o.TokenValidationParameters = new TokenValidationParameters\r\n                    {\r\n                        ValidateIssuerSigningKey = true,\r\n                        ValidateIssuer = true,\r\n                        ValidateAudience = true,\r\n                        ValidateLifetime = true,\r\n                        ClockSkew = TimeSpan.Zero,\r\n                        ValidIssuer = configuration[\u0022JwtSettings:Issuer\u0022],\r\n                        ValidAudience = configuration[\u0022JwtSettings:Audience\u0022],\r\n                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration[\u0022JwtSettings:Key\u0022]))\r\n                    };\r\n                    o.Events = new JwtBearerEvents()\r\n                    {\r\n                        OnAuthenticationFailed = c =\u003E\r\n                        {\r\n                            c.NoResult();\r\n                            c.Response.StatusCode = 500;\r\n                            c.Response.ContentType = \u0022text/plain\u0022;\r\n                            return c.Response.WriteAsync(c.Exception.ToString());\r\n                        },\r\n                        OnChallenge = context =\u003E\r\n                        {\r\n                            context.HandleResponse();\r\n                            context.Response.StatusCode = 401;\r\n                            context.Response.ContentType = \u0022application/json\u0022;\r\n                            var result = JsonConvert.SerializeObject(new Response\u003Cstring\u003E(\u0022You are not Authorized\u0022));\r\n                            return context.Response.WriteAsync(result);\r\n                        },\r\n                        OnForbidden = context =\u003E\r\n                        {\r\n                            context.Response.StatusCode = 403;\r\n                            context.Response.ContentType = \u0022application/json\u0022;\r\n                            var result = JsonConvert.SerializeObject(new Response\u003Cstring\u003E(\u0022You are not authorized to access this resource\u0022));\r\n                            return context.Response.WriteAsync(result);\r\n                        },\r\n                    };\r\n                });\r\n        }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\r\n\r\n",
    "upvotes": 12,
    "labels": [
      "investigate",
      "enhancement",
      "area-mvc",
      "affected-few",
      "severity-major",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwMjc5NzU1MQ==",
        "parentId": null,
        "author": "pdevito3",
        "content": "Realized I forgot to tag you guys for continuity. \n\n@Tratcher \n@davidfowl \n@anurse\n",
        "createdAt": "2020-10-02T15:24:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-702797551"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwMjg0NzIyNQ==",
        "parentId": null,
        "author": "Tratcher",
        "content": "I\u0027m confused by your base assertion here that Startup is running twice. That\u0027s not what the comments in the linked issue say.\r\n\r\nYou have multiple ConfigureServices methods and one runs after the other, but no single ConfigureServices method is being run twice, correct?",
        "createdAt": "2020-10-02T17:02:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-702847225"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwMzYxMTAwMQ==",
        "parentId": null,
        "author": "pdevito3",
        "content": "@Tratcher yeah, let me try to clarify. \r\n\r\nIn this instance and the linked instance, my code runs fine when doing a normal startup, but when running integration tests, it would seem that the entire ConfigureServices method is running twice, i.e. if I put a breakpoint on, any line in the \u0060AddIdentityInfrastructure\u0060 method, it will get hit twice when running \u0060WebApplicationFactory\u0060.\r\n\r\nMaybe I\u0027m missing something with the proper configuration and operation of setting up integration tests, but even if that\u0027s the case, it isn\u0027t very intuitive as is. My point for the feature request is that, it would be great if we could have an alternative setup to just call a separate startup (e.g. StartupTesting) and call it a day. Simple and easy. No need to override anything in another startup and potentially run things multiple times.",
        "createdAt": "2020-10-05T12:51:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-703611001"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwMzcxNjY4Mw==",
        "parentId": null,
        "author": "Tratcher",
        "content": "Ok, we\u0027ll have to investigate that, it shouldn\u0027t run twice.\r\n\r\nOn another note, _never_ call BuildServiceProvider, it messes up the DI service lifetimes. That DB initialization needs to happen later after the host/container get built.",
        "createdAt": "2020-10-05T15:44:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-703716683"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwMzk4NzIxNg==",
        "parentId": null,
        "author": "pdevito3",
        "content": "Thanks, [here\u0027s](https://github.com/pdevito3/temp-vet) an example repo if you want to check out the bug in action.\r\n\r\nGood tip, I\u0027ll be sure to update the BuildServiceProvider code. For what it\u0027s worth, the factory is based on [eShopWeb](https://github.com/dotnet-architecture/eShopOnWeb/blob/fa8839e1d8d2ce7918b8d09179a0889fe728a582/tests/FunctionalTests/Web/WebTestFixture.cs), so a lot of people are probably getting bad info here. Maybe another good example that setting up the factory can be hard to wrap your head around for much of the community and having an option to have it work from a standard startup would be beneficial. \r\n\r\n",
        "createdAt": "2020-10-06T02:14:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-703987216"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwNDM1NTAwNg==",
        "parentId": null,
        "author": "Tratcher",
        "content": "Thanks for the warning, I\u0027ve filed https://github.com/dotnet-architecture/eShopOnWeb/issues/465 to clean up the sample.",
        "createdAt": "2020-10-06T15:33:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-704355006"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwNDM2MDE5Mw==",
        "parentId": null,
        "author": "pdevito3",
        "content": "Thanks, will be sure to update this if I come across any other instances. ",
        "createdAt": "2020-10-06T15:41:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-704360193"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwNTA2OTE1MQ==",
        "parentId": null,
        "author": "??",
        "content": "This issue has been resolved and has not had any activity for **1 day**. It will be closed for housekeeping purposes.\n\nSee [our Issue Management Policies](https://aka.ms/aspnet/issue-policies) for more information.",
        "createdAt": "2020-10-07T17:00:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-705069151"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwNTA3NjM1OA==",
        "parentId": null,
        "author": "Tratcher",
        "content": "@mkArtakMSFT this isn\u0027t resolved. https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-703611001 still needs investigation.",
        "createdAt": "2020-10-07T17:13:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-705076358"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwNTcwMDcwMQ==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-10-08T17:00:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-705700701"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwNjMxNzkzNw==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-10-09T17:46:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-706317937"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczMTEzNjA0Mw==",
        "parentId": null,
        "author": "RehanSaeed",
        "content": "All I want from \u0060WebApplicationFactory\u0060 is:\r\n\r\n1. Add some services **before** \u0060Startup.ConfigureServices\u0060.\r\n2. \u0060Startup.ConfigureServices\u0060 is called only once.\r\n\r\nI upgraded to .NET 5 and am now also seeing \u0060Startup.ConfigureServices\u0060 called twice. I was using a \u0060TestStartup\u0060 class inheriting from \u0060Startup\u0060 to be able to override the \u0060ConfigureServices\u0060 method and achieve Number 1 above which was working nicely. Changes to the \u0060WebApplicationFactory\u0060 API has broken my code in every upgrade of .NET unfortunately. I don\u0027t really care how but is it possible to achieve the above two requirements?",
        "createdAt": "2020-11-20T12:15:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-731136043"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczMTI0Mjk4Mg==",
        "parentId": null,
        "author": "VictorioBerra",
        "content": "I am having the exact same problem as @RehanSaeed I would expect if you override ConfigureWebHost in WebApplicationFactory and set UseStartup to a TestStartup class that the SUT Startup would not have ConfigureServices called as normal.",
        "createdAt": "2020-11-20T15:41:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-731242982"
      },
      {
        "id": "IC_kwDOAQzde85GqbZD",
        "parentId": null,
        "author": "ani-im",
        "content": "Any updates on this?",
        "createdAt": "2022-07-15T13:06:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-1185527363"
      },
      {
        "id": "IC_kwDOAQzde85KphZC",
        "parentId": null,
        "author": "Belgian-Coder",
        "content": "It seems like the issue is still there, are there known workarounds?",
        "createdAt": "2022-09-20T14:00:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-1252398658"
      },
      {
        "id": "IC_kwDOAQzde85T34gt",
        "parentId": null,
        "author": "j2jensen",
        "content": "I doubt this is the reason for the problem mentioned in the original post, but in case anybody stumbles on this seeing the behavior I saw: I saw the Program code in a .NET 6 app getting executed twice because I had a \u0060WebApplicationFactory\u0060 whose code references \u0060this.Server\u0060 (as in \u0060clientBuilder.ConfigurePrimaryHttpMessageHandler(() =\u003E this.Server.CreateHandler())\u0060), but my tests applied further customizations via \u0060WithWebHostBuilder()\u0060, which provides a different _instance_ of WebApplicationFactory. The call to \u0060this.Server\u0060 caused the wrapped factory instance to spin up its own host. Changing that to \u0060clientBuilder.ConfigurePrimaryHttpMessageHandler(services =\u003E ((TestServer)services.GetRequiredService\u003CIServer\u003E()).CreateHandler())\u0060 fixed that problem.",
        "createdAt": "2023-01-27T22:41:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26487#issuecomment-1407158317"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3MzI1Mzk4NjQ=",
    "title": "Fix client code generation experience",
    "url": "https://github.com/dotnet/aspnetcore/issues/27345",
    "createdAt": "2020-10-29T18:07:24Z",
    "lastUpdated": "2024-03-01T22:55:57Z",
    "body": "There are many known issues in this area and we need to address all these.",
    "upvotes": 3,
    "labels": [
      "enhancement",
      "area-mvc",
      "Theme: cloud native",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcxODkyODYxMQ==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-10-29T18:07:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-718928611"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyMTk2MTY4Ng==",
        "parentId": null,
        "author": "bradygaster",
        "content": "cc @vijayrkn on this - how much of this you would estimate is on VS and not .NET? ",
        "createdAt": "2020-11-04T20:36:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-721961686"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyMTk3NDE2Mw==",
        "parentId": null,
        "author": "vijayrkn",
        "content": "I believe this item is only tracking the changed to the code generator itself.  I am not expecting any major changes on the VS level. If there are issues that we identify, then we can create bugs for them. ",
        "createdAt": "2020-11-04T21:04:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-721974163"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyMTk3NDYxMQ==",
        "parentId": null,
        "author": "bradygaster",
        "content": "thanks @vijayrkn ",
        "createdAt": "2020-11-04T21:05:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-721974611"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgwMzY5MzQyMA==",
        "parentId": null,
        "author": "dougbu",
        "content": "@mkArtakMSFT what specific problems does this issue encompass\u2754",
        "createdAt": "2021-03-22T00:42:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-803693420"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgwMzcwNDA1OA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "I hope part of it is improving the quality of the generated code.",
        "createdAt": "2021-03-22T01:26:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-803704058"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgwNDE1NjM0NQ==",
        "parentId": null,
        "author": "bradygaster",
        "content": "@davidfowl i\u0027ve talked with Claire and some other folks about adding a new generator that sits atop Refit. I think that\u0027d be pretty hot. ",
        "createdAt": "2021-03-22T15:33:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-804156345"
      },
      {
        "id": "IC_kwDOAQzde843wOrD",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-10-06T03:59:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-935389891"
      },
      {
        "id": "IC_kwDOAQzde843wOt5",
        "parentId": null,
        "author": "dougbu",
        "content": "/fyi @bradygaster @mkArtakMSFT I moved this to our Backlog and removed my assignment",
        "createdAt": "2021-10-06T03:59:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-935390073"
      },
      {
        "id": "IC_kwDOAQzde84385ex",
        "parentId": null,
        "author": "bradygaster",
        "content": "cc @captainsafia ",
        "createdAt": "2021-10-08T15:00:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-938710961"
      },
      {
        "id": "IC_kwDOAQzde843-Z2b",
        "parentId": null,
        "author": "captainsafia",
        "content": "@bradygaster I think we should close this in favor of https://github.com/dotnet/aspnetcore/issues/36636 which we are already tracking in the OpenAPI in .NET 7 epic.",
        "createdAt": "2021-10-08T20:44:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-939105691"
      },
      {
        "id": "IC_kwDOAQzde843-fpZ",
        "parentId": null,
        "author": "dougbu",
        "content": "Huh @captainsafia, I\u0027d say #36636 is much more specific and doesn\u0027t cover some issues we\u0027ve observed e.g. getting \u0060@(OpenApiProjectReference)\u0060 working reliably",
        "createdAt": "2021-10-08T21:36:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-939129433"
      },
      {
        "id": "IC_kwDOAQzde843-n4I",
        "parentId": null,
        "author": "captainsafia",
        "content": "@dougbu Ah, fair enough. Is there a writeup of the known issues in this space? Are they all logged on the GitHub?",
        "createdAt": "2021-10-08T23:19:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-939163144"
      },
      {
        "id": "IC_kwDOAQzde843-roP",
        "parentId": null,
        "author": "dougbu",
        "content": "\u003E Ah, fair enough. Is there a writeup of the known issues in this space?\r\n\r\nI _think_ the problems are mostly in @bradygaster, @mkArtakMSFT, @glennc and maybe my head. But, see\r\n\r\n- https://github.com/dotnet/aspnetcore/issues?q=is%3Aopen\u002Bis%3Aissue\u002Blabel%3Afeature-openapi\r\n- aspnet/Tooling-ManualTests#390\r\n- dotnet/AspNetCore.Docs#8461\r\n- dotnet/AspNetCore.Docs#8462\r\n- dotnet/AspNetCore.Docs#8465",
        "createdAt": "2021-10-08T23:33:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-939178511"
      },
      {
        "id": "IC_kwDOAQzde847tq5n",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-12-28T01:52:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-1001827943"
      },
      {
        "id": "IC_kwDOAQzde85MAYR1",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:23:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27345#issuecomment-1275167861"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3MzI1NDgzMjU=",
    "title": "Enable light-bulbs to extract action into a handler and back",
    "url": "https://github.com/dotnet/aspnetcore/issues/27348",
    "createdAt": "2020-10-29T18:20:37Z",
    "lastUpdated": "2024-03-01T23:08:20Z",
    "body": "",
    "upvotes": 1,
    "labels": [
      "enhancement",
      "analyzer",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcxODkzNTgzNw==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-10-29T18:20:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27348#issuecomment-718935837"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg4MDI3MzcxNQ==",
        "parentId": null,
        "author": "halter73",
        "content": "I think this can be safely backlogged for 6, but we can discuss this.",
        "createdAt": "2021-07-14T23:22:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27348#issuecomment-880273715"
      },
      {
        "id": "IC_kwDOAQzde840hJHR",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-16T01:03:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27348#issuecomment-881103313"
      },
      {
        "id": "IC_kwDOAQzde840hJIv",
        "parentId": null,
        "author": "davidfowl",
        "content": "Moving this to backlog. It\u0027s not happening for .NET 6.",
        "createdAt": "2021-07-16T01:03:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27348#issuecomment-881103407"
      },
      {
        "id": "IC_kwDOAQzde85MAYTC",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:23:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27348#issuecomment-1275167938"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3NDQxMDE5MTE=",
    "title": "Improve single-file-publishing for ASP.NET",
    "url": "https://github.com/dotnet/aspnetcore/issues/27888",
    "createdAt": "2020-11-16T19:31:39Z",
    "lastUpdated": "2024-03-01T23:08:20Z",
    "body": "There are currently multiple limitations around single-file publishing scenario. This issue tracks defining the goal for what the single-file publishing experience should look like for ASP.NET Core apps in .NET 6 as well as implementing that experience.\r\n\r\nThis is related to the Epic: https://github.com/dotnet/runtime/issues/43540",
    "upvotes": 10,
    "labels": [
      "enhancement",
      "area-mvc",
      "User Story",
      "Priority:1",
      "Theme: meeting developer expectations",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyODI3NjgyOA==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-11-16T19:31:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27888#issuecomment-728276828"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgyMzQ2MTE2MA==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-04-20T17:19:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27888#issuecomment-823461160"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2MTY3MzMxNg==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-06-15T17:04:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27888#issuecomment-861673316"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg3OTI2NzU5Mg==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-13T17:25:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27888#issuecomment-879267592"
      },
      {
        "id": "IC_kwDOAQzde85MAYWG",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:23:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27888#issuecomment-1275168134"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3NTI1ODY0MTI=",
    "title": "Add analyzer to detect async void usage ",
    "url": "https://github.com/dotnet/aspnetcore/issues/28217",
    "createdAt": "2020-11-28T03:20:47Z",
    "lastUpdated": "2024-04-30T21:51:17Z",
    "body": "There are a couple of places where async void can be used by mistake in ASP.NET applications (and minimal APIs) and we should flag this and error with an analyzer:\r\n\r\n- [ ] Startup.Configure/ConfigureServices\r\n- [ ] MVC Controller Action methods\r\n- [ ] Razor Page handlers (https://stackoverflow.com/questions/67794528/cannot-access-a-disposed-object-object-name-iserviceprovider-error-in-aspnet)\r\n- [ ] MVC filters (the non IAsync*Filters)\r\n- [ ] SignalR Hub Methods\r\n- [ ] Minimal APIs returning void\r\n\r\nWe should flag all of these areas with a single analyzer and add more as we see fit.",
    "upvotes": 0,
    "labels": [
      "investigate",
      "enhancement",
      "area-mvc",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczNTY4MTQxMQ==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-11-30T09:57:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28217#issuecomment-735681411"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc3NzQ3MTYwNg==",
        "parentId": null,
        "author": "Youssef1313",
        "content": "@davidfowl I\u0027m interested to work on this. As far as I understand, a class that implements non-async filter with async-methods should be reported by the analyzer. Is that correct? Are there any other cases? Thanks.",
        "createdAt": "2021-02-11T13:50:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28217#issuecomment-777471606"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgzMjg1ODQwNA==",
        "parentId": null,
        "author": "JunTaoLuo",
        "content": "Sounds like we are unclear where/how this analyzer would ship cc @pranavkm @davidfowl we should discuss this before we can make progress on this analyzer.",
        "createdAt": "2021-05-05T17:03:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28217#issuecomment-832858404"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1MzY2MjM3Mw==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@Youssef1313 are you still interested?",
        "createdAt": "2021-06-03T07:51:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28217#issuecomment-853662373"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NTQ1Mjc5NA==",
        "parentId": null,
        "author": "Youssef1313",
        "content": "@davidfowl Yup! If possible, I need some more information since my knowledge to ASP.NET Core isn\u0027t that great. This is what I understand:\r\n\r\n- [ ] Startup.Configure/ConfigureServices\r\n\r\n    If a class name that starts with \u0060Startup\u0060 (e.g, \u0060Startup\u0060, \u0060StartupDevelopment\u0060, etc.) contains an \u0060async void\u0060 \u0060Configure\u0060 or \u0060ConfigureServices\u0060 method, then produce a diagnostic with a fixer to turn it to \u0060async Task\u0060.\r\n\r\n- [ ] MVC Controller Action methods\r\n\r\n    If any method in a class that derives from \u0060Controller\u0060 contains an \u0060async void\u0060 method, then produce a diagnostic with a fixer to turn it to \u0060async Task\u0060.\r\n\r\n- [ ] Razor Page handlers\r\n\r\n    Is the link beside this point in the issue was supposed to belong to the previous point? Otherwise, I need some distinction between this point and the previous one?\r\n\r\n- [ ] MVC filters (the non IAsync*Filters)\r\n\r\n    Take \u0060IActionFilter\u0060 as an example, if a class that implements it has an async \u0060OnActionExecuting\u0060 or \u0060OnActionExecuted\u0060, then produce a diagnostic with no codefix since the user should reason about that.",
        "createdAt": "2021-06-06T19:49:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28217#issuecomment-855452794"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NTQ1OTU0Mg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Hub methods could also be included here.",
        "createdAt": "2021-06-06T20:39:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28217#issuecomment-855459542"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NTQ2MTU5MA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Added",
        "createdAt": "2021-06-06T20:55:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28217#issuecomment-855461590"
      },
      {
        "id": "IC_kwDOAQzde841aszA",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-08-10T17:51:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28217#issuecomment-896191680"
      },
      {
        "id": "IC_kwDOAQzde845DNut",
        "parentId": null,
        "author": "davidfowl",
        "content": "cc @rafikiassumani-msft can we add this to the analyzer work for .NET 7?",
        "createdAt": "2021-11-02T06:48:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28217#issuecomment-957143981"
      },
      {
        "id": "IC_kwDOAQzde85LWw-h",
        "parentId": null,
        "author": "davidfowl",
        "content": "@JamesNK @captainsafia Can we get this one added to the list?",
        "createdAt": "2022-10-01T06:07:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28217#issuecomment-1264258977"
      },
      {
        "id": "IC_kwDOAQzde85MAYab",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:24:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28217#issuecomment-1275168411"
      },
      {
        "id": "IC_kwDOAQzde85b2jxW",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-05-09T23:49:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28217#issuecomment-1541028950"
      },
      {
        "id": "IC_kwDOAQzde85u8L0d",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "Guys, bringing this back from \u0060Backlog\u0060 for you to consider this for .NET 9, as we just saw another customer hitting this here: https://github.com/dotnet/aspnetcore/issues/51702",
        "createdAt": "2023-12-18T18:27:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28217#issuecomment-1861270813"
      },
      {
        "id": "IC_kwDOAQzde85u8TnN",
        "parentId": null,
        "author": "halter73",
        "content": "When we were discussing this in our Web UI planning meeting, we debated whether it makes sense to have a blanket analyzer for all \u0060async void\u0060 usage in Web SDK projects.\r\n\r\nI\u0027m sure a lot of usage is okay, but I\u0027d argue most of it is at least a small bug in the context of an ASP.NET Core app. If the async handler is accessing any services, it\u0027s completion should be awaited by host shutdown somehow.\r\n\r\nIf we focus too much on specific problem areas like MVC actions and page handlers, we might miss other problematic issues deep in helper logic. And if you\u0027re convinced that your usage is okay because it doesn\u0027t rely on the HttpContext and you don\u0027t care about ODE\u0027s during shutdown (or you\u0027re really not relying on any services), you\u0027re free to suppress the analyzer.\r\n\r\nI personally think we should make our job easier implementing and maintaining the analyzer by flagging any \u0060async void\u0060 methods in a WebSDK project.",
        "createdAt": "2023-12-18T18:41:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28217#issuecomment-1861302733"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3OTIwMzMyMzE=",
    "title": "Setting JsonSerializerSettings.DateFormatString in ShallowCopy \u0022overrides\u0022 JsonSerializerSettings.DateFormatHandling",
    "url": "https://github.com/dotnet/aspnetcore/issues/29532",
    "createdAt": "2021-01-22T14:08:21Z",
    "lastUpdated": "2024-05-27T12:32:21Z",
    "body": "The setter of \u0060JsonSerializerSettings.DateFormatString\u0060 has a hidden side effect: It sets a field telling the writer (through the serializer) whether the property has been set - even if setting the property to null:\r\n\r\nhttps://github.com/JamesNK/Newtonsoft.Json/blob/666d9760719e5ec5b2a50046f7dbd6a1267c01c6/Src/Newtonsoft.Json/JsonSerializerSettings.cs#L321\r\n\r\nSo when using AddNewtonsoftJson and setting \u0060DateFormatHandling = DateFormatHandling.MicrosoftDateFormat\u0060 it will not be used by the serializer, because ShallowCopy sets DateFormatString (which takes precedence over DateFormatHandling) and thus triggers the above behavior:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/c925f99cddac0df90ed0bc4a07ecda6b054a0b02/src/Mvc/Mvc.NewtonsoftJson/src/NewtonsoftJsonOutputFormatter.cs#L179",
    "upvotes": 1,
    "labels": [
      "bug",
      "good first issue",
      "area-minimal",
      "help candidate"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc2Njk4ODkzNA==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-01-25T17:38:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29532#issuecomment-766988934"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgyMzUwMTYxMA==",
        "parentId": null,
        "author": "pranavkm",
        "content": "The right way to address this would be to \r\n\r\n* To add a new copy constructor to \u0060JsonSerializerSettings\u0060\r\n* Update Mvc.NewtonsoftJson package to reference a version with this copy constructor\r\n* Replace the shallow copy that is performed in MVC with this copy constructor.\r\n\r\nWe\u0027d be happy to accept a contribution for such a change.\r\n",
        "createdAt": "2021-04-20T18:21:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29532#issuecomment-823501610"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgyMzUwMTczOA==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-04-20T18:21:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29532#issuecomment-823501738"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgzNTk1NzEwMQ==",
        "parentId": null,
        "author": "gabrielgfaria",
        "content": "@javiercn, @mkArtakMSFT  I\u00B4m interested in tackling this issue! This would be a first for me and any help would be appreciated!\r\n\r\ncc: @andre-ss6 ",
        "createdAt": "2021-05-10T00:04:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29532#issuecomment-835957101"
      },
      {
        "id": "IC_kwDOAQzde842rl2F",
        "parentId": null,
        "author": "MatthewSteeples",
        "content": "As a workaround for now we\u0027ve got the following code in our Program.cs\r\n\r\n\u0060\u0060\u0060csharp\r\nvar host = CreateHostBuilder(args).Build();\r\n\r\nvar formatter = host.Services.GetService(typeof(OutputFormatterSelector)) as DefaultOutputFormatterSelector;\r\nvar formatters = typeof(DefaultOutputFormatterSelector).GetField(\u0022_formatters\u0022, BindingFlags.Instance| BindingFlags.NonPublic).GetValue(formatter) as IList\u003CIOutputFormatter\u003E;\r\nvar newtonsoftJsonOutputFormatter = formatters.OfType\u003CNewtonsoftJsonOutputFormatter\u003E().FirstOrDefault();\r\n\r\nvar field = typeof(NewtonsoftJsonOutputFormatter).GetField(\u0022_serializerSettings\u0022, BindingFlags.Instance | BindingFlags.NonPublic);\r\nvar property = typeof(NewtonsoftJsonOutputFormatter).GetProperty(\u0022SerializerSettings\u0022, BindingFlags.Instance | BindingFlags.NonPublic);\r\n\r\nvar settings = property.GetValue(newtonsoftJsonOutputFormatter) as JsonSerializerSettings;\r\n\r\nfield.SetValue(newtonsoftJsonOutputFormatter, settings);\r\n\r\nhost.Run();\r\n\u0060\u0060\u0060",
        "createdAt": "2021-09-11T12:11:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29532#issuecomment-917396869"
      },
      {
        "id": "IC_kwDOAQzde84-7zmZ",
        "parentId": null,
        "author": "senbar",
        "content": "I can tackle this issue. Shouldn\u0027t it be solved with checking whether each settings property is null and only setting them in shallow copy if they are not null (or have been changed to null)? I have also opened issue on Newtonsoft.Json for this change to be approved",
        "createdAt": "2022-03-01T21:15:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29532#issuecomment-1055865241"
      },
      {
        "id": "IC_kwDOAQzde84_Dil5",
        "parentId": null,
        "author": "senbar",
        "content": "I can see now linked issue on Newtonsoft repo. @MatthewSteeples will You be implementing fix this issue as well or should I do it after You finish Newtonsoft one?",
        "createdAt": "2022-03-03T10:19:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29532#issuecomment-1057892729"
      },
      {
        "id": "IC_kwDOAQzde84_GD1q",
        "parentId": null,
        "author": "MatthewSteeples",
        "content": "I\u0027m fine either way @senbar. If you want to pick up the aspnetcore changes once the library has been released that\u0027s fine by me",
        "createdAt": "2022-03-03T22:16:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29532#issuecomment-1058553194"
      },
      {
        "id": "IC_kwDOAQzde85cIQiu",
        "parentId": null,
        "author": "pentp",
        "content": "But why create a shallow copy of the settings at all? What\u0027s stopping us from re-using a singleton serializer instance instead?",
        "createdAt": "2023-05-12T12:30:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29532#issuecomment-1545668782"
      },
      {
        "id": "IC_kwDOAQzde852bwMw",
        "parentId": null,
        "author": "maranmaran",
        "content": "Is this done?",
        "createdAt": "2024-03-09T21:36:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29532#issuecomment-1986986800"
      },
      {
        "id": "IC_kwDOAQzde859mcDd",
        "parentId": null,
        "author": "GMPrakhar",
        "content": "This looks to be merged with https://github.com/JamesNK/Newtonsoft.Json/pull/2676, can @JamesNK confirm if the change encompasses all that was needed here?",
        "createdAt": "2024-05-13T10:36:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29532#issuecomment-2107228381"
      },
      {
        "id": "IC_kwDOAQzde85_KOaO",
        "parentId": null,
        "author": "markmouton22",
        "content": "Hi! Can I help on this as a first time contribution? ",
        "createdAt": "2024-05-27T12:32:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29532#issuecomment-2133386894"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3OTQxOTI0MDg=",
    "title": "WebApplicationFactory - DirectoryNotFoundException when using AssemblyName",
    "url": "https://github.com/dotnet/aspnetcore/issues/29623",
    "createdAt": "2021-01-26T12:27:32Z",
    "lastUpdated": "2023-06-20T21:54:52Z",
    "body": "### Describe the bug\r\n\r\nIn integration test when project we are testing has AssemblyName attribute we have DirectoryNotFoundException. After investigation it looks like this code https://github.com/dotnet/aspnetcore/blob/c272436a9e5dd42662d5f7eb5451c0eb0fc805c9/src/Mvac/Mvc.Testing/src/WebApplicationFactory.cs#L291\r\nis searching for dependecies by project default names - not respecting that it could be changed by AssemblyName.\r\n\r\n### To Reproduce\r\n\r\n1. Create sample ASP.NET Core project\r\n2. Add AssemblyName with some custom name\r\n3. Add integrastion test project (WebApplicationFactory) and try to execute sample controller\r\n\r\n### Exceptions (if any)\r\n\r\nDirectoryNotFoundException is raised\r\n\r\n### Further technical details\r\n- ASP.NET Core version - 3.1, Microsoft.AspNetCore.Mvc.Testing - Version=3.1.8\r\n- Include the output of \u0060dotnet --info\u0060\r\n\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.102\r\n Commit:    71365b4d42\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.102\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.2\r\n  Commit:  cb5f173b96\r\n\r\n.NET SDKs installed:\r\n  5.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.102 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version\r\n\r\nVS 16.8.4",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc2NzUyNTI5OA==",
        "parentId": null,
        "author": "javiercn",
        "content": "@dominikjeske thanks for contacting us.\r\n\r\n@HaoK is this something that will not apply with the changes we made recently to Mvc.Testing?",
        "createdAt": "2021-01-26T12:58:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29623#issuecomment-767525298"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc2NzUyNTU0NQ==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-01-26T12:59:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29623#issuecomment-767525545"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc2NzU1NzA3Mg==",
        "parentId": null,
        "author": "dominikjeske",
        "content": "So maybe some update to doc\u0027s of integration test would be nice since the fix will be applied?",
        "createdAt": "2021-01-26T13:56:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29623#issuecomment-767557072"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgwOTQ4ODYxNQ==",
        "parentId": null,
        "author": "belgaard",
        "content": "It looks like it helps to explicitly include the test host nuGet package, e.g. as,\r\n\u0060\u003CPackageReference Include=\u0022Microsoft.AspNetCore.TestHost\u0022 Version=\u00225.0.4\u0022 /\u003E\u0060",
        "createdAt": "2021-03-29T15:46:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29623#issuecomment-809488615"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU4MDQxODY1Njg=",
    "title": "Integration test with nUnit seems to fail after .net core has been upgraded from 3.1 to 5 ",
    "url": "https://github.com/dotnet/aspnetcore/issues/30024",
    "createdAt": "2021-02-09T04:09:14Z",
    "lastUpdated": "2023-06-20T21:54:54Z",
    "body": "I have recently upgraded my .net core version from 3.1.8 to 5, my web API seems to work fine, however integration test for the scenario where API returns notFound status code along with custom message are failing with below error, and the failure occur randomly.\r\n\r\nMessage:\r\nSystem.IO.IOException : No message provided\r\n\r\nStack Trace:\r\nResponseBodyReaderStream.CheckAborted()\r\nResponseBodyReaderStream.ReadAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken cancellationToken)\r\nResponseBodyReaderStream.Read(Byte[] buffer, Int32 offset, Int32 count)\r\nDelegatingStream.Read(Byte[] buffer, Int32 offset, Int32 count)\r\nStreamReader.ReadBuffer(Span1 userBuffer, Boolean\u0026 readToUserBuffer) StreamReader.ReadSpan(Span1 buffer)\r\nStreamReader.Read(Char[] buffer, Int32 index, Int32 count)\r\nJsonTextReader.ReadData(Boolean append, Int32 charsRequired)\r\nJsonTextReader.ParseValue()\r\nJsonReader.ReadAndMoveToContent()\r\nJsonReader.ReadForType(JsonContract contract, Boolean hasConverter)\r\nJsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\r\nJsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\r\nJsonSerializer.Deserialize(JsonReader reader, Type objectType)\r\nBaseJsonMediaTypeFormatter.ReadFromStream(Type type, Stream readStream, Encoding effectiveEncoding, IFormatterLogger formatterLogger)\r\nJsonMediaTypeFormatter.ReadFromStream(Type type, Stream readStream, Encoding effectiveEncoding, IFormatterLogger formatterLogger)\r\nBaseJsonMediaTypeFormatter.ReadFromStream(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger)\r\nBaseJsonMediaTypeFormatter.ReadFromStreamAsync(Type type, Stream readStream, HttpContent content, IFormatterLogger formatterLogger)\r\n--- End of stack trace from previous location ---\r\nHttpContentExtensions.ReadAsAsyncCore[T](HttpContent content, Type type, IFormatterLogger formatterLogger, MediaTypeFormatter formatter, CancellationToken cancellationToken)\r\nCustomerControllerTests.Delete_DeleteCustomer_CustomerIdNotFound_ReturnsNotFound() line 440\r\nGenericAdapter1.BlockUntilCompleted() line 95 NoMessagePumpStrategy.WaitForCompletion(AwaitAdapter awaiter) line 61 AsyncToSyncAdapter.Await(Func1 invoke) line 57\r\nTestMethodCommand.RunTestMethod(TestExecutionContext context) line 81\r\nTestMethodCommand.Execute(TestExecutionContext context) line 64\r\n\u003C\u003Ec__DisplayClass4_0.b__0() line 77\r\n\u003C\u003Ec__DisplayClass1_01.\u003CDoIsolated\u003Eb__0(Object _) line 40 ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) --- End of stack trace from previous location --- ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state) ContextUtils.DoIsolated(ContextCallback callback, Object state) line 55 ContextUtils.DoIsolated[T](Func1 func) line 40\r\nSimpleWorkItem.PerformWork() line 77\r\n--HttpStatusException\r\nCustomersService.Delete(Guid id, Byte[] rowVersion) line 271\r\nCustomerController.Delete(DeleteRequest request) line 266\r\nlambda_method903(Closure , Object )\r\nAwaitableObjectResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\r\nControllerActionInvoker.g__Logged|12_1(ControllerActionInvoker invoker)\r\nControllerActionInvoker.g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\nControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\r\nControllerActionInvoker.Next(State\u0026 next, Scope\u0026 scope, Object\u0026 state, Boolean\u0026 isCompleted)\r\nControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location ---\r\nResourceInvoker.g__Awaited|24_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\nResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\r\nResourceInvoker.Next(State\u0026 next, Scope\u0026 scope, Object\u0026 state, Boolean\u0026 isCompleted)\r\nResourceInvoker.InvokeFilterPipelineAsync()\r\n--- End of stack trace from previous location ---\r\nResourceInvoker.g__Logged|17_1(ResourceInvoker invoker)\r\nEndpointMiddleware.g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\nAuthorizationMiddleware.Invoke(HttpContext context)\r\nAuthenticationMiddleware.Invoke(HttpContext context)\r\nRequestLocalizationMiddleware.Invoke(HttpContext context)\r\nExceptionHandlerMiddleware.g__Awaited|6_0(ExceptionHandlerMiddleware middleware, HttpContext context, Task task)\r\nExceptionHandlerMiddleware.HandleException(HttpContext context, ExceptionDispatchInfo edi)\r\nExceptionHandlerMiddleware.g__Awaited|6_0(ExceptionHandlerMiddleware middleware, HttpContext context, Task task)\r\nCorrelationIdMiddleware.Invoke(HttpContext context, ICorrelationContextFactory correlationContextFactory)\r\n\u003Cg__RunRequestAsync|0\u003Ed.MoveNext()__\r\n\r\nI am created my testClient using below code:\r\n\r\nTestClient = new TestWebApplicationFactory()\r\n.CreateClient(new WebApplicationFactoryClientOptions\r\n{\r\nAllowAutoRedirect = false,\r\n});",
    "upvotes": 1,
    "labels": [
      "investigate",
      "area-mvc",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc3NTg4OTczNw==",
        "parentId": null,
        "author": "javiercn",
        "content": "@RitikaPoddar thanks for contacting us.\r\n\r\nIn order for us to investigate this issue, could you please provide a minimalistic repro project that illustrates the problem?",
        "createdAt": "2021-02-09T12:04:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30024#issuecomment-775889737"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc3NTk2MzUzNg==",
        "parentId": null,
        "author": "RitikaPoddar",
        "content": "**Below is the snippet of the Integration Test that calls an API which returns NotFound status:**\r\n\r\n\u0060\u0060\u0060\r\npublic async Task Delete_DeleteCustomer_CustomerIdNotFound_ReturnsNotFound ()\r\n            {\r\n            DeleteRequest reqObj = new DeleteRequest\r\n                {\r\n                Id = Guid.Empty,\r\n                RowVersion = _createdRowVersion\r\n                };\r\n            var request = new HttpRequestMessage\r\n                {\r\n                Method = HttpMethod.Delete,\r\n                RequestUri = new Uri(\u0022api/v1/Customer\u0022, UriKind.RelativeOrAbsolute),\r\n                Content = new StringContent(JsonConvert.SerializeObject(reqObj), Encoding.UTF8, \u0022application/json\u0022)\r\n                };\r\n            var response = await TestClient.SendAsync(request);\r\n\r\n            var apiResponse = await response.Content.ReadAsAsync\u003CAPIResponse\u003CCustomer\u003E\u003E();\r\n\r\n            Assert.That(response.StatusCode, Is.EqualTo(HttpStatusCode.NotFound));\r\n            Assert.That(apiResponse.Status, Is.EqualTo(HttpStatusCode.NotFound));\r\n            }\r\n\u0060\u0060\u0060\r\n\r\n\r\n**Below is my TestClient creation:**\r\n\r\n\r\n\u0060\u0060\u0060\r\nTestClient = new TestWebApplicationFactory\u003CStartup\u003E()\r\n                    .CreateClient(new WebApplicationFactoryClientOptions\r\n                        {\r\n                            AllowAutoRedirect = false,\r\n                        });\r\n\u0060\u0060\u0060\r\n\r\n\r\n**API for customer deletion throws below custom exception if customer does not exists in table:**\r\n\r\n\u0060throw new HttpStatusException(HttpStatusCode.NotFound, _localizer[\u0022Customer_NotExists\u0022, id].Value);\u0060\r\n\r\n**And this exception is handled in startup.cs where it is passed as ValidationProblemDetails to httpContext.Response.**\r\n\r\n\r\n   \r\n\u0060\u0060\u0060\r\nif (exception is HttpStatusException httpStatusException)\r\n                        {\r\n                        context.Response.StatusCode = (int) httpStatusException.Status;\r\n                        problemDetails = new ValidationProblemDetails()\r\n                            {\r\n                            Title = \u0022Invalid Request\u0022,\r\n                            Status = (int) httpStatusException.Status,\r\n                            Detail = httpStatusException.Message\r\n                            };\r\n                        }\r\n                    var result = JsonConvert.SerializeObject(problemDetails);\r\n                    context.Response.ContentType = \u0022application/json\u0022;\r\n                    await context.Response.WriteAsync(result);\r\n\u0060\u0060\u0060\r\n\r\n               ",
        "createdAt": "2021-02-09T14:06:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30024#issuecomment-775963536"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc3NTk2NzIxMA==",
        "parentId": null,
        "author": "javiercn",
        "content": "@RitikaPoddar thanks for the additional details.\r\n\r\nUnfortunately this is not enough for us to start an investigation. We need a minimal repro project we can run and that illustrates the issue for us to be able to investigate. \r\n\r\nOtherwise, it might as well be something you missed while migrating your project and there\u0027s no way for us to know.\r\n\r\nAs I said, for us to be able to help here, we need a minimal project that worked in 3.1 and that doesn\u0027t work on 5.0, otherwise we can\u0027t investigate this efficiently.",
        "createdAt": "2021-02-09T14:11:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30024#issuecomment-775967210"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc3NjQyNDM5MA==",
        "parentId": null,
        "author": "RitikaPoddar",
        "content": "@javiercn Please find the attached projects (with .net core 3.1 and .net 5.0)\r\n\r\n[Net31Works.zip](https://github.com/dotnet/aspnetcore/files/5955770/Net31Works.zip)\r\n[Net50Fails.zip](https://github.com/dotnet/aspnetcore/files/5955772/Net50Fails.zip)\r\n\r\nTo reproduce, try running the test. In 3.1 the test will pass where as in 5.0 it will fail. ",
        "createdAt": "2021-02-10T04:06:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30024#issuecomment-776424390"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc3Njg4OTY4MQ==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-02-10T17:42:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30024#issuecomment-776889681"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgwNDA1NjI5MA==",
        "parentId": null,
        "author": "RitikaPoddar",
        "content": "Can you please let me know the status and by when it can be resolved?",
        "createdAt": "2021-03-22T13:21:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30024#issuecomment-804056290"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgyNTI3Mjg0MA==",
        "parentId": null,
        "author": "22222",
        "content": "I was running into the same problem for any situation where a controller throws an uncaught exception.\r\n\r\nA workaround that fixed things for me was to create modified copy of the Microsoft.AspNetCore.TestHost project with a try/catch in the \u0060Microsoft.AspNetCore.TestHost.ApplicationWrapper\u003CTContext\u003E\u0060 class:\r\n\r\n\u0060\u0060\u0060c#\r\n        async Task IHttpApplication\u003CTContext\u003E.ProcessRequestAsync(TContext context)\r\n        {\r\n            _preProcessRequestAsync();\r\n            try\r\n            {\r\n                await _application.ProcessRequestAsync(context);\r\n            }\r\n            catch (Exception)\r\n            {\r\n                // Pretend that there was no exception\r\n            }\r\n        }\r\n\u0060\u0060\u0060\r\n\r\nThat call to \u0060_application.ProcessRequestAsync\u0060 throws an exception in .NET 5, but did not throw an exception in .NET Core 3.1.  I didn\u0027t look any further into what exactly changed, so it\u0027s definitely possible that there\u0027s an easier workaround or some configuration option that could be set somewhere to avoid this.\r\n\r\nHere\u0027s the workaround I ended up using, with some gross reflection to access and modify private variables:\r\n\r\n\u0060\u0060\u0060c#\r\n   public static class TestHostWorkaround\r\n    {\r\n        public static void InjectTestServerWorkaround(TestServer server)\r\n        {\r\n            var serverApplicationField = typeof(Microsoft.AspNetCore.TestHost.TestServer).GetField(\u0022_application\u0022, BindingFlags.NonPublic | BindingFlags.Instance);\r\n\r\n            var applicationWrapper = serverApplicationField.GetValue(server);\r\n            var application = applicationWrapper.GetType().GetField(\u0022_application\u0022, BindingFlags.NonPublic | BindingFlags.Instance).GetValue(applicationWrapper);\r\n            if (application.GetType().Name.StartsWith(\u0022WorkaroundApplicationWrapper\u0022, StringComparison.Ordinal))\r\n            {\r\n                return;\r\n            }\r\n\r\n            var contextType = applicationWrapper.GetType().GetGenericArguments().First();\r\n            var workaroundApplicationType = typeof(WorkaroundApplicationWrapper\u003C\u003E).MakeGenericType(contextType);\r\n            var workaroundApplication = Activator.CreateInstance(workaroundApplicationType, new object?[] { application });\r\n\r\n            var preProcessRequestAsync = (Action)applicationWrapper.GetType().GetField(\u0022_preProcessRequestAsync\u0022, BindingFlags.NonPublic | BindingFlags.Instance).GetValue(applicationWrapper)!;\r\n            var newApplicationWrapper = Activator.CreateInstance(applicationWrapper.GetType(), new object?[] { workaroundApplication, preProcessRequestAsync });\r\n\r\n            serverApplicationField.SetValue(server, newApplicationWrapper);\r\n        }\r\n\r\n        private class WorkaroundApplicationWrapper\u003CTContext\u003E : IHttpApplication\u003CTContext\u003E where TContext : notnull\r\n        {\r\n            private readonly IHttpApplication\u003CTContext\u003E _application;\r\n\r\n            public WorkaroundApplicationWrapper(IHttpApplication\u003CTContext\u003E application)\r\n            {\r\n                _application = application;\r\n            }\r\n\r\n            TContext IHttpApplication\u003CTContext\u003E.CreateContext(IFeatureCollection features)\r\n            {\r\n                return _application.CreateContext(features);\r\n            }\r\n\r\n            void IHttpApplication\u003CTContext\u003E.DisposeContext(TContext context, Exception? exception)\r\n            {\r\n                _application.DisposeContext(context, exception);\r\n            }\r\n\r\n            async Task IHttpApplication\u003CTContext\u003E.ProcessRequestAsync(TContext context)\r\n            {\r\n                try\r\n                {\r\n                    await _application.ProcessRequestAsync(context);\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    // Pretend that there was no exception\r\n                    // Workaround for https://github.com/dotnet/aspnetcore/issues/30024\r\n                }\r\n            }\r\n        }\r\n    }\r\n\u0060\u0060\u0060",
        "createdAt": "2021-04-22T23:51:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30024#issuecomment-825272840"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg3NjA5NzIzNA==",
        "parentId": null,
        "author": "muhamad",
        "content": "Same error happened with me, I\u0027m on .NET 5 and still didn\u0027t manage to fix it.",
        "createdAt": "2021-07-08T03:36:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30024#issuecomment-876097234"
      },
      {
        "id": "IC_kwDOAQzde841wkiY",
        "parentId": null,
        "author": "Madajevas",
        "content": "Is this being worked on? Has anyone found a fix or workaround?",
        "createdAt": "2021-08-19T13:40:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30024#issuecomment-901925016"
      },
      {
        "id": "IC_kwDOAQzde842Zu7P",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-09-03T18:03:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30024#issuecomment-912715471"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU4MjI0NjIxMDY=",
    "title": "Enable customization of input and output formatting in MapAction",
    "url": "https://github.com/dotnet/aspnetcore/issues/30668",
    "createdAt": "2021-03-04T20:01:44Z",
    "lastUpdated": "2023-06-06T23:45:51Z",
    "body": "Once nice thing about the \u0022MapAction\u0022 APIs is that there just an expansion of middleware, so developers are still free to call methods like \u0060ReadAsJson\u0060 and \u0060WriteAsJson\u0060 explicitly with options, but for people you want to leverage custom parameters and return values, a way to customize the formatting would be nice.\r\n",
    "upvotes": 0,
    "labels": [
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc5MTE3NjI3Mg==",
        "parentId": null,
        "author": "davidfowl",
        "content": "I actually think this might be out of scope. You can customize the output with a custom IResult, you can\u0027t currently customize the input.",
        "createdAt": "2021-03-05T05:56:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30668#issuecomment-791176272"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc5Mjk1MzE1OQ==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-03-08T17:58:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30668#issuecomment-792953159"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg0Mjc2MzcwMQ==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-05-18T01:55:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30668#issuecomment-842763701"
      },
      {
        "id": "IC_kwDOAQzde847-FAP",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-05T22:30:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30668#issuecomment-1006129167"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU4NjMyODc1NTE=",
    "title": "VS2019-integrated OpenAPI client support fails for multitargeted assemblies",
    "url": "https://github.com/dotnet/aspnetcore/issues/31996",
    "createdAt": "2021-04-20T22:20:11Z",
    "lastUpdated": "2024-03-01T23:07:37Z",
    "body": "Minimal repro project here: https://github.com/lscorcia/aspnetcore-issue31996-repro\r\n\r\nI have a library which is using multitargeting - in the .csproj it has:\r\n\u0060\u0060\u0060\r\n    \u003CTargetFrameworks\u003Enetstandard2.1;net472\u003C/TargetFrameworks\u003E\r\n\u0060\u0060\u0060\r\nI added to it an OpenAPI connected service via VS2019 GUI (16.9.4):\r\n\r\n![immagine](https://user-images.githubusercontent.com/16761934/115464468-695f1880-a22d-11eb-8f36-ad9ef2e7ec9e.png)\r\n\r\nIt added some nuget packages to the project, and the OpenApiReference element:\r\n\r\n\u0060\u0060\u0060\r\n  \u003CItemGroup\u003E\r\n    \u003COpenApiReference Include=\u0022OpenAPIs\\dss.json\u0022\u003E\r\n      \u003CCodeGenerator\u003ENSwagCSharp\u003C/CodeGenerator\u003E\r\n    \u003C/OpenApiReference\u003E\r\n  \u003C/ItemGroup\u003E\r\n...\r\n \u003CPackageReference Include=\u0022Microsoft.Extensions.ApiDescription.Client\u0022 Version=\u00225.0.5\u0022\u003E\r\n      \u003CPrivateAssets\u003Eall\u003C/PrivateAssets\u003E\r\n      \u003CIncludeAssets\u003Eruntime; build; native; contentfiles; analyzers; buildtransitive\u003C/IncludeAssets\u003E\r\n    \u003C/PackageReference\u003E\r\n    \u003CPackageReference Include=\u0022Newtonsoft.Json\u0022 Version=\u002212.0.2\u0022 /\u003E\r\n    \u003CPackageReference Include=\u0022NSwag.ApiDescription.Client\u0022 Version=\u002213.10.9\u0022\u003E\r\n      \u003CPrivateAssets\u003Eall\u003C/PrivateAssets\u003E\r\n      \u003CIncludeAssets\u003Eruntime; build; native; contentfiles; analyzers; buildtransitive\u003C/IncludeAssets\u003E\r\n    \u003C/PackageReference\u003E\r\n\u0060\u0060\u0060\r\n\r\nThe build completes fine, no error or warnings, however it does not generate the corresponding source code in the \u0060obj\u0060 folder.\r\nIf I replace the multitargeting with a single target however it works correctly:\r\n\r\n\u0060\u0060\u0060\r\n    \u003CTargetFramework\u003Enetstandard2.1\u003C/TargetFramework\u003E\r\n\u0060\u0060\u0060\r\n\r\nLooking at the build logs, it seems like the following condition fails and does not run the OpenAPI code generation:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/ec69111cd568dbc7b06f62851bea3b452e404972/src/Tools/Extensions.ApiDescription.Client/src/build/Microsoft.Extensions.ApiDescription.Client.targets#L161-L164\r\n\r\nRelevant [msbuild.log](https://github.com/dotnet/aspnetcore/files/6346971/msbuild.log) entry (in Italian, but should be easily readable):\r\n\r\n\u0060\u0060\u0060\r\nDestinazione\u0022_TieInGenerateOpenApiCode\u0022 ignorata. Condizione false. ( \u0027$(OpenApiGenerateCodeOnBuild)\u0027 == \u0027true\u0027 AND (\u0027$(TargetFramework)\u0027 == \u0027\u0027 OR \u0027$(TargetFrameworks)\u0027 == \u0027\u0027) ) ha restituito ( \u0027true\u0027 == \u0027true\u0027 AND (\u0027netstandard2.1\u0027 == \u0027\u0027 OR \u0027netstandard2.1;net472\u0027 == \u0027\u0027) ).\r\n...\r\nDestinazione\u0022_TieInGenerateOpenApiCode\u0022 ignorata. Condizione false. ( \u0027$(OpenApiGenerateCodeOnBuild)\u0027 == \u0027true\u0027 AND (\u0027$(TargetFramework)\u0027 == \u0027\u0027 OR \u0027$(TargetFrameworks)\u0027 == \u0027\u0027) ) ha restituito ( \u0027true\u0027 == \u0027true\u0027 AND (\u0027net472\u0027 == \u0027\u0027 OR \u0027netstandard2.1;net472\u0027 == \u0027\u0027) ).\r\n\u0060\u0060\u0060\r\n\r\nI can see why one wouldn\u0027t want to run the generation multiple times, but it does not run at all.",
    "upvotes": 6,
    "labels": [
      "bug",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgyNDIwNTk0OA==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-04-21T16:45:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31996#issuecomment-824205948"
      },
      {
        "id": "IC_kwDOAQzde843UbkV",
        "parentId": null,
        "author": "captainsafia",
        "content": "Yep, this is a bug in the MSBuild condition here. It\u0027s valid to avoid multiple invocations for multiple targets but this disables it all together. I think a condition like:\r\n\r\n\u0060\u0060\u0060\r\nCondition=\u0022\u0027$(TargetFrameworks)\u0027 == \u0027\u0027 OR $(TargetFrameworks.EndsWith($(TargetFramework)))\u0022 \r\n\u0060\u0060\u0060\r\n\r\nGet us a little closer to doing the invocation for only the TFM That appears first. We might have to tweak it a bit to account for projects that target more than 2 TFMs.",
        "createdAt": "2021-09-27T17:39:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31996#issuecomment-928102677"
      },
      {
        "id": "IC_kwDOAQzde85MAYjS",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:24:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31996#issuecomment-1275168978"
      },
      {
        "id": "IC_kwDOAQzde85R5HcH",
        "parentId": null,
        "author": "Sinhk",
        "content": "Not sure if it\u0027s related to this issue, but it appears to be a typo here:\r\nhttps://github.com/dotnet/aspnetcore/blob/e7a85fb5de16cb888783537f2374d16bcb9678dc/src/Tools/Extensions.ApiDescription.Client/src/buildMultiTargeting/Microsoft.Extensions.ApiDescription.Client.targets#L18\r\nwith two apostrophes before $(OpenApiGenerateCodeOnBuild)",
        "createdAt": "2023-01-06T17:33:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31996#issuecomment-1373927175"
      },
      {
        "id": "IC_kwDOAQzde85cpTpr",
        "parentId": null,
        "author": "AdelRefaat",
        "content": "I had to workaround it by setting \u0060TargetFrameworks\u0060 to single/current value before running \u0060GenerateOpenApiCode\u0060 during compilation\r\nSample here: https://gist.github.com/AdelRefaat/dc3258c86e2d6e8a06fbff921c0baf96\r\n ",
        "createdAt": "2023-05-19T10:01:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31996#issuecomment-1554332267"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU4NzM4MzA3Njg=",
    "title": "Deeper nested \u0060WebApplicationFactory.WithWebHostBuilder\u0060 instances aren\u0027t disposed correctly",
    "url": "https://github.com/dotnet/aspnetcore/issues/32329",
    "createdAt": "2021-05-02T03:56:31Z",
    "lastUpdated": "2023-06-14T01:38:13Z",
    "body": "### Describe the bug\r\nAfter creating second (and deeper) levels of derived \u0060WebApplicationFactory\u0060 instances with \u0060WithWebHostBuilder\u0060 method only the first level will be disposed when root \u0060WebApplicationFactory\u0060 instance is disposed.\r\n\r\nThis creates a memory leak if nested \u0060WithWebHostBuilder\u0060 factories are heavily used in tests.\r\n\r\nAs a possible workaround I keep track of all derived instances and dispose them manually (or with the help \u0060using\u0060), it\u0027s still quite unintuitive why only the first level of factories will be disposed when root is disposed.\r\n\r\nA simplified example how this could happen:\r\n\r\n\u0060\u0060\u0060c#\r\npublic class UserIntegrationTests : IDisposable {\r\n    private WebApplicationFactory\u003CStartup\u003E _root;\r\n    private WebApplicationFactory\u003CStartup\u003E _base;\r\n\t\r\n    public UserIntegrationTests() {\r\n        _root = new WebApplicationFactory\u003CStartup\u003E();\r\n\t\t// first level of derived factory\r\n        _base = _root\r\n            .WithWebHostBuilder(builder =\u003E {\r\n                // common configuration for all test cases in this class\r\n                // for example override ConnectionString for test Db\r\n                // builder.ConfigureTestServices(services =\u003E {\r\n\t\t\t\t//\r\n                // });\r\n            });\r\n    }\r\n\r\n    [Fact]\r\n    public void LoginTest_Success() {\r\n        // Arrange\r\n\t\t// second level of derived factory\r\n        var app = _base.WithWebHostBuilder(builder =\u003E {\r\n            // additional overrides to the base that are relevant only to this test case\r\n            // builder.ConfigureTestServices(services =\u003E {\r\n\t\t\t//\r\n            // });\r\n        });\r\n\r\n        var client = app.CreateClient();\r\n\r\n        // Act\r\n        // Assert\r\n    }\r\n\r\n    public void Dispose() {\r\n\t\t// dispose root manually\r\n        _root.Dispose();\r\n        // at this point _base will be disposed too but not the deeper derived app from \u0060LoginTest_Success\u0060 test\r\n        _base.Dispose();\r\n        // _base disposed (obviously) but the derived app still won\u0027t be\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### To Reproduce\r\nRepro project can be found here: https://github.com/romansp/test-server-derived-factory-memory-leak\r\nI added a failing Xunit test there in \u0060IntegrationTests\u0060 project. You can clone project and try \u0060dotnet test\u0060 directly from \u0060IntegrationTests\u0060 directory.\r\n\r\nTest shows that the only singleton service that gets disposed is from first-level derived factory. \u0060Dispose\u0060 is not called for singletons from a further derived factory.\r\n\r\n### Further technical details\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003EDetails\u003C/summary\u003E\r\n\u003Cp\u003E\r\n\r\n- ASP.NET Core version \u0060.NET 5.0.5\u0060\r\n- Include the output of \u0060dotnet --info\u0060\r\n\r\n\u0060\u0060\u0060\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.202\r\n Commit:    db7cc87d51\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19042\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.202\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.5\r\n  Commit:  2f740adc14\r\n\r\n.NET SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.114 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.103 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.104 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.202 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\u0060\u0060\u0060\r\n\u003C/p\u003E\r\n\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version \u0060VS Version 16.9.4\u0060\r\n\r\n\u003C/details\u003E",
    "upvotes": 5,
    "labels": [
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgzMDczNTczMw==",
        "parentId": null,
        "author": "romansp",
        "content": "Explanation and relevant code: https://github.com/dotnet/aspnetcore/blob/ee11b07ec2da1e4a2b2e9720a83272bef3608adf/src/Mvc/Mvc.Testing/src/WebApplicationFactory.cs#L576-L591\r\n\r\nInstances of \u0060DelegatedWebApplicationFactory\u0060 don\u0027t keep track of further derived factories. In comparison \u0060WebApplicationFactory\u0060 stores them in \u0060_derivedFactories\u0060 field that are disposed when factory itself is disposed.",
        "createdAt": "2021-05-02T04:01:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32329#issuecomment-830735733"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg3MzIyOTM3MQ==",
        "parentId": null,
        "author": "??",
        "content": "Thank you for contacting us. Due to a lack of activity on this discussion issue we\u0027re closing it in an effort to keep our backlog clean. If you believe there is a concern related to the ASP.NET Core framework, which hasn\u0027t been addressed yet, please file a new issue.\n\nThis issue will be locked after 30 more days of inactivity. If you still wish to discuss this subject after then, please create a new issue!",
        "createdAt": "2021-07-02T20:00:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32329#issuecomment-873229371"
      },
      {
        "id": "IC_kwDOAQzde85USaNf",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "Reopened as this has been reported by another customer",
        "createdAt": "2023-02-02T17:30:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32329#issuecomment-1414112095"
      },
      {
        "id": "IC_kwDOAQzde85USdus",
        "parentId": null,
        "author": "andrewkubrin",
        "content": "Please fix that issue, this blocks us with finishing test, due to errors on pipeline, application don\u0027t stops in appropriate manner, and cancellation never requested. Thank you in advance \uD83D\uDE4F",
        "createdAt": "2023-02-02T17:42:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32329#issuecomment-1414126508"
      },
      {
        "id": "IC_kwDOAQzde85USzFS",
        "parentId": null,
        "author": "romansp",
        "content": "Just to chime in about the workaround we ended up doing in our codebase: track all derived factories manually and dispose them inside XUnit\u0027s \u0060IAsyncLifetime.DisposeAsync\u0060. This is not very pretty but does the job.\r\n\r\n\u0060\u0060\u0060c#\r\n// base class for all integration test cases\r\npublic class AppIntegrationTest : IAsyncLifetime \r\n{\r\n  protected readonly WebApplicationFactory\u003CStartup\u003E _App;\r\n  private WebApplicationFactory\u003CStartup\u003E _factory;\r\n  private List\u003CWebApplicationFactory\u003CStartup\u003E\u003E _derivedFactories = new List\u003CWebApplicationFactory\u003CStartup\u003E\u003E();\r\n\r\n  public AppIntegrationTest() \r\n  {\r\n    _factory = new WebApplicationFactory\u003CStartup\u003E();\r\n    _App = _factory.WithWebHostBuilder(builder =\u003E { \r\n      // base integration test overrides\r\n    });\r\n  }\r\n\r\n  public async Task DisposeAsync() \r\n  {\r\n    foreach(var derived in _derivedFactories) \r\n    {\r\n       await DisposeAsync(derived);\r\n    }\r\n    await DisposeAsync(_factory);\r\n    await DisposeAsync(_App);\r\n  }\r\n\r\n  protected WebApplicationFactory\u003CStartup\u003E WithWebHostBuilder(WebApplicationFactory\u003CStartup\u003E factory, Action\u003CIWebHostBuilder\u003E configuration) \r\n  {\r\n    var derived = factory.WithWebHostBuilder(configuration);\r\n    _derivedFactories.Add(derived);\r\n    return derived;\r\n  }\r\n}\r\n\r\npublic class UserTest : AppIntegrationTest \r\n{\r\n  public async Task CreateUser_success() \r\n  {\r\n    // Arrange\r\n    var appWithOverrides = WithWebHostBuilder(_App, builder =\u003E { \r\n      // this test specific overrides\r\n    });\r\n    var client = appWithOverrides.CreateClient();\r\n    // Act\r\n    // Assert\r\n  }\r\n}",
        "createdAt": "2023-02-02T18:55:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32329#issuecomment-1414213970"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5MjUxMDE5Mzg=",
    "title": "Share more RequestDelegateFactory.CreateArgument logic with EndpointMetadataApiDescriptionProvider",
    "url": "https://github.com/dotnet/aspnetcore/issues/33644",
    "createdAt": "2021-06-18T17:57:29Z",
    "lastUpdated": "2024-03-01T23:07:38Z",
    "body": "This would probably involve defining some well-known internal \u0060BindingSource\u0060 string constants. Shouldn\u0027t be too complicated though.\r\n\r\nSee https://github.com/dotnet/aspnetcore/pull/33433#discussion_r653065170",
    "upvotes": 0,
    "labels": [
      "task",
      "Priority:2",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2NDI0Nzg5OQ==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-06-18T20:03:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33644#issuecomment-864247899"
      },
      {
        "id": "IC_kwDOAQzde8482Ef9",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-25T04:44:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33644#issuecomment-1020807165"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5MzAzMTAwNzI=",
    "title": "Decouple WebApplicationFactory and TestServer",
    "url": "https://github.com/dotnet/aspnetcore/issues/33846",
    "createdAt": "2021-06-25T16:05:58Z",
    "lastUpdated": "2024-09-11T20:10:50Z",
    "body": "### Describe the bug\r\n\r\nAs part of looking into the new features in ASP.NET Core 6 (top-level statements, minimal APIs, etc.) I\u0027ve been looking at how to refactor the integration test approach I\u0027ve been using with previous versions of .NET Core where \u0060WebApplicationFactory\u0060 is available so that it works with the new approaches.\r\n\r\nFor integration tests where a UI is required, such as for browser automation tests, I\u0027ve been tackling this by creating a derived \u0060WebApplicationFactory\u0060 class to piggy-back its features to bootstrap an HTTP server using Kestrel so that there\u0027s a real HTTP port being listened to so that tools like Playwright and Selenium can interact with the application to test it.\r\n\r\nThese tests work by using the \u0060CreateHostBuilder()\u0060/\u0060CreateWebHostBuilder()\u0060 methods to access the build for the application and then manually creating it (rather than using the \u0060TestServer\u0060 the class usually provides) ([example](https://github.com/martincostello/dotnet-minimal-api-integration-testing/blob/efcac77f4ccef94113438af38046d8a012f5a4fe/tests/TodoApp.Tests/HttpServerFixture.cs#L155-L167)). The reason for re-using the \u0060WebApplicationFactory\u0060 code is that there\u0027s a logic embedded within it for finding the default content root, ensuring the \u0060.deps.json\u0060 files are there etc., which is a fair chunk of additional code to copy and maintain to otherwise replicate the approach with only minor tweaks on top (i.e. a real server). It also gives good code coverage of the same code that runs in production, rather than having to use an alternate code path just for the purpose of tests.\r\n\r\nTrying this out with the changes from #33462 using a preview 6 daily build however doesn\u0027t work for this scenario. This is because in the top-level statements scenario both methods return \u0060null\u0060 and the deferred implementation is private to the \u0060EnsureServer()\u0060 method:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/46ef939508a2c733104726a6c744368446883dc6/src/Mvc/Mvc.Testing/src/WebApplicationFactory.cs#L142-L178\r\n\r\nIf the implementation were to be refactored in a way that supported the existing scenarios by allowing the consuming class to get access to the \u0060DeferredHostBuilder\u0060 as an \u0060IHostBuilder\u0060, then I _presume_ that the use case I have today would work if that builder was used to bootstrap an application with it instead.\r\n\r\nOff the top of my head, maybe something like this could be a possible approach:\r\n\r\n\u0060\u0060\u0060csharp\r\nprotected virtual IHostBuilder? CreateHostBuilder()\r\n{\r\n    var hostBuilder = HostFactoryResolver.ResolveHostBuilderFactory\u003CIHostBuilder\u003E(typeof(TEntryPoint).Assembly)?.Invoke(Array.Empty\u003Cstring\u003E());\r\n\r\n    if (hostBuilder is null)\r\n    {\r\n        var deferredHostBuilder = new DeferredHostBuilder();\r\n        var factory = HostFactoryResolver.ResolveHostFactory(\r\n            typeof(TEntryPoint).Assembly,\r\n            stopApplication: false,\r\n            configureHostBuilder: deferredHostBuilder.ConfigureHostBuilder,\r\n            entrypointCompleted: deferredHostBuilder.EntryPointCompleted);\r\n\r\n        if (factory is not null)\r\n        {\r\n            deferredHostBuilder.SetHostFactory(factory);\r\n            hostBuilder = deferredHostBuilder;\r\n        }\r\n    }\r\n\r\n    hostBuilder?.UseEnvironment(Environments.Development);\r\n    return hostBuilder;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThe \u0060EnsureServer()\u0060 method would then just consume the deferred implementation without actually having any knowledge of it, and derived classes would be able to use the deferred implementation without being aware of the actual implementation details.\r\n\r\nI\u0027ve got a GitHub repo here with a sample TodoApp using this test approach using ASP.NET Core 6 preview 5 [here](https://github.com/martincostello/dotnet-minimal-api-integration-testing) (it doesn\u0027t use minimal APIs _yet_, mainly due to this issue), and there\u0027s a [branch](https://github.com/martincostello/dotnet-minimal-api-integration-testing/tree/preview-6) using a preview 6 daily build with this approach [that fails](https://github.com/martincostello/dotnet-minimal-api-integration-testing/runs/2913157536#step:6:60) to run the tests due to the lack of access to a host builder.\r\n\r\nWhile maybe this isn\u0027t an _intended_ use case of \u0060WebApplicationFactory\u0060, it\u0027s been working well since ASP.NET Core 2.1 and would require a fair bit of work to move away from to leverage the new functionalities in various application codebases in order to adopt ASP.NET Core 6.\r\n\r\nIf some minimal refactoring could be done that doesn\u0027t break the intended design, which I would be happy to contribute to, that could get this sort of use case working again with ASP.NET Core 6 using top-level statements that would be appreciated.\r\n\r\n/cc @davidfowl \r\n\r\n### To Reproduce\r\n\r\nTo reproduce, clone the [\u0060preview-6\u0060](https://github.com/martincostello/dotnet-minimal-api-integration-testing/tree/preview-6) branch of my work-in-progress sample application.\r\n\r\n### Further technical details\r\n\r\n- .NET SDK \u00606.0.100-preview.6.21324.1\u0060 (a daily build)\r\n- \u0060Microsoft.AspNetCore.Mvc.Testing\u0060 version \u00606.0.0-preview.6.21323.4\u0060\r\n- Visual Studio 2022 17.0.0 Preview 1.1\r\n",
    "upvotes": 9,
    "labels": [
      "bug",
      "area-mvc",
      "Priority:3",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2ODcxMDY4OA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "I originally did this but it breaks applications that were using the \u0060CreateWebHost\u0060 pattern, that\u0027s why it got moved to be a fallback. I can think of a sneaky way to solve this if we what you suggest above and only use the \u0060IHostBuilder\u0060 if it\u0027s not the \u0060DeferredHostBuilder\u0060. That is, we would keep the precedence as it is today but CreateHostBuilder wouldn\u0027t return null.\r\n\r\nBut stepping back a bit here, it seems like we should just decouple the WebApplicationFactory from the TestServer.",
        "createdAt": "2021-06-25T17:11:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-868710688"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2ODcxNzU4Nw==",
        "parentId": null,
        "author": "martincostello",
        "content": "\u003E But stepping back a bit here, it seems like we should just decouple the WebApplicationFactory from the TestServer.\r\n\r\nYeah, I definitely think there would be a benefit in exposing the building blocks that are in the implementation details out so you can compose them up in different ways. I\u0027m not sure what form they\u0027d take, but factoring the \u0060.deps\u0060, content root etc. bits out into some sort of \u0022\u0022helpers\u0022\u0022 that could be re-used, and then having WebApplicationFactory be refactored to utilise those would remove the need to sort-of user TestServer but then ignore it completely.\r\n\r\nI feel like _maybe_ this was discussed in a different PR or issue for WebApplicationFactory I was involved in previously, but there was some concern about doing so. I\u0027ll have a search and see if I recall correctly or if I\u0027ve just imagined it \uD83D\uDE04 ",
        "createdAt": "2021-06-25T17:21:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-868717587"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2ODcxOTE5MQ==",
        "parentId": null,
        "author": "martincostello",
        "content": "\u003E I feel like _maybe_ this was discussed in a different PR or issue for WebApplicationFactory I was involved in previously, but there was some concern about doing so. I\u0027ll have a search and see if I recall correctly or if I\u0027ve just imagined it \uD83D\uDE04\r\n\r\nIt was this comment here I was thinking of: https://github.com/dotnet/aspnetcore/pull/7414#issuecomment-470059404",
        "createdAt": "2021-06-25T17:24:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-868719191"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2OTg1MzM5OQ==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-06-28T17:00:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-869853399"
      },
      {
        "id": "IC_kwDOAQzde8400x_s",
        "parentId": null,
        "author": "davidfowl",
        "content": "I wonder if we can make a small change here to make the TestServer property be null if it a real server is in use. Instead typing the server [here](https://github.com/dotnet/aspnetcore/blob/90c3c97c8d7a16e87bd851de3ec92b3ed3fa954f/src/Mvc/Mvc.Testing/src/WebApplicationFactory.cs#L205) as \u0060IServer\u0060. Then change CreateClient to use the IServer to get the server addresses to create a real http client if it\u0027s not a test server. I can play with this tonight.",
        "createdAt": "2021-07-25T20:09:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-886251500"
      },
      {
        "id": "IC_kwDOAQzde841E7Jr",
        "parentId": null,
        "author": "martincostello",
        "content": "The proposed changes would still be better as I could remove yet more code, but I had a think about this a bit more, and managed to refactor my usage to get rid of the gnarly reflection to access the deferred host builder and move my \u0022hook\u0022 into \u0060CreateHost()\u0060. The only bit I don\u0027t like is that the real server has to be started first, otherwise you can\u0027t get the server addresses. I guess that\u0027s a consequence of the deferred host(builder) and the callback/event that gets fired by that once the application is built so the \u0060WebApplicationFactory\u003CT\u003E\u0060 callbacks can run.\r\n\r\n\u0060\u0060\u0060csharp\r\nusing System.Security.Cryptography.X509Certificates;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.AspNetCore.Hosting.Server;\r\nusing Microsoft.AspNetCore.Hosting.Server.Features;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace MyApp;\r\n\r\npublic sealed class HttpServerFixture : WebApplicationFactory\u003CMyEntrypoint\u003E\r\n{\r\n    private bool _disposed;\r\n    private IHost? _host;\r\n\r\n    public string ServerAddress\r\n    {\r\n        get\r\n        {\r\n            EnsureServer();\r\n            return ClientOptions.BaseAddress.ToString();\r\n        }\r\n    }\r\n\r\n    public override IServiceProvider Services\r\n    {\r\n        get\r\n        {\r\n            EnsureServer();\r\n            return _host!.Services!;\r\n        }\r\n    }\r\n\r\n    protected override void ConfigureWebHost(IWebHostBuilder builder)\r\n    {\r\n        base.ConfigureWebHost(builder);\r\n\r\n        builder.ConfigureKestrel(\r\n            serverOptions =\u003E serverOptions.ConfigureHttpsDefaults(\r\n                httpsOptions =\u003E httpsOptions.ServerCertificate = new X509Certificate2(\u0022localhost-dev.pfx\u0022, \u0022Pa55w0rd!\u0022)));\r\n\r\n        builder.UseUrls(\u0022https://127.0.0.1:0\u0022);\r\n    }\r\n\r\n    protected override IHost CreateHost(IHostBuilder builder)\r\n    {\r\n        // Create the host for TestServer now before we\r\n        // modify the builder to use Kestrel instead.\r\n        var testHost = builder.Build();\r\n\r\n        // Modify the host builder to use Kestrel instead\r\n        // of TestServer so we can listen on a real address.\r\n        builder.ConfigureWebHost((p) =\u003E p.UseKestrel());\r\n\r\n        // Create and start the Kestrel server before the test server,\r\n        // otherwise due to the way the deferred host builder works\r\n        // for minimal hosting, the server will not get \u0022initialized\r\n        // enough\u0022 for the address it is listening on to be available.\r\n        _host = builder.Build();\r\n        _host.Start();\r\n\r\n        // Extract the selected dynamic port out of the Kestrel server\r\n        // and assign it onto the client options for convenience so it\r\n        // \u0022just works\u0022 as otherwise it\u0027ll be the default http://localhost\r\n        // URL, which won\u0027t route to the Kestrel-hosted HTTP server.\r\n        var server = _host.Services.GetRequiredService\u003CIServer\u003E();\r\n        var addresses = server.Features.Get\u003CIServerAddressesFeature\u003E();\r\n\r\n        ClientOptions.BaseAddress = addresses!.Addresses\r\n            .Select((p) =\u003E new Uri(p))\r\n            .Last();\r\n\r\n        // Return the host that uses TestServer, rather than the real one.\r\n        // Otherwise the internals will complain about the host\u0027s server\r\n        // not being an instance of the concrete type TestServer.\r\n        testHost.Start();\r\n        return testHost;\r\n    }\r\n\r\n    protected override void Dispose(bool disposing)\r\n    {\r\n        base.Dispose(disposing);\r\n\r\n        if (!_disposed)\r\n        {\r\n            if (disposing)\r\n            {\r\n                _host?.Dispose();\r\n            }\r\n\r\n            _disposed = true;\r\n        }\r\n    }\r\n\r\n    private void EnsureServer()\r\n    {\r\n        // This forces WebApplicationFactory to bootstrap the server\r\n        using var _ = CreateDefaultClient();\r\n    }\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2021-08-01T09:19:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-890483307"
      },
      {
        "id": "IC_kwDOAQzde842NRw0",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-08-31T17:43:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-909450292"
      },
      {
        "id": "IC_kwDOAQzde85JIOeJ",
        "parentId": null,
        "author": "achselschweisz",
        "content": "\u003E The proposed changes would still be better as I could remove yet more code, but I had a think about this a bit more, and managed to refactor my usage to get rid of the gnarly reflection to access the deferred host builder and move my \u0022hook\u0022 into \u0060CreateHost()\u0060. The only bit I don\u0027t like is that the real server has to be started first, otherwise you can\u0027t get the server addresses. I guess that\u0027s a consequence of the deferred host(builder) and the callback/event that gets fired by that once the application is built so the \u0060WebApplicationFactory\u003CT\u003E\u0060 callbacks can run.\r\n\r\nSlightly off-topic but I need to mention this here anyway:\r\nThanks to this solution I finally managed to get integration tests running using Kestrel \u002B uds (unix domain sockets). Cheers!",
        "createdAt": "2022-08-25T07:39:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-1226893193"
      },
      {
        "id": "IC_kwDOAQzde85MAYm8",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:24:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-1275169212"
      },
      {
        "id": "IC_kwDOAQzde85n0EWI",
        "parentId": null,
        "author": "jepperaskdk",
        "content": "When calling \u0060.Build()\u0060 twice, I get: \u0060\u0022System.InvalidOperationException : Build can only be called once.\u0022\u0060\r\nAny idea why? (.NET 6 and .NET 7)\r\n\r\nLooks like it has been there for a long time:\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting/src/HostBuilder.cs#L150C1-L154",
        "createdAt": "2023-09-30T07:20:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-1741702536"
      },
      {
        "id": "IC_kwDOAQzde85pGzID",
        "parentId": null,
        "author": "Barsonax",
        "content": "\u003E The proposed changes would still be better as I could remove yet more code, but I had a think about this a bit more, and managed to refactor my usage to get rid of the gnarly reflection to access the deferred host builder and move my \u0022hook\u0022 into \u0060CreateHost()\u0060. The only bit I don\u0027t like is that the real server has to be started first, otherwise you can\u0027t get the server addresses. I guess that\u0027s a consequence of the deferred host(builder) and the callback/event that gets fired by that once the application is built so the \u0060WebApplicationFactory\u003CT\u003E\u0060 callbacks can run.\r\n\u003E \r\n\u003E \u0060\u0060\u0060cs\r\n\u003E using System.Security.Cryptography.X509Certificates;\r\n\u003E using Microsoft.AspNetCore.Hosting;\r\n\u003E using Microsoft.AspNetCore.Hosting.Server;\r\n\u003E using Microsoft.AspNetCore.Hosting.Server.Features;\r\n\u003E using Microsoft.Extensions.DependencyInjection;\r\n\u003E using Microsoft.Extensions.Hosting;\r\n\u003E \r\n\u003E namespace MyApp;\r\n\u003E \r\n\u003E public sealed class HttpServerFixture : WebApplicationFactory\u003CMyEntrypoint\u003E\r\n\u003E {\r\n\u003E     private bool _disposed;\r\n\u003E     private IHost? _host;\r\n\u003E \r\n\u003E     public string ServerAddress\r\n\u003E     {\r\n\u003E         get\r\n\u003E         {\r\n\u003E             EnsureServer();\r\n\u003E             return ClientOptions.BaseAddress.ToString();\r\n\u003E         }\r\n\u003E     }\r\n\u003E \r\n\u003E     public override IServiceProvider Services\r\n\u003E     {\r\n\u003E         get\r\n\u003E         {\r\n\u003E             EnsureServer();\r\n\u003E             return _host!.Services!;\r\n\u003E         }\r\n\u003E     }\r\n\u003E \r\n\u003E     protected override void ConfigureWebHost(IWebHostBuilder builder)\r\n\u003E     {\r\n\u003E         base.ConfigureWebHost(builder);\r\n\u003E \r\n\u003E         builder.ConfigureKestrel(\r\n\u003E             serverOptions =\u003E serverOptions.ConfigureHttpsDefaults(\r\n\u003E                 httpsOptions =\u003E httpsOptions.ServerCertificate = new X509Certificate2(\u0022localhost-dev.pfx\u0022, \u0022Pa55w0rd!\u0022)));\r\n\u003E \r\n\u003E         builder.UseUrls(\u0022https://127.0.0.1:0\u0022);\r\n\u003E     }\r\n\u003E \r\n\u003E     protected override IHost CreateHost(IHostBuilder builder)\r\n\u003E     {\r\n\u003E         // Create the host for TestServer now before we\r\n\u003E         // modify the builder to use Kestrel instead.\r\n\u003E         var testHost = builder.Build();\r\n\u003E \r\n\u003E         // Modify the host builder to use Kestrel instead\r\n\u003E         // of TestServer so we can listen on a real address.\r\n\u003E         builder.ConfigureWebHost((p) =\u003E p.UseKestrel());\r\n\u003E \r\n\u003E         // Create and start the Kestrel server before the test server,\r\n\u003E         // otherwise due to the way the deferred host builder works\r\n\u003E         // for minimal hosting, the server will not get \u0022initialized\r\n\u003E         // enough\u0022 for the address it is listening on to be available.\r\n\u003E         _host = builder.Build();\r\n\u003E         _host.Start();\r\n\u003E \r\n\u003E         // Extract the selected dynamic port out of the Kestrel server\r\n\u003E         // and assign it onto the client options for convenience so it\r\n\u003E         // \u0022just works\u0022 as otherwise it\u0027ll be the default http://localhost\r\n\u003E         // URL, which won\u0027t route to the Kestrel-hosted HTTP server.\r\n\u003E         var server = _host.Services.GetRequiredService\u003CIServer\u003E();\r\n\u003E         var addresses = server.Features.Get\u003CIServerAddressesFeature\u003E();\r\n\u003E \r\n\u003E         ClientOptions.BaseAddress = addresses!.Addresses\r\n\u003E             .Select((p) =\u003E new Uri(p))\r\n\u003E             .Last();\r\n\u003E \r\n\u003E         // Return the host that uses TestServer, rather than the real one.\r\n\u003E         // Otherwise the internals will complain about the host\u0027s server\r\n\u003E         // not being an instance of the concrete type TestServer.\r\n\u003E         testHost.Start();\r\n\u003E         return testHost;\r\n\u003E     }\r\n\u003E \r\n\u003E     protected override void Dispose(bool disposing)\r\n\u003E     {\r\n\u003E         base.Dispose(disposing);\r\n\u003E \r\n\u003E         if (!_disposed)\r\n\u003E         {\r\n\u003E             if (disposing)\r\n\u003E             {\r\n\u003E                 _host?.Dispose();\r\n\u003E             }\r\n\u003E \r\n\u003E             _disposed = true;\r\n\u003E         }\r\n\u003E     }\r\n\u003E \r\n\u003E     private void EnsureServer()\r\n\u003E     {\r\n\u003E         // This forces WebApplicationFactory to bootstrap the server\r\n\u003E         using var _ = CreateDefaultClient();\r\n\u003E     }\r\n\u003E }\r\n\u003E \u0060\u0060\u0060\r\n\r\nCalling CreateDefaultClient sometimes fails with \u0060System.InvalidOperationException : The server has not been started or no web application was configured.\u0060. Iam assuming here you are only calling this to call EnsureServer so in my code I have changed this to simply call \u0060var foo = base.Services\u0060 which internally will call EnsureServer which seems to work. Quite hacky still and I think using reflection might actually be better here as that captures the intent in a better way.\r\n\r\nUsing this approach with playwright here: https://github.com/Barsonax/AwesomeApiTest/blob/master/Examples/Browser/AwesomeApiTest.Nunit/TestSetup/AwesomeApiTestSut.cs\r\n\r\nWould be very nice if there was a clean way of doing this.",
        "createdAt": "2023-10-15T13:27:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-1763389955"
      },
      {
        "id": "IC_kwDOAQzde86JlsRc",
        "parentId": null,
        "author": "KSemenenko",
        "content": "is there any updates? maybe .net 9?",
        "createdAt": "2024-08-24T11:19:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-2308359260"
      },
      {
        "id": "IC_kwDOAQzde86Jls5_",
        "parentId": null,
        "author": "martincostello",
        "content": "It\u0027s too late for .NET 9 - this wouldn\u0027t be until .NET 10 at the earliest now.",
        "createdAt": "2024-08-24T11:31:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-2308361855"
      },
      {
        "id": "IC_kwDOAQzde86JmLhX",
        "parentId": null,
        "author": "KSemenenko",
        "content": "Then I push temporary solution https://github.com/managedcode/IntegrationTestBaseKit \r\nI add http liner, signalR client and playwright.",
        "createdAt": "2024-08-24T18:31:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-2308487255"
      },
      {
        "id": "IC_kwDOAQzde86Lv_WI",
        "parentId": null,
        "author": "pacoteinnov",
        "content": "\u003E When calling \u0060.Build()\u0060 twice, I get: \u0060\u0022System.InvalidOperationException : Build can only be called once.\u0022\u0060 Any idea why? (.NET 6 and .NET 7)\r\n\u003E \r\n\u003E Looks like it has been there for a long time: https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Hosting/src/HostBuilder.cs#L150C1-L154\r\n\r\nYou probably have a \u0060public static IHostBuilder CreateHostBuilder(string[] args)\u0060 somewhere that gets called.",
        "createdAt": "2024-09-11T20:10:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33846#issuecomment-2344613256"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NDIyMzI1MjM=",
    "title": "Profile and performance test IResult implementations",
    "url": "https://github.com/dotnet/aspnetcore/issues/34282",
    "createdAt": "2021-07-12T16:26:26Z",
    "lastUpdated": "2024-03-01T23:09:50Z",
    "body": "The Results factory and \u0060IResult\u0060 implementations allocate a bunch of objects that can likely be short circuited in lots of cases. We should do some profiling and optimizing of these types (MVC will benefit as well).\r\n\r\nOne example of this is the fact that they each resolve the logger per request even in the success case.",
    "upvotes": 1,
    "labels": [
      "Perf",
      "Priority:3",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde843-nt8",
        "parentId": null,
        "author": "captainsafia",
        "content": "@BrennanConroy and I spent some time look at this today. We investigated the behavior for some of the IResult implementations but not all of them. Key notes below.\r\n\r\n\u003E We should do some profiling and optimizing of these types (MVC will benefit as well).\r\n\r\nIt doesn\u0027t seem like this will be the case since the MVC and Http result types are totally different but let me know if I misunderstood this.\r\n\r\nHere\u0027s our findings so far from doing a memory analysis.\r\n\r\n- In a few of the \u0060IResult\u0060 implements to call \u0060GetType\u0060 to set the category for the logger which allocates. There\u0027s some small wins we can make there. ([ref](https://github.com/dotnet/aspnetcore/blob/main/src/Http/Http.Results/src/ObjectResult.cs#L47-L48))\r\n- The LoggerFactory resolution does cost us some (about 165K for 1,000 requests).\r\n- The \u0060ContentResult\u0060 implementations allocates a new instances of the \u0060GetEncoding\u0060 func for each invocation.\r\n- There\u0027s a phantom \u0060Substring\u0060 call when a \u0060RedirectResult\u0060 is invoked with a local url. Probably not relevant or interesting but we spent a fair chunk of time trying to hunt it down! Based on our reading of the code only one \u0060Substring\u0060 call is required.\r\n\r\nHere are the other implementations of interest to look at:\r\n\r\n- [ ] FileResult\r\n- [ ] ForbidResult\r\n- [ ] ChallengeResult\r\n- [ ] RedirectToRouteResult\r\n- [ ] LocalRedirectResult",
        "createdAt": "2021-10-08T23:16:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34282#issuecomment-939162492"
      },
      {
        "id": "IC_kwDOAQzde85LWxNw",
        "parentId": null,
        "author": "davidfowl",
        "content": "@rafikiassumani-msft Can we do some performance work in .NET 8 here? @captainsafia and @BrennanConroy did a good investigation and we can break that down into shovel ready work that anyone can do (even external contributors).",
        "createdAt": "2022-10-01T06:10:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34282#issuecomment-1264259952"
      },
      {
        "id": "IC_kwDOAQzde85MAXhW",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:20:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34282#issuecomment-1275164758"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NDM3MzA0OTc=",
    "title": "Add a variant of FileResult / Results.Stream that gives you access to the underlying response body",
    "url": "https://github.com/dotnet/aspnetcore/issues/34311",
    "createdAt": "2021-07-13T18:46:57Z",
    "lastUpdated": "2023-06-02T03:17:42Z",
    "body": "## Background and Motivation\r\n\r\n\u003C!--\r\nWe welcome API proposals! We have a process to evaluate the value and shape of new API. There is an overview of our process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md). This template will help us gather the information we need to start the review process.\r\nFirst, please describe the purpose and value of the new API here.\r\n--\u003E\r\n\r\n## Proposed API\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Http\r\n{\r\n    public static class Results\r\n    {\r\n\u002B       public IResult Stream(this HttpResponse response, Func\u003CStream, CancellationToken, Task\u003E streamAction, string? contentType = null);\r\n    }\r\n\r\nnamespace Microsoft.AspNetCore.Mvc\r\n{\r\n      public class ControllerBase\r\n      {\r\n\u002B          public StreamActionResult Stream(Func\u003CStream, CancellationToken, Task\u003E streamAction);            \r\n      }\r\n\r\n\u002B     public class StreamActionResult : ActionResult\r\n\u002B     {\r\n\u002B            public StreamActionResult(Func\u003CStream, CancellationToken, Task\u003E streamAction, string? contentType);\r\n\u002B            public Func\u003CStream, CancellationToken, Task\u003E StreamAction { get; set; }\r\n\u002B            public Task ExecuteAsync(ActionResult actionResult);\r\n\u002B     }\r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/blob\u0022, (BlobServiceClient client) =\u003E \r\n{\r\n    BlobClient blob = client.GetBlobContainerClient(\u0022container\u0022).GetBlobClient(\u0022blob\u0022);\r\n    return Results.Stream((stream, cancellationToken) =\u003E blob.DownloadToAsync(stream,  cancellationToken), fileDownloadName: fileName));\r\n});\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060C#\r\npublic class TestController : ControllerBase\r\n{\r\n    public IActionResult GetBlob()\r\n    {\r\n        BlobClient blob = client.GetBlobContainerClient(\u0022container\u0022).GetBlobClient(\u0022blob\u0022);\r\n        return Stream((stream, cancellationToken) =\u003E blob.DownloadToAsync(stream,  cancellationToken), fileDownloadName: fileName));\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nNote that this does not expose conditional requests / range requests as supported by other File* / Stream based results.\r\n\r\n## Risks\r\nN/A\r\n",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "api-suggestion",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg3OTMxODE5Nw==",
        "parentId": null,
        "author": "pranavkm",
        "content": "FYI @davidfowl / @halter73 ",
        "createdAt": "2021-07-13T18:47:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34311#issuecomment-879318197"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg3OTM2MjIzOQ==",
        "parentId": null,
        "author": "halter73",
        "content": "Is it a good idea to use this kind of API for potentially large pieces of data that support range requests? I think even supporting passing in a Stream is questionable, but at least that could be seekable and it\u0027s a legacy behavior. Today, if a Stream you pass in to ControllerBase.FilE() is not seekable, does it throw? Or does it just keep reading until it gets to the requested range?",
        "createdAt": "2021-07-13T20:00:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34311#issuecomment-879362239"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg3OTM4NjgxNQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "I don\u0027t think this can support range requests since we\u0027d need an API to allow seeking (unless we planned to read the entire thing). That does make the value somewhat lower but this scenario is so common scenario that it should be easy to do.",
        "createdAt": "2021-07-13T20:39:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34311#issuecomment-879386815"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg3OTM5MTYyMw==",
        "parentId": null,
        "author": "pranavkm",
        "content": "The current implementation #yolo seeks (https://github.com/dotnet/aspnetcore/blob/main/src/Shared/ResultsHelpers/FileResultHelper.cs#L42). Looking at the code, I can\u0027t tell if it only enables range processing only if the stream is seekable (@Tratcher ?)",
        "createdAt": "2021-07-13T20:47:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34311#issuecomment-879391623"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg3OTM5NTc0NA==",
        "parentId": null,
        "author": "Tratcher",
        "content": "Range handling is opt-in:\r\nhttps://github.com/dotnet/aspnetcore/blob/0590dc7246d3f6963830489841a6f09634e29e3f/src/Shared/ResultsHelpers/FileResultHelper.cs#L59\r\n\r\nI don\u0027t see any specific CanSeek check, presumably the person enabling range processing checked that first.",
        "createdAt": "2021-07-13T20:54:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34311#issuecomment-879395744"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg3OTM5NTg3NA==",
        "parentId": null,
        "author": "halter73",
        "content": "I does seem weird an unnecessary to add this complicated callback-based API when you could just use \u0060HttpResponse.Body\u0060 if that\u0027s all \u0060Stream\u0060 parameter to the callback really is anyway.\r\n\r\nI guess I can see it if people are just looking through the static Result methods for a way to write to a response Stream, but it\u0027s kinda sad because it\u0027s more complicated than the lower level API.",
        "createdAt": "2021-07-13T20:54:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34311#issuecomment-879395874"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg3OTM5NzEwOA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "OK lets keep this on ice for now and wait for feedback,",
        "createdAt": "2021-07-13T20:57:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34311#issuecomment-879397108"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg4MDg2NDk2Nw==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-15T17:01:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34311#issuecomment-880864967"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NDg2NTM1MjU=",
    "title": "Automatically set OpenAPI endpoint metadata for minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/34544",
    "createdAt": "2021-07-20T13:27:00Z",
    "lastUpdated": "2025-01-02T14:33:21Z",
    "body": "Rather than having to manually specify the endpoint metadata associated with describing the response types a minimal API produces, it would be preferable to have these details automatically added based on what the minimal API actually does (its implemention) and/or by some convention based on how it\u0027s declared.\r\n\r\n- For anonymous delegates, the name could be automatically set via a convention based on which HTTP verb it responds to, the path it\u0027s mapped to, and the parameters it accepts from the request, e.g. \u0060app.MapGet(\u0022/hello/{name}\u0022, (string name) =\u003E $\u0022Hello {name}\u0022);\u0060 might get an auto-generated name of \u0060GetHelloByName\u0060.\r\n- For \u0060IResult\u0060 returning endpoint delegates, the status codes, content types, and response types the endpoint returns could be determined by analyzing the method body implementation and detecting the return paths and determining the specific details of what the \u0060IResult\u0060 does when executed, e.g. by annotations on the \u0060IResult\u0060-implementing type itself, or some other mechanism\r\n- The discovered details could be written to a source-generated manifest that is embedded in the project assembly and discovered at application startup automatically (e.g. via an \u0060IHostingStartup\u0060 \u0026 \u0060IStartupFilter\u0060 ) and is then used to match the details with the registered endpoints.\r\n\r\nThis is scoped to post-.NET 6 at this time, but could potentially be delivered before .NET 7 if it only involves an update in the tooling/SDK rather than an update in the ASP.NET Core shared framework.",
    "upvotes": 6,
    "labels": [
      "Needs: Design",
      "Priority:1",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde840qOFd",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-20T15:24:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34544#issuecomment-883482973"
      },
      {
        "id": "IC_kwDOAQzde85JE7aO",
        "parentId": null,
        "author": "captainsafia",
        "content": "For a given endpoint, we need to be able describe the following attributes via OpenAPI:\r\n\r\nDeriving **request parameters** (route params, query params, header params) is already done, given that these parameter types are easy to infer since they are all parseable from strings. We run into some issues with representing things like DateOnly and new primitive types from time to time, but there\u0027s no foundational issue here.\r\n\r\nDeriving the **request body** is marginally harder than describing request parameters because we need to be able to determine the schema for a given property.\r\n\r\nDeriving the **response body** is harder still since there can be multiple responses from a single endpoint and there are multiple facets to annotate as mentioned above (status code, content type, response schema).\r\n\r\nFor both **request body** and **response body**, the \u0060IEndpointMetadataProvider\u0060 and \u0060IEndpointParameterMetadataProvider\u0060 API provide vectors for setting this metadata, however, it\u0027s not automatic and requires user intervention.\r\n\r\nDeriving **authentication config** will likely depend on the work done in https://github.com/dotnet/aspnetcore/issues/39761. IMO, this is probably the most important one for us to figure out at the moment given that there\u0027s really no way to configure this in the framework at the moment. We don\u0027t have a \u0060Produces\u0060 or \u0060Accepts\u0060 for authentication info.\r\n\r\nWith that in mind, we can either solve the problem for automatically setting authentication config separately from setting request/response body information or we can do user the same hammer for both problems.\r\n\r\nhttps://github.com/dotnet/aspnetcore/issues/34543 is related to this work and lends itself to a \u0022static analysis\u0022-based approach for automatically determine the right annotations to put in for requests/responses. https://github.com/dotnet/aspnetcore/issues/39761 identifies the challenge with automatically generating auth annotations.\r\n\r\nWith the landscape laid out this way, I\u0027m inclined to shake out the static analysis approach (analyzer/source generator/etc.) as a dual-purpose solution for _both_ the authentication problem and the request/response problem. Also, the static analysis approach would provide a vector for solving https://github.com/dotnet/aspnetcore/issues/39927 (which has quite a few thumbs up!)\r\n\r\nOh, the \u0027automatically generating OperationId\u0022 problem is certainly a valid one to solve although, IMO, it\u0027s not as important as solving the other two until we make considerable headway in the client generation area.\r\n\r\n\r\n",
        "createdAt": "2022-08-24T17:31:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34544#issuecomment-1226028686"
      },
      {
        "id": "IC_kwDOAQzde85JcITQ",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "Worth noting that we added \u0060TypedResults\u0060 and union results via \u0060Results\u003CTResult1, TResultN, ...\u003E\u0060 in .NET 7 to enable automatic setting of OpenAPI related metadata for response codes/bodies which at least partially addresses this issue (albeit with a required app code change).",
        "createdAt": "2022-08-30T20:04:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34544#issuecomment-1232110800"
      },
      {
        "id": "IC_kwDOAQzde85JhNWp",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Worth noting that we added TypedResults and union results via Results\u003CTResult1, TResultN, ...\u003E in .NET 7 to enable automatic setting of OpenAPI related metadata for response codes/bodies which at least partially addresses this issue (albeit with a required app code change).\r\n\r\nAh, good point! I had captured the metadata provider strategy above but not this one.\r\n\r\nAnd this thread has made me realize that we have quite a few different ways to annotate responses. I\u0027ve captured an item to make sure we document these in https://github.com/dotnet/aspnetcore/issues/43145.",
        "createdAt": "2022-08-31T21:31:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34544#issuecomment-1233442217"
      },
      {
        "id": "IC_kwDOAQzde85Jl2wS",
        "parentId": null,
        "author": "captainsafia",
        "content": "As I\u0027ve been playing around with the static analysis for OpenAPI generation strategy here, I\u0027m noting the challenge of converging schema that can be deduced by static analysis and schema that must be derived by examining metadata.\r\n\r\nCurrently, we can derive annotation responses in the following ways (from lowest precedence to highest precedence):\r\n\r\n- Annotations derived by default when examining the response type of an endpoint\r\n- Annotations derived by an \u0060IEndpointMetadataProvider\u0060 (\u0060TypedResults\u0060 are implicitly captured in this category since they use the \u0060IEndpointMetadataProvider\u0060 infrastructure)\r\n- Annotations provided by the user via a \u0060Produces\u0060 extension method or attribute\r\n\r\nAssuming we had a static analysis phase, we would be able to derive the following at compile-time:\r\n\r\n- Derive annotations by examining the response type of an endpoint\r\n- Derive annotations by examining the XML documentation on an endpoint where applicable\r\n\r\nAnd the following would be derived at runtime:\r\n\r\n- Annotations derived by an \u0060IEndpointMetadataProvider\u0060 (\u0060TypedResults\u0060 are implicitly captured in this category since they use the \u0060IEndpointMetadataProvider\u0060 infrastructure)\r\n- Annotations provided by the user via a \u0060Produces\u0060 extension method or attribute\r\n\r\nThis flow accounts for premise, so we consider annotations from XML documents to be lower precedence than annotations from \u0060IEndpointMetadataProvider\u0060s. Note: although the above is in reference to responses, the same hierarchy exists for requests.\r\n",
        "createdAt": "2022-09-01T18:54:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34544#issuecomment-1234660370"
      },
      {
        "id": "IC_kwDOAQzde85JmdDq",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "Crazy thought, although not sure how valuable, perhaps annotations from \u0060IEndpointMetadataProvider\u0060 could actually be captured at compile/build-time, similar to how the EF Core and scaffolding CLIs captures app/CI details. Not sure it gains anything in this scenario but .NET has a history of this style of extensibility in the past.",
        "createdAt": "2022-09-01T21:49:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34544#issuecomment-1234817258"
      },
      {
        "id": "IC_kwDOAQzde85KMYc3",
        "parentId": null,
        "author": "captainsafia",
        "content": "@DamianEdwards has been working on a scenario that leverages the new \u0060ProblemDetailsService\u0060 to configure response types that are applied to all endpoints in an application or all endpoints in a group.\r\n\r\nThis is an inference problem that is a little closer to the \u0022introspect auth\u0022 problem than it is the \u0022introspect an endpoint\u0022 problem since it requires taking knowledge derived at the app-level and including it in each\u0027s groups annotation. OpenAPI uses the \u0060components\u0060 property as a category in which these cross-cutting and reusable objects are stored (like response schemas, authentication schemes, etc).\r\n\r\nThis behavior exposes another notable gap in our OpenAPI-implementations which is that they are highly operation specific, we don\u0027t rely expose any primitives that allow the user to provide app-level annotations and generally rely on external dependencies for that. This has generally been a fine design choice, but the \u0060ProblemDetails\u0060 case and the \u0022introspect auth\u0022 scenario indicate that we might be outgrowing that restriction.",
        "createdAt": "2022-09-13T00:58:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34544#issuecomment-1244759863"
      },
      {
        "id": "IC_kwDOAQzde86ADoOi",
        "parentId": null,
        "author": "zyofeng",
        "content": "Hi guys\r\n\r\nNot sure if this is the right place to report the issue, but in .net 8 minimal api, it seems the metadata provider is not working with FileContentHttpResult\r\n\u0060\u0060\u0060\r\n\r\n        group.MapGet(\u0022test\u0022,  () =\u003E\r\n                TypedResults.File([])\r\n            )\r\n\u0060\u0060\u0060\r\nThe following is produced in NSwag\r\n\u0060\u0060\u0060\r\n\u0022responses\u0022: {\r\n      \u0022200\u0022: {\r\n          \u0022description\u0022: \u0022\u0022\r\n      }\r\n  }\r\n\u0060\u0060\u0060\r\n\r\nand I have to explicitly add the Produces\u003CFileContentResult\u003E() to make it work.\r\n\r\n\u0060\u0060\u0060\r\n        group.MapPost(\u0022test\u0022,  () =\u003E\r\n                TypedResults.File([])\r\n            )\r\n            .Produces\u003CFileContentResult\u003E()\r\n\u0060\u0060\u0060",
        "createdAt": "2024-06-04T21:20:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34544#issuecomment-2148434850"
      },
      {
        "id": "IC_kwDOAQzde86AtmnM",
        "parentId": null,
        "author": "halter73",
        "content": "\u0060FileContentHttpResult\u0060 is not intended to add any metadata to your response. It does not implement \u0060IEndpointMetadataProvider\u0060 because we don\u0027t know just based on the type whether the default content-type of\r\n\u0060application/octet-stream\u0060 was overridden or even if the status code was changed from 200 before the \u0060FileContentHttpResult\u0060 was returned. We decided to be very conservative and not infer more than we really know.\r\n\r\n\u003E \u0060.Produces\u003CFileContentResult\u003E()\u0060\r\n\r\nI don\u0027t think there\u0027s a reason to ever do that. Unless you want the OpenAPI doc to say that will return an\r\n\u0060application/json\u0060 response with a \u0022FileContents\u0022 property. I think you would want something like the following instead:\r\n\r\n\u003E \u0060.Produces(200, contentType: \u0022application/octet-stream\u0022)\u0060",
        "createdAt": "2024-06-10T22:49:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34544#issuecomment-2159438284"
      },
      {
        "id": "IC_kwDOAQzde86AtulD",
        "parentId": null,
        "author": "zyofeng",
        "content": "According to Mozilla, \u0022application/octet-stream\u0022 is for generic binary data whose true type is unknown, I feel like it\u0027s safe to infer it as a fallback since we still have the ability to overwrite it with a specific content type using Produces(200, xxxx)\r\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\r\n\r\n\r\n\r\n\u0060\u0060\u0060\r\n.Produces\u003CFileContentResult\u003E()\r\n\u0060\u0060\u0060\r\nGenerates the correct metadata as far as I can see.\r\n![image](https://github.com/dotnet/aspnetcore/assets/23351416/74414383-6e5c-46b9-925a-0eefb7a3aec3)\r\n",
        "createdAt": "2024-06-10T23:23:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34544#issuecomment-2159470915"
      },
      {
        "id": "IC_kwDOAQzde86ZDoes",
        "parentId": null,
        "author": "dse-copsfs",
        "content": "I like @zyofeng\u0027s proposal with the fallback solution. Please consider it for planning the next milestone, it would be beneficial for our project, too.",
        "createdAt": "2025-01-02T14:33:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34544#issuecomment-2567866284"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NDkxMDcxODk=",
    "title": "Properly support different \u0060FromBody.AllowEmpty\u0060 settings ",
    "url": "https://github.com/dotnet/aspnetcore/issues/34567",
    "createdAt": "2021-07-20T21:22:11Z",
    "lastUpdated": "2023-06-06T23:45:54Z",
    "body": "The \u0060FromBody\u0060 attribute currently accepts a boolean allowEmpty value that allows the developer to determine whether or not the route will accept an empty body as part of the request.\r\n\r\nThe attribute currently assumes that both \u0060EmptyBodyBehavior.Default\u0060 and \u0060EmptyBodyBehavior.Disallow\u0060 map to \u0060allowEmpty = false\u0060 which is problematic when we want to discern scenarios where a developer explicitly set the \u0060allowEmpty\u0060 parameter vs scenarios where we are using the implied value.\r\n\r\nWe\u0027ll need to update the codepath to discern when a user set the \u0060AllowEmpty\u0060 attribute to support overriding the optionality configuration that was inferred from the code.\r\n\r\nSee https://github.com/dotnet/aspnetcore/pull/34505#discussion_r673361923 for more info.",
    "upvotes": 0,
    "labels": [
      "Priority:3",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde840xWoK",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-23T02:12:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34567#issuecomment-885352970"
      },
      {
        "id": "IC_kwDOAQzde8406sR5",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-27T20:09:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34567#issuecomment-887800953"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NTAxODM5MjE=",
    "title": "Log endpoint details at application startup to aid with issue diagnosis",
    "url": "https://github.com/dotnet/aspnetcore/issues/34604",
    "createdAt": "2021-07-21T23:33:04Z",
    "lastUpdated": "2023-06-06T23:45:55Z",
    "body": "To aid in situations where one is trying to diagnose issues related to routing, minimal API endpoints, parameter binding sources, etc. it would be beneficial for a log to be emitted containing the endpoint details as they\u0027re registered, i.e. one log per endpoint. When the endpoint is a minimal API, it should include details of how the parameters will be bound, and return type details, along with any endpoint metadata associated with the endpoint. It might be interesting to think about how other endpoint-providing sub-systems, e.g. MVC, could augment this log with relevant information too.\r\n\r\nThe log would target the DEBUG log level and include a message and a single value containing a JSON payload of the details, e.g.:\r\n\r\n\u0060Message: Endpoint added at route \u0022/say/{greeting}/{name}/{age?:int}\u0060\r\n\u0060\u0060\u0060 jsonc\r\n{\r\n    \u0022route\u0022: {\r\n        \u0022pattern\u0022: \u0022/say/{greeting}/{name}/{age?:int}\u0022,\r\n        \u0022verbs\u0022: \u0022GET\u0022,\r\n        \u0022name\u0022: null,\r\n        \u0022parameters\u0022: [\r\n            {\r\n                \u0022name\u0022: \u0022greeting\u0022,\r\n                \u0022required\u0022: true\r\n            },\r\n            {\r\n                \u0022name\u0022: \u0022name\u0022,\r\n                \u0022required\u0022: true\r\n            },\r\n            {\r\n                \u0022name\u0022: \u0022age\u0022,\r\n                \u0022required\u0022: false\r\n            }\r\n        ]\r\n    },\r\n    \u0022description\u0022: {\r\n        \u0022name\u0022: \u0022GetGreeting\u0022, // Would be null if we determine it was an anonymous delegate (i.e. compiler generated name)\r\n        \u0022delegateReturnType\u0022: \u0022Task\u003Cstring\u003E\u0022,\r\n        \u0022responseProcessing\u0022: \u0022string\u0022, // Possible values: string, JSON, IResult\r\n        \u0022parameters\u0022: [\r\n            {\r\n                \u0022name\u0022: \u0022greeting\u0022,\r\n                \u0022required\u0022: true,\r\n                \u0022type\u0022: \u0022string\u0022,\r\n                \u0022bindingSource\u0022: \u0022RouteData\u0022 // Possible values: RouteData, QueryString, ServiceProvider, RequestBody\r\n            },\r\n            {\r\n                \u0022name\u0022: \u0022name\u0022,\r\n                \u0022required\u0022: true,\r\n                \u0022type\u0022: \u0022string\u0022,\r\n                \u0022bindingSource\u0022: \u0022RouteData\u0022\r\n            },\r\n            {\r\n                \u0022name\u0022: \u0022age\u0022,\r\n                \u0022required\u0022: false,\r\n                \u0022type\u0022: \u0022int\u0022,\r\n                \u0022bindingSource\u0022: \u0022RouteData\u0022\r\n            },\r\n            {\r\n                \u0022name\u0022: \u0022filter\u0022,\r\n                \u0022required\u0022: false,\r\n                \u0022type\u0022: \u0022string\u0022,\r\n                \u0022bindingSource\u0022: \u0022QueryString\u0022\r\n            },\r\n            {\r\n                \u0022name\u0022: \u0022db\u0022,\r\n                \u0022required\u0022: true,\r\n                \u0022type\u0022: \u0022MyApplication.TodoDb\u0022,\r\n                \u0022bindingSource\u0022: \u0022ServiceProvider\u0022\r\n            }\r\n        ]\r\n    },\r\n    \u0022metadata\u0022: {\r\n        // Keys are type name, value are result of ToString()\r\n        \u0022EndpointNameAttribute\u0022: \u0022GetGreeting\u0022,\r\n        \u0022HttpMethodMetadata\u0022: \u0022GET\u0022,\r\n        \u0022MethodInfo\u0022: \u0022\u0022\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n@davidfowl ",
    "upvotes": 0,
    "labels": [
      "Priority:3",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde840unnu",
        "parentId": null,
        "author": "davidfowl",
        "content": "Couple of notes:\r\n- I don\u0027t like the name \u0022minimalAction\u0022, it should be something else more generic \u0022action\u0022, \u0022description\u0022 etc.\r\n- Do we need signature? We have the return type and arguments.\r\n- We don\u0027t have this route information in the same place that has the binding information but we might be able to fix this with some refactoring.\r\n- Constrains are interesting, do you think its useful to show them and why?",
        "createdAt": "2021-07-22T03:38:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34604#issuecomment-884636142"
      },
      {
        "id": "IC_kwDOAQzde841H6Mu",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "- The \u0022minimalAction\u0022 name was meant to convey that the detail following is about the specific kind of endpoint added. In the future other endpoints might have a \u0022controllerAction\u0022 section instead or similar. That said, I don\u0027t like the name either but it\u0027s what we\u0027ve used in the relevant type names. We could just go with \u0022description\u0022 like your suggestion says if we want something generic and don\u0027t intend to have the properties under it be consistent per node name, so in the future if we have controller actions emit this too it would also have \u0022description\u0022 but have different properties.\r\n- The signature is just friendly I guess and makes it easy to quickly match the log to the API delegate\r\n- I\u0027ll trust you that we can refactor things to make emitting this possible/straightforward\r\n- IIRC route constraints affect matching which is usually one of the hardest parts of diagnosing route issues, so I figured including the details explicitly would be useful here. Also if a custom route constraint is used this would be the place that confirms the short identifier is correctly mapped to the implementing type.",
        "createdAt": "2021-08-02T19:11:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34604#issuecomment-891265838"
      },
      {
        "id": "IC_kwDOAQzde841H-J9",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E The signature is just friendly I guess and makes it easy to quickly match the log to the API delegate\r\n\r\nI would get rid of this.\r\n\r\n\u003E IIRC route constraints affect matching which is usually one of the hardest parts of diagnosing route issues, so I figured including the details explicitly would be useful here. Also if a custom route constraint is used this would be the place that confirms the short identifier is correctly mapped to the implementing type.\r\n\r\nI would get rid of this as well, we\u0027d need to flow this information and we don\u0027t have it all in the same place right now.",
        "createdAt": "2021-08-02T19:38:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34604#issuecomment-891282045"
      },
      {
        "id": "IC_kwDOAQzde841H-xD",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "Will update the example based on the feedback",
        "createdAt": "2021-08-02T19:43:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34604#issuecomment-891284547"
      },
      {
        "id": "IC_kwDOAQzde841Z8O_",
        "parentId": null,
        "author": "Kahbazi",
        "content": "\u003E     \u0022metadata\u0022: {\r\n\u003E         // Keys are type name, value are result of ToString()\r\n\u003E         \u0022EndpointNameAttribute\u0022: \u0022GetGreeting\u0022,\r\n\r\nDoes this mean all current implementations of metadata should override \u0060ToString()\u0060 to return something meaningful?",
        "createdAt": "2021-08-10T12:38:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34604#issuecomment-895992767"
      },
      {
        "id": "IC_kwDOAQzde841ae7-",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "@Kahbazi that would be ideal.",
        "createdAt": "2021-08-10T16:36:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34604#issuecomment-896134910"
      },
      {
        "id": "IC_kwDOAQzde841afh9",
        "parentId": null,
        "author": "Kahbazi",
        "content": "\u003E @Kahbazi that would be ideal.\r\n\r\nI\u0027ll send a PR overriding \u0060ToString()\u0060 method for all metadata.",
        "createdAt": "2021-08-10T16:40:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34604#issuecomment-896137341"
      },
      {
        "id": "IC_kwDOAQzde842T3IF",
        "parentId": null,
        "author": "davidfowl",
        "content": "Given that we\u0027re making improvements here with throwing errors for the most common cases at startup, I think this can be punted to .NET 7.",
        "createdAt": "2021-09-02T04:56:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34604#issuecomment-911176197"
      },
      {
        "id": "IC_kwDOAQzde842WWZP",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-09-02T15:52:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34604#issuecomment-911828559"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NTQ2NzM5MTg=",
    "title": "Generated OpenApi source not included in build if WPF Window exists in project.",
    "url": "https://github.com/dotnet/aspnetcore/issues/34795",
    "createdAt": "2021-07-28T09:45:24Z",
    "lastUpdated": "2024-06-30T23:01:11Z",
    "body": "### Describe the bug\r\nOpenAPI Service Reference generated code is not included during build when System.Windows.Window object exists in project.\r\n\r\n### To Reproduce\r\n\r\n1. Create a Core Console project.\r\n2. Add OpenAPI service reference.\r\n\u0060\u0060\u0060\r\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\r\n\r\n  \u003CPropertyGroup\u003E\r\n    \u003COutputType\u003EExe\u003C/OutputType\u003E\r\n    \u003CTargetFramework\u003Enet5.0\u003C/TargetFramework\u003E\r\n  \u003C/PropertyGroup\u003E\r\n\r\n  \u003CItemGroup\u003E\r\n    \u003COpenApiReference Include=\u0022OpenAPIs\\swagger.json\u0022 CodeGenerator=\u0022NSwagCSharp\u0022\u003E\r\n      \u003CSourceUri\u003Ehttps://mysite/swagger/v1/swagger.json\u003C/SourceUri\u003E\r\n    \u003C/OpenApiReference\u003E\r\n  \u003C/ItemGroup\u003E\r\n\r\n  \u003CItemGroup\u003E\r\n    \u003CPackageReference Include=\u0022Microsoft.Extensions.ApiDescription.Client\u0022 Version=\u00223.0.0\u0022\u003E\r\n      \u003CPrivateAssets\u003Eall\u003C/PrivateAssets\u003E\r\n      \u003CIncludeAssets\u003Eruntime; build; native; contentfiles; analyzers; buildtransitive\u003C/IncludeAssets\u003E\r\n    \u003C/PackageReference\u003E\r\n    \u003CPackageReference Include=\u0022Newtonsoft.Json\u0022 Version=\u002212.0.2\u0022 /\u003E\r\n    \u003CPackageReference Include=\u0022NSwag.ApiDescription.Client\u0022 Version=\u002213.0.5\u0022\u003E\r\n      \u003CPrivateAssets\u003Eall\u003C/PrivateAssets\u003E\r\n      \u003CIncludeAssets\u003Eruntime; build; native; contentfiles; analyzers; buildtransitive\u003C/IncludeAssets\u003E\r\n    \u003C/PackageReference\u003E\r\n  \u003C/ItemGroup\u003E\r\n\r\n\u003C/Project\u003E\r\n\u0060\u0060\u0060\r\n3. Create an object for the swagger client in Program.cs\r\n\u0060\u0060\u0060\r\nvar httpclient = new HttpClient();\r\nvar a = new swaggerClient(\u0022https://mysite/\u0022, httpclient);\r\n\u0060\u0060\u0060\r\n4. Build. It should be successful.\r\n5. Convert the console project to WPF project.\r\n\u0060\u0060\u0060\r\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\r\n\r\n  \u003CPropertyGroup\u003E\r\n    \u003COutputType\u003EWinExe\u003C/OutputType\u003E\r\n    \u003CTargetFramework\u003Enet5.0-windows\u003C/TargetFramework\u003E\r\n    \u003CUseWPF\u003Etrue\u003C/UseWPF\u003E\r\n    \u003CStartupObject\u003E\u003C/StartupObject\u003E\r\n  \u003C/PropertyGroup\u003E\r\n\r\n  \u003CItemGroup\u003E\r\n    \u003COpenApiReference Include=\u0022OpenAPIs\\swagger.json\u0022 CodeGenerator=\u0022NSwagCSharp\u0022\u003E\r\n      \u003CSourceUri\u003Ehttps://mysite/swagger/v1/swagger.json\u003C/SourceUri\u003E\r\n    \u003C/OpenApiReference\u003E\r\n  \u003C/ItemGroup\u003E\r\n\r\n  \u003CItemGroup\u003E\r\n    \u003CPackageReference Include=\u0022Microsoft.Extensions.ApiDescription.Client\u0022 Version=\u00223.0.0\u0022\u003E\r\n      \u003CPrivateAssets\u003Eall\u003C/PrivateAssets\u003E\r\n      \u003CIncludeAssets\u003Eruntime; build; native; contentfiles; analyzers; buildtransitive\u003C/IncludeAssets\u003E\r\n    \u003C/PackageReference\u003E\r\n    \u003CPackageReference Include=\u0022Newtonsoft.Json\u0022 Version=\u002212.0.2\u0022 /\u003E\r\n    \u003CPackageReference Include=\u0022NSwag.ApiDescription.Client\u0022 Version=\u002213.0.5\u0022\u003E\r\n      \u003CPrivateAssets\u003Eall\u003C/PrivateAssets\u003E\r\n      \u003CIncludeAssets\u003Eruntime; build; native; contentfiles; analyzers; buildtransitive\u003C/IncludeAssets\u003E\r\n    \u003C/PackageReference\u003E\r\n  \u003C/ItemGroup\u003E\r\n\r\n\u003C/Project\u003E\r\n\u0060\u0060\u0060\r\n6. Add \u0060\u0060\u0060App.xml\u0060\u0060\u0060.\r\n7. Move the swagger client creation to \u0060\u0060\u0060App.xml\u0060\u0060\u0060.\r\n8. Build and it should build successfully.\r\n9. Add a \u0060\u0060\u0060Window (WPF)\u0060\u0060\u0060\r\n10. Build and and build fail with error \u0060\u0060\u0060error CS0246: The type or namespace name \u0027swaggerClient\u0027 could not be found (are you missing a using directive or an assembly reference?)\u0060\u0060\u0060.\r\n\r\n### Exceptions (if any)\r\n\u0060\u0060\u0060error CS0246: The type or namespace name \u0027swaggerClient\u0027 could not be found (are you missing a using directive or an assembly reference?)\u0060\u0060\u0060\r\n\r\n### Further technical details\r\n- VS 2019 version 16.10.4\r\n\u0060\u0060\u0060\r\nPM\u003E dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.302\r\n Commit:    c005824e35\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19043\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.302\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.8\r\n  Commit:  35964c9215\r\n\r\n.NET SDKs installed:\r\n  3.1.411 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.104 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.203 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.205 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.302 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\u0060\u0060\u0060\r\n\r\nAttached is the sample project which should build successfull. To reproduce the issue, just add a new \u0060\u0060\u0060Window (WPF)\u0060\u0060\u0060 and build will fail.\r\n[ConsoleApp1.zip](https://github.com/dotnet/aspnetcore/files/6892028/ConsoleApp1.zip)\r\n",
    "upvotes": 2,
    "labels": [
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842zxni",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "Triage: We will re-evaluate this issue during .NET7 planning. ",
        "createdAt": "2021-09-14T21:59:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34795#issuecomment-919542242"
      },
      {
        "id": "IC_kwDOAQzde85MAXl9",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:20:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34795#issuecomment-1275165053"
      },
      {
        "id": "IC_kwDOAQzde85QWSVQ",
        "parentId": null,
        "author": "NSchertler",
        "content": "I am experiencing the same problem in one of my projects. I could narrow down the problem to what appears to be a XAML namespacing issue. As soon as there is a XAML file with a clr-namespace in it (\u0060xmlns:local=\u0022clr-namespace:...\u0022\u0060), compilation will fail with the aforementioned error.\r\n\r\nA simple workaround is to create a class library that contains the \u0060\u003COpenApiReference\u003E\u0060 and reference the class library from the WPF project. This will let you use the generated code from WPF as well.",
        "createdAt": "2022-12-13T09:20:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34795#issuecomment-1348019536"
      },
      {
        "id": "IC_kwDOAQzde85UuReX",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-02-07T20:40:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34795#issuecomment-1421416343"
      },
      {
        "id": "IC_kwDOAQzde86DDuhT",
        "parentId": null,
        "author": "SteffenMangold",
        "content": "\u003E I am experiencing the same problem in one of my projects. I could narrow down the problem to what appears to be a XAML namespacing issue. As soon as there is a XAML file with a clr-namespace in it (\u0060xmlns:local=\u0022clr-namespace:...\u0022\u0060), compilation will fail with the aforementioned error.\r\n\u003E \r\n\u003E A simple workaround is to create a class library that contains the \u0060\u003COpenApiReference\u003E\u0060 and reference the class library from the WPF project. This will let you use the generated code from WPF as well.\r\n\r\nThis indeed helped. Thanks! :)",
        "createdAt": "2024-06-30T23:01:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34795#issuecomment-2198792275"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NTUzNzEwMjc=",
    "title": "Not all default services are added to WebApplicationBuilder.Services",
    "url": "https://github.com/dotnet/aspnetcore/issues/34825",
    "createdAt": "2021-07-29T01:56:32Z",
    "lastUpdated": "2024-03-01T23:57:26Z",
    "body": "HostBuilder adds some default services in [CreateServiceProvider()](https://github.com/dotnet/runtime/blob/e983168f871dcba090ff6ec08c0d2c7d4353fb8e/src/libraries/Microsoft.Extensions.Hosting/src/HostBuilder.cs#L238-L260) that are not added to WebApplicationBuilder.Services until after build.\r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder();\r\n// System.InvalidOperationException: No service for type IHost has been registered.\r\nbuilder.Services.BuildServiceProvider().GetRequiredService\u003CIHost\u003E(); \r\n\u0060\u0060\u0060\r\n\r\nBefore #34455 was merged, these services never showed up in WebApplicationBuilder.Services even after build. Because CreateServiceProvider() is called in HostBuilder.Build(), we cannot access these service descriptors any earlier without new  public API.\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "Priority:3",
      "feature-minimal-hosting",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde840-RVT",
        "parentId": null,
        "author": "davidfowl",
        "content": "The scenarios that could be broken here are limited to a couple of default services [provided by the HostBuilder](https://github.com/dotnet/runtime/blob/742ea07eff4ae09efd748ba94f96e536e0a274d0/src/libraries/Microsoft.Extensions.Hosting/src/HostBuilder.cs#L237-L262). The only potential problem we\u0027re aware of so far is a customer trying to replace a built in service only if it wasn\u0027t already provided using TryAdd* on the \u0060IServiceCollection\u0060 for one of the built in services. With our current implementation, if the user calls \u0060builder.Services.TryAddSingleton\u003CIHostLifetime, MyHostLifetime\u003E()\u0060, it will override the default \u0060ConsoleLifetime\u0060 with \u0060MyHostLifetime\u0060 becaues the service collection didn\u0027t get a chance to observe the IHostLifetime that comes by default.\r\n\r\nThis is the case for the default services linked above.\r\n\r\n@rafikiassumaniMSFT I marked this as pri3 as we think the impact is very low.",
        "createdAt": "2021-07-29T01:59:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34825#issuecomment-888739155"
      },
      {
        "id": "IC_kwDOAQzde841OWAh",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-08-04T20:29:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34825#issuecomment-892952609"
      },
      {
        "id": "IC_kwDOAQzde85CavFl",
        "parentId": null,
        "author": "nvmkpk",
        "content": "This is an issue for a nuget package that I am working on. My package when referenced by a web application project, replaces the console window with a wpf window for better viewing of the application logs. It requires replacing \u0060ConsoleLifetime\u0060 with a custom implementation that handles WPF UI and hides the logs on the console. The very least change that will fix the issue is to use \u0060TryAdd...\u0060 when adding the \u0060ConsoleLifetime\u0060 service in \u0060HostBuilder.AddLifetime\u0060. I hope this will get fixed in .net 7 timeframe.",
        "createdAt": "2022-05-01T18:30:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34825#issuecomment-1114304869"
      },
      {
        "id": "IC_kwDOAQzde85MAXm1",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:20:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34825#issuecomment-1275165109"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NTg5Mjg1Nzc=",
    "title": "Options not resolved properly from WebApplicationFactory configuration",
    "url": "https://github.com/dotnet/aspnetcore/issues/34974",
    "createdAt": "2021-08-03T09:39:54Z",
    "lastUpdated": "2023-06-20T21:54:56Z",
    "body": "\u003C!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003E\r\n\r\n### Describe the bug\r\nWhen adding configuration files through the \u0060WebApplicationFactory\u0060 the options for token acqusition are not set correctly. A null reference exception is thrown when trying to resolve the correct options.\r\n\r\nWhen running the application host and using the health check to make an authenticated call, the options are resolved as expected and a token is acquired.\r\n\r\nWhen running the test application, the exception is thrown.\r\n\r\nUsing Microsoft.Identity.Web 1.10 the tests work fine, but the changes introduced in 1.11 breaks the test integration.\r\n\r\n### To Reproduce\r\n\r\nSee repo for full example: https://github.com/span/aspnetcoreoptions\r\n\r\nShort version:\r\n\r\n**Repro**\r\n\r\nStartup (With AzureAd config block in appsettings)\r\n\u0060\u0060\u0060csharp\r\n            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\r\n                .AddMicrosoftIdentityWebApi(Configuration)\r\n                .EnableTokenAcquisitionToCallDownstreamApi()\r\n                .AddInMemoryTokenCaches();\r\n\u0060\u0060\u0060\r\n\r\nMessage handler (used to fetch access token for a certain scope)\r\n\u0060\u0060\u0060csharp\r\n        protected override async Task\u003CHttpResponseMessage\u003E SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n        {\r\n            var accessToken = await tokenAcquisition.GetAccessTokenForAppAsync(this.scope, authenticationScheme: \u0022Bearer\u0022);\r\n\u0060\u0060\u0060\r\n\r\n**Expected behavior**\r\nAccess token received from IdP configured in AzureAd.\r\n\r\n**Actual behavior**\r\nNull reference exception with stack trace:\r\n\r\n\u0060\u0060\u0060\r\nSystem.NullReferenceException\r\nObject reference not set to an instance of an object.\r\n   at Microsoft.Identity.Web.MergedOptions.PrepareAuthorityInstanceForMsal()\r\n   at Microsoft.Identity.Web.TokenAcquisition.BuildConfidentialClientApplication(MergedOptions mergedOptions)\r\n   at Microsoft.Identity.Web.TokenAcquisition.GetOrBuildConfidentialClientApplication(MergedOptions mergedOptions)\r\n   at Microsoft.Identity.Web.TokenAcquisition.GetAuthenticationResultForAppAsync(String scope, String authenticationScheme, String tenant, TokenAcquisitionOptions tokenAcquisitionOptions)\r\n   at Microsoft.Identity.Web.TokenAcquisition.GetAccessTokenForAppAsync(String scope, String authenticationScheme, String tenant, TokenAcquisitionOptions tokenAcquisitionOptions)\r\n   at Promotions.Host.HealthChecks.BearerHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/daniel/mio/repos/Mio.Services/Mio.Promotions.API/src/Promotions.Host/HealthChecks/BearerHttpMessageHandler.cs:line 28\r\n   at System.Net.Http.HttpClient.SendAsyncCore(HttpRequestMessage request, HttpCompletionOption completionOption, Boolean async, Boolean emitTelemetryStartStop, CancellationToken cancellationToken)\r\n\r\n\r\n### Further technical details\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.103\r\n Commit:    72dec52dbd\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  11.0\r\n OS Platform: Darwin\r\n RID:         osx.11.0-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/5.0.103/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.3\r\n  Commit:  c636bbdc8a\r\n\r\n.NET SDKs installed:\r\n  3.1.403 [/usr/local/share/dotnet/sdk]\r\n  5.0.101 [/usr/local/share/dotnet/sdk]\r\n  5.0.103 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.9 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.9 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde841MP26",
        "parentId": null,
        "author": "span",
        "content": "After further debugging I find that options are resolved properly when reading directly from \u0060IConfiguration\u0060 in the message handler. The \u0060ITokenAcquisition\u0060 still gets null values in its options monitor though.\r\n\r\nPerhaps this should be redirected to \u0060Microsoft.Identity.Web\u0060?",
        "createdAt": "2021-08-04T06:34:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34974#issuecomment-892403130"
      },
      {
        "id": "IC_kwDOAQzde841OZ9b",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "Can you please share the output of \u0060(IConfigurationRoot)Configuration.GetDebugView()\u0060? You\u0027ll need to run that in the app and then launch the test to see what the configuration is when the test runs.",
        "createdAt": "2021-08-04T20:57:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34974#issuecomment-892968795"
      },
      {
        "id": "IC_kwDOAQzde841PNGl",
        "parentId": null,
        "author": "span",
        "content": "\u003E Can you please share the output of \u0060(IConfigurationRoot)Configuration.GetDebugView()\u0060? You\u0027ll need to run that in the app and then launch the test to see what the configuration is when the test runs.\r\n\r\nThis is the output with some stuff redacted. The configuration looks fine as all the \u0060AzureAd\u0060 entries are set as expected.\r\n\r\n\u0060\u0060\u0060\r\n  CFBundleIdentifier=com.jetbrains.rider-EAP (EnvironmentVariablesConfigurationProvider)\r\n  CF_USER_TEXT_ENCODING=0x1F5:0x0:0x2 (EnvironmentVariablesConfigurationProvider)\r\nANDROID_HOME=/usr/local/share/android-sdk (EnvironmentVariablesConfigurationProvider)\r\napplicationName=WebApplication (Microsoft.Extensions.Configuration.ChainedConfigurationProvider)\r\nAzureAd:\r\n  ClientId=\u003CREDACTED\u003E (JsonConfigurationProvider for \u0027testsettings.json\u0027 (Required))\r\n  ClientSecret=\u003CREDACTED\u003E (JsonConfigurationProvider for \u0027testsettings.json\u0027 (Required))\r\n  Instance=https://login.microsoftonline.com/ (JsonConfigurationProvider for \u0027testsettings.json\u0027 (Required))\r\n  TenantId=\u003CREDACTED\u003E (JsonConfigurationProvider for \u0027testsettings.json\u0027 (Required))\r\nCLI_TELEMETRY_OPTOUT=1 (Microsoft.Extensions.Configuration.ChainedConfigurationProvider)\r\nCOMMAND_MODE=unix2003 (EnvironmentVariablesConfigurationProvider)\r\ncontentRoot=/Users/daniel/RiderProjects/aspnetcoretestoptions/WebApplication (Microsoft.Extensions.Configuration.ChainedConfigurationProvider)\r\nDOTNET_CLI_TELEMETRY_OPTOUT=1 (EnvironmentVariablesConfigurationProvider)\r\nDOTNET_ROOT=/usr/local/share/dotnet (EnvironmentVariablesConfigurationProvider)\r\nDOTNET_SKIP_FIRST_TIME_EXPERIENCE=1 (EnvironmentVariablesConfigurationProvider)\r\nenvironment=Development (Microsoft.Extensions.Configuration.ChainedConfigurationProvider)\r\nHOME=/Users/daniel (EnvironmentVariablesConfigurationProvider)\r\nJAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home (EnvironmentVariablesConfigurationProvider)\r\nLC_CTYPE=en_GB.UTF-8 (EnvironmentVariablesConfigurationProvider)\r\nLESS=-R (EnvironmentVariablesConfigurationProvider)\r\nLogging:\r\n  LogLevel:\r\n    Default=Information (JsonConfigurationProvider for \u0027appsettings.Development.json\u0027 (Optional))\r\n    Microsoft=Warning (JsonConfigurationProvider for \u0027appsettings.Development.json\u0027 (Optional))\r\n    Microsoft.Hosting.Lifetime=Information (JsonConfigurationProvider for \u0027appsettings.Development.json\u0027 (Optional))\r\nLOGNAME=daniel (EnvironmentVariablesConfigurationProvider)\r\nLSCOLORS=Gxfxcxdxbxegedabagacad (EnvironmentVariablesConfigurationProvider)\r\nNVM_BIN=/Users/daniel/.nvm/versions/node/v10.23.0/bin (EnvironmentVariablesConfigurationProvider)\r\nNVM_CD_FLAGS=-q (EnvironmentVariablesConfigurationProvider)\r\nNVM_DIR=/Users/daniel/.nvm (EnvironmentVariablesConfigurationProvider)\r\nNVM_INC=/Users/daniel/.nvm/versions/node/v10.23.0/include/node (EnvironmentVariablesConfigurationProvider)\r\nOLDPWD=/ (EnvironmentVariablesConfigurationProvider)\r\nP9K_SSH=0 (EnvironmentVariablesConfigurationProvider)\r\nPAGER=less (EnvironmentVariablesConfigurationProvider)\r\nPATH=\u003CREDACTED\u003E\r\nPWD=/Users/daniel/RiderProjects/aspnetcoretestoptions/TestProject1/bin/Debug/net5.0 (EnvironmentVariablesConfigurationProvider)\r\nROOT=/usr/local/share/dotnet (Microsoft.Extensions.Configuration.ChainedConfigurationProvider)\r\nScope=\u003CREDACTED\u003E (JsonConfigurationProvider for \u0027testsettings.json\u0027 (Required))\r\nSHELL=/bin/zsh (EnvironmentVariablesConfigurationProvider)\r\nSKIP_FIRST_TIME_EXPERIENCE=1 (Microsoft.Extensions.Configuration.ChainedConfigurationProvider)\r\nSSH_AUTH_SOCK=/private/tmp/com.apple.launchd.826vdPHXo8/Listeners (EnvironmentVariablesConfigurationProvider)\r\nTERM=xterm-256color (EnvironmentVariablesConfigurationProvider)\r\nTMPDIR=/var/folders/6s/_gbfjh1157j8_hnsqbj3z_rr0000gn/T/ (EnvironmentVariablesConfigurationProvider)\r\nUSER=daniel (EnvironmentVariablesConfigurationProvider)\r\nXPC_FLAGS=0x0 (EnvironmentVariablesConfigurationProvider)\r\nXPC_SERVICE_NAME=application.com.jetbrains.rider-EAP.10876746.10881686 (EnvironmentVariablesConfigurationProvider)\r\nZSH=/Users/daniel/.oh-my-zsh (EnvironmentVariablesConfigurationProvider)\r\n_NO_DEBUG_HEAP=1 (EnvironmentVariablesConfigurationProvider)\r\n\u0060\u0060\u0060\r\n\r\nPerhaps the way I am creating the scope, client and handler somehow bypasses the call that sets the options into the \u0060ITokenAcquisition\u0060. I noticed that when I run the application, I can get a breakpoint in the configuration where the optionsmonitor is updated and created. Looking at the call trace, it is called by the authentication middleware. The configuration setup is located in\u0060MicrosoftIdentityWebApiAuthenticationBuilderExtensions.AddMicrosoftIdentityWebApiImplementation\u0060 lines 180 and forward. \r\n\r\nWhen I run through the test fixture, the breakpoint never gets hit since the pipeline never receives a request and thus do not get processed. Perhaps that means that DI never loads the options into the monitor.",
        "createdAt": "2021-08-05T05:36:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34974#issuecomment-893178277"
      },
      {
        "id": "IC_kwDOAQzde841Snu9",
        "parentId": null,
        "author": "span",
        "content": "As a workaround for now I was able to \u0022create\u0022 the options by calling \u0060Get\u0060 on the \u0060IOptionsMonitor\u003CJwtBearerOptions\u003E\u0060 for my scheme \u0022Bearer\u0022. When calling \u0060Get\u0060, the configure actions is called and the options are set up correctly. This means an instance of the options will be available from the options monitor cache to \u0060TokenAcqusition\u0060 when DI instantiates it.\r\n\r\nA bit bulky but works. It is still not clear to me if this is a bug, feature or bad testing strategy.\r\n\r\n\u0060\u0060\u0060csharp\r\n            // Arrange\r\n            using var scope = _factory.Server.Services.CreateScope();\r\n            \r\n            var monitor = scope.ServiceProvider.GetRequiredService\u003CIOptionsMonitor\u003CJwtBearerOptions\u003E\u003E();\r\n            monitor.Get(\u0022Bearer\u0022);\r\n            \r\n            var handler = scope.ServiceProvider.GetRequiredService\u003CBearerHttpMessageHandler\u003E();\r\n            var client = _factory.CreateDefaultClient(handler);\r\n\u0060\u0060\u0060",
        "createdAt": "2021-08-06T07:49:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34974#issuecomment-894073789"
      },
      {
        "id": "IC_kwDOAQzde842Oirz",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-09-01T01:15:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34974#issuecomment-909781747"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NTkxNTM1MDc=",
    "title": ".NET 5: Null body \u002B content-type with no content-length = validation error even with AllowEmptyInputInBodyModelBinding = true",
    "url": "https://github.com/dotnet/aspnetcore/issues/34980",
    "createdAt": "2021-08-03T14:05:44Z",
    "lastUpdated": "2023-10-28T14:07:47Z",
    "body": "### Describe the bug\r\nEven if you set AllowEmptyInputInBodyModelBinding = true it\u0027s basically impossible to have a nullable [FromBody] with no value that works across platforms because it still requires the content-length to be set, which browsers won\u0027t let you set, and won\u0027t set themselves on a null/empty or even \u0022{}\u0022 body.\r\n\r\nThe standards say that if no body is passed you don\u0027t need to send the  content-length header (for obvious reasons) thus the current implementation is not following standards and validating AllowEmptyInputInBodyModelBinding against the content-length header if and only if it is set when it should be if it is set to 0 or it doesn\u0027t exist.\r\n\r\n\r\n### To Reproduce\r\n\u0060public async Task\u003CActionResult\u003CIEnumerable\u003CSubscriptionDto\u003E\u003E\u003E ListSubscriptions(string? contactId = null, [FromBody] LoadCriteriaDto? criteria = null, CancellationToken cancellationToken = default)\u0060\r\n\r\nThis should allow a null criteria property to be received.\r\n\r\nThis does work with Android because Android allows setting the content-length header so you can set it to 0 if there is no body and still set the content-type = \u0022application/json\u0022. (if you don\u0027t set the content-type you get a media type not supported even though the body is null which I believe is a separate bug because if the body is null, then the content-type should be null and it shouldn\u0027t be testing/validating it.)\r\n\r\nAs long as the Content-Length header is set on the request, and the body is null/empty then .net will accept the empty body. However as soon as the Content-Length header is not set but the body is null/empty then AllowEmptyInputInBodyModelBinding doesn\u0027t take effect and you get a validation error which is not correct and very problematic because all Chromium/Firefox browsers do not set the Content-Length header in this scenario AND you can\u0027t set it yourself because it\u0027s a protected header thus there is no way to actually send an empty body from a browser and have .NET accept it as an empty body.\r\n\r\n### Exceptions (if any)\r\nInvaid json token\r\n\r\n### Proposed Solution:\r\n\r\n1. if AllowEmptyInputInBodyModelBinding  = true, and the body is empty/null/{} and the content-length is not set/null then it should still work and **not** throw a validation error. (you can make this work by injecting middleware that if it sees no Content-length header, adds it to the request pipeline as a work around for now, but that isn\u0027t optimal)\r\n2. If the body is null, and the content-type header is not set, it shouldn\u0027t evaluate the media type because the deserializer is immaterial because there is no body and thus nothing to deserialize and combined with No. 1, should work fine with no content-type, no content-length, no body and AllowEmptyInputInBodyModelBinding  = true.\r\n3. The inline FromBody attribute\u0027s ability to allow an empty body should also be updated to the same behavior.\r\n\r\n### Further technical details\r\n- ASP.Net core 5.0.302\r\n\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.302\r\n Commit:    c005824e35\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22000\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.302\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.6.21352.12\r\n  Commit:  770d630b28\r\n\r\n.NET SDKs installed:\r\n  5.0.302 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100-preview.6.21355.2 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.6.21355.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.6.21352.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0-preview.6.21353.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nVS 2019\r\n",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "feature-model-binding",
      "feature-minimal-actions",
      "area-minimal",
      "help candidate"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde841OZYk",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-08-04T20:53:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34980#issuecomment-892966436"
      },
      {
        "id": "IC_kwDOAQzde841OZs3",
        "parentId": null,
        "author": "halter73",
        "content": "We could probably support this by peaking into chunked bodies with BodyReader.ReadAsync() to see if the body is empty before attempting to deserialize as JSON. We would want to do the same thing for optional body parameters in minimal actions (i.e. The new MapGet/MapPost/etc methods that take Delegate instead of RequestDelegate).",
        "createdAt": "2021-08-04T20:55:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34980#issuecomment-892967735"
      },
      {
        "id": "IC_kwDOAQzde841QurX",
        "parentId": null,
        "author": "JohnGalt1717",
        "content": "@halter73 So there\u0027s 2 parts. I think the first part is just if allowemptybody = true, and content-length = 0 or content-length = null OR content-length is not set, it shouldn\u0027t validate. \r\n\r\nThis is the trivial case and to me is a minor change to the validation logic that is in there right now.\r\n\r\nThe second part that you\u0027re referring is that It\u0027s trying to decode null in this case, which, again couldn\u0027t it just skip that flow if the content header is set to 0 or is null or not set at all?  That would be way less costly than peeking at a stream.",
        "createdAt": "2021-08-05T16:04:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34980#issuecomment-893577943"
      },
      {
        "id": "IC_kwDOAQzde841TyRB",
        "parentId": null,
        "author": "halter73",
        "content": "The problem is that content-length not being set doesn\u0027t mean there\u0027s no body. If it\u0027s a POST and there\u0027s no content-length, it might have a [HTTP/1.1. chunked request body](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) or use HTTP/2 framing to determine the content length lazily.\r\n\r\nIf it\u0027s HTTP/1.1 and there\u0027s no content-length or transfer-encoding header, we might not have to peek, but in some cases we still would.",
        "createdAt": "2021-08-06T16:37:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34980#issuecomment-894379073"
      },
      {
        "id": "IC_kwDOAQzde841Z70U",
        "parentId": null,
        "author": "JohnGalt1717",
        "content": "@halter73 Yuk. Well then shouldn\u0027t the flag that is already there for allow empty just mean it out right?  Don\u0027t check at all unless content-length is set?  Other parts of the pipeline will collect it like a non-nullable type on the [FromBody] property, or property on a POST as an exmaple. To me this whole thing seems like a legacy of before nullables and the nullability of the property on the webapi function should control this entirely and be done as part of the pipeline.  And if there is nothing coming in, the serializers should all just return null instead of trying to process.",
        "createdAt": "2021-08-10T12:35:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34980#issuecomment-895991060"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NjUwNDQ0OTc=",
    "title": "Log scope for Minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/35223",
    "createdAt": "2021-08-10T14:29:04Z",
    "lastUpdated": "2023-06-06T23:45:57Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\nProvide log scope for minimal APIs, the same as it is currently exists in MVC.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/8b30d862de6c9146f466061d51aa3f1414ee2337/src/Mvc/Mvc.Core/src/Infrastructure/ResourceInvoker.cs#L112\r\n\r\n### Describe the solution you\u0027d like\r\nCreate a log scope with endpoint name from \u0060IEndpointNameMetadata.EndpointName\u0060 in created \u0060RequestDelegate\u0060.\r\n\r\n### Additional context\r\nThis could also be done in \u0060EndpointRoutingMiddleware\u0060 which would cover all frameworks which are built on \u0060IEndpointRouteBuilder\u0060.\r\n",
    "upvotes": 0,
    "labels": [
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde841aiTl",
        "parentId": null,
        "author": "davidfowl",
        "content": "I think the value is low here and there\u0027s additional overhead for little value. Especially because most of the time there\u0027s no endpoint name metadata.",
        "createdAt": "2021-08-10T16:54:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35223#issuecomment-896148709"
      },
      {
        "id": "IC_kwDOAQzde842NK98",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-08-31T17:06:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35223#issuecomment-909422460"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NjUyNzUyMjA=",
    "title": "Support for JSON Merge Patch (RFC 7386)",
    "url": "https://github.com/dotnet/aspnetcore/issues/35237",
    "createdAt": "2021-08-10T19:11:56Z",
    "lastUpdated": "2024-02-23T03:43:19Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\nImplementing JSON Merge Patch manually can be quite tricky but provides a simpler experience for API consumers.\r\n\r\n### Describe the solution you\u0027d like\r\nCurrently there is built-in support for JSON Patch ([RFC 6902](https://datatracker.ietf.org/doc/html/rfc6902)) via [JsonPatchDocument](https://docs.microsoft.com/en-us/aspnet/core/web-api/jsonpatch?view=aspnetcore-5.0). Would love to also see an implementation of  [RFC 7386](https://datatracker.ietf.org/doc/html/rfc7386).\r\n\r\n**So no one has to wade through an RFC...**\r\n\r\nGiven the following JSON representation:\r\n\r\n\u0060\u0060\u0060json\r\n{\r\n  \u0022name\u0022: \u0022Joe\u0022,\r\n  \u0022email\u0022: \u0022joe@example.com\u0022,\r\n  \u0022physicalAttributes\u0022: { \u0022weight\u0022: 75, \u0022height\u0022: 175 },\r\n  \u0022favoriteColors\u0022: [\u0022blue\u0022, \u0022red\u0022]\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThese two will produce equivalent modifications:\r\n\r\n#### JSON Patch\r\n\r\n\u0060\u0060\u0060json\r\n[\r\n   { \u0022op\u0022: \u0022remove\u0022, \u0022path\u0022: \u0022/email\u0022 },\r\n   { \u0022op\u0022: \u0022add\u0022, \u0022path\u0022: \u0022/favoriteColors/-\u0022, \u0022value\u0022: \u0022black\u0022 }\r\n]\r\n\u0060\u0060\u0060\r\n\r\n#### JSON Merge Patch\r\n\r\n\u0060\u0060\u0060json\r\n{\r\n  \u0022email\u0022: null,\r\n  \u0022favoriteColors\u0022: [\u0022blue\u0022, \u0022red\u0022, \u0022black\u0022]\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Additional context\r\nOData has an implementation of this spec via [Delta\u003CT\u003E](https://github.com/OData/AspNetCoreOData/blob/ea6775e7c75c3d198bf86e041bcce27ad4f457db/src/Microsoft.AspNetCore.OData/Deltas/Delta.cs) but it [was not designed](https://stackoverflow.com/a/14734273/3317144) to work with formatters other than OData.\r\n\r\nHere are a couple of open-source implementations:\r\nhttps://www.strathweb.com/2013/01/easy-asp-net-web-api-resource-updates-with-delta/\r\nhttps://github.com/Morcatko/Morcatko.AspNetCore.JsonMergePatch\r\n\r\n\r\n",
    "upvotes": 7,
    "labels": [
      "area-mvc",
      "feature-json-patch",
      "area-minimal",
      "area-networking"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842OiiX",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-09-01T01:14:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35237#issuecomment-909781143"
      },
      {
        "id": "IC_kwDOAQzde8503c1P",
        "parentId": null,
        "author": "mitsha-microsoft",
        "content": "Hi,\r\nOur service uses PATCH primarily for a huge set of our APIs and having something built-in that handles RFC 7386 will help us greatly (otherwise we will need to roll out our own implementation or use [a third party OSS](https://github.com/Morcatko/Morcatko.AspNetCore.JsonMergePatch) package).\r\n",
        "createdAt": "2024-02-23T03:43:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35237#issuecomment-1960693071"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NzQyNjY1OTc=",
    "title": "Extend the ability to customize parameter binding for Minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/35489",
    "createdAt": "2021-08-19T04:51:24Z",
    "lastUpdated": "2024-08-19T22:26:47Z",
    "body": "This issue is to discuss future updates to extend the ability to customize parameter binding for Minimal APIs, beyond what\u0027s available in .NET 6, i.e. static methods \u0060bool TryParse(string input, out T value)\u0060 and \u0060ValueTask\u003Cobject\u003E BindAsync(HttpContext httpContext)\u0060 on the target type.\r\n\r\nThese are some features of parameter binding to consider:\r\n\r\n- [ ]  bind via target type (sync from request non-body sources, this is \u0060TryParse\u0060 in .NET 6)\r\n- [ ] bind via target type (async from request inc. body, this is \u0060BindAsync\u0060 in .NET 6)\r\n- [ ] bind via registered type (inc. overwriting built-in binders), e.g. register \u0060IParameterBinder\u003CT\u003E\u0060 in DI\r\n- [ ] bind per parameter, e.g. \u0060([Binder(typeof(CustomerBinder))]Customer customer) =\u003E { }\u0060\r\n- [ ] register via DI and accept services from DI\r\n- [ ]  have access to method/parameter info (i.e. callsite details, access to the parameter is supported by \u0060BindAsync\u0060 in .NET 6 now)\r\n- [ ]  compose with other binders (e.g. composite binders)\r\n- [ ]  emit/mutate endpoint metadata, e.g. for OpenAPI\r\n- [ ]  AOT friendliness\r\n\r\n### Strawman\r\n\u0060\u0060\u0060 csharp\r\npublic interface IParameterBinderFactory\u003CT\u003E\r\n{\r\n    IParameterBinder\u003CT\u003E Create(IServiceProvider provider, ParameterInfo parameter, MethodInfo method);\r\n}\r\n\r\npublic interface IParameterBinder\u003CT\u003E\r\n{\r\n    ValueTask\u003CT\u003E BindAsync(HttpContext httpContext);\r\n}\r\n\u0060\u0060\u0060\r\n\r\nExample usage:\r\n\r\n\u0060\u0060\u0060 csharp\r\nvar builder = WebApplication.CreateBuilder();\r\n\r\nbuilder.Services.AddSingleton\u003CIParameterBinderFactory\u003CCustomer\u003E, CustomerBinder\u003E();\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapPost(\u0022/customers\u0022, (Cusomter customer) =\u003E\r\n{\r\n   return Results.Created(customer);\r\n});\r\n\r\npublic class CustomerBinder : IParameterBinderFactory\u003CCustomer\u003E, IParameterBinder\u003CCustomer\u003E\r\n{\r\n    public CustomerBinder Create(IServiceProvider provider, ParameterInfo parameter, MethodInfo method)\r\n    {\r\n        // Called at application startup, access to parameter and method here to change behavior based on\r\n        // naming, attributes, etc.\r\n        return new CustomerBinder();\r\n    }\r\n\r\n    public async ValueTask\u003CCustomer\u003E BindAsync(HttpContext httpContext)\r\n    {\r\n        // Called per invocation of routing delegate, i.e. per request\r\n        // Do whatever custom binding logic desired, including reading from request body, etc.\r\n        return await httpContext.Request.ReadAsJsonAsync\u003CCustomer\u003E();\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nRelated issues:\r\n- https://github.com/dotnet/aspnetcore/issues/33955\r\n- https://github.com/dotnet/aspnetcore/issues/35472\r\n- https://github.com/dotnet/aspnetcore/issues/35304",
    "upvotes": 32,
    "labels": [
      "Needs: Design",
      "enhancement",
      "triage-focus",
      "api-suggestion",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde841yswV",
        "parentId": null,
        "author": "mumby0168",
        "content": "This looks cool, assuming this would allow for a generic binder for say route/query parameters that takes an object looks at it\u0027s properties and tries to match them based on the route/query parameters?\r\n\r\nThen it would be a case doing something like this:\r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder();\r\n\r\nbuilder.Services.AddRoutingDelegateParameterBinder\u003CRouteParameterBinder\u003CFoo\u003E\u003E();\r\nbuilder.Services.AddRoutingDelegateParameterBinder\u003CRouteParameterBinder\u003CBar1\u003E\u003E();\r\nbuilder.Services.AddRoutingDelegateParameterBinder\u003CQueryParameterBinder\u003CBar\u003E\u003E();\r\n\r\nvar app = builder.Build();\r\n\u0060\u0060\u0060",
        "createdAt": "2021-08-20T07:07:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-902482965"
      },
      {
        "id": "IC_kwDOAQzde841zkZb",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E This looks cool, assuming this would allow for a generic binder for say route/query parameters that takes an object looks at it\u0027s properties and tries to match them based on the route/query parameters?\r\n\r\nYou get to look at anything, we give you the HttpContext. If you want to use the double generic then that\u0027s up to you.\r\n\r\nSome thoughts:\r\n- We need to make sure this can be AOT friendly. Right now, the generic design forces the framework code to also be generic to avoid reflection. This might be fine if we end up using generics everywhere, otherwise we\u0027ll need to de-generic this API.\r\n  - If we make the API non-generic then we need to deal with the performance costs of boxing everything.\r\n- Another downside of making the API generic is that it forces users into using reflection to build composite binders (maybe that\u0027s OK?)\r\n- We need to decide if we\u0027re going to allow replacing the built-in builders with these.\r\n- We need to figure out how to expose metadata from custom binders to api explorer. [MVC has a similar problem today](https://github.com/dotnet/aspnetcore/issues/4825) (your number 8)\r\n- Can you fallback to default behavior if you configure one of these binders but the parameter doesn\u0027t match the criteria? (e.g missing an attribute)",
        "createdAt": "2021-08-20T13:57:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-902710875"
      },
      {
        "id": "IC_kwDOAQzde8410IAQ",
        "parentId": null,
        "author": "mumby0168",
        "content": "\u003E \u003E This looks cool, assuming this would allow for a generic binder for say route/query parameters that takes an object looks at it\u0027s properties and tries to match them based on the route/query parameters?\r\n\u003E \r\n\u003E You get to look at anything, we give you the HttpContext. If you want to use the double generic then that\u0027s up to you.\r\n\u003E \r\n\u003E Some thoughts:\r\n\u003E \r\n\u003E * We need to make sure this can be AOT friendly. Right now, the generic design forces the framework code to also be generic to avoid reflection. This might be fine if we end up using generics everywhere, otherwise we\u0027ll need to de-generic this API.\r\n\u003E   \r\n\u003E   * If we make the API non-generic then we need to deal with the performance costs of boxing everything.\r\n\u003E * Another downside of making the API generic is that it forces users into using reflection to build composite binders (maybe that\u0027s OK?)\r\n\u003E * We need to decide if we\u0027re going to allow replacing the built-in builders with these.\r\n\u003E * We need to figure out how to expose metadata from custom binders to api explorer. [MVC has a similar problem today](https://github.com/dotnet/aspnetcore/issues/4825) (your number 8)\r\n\u003E * Can you fallback to default behavior if you configure one of these binders but the parameter doesn\u0027t match the criteria? (e.g missing an attribute)\r\n\r\nYeah, that certainly makes sense, I suppose the thought on generic is worth considering since this is aimed at people new to the language trying to get into C#. This could be a step too far or maybe a really good way to introduce generics as they are in my opinion required fairly early on now with many packages/libraries. Personally always like a generic approach.\r\n\r\nOn your last point, I would say that if something has been registered then if it fails to match to that method of parsing the incoming request for it to fall back to a default method could add confusion. That is from the viewpoint of when registering a different binder you intended for it to be handled differently.\r\n\r\nThis is really cool though, would love to get involved when this is ready to be worked on \uD83D\uDC4D \r\n\r\n",
        "createdAt": "2021-08-20T17:48:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-902856720"
      },
      {
        "id": "IC_kwDOAQzde84_830L",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "Parameter binding often involves values that come from the request. Are there any thoughts as to how _IFeatureCollection_ might be supported here? Specifically, API Versioning has the \u0060IApiVersioningFeature\u0060, which contains the resolved \u0060ApiVersion\u0060 by the time it reaches an action. There is no parsing to do at that point. It\u0027s current \u0060ModelBinder\u0060 implementation merely calls \u0060HttpContext.Features.Get\u003CIApiVersioningFeature\u003E().ApiVersion\u0060 to provide the value. This is analogous to how \u0060CancellationToken\u0060 works.\r\n\r\nAs an example, a developer might want to have:\r\n\r\n\u0060\u0060\u0060c#\r\napi.MapGet( \u0022/hello-world\u0022, (ApiVersion apiVersion) =\u003E $\u0022Hello world from v{apiVersion}\u0022);\r\n\u0060\u0060\u0060",
        "createdAt": "2022-03-19T02:26:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1072921867"
      },
      {
        "id": "IC_kwDOAQzde84_85lK",
        "parentId": null,
        "author": "davidfowl",
        "content": "Supporting features is interesting, we\u0027d need an attribute. I\u0027m afraid doing it implicitly is impossible because the feature collection isn\u0027t available at startup (when the bindings are determined).",
        "createdAt": "2022-03-19T03:24:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1072929098"
      },
      {
        "id": "IC_kwDOAQzde85ActDv",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "One idea is to simply introduce a factory layer to the existing \u0060BindAsync\u0060 support, so that implementers don\u0027t have to manage caching of the reflection types themselves, e.g.:\r\n\u0060\u0060\u0060 c#\r\n// Factory per parameter info\r\ninterface IBinderFactory\u003CTValue\u003E\r\n{\r\n    public static abstract IBindFromHttp\u003CT\u003E CreateBinder(ParameterInfo parameter, ISerivceProvider serviceProvider);\r\n}\r\n\r\ninterface IBindFromHttpInstance\u003CTValue\u003E\r\n{\r\n    public abstract ValueTask\u003CTValue?\u003E BindAsync(HttpContext httpContext);\r\n}\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2022-03-29T00:04:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1081266415"
      },
      {
        "id": "IC_kwDOAQzde85GijT_",
        "parentId": null,
        "author": "waynebrantley",
        "content": "The route parameters not being able to bind do a complex object is very impactful.  At this point we just leave those in regular controllers to avoid the pain as this is a big step backwards for our needs.   \r\n\r\nIn reading the other ticket, you indicated \r\n\u003E we don\u0027t want to end up writing a de-serializer the way that MVC does today as it is infinitely complex and fragile.\r\n\r\nAnd that makes sense.  Deserializing from json in the body into a complex object is already supported - and this situation is very similar.\r\n\r\nAs an example - a route like this \u0022/api/someroute/{id:int}/{guid:guid}\u0022 can be expressed as JSON like\r\n\u0060{ id: 3, guid: \u0027someguid\u0027 } \u0060 - and then that can be mapped to a complex object in the same way the body is.  No need to write any custom deserialization, etc.  Seems like the hard part of pulling the values out of the routes is already coded and could be easily mapped onto a complex object.\r\n\r\nThe same would be true for query string.\r\n\r\nAny thoughts on this or moving this forward in a future version of minimal apis?",
        "createdAt": "2022-07-13T16:55:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1183462655"
      },
      {
        "id": "IC_kwDOAQzde85Gjpga",
        "parentId": null,
        "author": "davidfowl",
        "content": "We added [AsParameters] for this scenario, see https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-5/#minimal-api-parameter-binding-for-argument-lists.",
        "createdAt": "2022-07-13T22:37:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1183750170"
      },
      {
        "id": "IC_kwDOAQzde85GsiPs",
        "parentId": null,
        "author": "davidfowl",
        "content": "Specifically, for what you describe above it would look like:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/api/someroute/{id:int}/{guid:guid}\u0022, ([AsParameters]RouteInfo r) =\u003E\r\n{\r\n   ...\r\n});\r\n\r\nrecord struct RouteInfo(int Id, Guid Guid);\r\n\u0060\u0060\u0060\r\n\r\nIt\u0027ll treat id and guid like top level parameters and bind them from the route. Or you can be explicit and say \u0060[FromRoute]\u0060, it\u0027s up to you.\r\n\r\n\u003E As an example - a route like this \u0022/api/someroute/{id:int}/{guid:guid}\u0022 can be expressed as JSON like\r\n{ id: 3, guid: \u0027someguid\u0027 } - and then that can be mapped to a complex object in the same way the body is. No need to write any custom deserialization, \r\n\r\nShould you also be able to describe an object hierarchy as routes? or query strings? or headers? We kept it simple by allow you to treat an object like top level parameters. This lets you refactor things into classes or structs (less overhead) for cleanliness but doesn\u0027t enable complex object serialization from those sources. ",
        "createdAt": "2022-07-16T03:39:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1186079724"
      },
      {
        "id": "IC_kwDOAQzde85GtUwb",
        "parentId": null,
        "author": "waynebrantley",
        "content": "I think that is perfect.  Nothing complex needed for route binding for us - just simple pocos.   Question - was this major work under the hood is it something that could easily be added into our local solution for net 6?",
        "createdAt": "2022-07-16T20:37:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1186286619"
      },
      {
        "id": "IC_kwDOAQzde85JMNaJ",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "Was there some compelling reason this was bumped? I was really looking forward to this for API Versioning.\r\n\r\nTo @davidfowl earlier comments:\r\n\r\n\u003EAnother downside of making the API generic is that it forces users into using reflection to build composite binders (maybe that\u0027s OK?)\r\n\r\nI think I\u0027m missing something. First, when would someone really want a composite binder for any parameter \u0060T\u0060? I\u0027ll assume there is some valid scenario that hasn\u0027t be articulated. Assuming there are composite binders, in what scenario are all the binders not covariant with a given parameter of \u0060T\u0060?\r\n\r\n\u003EWe need to decide if we\u0027re going to allow replacing the built-in builders with these.\r\n\r\nI agree it\u0027s little strange to think someone would _want_ to change the built-in binders, but why limit it? The _right_ thing happens out-of-the-box. If you go off the rails, change something, and it breaks things, then caveat emptor (IMHO).\r\n\r\n\u003EWe need to figure out how to expose metadata from custom binders to api explorer.\r\n\r\nDo we? I completely support this idea, but there are two ways of looking at. First would simply be another method on the binder implementation. This _might_ be annoying to someone that wants a custom binder, but doesn\u0027t care about API Explorer (because they aren\u0027t using it). Another approach would be to use a separate interface. A binder implementation can _chose_ to implement both interfaces if they want/need both sets of functionality.\r\n\r\nI\u0027m not 100% sure what the input needs to look like - yet, but I can say from experience, the output needs to allow multiple parameters from a single model. For example:\r\n\r\n\u0060\u0060\u0060c#\r\nvoid Explore(ApiDescription apiDescription);\r\n\u0060\u0060\u0060\r\n\r\nThis would be expected to append parameters to \u0060ApiDescription.ParameterDescriptions\u0060. The \u0060ApiDescription\u0060 itself should provide all of the necessary context to achieve the required result. If a single interface is used, the default implementation (now that it\u0027s an option) could simply do nothing.\r\n\r\n\u003ECan you fallback to default behavior if you configure one of these binders but the parameter doesn\u0027t match the criteria? (e.g missing an attribute)\r\n\r\nI would say - no. _\u0022Do what I say, not what I mean.\u0022_ By changing any default behavior, you\u0027ve basically stated _\u0022I don\u0027t want to do it the way you do it. Do it my way.\u0022_ A clear way to make sure fallback behaviors can still be used and/or composed with custom behavior need only ensure that the default binder types are \u0060public\u0060 and can be initiated or extended (e.g. inherited) by 3rd parties.\r\n\r\nA _Minimal API_ user expects to be able to declare a method signature in a similar way to how it worked before. Something like:\r\n\r\n\u0060\u0060\u0060c#\r\nvar orders = app.NewApiVersionSet( \u0022Orders\u0022 ).Build();\r\n\r\napp.MapGet(\r\n      \u0022/api/orders/{id:int}\u0022,\r\n      ( int id, ApiVersion version ) =\u003E new Order() { Id = id, Customer = $\u0022John Doe (v{version})\u0022 } )\r\n   .Produces\u003COrder\u003E()\r\n   .Produces( 404 )\r\n   .WithApiVersionSet( orders )\r\n   .HasApiVersion( 1.0 );\r\n\u0060\u0060\u0060\r\n\r\n\u0060ApiVersion\u0060 no longer has a \u0060TryParse\u0060 method of its own because it defers to \u0060IApiVersionParser\u0060 which does. This allows developers to replace the default behavior with their own method of parsing. This is particularly important if someone wants to create a custom \u0060ApiVersion\u0060 (which was a long-time ask). Similarly, \u0060ApiVersion\u0060 no longer cares anything about ASP.NET Core directly. This allows a single implementation across old Web API and the Core implementations. It also opens the option for it to be used by clients (e.g. \u0060HttpClient\u0060), which has also been a long-time ask. This means that the \u0060BindAsync\u0060 method, as supported, will not work either. I did come up with a way to do a bit of a \uD83D\uDC36 and \uD83D\uDC34 show with \u0060BindAsync\u0060, but then I realized it falls down with a custom \u0060ApiVersion\u0060 implementation.\r\n\r\nMy current thinking, which I don\u0027t really like, is to provide a hook to resolve the \u0060ApiVersion\u0060 via DI. That will work with the existing mechanics, but it\u0027s _yucky_.  Essentially:\r\n\r\n\u0060\u0060\u0060c#\r\npublic static IApiVersioningBuilder AddRequestedApiVersion( this IApiVersioningBuilder builder )\r\n{\r\n  var services = builder.Services;\r\n\r\n  // HACK: yucky, but gives us access to the HttpContext\r\n  services.AddHttpContextAccessor();\r\n\r\n  // this is a lie because the current requested API version can be null; however, it seems to be reasonable\r\n  // compromise since the API version will only ever be null in the following scenarios:\r\n  //     \r\n  // 1. No current HttpContext, which is unexpected\r\n  // 2. The requested API version is invalid (e.g. didn\u0027t parse)\r\n  // 3. There is no incoming API version\r\n  //     a. This might be allowed\r\n  //     b. The endpoint could be version-neutral\r\n  // \r\n  // In the context of the RequestDelegate for a Minimal API, the current API version will ONLY ever resolve to null\r\n  // if the API is version-neutral and no version was specified. In that case, why would you declare the API version\r\n  // as a parameter to the API? If the absence of an incoming API version is allowed (say - for legacy reasons), then\r\n  // the server will select an appropriate version. The selected version must be non-null and match an endpoint in\r\n  // order for the RequestDelegate to be called back\r\n  services.TryAddTransient(sp =\u003E sp.GetRequiredService\u003CIHttpContextAccessor\u003E().HttpContext?.GetRequestedApiVersion()!);\r\n\r\n  return builder;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nA developer can then choose to opt into this behavior with:\r\n\r\n\u0060\u0060\u0060c#\r\nbuilder.Services.AddApiVersioning().AddRequestedApiVersion();\r\n\u0060\u0060\u0060\r\n\r\nIf they don\u0027t want to do that, they can still use the _special_ \u0060HttpContext\u0060 binding support to get the API version via:\r\n\r\n\u0060\u0060\u0060c#\r\nvar orders = app.NewApiVersionSet( \u0022Orders\u0022 ).Build();\r\n\r\napp.MapGet(\r\n      \u0022/api/orders/{id:int}\u0022,\r\n      ( int id, HttpContext context ) =\u003E\r\n            new Order() { Id = id, Customer = $\u0022John Doe (v{context.GetRequestedApiVersion()})\u0022 } )\r\n   .Produces\u003COrder\u003E()\r\n   .Produces( 404 )\r\n   .WithApiVersionSet( orders )\r\n   .HasApiVersion( 1.0 );\r\n\u0060\u0060\u0060",
        "createdAt": "2022-08-26T01:52:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1227937417"
      },
      {
        "id": "IC_kwDOAQzde85Ut-No",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: We discussed a possible approach to this that would allow users to opt a parameter out of the default binding logic that exists in the RequestDelegateFactory so that they could implement their own binding logic in an endpoint filter.",
        "createdAt": "2023-02-07T19:34:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1421337448"
      },
      {
        "id": "IC_kwDOAQzde85UwkId",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Triage: We discussed a possible approach to this that would allow users to opt a parameter out of the default binding logic that exists in the RequestDelegateFactory so that they could implement their own binding logic in an endpoint filter.\r\n\r\nThis does need more design, like a strawman approach even. I\u0027m not sure what that would look like for the scenario @commonsensesoftware describes.\r\n",
        "createdAt": "2023-02-08T05:00:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1422017053"
      },
      {
        "id": "IC_kwDOAQzde85U2tRc",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "Yep, hence the \u0022Needs: Design\u0022 label. I can work with @halter73 to come up with a proposal here, but in a nutshell the idea is to enable endpoint filters to perform custom parameter binding by doing something like the following:\r\n\r\n- Add a way to opt-out of default parameter-binding behavior via endpoint metadata. Details to figure out include is it opting out by parameter type, name, position, all parameters, etc. When parameter binding is disabled for a parameter, it will simply get the default value its type dictates.\r\n- An endpoint filter can now be added that performs custom parameter binding via whatever mechanism or semantic it wishes. This could include retrieving values from items in the feature collection or DI, as @commonsensesoftware describes.\r\n- \u0060ApiExplorer\u0060 information for parameters that are custom bound can be provided via the parameter types themselves now thanks to \u0060IEndpointParameterMetadataProvider\u0060. If we decide there also needs to be a way for a parameter-binding endpoint filter to provide this data we could support \u0060IEndpointParameterMetadataProvider\u0060 on filter types too so they can statically provide metadata about known parameter types. \r\n- A parameter binding library could enable all this on an endpoint with a single extension method that adds an endpoint convention that adds the endpoint metadata that disables the default parameter-binding, and the filter that performs the custom binding.",
        "createdAt": "2023-02-09T04:44:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1423627356"
      },
      {
        "id": "IC_kwDOAQzde85V4-JU",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "@DamianEdwards I\u0027m glad to see the **API Explorer** is being considered too. I\u0027ve already had to do some yucky hacks for API Versioning with _Minimal APIs_ because \u0060AddEndpointsApiExplorer\u0060 doesn\u0027t completely do the _right_ thing (see #41773). Specifically, the design _should_ provide some level of parity with the behavior of \u0060BindingSource\u0060. API Versioning uses \u0060Custom\u0060 for the \u0060ApiVersion\u0060 type (just like \u0060CancellationToken\u0060) because it not only resolves from a HTTP feature, but from an exploration standpoint, it can come from multiple places. This means there is not a 1:1 mapping. The \u0060ApiVersion\u0060 parameter in a delegate _could_ produce multiple \u0060ApiParameterDescriptor\u0060 instances (ex: one from the query string and one from the header). The API Versioning extensions for API Explorer understand how to deal with that. There effectively needs to be an _escape hatch_ for the built-in logic that understands exploration should explicitly not be inferred and will come from some other source.\r\n\r\nI\u0027d be curious to put eyes on any type of rough design as soon as you have something to provide feedback on. Whether the process involves adding the filter, or whatever the final mechanism is, API Versioning will _want_ to wire that up automatically for a developer, if possible, to keep things as terse as possible. A developer shouldn\u0027t necessarily have to remember to add the filter in every place they declare an \u0060ApiVersion\u0060 parameter in their delegate or method.\r\n\r\nUnless you\u0027re of the opinion that developer will explicitly have to opt into these filters for specific endpoints, that highlights a couple of additional things:\r\n\r\n1. If a filter for a parameter binding will never be applied (because it\u0027s not in the signature), should it be ignored when the \u0060Endpoint\u0060 is finally built?\r\n    a. Why retain the memory?\r\n2. If such filtering can be done, will it be done automatically or must it be done by extenders?\r\n    a. I suspect this would effect the public API surface area\r\n",
        "createdAt": "2023-02-22T23:28:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1440997972"
      },
      {
        "id": "IC_kwDOAQzde85cvm24",
        "parentId": null,
        "author": "xamir82",
        "content": "This is arguably among the most important features that\u0027s currently lacking in Minimal APIs.\r\n\r\nIt\u0027s all too common to run into situations where you don\u0027t have access to the actual type of a parameter and therefore you have no way of declaring static \u0060TryParse\u0060/\u0060BindAsync\u0060 methods on said type, which makes this feature pretty essential. Hopefully it\u0027s given priority.",
        "createdAt": "2023-05-20T20:01:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1555983800"
      },
      {
        "id": "IC_kwDOAQzde85cvrf6",
        "parentId": null,
        "author": "aradalvand",
        "content": "@DamianEdwards Would the endpoint filter approach you have in mind allow opting out of the default \u0022parsing logic\u0022, if you will, without also opting out of the binding source? Basically the equivalent of \u0060TryParse(string input, out T? result)\u0060? Because it doesn\u0027t seem like it would, judging by your explanation [in this comment](https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1423627356), but this is a crucial thing.\r\n\r\nFor example, currently if you have an enum as a query string or route parameter, the incoming values are compared against the enum names case-sensitively \u2014 an issue described in #45590 and #48346. In the approach you\u0027re proposing, would it be possible to customize that specific logic (make the enum parsing case-insensitive) without having to manually look inside \u0060HttpContext.Request.Query\u0060 or \u0060HttpContext.Request.RouteValues\u0060? Again, essentially the equivalent of what now \u0060TryParse\u0060 does.",
        "createdAt": "2023-05-20T21:00:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1556002810"
      },
      {
        "id": "IC_kwDOAQzde85cvxAH",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "No, it would only allow a wholesale replacement of the parameter binding logic. Changing specific details of how the built-in binding works would require separate hooks into that logic. I\u0027d suggest logging separate issues to cover those kinds of customizations.",
        "createdAt": "2023-05-20T22:04:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1556025351"
      },
      {
        "id": "IC_kwDOAQzde85cv2Od",
        "parentId": null,
        "author": "aradalvand",
        "content": "@DamianEdwards Then why take that approach? Why not implement a holistic solution that covers all of these scenarios?\r\nCorrect me if I\u0027m wrong, but this approach is clearly unideal if it fails to account for this use case, which is probably even a more common use case than wanting to re-implement a parameter\u0027s entire binding logic from scratch.\r\n\r\n\u003E I\u0027d suggest logging separate issues to cover those kinds of customizations.\r\n\r\nI thought these customizations were tracked by this issue? Are they not? I\u0027m not really talking about anything fundamentally different, just the ability to customize an individual parameter\u0027s \u0060TryParse\u0060 (in addition to its \u0060BindAsync\u0060, which is all your proposal would allow). Isn\u0027t that within the scope of what this issue is about?\r\n\r\nRight now, there are [two ways to customize parameter binding logic](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/parameter-binding?view=aspnetcore-7.0#custom-binding): Declaring either \u0060BindAsync\u0060 or \u0060TryParse\u0060 on the parameter\u0027s type.\r\nIf the goal here is to \u0022extend\u0022 this \u2014 which is quite literally what the title of this issue says \u2014 then the solution you\u0027re currently suggesting is incomplete as it only \u0022extends\u0022 \u0060BindAsync\u0060 and not \u0060TryParse\u0060.",
        "createdAt": "2023-05-21T00:06:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1556046749"
      },
      {
        "id": "IC_kwDOAQzde85cwDE0",
        "parentId": null,
        "author": "davidfowl",
        "content": "There\u0027s a single case that\u0027s not accounted for that is already solvable today but it requires wrapping the type or declaring your own type. That\u0027s the only case left to be solved. We also don\u0027t want to do anything that makes the cost for *every* parameter expensive *just in case* somebody wants to change how an existing type is bound. That\u0027s why it has to be opt-in, and high performance. The other consideration is that it needs to work with the source generated version of minimal APIs shipping in .NET 8.\r\n\r\nWholistic logic is how we end up with MVC\u0027s hard to optimize model binding system (which we really want to avoid recreating).",
        "createdAt": "2023-05-21T06:46:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1556099380"
      },
      {
        "id": "IC_kwDOAQzde85cwEGY",
        "parentId": null,
        "author": "aradalvand",
        "content": "\u003E There\u0027s a single case that\u0027s not accounted for that is already solvable today but it requires wrapping the type or declaring your own type.\r\n\r\nYes, but that is obviously an awkward workaround. Technically all the use cases here (including the ones that _will_ be covered by the endpoint filter approach) are already solvable today by creating wrapper types. The whole point of this proposal, as far as I understand, is to make this more convenient and streamlined.\r\n\r\n\u003E We also don\u0027t want to do anything that makes the cost for every parameter expensive just in case somebody wants to change how an existing type is bound.\r\n\r\nSure, I definitely wasn\u0027t suggesting that.\r\n\r\n\u003E Wholistic logic is how we end up with MVC\u0027s hard to optimize model binding system (which we really want to avoid recreating).\r\n\r\nAll I meant by \u0022holistic\u0022 was something that would also account for what \u0060TryParse\u0060 now does on a type basis, on a parameter basis. I really don\u0027t think that\u0027s an outrageous suggestion.",
        "createdAt": "2023-05-21T07:11:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1556103576"
      },
      {
        "id": "IC_kwDOAQzde85cwERv",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Sure, I definitely wasn\u0027t suggesting that.\r\n\r\nI don\u0027t think you were explicitly suggesting it, but the approaches suggested may end up requiring that happen it\u0027s not considered.\r\n\r\n\u003E All I meant by \u0022holistic\u0022 was something that would also account for what TryParse now does on a type basis, on a per-parameter basis. I really don\u0027t think that\u0027s an outrageous or unreasonable suggestion.\r\n\r\nIt\u0027s not, but we\u0027ve built at least 4 of these systems in each of the ASP.NET Core frameworks (e.g. SignalR, MVC, Blazor, minimal) and understand the tradeoffs. We\u0027re trying to come up with something that:\r\n- Is fast\r\n- Is flexible\r\n\r\nThose are usually at odds \uD83D\uDE04. We understand the scenarios and there are currently workarounds (as \u0022not nice\u0022 as they are).",
        "createdAt": "2023-05-21T07:15:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1556104303"
      },
      {
        "id": "IC_kwDOAQzde85zZcC_",
        "parentId": null,
        "author": "adearriba",
        "content": "What is the status of custom parameter binding right now? \r\n\r\nContext:\r\nI currently depend on a library that has their model exposed using Newtonsoft and just having System.Text.JSON serializer available is a pain. It would be nice to be able to declare which serializer to use per endpoint or endpoint group. That would be a great flexibility to have.",
        "createdAt": "2024-02-09T14:37:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1936048319"
      },
      {
        "id": "IC_kwDOAQzde85zbGPR",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E What is the status of custom parameter binding right now?\r\n\r\nWe don\u0027t have custom parameter binding support as is outlined in this issue.\r\n\r\n@adearriba Do you mind filing a new issue with a description of what you\u0027re trying to do? I\u0027m curious about some of the details and wonder if existing APIs might be able to help you out.",
        "createdAt": "2024-02-09T19:26:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1936483281"
      },
      {
        "id": "IC_kwDOAQzde85zbobf",
        "parentId": null,
        "author": "davidfowl",
        "content": "Keyed services make it much easier to manage per endpoint/type options and services. \r\n\r\n\u002B1 to @captainsafia \u0027s suggestion.",
        "createdAt": "2024-02-09T21:24:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1936623327"
      },
      {
        "id": "IC_kwDOAQzde85zh7Pt",
        "parentId": null,
        "author": "adearriba",
        "content": "I didn\u0027t explain myself correctly. Let me re-phrase:\r\n\r\nMy service receives webhooks and it depends on a library that has their model exposed using Newtonsoft. This means that when I receive a webhook, it doesn\u0027t deserialize the content correctly.  Just having System.Text.JSON \u0060deserializer\u0060 available is a pain in these scenarios. It would be nice to be able to declare which \u0060deserializer\u0060 to use per endpoint or endpoint group. That would be a great flexibility to have.\r\n\r\nExample:\r\n\u0060\u0060\u0060csharp\r\nRouteGroupBuilder webhookBuilder = app\r\n    .MapGroup(\u0022webhooks\u0022)\r\n    .WithNewtonsoftParameterBinder();\r\n\u0060\u0060\u0060",
        "createdAt": "2024-02-12T09:04:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-1938273261"
      },
      {
        "id": "IC_kwDOAQzde8541qnA",
        "parentId": null,
        "author": "grahambunce",
        "content": "Since . NET 8 has been released and we are now onto .NET 9, can I ask about the state of improving the custom binding experience?\r\n\r\nWe are looking to implement the minimal APIs in our organisation for our migration from .NET 6 to . NET 8 and the current model binding experience in .NET 8 is ..... interesting.\r\n\r\nWe do a lot of \u0022mixed model\u0022 binding. This is where we have a single view model request that uses attributes to control where the model gets populated from, i.e. we can have property X with a [FromHeader] attribute, properly Y with a [FromRoute] attribute and the rest from the body. We then use Data Annotations to validate the whole model, e.g. [Required] a custom [NotDefault] for UUIDs etc.\r\n\r\nThis was easy to implement in MVC style controllers. We could create a [MixedModelBinding] attribute and annotate our controller methods with this.  The attribute  simply forced both the BodyModelBinderProvder and ComplexModelBinderProvider to execute. We could enable this though MvcOptions via the ModelBinderProviders.\r\n\r\ni.e. with one attribute prefixing the request model on the method, we had an object that would pull in values from wherever it found them, without any need for \u0022proper\u0022 custom binders. This was very clean.\r\n\r\nNow, in .NET 8, none of this appears to work. The minimal APIs will not accept any binding that isn\u0027t from a known list, so even custom binders are not supported.\r\n\r\nWe are left with having to update all of our simple DTOs with custom BindAsync code. As this code invariably needs to deserialise JSON, we need a static JsonSerializerOptions (to handle casing differences automatically) and because BindAsync must be a static method itself, we can\u0027t use inheritance to make this easier.\r\n\r\nWe now need to write custom binding logic for every DTO, making every DTO significantly more complicated, I have not found a way to make this generic or add this to the pipeline. We cannot use Custom Binders to isolate our binding logic from our DTOs (I accept there is an argument that the binding logic should be *with* the DTO, but in this case I just disagree with that).\r\n\r\nThis is a bit of a mess frankly and makes the porting effort far more significant, with essentially boiler plate code in every DTO that really shouldn\u0027t be there.\r\n\r\nIs there a plan to address this, as this ticket has been open since 2021.",
        "createdAt": "2024-03-29T14:40:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-2027334080"
      },
      {
        "id": "IC_kwDOAQzde8541vyp",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E We then use Data Annotations to validate the whole model, e.g. [Required] a custom [NotDefault] for UUIDs etc.\r\n\r\nThere\u0027s no support for data annotations validation (yet) in minimal APIs, we hope to bring that in .NET 9. You can use https://github.com/DamianEdwards/MiniValidation in the meantime.\r\n\r\nThere\u0027s no plan to re-build the MVC model binding system but you have some options as you are looking to migrate over:\r\n\r\n[ Bridge the MVC model binding system into minimal APIs](https://github.com/DamianEdwards/MinimalApis.Extensions/blob/main/src/MinimalApis.Extensions/Binding/ModelBinderOfT.cs)\r\n\r\nBTW this package is on nuget https://www.nuget.org/packages/MinimalApis.Extensions/.\r\n\r\nYou are looking at using inheritance but you can also use generics as an alternative. Essentially your model binder is no longer an attribute but a wrapper type that does the binding. That way your DTOs don\u0027t need the complex logic.",
        "createdAt": "2024-03-29T15:00:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-2027355305"
      },
      {
        "id": "IC_kwDOAQzde85413N3",
        "parentId": null,
        "author": "martincostello",
        "content": "\u003E We do a lot of \u0022mixed model\u0022 binding. This is where we have a single view model request that uses attributes to control where the model gets populated from, i.e. we can have property X with a [FromHeader] attribute, properly Y with a [FromRoute] attribute and the rest from the body.\r\n\r\nYou should be able to do the equivalent of this with the [\u0060[AsParameters]\u0060 attribute](https://learn.microsoft.com/aspnet/core/fundamentals/minimal-apis/parameter-binding#parameter-binding-for-argument-lists-with-asparameters), where you can add \u0060[FromHeader]\u0060, \u0060[FromRoute]\u0060 etc. onto your DTOs directly.\r\n",
        "createdAt": "2024-03-29T15:27:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-2027385719"
      },
      {
        "id": "IC_kwDOAQzde85414sZ",
        "parentId": null,
        "author": "danielgreen",
        "content": "Is there support (current or planned) for multipart form binding?\r\n\r\nFor example the first part containing JSON to be automatically\r\ndeserialized, and subsequent parts containing IFormFiles to be uploaded.\r\n\r\nAFAIK at the moment we need to grab the JSON string and manually\r\ndeserialize in the above scenario.\r\n\r\nOn Fri, 29 Mar 2024, 15:01 David Fowler, ***@***.***\u003E wrote:\r\n\r\n\u003E We then use Data Annotations to validate the whole model, e.g. [Required]\r\n\u003E a custom [NotDefault] for UUIDs etc.\r\n\u003E\r\n\u003E There\u0027s no support for data annotations validation (yet) in minimal APIs,\r\n\u003E we hope to bring that in .NET 9. You can use\r\n\u003E https://github.com/DamianEdwards/MiniValidation in the meantime.\r\n\u003E\r\n\u003E There\u0027s no plan to re-build the MVC model binding system but you have some\r\n\u003E options as you are looking to migrate over:\r\n\u003E\r\n\u003E Bridge the MVC model binding system into minimal APIs\r\n\u003E \u003Chttps://github.com/DamianEdwards/MinimalApis.Extensions/blob/main/src/MinimalApis.Extensions/Binding/ModelBinderOfT.cs\u003E\r\n\u003E\r\n\u003E BTW this package is on nuget\r\n\u003E https://www.nuget.org/packages/MinimalApis.Extensions/.\r\n\u003E\r\n\u003E You are looking at using inheritance but you can also use generics as an\r\n\u003E alternative. Essentially your model binder is no longer an attribute but a\r\n\u003E wrapper type that does the binding. That way your DTOs don\u0027t need the\r\n\u003E complex logic.\r\n\u003E\r\n\u003E \u2014\r\n\u003E Reply to this email directly, view it on GitHub\r\n\u003E \u003Chttps://github.com/dotnet/aspnetcore/issues/35489#issuecomment-2027355305\u003E,\r\n\u003E or unsubscribe\r\n\u003E \u003Chttps://github.com/notifications/unsubscribe-auth/AAFY2LVXEO6VV6B6KYSY64DY2V64BAVCNFSM5CNMYJ62U5DIOJSWCZC7NNSXTN2JONZXKZKDN5WW2ZLOOQ5TEMBSG4ZTKNJTGA2Q\u003E\r\n\u003E .\r\n\u003E You are receiving this because you are subscribed to this thread.Message\r\n\u003E ID: ***@***.***\u003E\r\n\u003E\r\n",
        "createdAt": "2024-03-29T15:33:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-2027391769"
      },
      {
        "id": "IC_kwDOAQzde854162B",
        "parentId": null,
        "author": "davidfowl",
        "content": "Not even MVC supports this (likely because it\u0027s not common). It would be a different issue than this one.",
        "createdAt": "2024-03-29T15:41:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-2027400577"
      },
      {
        "id": "IC_kwDOAQzde8542tMg",
        "parentId": null,
        "author": "grahambunce",
        "content": "@martincostello Thanks - unfortunately in our case [AsParameters] will not work. It seems to pick up [FromHeader] etc but in our POST/PUTs we have body parameters too.  We can only have one [FromBody] but using the current technique we have a flattened structure so that we do not need to map to a specific Body property that could itself be annotated with [FromBody].\r\n\r\nWe\u0027d need to redesign all our model classes. However you are correct that if we did then it would bind correctly, but I think this exposed a weakness in Model Validation (I have a vague memory of this being the case back in .NET 6 which is why we looked for an alternative) in that the Data Annotations model validation does not pick up body failures on the Body property class, it only picks up failures at the higher level \u0022request\u0022 class.",
        "createdAt": "2024-03-29T18:54:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-2027606816"
      },
      {
        "id": "IC_kwDOAQzde85420PO",
        "parentId": null,
        "author": "grahambunce",
        "content": "@davidfowl Ok. I don\u0027t have a problem with re-introducing Data Annotations validation via a empty RouteGroupBuilder, although adding cross-cutting concerns back into the pipeline where the developer decides they necessary should be easier  and still aligns with your goal to strip minimal APIs right back ( I think I saw a conversation about this on another ticket).\r\n\r\nHaving a better way for a letting the developer have the final say on how to bind a model such as re-introducing the Custom Model Binder should be on the roadmap though - the current approach I don\u0027t feel works at all well IMO. This would ease the transition for developers with years of learned experiences into the new API pattern, but I know you are aware of this.\r\n\r\nI don\u0027t know why it wasn\u0027t added in the first place - to add the others but not this seems a bit weird.... some AOT reason perhaps?\r\n\r\nI will look at that package though, so thanks,  and see if we can introduce it to our organisation but, as I\u0027m sure you are aware, relying on open source functionality for something that previously existed isn\u0027t always accepted by the engineering departments.\r\n",
        "createdAt": "2024-03-29T19:06:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-2027635662"
      },
      {
        "id": "IC_kwDOAQzde85424Vv",
        "parentId": null,
        "author": "davidfowl",
        "content": "I think there are a couple of concrete things here that we *can* do to improve things. This issue is about making so that there\u0027s no wrapper type with a BindAsync but that\u0027s just the mechanism for you tell us that you want to do model binding. With keyed services we can improve this mechanism.\r\n\r\nOnce you are able to decide that you want to \u0022hook\u0022 model binding, there\u0027s no way to invoke the default logic to do anything complex (like the complex model binder). We\u0027re not going to rebuild that because:\r\n1. It already exists in MVC. You can always use if directly if you choose to build models for that sort of system.\r\n2. It will not work with AOT (you guess it!). The model binding system is a full de-serializer and making it AOT friendly is a similar level of effort as making the JSON serializer AOT friendly.\r\n3. The model binding system is recursive; you can invoke registered binders from other binders. This is incredible flexible but also adds lots of complexity and overhead for simple cases.\r\n\r\nIf we did anything here, I would do 3 things:\r\n1. Make it so that you can add a \u0022binder\u0022 surrogate via a keyed service. This is just another way of declaring you want to take over.\r\n2. Make it so you can invoke the default binder logic we have in some way (composition).\r\n3. Let you bridge MVC\u0027s model binding system into minimal APIs (with all the caveats mentioned above).\r\n\r\nMost applications don\u0027t need to model their DTOs this way, MVC was powerful in that it allowed developers to build this (we call it a framework for building frameworks). Minimal APIs has a different philosophy and doesn\u0027t want to have lots of extensibility points as it prevents us from optimizing what we consider the 90% case.\r\n\r\nTake a look at https://www.nuget.org/packages/MinimalApis.Extensions/, and see if you can use the \u0060ModelBinder\u003CT\u003E\u0060 for your scenario.",
        "createdAt": "2024-03-29T19:23:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-2027652463"
      },
      {
        "id": "IC_kwDOAQzde8543CPR",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "@davidfowl any rough idea of when or if the required effort will get any consideration for .NET 9 or even .NET 10? If it _might_ be considered, it would be nice to line up feature and release plans. \uD83D\uDE09 \r\n\r\nYou may or may not have reviewed the _new_ high-level proposal I put forth in #50672. I know you\u0027re busy looking at a gazillion other proposals so I\u0027m not going to pester you about it. It\u0027s a reimaging of an earlier proposal in #45525 that we decided didn\u0027t fit the bill and closed out. I had forgotten about the first proposal when I created the second one. After studying the source of how binding works in detail again, the new proposal should be much closer to the same approach that the built-in binding mechanisms use. It should also be amenable to source generation and AOT, albeit probably with some additional revisions.",
        "createdAt": "2024-03-29T20:12:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35489#issuecomment-2027693009"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NzQ3ODkzNjM=",
    "title": "Support custom error messages when validation fails on minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/35501",
    "createdAt": "2021-08-19T15:28:04Z",
    "lastUpdated": "2024-03-01T23:09:50Z",
    "body": "This issue captures user feedback from https://twitter.com/davidfowl/status/1428228518953984005?s=20.\r\n\r\nCurrently, the feature to support treating parameters that are nullable or have default values as optional will return a status code and no error message as part of the response. This is largely because (1) it builds on top of the existing try-parse parsing logic which does nothing and (2) when we were working through the feature we had punted on the problem of what message to send back.\r\n\r\nUsers want to be be able to customize the message to:\r\n- Provide clearer info to the client\r\n- Conform to a specific API implementation",
    "upvotes": 8,
    "labels": [
      "triage-focus",
      "Priority:3",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde841w51u",
        "parentId": null,
        "author": "davidfowl",
        "content": "I think this goes beyond the optionality feature. It\u0027s anytime the framework automagically returns a response (e.g. if TryParse fails).",
        "createdAt": "2021-08-19T15:30:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-902012270"
      },
      {
        "id": "IC_kwDOAQzde841w6h3",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E I think this goes beyond the optionality feature. It\u0027s anytime the framework automagically returns a response (e.g. if TryParse fails).\r\n\r\nTrue, true. The fact that both the TryParse and optionality checks both build on top of the \u0060CheckParams\u0060 logic means that they both provide status codes with no messages to the user.",
        "createdAt": "2021-08-19T15:34:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-902015095"
      },
      {
        "id": "IC_kwDOAQzde841xIcP",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "Folks can customize the message via a middleware, using a marker object in metadata or items to enable/disable per endpoint (inspired by [this reply tweet](https://twitter.com/SilvairLSoares/status/1428345482191978510?s=20))\r\n\r\n![image](https://user-images.githubusercontent.com/249088/130109128-9775b5d7-5ffb-44d1-8ac9-58c4df6a5603.png)",
        "createdAt": "2021-08-19T16:42:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-902072079"
      },
      {
        "id": "IC_kwDOAQzde841xKPr",
        "parentId": null,
        "author": "davidfowl",
        "content": "What\u0027s nice about this is that we don\u0027t need to add anymore configuration or concepts. It\u0027s just middleware.",
        "createdAt": "2021-08-19T16:53:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-902079467"
      },
      {
        "id": "IC_kwDOAQzde841yIxM",
        "parentId": null,
        "author": "poke",
        "content": "It would still be good if there was some global way to affect this. If the validating behavior is there by default with non-nullable parameters, then there should also be some way to control this default behavior.\r\n\r\nI could imagine some callback that can be registered via options somewhere which default value is just the current 400 response behavior?",
        "createdAt": "2021-08-20T00:14:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-902335564"
      },
      {
        "id": "IC_kwDOAQzde841ycOR",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "We literally have no extensibility points like that today in Minimal APIs and have been very hesitant to do so for .NET 6. We want to let people use and see what the wider feedback is before we start committing to API and more layers of extensibility (complexity). One of the reasons MVC is so complex today is because so much is customizable. While powerful it makes it difficult to learn and limits what we can do regarding performance improvements.\r\n\r\nIf it can be done with middleware and other existing concepts that don\u0027t require new API in a reasonable way, we intend to leave it that way, for now.",
        "createdAt": "2021-08-20T04:08:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-902415249"
      },
      {
        "id": "IC_kwDOAQzde841y4yw",
        "parentId": null,
        "author": "poke",
        "content": "\u003E While powerful it makes it difficult to learn\r\n\r\nIf \u201Clearning\u201D or discoverability is a goal of the new minimal API, then I don\u2019t think it should automatically respond with a 400 if it wasn\u2019t actually produced in user code. Because that really is undiscoverable magic from the framework.\r\n\r\nEspecially if it returns just a blank 400 without any details, then that really makes it very difficult to diagnose and learn about this too. I deal often enough with users that aren\u2019t even aware of how to access their server logs, who mostly rely on the content of the HTTP responses for figuring out what\u2019s wrong. If there\u2019s now a blank response, then imo this will do more harm than good.\r\n\r\nAnd if you decide to produce some content, e.g. using ProblemDetails, then there _needs_ to be a way to reconfigure this since ProblemDetails, being a relatively new spec, is only one of many ways to encode errors. And you wouldn\u2019t want to have the framework be limiting here, especially since the minimal API is mostly a \u201Cdo whatever you want, manually\u201D way.\r\n\r\nIt would probably better to just throw an exception then which people could catch in a custom middleware to do custom handling, or which would bubble up until some default thing handles it.",
        "createdAt": "2021-08-20T08:36:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-902532272"
      },
      {
        "id": "IC_kwDOAQzde84109iH",
        "parentId": null,
        "author": "davidfowl",
        "content": "Maybe a decent tradeoff could be using a response header. That would: \r\n- Put something in the response by default\r\n- Allow users to customize the response with above approach\r\n\r\nWe\u0027d also continue logging what happened.",
        "createdAt": "2021-08-21T07:36:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-903075975"
      },
      {
        "id": "IC_kwDOAQzde8414Wmc",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "@davidfowl by that you mean the framework would set a header by default? What would it be (name/value)?",
        "createdAt": "2021-08-23T17:21:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-903965084"
      },
      {
        "id": "IC_kwDOAQzde8417ybW",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E @davidfowl by that you mean the framework would set a header by default? What would it be (name/value)?\r\n\r\nYea, maybe just the exception text.",
        "createdAt": "2021-08-24T18:12:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-904865494"
      },
      {
        "id": "IC_kwDOAQzde8418ACs",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "So a custom header with the exception message? Which exceptions are we talking about as I assume it would be constrained to some specific scenarios?",
        "createdAt": "2021-08-24T19:38:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-904921260"
      },
      {
        "id": "IC_kwDOAQzde8418D5V",
        "parentId": null,
        "author": "davidfowl",
        "content": "Or the problem details message? It\u0027s basically a way to get the data into the response without hampering the ability to change the response. When we do the problem details middleware it\u0027ll take care of these transformations I hope",
        "createdAt": "2021-08-24T20:04:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-904937045"
      },
      {
        "id": "IC_kwDOAQzde842FWHl",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-08-27T17:50:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-907370981"
      },
      {
        "id": "IC_kwDOAQzde843lzEs",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "OK so this is pretty gnarly I admit but I added [some examples to my playground repo](https://github.com/DamianEdwards/MinimalApiPlayground/blob/84446f016b7bc7f3a2b91a5ef111933899eba749/src/MinimalApiPlayground/Program.cs#L180) (rc.2 branch) that use a few tricks to enable suppressing the default behavior (binding and/or response defaults).\r\n\r\nThe magic is basically a helper type [\u0060DefaultBinder\u003CTValue\u003E\u0060](https://github.com/DamianEdwards/MinimalApiPlayground/blob/84446f016b7bc7f3a2b91a5ef111933899eba749/src/MinimalApiPlayground/Properties/DefaultBinderOfT.cs) that allows you to invoke the framework\u0027s default logic explicitly, returning you the \u0060TValue\u0060 value and the status code the framework **would have** replied with. It\u0027s not completely fool-proof but goes a pretty long way. It has to use ref emit right now to generate the dummy route handler delegates to invoke the binding but I imagine in a future version of the framework we could actually include a type like this.\r\n\r\nIt means you can write route handlers like this where the logic to handle any issues is in the handler itself:\r\n\u0060\u0060\u0060 c#\r\napp.MapPost(\u0022/suppress-defaults\u0022, (SuppressDefaultResponse\u003CTodo?\u003E todo, HttpContext httpContext) =\u003E\r\n    {\r\n        if (todo.Exception != null)\r\n        {\r\n            // There was an exception during binding, handle it however you like\r\n            throw todo.Exception;\r\n        }\r\n\r\n        if (todo.StatusCode != 200)\r\n        {\r\n            // The default logic would have auto-responded, do what you like instead\r\n            throw new BadHttpRequestException(\u0022Your request was bad and you should feel bad\u0022, todo.StatusCode);\r\n        }\r\n\r\n        return Results.Ok(todo.Value);\r\n    })\r\n    .WithTags(\u0022Examples\u0022)\r\n    .Accepts\u003CTodo\u003E(\u0022application/json\u0022);\r\n\u0060\u0060\u0060",
        "createdAt": "2021-10-02T01:19:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-932655404"
      },
      {
        "id": "IC_kwDOAQzde843qlPj",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "For .NET 6 there won\u0027t be any first-class feature/option for changing the behavior including status codes and messages. However as noted above one can use middleware or a custom implementation of \u0060BindAsync\u0060 to affect this behavior and ultimately control the response. We\u0027ll look at potential framework changes in .NET 7 based on how we see this being used.",
        "createdAt": "2021-10-04T22:40:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-933909475"
      },
      {
        "id": "IC_kwDOAQzde84-SjW_",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "This is something we should revisit as part of the endpoint filters feature, i.e. it should be possible to author a filter that runs before the default logic and return a custom error message.",
        "createdAt": "2022-02-18T19:19:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-1045050815"
      },
      {
        "id": "IC_kwDOAQzde85CkB8S",
        "parentId": null,
        "author": "captainsafia",
        "content": "We have this set to a priority 3. We should re-evaluate since this is coming in a few discussions.",
        "createdAt": "2022-05-03T23:06:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-1116741394"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5Nzg2MTM4MDc=",
    "title": "Minimal APIs doesn\u0027t describe it\u0027s implicit 400 and 415 response behaviors to ApiExplorer",
    "url": "https://github.com/dotnet/aspnetcore/issues/35683",
    "createdAt": "2021-08-25T01:25:16Z",
    "lastUpdated": "2024-09-10T20:04:43Z",
    "body": "Minimal APIs today has a number of implicit behaviors that are performed implicitly based on the declared route handler delegate signature. Most of these behaviors are automatically described to \u0060ApiExplorer\u0060 such that OpenAPI/Swagger libraries like Swashbuckle or nSwag can emit OpenAPI information that accurately reflects the behavior of the app\u0027s HTTP API endpoints.\r\n\r\nSome implicit behaviors are not described however, namely:\r\n- The implicit \u0060400 Bad Request\u0060 response in the case that the parameters for the matched route handler delegate cannot be populated from the request, e.g. due to a missing request body or route data parameter\r\n- The implicit \u0060415 Unsupported Media Type\u0060 response in the case that the request\u0027s \u0060Content-Type\u0060 header does not contain a value that matches either the implicit content type supported by Minimal APIs (_application/json_) or one of the specific content types declared by the \u0060ConsumesAttribute\u0060 metadata on the route handler delegate\r\n\r\nWe should decide whether these (and any others I\u0027ve missed) implicit behaviors should be described to \u0060ApiExplorer\u0060 and if not what the principle is that guides which behaviors should and shouldn\u0027t be described moving forward.",
    "upvotes": 1,
    "labels": [
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde841_V1O",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "Note this from the OpenAPI/Swagger spec suggests that known errors like 400 Bad Request due to invalid operations **should** be documented:\r\n\r\nhttps://swagger.io/docs/specification/describing-responses/#status-codes\r\n\u003E Note that an API specification does not necessarily need to cover all possible HTTP response codes, since they may not be known in advance. However, it is expected to cover successful responses and any known errors. By \u201Cknown errors\u201D we mean, for example, a 404 Not Found response for an operation that returns a resource by ID, or a 400 Bad Request response in case of invalid operation parameters.",
        "createdAt": "2021-08-25T19:03:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35683#issuecomment-905796942"
      },
      {
        "id": "IC_kwDOAQzde842FQ99",
        "parentId": null,
        "author": "darrelmiller",
        "content": "Personally, I would describe responses with:\r\n\r\n\u0060\u0060\u0060\r\nresponses:\r\n  4XX:\r\n    content-type:\r\n      application/http-problem: {}\r\n  5XX:\r\n    content-type:\r\n      application/http-problem: {}\r\n\u0060\u0060\u0060\r\n\r\nUnfortunately this only works for Open v3.x\r\n\r\nI don\u0027t believe there is a need to call out specific status codes unless there is something about the response that is out of the ordinary.  A client should be designed to handle any HTTP status via fallback to 200/400/500, so I see no need to call out default 400,401,404, etc behaviors.\r\n\r\nThe wording in the spec sucks. What does \u0022known\u0022 mean?  It is very imprecise.  Also, that link isn\u0027t the spec, despite what Smartbear say. The actual spec is here https://spec.openapis.org/oas/v3.1.0#responses-object and sadly has the same crappy language.",
        "createdAt": "2021-08-27T17:11:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35683#issuecomment-907349885"
      },
      {
        "id": "IC_kwDOAQzde842FWXU",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-08-27T17:52:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35683#issuecomment-907371988"
      },
      {
        "id": "IC_kwDOAQzde847tqhO",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-12-28T01:46:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35683#issuecomment-1001826382"
      },
      {
        "id": "IC_kwDOAQzde85MAXqi",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:21:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35683#issuecomment-1275165346"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5Nzk1MzgwODE=",
    "title": "Create an analyzer that warns when delegates are mapped to GET, DELETE, or HEAD requests and expect a request body",
    "url": "https://github.com/dotnet/aspnetcore/issues/35727",
    "createdAt": "2021-08-25T19:07:57Z",
    "lastUpdated": "2024-03-01T23:06:41Z",
    "body": "OpenAPI 3.0 states that GET, DELETE, and HEAD are not allowed to have request body because it does not have defined sematics as per RFC 7231:\r\n\r\nhttps://swagger.io/docs/specification/describing-request-body/\r\n\r\n\u003E GET, DELETE and HEAD are no longer allowed to have request body because it does not have defined semantics as per RFC 7231.\r\n\r\nWe should have an analyzer that warns the user when they annotate delegates mapped to GET, DELETE, or HEAD requests with Accepts/Consumes metadata, as those types of requests typically shouldn\u0027t be expecting a request body.\r\n\r\nExamples of delegates that should produce a warning:\r\n\u0060\u0060\u0060 c#\r\n// This has a complex parameter which by default expects a JSON request body\r\napp.MapGet(\u0022/thing\u0022, (Thing thing) =\u003E return Results.Ok());\r\n\r\n// This adds accepts metadata indicating it expects a JSON (default) request body in the shape of Thing\r\napp.MapDelete(\u0022/thing\u0022, (HttpRequest request) =\u003E return Results.Ok())\r\n    .Accepts\u003CThing\u003E();\r\n\r\n// This adds accepts metadata via an attribute indicating it expects a JSON request body in the shape of Thing\r\napp.MapGet(\u0022/thing\u0022, HandleGet);\r\n[Consumes(typeof(Thing), \u0022application/json\u0022)]\r\nIResult HandleGet(Thing thing)\r\n{\r\n    return Results.Ok();\r\n}\r\n\u0060\u0060\u0060\r\n\r\nExamples of delegates that technically are invalid according to the same rules but the analyzer would likely not produce a warning for as they don\u0027t represent an idiomatic form:\r\n\u0060\u0060\u0060 c#\r\napp.Map(\u0022/thing\u0022, HandleThingHead);\r\n[Consumes(\u0022application/json\u0022)]\r\nTask HandleThingHead(HttpContext context, RequestDelegate next)\r\n{\r\n    if (context.Request.Method == HttpMethods.Head)\r\n    {\r\n        context.Response.StatusCode = StatusCodes.Status200OK;\r\n        return Task.CompletedTask;\r\n    }\r\n    return next(context);\r\n}\r\n\u0060\u0060\u0060",
    "upvotes": 1,
    "labels": [
      "analyzer",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842FWl7",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-08-27T17:54:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35727#issuecomment-907372923"
      },
      {
        "id": "IC_kwDOAQzde85MAXr_",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:21:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35727#issuecomment-1275165439"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5Nzk5Mjg2NzY=",
    "title": "Suggest using parameter binding instead of manual parsing of HttpContext",
    "url": "https://github.com/dotnet/aspnetcore/issues/35760",
    "createdAt": "2021-08-26T07:30:56Z",
    "lastUpdated": "2024-03-01T23:06:41Z",
    "body": "## Background and Motivation\r\n\r\nAlthough we support scenarios where users can manual bind parameters from the HttpContext associated with their route handler, it is generally recommended to leverage the existing binding logic in ASP.NET to support this.\r\n\r\nNote: we prototyped this analyzer as part of the 2022 hackathon.\r\n\r\n## Proposed Analyzer\r\n\r\n### Analyzer Behavior and Message\r\n\r\nWhen we determine that the user has accessed the \u0060HttpContext.HttpRequest\u0060 value to extract parameters, provide a warning with the following message.\r\n\r\n\u003E Recommend using built-in parameter binding instead of manually processing HTTP request. \r\n\r\n\u003C!--\r\nAnalyzer categories are derived from the categories documented in https://learn.microsoft.com/dotnet/fundamentals/code-analysis/categories\r\nTo select a category, review each category\u0027s description and select the best category based on the functionality of your analyzer.\r\n\r\nAnalyzer severity levels are documented in https://learn.microsoft.com/visualstudio/code-quality/use-roslyn-analyzers#configure-severity-levels\r\nReview the description to observe how the level set on the analyzer will affect build-time and editor behavior and select the best\r\nlevel for the task.\r\n--\u003E\r\n\r\n### Category\r\n\r\n- [ ] Design\r\n- [ ] Documentation\r\n- [ ] Globalization\r\n- [ ] Interoperability\r\n- [ ] Maintainability\r\n- [ ] Naming\r\n- [ ] Performance\r\n- [ ] Reliability\r\n- [ ] Security\r\n- [ ] Style\r\n- [X] Usage\r\n\r\n### Severity Level\r\n\r\n- [ ] Error\r\n- [X] Warning\r\n- [ ] Info\r\n- [ ] Hidden\r\n\r\n## Usage Scenarios\r\n\r\nSome patterns we can detect:\r\n\r\n**Untyped parsing**\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/hey/{name}\u0022, (HttpRequest req) =\u003E $\u0022Hello {req.RouteValues[\u0022name\u0022]}\u0022);\r\n\u0060\u0060\u0060\r\n\r\nSuggested fix:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/hey/{name}\u0022, (string name) =\u003E $\u0022Hello {name}\u0022);\r\n\u0060\u0060\u0060\r\n\r\nWe should can remove the HttpRequest if it\u0027s not referenced by anything in the method.\r\n\r\n**Typed  parsing**\r\n\r\nIf we can detect the parsing of those members:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/todos/{id}\u0022, (HttpRequest req) =\u003E\r\n{\r\n    if (int.TryParse((string?)req.RouteValues[\u0022id\u0022], out var id))\r\n    {\r\n        return Results.BadRequest();\r\n    }\r\n    \r\n    var todo = db.Find(id);\r\n    if (todo is null)\r\n    {\r\n        return Results.BadRequest();\r\n    }\r\n\r\n    return Results.Ok(todo);\r\n});\r\n\u0060\u0060\u0060\u0060\r\n\r\nTo \r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/todos/{id}\u0022, (int id) =\u003E\r\n{\r\n    var todo = db.Find(id);\r\n    if (todo is null)\r\n    {\r\n        return Results.BadRequest();\r\n    }\r\n\r\n    return Results.Ok(todo);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nThis should also work for the query string:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/todos\u0022, async (HttpContext context) =\u003E\r\n{\r\n    if (!int.TryParse(context.Request.Query[\u0022pageIndex\u0022], out var pageIndex))\r\n    {\r\n        context.Response.StatusCode = 400;\r\n        return;\r\n    }\r\n\r\n    if (!int.TryParse(context.Request.Query[\u0022pageSize\u0022], out var pageSize))\r\n    {\r\n        context.Response.StatusCode = 400;\r\n        return;\r\n    }\r\n\r\n    await context.Response.WriteAsJsonAsync(db.GetTodos().Take(pageIndex).Skip(pageSize));\r\n});\r\n\u0060\u0060\u0060\r\n\r\nSuggested change:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/todos\u0022, (int pageIndex, int pageSize, HttpContext context) =\u003E\r\n{\r\n    await context.Response.WriteAsJsonAsync(db.GetTodos().Take(pageIndex).Skip(pageSize));\r\n});\r\n\u0060\u0060\u0060\r\n\r\n## Risks\r\n\r\nThere are some scenarios where users may prefer to manually parse parameters from \u0060HttpContext.HttpRequest\u0060 but the warning level of this analyzer is sufficient.",
    "upvotes": 2,
    "labels": [
      "api-approved",
      "analyzer",
      "Priority:2",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842LPG8",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-08-31T05:38:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35760#issuecomment-908915132"
      },
      {
        "id": "IC_kwDOAQzde85MAXuo",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:21:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35760#issuecomment-1275165608"
      },
      {
        "id": "IC_kwDOAQzde85OVenv",
        "parentId": null,
        "author": "captainsafia",
        "content": "Updated this to match our API template and added API review label.",
        "createdAt": "2022-11-14T19:15:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35760#issuecomment-1314253295"
      },
      {
        "id": "IC_kwDOAQzde85OVeqr",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2022-11-14T19:15:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35760#issuecomment-1314253483"
      },
      {
        "id": "IC_kwDOAQzde85UnaH5",
        "parentId": null,
        "author": "halter73",
        "content": "API Review Notes:\r\n\r\n- What do we think about \u0022Recommend using built-in parameter binding instead of manually processing HTTP request.\u0022 verbiage? It does seem like we have [a bunch of analyzer messages that start with \u0022Suggest\u0022](https://github.com/dotnet/aspnetcore/blob/add5afda65352c15ce2eeb107c0639897089d713/src/Framework/AspNetCoreAnalyzers/src/Analyzers/DiagnosticDescriptors.cs#L83-L117), but it feels better to just make the suggestion rather than use the word \u0022Suggest\u0022 or \u0022Recommend\u0022.\r\n- What about custom error handling logic? Or are using a shared component to read the route value? Can we detect that? Would it be annoying to get a usage warning when the code you already have is necessary for your custom error handling logic?\r\n- Is this useful enough without a fixer? It might not be clear enough what to do without really god documentation. We should link to documentation that has good before and after examples.\r\n\r\nAnalyzer Approved with modifications.\r\n\r\n\u0060\u0060\u0060\r\nCategory: Usage\r\nLevel: Information\r\nMessage: Use built-in parameter binding instead of manually processing HTTP request.\r\n\u0060\u0060\u0060",
        "createdAt": "2023-02-06T19:18:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35760#issuecomment-1419616761"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5Nzk5MzIwNTE=",
    "title": "Suggest the use of the Results class to produce responses instead of manually writing to the HttpResponse",
    "url": "https://github.com/dotnet/aspnetcore/issues/35761",
    "createdAt": "2021-08-26T07:35:27Z",
    "lastUpdated": "2024-03-01T23:06:42Z",
    "body": "This sample:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/todos/{id}\u0022, (int id, HttpContext context) =\u003E\r\n{\r\n    var todo = db.Find(id);\r\n    if (todo is null)\r\n    {\r\n        context.Response.StatusCode = 400;\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n    return context.Response.WriteAsJsonAsync(todo);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nGets changed to this:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/todos/{id}\u0022, (int id) =\u003E\r\n{\r\n    var todo = db.Find(id);\r\n    if (todo is null)\r\n    {\r\n        return Results.BadRequest();\r\n    }\r\n\r\n    return Results.Ok(todo);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nThis goes for setting the content type as well:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/content\u0022, (HttpContext context) =\u003E\r\n{\r\n    var content = @\u0022\u003Cxml\u003E\u003Cnode\u003Etop\u003C/node\u003E\u003C/xml\u003E\u0022;\r\n\r\n    context.Response.ContentType = \u0022application/xml\u0022;\r\n    return context.Response.WriteAsync(content);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nSuggested to:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/content\u0022, () =\u003E\r\n{\r\n    var content = @\u0022\u003Cxml\u003E\u003Cnode\u003Etop\u003C/node\u003E\u003C/xml\u003E\u0022;\r\n\r\n    return Results.Text(content, \u0022application/xml\u0022);\r\n});\r\n\u0060\u0060\u0060",
    "upvotes": 1,
    "labels": [
      "analyzer",
      "Priority:2",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842LPIo",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-08-31T05:38:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35761#issuecomment-908915240"
      },
      {
        "id": "IC_kwDOAQzde85MAXxc",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:21:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35761#issuecomment-1275165788"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5Nzk5NDUyNzM=",
    "title": "[Refactoring] Provide toggle between [FromX] and implicit attributes",
    "url": "https://github.com/dotnet/aspnetcore/issues/35762",
    "createdAt": "2021-08-26T07:52:45Z",
    "lastUpdated": "2024-03-01T23:06:43Z",
    "body": "This infers [FromQuery] so the attribute isn\u0027t required.\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/todos\u0022, ([FromQuery]int pageIndex, [FromQuery] int pageSize) =\u003E\r\n{\r\n    return db.GetTodos().Take(pageIndex).Skip(pageSize);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nQuery string is inferred when the parameter names don\u0027t appear in the route. We would only suggest this when we can see literal strings for route patterns (where we can tell what the route parameters are).\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/todos\u0022, (int pageIndex, int pageSize) =\u003E\r\n{\r\n    return db.GetTodos().Take(pageIndex).Skip(pageSize);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nThis should also work for [FromRoute] attributes:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/todos/{pageIndex}/{pageSize}\u0022, ([FromRoute]int pageIndex, [FromQuery] int pageSize) =\u003E\r\n{\r\n    return db.GetTodos().Take(pageIndex).Skip(pageSize);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nThe [FromRoute] isn\u0027t necessary:\r\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/todos/{pageIndex}/{pageSize}\u0022, (int pageIndex, int pageSize) =\u003E\r\n{\r\n    return db.GetTodos().Take(pageIndex).Skip(pageSize);\r\n});\r\n",
    "upvotes": 2,
    "labels": [
      "analyzer",
      "Priority:0",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842LPJn",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-08-31T05:39:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35762#issuecomment-908915303"
      },
      {
        "id": "IC_kwDOAQzde848UCqk",
        "parentId": null,
        "author": "Jcparkyn",
        "content": "Is there a valid use for \u0060[FromRoute]\u0060 in minimal APIs that _wouldn\u0027t_ trigger this analyzer?",
        "createdAt": "2022-01-13T07:59:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35762#issuecomment-1011886756"
      },
      {
        "id": "IC_kwDOAQzde848VgZg",
        "parentId": null,
        "author": "davidfowl",
        "content": "There isn\u0027t no. I was gonna say maybe if you specified the Name property but that\u0027s a pretty contrived scenarios since route parameters are named by the user not the client (unlike the other scenarios). We also don\u0027t support binding from route unless its explicitly declared in the route pattern.",
        "createdAt": "2022-01-13T15:58:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35762#issuecomment-1012270688"
      },
      {
        "id": "IC_kwDOAQzde85MAXzJ",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:21:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35762#issuecomment-1275165897"
      },
      {
        "id": "IC_kwDOAQzde85O1v-L",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: We discussed having this as a refactoring that toggles between parameters with attribute and without attribute instead of a codefixer.",
        "createdAt": "2022-11-21T22:07:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35762#issuecomment-1322712971"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5ODAxNzI4ODk=",
    "title": "HttpClient from WebApplicationFactory returns \u0022415 Unsupported Media Type\u0022 on HttpMethod.PATCH ",
    "url": "https://github.com/dotnet/aspnetcore/issues/35770",
    "createdAt": "2021-08-26T12:10:52Z",
    "lastUpdated": "2023-09-10T18:49:42Z",
    "body": "When try to use HttpClient from WebApplicationFactory (Microsoft.AspNetCore.Mvc.Testing, Version=5.0.9.0) with xUnit, the PATCH http method always returns \u0022415 Unsupported Media Type\u0022 status code.\r\n\r\nFor example, here is the ASP.NET Core 5.0 Web Api Contoller:\r\n\u0060\u0060\u0060\r\npublic class HomeController : ControllerBase\r\n{\r\n    [HttpPatch(\u0022entities\u0022)]\r\n    public async Task EntitiesPartialUpdate(Entity[] entities)\r\n   {\r\n\tawait EntitiesPartialUpdate(entities);\r\n   }\r\n}\r\n\u0060\u0060\u0060\r\nAnd here is the xUnit test to call the above http method:\r\n\u0060\u0060\u0060\r\nprivate readonly HttpClient Client;\r\n\r\npublic MyTests(WebApplicationFactory\u003CStartup\u003E fixture)\r\n{\r\n    Client = fixture.CreateClient();\r\n}\r\n\r\nprivate async Task PatchAsync\u003CT\u003E(string url, T data)\r\n{\r\n    var dataJson = JsonSerializer.Serialize(data);\r\n    var requestBody = new StringContent(dataJson, Encoding.UTF8, \u0022application/json\u0022);\r\n    var request = new HttpRequestMessage(HttpMethod.Patch, url) { Content = requestBody };\r\n    request.Headers.Authorization = new AuthenticationHeaderValue(\u0022Bearer\u0022, this.ApiKey);\r\n    \r\n    var response = await Client.SendAsync(request);\r\n\r\n    if (response.StatusCode ==  HttpStatusCode.UnsupportedMediaType)\r\n    {\r\n        // always get here\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\nIf to call the Patch controller methods from regular http client like Swagger or Postman, this Patch methods work well and without any bug, however calling these Patch methods from HttpClient withing the xUnit tests fail in any configuration of requests. Client.SendAsync and Client.PatchAsync fail identically.\r\n\r\nCalling of the other http methods like Post, Get, Put within the xUnit test succeed as well.\r\n\r\n- ASP.NET Core version: 5.0\r\n- The IDE : Microsoft Visual Studio Community 2019, Version 16.11.1\r\n",
    "upvotes": 3,
    "labels": [
      "investigate",
      "area-mvc",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842OeRb",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-09-01T00:41:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35770#issuecomment-909763675"
      },
      {
        "id": "IC_kwDOAQzde846YUCR",
        "parentId": null,
        "author": "kristofke",
        "content": "I have the same behavior in my own code.\r\nAfter a deeper look, I might have seen a possible issue in the code of Microsoft.AspNetCore.Mvc.Testing.\r\n\r\nBecause we\u0027re using authorization, the \u0060HttpClient\u0060 is making a redirect.\r\n(By default, the \u0060AllowAutoRedirect\u0060 is set to \u0060true\u0060 on this client.)\r\n\r\nThis will eventually be handled by the [RedirectHandler](https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.Testing/src/Handlers/RedirectHandler.cs).\r\nInside this handler, it checks if the original request content had a body. If so, it\u0027ll duplicate the request content.\r\nHowever, as you can see [here](https://github.com/dotnet/aspnetcore/blob/881796727a43ca7ec41fccfd27ed116762d502bd/src/Mvc/Mvc.Testing/src/Handlers/RedirectHandler.cs#L69-L70), it\u0027ll only check for a body when the request method was either post or put.\r\n\r\nThis will lead to the content being \u0060null\u0060 when making a patch call (after the redirect).\r\nWhen the content/body of the request is \u0060null\u0060, it can\u0027t figure out what the media type should be and eventually results in a \u0060UnsupportedMediaType\u0060.\r\n\r\nCan someone confirm if this might actually be the problem?\r\nMaybe the \u0060HasBody\u0060 method in the \u0060RedirectHandler\u0060 is intentionally only allowing post and put methods?",
        "createdAt": "2021-11-25T20:15:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35770#issuecomment-979452049"
      },
      {
        "id": "IC_kwDOAQzde846ewYT",
        "parentId": null,
        "author": "kristofke",
        "content": "I\u0027ve been able to write some code. Hopefully my [changes](https://github.com/kristofke/aspnetcore/compare/main...kristofke:mvctesting-redirecthandler-patchcontent) will make things clearer.\r\n\r\nAt first, I\u0027ve written some tests for the post, put and patch method.\r\nMaking an HTTP request with some body, that performs a redirect, will work for the post and put methods.\r\nHowever, this won\u0027t work when the method is a patch.\r\n\r\nAfter making my change inside the \u0060HasBody\u0060 method of the \u0060RedirectHandler\u0060, the test performing a patch request succeeded.\r\nAll other tests inside Mvc still seem to work as well.\r\n\r\nI didn\u0027t want to make a PR yet, because I\u0027m not sure if the \u0060HasBody\u0060 method was designed specifically for post/put requests.\r\nCan someone confirm if my changes are allowed?\r\nMaybe @javiercn or @rafikiassumani-msft?\r\n\r\nThanks.",
        "createdAt": "2021-11-28T19:48:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35770#issuecomment-981141011"
      },
      {
        "id": "IC_kwDOAQzde85Ch0ZV",
        "parentId": null,
        "author": "geh24",
        "content": "While developing a .NET Core API-Project i came across the exact same problem.\r\nMany thankt to @kristofke who identified the origin of the problem using Patch-Requests\r\nfrom a HTTPClient created by a WebApplicationFactory.\r\n\r\nAt first i thought using his changes but than i found another, easier way to\r\nhandle this problem by avoiding the https-redirect.\r\n\r\n\u0060\u0060\u0060\r\nWebApplicationFactoryClientOptions opt = new WebApplicationFactoryClientOptions();\r\nopt.BaseAddress = new Uri(\u0022https://localhost\u0022);\r\n_client = _factory.CreateClient( opt);\r\n\u0060\u0060\u0060\r\n\r\nDirecting the BaseAddress to https, no Redirect occurs and the PatchAsync works fine with Json-Content and Authorization\r\n\r\nThanks\r\n",
        "createdAt": "2022-05-03T14:24:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35770#issuecomment-1116161621"
      },
      {
        "id": "IC_kwDOAQzde85DGb1k",
        "parentId": null,
        "author": "marcel-smits",
        "content": "Is there any update on this ? \r\nI am currently facing the same issue and using Https is not an option",
        "createdAt": "2022-05-13T07:52:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35770#issuecomment-1125760356"
      },
      {
        "id": "IC_kwDOAQzde85FswWI",
        "parentId": null,
        "author": "nicolaslepinayqc",
        "content": "Hi there,\r\n\r\nI get the same error using POST with plain text context:\r\n\u0060\r\n\r\n            // Arrange\r\n            var request = new StringContent(PARAMETRES, Encoding.UTF8, \u0022text/plain\u0022);\r\n            var response = await client.PostAsync(ENDPOINT, request);            \r\n            // Assert\r\n            response.StatusCode.Should().Be(HttpStatusCode.OK);\r\n\u0060",
        "createdAt": "2022-06-28T22:41:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35770#issuecomment-1169360264"
      },
      {
        "id": "IC_kwDOAQzde85kJqH5",
        "parentId": null,
        "author": "SteevenR",
        "content": "Hello, we are facing the same issue.\r\nDo you have any planned fix ?",
        "createdAt": "2023-08-16T09:16:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35770#issuecomment-1680253433"
      },
      {
        "id": "IC_kwDOAQzde85mGO6m",
        "parentId": null,
        "author": "patchua",
        "content": "Hi, I have very same problem but with DELETE request type with Body.\r\nCan we fix [HasBody ](https://github.com/dotnet/aspnetcore/blob/881796727a43ca7ec41fccfd27ed116762d502bd/src/Mvc/Mvc.Testing/src/Handlers/RedirectHandler.cs#L69-L70) to include Patch and Delete?",
        "createdAt": "2023-09-10T18:49:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35770#issuecomment-1712909990"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5ODA4MzU4MDk=",
    "title": "Fixer/Analyzer: Hoist explicit calls to HttpContext.RequestServices.GetService to route handler parameters",
    "url": "https://github.com/dotnet/aspnetcore/issues/35812",
    "createdAt": "2021-08-27T03:32:03Z",
    "lastUpdated": "2024-03-01T23:06:43Z",
    "body": "We should have a fixer that rewrites calls to GetRequiredService to injecting them directly into handler methods. Code should go from this:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/\u0022, (HttpContext context) =\u003E\r\n{\r\n    var service = context.RequestServices.GetRequiredService\u003CITodoService\u003E();\r\n    return service.GetTodos();\r\n});\r\n\u0060\u0060\u0060\r\n\r\nTo this:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/\u0022, (ITodoService service) =\u003E\r\n{\r\n    return service.GetTodos();\r\n});\r\n\u0060\u0060\u0060",
    "upvotes": 2,
    "labels": [
      "api-suggestion",
      "analyzer",
      "Priority:2",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842LPLH",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-08-31T05:39:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35812#issuecomment-908915399"
      },
      {
        "id": "IC_kwDOAQzde85MAX0P",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:21:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35812#issuecomment-1275165967"
      },
      {
        "id": "IC_kwDOAQzde85PP2aq",
        "parentId": null,
        "author": "halter73",
        "content": "## Background and Motivation\r\n\r\nMany developers are unaware that request services can be resolved as parameters from minimal route handlers. This includes route handlers that were previously just \u0060RequestDelegates\u0060. Using a parameter to resolve services is more declarative and saves some typing.\r\n\r\n## Proposed Analyzer\r\n\r\nWe should have a fixer that rewrites calls to GetRequiredService to injecting them directly into handler methods.\r\n\r\n### Analyzer Behavior and Message\r\n\r\nCode should go from this:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/\u0022, (HttpContext context) =\u003E\r\n{\r\n    var service = context.RequestServices.GetRequiredService\u003CITodoService\u003E();\r\n    return service.GetTodos();\r\n});\r\n\u0060\u0060\u0060\r\n\r\nTo this:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/\u0022, (ITodoService service) =\u003E\r\n{\r\n    return service.GetTodos();\r\n});\r\n\u0060\u0060\u0060\r\n\r\nOr to reduce the likelihood of changing behavior, we could use the \u0060[FromServices]\u0060 parameter.\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/\u0022, ([FromServices] ITodoService service) =\u003E\r\n{\r\n    return service.GetTodos();\r\n});\r\n\u0060\u0060\u0060\r\n\r\nThe message could be.\r\n\r\n\u003E Route handlers should use parameters instead of \u0060HttpContext.RequestServices\u0060 to resolve services.\r\n\r\n### Category\r\n\r\n- [ ] Design\r\n- [ ] Documentation\r\n- [ ] Globalization\r\n- [ ] Interoperability\r\n- [ ] Maintainability\r\n- [ ] Naming\r\n- [ ] Performance\r\n- [ ] Reliability\r\n- [ ] Security\r\n- [ ] Style\r\n- [x] Usage\r\n\r\n### Severity Level\r\n\r\n- [ ] Error\r\n- [ ] Warning\r\n- [x] Info\r\n- [ ] Hidden\r\n\r\n## Usage Scenarios\r\n\r\n\u0060\u0060\u0060C#\r\n// RequestDelegate?\r\napp.MapGet(\u0022/refresh\u0022, async (context) =\u003E\r\n{\r\n    var service = context.RequestServices.GetRequiredService\u003CITodoService\u003E();\r\n    await service.RefreshAsync();\r\n});\r\n\r\n// Optional services?\r\napp.MapGet(\u0022/\u0022, (HttpContext context) =\u003E\r\n{\r\n    var service = context.RequestServices.GetService\u003CITodoService\u003E();\r\n    return service?.GetTodos() ?? Array.Empty\u003CTodo\u003E();\r\n});\r\n\r\n// typeof(T)\r\napp.MapGet(\u0022/\u0022, (HttpContext context) =\u003E\r\n{\r\n    var service = context.RequestServices.GetRequiredService(typeof(ITodoService));\r\n    return service.GetTodos();\r\n});\r\n\r\n// Other MapXXX methods\r\napp.MapPost(\u0022/\u0022, (HttpContext context, TodoDto todo) =\u003E\r\n{\r\n    var service = context.RequestServices.GetRequiredService(typeof(ITodoService));\r\n    return service.GetTodos();\r\n});\r\napp.MapDelete(\u0022/{id}\u0022, (HttpContext context, int id) =\u003E\r\n// ...\r\n\u0060\u0060\u0060\r\n\r\n## Risks\r\n\r\nSome people might prefer plain-old \u0060RequestDelegate\u0060s and manually calling \u0060GetRequiredService\u0060. If we\u0027re not careful, false positives could occur if the service was only conditionally resolved or resolved from a non \u0060RequestServices\u0060 service provider.\r\n\r\nWhen the result of \u0060GetRequiredService\u0060 is not stored in a variable, it could be difficult to pick a good parameter name. Perhaps this could be based on the type.\r\n\r\nIf nullability annotations are not enabled for the project, it might not be possible to correctly annotate the \u0060GetService\u0060 parameter that is not required.",
        "createdAt": "2022-11-28T18:30:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35812#issuecomment-1329555114"
      },
      {
        "id": "IC_kwDOAQzde85PP2fU",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2022-11-28T18:30:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35812#issuecomment-1329555412"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5ODIxNTgwNjg=",
    "title": "Allow Custom JsonSerializerOptions for Minimal Actions",
    "url": "https://github.com/dotnet/aspnetcore/issues/35904",
    "createdAt": "2021-08-29T17:32:16Z",
    "lastUpdated": "2024-12-18T14:28:54Z",
    "body": "## Background and Motivation\r\nAdd ability to have custom \u0060JsonSerializerOptions\u0060 for serializing and deserializing in minimal actions.\r\n\r\n## Proposed API\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Builder\r\n{\r\n     public static class DelegateEndpointRouteBuilderExtensions\r\n     {\r\n\u002B        public static DelegateEndpointConventionBuilder Map(\r\n\u002B            this IEndpointRouteBuilder endpoints,\r\n\u002B            RoutePattern pattern,\r\n\u002B            Delegate handler,\r\n\u002B            JsonSerializerOptions options)\r\n    }\r\n}\r\n\r\nnamespace Microsoft.AspNetCore.Http\r\n{\r\n     public sealed class RequestDelegateFactoryOptions\r\n     {\r\n\u002B      public JsonSerializerOptions JsonSerializerOptions { get; init; }\r\n     }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\r\n## Usage Examples\r\n\r\n\u0060\u0060\u0060 C#\r\nvar jsonOptions = new JsonSerializerOptions\r\n{\r\n    PropertyNamingPolicy = JsonNamingPolicy.CamelCase,\r\n};\r\n\r\napp.Map(\u0022\\action\u0022, () =\u003E MyAction(), jsonOptions);\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\nThis could also be added via Endpoint metadata in order to prevent all extra overloads (MapGet, MapPost, ...), but the downside is that it would add an extra fetch from \u0060Endpoint.Metadata\u0060 for serializing and deserializing.\r\n\u0060\u0060\u0060diff\r\npublic static class DelegateEndpointRouteBuilderExtensions\r\n{\r\n\u002B   public static DelegateEndpointConventionBuilder WithJsonOptions(\r\n\u002B       this DelegateEndpointConventionBuilder builder,\r\n\u002B       JsonSerializerOptions options)\r\n}\r\n\u0060\u0060\u0060\r\n## Risks\r\n",
    "upvotes": 4,
    "labels": [
      "api-suggestion",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842HKVF",
        "parentId": null,
        "author": "davidfowl",
        "content": "No I don\u2019t think we should do this. The options are:\r\n- configure JsonOptions globally \r\n- Use Results.Json and pass the options that way \r\n- Call WriteAsJsonAsync and pass the options that way ",
        "createdAt": "2021-08-29T18:41:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35904#issuecomment-907846981"
      },
      {
        "id": "IC_kwDOAQzde842HMCM",
        "parentId": null,
        "author": "Kahbazi",
        "content": "\u003E - configure JsonOptions globally\r\n\r\nI thought there were no static global options for System.Text.Json.\r\n\r\n\u003E - Use Results.Json and pass the options that way\r\n\u003E - Call WriteAsJsonAsync and pass the options that way\r\n\r\nFair enough. The only thing left is for serializing from body which I guess \u0060BindAsync\u0060 could be used for that. Although the code would be simpler if JsonOption could be set via the proposed API.\r\n\r\n@davidfowl I have nothing more to add, the issue could be closed. :slightly_smiling_face:\r\n",
        "createdAt": "2021-08-29T19:16:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35904#issuecomment-907853964"
      },
      {
        "id": "IC_kwDOAQzde842HM2E",
        "parentId": null,
        "author": "davidfowl",
        "content": "We should add a first class API to configure the JsonOptions. This isn\u0027t global for all calls, it\u0027s for calls to ReadAsJsonAsync and WriteAsJsonAsync",
        "createdAt": "2021-08-29T19:37:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35904#issuecomment-907857284"
      },
      {
        "id": "IC_kwDOAQzde842IE4m",
        "parentId": null,
        "author": "Kahbazi",
        "content": "Ah I see what you\u0027re talking about.\r\nhttps://github.com/dotnet/aspnetcore/blob/8b30d862de6c9146f466061d51aa3f1414ee2337/src/Http/Http.Extensions/src/HttpRequestJsonExtensions.cs#L189-L193\r\n\r\nSo should I update the proposal to this one?\r\n\u0060\u0060\u0060csharp\r\npublic static class ServiceCollectionExtensions\r\n{\r\n    /// \u003Csummary\u003E\r\n    /// Configures JsonOptions for WriteAsJsonAsync and ReadFromJsonAsync.\r\n    /// \u003C/summary\u003E\r\n    public static IServiceCollection ConfigureJsonOptions(this IServiceCollection services, Action\u003CMicrosoft.AspNetCore.Http.Json.JsonOptions\u003E action)\r\n    {\r\n        return services.Configure(action);\r\n    }\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2021-08-30T07:03:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35904#issuecomment-908086822"
      },
      {
        "id": "IC_kwDOAQzde842Oda2",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-09-01T00:35:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35904#issuecomment-909760182"
      },
      {
        "id": "IC_kwDOAQzde847U69j",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-12-16T00:55:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35904#issuecomment-995340131"
      },
      {
        "id": "IC_kwDOAQzde847tmyB",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "@Kahbazi and @davidfowl  We also have a namespace issue that we may need to address if we were to provide a first-class API to globally configure JsonSerializerOptions. Notice that the following \u0060Microsoft.AspNetCore.Http.Json.JsonOptions\u0060 in your updated proposal is different from \u0060Microsoft.AspNetCore.Mvc.JsonOptions\u0060 . This causes confusion to users who want to configure \u0060JsonOptions\u0060 as the Http namespace one usually gets imported by the editor but may not achieve the intended user configuration objective.  \r\n\r\n@davidfowl Given the namespace issue, do we need to provide a first-class API to hide the code below and help avoid confusion?\r\n\r\n\u0060\u0060\u0060C#\r\n  builder.Services.Configure\u003CMicrosoft.AspNetCore.Mvc.JsonOptions\u003E(opts =\u003E\r\n  {\r\n     //opts.JsonSerializerOptions.PropertyNamingPolicy = null;\r\n     //More Configs if needed.\r\n  \r\n  });\r\n\u0060\u0060\u0060 ",
        "createdAt": "2021-12-28T00:31:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35904#issuecomment-1001811073"
      },
      {
        "id": "IC_kwDOAQzde85MAX1X",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:21:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35904#issuecomment-1275166039"
      },
      {
        "id": "IC_kwDOAQzde86GDZIO",
        "parentId": null,
        "author": "Finickyflame",
        "content": "If we can\u0027t use a specific JsonSerializerOptions per endpoint, how can we make sure the openAPI schema is generated correctly?\r\n\r\nEven now (didn\u0027t look at dotnet 9) we have to synchronize both Microsoft.AspNetCore.Http.Json.JsonOptions and Microsoft.AspNetCore.Mvc.JsonOptions to make sure the OpenAPI schema generated by [SwaggerGen](https://github.com/domaindrivendev/Swashbuckle.AspNetCore) is accurate.\r\n\r\nBeeing able to specify the JsonSerializerOptions on an endpoint or a group of endpoints could bring so much flexibility. If the answer is still Results.Json, could we then have the ability to provide the JsonSerializerOptions in the [Produces](https://source.dot.net/#Microsoft.AspNetCore.Routing/Builder/OpenApiRouteHandlerBuilderExtensions.cs,c470639d9c036b90,references) and [Acccepts](https://source.dot.net/#Microsoft.AspNetCore.Routing/Builder/OpenApiRouteHandlerBuilderExtensions.cs,ea561e333a11ef66,references)?",
        "createdAt": "2024-07-24T23:05:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35904#issuecomment-2249036302"
      },
      {
        "id": "IC_kwDOAQzde86YFEKM",
        "parentId": null,
        "author": "giammin",
        "content": "This could be really useful in certain scenarios.\n\nI came across this because I need to deserialize a client request using a custom JsonConverter, and I would prefer not to add it globally but rather use it only for that specific endpoint.",
        "createdAt": "2024-12-18T14:28:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35904#issuecomment-2551464588"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5ODIxNzY3NzQ=",
    "title": "Leverage \u0060EditorBrowsable\u0060 attribute to hide unnecessary methods",
    "url": "https://github.com/dotnet/aspnetcore/issues/35906",
    "createdAt": "2021-08-29T18:57:27Z",
    "lastUpdated": "2023-06-06T23:44:21Z",
    "body": "In RC1, we added the new \u0060IResultsExtensions\u0060 type to support developers extending the \u0060Results\u0060 static with custom Result types.\r\n\r\nWith the current implementation, abstract methods on the object like \u0060ToString\u0060 and \u0060Equals\u0060 will show up in Intellisense. We can use the \u0060EditorBrowsable\u0060 attribute to hide these in the editor and avoid distractions.\r\n\r\n\u0060polish\u0060",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842Od15",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-09-01T00:38:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35906#issuecomment-909761913"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5OTE1NjA5Nzg=",
    "title": "Replace \u0060Microsoft.AspNetCore.Analyzer.Testing\u0060 with \u0060Microsoft.CodeAnalysis.Testing\u0060",
    "url": "https://github.com/dotnet/aspnetcore/issues/36300",
    "createdAt": "2021-09-08T21:47:48Z",
    "lastUpdated": "2024-03-01T23:05:42Z",
    "body": "Currently, our analyzers/codefixes rely on a custom library to validate their behavior. Moving forward, we can use the official testing libraries provided in the \u0060M.CA.Testing\u0060 and move away from relying on our custom setup.\r\n\r\nAt minimum, new analyzers should use the M.CA.Testing library for validation. We can also invest some time in porting over the older tests and removing the custom project all together.",
    "upvotes": 1,
    "labels": [
      "task",
      "area-mvc",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842y9er",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-09-14T16:47:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36300#issuecomment-919328683"
      },
      {
        "id": "IC_kwDOAQzde844kfHv",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-10-22T00:02:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36300#issuecomment-949088751"
      },
      {
        "id": "IC_kwDOAQzde85MXNm0",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-17T16:40:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36300#issuecomment-1281153460"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5OTE2NDAzMzk=",
    "title": "API1001 False Positive on 202 response",
    "url": "https://github.com/dotnet/aspnetcore/issues/36315",
    "createdAt": "2021-09-09T00:38:05Z",
    "lastUpdated": "2023-06-20T21:11:44Z",
    "body": "### Describe the bug\r\nAPI1001 falsely triggers in certain cases involving lambdas\r\n\r\n### To Reproduce\r\nBasic controller action:\r\n\u0060\u0060\u0060cs\r\n\t\t[HttpPut]\r\n\t\t[ProducesResponseType(typeof(object), 202)]\r\n\t\tpublic Task\u003CIActionResult\u003E Create(CancellationToken cancellationToken)\r\n\t\t{\r\n\t\t\tvar lamb = async () =\u003E (IActionResult)Accepted(new object());\r\n\t\t\treturn lamb();\r\n\t\t}\r\n\u0060\u0060\u0060\r\n\r\nNote that changing the status code to 201 or 200 clears the warning.\r\n\r\n### Further technical details\r\n- ASP.NET Core version: 6 preview\r\n- Include the output of \u0060dotnet --info\u0060:\r\n\u0060\u0060\u0060\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.7.21379.14\r\n Commit:    22d70b47bc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19042\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.100-preview.7.21379.14\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.7.21377.19\r\n  Commit:  91ba01788d\r\n\r\n.NET SDKs installed:\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.526 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.617 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.118 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.104 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.206 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100-preview.7.21379.14 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.7.21378.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.7.21377.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0-preview.7.21378.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\u0060\u0060\u0060\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version: VS 17.0.0 Preview 3.1\r\n",
    "upvotes": 0,
    "labels": [
      "analyzer",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842ztqF",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-09-14T21:27:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36315#issuecomment-919526021"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5OTM4NzUwNTI=",
    "title": "Analyzer: Warn when passing a Task\u003CT\u003E or ValueTask\u003CT\u003E to Minimal API Results.* methods",
    "url": "https://github.com/dotnet/aspnetcore/issues/36408",
    "createdAt": "2021-09-11T16:11:40Z",
    "lastUpdated": "2024-03-01T23:05:43Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\n\r\nPlaying around with Minimal APIs, I wrote some code similar to the below without noticing I\u0027d forgotten to await the method:\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/do-thing\u0022, (IThingDoer thing) =\u003E Results.Json(thing.DoThingAsync()));\r\n\u0060\u0060\u0060\r\n\r\nCalling \u0060/do-thing\u0060 then returned some JSON similar to the below:\r\n\r\n\u0060\u0060\u0060json\r\n{\u0022result\u0022:{},\u0022id\u0022:1,\u0022exception\u0022:null,\u0022status\u0022:5,\u0022isCanceled\u0022:false,\u0022isCompleted\u0022:true,\u0022isCompletedSuccessfully\u0022:true,\u0022creationOptions\u0022:0,\u0022asyncState\u0022:null,\u0022isFaulted\u0022:false}\r\n\u0060\u0060\u0060\r\n\r\nEasily fixed by updating the method signature appropriately, but an easy enough mistake to make.\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/do-thing\u0022, async (IThingDoer thing) =\u003E Results.Json(await thing.DoThingAsync()));\r\n\u0060\u0060\u0060\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nAn analyzer that warns if a \u0022task-like\u0022 type (\u0060Task\u0060, \u0060Task\u003CT\u003E\u0060, \u0060ValueTask\u0060, \u0060ValueTask\u003CT\u003E\u0060) is passed to one of the static \u0060Results\u0060 methods (like \u0060Results.Json(object? data, ...)\u0060) for a parameter of type \u0060object?\u0060.\r\n",
    "upvotes": 1,
    "labels": [
      "analyzer",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842wULX",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "Triage: We will evaluate to commit to this work with other analyzers for .NET7 planning.",
        "createdAt": "2021-09-13T22:37:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36408#issuecomment-918635223"
      },
      {
        "id": "IC_kwDOAQzde85MAX3x",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:21:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36408#issuecomment-1275166193"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5OTM5MTg0ODc=",
    "title": "Add .ctor(string) to FromHeaderAttribute and FromQueryAttribute",
    "url": "https://github.com/dotnet/aspnetcore/issues/36418",
    "createdAt": "2021-09-11T19:12:22Z",
    "lastUpdated": "2023-06-06T23:44:22Z",
    "body": "## Background and Motivation\r\n\r\nWhen using Minimal APIs, using explicit query string or header parameter names using attributes requires a less-minimal amount of attribute declaration that would be possible if the relevant attributes did not only have a default constructor.\r\n\r\n## Proposed API\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Mvc\r\n{\r\n    public static class FromHeaderAttribute\r\n    {\r\n\u002B       public FromHeaderAttribute(string name)\r\n    }\r\n\r\n    public static class FromQueryAttribute\r\n    {\r\n\u002B       public FromQueryAttribute(string name)\r\n    }\r\n\r\n    public static class FromRouteAttribute\r\n    {\r\n\u002B       public FromRouteAttribute(string name)\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\n\u0060\u0060\u0060csharp\r\nusing Microsoft.AspNetCore.Mvc;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022/search\u0022, (\r\n    [FromQuery(\u0022q\u0022)] string? query,\r\n    [FromHeader(\u0022User-Agent\u0022)] string? userAgent) =\u003E\r\n{\r\n    return $@\u0022You searched for \u0022\u0022{query}\u0022\u0022 using \u0022\u0022{userAgent}\u0022\u0022.\u0022;\r\n});\r\n\r\napp.Run();\r\n\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\n\r\nNone, retain the existing usage patterns.\r\n\r\n\u0060\u0060\u0060csharp\r\nusing Microsoft.AspNetCore.Mvc;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022/search\u0022, (\r\n    [FromQuery(Name = \u0022q\u0022)] string? query,\r\n    [FromHeader(Name = \u0022User-Agent\u0022)] string? userAgent) =\u003E\r\n{\r\n    return $@\u0022You searched for \u0022\u0022{query}\u0022\u0022 using \u0022\u0022{userAgent}\u0022\u0022.\u0022;\r\n});\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\n## Risks\r\n\r\nNone that I\u0027m aware of.\r\n\r\nEDIT: Added \u0060FromRouteAttribute\u0060 too.",
    "upvotes": 0,
    "labels": [
      "triage-focus",
      "api-suggestion",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842wQy0",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "Triage: We will evaluate this for .NET7",
        "createdAt": "2021-09-13T22:17:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36418#issuecomment-918621364"
      },
      {
        "id": "IC_kwDOAQzde844oEgy",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/master/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2021-10-23T00:40:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36418#issuecomment-950028338"
      },
      {
        "id": "IC_kwDOAQzde844sXdD",
        "parentId": null,
        "author": "pranavkm",
        "content": "API review: \r\n@martincostello while we think this API proposal is valid, we want to wait and see given a) a solution exists using the property (b) we might want to do something to not use MVC attributes with route handlers. We\u0027ll put this in our backlog for now and bring this back up part way thru 7.0 once we have had a better sense for how these attributes get used.",
        "createdAt": "2021-10-25T17:41:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36418#issuecomment-951154499"
      },
      {
        "id": "IC_kwDOAQzde85E4_0a",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-06-14T23:06:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36418#issuecomment-1155792154"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde847iKUQ",
    "title": "Generating REST Clients for .NET Minimal / Web API APIs. ",
    "url": "https://github.com/dotnet/aspnetcore/issues/36636",
    "createdAt": "2021-09-17T01:03:01Z",
    "lastUpdated": "2024-03-01T23:05:43Z",
    "body": "\u003C!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003E\r\n\r\n### Is your feature request related to a problem? Please describe.\r\n\r\nInvestigate how retrofit or refit can be used for REST Client generations with dotnet-api tooling. \r\n\r\n### Describe the solution you\u0027d like\r\n\r\nRetrofit or refit are great libraries for generating REST clients for mostly android apps. They allow you to define an interface containing a set of endpoints that your application will be interacting with, and then you can generate the implementation code.  We would like to investigate the possibility of using retrofit/refit/or something new for generating REST Client implementations with dotnet-api tooling. \r\n\r\n### Additional context\r\n\r\n- [ ] https://github.com/reactiveui/refit\r\n- [ ] https://square.github.io/retrofit/\r\n",
    "upvotes": 6,
    "labels": [
      "investigate",
      "feature-openapi",
      "Priority:1",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde8426vxb",
        "parentId": null,
        "author": "davidfowl",
        "content": "@bradygaster is interested in this as well",
        "createdAt": "2021-09-17T01:03:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36636#issuecomment-921369691"
      },
      {
        "id": "IC_kwDOAQzde8426v1h",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "@davidfowl I just assigned it to him. We had a conversation on this. ",
        "createdAt": "2021-09-17T01:04:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36636#issuecomment-921369953"
      },
      {
        "id": "IC_kwDOAQzde85LQ5PG",
        "parentId": null,
        "author": "WhatzGames",
        "content": "Just putting down some thoughts that came to mind today.\r\n\r\nWould\u0027t it be possible to use a Source generator for this case?\r\n\r\nUsing Attributes in a way of something like this:\r\n\r\n\u0060\u0060\u0060csharp\r\n//Example partially taken from reactiveui/refit\r\npublic interface IGithubApi\r\n{\r\n    [Get(\u0022/users\u0022)]\r\n    [Response(ResponseType.Xml)] //Using XmlDeserializer on this endpoint\r\n    public IAsyncEnumerable\u003CUser\u003E GetUserAsync();\r\n    \r\n    [Get(\u0022/users\u0022)]\r\n    [Response(ResponseType.Json)] //Using JsonDeserializer\r\n    public IAsyncEnumerable\u003CUser\u003E GetUsersAsync(CancellationToken cancellationToken);\r\n\r\n    [Get(\u0022/users/{user}\u0022)]\r\n    public Task\u003CUser\u003E GetUserAsync(string user, CancellationToken cancellationToken);\r\n    \r\n    \r\n    [Get(\u0022/users/{user}\u0022)]\r\n    public Stream GetUserStreamAsync(string user, CancellationToken cancellationToken);\r\n}\r\n\r\n[Apiclient\u003CIGithubApi\u003E] //[ApiClient(typeof(IGithubClient))]\r\npublic partial class GithubApi\r\n{\r\n    \r\n}\r\n\u0060\u0060\u0060\r\n\r\nwhich would result in something like this:\r\n\r\n\u0060\u0060\u0060csharp\r\npublic partial class GithubApi : IGithubApi\r\n{\r\n    private readonly HttpClient _client;\r\n\r\n    public GithubApi(HttpClient client)\r\n    {\r\n        _client = client;\r\n    }\r\n\r\n    public async IAsyncEnumerable\u003CUser\u003E GetUsersAsync()\r\n    {\r\n        using var responseMessage = await _client.GetAsync(\u0022/users\u0022);\r\n        if (!responseMessage.IsSuccessStatusCode)\r\n        {\r\n            //something doing here?\r\n        }\r\n        await using var stream = await responseMessage.Content.ReadAsStreamAsync();\r\n        var reader = XmlReader.Create(stream);\r\n        var serializer = new XmlSerializer(typeof(User[]));\r\n        if (!serializer.CanDeserialize(reader))\r\n        {\r\n            throw new InvalidOperationException(\u0022Not Deserializable\u0022);\r\n        }\r\n\r\n        var entries =  (User[])serializer.Deserialize(reader);\r\n        if (entries == null) yield break;\r\n        \r\n        foreach (var entry in entries)\r\n        {\r\n            yield return entry;\r\n        }\r\n    }\r\n    \r\n    public async IAsyncEnumerable\u003CUser\u003E GetUsersAsync([EnumeratorCancellation]CancellationToken cancellationToken)\r\n    {\r\n        using var responseMessage = await _client.GetAsync(\u0022/users\u0022, cancellationToken);\r\n        if (!responseMessage.IsSuccessStatusCode)\r\n        {\r\n            //something doing here?\r\n        }\r\n        await using var stream = await responseMessage.Content.ReadAsStreamAsync(cancellationToken);\r\n        var entries = JsonSerializer.DeserializeAsyncEnumerable\u003CUser\u003E(stream, JsonSerializerOptions.Default, cancellationToken);\r\n        await foreach (var entry in entries.WithCancellation(cancellationToken))\r\n        {\r\n            yield return entry;\r\n        }\r\n    }\r\n\r\n    public Task\u003CUser\u003E GetUserAsync(string user, CancellationToken cancellationToken)\r\n    {\r\n        \r\n    }\r\n    \r\n    \r\n    public async Task\u003CStream\u003E GetUserStreamAsync(string user, CancellationToken cancellationToken)\r\n    {\r\n        using var responseMessage = await _client.GetAsync($\u0022/users/{user}\u0022, cancellationToken);\r\n        if (!responseMessage.IsSuccessStatusCode)\r\n        {\r\n            //something doing here?\r\n        }\r\n        return await responseMessage.Content.ReadAsStreamAsync(cancellationToken);\r\n    }\r\n\r\n    public async Task\u003Cstring\u003E GetUserStringAsync(string user, CancellationToken cancellationToken)\r\n    {\r\n        using var responseMessage = await _client.GetAsync($\u0022/users/{user}\u0022, cancellationToken);\r\n        if (!responseMessage.IsSuccessStatusCode)\r\n        {\r\n            //something doing here?\r\n        }\r\n        return stream = await responseMessage.Content.ReadAsStringAsync(cancellationToken);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nIt\u0027s just something to show what I had in mind and maybe it\u0027s something worth thinking about?\r\n\r\nI was also thinking of a way to proccess different StatusCodes, and thought of the TypedResults.NotFound, Ok etc....\r\nWhen using Results\u003C\u003E With the corresponding Typed parameters as returnparameter, then based on that the StatusCode could be filtered out when processing the responsemessage and returned, but I haven\u0027t thought of it any further.",
        "createdAt": "2022-09-29T19:27:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36636#issuecomment-1262719942"
      },
      {
        "id": "IC_kwDOAQzde85LSFtP",
        "parentId": null,
        "author": "davidfowl",
        "content": "See https://github.com/reactiveui/refit ",
        "createdAt": "2022-09-30T02:33:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36636#issuecomment-1263033167"
      },
      {
        "id": "IC_kwDOAQzde85L55sU",
        "parentId": null,
        "author": "bradygaster",
        "content": "I love the idea of a source generator that outputs Refit clients. I spoke with @clairernovotny about this a few times. My goal would be to have a Refit provider for the REST API client generation feature in VS Connected Services. So, cc @vijayrkn, with whom I\u0027ve discussed this idea a few times and seemed receptive to it. ",
        "createdAt": "2022-10-10T15:16:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36636#issuecomment-1273469716"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde8475E3z",
    "title": "Type mismatches between parameter and route constraints not caught",
    "url": "https://github.com/dotnet/aspnetcore/issues/36859",
    "createdAt": "2021-09-22T22:09:00Z",
    "lastUpdated": "2024-03-01T23:04:41Z",
    "body": "In .NET 6, we added support for an analyzer that would detect the incompat between optionality annotations on the route constraint and parameter optionality in a minimal endpoint. See https://github.com/dotnet/aspnetcore/issues/34553 for more info.\r\n\r\nWe don\u0027t currently do anything about mismatches in the type constraints between a route and parameter, so having an endpoint like:\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/workouts/{id:int}\u0022, async (string id, IWorkoutsService workouts) =\u003E {\r\n    return await workouts.GetItemAsync(id);\r\n})\r\n\u0060\u0060\u0060\r\n\r\nWill compile and build fine but sending the following request:\r\n\r\n\u0060\u0060\u0060bash\r\n$ http http://localhost:5000/workouts/thisisastring\r\n\u0060\u0060\u0060\r\n\r\nWill result in a 404 during the route matching phase without any warning to the user.",
    "upvotes": 0,
    "labels": [
      "feature-routing",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85MAX8s",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:22:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36859#issuecomment-1275166508"
      },
      {
        "id": "IC_kwDOAQzde85ME7cc",
        "parentId": null,
        "author": "captainsafia",
        "content": "@JamesNK Is this something the new routing tooling addresses?",
        "createdAt": "2022-10-12T15:24:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36859#issuecomment-1276360476"
      },
      {
        "id": "IC_kwDOAQzde85MFHV4",
        "parentId": null,
        "author": "JamesNK",
        "content": "It doesn\u0027t right now. But the route tooling infrastructure should make this analyzer quick to write:\r\n\r\n1. Query analyzers from route parser.\r\n2. Get a list of all parameters from usage context.\r\n3. Compare and report warnings as needed.",
        "createdAt": "2022-10-12T16:00:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36859#issuecomment-1276409208"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde848MAUs",
    "title": "ConsumesAttribute on operation (with AllowAnonymousAttribute) returns 401 instead of 415 (due to default/fallback authorization policy)",
    "url": "https://github.com/dotnet/aspnetcore/issues/37064",
    "createdAt": "2021-09-28T13:48:30Z",
    "lastUpdated": "2024-03-01T23:04:42Z",
    "body": "\u003C!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003E\r\n\r\n### Describe the bug\r\nWhen applying the ConsumesAttribute on an operation, the documentation specifies that when the provided content-type does not match the list of content-types, a 415 will be returned. (https://docs.microsoft.com/en-us/aspnet/core/web-api/?view=aspnetcore-3.1#define-supported-request-content-types-with-the-consumes-attribute)\r\n\r\nHowever, when specifying an authorization policy as both the default and the fallback, a 401 is returned instead, even though the operation of the controller is marked with [AllowAnonymous].\r\n\r\nThe following shows a log statement of a failed request:\r\n\r\n[Information] Request starting HTTP/1.1 POST http://localhost/documents x-invalid-content-type/plain; charset=utf-8 \r\n[Debug] Wildcard detected, all requests with hosts will be allowed.\r\n[Verbose] All hosts are allowed.\r\n[Debug] 1 candidate(s) found for the request path \u0027\u0022/documents\u0022\u0027\r\n[Debug] Request matched endpoint \u0027\u0022415 HTTP Unsupported Media Type\u0022\u0027\r\n[Debug] Static files was skipped as the request already matched an endpoint.\r\n[Debug] Static files was skipped as the request already matched an endpoint.\r\n[Debug] AuthenticationScheme: \u0022Bearer\u0022 was not authenticated.\r\n[Information] Authorization failed.\r\n[Information] AuthenticationScheme: \u0022Bearer\u0022 was challenged.\r\n[Error] HTTP \u0022POST\u0022 \u0022/documents\u0022 responded 401 in 157.5365 ms\r\n[Information] Request finished in 178.3029ms 401 \r\n\r\nI\u0027m assuming that this is due to the fact that the authorization filter is triggered on the \u0022\u0027415 HTTP Unsupported Media Type\u0027\u0022 endpoint (due to the default and fallback authorization policy) even though the attribute (ConsumesAttribute) triggering it, is specified on an operation to which anonymous access is allowed.\r\n\r\n### To Reproduce\r\n\u003C!--\r\nWe \u2764 code! Point us to a minimalistic repro project hosted in a GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003E\r\n\r\nA repository that contains this code, as well as integration tests (using the WebApplicationFactory), can be found here: https://github.com/Meertman/ConsumesIssue\r\n\r\n### Exceptions (if any)\r\n\u003C!-- \r\nInclude the exception you get when facing this issue\r\n--\u003E\r\n\r\nNo exception, rather a response with status code 401 instead of 415.\r\n\r\n### Further technical details\r\n- ASP.NET Core version: 3.1.19\r\n- Include the output of \u0060dotnet --info\u0060\r\n\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.401\r\n Commit:    4bef5f3dbf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19043\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.401\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.10\r\n  Commit:  e1825b4928\r\n\r\n.NET SDKs installed:\r\n  3.1.413 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.104 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.207 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.303 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version: Visual Studio 2019, version 16.11.3\r\n",
    "upvotes": 2,
    "labels": [
      "bug",
      "area-mvc",
      "feature-routing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde843hpJd",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Nice find, we might be creating a \u0022415 HTTP Unsupported Media Type\u0022 endpoint internally and not copying the attributes from your method so the middleware runs auth as that\u0027s the default.",
        "createdAt": "2021-09-30T18:33:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37064#issuecomment-931566173"
      },
      {
        "id": "IC_kwDOAQzde843kp04",
        "parentId": null,
        "author": "davidfowl",
        "content": "We definitely don\u0027t copy the metadata to it. Feels like something that should be back ported once fixed to all versions. This came up on another thread BTW",
        "createdAt": "2021-10-01T16:01:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37064#issuecomment-932355384"
      },
      {
        "id": "IC_kwDOAQzde85MAX_o",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:22:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37064#issuecomment-1275166696"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde848PdAK",
    "title": "Set Endpoint names automatically for minimal",
    "url": "https://github.com/dotnet/aspnetcore/issues/37089",
    "createdAt": "2021-09-29T08:57:29Z",
    "lastUpdated": "2024-03-01T23:04:42Z",
    "body": "### Describe the bug\r\n\r\nThe usage of \u0060LinkGenerator.GetPathByName\u0060 will throw exception if there are route handlers from method of the same name but from different scope. \r\n\r\nIf you don\u0027t use \u0060LinkGenerator.GetPathByName\u0060 on \u0060GreetingPage\u0060 inferred route name, it works fine.\r\n\r\n### To Reproduce\r\n\r\n\u0060\u0060\u0060 csharp\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.AspNetCore.Routing;\r\n\r\nstatic IResult Index(LinkGenerator linker) =\u003E \r\n    Results.Text(@$\u0022\u003Chtml\u003E\u003Cbody\u003E\r\n    \u003Cul\u003E\r\n        \u003Cli\u003E\u003Ca href=\u0022\u0022{linker.GetPathByName(\u0022AboutPage\u0022, values: null)}\u0022\u0022\u003EAbout\u003C/a\u003E\u003C/li\u003E\r\n        \u003Cli\u003E\u003Ca href=\u0022\u0022{linker.GetPathByName(\u0022AboutPage\u0022, values: new { name = \u0022anne\u0022})}\u0022\u0022\u003EAbout Anne\u003C/a\u003E\u003C/li\u003E\r\n        \u003Cli\u003E\u003Ca href=\u0022\u0022{linker.GetPathByName(\u0022AboutPage\u0022, values: new { name = \u0022babka\u0022})}\u0022\u0022\u003EAbout Babka\u003C/a\u003E\u003C/li\u003E\r\n        \u003Cli\u003E\u003Ca href=\u0022\u0022{linker.GetPathByName(\u0022GreetingPage\u0022, values: new { name = \u0022babka\u0022})}\u0022\u0022\u003EGreet Babka\u003C/a\u003E\u003C/li\u003E\r\n    \u003C/ul\u003E\r\n    \u003C/body\u003E\u003C/html\u003E\u0022 , \u0022text/html\u0022);\r\n\r\nstatic IResult AboutPage(string? name) =\u003E Results.Text(@$\u0022\u003Chtml\u003E\u003Cbody\u003E\u003Ch1\u003EAbout {name}\u003C/h1\u003E\u003C/body\u003E\u003C/html\u003E\u0022  , \u0022text/html\u0022);\r\nstatic IResult GreetingPage(string? name) =\u003E Results.Text(@$\u0022\u003Chtml\u003E\u003Cbody\u003E\u003Ch1\u003EHi {name}\u003C/h1\u003E\u003C/body\u003E\u003C/html\u003E\u0022  , \u0022text/html\u0022);\r\n\r\nvar app = WebApplication.Create();\r\n\r\napp.Map(\u0022/\u0022, Index);\r\napp.Map(\u0022/about\u0022, AboutPage);\r\napp.Map(\u0022/greet\u0022, GreetingPage);\r\napp.Map(\u0022/greet2\u0022, Pages.GreetingPage);\r\napp.Run();\r\n\r\n   \r\npublic static class Pages \r\n{\r\n    public static IResult GreetingPage(string? name) =\u003E Results.Text(@$\u0022\u003Chtml\u003E\u003Cbody\u003E\u003Ch1\u003EHi {name}\u003C/h1\u003E\u003C/body\u003E\u003C/html\u003E\u0022  , \u0022text/html\u0022);\r\n}\r\n\u0060\u0060\u0060\r\n\r\nFull code is here https://github.com/dodyg/practical-aspnetcore/tree/net5.0/projects/net6/link-generator-path-by-route-name-inferred-duplicated\r\n\r\n### Exceptions (if any)\r\n\r\n\u0060\u0060\u0060\r\n System.InvalidOperationException: The following endpoints with a duplicate endpoint name were found.\r\n\r\n      Endpoints with endpoint name \u0027GreetingPage\u0027:\r\n      /greet =\u003E GreetingPage\r\n      /greet2 =\u003E GreetingPage\r\n\u0060\u0060\u0060\r\n### Further technical details\r\n\r\n\u0060\u0060\u0060\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-rc.1.21463.6\r\n Commit:    e627d556a1\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19043\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.100-rc.1.21463.6\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-rc.1.21451.13\r\n  Commit:  d7619cd4b1\r\n\r\n.NET SDKs installed:\r\n  3.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.413 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.401 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100-rc.1.21458.32 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100-rc.1.21463.6 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-rc.1.21452.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-rc.1.21451.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0-rc.1.21451.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\u0060\u0060\u0060",
    "upvotes": 1,
    "labels": [
      "feature-routing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde843hnUs",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "We reverted the behavior in RC2, #36518 so the name is no longer inferred.\r\n\r\nTriage: We want to fix this in .NET 7 (add back inferred names), using this issue to track that.",
        "createdAt": "2021-09-30T18:22:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37089#issuecomment-931558700"
      },
      {
        "id": "IC_kwDOAQzde85MAYCB",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:22:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37089#issuecomment-1275166849"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde848Xn8p",
    "title": "Improve testing setup for minimal apps in repo",
    "url": "https://github.com/dotnet/aspnetcore/issues/37169",
    "createdAt": "2021-10-01T02:58:42Z",
    "lastUpdated": "2024-03-01T23:04:43Z",
    "body": "We currently have a comprehensive set of tests for certain areas of the minimal API project like the \u0060RequestDelegateFactory\u0060 and the \u0060WebApplicationBuilder\u0060. However, these tests aren\u0027t comprehensive for picking up bugs. We can supplement this by adding:\r\n\r\n- E2E and integration tests for minimal apps\r\n- Include test assets that leverage top-level programs and the application builder\r\n- Update some of the samples/test assets in the project to use TLP so that area has more coverage",
    "upvotes": 2,
    "labels": [
      "task",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde843i0LG",
        "parentId": null,
        "author": "davidfowl",
        "content": "We have some of these in the WebApplicationFactory tests.",
        "createdAt": "2021-10-01T03:51:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37169#issuecomment-931873478"
      },
      {
        "id": "IC_kwDOAQzde843jl04",
        "parentId": null,
        "author": "martincostello",
        "content": "Happy to help out with this if you need any.\r\n\r\nFor example, it would be good to have some E2E coverage for doing things like customising the OpenAPI output with attributes from Swashbuckle.AspNetCore.Annotations, as porting some existing apps flushed out some cases here and in Swashbuckle that were making MVC-centric assumptions that meant extensions didn\u0027t end up in the JSON schema.",
        "createdAt": "2021-10-01T09:37:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37169#issuecomment-932076856"
      },
      {
        "id": "IC_kwDOAQzde843k6Uo",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E For example, it would be good to have some E2E coverage for doing things like customising the OpenAPI output with attributes from Swashbuckle.AspNetCore.Annotations, as porting some existing apps flushed out some cases here and in Swashbuckle that were making MVC-centric assumptions that meant extensions didn\u0027t end up in the JSON schema.\r\n\r\nGreat recommendation! And yep, we definitely don\u0027t have comprehensive E2E tests for minimal \u002B OpenAPI like we do for MVC \u002B OpenAPI. Having something like [ApiExplorerTest](https://github.com/dotnet/aspnetcore/blob/63f2fa056f2d55dbafadaa80880288d966647578/src/Mvc/test/Mvc.FunctionalTests/ApiExplorerTest.cs) for minimal would be a great.",
        "createdAt": "2021-10-01T17:28:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37169#issuecomment-932422952"
      },
      {
        "id": "IC_kwDOAQzde85MAW5k",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:18:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37169#issuecomment-1275162212"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde8480N-F",
    "title": "ASP.NET Core Web API complex type binding from query does not work if parameter name equals property name",
    "url": "https://github.com/dotnet/aspnetcore/issues/37360",
    "createdAt": "2021-10-07T18:09:23Z",
    "lastUpdated": "2024-03-01T23:04:44Z",
    "body": "I have a ASP.NET core Web API project (fresh ASP.NET Core Web API template from Visual Studio 2019, no customizations), with a controller action like this:\r\n\u0060\u0060\u0060csharp\r\n[HttpGet(\u0022search\u0022)]\r\npublic IEnumerable\u003Cstring\u003E Search([FromQuery] SearchDto dto)\r\n{\r\n  // implementation\r\n}\r\n\u0060\u0060\u0060\r\nthe action parameter \u0060dto\u0060 is a complex type bound **from query** and it looks like this:\r\n\u0060\u0060\u0060csharp\r\npublic class SearchDto\r\n{\r\n  public string Term { get; set; }\r\n  public bool CaseInsensitive { get; set; }\r\n}\r\n\u0060\u0060\u0060\r\nIf I call the API using URL \u0060\u003Chost\u003E/\u003Ccontroller\u003E/search?term=abc\u0026caseInsensitive=true\u0060 it all works as expected - \u0060Term\u0060 property contains \u0060\u0022abc\u0022\u0060 and \u0060CaseInsensitive\u0060 is \u0060true\u0060.\r\n\r\nThis makes sense, as according to https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding?view=aspnetcore-5.0#prefix--parameter-name, the binding first tries to find values prefixed with parameter name (aka. it searches for keys \u0060\u0022dto.Term\u0022\u0060 and \u0060\u0022dto.CaseInsensitive\u0022\u0060 in URL query string) and if that fails it tries the properties without prefix (aka. it searches for \u0060\u0022Term\u0022\u0060 and \u0060\u0022CaseInsensitive\u0022\u0060 keys in URL query string) which succeeds and corresponding values are bound.\r\n\r\nHowever if I change the controller action slightly by changing the \u0060dto\u0060 parameter name to \u0060term\u0060 to match the \u0060Term\u0060 property in DTO class:\r\n\u0060\u0060\u0060csharp\r\n[HttpGet(\u0022search\u0022)]\r\npublic IEnumerable\u003Cstring\u003E Search([FromQuery] SearchDto term) // changed from \u0027dto\u0027 to \u0027term\u0027\r\n{\r\n  // implementation\r\n}\r\n\u0060\u0060\u0060\r\nthen the binding stops working. Calling the API using the same URL as previously results in controller action being invoked, but the DTO properties are not filled with values from URL, instead they have default values (aka. \u0060Term\u0060 property is \u0060null\u0060 and \u0060CaseInsensitive\u0060 is \u0060false\u0060).\r\n\r\nWhy is that? The binding should evaluate the same way as previously - keys \u0060\u0022term.Term\u0022\u0060 and \u0060\u0022term.CaseInsensitive\u0022\u0060 are not found in URL query string, so unprefixed names should be tried and matched as before, thus I expected the binding to work. It seems very weird that such innocent change completely breaks the binding. We encountered this behavior today and it was not easy to figure out why out of nowhere the binding does not work anymore...\r\n\r\n### Further technical details\r\n- ASP.NET Core version: 5.0\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version: Microsoft Visual Studio Professional 2019 Version 16.11.4\r\n\u003Cdetails\u003E\r\n  \u003Csummary\u003Edotnet --info Output\u003C/summary\u003E\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.401\r\n Commit:    4bef5f3dbf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.401\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.10\r\n  Commit:  e1825b4928\r\n\r\n.NET SDKs installed:\r\n  5.0.301 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\u003C/details\u003E\r\n",
    "upvotes": 2,
    "labels": [
      "feature-model-binding",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde8437BFq",
        "parentId": null,
        "author": "pranavkm",
        "content": "@captainsafia I wouldn\u0027t classify this as a bug. We document this behavior (maybe the docs could do with some helping) - https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding?view=aspnetcore-5.0#prefix--parameter-name and have an analyzer that tries and complains about it for non-api controllers - https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.Analyzers/src/TopLevelParameterNameAnalyzer.cs. \r\n",
        "createdAt": "2021-10-07T23:10:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37360#issuecomment-938217834"
      },
      {
        "id": "IC_kwDOAQzde8437YBr",
        "parentId": null,
        "author": "captainsafia",
        "content": "@pranavkm Thanks for clarifying! We annotated this as a bug during triage because it seemed like buggy behavior.\r\n\r\nSo, it is intentional that if your parameter name is the same as one of the property names, the lookup will fail? What\u0027s responsible for this behavior?",
        "createdAt": "2021-10-08T03:35:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37360#issuecomment-938311787"
      },
      {
        "id": "IC_kwDOAQzde844DuxD",
        "parentId": null,
        "author": "pranavkm",
        "content": "\u003E So, it is intentional that if your parameter name is the same as one of the property names, the lookup will fail? What\u0027s responsible for this behavior?\r\n\r\nFor a model \u0060record Person(string Name, int Age)\u0060, Mvc supports binding both \u0060person.Name\u0060 / \u0060person.Age\u0060 or \u0060Name\u0060 / \u0060Age\u0060. However it only falls back to the prefix-less lookups if it cannot find any values that begin with the \u0060person\u0060 prefix. Note that \u0060person\u0060 is also a valid value for this thing since you could have a type converter that converts \u0060person=Test|10\u0060 and produces a \u0060Person\u0060 instance out of it. \r\n\r\nThe decision tree looks like so:\r\n\r\n* Are there any values that start with the \u0060person\u0060 prefix? If so, assume all values have a \u0060person.\u0060 prefix\r\n* Else, assume values have the empty prefix\r\n\r\nThe special case is if you have a parameter and a property with the same name: \u0060public IActionResult Post(Person name)\u0060 with \u0060?Name=SomeName\u0026Age=10\u0060. In this case, binding decides to use the prefix and starts looking for \u0060name.Name\u0060 and \u0060name.Age\u0060. \r\n\r\nUsually changing model binding\u0027s behavior is tricky because user apps, custom model binders, or value providers may have built solutions around the current behavior and we have very limited ways to know outside of users telling us when we break them.",
        "createdAt": "2021-10-11T22:56:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37360#issuecomment-940502083"
      },
      {
        "id": "IC_kwDOAQzde844Ei-P",
        "parentId": null,
        "author": "yohny",
        "content": "I agree that this can be tricky to change, so if not possible than at least it should be documented better. The current documentation does not describe the behavior as you put it in your comment and does not mention any potential issues/rules for parameter name.\r\nAlso the mentioned analyzer could be part of default ASP.NET Core Web API projects.",
        "createdAt": "2021-10-12T06:49:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37360#issuecomment-940715919"
      },
      {
        "id": "IC_kwDOAQzde844GRXZ",
        "parentId": null,
        "author": "pranavkm",
        "content": "The analyzer is on by default, but it skips \u0060ApiController\u0060 instances https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.Analyzers/src/TopLevelParameterNameAnalyzer.cs#L57-L62. We could update the code here and have it apply to complex parameters with \u0060FromQuery\u0060 / \u0060FromForm\u0060 / \u0060FromRoute\u0060 etc attributes.",
        "createdAt": "2021-10-12T16:21:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37360#issuecomment-941168089"
      },
      {
        "id": "IC_kwDOAQzde85MAW7Y",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:18:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37360#issuecomment-1275162328"
      },
      {
        "id": "IC_kwDOAQzde85M4TXn",
        "parentId": null,
        "author": "captainsafia",
        "content": "Removing the doc label since the behavior is documented [here](https://learn.microsoft.com/en-us/aspnet/core/mvc/models/model-binding?view=aspnetcore-5.0#complex-types-2).\r\n\r\nAdding the analyzer label since we want to apply the analyzer updates that were mentioned above.",
        "createdAt": "2022-10-25T00:44:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37360#issuecomment-1289827815"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde84854Nc",
    "title": "GetEndpointAttribute\u003CT\u003E in EndpointHttpContextExtensions.cs",
    "url": "https://github.com/dotnet/aspnetcore/issues/37425",
    "createdAt": "2021-10-09T21:05:11Z",
    "lastUpdated": "2024-03-01T23:02:35Z",
    "body": "\u003C!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003E\r\n\r\n### Is your feature request related to a problem?\r\nNot a problem, just a nice-to-have.  It\u0027d be convenient to be able to fetch route attributes directly from \u0060HttpContext\u0060.  I\u0027ve found it comes up pretty often when working with custom middleware, it\u0027s not a long path to get to the metadata from the context itself as it is now, but as there\u0027s already extensions to fetch the endpoint itself from \u0060HttpContext\u0060, it may also be useful to include something like this and maybe another extension to fetch a collection of route attributes.\r\n\r\n### Describe the solution you\u0027d like\r\nPerhaps something like \u0060GetEndpointAttribute\u003CT\u003E\u0060 and \u0060GetEndpointAttributes\u003CT\u003E\u0060 in \u0060EndpointHttpContextExtensions.cs\u0060 alongside the other endpoint-related extensions.\r\n\r\n### Additional context\r\nThis is the basic idea (minus handling nulls, etc - that\u0027d be handled the same way it is right now in \u0060GetEndpoint\u003CT\u003E\u0060)\r\n\r\n\u0060\u0060\u0060csharp\r\npublic static T GetEndpointAttribute\u003CT\u003E(this HttpContext httpContext) where T : Attribute\r\n{\r\n  var attribute = httpContext\r\n    .Features\r\n    .Get\u003CIEndpointFeature\u003E()\r\n    .Endpoint\r\n    .Metadata.GetMetadata\u003CT\u003E();\r\n  \r\n  return attribute;\r\n}\r\n\u0060\u0060\u0060\r\n",
    "upvotes": 3,
    "labels": [
      "api-needs-work",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde844juE3",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/master/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2021-10-21T18:22:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37425#issuecomment-948887863"
      },
      {
        "id": "IC_kwDOAQzde844juGf",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: this seems like a fair API suggestion. Marking it for review.",
        "createdAt": "2021-10-21T18:22:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37425#issuecomment-948887967"
      },
      {
        "id": "IC_kwDOAQzde844o8kM",
        "parentId": null,
        "author": "JamesNK",
        "content": "* What happens if there is no endpoint? Throw an error or return default(T)?\r\n* The name should be \u0060GetEndpointMetadata\u0060.\r\n* What about getting multiple metadata for a type, e.g. calling into https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.endpointmetadatacollection.getorderedmetadata?view=aspnetcore-6.0#Microsoft_AspNetCore_Http_EndpointMetadataCollection_GetOrderedMetadata__1. \u0060GetEndpointOrderedMetadata\u0060?\r\n* Concern that this will fill up intellisense for \u0060HttpContext\u0060?",
        "createdAt": "2021-10-24T04:24:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37425#issuecomment-950257932"
      },
      {
        "id": "IC_kwDOAQzde844sZiD",
        "parentId": null,
        "author": "pranavkm",
        "content": "API review:\r\n\r\n\uD83D\uDC4D\uD83C\uDFFD all the points @JamesNK raises. It\u0027s a bit difficult to reason about what to do when \u0060GetEndpoint()\u0060 returns null. A alternative we might consider is to bump the \u0060GetMetadata\u0060 and \u0060GetOrderedMetadata\u0060 to hang off of \u0060Endpoint\u0060:\r\n\r\n\u0060\u0060\u0060diff\r\n\u002B public static class EndpointExtensions\r\n\u002B {\r\n\u002B    public T? GetMetadata\u003CT\u003E(this Endpoint endpoint) where T : class\r\n\u002B    public IReadOnlyList\u003CT\u003E GetOrderedMetadata\u003CT\u003E(this Endpoint endpoint) where T : class\r\n\u002B }\r\n\u0060\u0060\u0060",
        "createdAt": "2021-10-25T17:52:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37425#issuecomment-951163011"
      },
      {
        "id": "IC_kwDOAQzde844tkRM",
        "parentId": null,
        "author": "danleonard-nj",
        "content": "Thanks for the great feedback :) \r\n\r\nI originally figured a null return would probably be appropriate since that\u0027s the behaivor now when you fetch \u0060Endpoint\u0060 from \u0060HttpContext\u0060.  \r\n\r\n\u0060\u0060\u0060csharp\r\npublic static Endpoint? GetEndpoint(this HttpContext context)\r\n{\r\n    if (context == null)\r\n    {\r\n        throw new ArgumentNullException(nameof(context));\r\n    }\r\n\r\n    return context.Features.Get\u003CIEndpointFeature\u003E()?.Endpoint;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nGood question on the multiple metadata, hadn\u0027t fully considered.   Does it muddy things up to return \u0060\u0060\u0060IOrderedEnumerable\u003CT\u003E\u0060\u0060\u0060?  That partially addresses the returns - trying to fetch attributes that don\u0027t exist on the endpoint would just hand back an empty collection.\r\n\r\nIf the endpoint doesn\u0027t exist at all, I\u0027d think it make sense to follow \u0060\u0060\u0060GetEndpoint\u0060\u0060\u0060 and return a null.\r\n\r\nAlso considering \u0060\u0060GetEndpoint\u0060\u0060, it does most of the job, in case adding anything further downstream seems like more trouble than the payoff, that one is definitely handy.\r\n",
        "createdAt": "2021-10-26T01:19:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37425#issuecomment-951469132"
      },
      {
        "id": "IC_kwDOAQzde85MAW90",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:18:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37425#issuecomment-1275162484"
      },
      {
        "id": "IC_kwDOAQzde85MK3oG",
        "parentId": null,
        "author": "captainsafia",
        "content": "@halter73 Thoughts on closing this out? We were pretty lukewarm about this feature when we last discussed it and I don\u0027t think the scenario is super motivating given the existing shorthands that are available.",
        "createdAt": "2022-10-13T17:01:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37425#issuecomment-1277917702"
      },
      {
        "id": "IC_kwDOAQzde85MLyRX",
        "parentId": null,
        "author": "halter73",
        "content": "The Endpoint extension [idea](https://github.com/dotnet/aspnetcore/issues/37425#issuecomment-951163011) is tempting. \u0060context.GetEndpoint()?.Metadata.GetMetadata\u003CFoo\u003E()\u0060 is pretty ugly. \u0060context.GetEndpoint()?.GetMetadata\u003CFoo\u003E()\u0060 looks less repetitive and is just as clear, but I\u0027m not sure if it\u0027s worth adding *another* \u0060GetMetadata\u0060 method.",
        "createdAt": "2022-10-13T20:42:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37425#issuecomment-1278157911"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde849SAFV",
    "title": "UseAuthorizationAnalyzer should flag WebApplication that calls UseRouting()",
    "url": "https://github.com/dotnet/aspnetcore/issues/37616",
    "createdAt": "2021-10-16T19:25:59Z",
    "lastUpdated": "2024-03-01T23:02:36Z",
    "body": "### Describe the bug\r\n\u0060UseAuthorizationAnalyzer\u0060 ostensibly looks for the situation where \u0060UseAuthorization\u0060 is not placed between calls to \u0060UseRouting()\u0060 and \u0060UseEndpoints()\u0060. Unfortunately it does not take minimal hosting APIs into consideration, when \u0060UseRouting()\u0060 is explicitly called. \r\n\r\nNormally, minimal APIs add the routing middleware to the start of the pipeline and the endpoint middleware at the end, so it doesn\u0027t matter where the call to \u0060UseAuthorization()\u0060 is. However, you can \u0022override\u0022 the placement of the routing middleware by calling \u0060UseRouting()\u0060 explicitly. In this case, \u0060UseAuthorization()\u0060 _must_ be called _after_ the call to \u0060UseRouting()\u0060.\r\n\r\n### To Reproduce\r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args).\r\nbuilder.Services.AddAuthorization();\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022/\u0022, [Authorize] () =\u003E \u0022Hello World!\u0022);\r\n\r\napp.UseAuthorization(); // \u003C- should have warning ASP0001, but doesn\u0027t\r\napp.UseRouting(); // \u003C- this is in the wrong place, should be before UseAuthorization()\r\napp.Run()\r\n\u0060\u0060\u0060\r\n\r\n### Exceptions (if any)\r\n\r\nWhen hitting an authorized endpoint, you\u0027ll see:\r\n\r\n\u0060\u0060\u0060bash\r\nInvalidOperationException: Endpoint HTTP: GET / contains authorization metadata, but a middleware was not found that supports authorization.\r\nConfigure your application startup by adding app.UseAuthorization() inside the call to Configure(..) in the application startup code. The call to app.UseAuthorization() must appear between app.UseRouting() and app.UseEndpoints(...)\r\n\u0060\u0060\u0060\r\n\r\n### Further technical details\r\n- ASP.NET Core version: .NET 6 RC2\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version: (terminal)\r\n- Include the output of \u0060dotnet --info\u0060: \r\n\r\n\u003Cdetails\u003E\r\n  \u003Csummary\u003Edotnet --info Output\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060\r\nNET SDK (reflecting any global.json):\r\n Version:   6.0.100-rc.2.21505.57\r\n Commit:    ab39070116\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19042\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.100-rc.2.21505.57\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-rc.2.21480.5\r\n  Commit:  6b11d64e7e\r\n\r\n.NET SDKs installed:\r\n  2.1.818 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.104 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.302 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.303 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100-rc.2.21505.57 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-rc.2.21480.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-rc.2.21480.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0-rc.2.21501.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\u0060\u0060\u0060\r\n\r\n\u003C/details\u003E\r\n",
    "upvotes": 0,
    "labels": [
      "analyzer",
      "feature-minimal-hosting",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85MAW-6",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:18:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37616#issuecomment-1275162554"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde849SzRN",
    "title": "Model binding doesn\u0027t work if property set as Enumerable.Empty\u003CT\u003E()",
    "url": "https://github.com/dotnet/aspnetcore/issues/37630",
    "createdAt": "2021-10-17T14:20:30Z",
    "lastUpdated": "2024-03-01T23:02:36Z",
    "body": "\u003C!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003E\r\n\r\n### Describe the bug\r\nWhen binding query parameters, if the property is already set as \u0060Enumerable.Empty\u003CT\u003E()\u0060 then values will not be bound.\r\n\r\n### To Reproduce\r\n\u003C!--\r\nWe \u2764 code! Point us to a minimalistic repro project hosted in a public GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- The repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- If we will not be able to repro the behavior you\u0027re reporting.\r\n- If the repro project is attached as a \u0060.zip\u0060 file.\r\n- If the GitHub repro project is set to \u0060Private\u0060.\r\n--\u003E\r\n\r\n\u0060\u0060\u0060csharp\r\npublic class CustomQueryParameters\r\n{\r\n    public CustomQueryParameters()\r\n    {\r\n        Items = Enumerable.Empty\u003Cstring\u003E();\r\n        Things = new List\u003Cstring\u003E();\r\n    }\r\n\r\n    public IEnumerable\u003Cstring\u003E Items { get; set; }\r\n\r\n    public IEnumerable\u003Cstring\u003E Things { get; set; }\r\n}\r\n\r\npublic class EntitiesController {\r\n\r\n    [HttpGet]\r\n    public async Task\u003CIActionResult\u003E GetValues([FromQuery] CustomQueryParameters parameters)\r\n    {\r\n        var items = parameters.Items; // empty\r\n        var things = parameters.Things; // not empty \r\n        return Ok();\r\n    }\r\n\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\ncurl -X \u0027GET\u0027 \\\r\n  \u0027https://localhost:5001/entities?items=one\u0026things=one\u0026items=two\u0026things=two\u0027 \\\r\n  -H \u0027accept: application/json\u0027\r\n\u0060\u0060\u0060\r\n\r\n### Exceptions (if any)\r\n\u003C!--\r\nInclude the exception you get when facing this issue\r\n--\u003E\r\n\r\n### Further technical details\r\n- ASP.NET Core version: 3.1\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version: VS Code\r\n- Include the output of \u0060dotnet --info\u0060:\r\n\r\n\u003Cdetails\u003E\r\n  \u003Csummary\u003Edotnet --info Output\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.401\r\n Commit:    4bef5f3dbf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19043\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.401\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.10\r\n  Commit:  e1825b4928\r\n\r\n.NET SDKs installed:\r\n  2.1.814 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.402 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.407 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100-rc.2.20479.15 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-rc.2.20475.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-rc.2.20475.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0-rc.2.20475.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\u0060\u0060\u0060\r\n\r\n\u003C/details\u003E\r\n",
    "upvotes": 2,
    "labels": [
      "investigate",
      "feature-model-binding",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde844Z9s7",
        "parentId": null,
        "author": "wu-yafeng",
        "content": "The result of \u0060Enumerable.Empty\u003Cstring\u003E()\u0060 cannot cast to \u0060ICollection\u003Cstring\u003E\u0060.\r\nsee https://github.com/dotnet/aspnetcore/blob/891ca91612f9572a2a79f3dccaaeb4d699090648/src/Mvc/Mvc.Core/src/ModelBinding/Binders/CollectionModelBinder.cs#L477\r\n\r\nI thought \u0060CollectionModelBinder\u0060 should check target model is not readonly before \u0060CopyToModel(...)\u0060",
        "createdAt": "2021-10-19T03:13:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37630#issuecomment-946330427"
      },
      {
        "id": "IC_kwDOAQzde85MAXAD",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:18:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37630#issuecomment-1275162627"
      },
      {
        "id": "IC_kwDOAQzde85McAhf",
        "parentId": null,
        "author": "jtreher",
        "content": "It looks like this repro now throws an exception in .net6.0. It is specifically when binding with [FromQuery].",
        "createdAt": "2022-10-18T13:43:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37630#issuecomment-1282410591"
      },
      {
        "id": "IC_kwDOAQzde85vAt_o",
        "parentId": null,
        "author": "diegosasw",
        "content": "This was moved to .NET 8 planning. But .NET 8 planning is out and this can still be reproduced with .NET 8.\r\n\r\nHas it been postponed?",
        "createdAt": "2023-12-19T10:01:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37630#issuecomment-1862459368"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde849bAlf",
    "title": ".net6 minimal API test config overrides only apply after app has been built",
    "url": "https://github.com/dotnet/aspnetcore/issues/37680",
    "createdAt": "2021-10-19T16:02:42Z",
    "lastUpdated": "2025-01-12T01:32:33Z",
    "body": "### Describe the bug\r\n\r\nUsing .net 6 minimal APIs and WebApplicationFactory for testing, the test config override is only applied after .Build.\r\nThis means any interaction with config while configuring services using \u0060builder.Configuration\u0060 will be using the app configuration, not test overrides.\r\n\r\n### To Reproduce\r\n\r\nI\u0027ve created a repo that shows the difference, [here](https://github.com/tl-maisie-sadler/net6-config-error/blob/main/src/Demo.Api/Program.cs) is the Program, and an [Example test](https://github.com/tl-maisie-sadler/net6-config-error/blob/main/test/Demo.Test/UnitTest1.cs).\r\n\r\n[Test run](https://github.com/tl-maisie-sadler/net6-config-error/runs/3941554367?check_suite_focus=true)\r\n\r\n### Further technical details\r\n- ASP.NET Core version: net6.0",
    "upvotes": 50,
    "labels": [
      "Docs",
      "feature-minimal-hosting",
      "feature-mvc-testing",
      "area-minimal",
      "net8_docathon"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde844cKMq",
        "parentId": null,
        "author": "martincostello",
        "content": "I think the problem here is that you\u0027re binding the configuration into your service while the application is still in its bootstrapping phase (which is until \u0060Build()\u0060), so the configuration isn\u0027t yet \u0022done\u0022. It\u0027s similar to the sort of issue where you need configuration to configure other things, like if you\u0027re say using Azure Key Vault, and need to use config to configure the Key Vault provider itself.\r\n\r\nDoes it work as you\u0027d expect if you change it to this instead?\r\n\r\n\u0060\u0060\u0060csharp\r\nbuilder.Services.AddSingleton(() =\u003E new Options(builder.Configuration[\u0022AppSettings:Options\u0022]));\r\n\u0060\u0060\u0060\r\n\r\nI think if you resolve it lazily like that, when the lambda to get \u0060Options\u0060 runs the \u0060Configuration\u0060 would then have the extra settings in it from the tests.\r\n",
        "createdAt": "2021-10-19T16:42:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-946905898"
      },
      {
        "id": "IC_kwDOAQzde844cRDb",
        "parentId": null,
        "author": "maisiesadler",
        "content": "Hey Martin \uD83D\uDC4B \r\n\r\nYep that works - this might just be a gotcha rather than a bug since the Configuration is available on builder but it\u0027s not \u0022Done\u0022 :(\r\nIt also works using .net 6 but \u0060WebHost.CreateDefaultBuilder\u0060 rather than the new \u0060WebApplication.CreateBuilder\u0060\r\n[diff](https://github.com/tl-maisie-sadler/net6-config-error/commit/b3e25272374f80cb432447e1a6738f696136b80d)\r\n[test run](https://github.com/tl-maisie-sadler/net6-config-error/actions/runs/1360213008)",
        "createdAt": "2021-10-19T17:16:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-946933979"
      },
      {
        "id": "IC_kwDOAQzde844cTuz",
        "parentId": null,
        "author": "martincostello",
        "content": "Yeah it\u0027s probably more of a gotcha of the new model - the \u0060WebApplicationFactory\u0060 code gets invoked as part of a callback that gets called before \u0060Build()\u0060 returns back to the \u0060Program\u0060 class, so the code that adds your test settings won\u0027t even have run yet when you register that dependency so it can\u0027t see your overrides as they don\u0027t exist yet.\r\n",
        "createdAt": "2021-10-19T17:30:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-946944947"
      },
      {
        "id": "IC_kwDOAQzde844cVpp",
        "parentId": null,
        "author": "maisiesadler",
        "content": "Makes sense. Will update the code and close the issue - thanks!",
        "createdAt": "2021-10-19T17:40:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-946952809"
      },
      {
        "id": "IC_kwDOAQzde844dPYl",
        "parentId": null,
        "author": "halter73",
        "content": "Reopening so we document this. This might also be worth trying to fix in .NET 7. Thanks for the great repro.",
        "createdAt": "2021-10-19T23:47:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-947189285"
      },
      {
        "id": "IC_kwDOAQzde845DLmq",
        "parentId": null,
        "author": "davidfowl",
        "content": "@halter73 are you gonna doc this?",
        "createdAt": "2021-11-02T06:26:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-957135274"
      },
      {
        "id": "IC_kwDOAQzde8456McA",
        "parentId": null,
        "author": "kristofferjalen",
        "content": "Here\u0027s my question on SO on the same issue: https://stackoverflow.com/questions/69986598/with-webapplicationfactory-add-configuration-source-before-program-cs-executes",
        "createdAt": "2021-11-17T13:00:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-971556608"
      },
      {
        "id": "IC_kwDOAQzde849kSYg",
        "parentId": null,
        "author": "twinter-amosfivesix",
        "content": "I stumbled upon a workaround for this issue. \r\n\r\nIf you override \u0060WebApplicationFactory\u003CT\u003E.CreateHost()\u0060 and call \u0060IHostBuilder.ConfigureHostConfiguration()\u0060 before calling \u0060base.CreateHost()\u0060 the configuration you add will be visible between \u0060WebApplication.CreateBuilder()\u0060 and \u0060builder.Build()\u0060. From my testing it\u0027s visible in all the various places you\u0027d look at the config (callbacks, etc.).\r\n\r\nI have not tried it with adding a JSON file but I imagine it should work. \r\n\r\nNote that calling \u0060IHostBuilder.ConfigureAppConfiguration()\u0060 in this manner does not work. \u0060DeferredHostBuilder\u0060 treats host configuration differently from app configuration. ([Code part 1](https://github.com/dotnet/aspnetcore/blob/c85baf8db0c72ae8e68643029d514b2e737c9fae/src/Mvc/Mvc.Testing/src/DeferredHostBuilder.cs#L68-L75) - [Code part 2](https://github.com/dotnet/aspnetcore/blob/c85baf8db0c72ae8e68643029d514b2e737c9fae/src/Mvc/Mvc.Testing/src/DeferredHostBuilder.cs#L37-L54))\r\n\r\nThe comments in \u0060DeferredHostBuilder.ConfigureHostConfiguration\u0060 actually say \u0022[We can do this for app configuration as well if it becomes necessary.](https://github.com/dotnet/aspnetcore/blob/c85baf8db0c72ae8e68643029d514b2e737c9fae/src/Mvc/Mvc.Testing/src/DeferredHostBuilder.cs#L71-L72)\u0022 Perhaps it\u0027s necessary now. \uD83D\uDE04 \r\n\r\n([The PR that made \u0060ConfigureHostConfiguration()\u0060 work like this in \u0060DeferredHostBuilder\u0060.](https://github.com/dotnet/aspnetcore/pull/34794))\r\n\r\n### Example Program\r\n\u0060\u0060\u0060\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nvar result = builder.Configuration[\u0022Result\u0022];\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022/\u0022, () =\u003E result);\r\n\r\napp.Run();\r\n\r\npublic partial class Program{ }\r\n\u0060\u0060\u0060\r\n\r\n### Example appsettings.json\r\n\u0060\u0060\u0060\r\n{\r\n    \u0022Result\u0022 : \u0022Normal Result\u0022\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Example Test\r\n\u0060\u0060\u0060\r\nusing System.Collections.Generic;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Mvc.Testing;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.Hosting;\r\nusing NUnit.Framework;\r\n\r\nnamespace TestProject;\r\n\r\n[TestFixture]\r\npublic class ProgramFixture\r\n{\r\n    [Test]\r\n    public async Task Should_return_override()\r\n    {\r\n        var factory = new MyWebApplicationFactory();\r\n\r\n        var client = factory.CreateClient();\r\n\r\n        var result = await client.GetStringAsync(\u0022/\u0022);\r\n\r\n        Assert.That(result, Is.EqualTo(\u0022Override\u0022));\r\n    }\r\n\r\n    private class MyWebApplicationFactory : WebApplicationFactory\u003CProgram\u003E\r\n    {\r\n        protected override IHost CreateHost(IHostBuilder builder)\r\n        {\r\n            builder.ConfigureHostConfiguration(config =\u003E\r\n            {\r\n                config.AddInMemoryCollection(new Dictionary\u003Cstring, string\u003E { { \u0022Result\u0022, \u0022Override\u0022 } });\r\n            });\r\n\r\n            // This does not work.\r\n            //builder.ConfigureAppConfiguration(config =\u003E\r\n            //{\r\n            //    config.AddInMemoryCollection(new Dictionary\u003Cstring, string\u003E { { \u0022Result\u0022, \u0022Override\u0022 } });\r\n            //});\r\n\r\n            return base.CreateHost(builder);\r\n        }\r\n\r\n        // This does not work.\r\n        //protected override void ConfigureWebHost(IWebHostBuilder builder)\r\n        //{\r\n        //    builder.ConfigureAppConfiguration(config =\u003E\r\n        //    {\r\n        //        config.AddInMemoryCollection(new Dictionary\u003Cstring, string\u003E { { \u0022Result\u0022, \u0022Override\u0022 } });\r\n        //    });\r\n        //}\r\n    }\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2022-02-08T18:20:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1032922656"
      },
      {
        "id": "IC_kwDOAQzde85DeaPz",
        "parentId": null,
        "author": "bvachon",
        "content": "The above workaround did not work for me because I wanted the \u0060AddInMemoryCollection\u0060 to override the existing config (ie: be added last). So here\u0027s what I came up with instead.\r\n\r\n**Program.cs:**\r\n\r\n\r\n\u0060\u0060\u0060\r\n\r\n    var builder = WebApplication.CreateBuilder(args);\r\n\r\n    builder.WebHost.ConfigureAppConfiguration(builder =\u003E\r\n    {\r\n        builder\r\n            .AddInMemoryCollection(s_ConfigOverride);\r\n    });\r\n    \r\n    ...\r\n\r\n    public partial class Program \r\n    {\r\n        static Dictionary\u003Cstring, string\u003E s_ConfigOverride { get; set; } = new();\r\n    \r\n        class ClearConfigOverride : IDisposable\r\n        {\r\n            public void Dispose() =\u003E s_ConfigOverride = new Dictionary\u003Cstring, string\u003E();\r\n        }\r\n    \r\n        public static IDisposable OverrideConfig(Dictionary\u003Cstring, string\u003E config)\r\n        {\r\n            s_ConfigOverride = config;\r\n            return new ClearConfigOverride();\r\n        }\r\n    }\r\n\r\n\u0060\u0060\u0060\r\n\r\n\r\n**UnitTest.cs**\r\n\r\n\u0060\u0060\u0060\r\n\r\n      [OneTimeSetUp]\r\n      public void OneTimeSetup()\r\n      {\r\n          using var _ = Program.OverrideConfig(new Dictionary\u003Cstring, string\u003E()\r\n          {\r\n              { \u0022MyConfig\u0022, \u0022someValue\u0022 }\r\n          });\r\n\r\n          var application = new WebApplicationFactory\u003CProgram\u003E()\r\n              .WithWebHostBuilder(builder =\u003E\r\n              {\r\n                  // ... Configure test services\r\n              });\r\n        }\r\n        ....\r\n\u0060\u0060\u0060\r\n\r\n",
        "createdAt": "2022-05-19T18:20:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1132045299"
      },
      {
        "id": "IC_kwDOAQzde85HVpVj",
        "parentId": null,
        "author": "diegosasw",
        "content": "Having the same issue.\r\nI\u0027m able to set the environment to \u0022Test\u0022 for my functional tests but when reading settings at runtime (during tests), the \u0060appsettings.Test.json\u0060 is being ignored when using minimal API\r\n\r\nI use it like this:\u0060\r\n\u0060\u0060\u0060\r\n        var application =\r\n            new WebApplicationFactory\u003CProgram\u003E()\r\n                .WithWebHostBuilder(\r\n                    config =\u003E\r\n                        config\r\n                            .UseCommonConfiguration()\r\n                            .UseEnvironment(\u0022Test\u0022)\r\n                            .ConfigureTestServices(ConfigureTestServices));\r\n\u0060\u0060\u0060\r\n\r\nAnd I have the extension\r\n\u0060\u0060\u0060\r\npublic static class WebHostBuilderExtensions\r\n{\r\n    public static IWebHostBuilder UseCommonConfiguration(this IWebHostBuilder builder)\r\n    {\r\n        builder.ConfigureAppConfiguration((hostingContext, config) =\u003E\r\n        {\r\n            var env = hostingContext.HostingEnvironment;\r\n\r\n            config\r\n                .AddJsonFile(\u0022appsettings.json\u0022, optional: true, reloadOnChange: false)\r\n                .AddJsonFile($\u0022appsettings.{env.EnvironmentName}.json\u0022, optional: true, reloadOnChange: false)\r\n                .AddEnvironmentVariables();\r\n\r\n            if (env.IsDevelopment())\r\n            {\r\n                var appAssembly = Assembly.Load(new AssemblyName(env.ApplicationName));\r\n                config.AddUserSecrets(appAssembly, optional: true);\r\n            }\r\n        });\r\n\r\n        return builder;\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n**I don\u0027t understand why some of you suggest this is a gotcha rather than a bug.** \r\n\r\nIf I set the webhost builder to use environment Test, I would expect the IConfiguration to read from the \u0060appsettings.Test.json\u0060.\r\n\r\nAlso, why do you say it applies only after app has been built?\r\nI can see my \u0060builder.Build()\u0060 happening before the \u0060IConfiguration\u0060 is retrieved from the DI container and settings read\r\n\r\nThis is my \u0060Program.cs\u0060\r\n\u0060\u0060\u0060\r\nusing Rubiko.Logging.Microsoft.DependencyInjection;\r\nusing Sample.Extensions;\r\n\r\nconst string corsPolicy = \u0022corsPolicy\u0022;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar configuration = builder.Configuration;\r\n\r\n// IoCC\r\nvar services = builder.Services;\r\n\r\nservices\r\n    .AddMicrosoftFactoryLogging(configuration.GetSection(\u0022Logging\u0022))\r\n    .AddMicroserviceDependencies()\r\n    .AddCors(corsPolicy);\r\n\r\nvar app = builder.Build();\r\n\r\n// Http Pipeline\r\nvar assemblyPath = $\u0022/{typeof(Program).Assembly.GetName().Name!.ToLowerInvariant()}\u0022;\r\n\r\napp\r\n    .UsePathBase(assemblyPath)\r\n    .UseRouting()\r\n    .UseCors(corsPolicy)\r\n    .UseDeveloperExceptionPage()\r\n    .UseOpenApi(assemblyPath)\r\n    .UseAuthorization()\r\n    .UseEndpoints(endpoints =\u003E\r\n    {\r\n        endpoints.MapControllers();\r\n    });\r\n\r\napp.Run();\r\n\r\n// See https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-6.0\r\npublic partial class Program { }\r\n\u0060\u0060\u0060\r\n\r\nIf anyone has a workaround, please let me know. But I will probably go back to the old fashioned \u0060Startup.cs\u0060 and the \r\n\u0060\u0060\u0060\r\n        var server =\r\n            new TestServer(\r\n                new WebHostBuilder()\r\n                    .UseStartup\u003CStartup\u003E()\r\n                    .UseCommonConfiguration()\r\n                    .UseEnvironment(\u0022Test\u0022)\r\n                    .ConfigureTestServices(ConfigureTestServices));\r\n\u0060\u0060\u0060",
        "createdAt": "2022-07-27T14:45:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1196856675"
      },
      {
        "id": "IC_kwDOAQzde85IgzOO",
        "parentId": null,
        "author": "humbe76",
        "content": "This is blocking my effort to move to new ways of app init too.. Minimal code looks like a total anti-feature. To be able to show of a one-liner for hello world, we have to cope with a lot of new magic that complicates flexibility in unit testing, making it harder to make anything that is a real application..\r\n\r\nBefore .NET 6 we implement a main method, handle the command line arguments and call into web API init code. That way it is easy for us to make unit tests test everything and provide anything wanted from the unit test libraries into the application to mock, stub, and avoid running code that will blow up if not in production environment.\r\n\r\nI\u0027m unable to find any documentation of how to convert the minimal code to actual readable normal code which one can integrate with, and I have not been able to find a workaround to make a unit test to be able to provide input readable from the very beginning of the Program.cs file.\r\n\r\nGoing through a static variable of course works, but I want to avoid that as I want multiple unit tests to be able to run in parallel.\r\n\r\n  - Within the Program.cs one can not refer to this, so even using a static collection with this.GetHashCode() to index into it doesn\u0027t work.\r\n  - If I create members in a partial Program.cs implementation, I can\u0027t access them from the minimal code.\r\n  - There\u0027s no member in the auto-generated Program.cs file I can set something that is available at the top of Program.cs\r\n  - I\u0027ve found no way to give it the command line arguments I want to test with.\r\n\r\nAll I\u0027ve managed to do so far is inject a service that can be fetched after builder.Build() has been called, but that is too late..",
        "createdAt": "2022-08-16T12:17:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1216557966"
      },
      {
        "id": "IC_kwDOAQzde85IqK3h",
        "parentId": null,
        "author": "davidfowl",
        "content": "We\u0027re going to tackle this in .NET 8, it\u0027ll require some new APIs to make it work well.",
        "createdAt": "2022-08-18T03:55:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1219014113"
      },
      {
        "id": "IC_kwDOAQzde85Jpoti",
        "parentId": null,
        "author": "kaylumah",
        "content": "Inside \u0060protected override void ConfigureWebHost(IWebHostBuilder builder)\u0060\r\n\u0060\u0060\u0060\r\nvar config = new ConfigurationBuilder()\r\n                .AddInMemoryCollection(new Dictionary\u003Cstring, string\u003E() {})\r\n                .Build();\r\nbuilder.UseConfiguration(config);\r\n\u0060\u0060\u0060\r\n\r\nAppears to work as an alternative for the \u0060ConfigureAppConfiguration\u0060 but not sure if that Is desired.\r\n\r\nGuidance on this would be appreciated especially if it would be delayed to .NET8\r\nThanks\r\nMax\r\n",
        "createdAt": "2022-09-02T15:44:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1235651426"
      },
      {
        "id": "IC_kwDOAQzde85LbXaF",
        "parentId": null,
        "author": "mikeblakeuk",
        "content": "Sad times.",
        "createdAt": "2022-10-03T13:45:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1265464965"
      },
      {
        "id": "IC_kwDOAQzde85MAXBa",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:18:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1275162714"
      },
      {
        "id": "IC_kwDOAQzde85OLzR2",
        "parentId": null,
        "author": "opolkosergey",
        "content": "I\u0027ve faced with similar issue in my tests. I need to use class inherited from \u0060WebApplicationFactory\u003CProgram\u003E\u0060 in my tests. The issue is that in Production scenario \u0060Program.cs\u0060 initializes Serilog with MSSqlServer sink. So I have to have to provide \u0060connectionString\u0060 - it isn\u0027t what I would like to do in tests. Part of my \u0060appsettings.json\u0060 (located in project under test) is:\r\n\u0060 \u0022Serilog\u0022: {\r\n    \u0022Using\u0022: [ \u0022Serilog.Sinks.MSSqlServer\u0022 ],\r\n    \u0022MinimumLevel\u0022: {\r\n      ...\r\n      }\r\n    },\r\n    \u0022WriteTo\u0022: [\r\n      {\r\n        \u0022Name\u0022: \u0022MSSqlServer\u0022,\r\n        \u0022Args\u0022: {\r\n          \u0022connectionString\u0022: \u0022{connection_string}\u0022,\r\n          \u0022sinkOptionsSection\u0022: {\r\n            ...\r\n          },\r\n          \u0022columnOptionsSection\u0022: {\r\n            \u0022customColumns\u0022: [\r\n              ...\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\u0060\r\n  \r\n[This answer](https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1032922656) prompted me to find workaround for my case:\r\n \r\n\u0060\u0060\u0060\r\n    internal class MyWebApplicationFactory : WebApplicationFactory\u003CProgram\u003E\r\n    {\r\n        ...\r\n        protected override IHost CreateHost(IHostBuilder builder)\r\n        {\r\n            builder.ConfigureHostConfiguration(config =\u003E\r\n            {\r\n                config.AddJsonFile(\u0022appsettings.json\u0022);\r\n            });\r\n            return base.CreateHost(builder);\r\n        }\t\t\r\n        ...\r\n    }\r\n\u0060\u0060\u0060\r\n    \r\nwhere \u0060appsettings.json\u0060 (located in test project) is:\r\n\r\n\u0060{\r\n  \u0022Serilog\u0022: {\r\n    \u0022WriteTo\u0022: [\r\n      {\r\n        \u0022Name\u0022: \u0022Console\u0022\r\n      },\r\n      {\r\n        \u0022Name\u0022: \u0022Console\u0022\r\n      }\r\n    ]\r\n  }\r\n}\u0060\r\n\r\nSet this advanced settings for your test project\r\n\r\n![image](https://user-images.githubusercontent.com/15104368/201355951-5fae43aa-35b0-4af7-b76c-9d4605acb2d7.png)\r\n\r\n  ",
        "createdAt": "2022-11-11T13:49:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1311716470"
      },
      {
        "id": "IC_kwDOAQzde85OUf9F",
        "parentId": null,
        "author": "JBastiaan",
        "content": "So its really great that it is being worked on for .NET 8, but here we are on .NET 7. How is anyone supposed to make test configuration overrides work now? Are we just supposed to abandon the minimal hosting model until .NET 8? None of the above workaround work for me since im calling some extension method on startup that just requires a string value from config. Lazy loading won\u0027t help me, the overridden config value needs to be there when the app is starting. Did anyone find a workaround for this?",
        "createdAt": "2022-11-14T16:08:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1313996613"
      },
      {
        "id": "IC_kwDOAQzde85OUhoT",
        "parentId": null,
        "author": "diegosasw",
        "content": "\u003E So its really great that it is being worked on for .NET 8, but here we are on .NET 7. How is anyone supposed to make test configuration overrides work now? Are we just supposed to abandon the minimal hosting model until .NET 8? None of the above workaround work for me since im calling some extension method on startup that just requires a string value from config. Lazy loading won\u0027t help me, the overridden config value needs to be there when the app is starting. Did anyone find a workaround for this?\r\n\r\nI couldn\u0027t make it work either, so I abandoned minimal API and keep using the standard Startup \u002B Program.",
        "createdAt": "2022-11-14T16:11:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1314003475"
      },
      {
        "id": "IC_kwDOAQzde85PWtVw",
        "parentId": null,
        "author": "cjbush",
        "content": "So I was able to get this to work with a kind-of-hacky workaround. My Program.cs looks something like this:\r\n\r\n\u0060\u0060\u0060 csharp\r\nvar app = WebApplication.CreateBuilder(args)\r\n                        .BuildDefaultConfiguration()\r\n                        .ConfigureServices((services, configuration) =\u003E \r\n                        {\r\n                            //configure IServiceCollection\r\n                        })\r\n                        .Build()\r\n                        .ConfigureApplication(app =\u003E \r\n                        {\r\n                            app.UseHealthChecks(\u0022/hc\u0022, new HealthCheckOptions\r\n                            {\r\n                                Predicate = _ =\u003E true,\r\n                                ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse\r\n                            });\r\n\r\n                            //define your other routes and what not\r\n                        });\r\nawait app.RunAsync();\r\n\u0060\u0060\u0060\r\n\r\nand I have the following extension methods defined:\r\n\r\n\u0060\u0060\u0060 csharp\r\npublic static class BootstrappingExtensions \r\n{\r\n    public static WebApplicationBuilder BuildDefaultConfiguration(this WebApplicationBuilder builder)\r\n    {\r\n         if(builder.Configuration.GetValue(\u0022IsConfigured\u0022, false)) return builder; // this is the hacky/magic part\r\n         //load appsettings.json or Azure App Config or whatever you want\r\n         return builder;\r\n    }\r\n    \r\n\r\n    public static WebApplicationBuilder ConfigureServices(this WebApplicationBuilder builder, Action\u003CIServiceCollection, IConfiguration\u003E configure)\r\n    {\r\n         configure(builder.Services, builder.Configuration);\r\n         return builder;\r\n    }\r\n\r\n    public static WebApplication ConfigureApplication(this WebApplication app, Action\u003CWebApplication\u003E configure)\r\n    {\r\n         configure(app);\r\n         return app;\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nthen in my test fixture I have:\r\n\r\n\u0060\u0060\u0060 csharp\r\n[TestFixture]\r\npublic sealed class ProgramTest\r\n{\r\n    private sealed class ProgramFactory  : WebApplicationFactory\u003CProgram\u003E\r\n    {\r\n        protected override IHost CreateHost(IHostBuilder builder)\r\n        {\r\n            builder.ConfigureHostConfiguration((configBuilder) =\u003E \r\n            {\r\n                configBuilder.Sources.Clear();\r\n                configBuilder.AddInMemoryCollection(new Dictionary\u003Cstring,string\u003E\r\n                {\r\n                    { \u0022ConnectionStrings:MyDatabaseConnection\u0022, \u0022\u003Csome test value\u003E\u0022 },\r\n                    { \u0022IsConfigured\u0022, \u0022true\u0022 }\r\n                });\r\n           });\r\n        }\r\n    }\r\n\r\n    [Test]\r\n    public async Task Program_HealthCheck_ShouldReturnHealthy()\r\n    {\r\n        using var application = new ProgramFactory();\r\n        using var client = application.CreateClient();\r\n\r\n        var response = await client.GetAsync(\u0022/hc\u0022);\r\n    \r\n        var report = await response.Content.ReadAsJsonAsync\u003CUIHealthReport\u003E(); //ymmv as far as json options goes here\r\n        report.Should().NotBeNull().And.Match\u003CUIHealthReport\u003E(_ =\u003E _.Status == UIHealthStatus.Healthy);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nSo the downside obviously is you\u0027re setting a test flag and checking for it in production code, but it does seem to work for overriding the config with minimal APIs until a real fix comes along in .NET 8.",
        "createdAt": "2022-11-29T21:40:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1331352944"
      },
      {
        "id": "IC_kwDOAQzde85PXfwn",
        "parentId": null,
        "author": "davidfowl",
        "content": "OK seeing the responses here urged me to come up with something in the meantime while we build a cleaner solution to this. The solution has 2 parts to it. A line of code you have to add to the application when you want to override configuration before:\r\n\r\n**Application**\r\n\r\n\u0060\u0060\u0060C#\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// This is the special line of code. It should be added in the place where you want to override configuration\r\nbuilder.Configuration.AddTestConfiguration();\r\n\r\nvar result = builder.Configuration[\u0022Result\u0022];\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022/\u0022, () =\u003E result);\r\n\r\napp.Run();\r\n\r\npublic partial class Program { }\r\n\u0060\u0060\u0060\r\n\r\n**Test project**\r\n\r\n\u0060\u0060\u0060C#\r\nusing Microsoft.AspNetCore.Mvc.Testing;\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace TestProject1\r\n{\r\n    public class UnitTest1\r\n    {\r\n        [Fact]\r\n        public async Task OverrideWithInMemoryConfiguration()\r\n        {\r\n            var waf = new WebApplicationFactory\u003CProgram\u003E();\r\n\r\n            TestConfiguration.Create(b =\u003E b.AddInMemoryCollection(new Dictionary\u003Cstring, string?\u003E\r\n            {\r\n                [\u0022Result\u0022] = \u0022Hello World!\u0022\r\n            }));\r\n\r\n            var client = waf.CreateClient();\r\n\r\n            var response = await client.GetStringAsync(\u0022/\u0022);\r\n            Assert.Equal(\u0022Hello World!\u0022, response);\r\n        }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nHere\u0027s the magic that makes this work:\r\n\r\n\u0060\u0060\u0060C#\r\nnamespace Microsoft.Extensions.Configuration;\r\n\r\ninternal static class TestConfiguration\r\n{\r\n    // This async local is set in from tests and it flows to main\r\n    internal static readonly AsyncLocal\u003CAction\u003CIConfigurationBuilder\u003E?\u003E _current = new();\r\n\r\n    /// \u003Csummary\u003E\r\n    /// Adds the current test configuration to the application in the \u0022right\u0022 place\r\n    /// \u003C/summary\u003E\r\n    /// \u003Cparam name=\u0022configurationBuilder\u0022\u003EThe configuration builder\u003C/param\u003E\r\n    /// \u003Creturns\u003EThe modified \u003Csee cref=\u0022IConfigurationBuilder\u0022/\u003E\u003C/returns\u003E\r\n    public static IConfigurationBuilder AddTestConfiguration(this IConfigurationBuilder configurationBuilder)\r\n    {\r\n        if (_current.Value is { } configure)\r\n        {\r\n            configure(configurationBuilder);\r\n        }\r\n\r\n        return configurationBuilder;\r\n    }\r\n\r\n    /// \u003Csummary\u003E\r\n    /// Unit tests can use this to flow state to the main program and change configuration\r\n    /// \u003C/summary\u003E\r\n    /// \u003Cparam name=\u0022action\u0022\u003E\u003C/param\u003E\r\n    public static void Create(Action\u003CIConfigurationBuilder\u003E action)\r\n    {\r\n        _current.Value = action;\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n**NOTE: This in the unit test, the call to Create must happen before the CreateClient() call on the \u0060WebApplicationFactory\u003CT\u003E\u0060 . This is because the ExecutionContext needs to flow to the main application and that gets initialized during the first access to the client or services on the application.**\r\n\r\n**EDIT: If you derive a class from WebApplicationFactory\u003CT\u003E, it\u0027s possible to setup configuration before the app runs**:\r\n\r\n\u0060\u0060\u0060C#\r\npublic class UnitTest1\r\n{\r\n    [Fact]\r\n    public async Task ImplicitOverride()\r\n    {\r\n        var app = new App();\r\n        app.ConfigureConfiguration(b =\u003E b.AddInMemoryCollection(new Dictionary\u003Cstring, string?\u003E\r\n        {\r\n            [\u0022Result\u0022] = \u0022Hello!\u0022\r\n        }));\r\n\r\n        var client = app.CreateClient();\r\n\r\n        var response = await client.GetStringAsync(\u0022/\u0022);\r\n        Assert.Equal(\u0022Hello!\u0022, response);\r\n    }\r\n}\r\n\r\nclass App : WebApplicationFactory\u003CProgram\u003E\r\n{\r\n    private Action\u003CIConfigurationBuilder\u003E? _action;\r\n\r\n    public void ConfigureConfiguration(Action\u003CIConfigurationBuilder\u003E configure)\r\n    {\r\n        _action \u002B= configure;\r\n    }\r\n\r\n    protected override IWebHostBuilder? CreateWebHostBuilder()\r\n    {\r\n        if (_action is { } a)\r\n        {\r\n            // Set this so that the async context flows\r\n            TestConfiguration.Create(a);\r\n        }\r\n\r\n        return base.CreateWebHostBuilder();\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThis is a bit cleaner and lets you configure the WebApplicationFactory instead of a static.\r\n",
        "createdAt": "2022-11-30T02:16:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1331559463"
      },
      {
        "id": "IC_kwDOAQzde85RUhU9",
        "parentId": null,
        "author": "ayyron-dev",
        "content": "Depending on the use-case, a less robust but fairly simple short term workaround could be to use Environment Variable configuration.\r\n\r\n\u0060\u0060\u0060csharp\r\nEnvironment.SetEnvironmentVariable(\u0022KEY\u0022, \u0022VALUE\u0022);\r\nvar waf = new WebApplicationFactory\u003CProgram\u003E();\r\nvar client = waf.CreateClient()\r\n/* ... rest of test ... */\r\n\u0060\u0060\u0060\r\n\r\nEdit: Don\u0027t do this, DavidFowl makes a really great point about how this could produce unexpected results.",
        "createdAt": "2022-12-23T21:04:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1364333885"
      },
      {
        "id": "IC_kwDOAQzde85RUi4L",
        "parentId": null,
        "author": "davidfowl",
        "content": "Yea I don\u2019t recommend that. It affects the entire process (including the test process). That\u2019s no good, especially since tests run concurrently by default. ",
        "createdAt": "2022-12-23T21:13:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1364340235"
      },
      {
        "id": "IC_kwDOAQzde85TkhJv",
        "parentId": null,
        "author": "diegosasw",
        "content": "[This](https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1235651426) seems to be the best workaround so far to override settings.\r\n\r\nAlso the \u0060.ConfigureServices\u0060 seems to be executed AFTER the \u0060Program.cs\u0060 registrations, so it\u0027s a good place to remove/replace service registrations.\r\n\r\nWith those two things it seems I can get by using mnimal API with .NET 7 without sacrificing integration tests or messing around with environment variables\r\n\r\nExample:\r\n\r\n\u0060\u0060\u0060\r\nprotected IntegrationTestBase()\r\n{\r\n    // Workaround for overrides in .NET 7 and minimal API. See https://github.com/dotnet/aspnetcore/issues/37680\r\n    var testConfigurationBuilder =\r\n        new ConfigurationBuilder()\r\n            .AddInMemoryCollection(\r\n                new List\u003CKeyValuePair\u003Cstring, string?\u003E\u003E\r\n                {\r\n                    new(\u0022CoolSection:Colors:0\u0022, \u0022red\u0022),\r\n                    new(\u0022CoolSection:Colors:1\u0022, \u0022black\u0022),\r\n                })\r\n            .Build();\r\n    \r\n    var webApplicationFactory =\r\n        new WebApplicationFactory\u003CProgram\u003E() // It requires public partial class Program { } at Program.cs in main assembly\r\n            .WithWebHostBuilder(webHostBuilder =\u003E\r\n                webHostBuilder\r\n                    .UseEnvironment(\u0022Development\u0022)\r\n                    .UseConfiguration(testConfigurationBuilder)\r\n                    .ConfigureServices(TestServiceOverrides));\r\n    // ...\r\n}\r\n\r\nprotected virtual void TestServiceOverrides(IServiceCollection servives)\r\n{\r\n     // Replace services in DI container. Virtual method so that test classes inheriting from IntegrationTestBase can override services also\r\n}\r\n\u0060\u0060\u0060\r\n\r\nLet\u0027s hope .NET 8 brings some good \u0060IWebHostedBuilder\u0060 methods that work for these purposes. Because \u0060ConfigureTestServices\u0060 and \u0060ConfigureAppConfiguration\u0060 right now are misleading.",
        "createdAt": "2023-01-24T14:56:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1402081903"
      },
      {
        "id": "IC_kwDOAQzde85Xg2W5",
        "parentId": null,
        "author": "MonocleKelso",
        "content": "I just ran into this issue and wanted to add my 2 cents. It _seems_ as if the behavior isn\u0027t consistent across different operating systems?\r\n* \u0060builder.ConfigureAppConfiguration\u0060 worked for me in Windows\r\n* Had to switch to \u0060builder.ConfigureHostConfiguration\u0060 for it to work in WSL (Ubuntu) - this also still worked in Windows\r\n* \u0060builder.ConfigureHostConfiguration\u0060 also worked when running tests in the \u0060mcr.microsoft.com/dotnet/sdk:7.0\u0060 Docker image but it wasn\u0027t loading the environment specific \u0060appsettings\u0060 JSON config so the exceptions being thrown in WSL and Docker were different",
        "createdAt": "2023-03-14T14:41:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1468229049"
      },
      {
        "id": "IC_kwDOAQzde85Y_l0g",
        "parentId": null,
        "author": "kolpav",
        "content": "Anyone stumbling upon this issue, just rewrite your application to use \u0060Program.cs\u0060\u0026\u0060Startup.cs\u0060, close this tab and be productive again, its that simple.",
        "createdAt": "2023-04-01T18:12:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1493064992"
      },
      {
        "id": "IC_kwDOAQzde85Y_0_I",
        "parentId": null,
        "author": "davidfowl",
        "content": "I\u2019ll assign this one to myself ",
        "createdAt": "2023-04-01T21:20:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1493127112"
      },
      {
        "id": "IC_kwDOAQzde85l0TPT",
        "parentId": null,
        "author": "Al4ric",
        "content": "I have just discovered why any of the above was NOT working in my solution.\r\n\r\nI was creating builder in my \u0022Program.cs\u0022 like this:\r\n\u0060var builder = WebApplication.CreateBuilder();\u0060\r\n\r\nI tried all of the above and in all different places (like ConfigureWebHost, CreateHost, etc.). Nothing worked.\r\n\r\nThen I modified my Program.cs with this:\r\n\r\n\u0060var builder = WebApplication.CreateBuilder(args);\u0060\r\n\r\nAnd suddenly every method above was working. So by only adding **args** it is working (I guess it is identified as different method)",
        "createdAt": "2023-09-06T11:58:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1708209107"
      },
      {
        "id": "IC_kwDOAQzde85nov7j",
        "parentId": null,
        "author": "dj-nitehawk",
        "content": "\u003E I have just discovered why any of the above was NOT working in my solution.\r\n\u003E \r\n\u003E I was creating builder in my \u0022Program.cs\u0022 like this: \u0060var builder = WebApplication.CreateBuilder();\u0060\r\n\u003E \r\n\u003E I tried all of the above and in all different places (like ConfigureWebHost, CreateHost, etc.). Nothing worked.\r\n\u003E \r\n\u003E Then I modified my Program.cs with this:\r\n\u003E \r\n\u003E \u0060var builder = WebApplication.CreateBuilder(args);\u0060\r\n\u003E \r\n\u003E And suddenly every method above was working. So by only adding **args** it is working (I guess it is identified as different method)\r\n\r\nomg thank you so much!\r\ni was losing my mind trying to hunt down why the environment set in WAF wasn\u0027t being picked up by the application.\r\nall i had to do was add the \u0060args\u0060 to \u0060WebApplication.CreateBuilder\u0060 method.\r\nso anyone reading this on .NET 7\u002B just make sure you create your app builder like this:\r\n\u0060\u0060\u0060cs\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\u0060\u0060\u0060",
        "createdAt": "2023-09-28T08:50:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1738735331"
      },
      {
        "id": "IC_kwDOAQzde85pyp5Z",
        "parentId": null,
        "author": "Barsonax",
        "content": "Some ppl seem to imply/hope this is getting fixed in .NET 8. Can anyone confirm this is actually getting fixed in .NET 8? This is not just a gotcha but a breaking change in behavior between the old startup and the new WebApplication way of doing things. All the workarounds posted here seem to be pretty hacky and not a true solution to the problem.",
        "createdAt": "2023-10-23T10:23:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1774886489"
      },
      {
        "id": "IC_kwDOAQzde85p0N4m",
        "parentId": null,
        "author": "davidfowl",
        "content": "It was not fixed in .NET 8. ",
        "createdAt": "2023-10-23T14:11:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1775296038"
      },
      {
        "id": "IC_kwDOAQzde85s0g7v",
        "parentId": null,
        "author": "kriscremers",
        "content": "\u003E I have just discovered why any of the above was NOT working in my solution.\r\n\u003E \r\n\u003E I was creating builder in my \u0022Program.cs\u0022 like this: \u0060var builder = WebApplication.CreateBuilder();\u0060\r\n\u003E \r\n\u003E I tried all of the above and in all different places (like ConfigureWebHost, CreateHost, etc.). Nothing worked.\r\n\u003E \r\n\u003E Then I modified my Program.cs with this:\r\n\u003E \r\n\u003E \u0060var builder = WebApplication.CreateBuilder(args);\u0060\r\n\u003E \r\n\u003E And suddenly every method above was working. So by only adding **args** it is working (I guess it is identified as different method)\r\n\r\nOMG! \uD83E\uDD2F I spent nearly 2 days going through every possible permutation without success. This actually makes the WAF config work on dotnet 6! I had already resigned to using David\u0027s temporary workaround until I tried this.\r\n\r\nHere\u0027s my case: I couldn\u0027t get AddUserSecrets to load anything, which was problematic since it contains our AWS configuration settings.\r\n\r\n\u0060\u0060\u0060\r\npublic class TestBase : WebApplicationFactory\u003CProgram\u003E\r\n{\r\n    protected override IHost CreateHost(IHostBuilder builder)\r\n    {\r\n        builder.ConfigureHostConfiguration(configBuilder =\u003E\r\n        {\r\n            configBuilder.AddJsonFile(\u0022appsettings.json\u0022, false);\r\n            configBuilder.AddUserSecrets\u003CProgram\u003E(true, true);\r\n        });\r\n        builder.ConfigureServices(ConfigureServices);\r\n        \r\n        return base.CreateHost(builder);\r\n    }\r\n    \r\n    protected virtual void ConfigureServices(IServiceCollection services)\r\n    {\r\n    }\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2023-11-24T13:50:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1825705711"
      },
      {
        "id": "IC_kwDOAQzde85zBbKS",
        "parentId": null,
        "author": "tiaringhio",
        "content": "I want to add my experience in case anyone finds it useful:\r\n\r\ni\u0027m using .net 8 with testcontainers an therefore need to add my configurations, i thought i should clear the sources before adding news ones but i was wrong, just removing the line fixed the issue for my use case.\r\n\r\n\u0060\u0060\u0060c#\r\nprotected override IHost CreateHost(IHostBuilder builder)\r\n{\r\n    builder.ConfigureHostConfiguration(config =\u003E\r\n    {\r\n        //config.Sources.Clear(); \u003C-- removed this line right here\r\n\r\n        var configuration = new ConfigurationBuilder()\r\n            .AddUserSecrets(typeof(CustomWebApplicationFactory\u003CTProgram\u003E).Assembly, true, true)\r\n            .Build();\r\n        \r\n        config.AddConfiguration(configuration);\r\n        \r\n        config.Sources.Add(new MemoryConfigurationSource\r\n        {\r\n            InitialData = new Dictionary\u003Cstring, string\u003E\r\n            {\r\n                {\u0022ConnectionStrings:Database\u0022, _database.GetConnectionString().Replace(\u0022Database\u0022, \u0022Initial Catalog\u0022)},\r\n                {\u0022ConnectionStrings:Storage\u0022, _storage.GetConnectionString()},\r\n                {\u0022ConnectionStrings:Redis:Host\u0022, _redis.Hostname},\r\n                {\u0022ConnectionStrings:Redis:Password\u0022, string.Empty}\r\n            }!\r\n        });\r\n    });\r\n\r\n    return base.CreateHost(builder);\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2024-02-06T14:08:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1929753234"
      },
      {
        "id": "IC_kwDOAQzde8509vKL",
        "parentId": null,
        "author": "KennethHoff",
        "content": "@davidfowl This was not mentioned in any Asp.Net Core 9 \u0022what we are doing\u0022 posts. I\u0027m assuming that\u0027s mostly because this is a small change/bug fix? This is still in the plans, right?\r\n\r\nI\u0027m asking since it\u0027s still in the \u0060.Net 8 Planning\u0060 Milestone, despite it being launched months ago, and this doesn\u0027t feel like a \u0022Fix in Servicing\u0022 kind of issue.",
        "createdAt": "2024-02-24T12:05:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1962341003"
      },
      {
        "id": "IC_kwDOAQzde86F0H4O",
        "parentId": null,
        "author": "Dreamescaper",
        "content": "Is it still planned for dotnet 9?\r\nIt has net9 planning milestone, but not included in any net9 roadmaps.\r\nThanks!",
        "createdAt": "2024-07-23T11:56:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-2245033486"
      },
      {
        "id": "IC_kwDOAQzde86F0NZH",
        "parentId": null,
        "author": "martincostello",
        "content": "I\u0027m fairly sure at this point it will have missed the boat for inclusion in .NET 9 given no one appears to have done any work on it at all.",
        "createdAt": "2024-07-23T12:04:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-2245056071"
      },
      {
        "id": "IC_kwDOAQzde86OZsA0",
        "parentId": null,
        "author": "MrBliz",
        "content": "\u003E [This](https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-1235651426) seems to be the best workaround so far to override settings.\r\n\u003E \r\n\u003E Also the \u0060.ConfigureServices\u0060 seems to be executed AFTER the \u0060Program.cs\u0060 registrations, so it\u0027s a good place to remove/replace service registrations.\r\n\u003E \r\n\u003E With those two things it seems I can get by using mnimal API with .NET 7 without sacrificing integration tests or messing around with environment variables\r\n\u003E \r\n\u003E Example:\r\n\u003E \r\n\u003E \u0060\u0060\u0060\r\n\u003E protected IntegrationTestBase()\r\n\u003E {\r\n\u003E     // Workaround for overrides in .NET 7 and minimal API. See https://github.com/dotnet/aspnetcore/issues/37680\r\n\u003E     var testConfigurationBuilder =\r\n\u003E         new ConfigurationBuilder()\r\n\u003E             .AddInMemoryCollection(\r\n\u003E                 new List\u003CKeyValuePair\u003Cstring, string?\u003E\u003E\r\n\u003E                 {\r\n\u003E                     new(\u0022CoolSection:Colors:0\u0022, \u0022red\u0022),\r\n\u003E                     new(\u0022CoolSection:Colors:1\u0022, \u0022black\u0022),\r\n\u003E                 })\r\n\u003E             .Build();\r\n\u003E     \r\n\u003E     var webApplicationFactory =\r\n\u003E         new WebApplicationFactory\u003CProgram\u003E() // It requires public partial class Program { } at Program.cs in main assembly\r\n\u003E             .WithWebHostBuilder(webHostBuilder =\u003E\r\n\u003E                 webHostBuilder\r\n\u003E                     .UseEnvironment(\u0022Development\u0022)\r\n\u003E                     .UseConfiguration(testConfigurationBuilder)\r\n\u003E                     .ConfigureServices(TestServiceOverrides));\r\n\u003E     // ...\r\n\u003E }\r\n\u003E \r\n\u003E protected virtual void TestServiceOverrides(IServiceCollection servives)\r\n\u003E {\r\n\u003E      // Replace services in DI container. Virtual method so that test classes inheriting from IntegrationTestBase can override services also\r\n\u003E }\r\n\u003E \u0060\u0060\u0060\r\n\u003E \r\n\u003E Let\u0027s hope .NET 8 brings some good \u0060IWebHostedBuilder\u0060 methods that work for these purposes. Because \u0060ConfigureTestServices\u0060 and \u0060ConfigureAppConfiguration\u0060 right now are misleading.\r\n\r\nJust dropping into say this worked for me.",
        "createdAt": "2024-10-02T16:26:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-2389098548"
      },
      {
        "id": "IC_kwDOAQzde86aHCRo",
        "parentId": null,
        "author": "ZaqueuCavalcante",
        "content": "Just use old school Startup and Program classes works for me",
        "createdAt": "2025-01-12T01:32:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37680#issuecomment-2585535592"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde849kAdx",
    "title": "[Analyzer] Ensure Minimal API Endpoint Returns On All Paths",
    "url": "https://github.com/dotnet/aspnetcore/issues/37751",
    "createdAt": "2021-10-21T19:06:44Z",
    "lastUpdated": "2024-03-01T23:02:37Z",
    "body": "Given that a Minimal API endpoint uses the \u0060Delegate\u0060 or \u0060RequestDelegate\u0060 type, it is technically valid that not all paths have return values. While this is valid \u0060C#\u0060 code, it likely is not the intent of the developer. Here\u0027s an example of a compilable endpoint that results in an unintended result.\r\n\r\n![image](https://user-images.githubusercontent.com/228256/138340832-23e71cfc-9d7b-4efb-af95-5a0a3c2f927a.png)\r\n\r\nThe bug is subtle and could likely cause frustration.\r\n\r\n## Solution\r\n\r\nCreate an analyzer that determines if all paths in an endpoint result in a return value or exception being thrown. ",
    "upvotes": 13,
    "labels": [
      "analyzer",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde848XfJf",
        "parentId": null,
        "author": "Jcparkyn",
        "content": "I\u0027d be interested in having a go at implementing this, is it up for grabs?\r\n\r\nAlso, am I correct in thinking that there\u0027s no need to check all possible return paths, since the compiler already enforces that they have the same type (or void)? This only really needs to check that the lambda has a suitable return type. In other words, check whether \u0060lambda.Symbol.ReturnType\u0060 is \u0060void\u0060 or a non-generic \u0060Task\u0060, given the lambda expression as \u0060IAnonymousFunctionOperation\u0060.\r\n\r\nThe only obvious exception I can see to this rule is that the response can be written to via the \u0060HttpResponse\u0060 object, in which case the analyzer should be skipped.\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/\u0022, (HttpContext context) =\u003E\r\n{\r\n    context.Response.WriteAsync(\u0022foo\u0022);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nThe other concern is that it is valid and (I think) not that uncommon to intentionally have endpoints with no explicit return value, so should this analyzer only apply when using \u0060Results.x\u0060 or similar? Only for certain HTTP verbs?",
        "createdAt": "2022-01-14T05:33:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37751#issuecomment-1012789855"
      },
      {
        "id": "IC_kwDOAQzde848XihY",
        "parentId": null,
        "author": "davidfowl",
        "content": "This is why I think this a simple change. Maybe you warn if you return Task or void and you don\u0027t inject the or HttpContext/HttpResponse?",
        "createdAt": "2022-01-14T06:12:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37751#issuecomment-1012803672"
      },
      {
        "id": "IC_kwDOAQzde85MAXCi",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:18:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37751#issuecomment-1275162786"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde84-ECPy",
    "title": "add an analyzer to catch parameter name mismatches between route and [FromRoute] params",
    "url": "https://github.com/dotnet/aspnetcore/issues/37987",
    "createdAt": "2021-11-01T14:34:54Z",
    "lastUpdated": "2024-03-01T23:02:37Z",
    "body": "VS 2022 Preview 5, .net 6 preview rc2\r\n\r\nCurrently AFAICT a simple typo in a parameter name isn\u0027t caught by any analyzer - I changed these two lines from the default asp.net core web api proj but got no warning of the FromRoute param not being defined in the route (someParam), nor the Route attribute route having an unused param (somePram)\r\n\r\n\u0060\u0060\u0060csharp\r\n        [HttpGet, Route(\u0022/foo/{somePram}\u0022)]\r\n        public IEnumerable\u003CWeatherForecast\u003E Get([FromRoute] string someParam)\r\n\u0060\u0060\u0060\r\n\r\nThe somewhat good news is that you at least get a runtime failure with the required someParam not being bound thanks to nullable reference types and all, but it would be great to have something to catch this at design time if possible. The swagger surfacing both versions of the param helps the developer notice the mismatch as well.\r\n\r\n![image](https://user-images.githubusercontent.com/82121503/139688179-47e1679f-a9be-4068-b6cd-7a2a14815903.png)\r\n\r\nThere may be web api use cases that prevent this from being something that can be enabled by default, but as we\u0027ve had developers hit it multiple times, we wanted to at least ask.",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85MAXFu",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:18:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37987#issuecomment-1275162990"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde84-FwiR",
    "title": "Consider adding an API that enables invoking the default parameter binding logic of RequestDelegateFactory explicitly",
    "url": "https://github.com/dotnet/aspnetcore/issues/38003",
    "createdAt": "2021-11-01T22:24:09Z",
    "lastUpdated": "2024-03-01T23:57:28Z",
    "body": "We should consider adding an API that enables the ability to invoke the parameter binding logic inherent in \u0060RequestDelegateFactory\u0060 without having to create a \u0060RequestDelegate\u0060. This would be useful in situations where the default logic isn\u0027t invoked implicitly, e.g. when a complex parameter implements \u0060BindAsync\u0060, but invoking the behavior in an observable fashion would still add utility.\r\n\r\nSuch an API [exists in the MinimalApis.Extensions library](https://github.com/DamianEdwards/MinimalApis.Extensions/blob/main/src/MinimalApis.Extensions/Binding/DefaultBinderOfT.cs#L7) and is used by many of the included utility classes ([example](https://github.com/DamianEdwards/MinimalApis.Extensions/blob/main/src/MinimalApis.Extensions/Binding/BindOfT.cs#L42)).\r\n\r\nStrawman API proposal:\r\n\u0060\u0060\u0060 diff\r\npublic static class RequestDelegateFactory\r\n{\r\n\u002B    public static BindResult\u003CTValue\u003E BindParameterAsync\u003CTValue\u003E(HttpContext httpContext, ParameterInfo parameter);\r\n}\r\n\r\n\u002Bpublic class BindResult\u003CTValue\u003E\r\n\u002B{\r\n\u002B    public TValue? Value { get; }\r\n\u002B    public int? StatusCode { get; }\r\n\u002B    public void Deconstruct(out TValue? value, out int statusCode);\r\n\u002B}\r\n\u0060\u0060\u0060\r\n\r\n\r\nExample use:\r\n\u0060\u0060\u0060 c#\r\napp.MapPost(\u0022/widgets\u0022, (Param\u003CCreateWidget\u003E widget, WidgetDb db) =\u003E\r\n{\r\n    if (widget.AutoResponseStatusCode != 200)\r\n    {\r\n        // There was an issue binding, implement custom handling logic here\r\n        return Results.Problem(statusCode: widget.AutoResponseStatusCode);\r\n    }\r\n    var newWidget = db.Insert(widget);\r\n    return Results.Created($\u0022/widgets/{newWidget.Id}\u0022, newWidget);\r\n});\r\n\r\npublic class CreateWidget\r\n{\r\n    public string? Name { get; set; }\r\n}\r\n\r\npublic class Param\u003CTValue\u003E\r\n{\r\n    public Param(TValue? value)\r\n    {\r\n        Value = value;\r\n    }\r\n\r\n    public TValue? Value { get; }\r\n    public int AutoResponseStatusCode { get; init; } = 200;\r\n\r\n    public static async ValueTask\u003CParam\u003CTValue?\u003E\u003E BindAsync(HttpContext context, ParameterInfo parameter)\r\n    {\r\n        var (defaultValue, statusCode) = await RequestDelegateFactory.BindParameterAsync(context, parameter);\r\n        if (statusCode is not 200)\r\n        {\r\n            // The default logic would have implicitly returned due to an issue\r\n            return new Param(null) { AutoResponseStatusCode = statusCode };\r\n        }\r\n        return new Param(defaultValue);\r\n    }\r\n}\r\n\u0060\u0060\u0060",
    "upvotes": 1,
    "labels": [
      "enhancement",
      "triage-focus",
      "Priority:3",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde84_HnYa",
    "title": "Verification of Patch Request (The following request in image gave 500 error which can be prevented but do not)",
    "url": "https://github.com/dotnet/aspnetcore/issues/38540",
    "createdAt": "2021-11-19T22:16:43Z",
    "lastUpdated": "2023-06-20T22:30:48Z",
    "body": "I am not sure which Library is responsible for this issue and I am sorry if it is not related to this repo. I am trying to implement a Patch Request API using Asp.Net Core API 5.0 and so I have a parameter in my Controller Action which Takes \u0060JsonPatchDocument\u003CT\u003E\u0060. As I tried it I noticed that we should have three stage of verification for this model including:\r\n0- Validation of \u0060JsonPatchDocument\u0060 according to Rest Standard (for example it should be an array! its element have standard shape including \u0060op\u0060 and \u0060path\u0060 and other constraints). This Validation should done after binding model and **it do not happen now**\r\n1- Validation of \u0060JsonPatchDocument\u0060 according to our Entity Type (For example does selected \u0060path\u0060 existed in our entity)\r\n2- Validation of Resulted \u0060T\u0060 model from applying requested patch (for example field is email type and other verification attributes added to model \u0060T\u0060.\r\n \r\nFrom the above list the validations 1 and 2 happens and is okay but validation 0 does not handle which I think it should be an step right after model binding. For example when sending the following patch request I get 500 status code error.\r\n![image](https://user-images.githubusercontent.com/48277995/142697357-48d34bac-9e68-4f26-816e-7f79f78b32af.png)\r\nThe action responsible for this code is as below:\r\n\r\n\u0060\r\n\r\n        [HttpPatch(\u0022{id}\u0022)]\r\n        public IActionResult PartiallyUpdateEmployee(Guid companyId, [FromRoute(Name = \u0022id\u0022)] Guid employeeId, JsonPatchDocument\u003CEmployeeForUpdateDto\u003E input)\r\n        {\r\n            if (input == null)\r\n            {\r\n                _logger.LogError($\u0022The Patch body is null for request {HttpContext.TraceIdentifier}\u0022);\r\n                return BadRequest(\u0022Patch reuest body is null\u0022);\r\n            }\r\n            if (ModelState.IsValid) // *******This is where Validation 0 should  prevent the code from continuing and not**************\r\n            {\r\n                // check company is not null\r\n                var company = _repository.Company.GetById(companyId, false);\r\n                if (company == null)\r\n                {\r\n                    _logger.LogInfo($\u0022{HttpContext.TraceIdentifier}: the company with Id {companyId} does not exist in database\u0022);\r\n                    return NotFound();\r\n                }\r\n\r\n                var employee = _repository.Employee.GetEmployee(companyId, employeeId, true);\r\n                if (employee == null)\r\n                {\r\n                    _logger.LogInfo($\u0022{HttpContext.TraceIdentifier}: the employee with Id {employeeId} for Company with Id {companyId} does not exist in database\u0022);\r\n                    return NotFound();\r\n                }\r\n\r\n                var entityPart = _mapper.Map\u003CEmployeeForUpdateDto\u003E(employee);\r\n\r\n                // In the following we have two (plus one!) type of validation\r\n              \r\n                input.ApplyTo(entityPart, ModelState); // Verification stage 1 which works as expected\r\n                TryValidateModel(entityPart); // Verification stage 2 which works as expected\r\n                // since Model State changed we should recheck it here\r\n                if (ModelState.IsValid)\r\n                {\r\n                    _mapper.Map(entityPart, employee); \r\n                    _repository.Save();\r\n                    //return changed employee to user\r\n                    var output = _mapper.Map\u003CEmployeeDto\u003E(employee);\r\n                    return Ok(output);\r\n                }\r\n\r\n            }\r\n            return BadRequest(ModelState);\r\n        }\u0060\r\n\u0060  \u0060\r\nI have added the following library for handling JsonPatchDocument\r\n\u0060Microsoft.AspNetCore.JsonPatch\u0060\r\nAnd I appreciate if checking the request against REST Standard for patch request done some where to prevent 500 status code error.\r\nMy Response\r\n![image](https://user-images.githubusercontent.com/48277995/142699134-fae03804-936d-4a80-8fb3-d0221fc87aa5.png)\r\nMy logs:\r\n![image](https://user-images.githubusercontent.com/48277995/142699228-dff837fd-1253-4f4a-bb6e-2f691b3a732f.png)\r\nand the related repository to test this:\r\nhttps://github.com/CodeMazeBlog/httpclient-aspnetcore/tree/main/starter/CompanyEmployees\r\n",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "feature-json-patch",
      "area-minimal",
      "area-networking"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde846P04A",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-11-23T22:25:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38540#issuecomment-977227264"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde84_Qnca",
    "title": "Clone StartupAnalyzer in to Framework analyzers",
    "url": "https://github.com/dotnet/aspnetcore/issues/38590",
    "createdAt": "2021-11-23T13:59:37Z",
    "lastUpdated": "2024-03-01T23:02:38Z",
    "body": "StartupAnalyzers currently ship as part of the SDK and apply to all apps targeting .NET Core 3.1 and newer. If we\u0027d like to introduce new recommendations that specifically target 6.0, one option might be to clone it in to Framework Analyzers and leave the ones targeting the SDK alone. Another option might be to see if we\u0027re able to read the TFM inside the analyzer.",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde846PxxF",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-11-23T22:10:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38590#issuecomment-977214533"
      },
      {
        "id": "IC_kwDOAQzde85MAXH5",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:19:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38590#issuecomment-1275163129"
      },
      {
        "id": "IC_kwDOAQzde85hdaO8",
        "parentId": null,
        "author": "david-acker",
        "content": "It sounds like this would be relevant to [[Analyzer] : Warn when registering custom IProblemDetailsWriter after calling AddRazorPages, etc #48180](https://github.com/dotnet/aspnetcore/issues/48180) since this new analyzer would leverage the existing \u0060StartupAnalyzer\u0060, but \u0060IProblemDetailsWriter\u0060 only exists in 7.0\u002B.\r\n\r\nWould it make sense to handle this first before adding the analyzer above?",
        "createdAt": "2023-07-14T00:48:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38590#issuecomment-1635099580"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde84_QoVb",
    "title": "Update StartupAnalyzer to recommend calling UseStatusCodePages after UseRouting",
    "url": "https://github.com/dotnet/aspnetcore/issues/38591",
    "createdAt": "2021-11-23T14:03:06Z",
    "lastUpdated": "2024-03-01T23:02:38Z",
    "body": "As a follow up to https://github.com/dotnet/aspnetcore/pull/38509, we should add a startup analyzer that recommends ordering \u0060UseStatusCodePages\u0060 after \u0060UseRouting\u0060 . This is somewhat contingent on https://github.com/dotnet/aspnetcore/issues/38590 being done as we really don\u0027t want this analysis to start appearing for apps targeting .net6 or earlier (which is what would happen if we add new rules to the ones shipping via the SDK).",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde846PxmI",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-11-23T22:09:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38591#issuecomment-977213832"
      },
      {
        "id": "IC_kwDOAQzde85MAXJL",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:19:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38591#issuecomment-1275163211"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde84_mbTr",
    "title": "ASP.NET Core 5.0 still has issues with model binding positional records when running solution from VS 2019?",
    "url": "https://github.com/dotnet/aspnetcore/issues/38713",
    "createdAt": "2021-11-30T10:07:22Z",
    "lastUpdated": "2024-03-01T23:02:39Z",
    "body": "This has been a [resolved issue](https://github.com/dotnet/aspnetcore/issues/31077) for quite awhile now, but it seems it got merged into 6.0-rc1.\r\n\r\nWill this fix ever be ported to .NET 5.0, or will clients be forced to update their visual studio In order to utilize the 6.0 SDK?\r\n\r\nThe weird thing is that the project is still using the same .NET version in both Visual studio versions. So I\u0027m guessing when you\u0027re running VS 2022, you implicitly use the latest SDK on your system that Visual Studio supports (i.e 6.0 for 2022), and that fixes the issue? I\u0027m speculating here, so I\u0027m probably terribly wrong. \r\n\r\nReally interested to learn what\u0027s actually going on here.\r\n\r\nJust in case you need this:\r\n\r\n\u0060\u0060\u0060\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19043\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0\r\n  Commit:  4822e3c3aa\r\n\r\n.NET SDKs installed:\r\n  3.1.120 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.200-preview-015002 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.300-preview-015135 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.415 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.104 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.403 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\nMicrosoft Visual Studio Enterprise 2019 Preview\r\nVersion 16.11.7 Preview 1.0\r\n\u0060\u0060\u0060\r\n",
    "upvotes": 0,
    "labels": [
      "investigate",
      "feature-model-binding",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde846kxuU",
        "parentId": null,
        "author": "pranavkm",
        "content": "\u003E Will this fix ever be ported to .NET 5.0, or will clients be forced to update their visual studio In order to utilize the 6.0 SDK?\r\n\r\nThe enhancement is in .NET 6 and you\u0027ll have to [update your app](https://docs.microsoft.com/aspnet/core/migration/50-to-60?view=aspnetcore-6.0\u0026tabs=visual-studio) to start using it. ",
        "createdAt": "2021-11-30T15:02:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38713#issuecomment-982719380"
      },
      {
        "id": "IC_kwDOAQzde846lC2x",
        "parentId": null,
        "author": "kikaragyozov",
        "content": "\u003E \u003E Will this fix ever be ported to .NET 5.0, or will clients be forced to update their visual studio In order to utilize the 6.0 SDK?\r\n\u003E \r\n\u003E The enhancement is in .NET 6 and you\u0027ll have to [update your app](https://docs.microsoft.com/aspnet/core/migration/50-to-60?view=aspnetcore-6.0\u0026tabs=visual-studio) to start using it.\r\n\r\nI\u0027m a bit confused.\r\n\r\nThe ASP NET Core version that\u0027s being used is 5.0. When using VS 2019, you get an exception, when using VS 2022, everything works.\r\n\r\nHow is it part of .NET 6 when the project is being compiled in .NET 5 in both versions of the Visual Studio?",
        "createdAt": "2021-11-30T16:15:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38713#issuecomment-982789553"
      },
      {
        "id": "IC_kwDOAQzde846orWp",
        "parentId": null,
        "author": "pranavkm",
        "content": "\u003E How is it part of .NET 6 when the project is being compiled in .NET 5 in both versions of the Visual Studio?\r\n\r\nThat sounds really surprising. Do you happen to have a minimal app that demonstrates this?",
        "createdAt": "2021-12-01T15:16:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38713#issuecomment-983741865"
      },
      {
        "id": "IC_kwDOAQzde846o0zB",
        "parentId": null,
        "author": "kikaragyozov",
        "content": "\u003E \u003E How is it part of .NET 6 when the project is being compiled in .NET 5 in both versions of the Visual Studio?\r\n\u003E \r\n\u003E That sounds really surprising. Do you happen to have a minimal app that demonstrates this?\r\n\r\nI\u0027ll setup one in about 2 hours. I\u0027ll let you know as soon as it\u0027s done!",
        "createdAt": "2021-12-01T15:56:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38713#issuecomment-983780545"
      },
      {
        "id": "IC_kwDOAQzde846pPvT",
        "parentId": null,
        "author": "kikaragyozov",
        "content": "@pranavkm https://github.com/SpiritBob/Records-Inheritance\r\n\r\nSteps to reproduce:\r\n\r\n1. Open with VS 2019\r\n2. Run (Build) the application. A swagger page will open, just execute the request as-is (no need to define any values/properties).\r\n3. Exception appears.\r\n4. Close VS 2019 (make sure IIS Express is also down)\r\n5. Open VS 2022\r\n6. Clean the solution.\r\n7. Repeat Step 2.\r\n8. No exception appears.\r\n\r\n**EDIT:** I\u0027m genuinely curious what is going on under the covers. I thought Visual Studio itself has **NOTHING** to do with code inside a framework such as ASP.NET Core, but rather the SDKs, right?",
        "createdAt": "2021-12-01T17:50:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38713#issuecomment-983890899"
      },
      {
        "id": "IC_kwDOAQzde846tQmQ",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-12-02T19:39:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38713#issuecomment-984942992"
      },
      {
        "id": "IC_kwDOAQzde846tT9m",
        "parentId": null,
        "author": "halter73",
        "content": "@SpiritBob If you add a \u0060global.json\u0060 specifying the 6.0.100 SDK, does it start working in 2019 again? Is there some reason you cannot upgrade the runtime to \u0060net6.0\u0060 as well?\r\n\r\n\u0060\u0060\u0060json\r\n{\r\n  \u0022sdk\u0022: {\r\n    \u0022version\u0022: \u00226.0.100\u0022\r\n  }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n@CyrusNajmabadi do you know if there were there any compiler changes in .NET 6 that would make the following change from https://github.com/dotnet/aspnetcore/pull/34618 unnecessary for finding positional records that inherit from another positional record?\r\n\r\n\u0060\u0060\u0060diff\r\n            static bool IsRecordType(Type type)\r\n            {\r\n                // Based on the state of the art as described in https://github.com/dotnet/roslyn/issues/45777\r\n                var cloneMethod = type.GetMethod(\u0022\u003CClone\u003E$\u0022, BindingFlags.Public | BindingFlags.Instance);\r\n-               return cloneMethod != null \u0026\u0026 cloneMethod.ReturnType == type;\r\n\u002B               return cloneMethod != null \u0026\u0026 (cloneMethod.ReturnType == type || cloneMethod.ReturnType == type.BaseType);\r\n            }\r\n\u0060\u0060\u0060\r\n\r\nLooking at the \u0060IsRecordType\u0060 \u0022fix\u0022, I\u0027m surprised we ever even bothered to check the return type for a method with the unspeakable name \u0022\u003CClone\u003E$\u0022. That by itself seems like enough to confidently consider a type a record. It\u0027s also not clear to me if the fix would even work given more than one level of inheritance. @pranavkm ",
        "createdAt": "2021-12-02T19:59:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38713#issuecomment-984956774"
      },
      {
        "id": "IC_kwDOAQzde846ul9C",
        "parentId": null,
        "author": "kikaragyozov",
        "content": "@halter73 When I added the \u0060global.json\u0060 to the solution\u0027s folder, cleaning \u0026 rebuilding made no difference when done from within Visual studio. If I ran the commands manually though - \u0060dotnet clean\u0060 and \u0060dotnet build\u0060 and then started the project, the issue was gone.\r\n\r\n\r\n**EDIT:** Seems the \u0060global.json\u0060 file had 0 impact. If I ran the commands without it, I still get the same result.\r\n\r\nWe can upgrade anytime to .NET 6, but seeing https://github.com/dotnet/aspnetcore/issues/38722 made us wait it out a bit.",
        "createdAt": "2021-12-03T07:56:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38713#issuecomment-985292610"
      },
      {
        "id": "IC_kwDOAQzde847jKer",
        "parentId": null,
        "author": "Andrei15193",
        "content": "\u003E @SpiritBob If you add a \u0060global.json\u0060 specifying the 6.0.100 SDK, does it start working in 2019 again? Is there some reason you cannot upgrade the runtime to \u0060net6.0\u0060 as well?\r\n\u003E \r\n\u003E \u0060\u0060\u0060json\r\n\u003E {\r\n\u003E   \u0022sdk\u0022: {\r\n\u003E     \u0022version\u0022: \u00226.0.100\u0022\r\n\u003E   }\r\n\u003E }\r\n\u003E \u0060\u0060\u0060\r\n\u003E \r\n\u003E @CyrusNajmabadi do you know if there were there any compiler changes in .NET 6 that would make the following change from #34618 unnecessary for finding positional records that inherit from another positional record?\r\n\u003E \r\n\u003E \u0060\u0060\u0060diff\r\n\u003E             static bool IsRecordType(Type type)\r\n\u003E             {\r\n\u003E                 // Based on the state of the art as described in https://github.com/dotnet/roslyn/issues/45777\r\n\u003E                 var cloneMethod = type.GetMethod(\u0022\u003CClone\u003E$\u0022, BindingFlags.Public | BindingFlags.Instance);\r\n\u003E -               return cloneMethod != null \u0026\u0026 cloneMethod.ReturnType == type;\r\n\u003E \u002B               return cloneMethod != null \u0026\u0026 (cloneMethod.ReturnType == type || cloneMethod.ReturnType == type.BaseType);\r\n\u003E             }\r\n\u003E \u0060\u0060\u0060\r\n\u003E \r\n\u003E Looking at the \u0060IsRecordType\u0060 \u0022fix\u0022, I\u0027m surprised we ever even bothered to check the return type for a method with the unspeakable name \u0022$\u0022. That by itself seems like enough to confidently consider a type a record. It\u0027s also not clear to me if the fix would even work given more than one level of inheritance. @pranavkm\r\n\r\nI was looking into how to determine if a type is a record type and used the same approach as in this repository, exactly the method you refer to. I ran into the same issue where I provided record type and the method didn\u0027t agree.\r\n\r\nIn my case it was because of record inheritance, and to completely cover that I think [IsAssignableFrom](https://docs.microsoft.com/dotnet/api/system.type.isassignablefrom?view=net-5.0) should be used. The check for the base type does not work if you have a 3-level (or more) record hierarchy.\r\n\r\n\u0060\u0060\u0060c#\r\nrecord Level1;\r\nrecord Level2: Level1;\r\nrecord Level3: Level2;\r\n\r\nIsRecordType(typeof(Level1)) =\u003E true;\r\nIsRecordType(typeof(Level2)) =\u003E true;\r\nIsRecordType(typeof(Level3)) =\u003E false;\r\n\u0060\u0060\u0060\r\n\r\nThis is what I ended up using:\r\n\r\n\u0060\u0060\u0060c#\r\nstatic bool IsRecordType(Type type)\r\n    =\u003E type.GetMethod(\u0022\u003CClone\u003E$\u0022, BindingFlags.Public | BindingFlags.Instance)?.ReturnType.IsAssignableFrom(type) is true;\r\n\u0060\u0060\u0060",
        "createdAt": "2021-12-21T20:29:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38713#issuecomment-999073707"
      },
      {
        "id": "IC_kwDOAQzde85MAXMC",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:19:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38713#issuecomment-1275163394"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde84_spo1",
    "title": "Modify startup assemblies using the minimal hosting model",
    "url": "https://github.com/dotnet/aspnetcore/issues/38765",
    "createdAt": "2021-12-01T17:07:57Z",
    "lastUpdated": "2024-03-01T23:57:28Z",
    "body": "Is there a way to modify the startup assemblies using the minimal hosting model?\r\n\r\nIn ASP.NET Core 5 I would say the following (where \u0060hostBuilder\u0060 is an instance of \u0060IWebHostBuilder\u0060):\r\n\r\n\u0060\u0060\u0060\r\nhostBuilder.UseSetting(WebHostDefaults.HostingStartupAssembliesKey, string.Join(\u0022;\u0022, assemblies));\r\n\u0060\u0060\u0060\r\n\r\nWith the new minimal hosting model I tried saying:\r\n\r\n\u0060\u0060\u0060\r\nbuilder.WebHost.UseSetting(WebHostDefaults.HostingStartupAssembliesKey, string.Join(\u0022;\u0022, assemblies));\r\n\u0060\u0060\u0060\r\n\r\nHowever this throws a \u0060NotSupportedException\u0060 and that I should use \u0060WebApplication.CreateBuilder(WebApplicationOptions)\u0060 instead, but I can\u0027t see an option to specify the hosting startup assemblies.",
    "upvotes": 1,
    "labels": [
      "feature-minimal-hosting",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde846pHIN",
        "parentId": null,
        "author": "davidfowl",
        "content": "This only works via environment variables with the minimal host. We didn\u0027t add it as a first class option because it was deemed more obscure to do it in code than other options.",
        "createdAt": "2021-12-01T17:16:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38765#issuecomment-983855629"
      },
      {
        "id": "IC_kwDOAQzde846pSuJ",
        "parentId": null,
        "author": "nfplee",
        "content": "Thanks but I can\u2019t see how i can achieve this using environment variables since the list of assemblies is dynamic.",
        "createdAt": "2021-12-01T17:56:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38765#issuecomment-983903113"
      },
      {
        "id": "IC_kwDOAQzde846pcyA",
        "parentId": null,
        "author": "davidfowl",
        "content": "What\u0027s the scenario?",
        "createdAt": "2021-12-01T18:34:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38765#issuecomment-983944320"
      },
      {
        "id": "IC_kwDOAQzde846pr1d",
        "parentId": null,
        "author": "nfplee",
        "content": "I split the areas of all my sites into Razor class libraries. This allows me to modularize my site aswell as use the same libraries in other sites (as package references). Each library has its own dependencies and hosting startup classes allow me to register them for each one. Therefore I use the following to scan for any potential assemblies:\r\n\r\n\u0060\u0060\u0060\r\nvar assemblies = DependencyContext.Default.GetRuntimeAssemblyNames(Environment.OSVersion.Platform.ToString())\r\n    .Select(n =\u003E n.Name);\r\n\u0060\u0060\u0060\r\n\r\nThen I just set the hosting startup assemblies key as mentioned previously.\r\n\r\nI have multiple sites with multiple modules and having to manually set this for each one is quite tiresome. Also I would have to remember to alter it every time I add a new package reference to another module. Therefore I find the dynamic approach a lot easier.",
        "createdAt": "2021-12-01T19:58:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38765#issuecomment-984005981"
      },
      {
        "id": "IC_kwDOAQzde846tO_5",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-12-02T19:30:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38765#issuecomment-984936441"
      },
      {
        "id": "IC_kwDOAQzde846tW5U",
        "parentId": null,
        "author": "halter73",
        "content": "After reading this more, I\u0027m moving it out of the backlog so we can triage again. At the very least, we should update the exception message to indicate you need to modify environment variables.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/e72a193ca36e511c210387d22f4be08487a6a3cd/src/DefaultBuilder/src/ConfigureWebHostBuilder.cs#L149-L150\r\n\r\nIf it\u0027s common enough to use non-default hosting startup assemblies, we could consider adding a property to \u0060WebApplicationOptions\u0060 though. For now, does putting something like the following before \u0060WebApplication.CreateBuilder(args)\u0060 work for you @nfplee?\r\n\r\n\u0060\u0060\u0060C#\r\nEnvironment.SetEnvironmentVariable($\u0022ASPNET_{WebHostDefaults.HostingStartupAssembliesKey}\u0022, string.Join(\u0022;\u0022, assemblies));\r\n\u0060\u0060\u0060\r\n\r\nEDIT:\r\n\r\nAs noted down thread, the environment variable should have been prefixed with \u0060ASPNETCORE_\u0060.\r\n\r\n\u0060\u0060\u0060C#\r\nEnvironment.SetEnvironmentVariable($\u0022ASPNETCORE_{WebHostDefaults.HostingStartupAssembliesKey}\u0022, string.Join(\u0022;\u0022, assemblies));\r\n\u0060\u0060\u0060",
        "createdAt": "2021-12-02T20:17:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38765#issuecomment-984968788"
      },
      {
        "id": "IC_kwDOAQzde846v2KO",
        "parentId": null,
        "author": "nfplee",
        "content": "Thanks @halter73 but this now throws the following error (the whole error is much longer):\r\n\r\n\u003E AggregateException: Some services are not able to be constructed (Error while validating the service descriptor \u0027ServiceType: Microsoft.AspNetCore.Routing.Matching.DfaMatcherBuilder Lifetime: Transient ImplementationType: Microsoft.AspNetCore.Routing.Matching.DfaMatcherBuilder\u0027...\r\n\r\nThis is when saying:\r\n\r\n\u0060\u0060\u0060cs\r\nvar assemblies = DependencyContext.Default.GetRuntimeAssemblyNames(Environment.OSVersion.Platform.ToString())\r\n    .Select(n =\u003E n.Name);\r\n\r\nEnvironment.SetEnvironmentVariable($\u0022ASPNET_{WebHostDefaults.HostingStartupAssembliesKey}\u0022, string.Join(\u0022;\u0022, assemblies));\r\n\r\nWebApplication.Create(args)\r\n    .Run();\r\n\u0060\u0060\u0060\r\n\r\nHowever the following works fine:\r\n\r\n\u0060\u0060\u0060cs\r\nvar assemblies = DependencyContext.Default.GetRuntimeAssemblyNames(Environment.OSVersion.Platform.ToString())\r\n    .Select(n =\u003E n.Name);\r\n\r\nHost.CreateDefaultBuilder(args)\r\n    .ConfigureWebHostDefaults(builder =\u003E builder.UseSetting(WebHostDefaults.HostingStartupAssembliesKey, string.Join(\u0022;\u0022, assemblies)))\r\n    .Build()\r\n    .Run();\r\n\u0060\u0060\u0060",
        "createdAt": "2021-12-03T15:41:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38765#issuecomment-985621134"
      },
      {
        "id": "IC_kwDOAQzde846wIm-",
        "parentId": null,
        "author": "davidfowl",
        "content": "Can you show more details? What does your hosting startup do? Seems like its trying to build the service provider while configuring services maybe?",
        "createdAt": "2021-12-03T17:24:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38765#issuecomment-985696702"
      },
      {
        "id": "IC_kwDOAQzde846yjIT",
        "parentId": null,
        "author": "nfplee",
        "content": "@halter73 @davidfowl it looks like the hosting startup files are not called. Here\u0027s a sample application which shows it working:\r\n\r\n[SampleApplication.zip](https://github.com/dotnet/aspnetcore/files/7657065/SampleApplication.zip)\r\n\r\nIf you comment out the old code (in the Program.cs file) and un-comment the minimal API code it does not work.",
        "createdAt": "2021-12-06T00:06:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38765#issuecomment-986329619"
      },
      {
        "id": "IC_kwDOAQzde8467eHw",
        "parentId": null,
        "author": "nfplee",
        "content": "Changing the environment variable prefix to \u0022ASPNETCORE\u0022 from \u0022ASPNET\u0022 fixed this. I\u0027ll leave this open incase you wish to make this simpler or improve the error message as mentioned above by @halter73.",
        "createdAt": "2021-12-08T10:03:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38765#issuecomment-988668400"
      },
      {
        "id": "IC_kwDOAQzde847jYvI",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-12-21T22:18:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38765#issuecomment-999132104"
      },
      {
        "id": "IC_kwDOAQzde85MAXNT",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:19:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38765#issuecomment-1275163475"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde84_0Qsj",
    "title": "Microsoft.AspNetCore.Mvc.Testing 6.0.0 has concurrency issues on filesystem",
    "url": "https://github.com/dotnet/aspnetcore/issues/38808",
    "createdAt": "2021-12-03T14:45:53Z",
    "lastUpdated": "2024-11-14T02:02:31Z",
    "body": "### Describe the bug\r\nAfter Upgrading to Microsoft.AspNetCore.Mvc.Testing 6.0.0 we are encountering concurrency issus on dotnet publish tasks.\r\nBelow you find a minimal repo to reproduce the issue. The setup is following. We have a testhelper project that references the Microsoft.AspNetCore.Mvc.Testing 6.0.0 Nuget. Two projects referencing the testhelpers. So the two testprojects have implicit references to Microsoft.AspNetCore.Mvc.Testing. On publish the following issue seen under Exceptions.\r\nThe issue is not persistant and happens only in some cases. Around 25 % of the publishes. So the minimal repo contains a runner script that loops over the given buildsteps in a Dockerfile. \r\n\r\n### To Reproduce\r\nPrerequisites: Docker and Shell \r\n\r\nClone Repo https://github.com/lippinio/concurrency\r\nchmod \u002Bx runner.sh\r\nRun runner.sh\r\n\r\n### Exception\r\n\r\n\u003E \u0060 \u003E [6/6] RUN dotnet publish ./concurrency.sln --configuration Release --no-build --output ./out:                                                                                                                                                                                                                         \r\n#10 0.504 Microsoft (R) Build Engine version 17.0.0\u002Bc9eb9dd64 for .NET                                                                                                                                                                                                                                                   \r\n#10 0.504 Copyright (C) Microsoft Corporation. All rights reserved.\r\n#10 0.504 \r\n#10 1.439   testhelpers -\u003E /app/out/\r\n#10 1.854 /root/.nuget/packages/microsoft.aspnetcore.mvc.testing/6.0.0/build/net6.0/Microsoft.AspNetCore.Mvc.Testing.targets(57,5): error MSB4018: The \u0022GenerateMvcTestManifestTask\u0022 task failed unexpectedly. [/app/tests1/tests1.csproj]\r\n#10 1.854 /root/.nuget/packages/microsoft.aspnetcore.mvc.testing/6.0.0/build/net6.0/Microsoft.AspNetCore.Mvc.Testing.targets(57,5): error MSB4018: System.IO.IOException: The process cannot access the file \u0027/app/out/MvcTestingAppManifest.json\u0027 because it is being used by another process. [/app/tests1/tests1.csproj]\r\n#10 1.854 /root/.nuget/packages/microsoft.aspnetcore.mvc.testing/6.0.0/build/net6.0/Microsoft.AspNetCore.Mvc.Testing.targets(57,5): error MSB4018:    at Microsoft.Win32.SafeHandles.SafeFileHandle.Init(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize) [/app/tests1/tests1.csproj]\r\n#10 1.854 /root/.nuget/packages/microsoft.aspnetcore.mvc.testing/6.0.0/build/net6.0/Microsoft.AspNetCore.Mvc.Testing.targets(57,5): error MSB4018:    at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize) [/app/tests1/tests1.csproj]\r\n#10 1.854 /root/.nuget/packages/microsoft.aspnetcore.mvc.testing/6.0.0/build/net6.0/Microsoft.AspNetCore.Mvc.Testing.targets(57,5): error MSB4018:    at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize) [/app/tests1/tests1.csproj]\r\n#10 1.854 /root/.nuget/packages/microsoft.aspnetcore.mvc.testing/6.0.0/build/net6.0/Microsoft.AspNetCore.Mvc.Testing.targets(57,5): error MSB4018:    at Microsoft.AspNetCore.Mvc.Testing.Tasks.GenerateMvcTestManifestTask.Execute() [/app/tests1/tests1.csproj]\r\n#10 1.854 /root/.nuget/packages/microsoft.aspnetcore.mvc.testing/6.0.0/build/net6.0/Microsoft.AspNetCore.Mvc.Testing.targets(57,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [/app/tests1/tests1.csproj]\r\n#10 1.854 /root/.nuget/packages/microsoft.aspnetcore.mvc.testing/6.0.0/build/net6.0/Microsoft.AspNetCore.Mvc.Testing.targets(57,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [/app/tests1/tests1.csproj]\r\n\u0060\r\n",
    "upvotes": 12,
    "labels": [
      "investigate",
      "area-mvc",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde8466Fh4",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-12-07T22:25:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38808#issuecomment-988305528"
      },
      {
        "id": "IC_kwDOAQzde85MAXOH",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:19:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38808#issuecomment-1275163527"
      },
      {
        "id": "IC_kwDOAQzde85ePqr9",
        "parentId": null,
        "author": "chklauser",
        "content": "We are affected by this bug. It randomly causes CI builds to fail. (Maybe 10% of all builds). This is annoying because each instance requires manual assessment and intervention.\r\n\r\nI am pretty firmly of the opinion that this is an issue of the ASP.NET testing framework (hard-coded path that conflicts if you have multiple ASP.NET applications and corresponding test projects in the same solution). \r\n\r\nI find it reasonable to use this approach (hard-coded path) as a default so that simple solutions (single ASP.NET application) \u0022just work\u0022. But the framework _should_ also offer a mechanism/escape hatch to scale to multiple ASP.NET applications in a single solution.",
        "createdAt": "2023-06-07T16:29:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38808#issuecomment-1581165309"
      },
      {
        "id": "IC_kwDOAQzde86ILC2p",
        "parentId": null,
        "author": "mycarrysun",
        "content": "We\u0027re getting this on tons of our builds as well. Works on retry about 50% of the time.",
        "createdAt": "2024-08-12T17:50:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38808#issuecomment-2284596649"
      },
      {
        "id": "IC_kwDOAQzde86TReX_",
        "parentId": null,
        "author": "lucas-dclrcq",
        "content": "This is still a recurring issue, 3 years later.",
        "createdAt": "2024-11-12T15:24:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38808#issuecomment-2470831615"
      },
      {
        "id": "IC_kwDOAQzde86TiK8s",
        "parentId": null,
        "author": "jusvit",
        "content": "Still happening on .NET 9.0",
        "createdAt": "2024-11-14T02:02:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38808#issuecomment-2475208492"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde84_-SAp",
    "title": "Issue comparing decimals in JsonPatch tests",
    "url": "https://github.com/dotnet/aspnetcore/issues/38856",
    "createdAt": "2021-12-07T12:23:56Z",
    "lastUpdated": "2023-06-20T22:30:52Z",
    "body": "1. If an existing decimal value is \u00601.0M\u0060 and a patch document has a test value of \u00601\u0060 then there is no error when applying the test.\r\n\r\n2. If an existing decimal value is \u00601.00M\u0060 and a patch document has a test value of \u00601\u0060 then the test fails with the message:\r\n\u0060The current value \u00271.00\u0027 at path \u0027decimal\u0027 is not equal to the test value \u00271\u0027.\u0060\r\n\r\nI believe the behaviour in scenario 1 is correct because APIs should be liberal in what they accept; a consumer of the API shouldn\u0027t be told that 1.0 doesn\u0027t equal 1, which would seem quite pedantic.\r\n\r\nBased on this, I feel like scenario 2 is a bug. We have a lot of database columns which have this precision and it makes them harder to patch. Are there any workarounds?\r\n\r\nMinimal repro (for scenario 2, easy to tweak for scenario 1)\r\n\r\n\u0060\u0060\u0060C#\r\n{\r\n    var incomingOperations = new[]\r\n    {\r\n        new Operation\r\n        {\r\n            op = \u0022test\u0022,\r\n            path = \u0022/decimal\u0022,\r\n            value = 1\r\n        },\r\n        new Operation\r\n        {\r\n            op = \u0022replace\u0022,\r\n            path = \u0022/decimal\u0022,\r\n            value = 2\r\n        }\r\n    };\r\n\r\n    var incomingJson = JsonConvert.SerializeObject(incomingOperations);\r\n\r\n    var document = JsonConvert.DeserializeObject\u003CJsonPatchDocument\u003CTest\u003E\u003E(incomingJson);\r\n\r\n    var existingEntity = new Test { Decimal = 1.00M };\r\n\r\n    document.ApplyTo(existingEntity, x =\u003E Debug.WriteLine(x.ErrorMessage));\r\n}\r\n\r\npublic class Test\r\n{\r\n    public decimal Decimal { get; set; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nUsing 3.1",
    "upvotes": 2,
    "labels": [
      "area-mvc",
      "feature-json-patch",
      "area-minimal",
      "area-networking"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde8466FSa",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-12-07T22:23:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38856#issuecomment-988304538"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde84__uX0",
    "title": "JsonPatch test operation error message has values not used in the actual test",
    "url": "https://github.com/dotnet/aspnetcore/issues/38872",
    "createdAt": "2021-12-07T19:01:46Z",
    "lastUpdated": "2023-06-20T22:30:53Z",
    "body": "Take the example below where the patch test value doesn\u0027t have a \u0022Z\u0022 or offset etc., so by default Newtonsoft deserializes as DateTime with DateTimeKind.Unspecified and roundtrips that when serializing.\r\n\r\nI believe the patch test compares serialized versions of the values, so the test does not pass because the existing UTC value will be serialized with a \u0022Z\u0022 while the patch test value won\u0027t - this is fair enough, the test value should probably have the Z in order to pass.\r\n\r\nHowever, the error message is:\r\n\u0060The current value \u002701/01/2000 01:01:01\u0027 at path \u0027utcDateTime\u0027 is not equal to the test value \u002701/01/2000 01:01:01\u0027.\u0060\r\n\r\nIt appears that while the test uses the JSON serialized values, the message uses ToString() values, which leads to an incorrect, or at least confusing, message.\r\n\r\n3.1\r\n\u0060\u0060\u0060C#\r\n{\r\n    var incomingOperations = new[]\r\n    {\r\n        new Operation\r\n        {\r\n            op = \u0022test\u0022,\r\n            path = \u0022/utcDateTime\u0022,\r\n            value = \u00222000-01-01T01:01:01\u0022\r\n        }\r\n    };\r\n\r\n    var incomingJson = JsonConvert.SerializeObject(incomingOperations);\r\n\r\n    var document = JsonConvert.DeserializeObject\u003CJsonPatchDocument\u003CTest\u003E\u003E(incomingJson);\r\n\r\n    var existingEntity = new Test { UtcDateTime = new DateTime(2000, 1, 1, 1, 1, 1, DateTimeKind.Utc) };\r\n\r\n    document.ApplyTo(existingEntity, x =\u003E Debug.WriteLine(x.ErrorMessage));\r\n}\r\n\r\npublic class Test\r\n{\r\n    public DateTime UtcDateTime { get; set; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "feature-json-patch",
      "area-minimal",
      "area-networking"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde8466FUt",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-12-07T22:23:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38872#issuecomment-988304685"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85AAud-",
    "title": "Configure existing HttpClient using WebApplicationFactory (e.g. for named clients using IServiceCollection.AddHttpClient\u003CT\u003E)",
    "url": "https://github.com/dotnet/aspnetcore/issues/38883",
    "createdAt": "2021-12-08T02:07:43Z",
    "lastUpdated": "2024-03-01T23:54:40Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\n\r\nThis is a duplicate of #5967 but because it was closed due to inactivity, I am creating a new one with more details and use cases.\r\n\r\nI am trying to run tests against a Hot Chocolate (GraphQL) server and the Strawberry Shake GraphQL client, which uses \u0060HttpClientFactory\u0060 with a named client.\r\n\r\nI\u0027d like to start my app in my tests using \u0060Microsoft.AspNetCore.Mvc.Testing\u0060, _and_ use the code generation features of Strawberry Shake to generate the GraphQL client. I can\u0027t, because Strawberry Shake uses the \u0060HttpClientFactory\u0060, and all of the methods required to build _or_ configure an HttpClient are internal in \u0060WebApplicationFactory\u0060.\r\n\r\nExample of the code in my tests I\u0027d like to have (simplified and inlined):\r\n\r\n\u0060\u0060\u0060c#\r\nvar services = new ServiceCollection();\r\n// Here I cannot easily configure the client since it needs a custom HttpMessageHandler from TestServer\r\nservices\r\n  .AddHttpClient(GraphClient.ClientName, client =\u003E client.BaseAddress = _factory.Server.BaseAddress)\r\n  .ConfigurePrimaryHttpMessageHandler(_ =\u003E _factory.Server.CreateHandler());\r\nservices\r\n  // This is a library that depends on HttpClientFactory\r\n  .AddGraphClient()\r\n// This is using HttpClientFactory internally\r\nvar graphClient = services.BuildServiceProvider().GetRequiredService\u003CGraphClient\u003E();\r\n\u0060\u0060\u0060\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nIt would be much simpler if instead of just having \u0060CreateClient()\u0060, I could also use \u0060ConfigureClient(HttpClient)\u0060.\r\n\r\ne.g.:\r\n\r\n\u0060\u0060\u0060c#\r\n  .ConfigureHttpClient(client =\u003E _factory.ConfigureClient(client));\r\n\u0060\u0060\u0060\r\n\r\nThe code is mostly the same as is already inside \u0060WebApplicationFactory\u0060, however instead of making more properties and methods public, there would be a method to assist in cases where using HttpClientFactory is desirable.\r\n\r\n### Additional context\r\n\r\nWhile my use case (and the one from #5967) are because of external libraries, I believe making use of a pooled HttpClient factory can make sense for reusing existing code from internal libraries.",
    "upvotes": 7,
    "labels": [
      "enhancement",
      "area-mvc",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde848Z_8q",
        "parentId": null,
        "author": "captainsafia",
        "content": "We could sensibly add a \u0060ConfigureHttpClient\u0060 overload here that takes an \u0060Action\u003CHttpClient\u003E\u0060 for these kinds of customizations to the \u0060WebApplicationFactory\u0060.\r\n\r\nTagging this alongside #33846 as we approach addressing some of these issues the WAF for .NET 7.\r\n\r\n",
        "createdAt": "2022-01-14T20:22:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38883#issuecomment-1013448490"
      },
      {
        "id": "IC_kwDOAQzde848aABS",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-14T20:22:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38883#issuecomment-1013448786"
      },
      {
        "id": "IC_kwDOAQzde85MAXPf",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:19:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38883#issuecomment-1275163615"
      },
      {
        "id": "IC_kwDOAQzde85R-M1t",
        "parentId": null,
        "author": "berhir",
        "content": "I created a custom \u0060HttpMessageHandlerBuilder\u0060 to solve this issue.\r\n\r\n\u0060\u0060\u0060cs\r\npublic class TestServerHttpMessageHandlerBuilder : HttpMessageHandlerBuilder\r\n{\r\n    public TestServerHttpMessageHandlerBuilder(TestServer testServer, IServiceProvider services)\r\n    {\r\n        Services = services;\r\n        PrimaryHandler = testServer.CreateHandler();\r\n    }\r\n\r\n    private string? _name;\r\n\r\n    [DisallowNull]\r\n    public override string? Name\r\n    {\r\n        get =\u003E _name;\r\n        set\r\n        {\r\n            ArgumentNullException.ThrowIfNull(value);\r\n            _name = value;\r\n        }\r\n    }\r\n\r\n    public override HttpMessageHandler PrimaryHandler { get; set; }\r\n\r\n    public override IList\u003CDelegatingHandler\u003E AdditionalHandlers { get; } = new List\u003CDelegatingHandler\u003E();\r\n\r\n    public override IServiceProvider Services { get; }\r\n\r\n    public override HttpMessageHandler Build()\r\n    {\r\n        if (PrimaryHandler == null)\r\n        {\r\n            throw new InvalidOperationException($\u0022{nameof(PrimaryHandler)} must not be null\u0022);\r\n        }\r\n\r\n        return CreateHandlerPipeline(PrimaryHandler, AdditionalHandlers);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThen in the startup code register the custom \u0060TestServerHttpMessageHandlerBuilder\u0060 BEFORE calling \u0060AddHttpClient\u0060.\r\n\r\n\u0060\u0060\u0060cs\r\nclientServices.AddTransient\u003CHttpMessageHandlerBuilder\u003E(sp =\u003E new TestServerHttpMessageHandlerBuilder(webAppFactory.Server, sp));\r\n\u0060\u0060\u0060\r\n\r\n\u0060AddHttpClient\u0060 checks if a \u0060HttpMessageHandlerBuilder\u0060 was already registered and uses it instead of the default implementation.\r\nNow ALL \u0060HttpClient\u0060s created using the \u0060HttpClientFactory\u0060 will use the TestServer. This is fine as long as you don\u0027t want to use the TestServer only for some \u0060HttpClient\u0060s.",
        "createdAt": "2023-01-09T08:27:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38883#issuecomment-1375260013"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85AE_v4",
    "title": "Minimal API F# RouteValue is Null",
    "url": "https://github.com/dotnet/aspnetcore/issues/38906",
    "createdAt": "2021-12-09T01:54:36Z",
    "lastUpdated": "2023-11-14T15:30:38Z",
    "body": "Mapping a route with a route value in F# fails to bind the value when using a named function instead of a anonymous function. I\u0027m not sure if this is an ASP.NET or F# issue (or maybe just a consequence of how F# works with the delegate param).\r\n\r\n\u0060dotnet new web -lang F#\u0060\r\n\r\n\u0060\u0060\u0060Program.fs\r\nopen System\r\nopen Microsoft.AspNetCore.Builder\r\nopen Microsoft.Extensions.Hosting\r\n\r\n\r\n[\u003CEntryPoint\u003E]\r\nlet main args =\r\n    let builder = WebApplication.CreateBuilder(args)\r\n    let app = builder.Build()\r\n    \r\n    let funcB v = v\r\n    let funcC = fun v -\u003E v \r\n\r\n    app.MapGet(\u0022/a/{v}\u0022, Func\u003Cstring, _\u003E (fun v -\u003E v)) |\u003E ignore\r\n    app.MapGet(\u0022/b/{v}\u0022, Func\u003Cstring, _\u003E funcB) |\u003E ignore\r\n    app.MapGet(\u0022/c/{v}\u0022, Func\u003Cstring, _\u003E funcC) |\u003E ignore\r\n\r\n    app.Run()\r\n\r\n    0 // Exit code\r\n\r\n\r\n\u0060\u0060\u0060\r\n\r\n\u0060dotnet run\u0060\r\n\r\n\u0060\u0060\u0060\r\nGET /a/test\r\n\r\ntest\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\nGET /b/test\r\n\r\nSystem.ArgumentNullException: Value cannot be null. (Parameter \u0027text\u0027)\r\n   at Microsoft.AspNetCore.Http.HttpResponseWritingExtensions.WriteAsync(HttpResponse response, String text, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.ExecuteWriteStringResponseAsync(HttpContext httpContext, String text)\r\n   at lambda_method2(Closure , Object , HttpContext )\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.\u003C\u003Ec__DisplayClass36_0.\u003CCreate\u003Eb__0(HttpContext httpContext)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.Invoke(HttpContext httpContext)\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\nGET /c/test\r\n\r\nSystem.ArgumentNullException: Value cannot be null. (Parameter \u0027text\u0027)\r\n   at Microsoft.AspNetCore.Http.HttpResponseWritingExtensions.WriteAsync(HttpResponse response, String text, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.ExecuteWriteStringResponseAsync(HttpContext httpContext, String text)\r\n   at lambda_method3(Closure , Object , HttpContext )\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.\u003C\u003Ec__DisplayClass36_0.\u003CCreate\u003Eb__0(HttpContext httpContext)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.Invoke(HttpContext httpContext)\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\n$ dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100\r\n Commit:    9e8b04bbff\r\n\r\nRuntime Environment:\r\n OS Name:     arch\r\n OS Version:\r\n OS Platform: Linux\r\n RID:         arch-x64\r\n Base Path:   /usr/share/dotnet/sdk/6.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0\r\n  Commit:  4822e3c3aa\r\n\r\n.NET SDKs installed:\r\n  6.0.100 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde846-7GI",
        "parentId": null,
        "author": "davidfowl",
        "content": "This is because the name of the parameter is lost through in the F# function conversions (as you\u0027ve pointed out).\r\n\r\ncc @dsyme ",
        "createdAt": "2021-12-09T07:06:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38906#issuecomment-989573512"
      },
      {
        "id": "IC_kwDOAQzde848OcLY",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-11T22:33:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38906#issuecomment-1010418392"
      },
      {
        "id": "IC_kwDOAQzde85lM2Kf",
        "parentId": null,
        "author": "mchylek",
        "content": "As a workaround you can also use wrapper with \u0060AsParametersAttribute\u0060\r\n\r\n\u0060\u0060\u0060csharp\r\npublic static class Endpoint\r\n{\r\n    public static Delegate Of\u003CTParam, TResult\u003E(FSharpFunc\u003CTParam, TResult\u003E requestDelegate)\r\n    {\r\n        return (HttpContext context, [AsParametersAttribute] TParam parameters) =\u003E requestDelegate.Invoke(parameters);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nAnd then from F#\r\n\r\n\u0060\u0060\u0060fsharp\r\napp.MapGet(\u0022/{name}\u0022, Endpoint.Of (fun (req : {| Name : string |}) -\u003E $\u0022Hello {req.Name}!\u0022))\r\n\u0060\u0060\u0060\r\n\r\nI\u0027ve made simplistic library for this https://github.com/mchylek/Endpoints.FSharp.Interop",
        "createdAt": "2023-08-29T17:32:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38906#issuecomment-1697866399"
      },
      {
        "id": "IC_kwDOAQzde85r6XGD",
        "parentId": null,
        "author": "lucasteles",
        "content": "Also\r\nhttps://github.com/dotnet/aspnetcore/issues/46551#issuecomment-1810457875",
        "createdAt": "2023-11-14T15:30:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38906#issuecomment-1810461059"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85BYHOR",
    "title": "Add Results.Stream overload that takes a Func\u003CStream, Task\u003E",
    "url": "https://github.com/dotnet/aspnetcore/issues/39383",
    "createdAt": "2022-01-08T05:29:26Z",
    "lastUpdated": "2024-09-30T18:43:47Z",
    "body": "## Background and Motivation\r\n\r\nThere are scenarios where APIs want to work directly on the response stream without buffering. Today the Stream overloads assume you have a stream that you have produced that is then copied to the underlying response stream, instead, we want to provide a result type that gives you access to the underlying response stream.\r\n\r\nExample:\r\n\r\nhttps://github.com/khalidabuhakmeh/dotnet-dramameter/blob/main/DramaMeter/Program.cs#L37-L43\r\n\r\nAnother is writing a blob storage results to the http response.\r\n\r\n## Proposed API\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Http\r\n{\r\n    public static class Results\r\n    {\r\n\u002B       public IResult Stream(Func\u003CStream, Task\u003E streamWriterCallback, \r\n\u002B                             string? contentType = null,\r\n\u002B                             string? fileDownloadName = null,\r\n\u002B                             DateTimeOffset? lastModified = null,\r\n\u002B                             EntityTagHeaderValue? entityTag = null,\r\n\u002B                             bool enableRangeProcessing = false);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/\u0022, async (HttpContext http, string? level) =\u003E {\r\n    level ??= \u0022low\u0022;\r\n\r\n    if (!levels.TryGetValue(level.Trim(), out var result))\r\n        return Results.BadRequest(\u0022invalid level\u0022);\r\n\r\n    var image = background.CloneAs\u003CRgba32\u003E();\r\n    image.Mutate(ctx =\u003E {\r\n        ctx.Vignette(result.color); // match the background to the intensity\r\n        ctx.DrawImage(foreground, new Point(0, 0), 1f);\r\n        ctx.DrawImage(result.image, new Point(0, 0), opacity: 1f);\r\n    });\r\n    \r\n    http.Response.Headers.CacheControl = $\u0022public,max-age={FromHours(24).TotalSeconds}\u0022;\r\n    return Results.Stream(stream =\u003E image.SaveAsync(stream, PngFormat.Instance), \u0022image/png\u0022);\r\n});\r\n\u0060\u0060\u0060\r\n\r\n## Risks\r\n\r\nNone",
    "upvotes": 2,
    "labels": [
      "api-approved",
      "feature-minimal-actions",
      "area-minimal",
      "help candidate"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde848Ey5I",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2022-01-08T05:29:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1007889992"
      },
      {
        "id": "IC_kwDOAQzde848FX-t",
        "parentId": null,
        "author": "pranavkm",
        "content": "\u0060\u0060\u0060diff\r\n- Func\u003CStream, Task\u003E streamFactory\r\n\u002BFunc\u003CStream, Task\u003E writeHttpResponseStreamAsync,\r\n\u0060\u0060\u0060\r\n\r\nor something like that. I think we\u0027d spoken about this API when reviewing the \u0060Results\u0060 type but left it alone at that time to get feedback. Also I think we should try and keep some parity between this and the API in controllers to allow users to migrate from one to another without too much effort (in particular since it\u0027s low cost for us to add support)\r\n",
        "createdAt": "2022-01-08T16:05:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1008041901"
      },
      {
        "id": "IC_kwDOAQzde848FYDk",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-08T16:05:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1008042212"
      },
      {
        "id": "IC_kwDOAQzde848KB0Z",
        "parentId": null,
        "author": "pranavkm",
        "content": "API review:\r\n\r\nWe decided to add a few more overloads during review.\r\n\r\n\u0060\u0060\u0060diff\r\npublic class Results\r\n{\r\n\r\n\u002B public IResult Stream(\r\n\u002B     Func\u003CStream, Task\u003E streamWriterCallback, \r\n\u002B     string? contentType = null,\r\n\u002B     string? fileDownloadName = null,\r\n\u002B     DateTimeOffset? lastModified = null,\r\n\u002B     EntityTagHeaderValue? entityTag = null,\r\n\u002B     bool enableRangeProcessing = false);\r\n\r\n\u002B public IResult Stream(\r\n\u002B     PipeReader pipeReader, \r\n\u002B     string? contentType = null,\r\n\u002B     string? fileDownloadName = null,\r\n\u002B     DateTimeOffset? lastModified = null,\r\n\u002B     EntityTagHeaderValue? entityTag = null,\r\n\u002B     bool enableRangeProcessing = false);\r\n\r\n\r\n\u002B public IResult Stream(\r\n\u002B     Func\u003CPipeWriter, Task\u003E pipeWriterCallback, \r\n\u002B     string? contentType = null,\r\n\u002B     string? fileDownloadName = null,\r\n\u002B     DateTimeOffset? lastModified = null,\r\n\u002B     EntityTagHeaderValue? entityTag = null,\r\n\u002B     bool enableRangeProcessing = false);\r\n\r\n\r\n\u002B public IResult Bytes(\r\n\u002B     ReadOnlyMemory\u003Cbyte\u003E byteBuffer, \r\n\u002B     string? contentType = null,\r\n\u002B     string? fileDownloadName = null,\r\n\u002B     bool enableRangeProcessing = false,\r\n\u002B     DateTimeOffset? lastModified = null,\r\n\u002B     EntityTagHeaderValue? entityTag = null);\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060diff\r\npublic class ControllerBase\r\n{\r\n\u002B  public PushFileStreamResult File(\r\n\u002B      Func\u003CStream, Task\u003E streamWriterCallback, \r\n\u002B      string? contentType = null,\r\n\u002B      string? fileDownloadName = null,\r\n\u002B      DateTimeOffset? lastModified = null,\r\n\u002B      EntityTagHeaderValue? entityTag = null,\r\n\u002B      bool enableRangeProcessing = false);\r\n\r\n// This needs to add a remark that the byte buffer\r\n// should not use a pooled source since it\u0027s lifetime\r\n// isn\u0027t tied to the action result execution.\r\n// Accessing FileContentResult.FileContents should copy the results from the memory\r\n\u002B public FileContentResult File(\r\n\u002B     ReadOnlyMemory\u003Cbyte\u003E fileContents, \r\n\u002B     string? contentType = null,\r\n\u002B     string? fileDownloadName = null,\r\n\u002B     bool enableRangeProcessing = false,\r\n\u002B     DateTimeOffset? lastModified = null,\r\n\u002B     EntityTagHeaderValue? entityTag = null);\r\n\r\n\u002B public class PushFileStreamResult : FileResult\r\n\u002B {\r\n\u002B    public Func\u003CStream, Task\u003E StreamWriterCallback { get; set; }\r\n\u002B }\r\n}\r\n\r\n\r\nWe should also add PipeReader / PipeWriter overloads for controllers. @rafikiassumani-msft could we have someone propose the API for this and bring it to review?\r\n",
        "createdAt": "2022-01-10T19:17:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1009261849"
      },
      {
        "id": "IC_kwDOAQzde848sK_M",
        "parentId": null,
        "author": "davidfowl",
        "content": "I just tried to implement this and the overloads conflicts because of how we use optional parameters... We might need to rename these or find a clever workaround.",
        "createdAt": "2022-01-21T06:13:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1018212300"
      },
      {
        "id": "IC_kwDOAQzde848sM_Z",
        "parentId": null,
        "author": "davidfowl",
        "content": "Actually this is fine, it\u0027s just the API analyzer complaining.",
        "createdAt": "2022-01-21T06:29:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1018220505"
      },
      {
        "id": "IC_kwDOAQzde848wibW",
        "parentId": null,
        "author": "davidfowl",
        "content": "OK having implemented, this I think we need to support an overload of the callbacks that support range processing:\r\n\r\n\u0060\u0060\u0060diff\r\npublic class Results\r\n{\r\n\r\n// Range processing overloads\r\n\u002B public IResult Stream(\r\n\u002B     Func\u003CStream, long?, long, Task\u003E streamWriterCallback, \r\n\u002B     string? contentType = null,\r\n\u002B     string? fileDownloadName = null,\r\n\u002B     DateTimeOffset? lastModified = null,\r\n\u002B     EntityTagHeaderValue? entityTag = null);\r\n\r\n\u002B public IResult Stream(\r\n\u002B     Func\u003CPipeWriter, long?, long, Task\u003E pipeWriterCallback, \r\n\u002B     string? contentType = null,\r\n\u002B     string? fileDownloadName = null,\r\n\u002B     DateTimeOffset? lastModified = null,\r\n\u002B     EntityTagHeaderValue? entityTag = null);\r\n\r\n// Non-Range processing overloads\r\n\u002B public IResult Stream(\r\n\u002B     Func\u003CStream, Task\u003E streamWriterCallback, \r\n\u002B     string? contentType = null,\r\n\u002B     string? fileDownloadName = null,\r\n\u002B     DateTimeOffset? lastModified = null,\r\n\u002B     EntityTagHeaderValue? entityTag = null);\r\n\r\n\u002B public IResult Stream(\r\n\u002B     Func\u003CPipeWriter, Task\u003E pipeWriterCallback, \r\n\u002B     string? contentType = null,\r\n\u002B     string? fileDownloadName = null,\r\n\u002B     DateTimeOffset? lastModified = null,\r\n\u002B     EntityTagHeaderValue? entityTag = null);\r\n\r\n}\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2022-01-22T20:58:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1019356886"
      },
      {
        "id": "IC_kwDOAQzde848xLgF",
        "parentId": null,
        "author": "davidfowl",
        "content": "@pranavkm brought up the fact that we might want a custom delegate type so we can document the arguments of the range processing overloads. The downside is that we need 2 types (one for pipelines and one for streams): Here\u0027s a strawman:\r\n\r\n\u0060\u0060\u0060C#\r\npublic delegate Task WriteRangeStreamCallback(Stream stream, long? start, long length);\r\npublic delegate Task WriteRangePipeWriterCallback(PipeWriter pipeWriter, long? start, long length); \r\n\u0060\u0060\u0060\r\n\r\nI\u0027m not yet convinced...",
        "createdAt": "2022-01-23T16:59:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1019525125"
      },
      {
        "id": "IC_kwDOAQzde8480k6H",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2022-01-24T18:34:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1020415623"
      },
      {
        "id": "IC_kwDOAQzde8482RHB",
        "parentId": null,
        "author": "davidfowl",
        "content": "We made a couple of decisions:\r\n- We didn\u0027t add the range overload support for these callback based APIs. That could be implemented manually. I\u0027ll make another API proposal for this.\r\n- We decided to remove the \u0060Func\u003CPipeWriter, Task\u003E\u0060 overload to avoid APIs ambiguity with the Stream APIs.",
        "createdAt": "2022-01-25T06:37:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1020858817"
      },
      {
        "id": "IC_kwDOAQzde85FbLbp",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "Triage: We will keep this issue open to give us time to add these results to Web APIs in MVC. ",
        "createdAt": "2022-06-23T18:47:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1164752617"
      },
      {
        "id": "IC_kwDOAQzde85KtARq",
        "parentId": null,
        "author": "0xced",
        "content": "It looks like the new \u0060File\u0060 method that returns a \u0060PushFileStreamResult\u0060 proposed above by @pranavkm has not yet been implemented. https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1009261849\r\n\r\nCan we expect it for .NET 7 ? If not, can we expect it for .NET 8 ?",
        "createdAt": "2022-09-21T07:25:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1253311594"
      },
      {
        "id": "IC_kwDOAQzde85XL4ii",
        "parentId": null,
        "author": "Swimburger",
        "content": "\u003E Triage: We will keep this issue open to give us time to add these results to Web APIs in MVC.\r\n\r\n\u0060Results.Stream\u0060 is great. Glad to see this is on y\u0027all\u0027s radar for MVC, as I looked for it today and didn\u0027t find the equivalent.",
        "createdAt": "2023-03-09T20:28:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1462732962"
      },
      {
        "id": "IC_kwDOAQzde85ljXHj",
        "parentId": null,
        "author": "0xced",
        "content": "Since it has both \u0060api-approved\u0060 and \u0060help wanted\u0060 tags I\u0027d like to implement the MVC part. But before I dive into the implementation I\u0027d like to be sure about the exact API.\r\n\r\n@davidfowl you said\r\n\u003E Actually this is fine, it\u0027s just the API analyzer complaining.\r\n\r\nSo is it OK to ignore [RS0027](https://github.com/dotnet/roslyn/blob/main/docs/Adding%20Optional%20Parameters%20in%20Public%20API.md)?\r\n\r\n\u003E Symbol \u0027File\u0027 violates the backcompat requirement: Public API with optional parameter(s) should have the most parameters amongst its public overloads.\r\n\r\nWouldn\u0027t it be wiser to go the same route as all the other \u0060File\u0060 methods? I.e.\r\n\r\n\u0060\u0060\u0060csharp\r\nFile(Func\u003CStream, Task\u003E streamWriterCallback, string contentType);\r\nFile(Func\u003CStream, Task\u003E streamWriterCallback, string contentType, bool enableRangeProcessing);\r\nFile(Func\u003CStream, Task\u003E streamWriterCallback, string contentType, string? fileDownloadName);\r\nFile(Func\u003CStream, Task\u003E streamWriterCallback, string contentType, string? fileDownloadName, bool enableRangeProcessing);\r\nFile(Func\u003CStream, Task\u003E streamWriterCallback, string contentType, string? fileDownloadName, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag);\r\nFile(Func\u003CStream, Task\u003E streamWriterCallback, string contentType, string? fileDownloadName, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);\r\nFile(Func\u003CStream, Task\u003E streamWriterCallback, string contentType, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag);\r\nFile(Func\u003CStream, Task\u003E streamWriterCallback, string contentType, DateTimeOffset? lastModified, EntityTagHeaderValue entityTag, bool enableRangeProcessing);\r\n\u0060\u0060\u0060",
        "createdAt": "2023-09-02T08:51:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1703768547"
      },
      {
        "id": "IC_kwDOAQzde85ljYSl",
        "parentId": null,
        "author": "0xced",
        "content": "~~Also, I think the \u0060StreamWriterCallback\u0060 property should probably be \u0060Func\u003CStream, CancellationToken, Task\u003E\u0060 instead of \u0060Func\u003CStream, Task\u003E\u0060 (i.e. with a \u0060CancellationToken\u0060 parameter).~~\r\n\r\n**Edit**: I guess one could capture the \u0060CancellationToken\u0060 provided by the controller method in the callback so that\u0027s probably not necessary.",
        "createdAt": "2023-09-02T09:12:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1703773349"
      },
      {
        "id": "IC_kwDOAQzde85mXBCu",
        "parentId": null,
        "author": "0xced",
        "content": "Well, .NET 8 RC1 was released yesterday so I guess this will be postponed to at least .NET 9 or is there still a chance to get it merged for the .NET 8 general availability (GA) release?",
        "createdAt": "2023-09-13T09:50:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1717309614"
      },
      {
        "id": "IC_kwDOAQzde85qnJoz",
        "parentId": null,
        "author": "0xced",
        "content": "I see that the \u0060help wanted\u0060 tag has been replaced by the \u0060help candidate\u0060 tag. What does that mean for an external (non-Microsoft) contributor like me?\r\n\r\nI\u0027d be willing to help but I\u0027d prefer to get answers to my [questions](https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1703768547) first before diving into the implementation.",
        "createdAt": "2023-11-01T09:19:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1788647987"
      },
      {
        "id": "IC_kwDOAQzde85qnLsM",
        "parentId": null,
        "author": "martincostello",
        "content": "Details about the new process can be found [here](https://github.com/dotnet/aspnetcore/blob/64f95ef2377403e075cced875363419755d317a4/docs/HelpWantedProcess.md).",
        "createdAt": "2023-11-01T09:26:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1788656396"
      },
      {
        "id": "IC_kwDOAQzde853VX2r",
        "parentId": null,
        "author": "0xced",
        "content": "Thanks @martincostello for pointing out the right document. So if I understand correctly, it\u0027s up to @davidfowl (the engineer assigned to this issue) to give directions on how to move forward, right?",
        "createdAt": "2024-03-16T19:05:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-2002091435"
      },
      {
        "id": "IC_kwDOAQzde86OF6q6",
        "parentId": null,
        "author": "0xced",
        "content": "I just opened #58161 to address the MVC part.\r\n\r\nLet\u0027s hope it will finally ship in .NET 10. \uD83E\uDD1E",
        "createdAt": "2024-09-30T18:43:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-2383915706"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85BetW5",
    "title": "Razor Support (\u0060Results.Page()\u0060, etc.) for Minimal Endpoints",
    "url": "https://github.com/dotnet/aspnetcore/issues/39431",
    "createdAt": "2022-01-11T02:01:40Z",
    "lastUpdated": "2023-06-06T23:44:31Z",
    "body": "- [ ] Support Results.Page(), etc.\r\n- [ ] Support routing (Data, tempplates, etc)\r\n- [ ] Form support",
    "upvotes": 7,
    "labels": [
      "triage-focus",
      "Priority:3",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde848LD92",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-11T02:05:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39431#issuecomment-1009532790"
      },
      {
        "id": "IC_kwDOAQzde849BP0c",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-27T23:30:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39431#issuecomment-1023737116"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85BpZiW",
    "title": "Analyzer: warn when marking a route parameter as optional if it isn\u0027t at the end of a route",
    "url": "https://github.com/dotnet/aspnetcore/issues/39486",
    "createdAt": "2022-01-13T08:32:38Z",
    "lastUpdated": "2023-06-20T22:30:54Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\n\r\nRoute parameters in an ASP.NET Core Web API can be marked as optional with a \u0060?\u0060, e.g.,\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/test1/{foo?}\u0022, (string? foo) =\u003E foo ?? \u0022none\u0022); // \u0022/test1\u0022 returns \u0022none\u0022\r\n\u0060\u0060\u0060\r\n\r\nIf a route parameter marked as optional is followed by a non-optional route segment, the optional annotation is ignored. E.g.,\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/test2/{foo?}/bar\u0022, (string? foo) =\u003E foo ?? \u0022none\u0022); // \u0022/test2//bar\u0022 returns 404\r\n\u0060\u0060\u0060\r\n\r\nIt is not immediately obvious (to me at least) that it would not be possible to have an optional parameter within a route, and there is no run-time error or warning when doing this.\r\n\r\nThe behavior appears to be the same for nullable value types (e.g. \u0060int?\u0060).\r\n\r\n### Describe the solution you\u0027d like\r\nAn analyzer that checks for routes containing optional parameters followed by non-optional route segments, and provides an appropriate warning.\r\n\r\nI also couldn\u0027t find any mention in the documentation stating that this is not possible.\r\n\r\n### Additional context\r\nOptional route parameters _are_ allowed to be followed by other optional parameters, so the analyzer should consider this case. E.g.,\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/test3/{foo?}/{bar?}\u0022, (string? foo, string? bar) =\u003E foo ?? bar ?? \u0022none\u0022); // \u0022/test3\u0022 returns \u0022none\u0022\r\n\u0060\u0060\u0060\r\n\r\nRelated: #36637",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-mvc",
      "analyzer",
      "feature-routing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde848V5fa",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-13T17:55:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39486#issuecomment-1012373466"
      },
      {
        "id": "IC_kwDOAQzde848kjxe",
        "parentId": null,
        "author": "rjgotten",
        "content": "I don\u0027t really (or rather: really don\u0027t) understand why optional segments are not allowed in the middle of a pattern to begin with.\r\n\r\n_Regular_ optional segments, i.e. that are not marked catch-all, have a \u0060{0,1}\u0060 cardinality creating a well-defined upper bound. A pattern that has N consecutive optional segments in the middle, followed by some required (incl. literal) segments, should always be able to be matched using an Nth degree lookahead.\r\n\r\nIt\u0027s completely silly that the framework implementation handling the routing DFA can\u0027t handle this and ruins simple solutions with a lot of practical gain, like multilingual routing using an BCP-47 tag as an optional first path segment to force selection of a certain language, overruling e.g. culture-selection based on the \u0060Accept-Language\u0060 header.",
        "createdAt": "2022-01-19T08:55:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39486#issuecomment-1016216670"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85B7nVf",
    "title": "Support setting HTTP response headers using some Results methods for Minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/39585",
    "createdAt": "2022-01-17T18:16:53Z",
    "lastUpdated": "2023-06-20T22:31:30Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nUsing Minimal APIs with the built-in [\u0060Results\u0060](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.results?view=aspnetcore-6.0) class\u0027 methods allows for lots of built-in functionality to perform lots of operations a developer may wish to achieve with an HTTP endpoint, but the experience isn\u0027t as good as soon as you need to set an HTTP response header.\r\n\r\nIn this scenario you\u0027re left with at least three possible choices:\r\n\r\n1. Mix and match use of \u0060Results\u0060 with the \u0060HttpResponse\u0060 so you can manually set any headers in the endpoint before returning the \u0060IResult\u0060.\r\n2. Use \u0060IResultExtensions\u0060 and a custom \u0060IResult\u0060 implementation to write the body and any headers, likely duplicating implementation details from the internal \u0060IResult\u0060 implementations.\r\n3. Stop using the \u0060Results\u0060 class and write to the content and headers to the \u0060HttpResponse\u0060 directly in the endpoint.\r\n\r\nAs an example, take an endpoint which wishes to return an HTTP 429 problem if it wishes to rate limit the client and return a \u0060Retry-After\u0060 response header. The [\u0060Results.Problem()\u0060](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.results.problem?view=aspnetcore-6.0) can be used to return the body and set the status code, but there is no way to set the \u0060Retry-After\u0060 header directly.\r\n\r\nTo achieve the desired result, you need to either mix-and-match the lower-level \u0060HttpResponse\u0060 usage in the endpoint (and potentially add an extra parameter to access it) with the \u0060Results\u0060 class, write a [custom extension](https://github.com/martincostello/polly-rate-limiting/blob/4c9aa22720557c8b30d62e6a3d208b12b7ae3008/src/TodoApp/ResultExtensions.cs#L8-L43), or not use \u0060Results\u0060 at all.\r\n\r\nThe code would be simpler for the developer in non-advanced cases if they could pass through a simple key-value pair of strings through the \u0060Results\u0060 methods to set HTTP response headers without having to add additional complexity and/or concepts, reducing the _\u0022minimalness\u0022_.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nSome possible solutions to this (assuming it\u0027s not _do nothing_ as this is considered an advanced use case) could include:\r\n\r\n1. Add a new overload or add another optional parameter to methods such as [\u0060Results.Json()\u0060](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.results.json?view=aspnetcore-6.0) and [\u0060Results.Problem()\u0060](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.results.problem?view=aspnetcore-6.0) that accepts additional headers to set as an \u0060IDictionary\u003Cstring, string\u003E\u0060, which would then be passed through to the internals of \u0060ObjectResult\u0060 for use in the [\u0060ConfigureResponseHeaders(HttpContext)\u0060](https://github.com/dotnet/aspnetcore/blob/ef20668b82853a123ae9cf9f66af2bf67cc56f93/src/Http/Http.Results/src/ObjectResult.cs#L76-L78) method.\r\n2. Make the \u0060IResult\u0060 implementations public so behaviours could be easily overridden to extend them. For the HTTP 429 example, a developer could sub-class [\u0060ObjectResult.ConfigureResponseHeaders(HttpContext)\u0060](https://github.com/dotnet/aspnetcore/blob/ef20668b82853a123ae9cf9f66af2bf67cc56f93/src/Http/Http.Results/src/ObjectResult.cs#L76-L78) to set the additional header(s) (see also #37502)\r\n\r\n\r\n### Additional context\r\n\r\n_No response_",
    "upvotes": 2,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde848jVTH",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-18T22:34:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39585#issuecomment-1015895239"
      },
      {
        "id": "IC_kwDOAQzde848t5FW",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Add a new overload or add another optional parameter to methods such as Results.Json() and Results.Problem() that accepts additional headers to set as an IDictionary\u003Cstring, string\u003E, which would then be passed through to the internals of ObjectResult for use in the ConfigureResponseHeaders(HttpContext) method.\r\n\r\nMaybe 3. \u0060Action\u003CIHeaderDictionary\u003E\u0060?\r\n\r\n\u0060\u0060\u0060C#\r\nResults.Json(product, headers =\u003E headers[\u0022Retry-After\u0022] = ...)\r\n\u0060\u0060\u0060",
        "createdAt": "2022-01-21T16:26:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39585#issuecomment-1018663254"
      },
      {
        "id": "IC_kwDOAQzde848t5qd",
        "parentId": null,
        "author": "martincostello",
        "content": "I also like that idea, then you wouldn\u0027t need to allocate a dictionary just to set a header.\r\n",
        "createdAt": "2022-01-21T16:29:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39585#issuecomment-1018665629"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85B_jrt",
    "title": "Design: IEndpointConventionBuilder Extensions Unusable By Other Extensions",
    "url": "https://github.com/dotnet/aspnetcore/issues/39604",
    "createdAt": "2022-01-18T17:31:14Z",
    "lastUpdated": "2024-03-01T22:54:53Z",
    "body": "## Background and Motivation\r\n\r\nAPI Versioning has been investigating support for _Minimal APIs_ per dotnet/aspnet-api-versioning#751. In doing so, it has come to light that the extension methods for **IEndpointConventionBuilder** are inconsistently implemented and many of them have little-to-no usably by other extensions such as API Versioning.\r\n\r\nThe primary issues relate to [OpenApiRouteHandlerBuilderExtensions.cs](../blob/main/src/Http/Routing/src/Builder/OpenApiRouteHandlerBuilderExtensions.cs). These extensions are very likely to be used by customers in conjunction with API Versioning, but cannot be for the following reasons:\r\n\r\n1. **RouteHandlerBuilder** is \u0060sealed\u0060\r\n2. The extensions methods accept and return the concrete \u0060RouteHandlerBuilder\u0060 type\r\n\r\nFor completeness, a similar problem exists for [FallbackEndpointRouteBuilderExtensions.cs](../blob/main/src/Http/Routing/src/Builder/FallbackEndpointRouteBuilderExtensions.cs). Fallback endpoints are not expected to be used with API Versioning, but it could affect other extensions. These extension methods accept and return **IEndpointConventionBuilder**, which makes them more usable than **OpenApiRouteHandlerBuilderExtensions**; however, the lack of passing through a more specific type means that the order setup by developers matters.\r\n\r\nThe design and implementation of each set of extension methods appears to have been done by different people, at different times, and with different design review considerations.\r\n\r\n## Proposed API\r\n\r\nThere doesn\u0027t appear to be a clear reason why these decisions were made. There seems to be no reason to not implement all of the extension methods using the same approach that @JamesNK used in [RoutingEndpointConventionBuilderExtensions.cs](../blob/main/src/Http/Routing/src/Builder/RoutingEndpointConventionBuilderExtensions.cs). This would mean that all extension methods have the form of:\r\n\r\n\u0060\u0060\u0060c#\r\npublic static TBuilder SomeExtension\u003CTBuilder\u003E(this TBuilder builder) where TBuilder : IEndpointConventionBuilder { } \r\n\u0060\u0060\u0060\r\n\r\nThis approach appears to have been lightly discussed in #8902 previously, which might explain why future extension methods did not follow suite.\r\n\r\nThe proposed change would benefit not just API Versioning, but any other extension that needs to add/change significant parts of the default _Minimal API_ implementation.\r\n\r\n## Risks\r\n\r\nChanging the signature of the existing APIs are a breaking change, but I believe that adding the intended generic implementations can live side-by-side with the existing non-generic variants.\r\n\r\nIf the proposal were accepted, when would that happen? As it stands, this issue cascades across APIs. API Versioning would be required to reimplement all of the applicable, existing extension methods to retain feature parity for non-versioned _Minimal APIs_. Furthermore, the unnecessary non-generic extensions methods have to be retained just as they do in ASP.NET Core - likely forever more. If API Versioning doesn\u0027t reimplement the extensions methods, then there is a feature gap that must be filled by customers.\r\n\r\nAPI Versioning is looking for guidance to achieve the right level of synergy in both the short and long terms.\r\n\r\n## Example Usage\r\n\r\nThe tentative design for _Minimal APIs_ for API Versioning will look something like:\r\n\r\n\u0060\u0060\u0060c#\r\napp.DefineApi()\r\n   .HasVersion(1.0)\r\n   .HasVersion(2.0)\r\n   .ReportApiVersions()\r\n   .HasMapping(api =\u003E {\r\n       // OpenAPI extensions cannot be used here without reimplementing and maintaining them\r\n   \tapi.MapGet(\u0022/speak\u0022, () =\u003E \u0022Hello world!\u0022);\r\n   \tapi.MapPost(\u0022/speak\u0022, (string text) =\u003E text).MapToApiVersion(2.0);\r\n   });\r\n\u0060\u0060\u0060\r\n\r\ncc: @davidfowl @JamesNK ",
    "upvotes": 2,
    "labels": [
      "api-suggestion",
      "feature-openapi",
      "Priority:2",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde848jCxx",
        "parentId": null,
        "author": "halter73",
        "content": "How exactly do you plan to leverage the ability to inherit from \u0060RouteHandlerBuilder\u0060?\r\n\r\nWe\u0027ve returned public concrete \u0060IEndpointConventionBuilder\u0060\u0027s types for a while from \u0060Map\u0060 methods for a a frew releases now. For example:\r\n\r\n- \u0060MapControllers\u0060 returns a \u0060ControllerActionEndpointConventionBuilder\u0060 (sealed \u002B internaly-only ctor)\r\n- \u0060MapRazorPages\u0060 returns a \u0060PageActionEndpointConventionBuilder\u0060 (sealed \u002B internaly-only ctor)\r\n- \u0060MapHub\u0060 returns a \u0060HubEndpointConventionBuilder\u0060 (sealed \u002B internal-only ctor)\r\n  - This has the redeeming quality of deriving from an intermediate \u0060IHubEndpointConventionBuilder\u0060 which extension methods could hook off of.\r\n- \u0060MapBlazorHub\u0060 is the same as \u0060MapHub\u0060 but with \u0060ComponentEndpointConventionBuilder\u0060\r\n- \u0060MapConnections\u0060 returns a \u0060ConnectionEndpointRouteBuilder\u0060 (sealed \u002B internaly-only ctor)\r\n\r\nThe big reason we sealed \u0060RouteHandlerBuilder\u0060 (other than that unsealing later on isn\u0027t breaking while sealing would be) is consistency with these other types. As far as I know, \u0060RouteHandlerBuilder\u0060 is the first of these classes we\u0027ve shipped specific extension methods for (in \u0060OpenApiRouteHandlerBuilderExtensions\u0060) which shows the weakness of this pattern.\r\n\r\nRightly or wrongly, we wanted the \u0060OpenApiRouteHandlerBuilderExtensions\u0060 to only apply to minimal route handlers so they extended the concrete \u0060RouteHandlerBuilder\u0060 type rather than \u0060IEndpointConventionBuilder\u0060. We felt these extension methods might not make sense for a SignalR Hub for example. Perhaps we could revisit this.\r\n\r\nWhile you could in theory derive from \u0060RouteHandlerBuilder\u0060 and keep support for all the \u0060OpenApiRouteHandlerBuilderExtensions\u0060 without reimplementing them, this is a trick you could only really do once. Imagine you have \u0060MyWrappedRouteHandlerBuilder\u0060 and \u0060SomeoneElsesWrappedRouteHandlerBuilder\u0060 which both had their own extension methods and derived directly from \u0060RouteHandlerBuilder\u0060. You\u0027d only be able to get extension methods for one or the other. There\u0027s no object that you could return that would support all the extension methods for both \u0060MyWrappedRouteHandlerBuilder\u0060 and \u0060SomeoneElsesWrappedRouteHandlerBuilder\u0060 unless one inherits from the other or implements the other\u0027s interface(s).\r\n\r\nIf you want to add support for additional extension methods on a \u0060ControllerActionEndpointConventionBuilder\u0060, \u0060PageActionEndpointConventionBuilder\u0060, \u0060HubEndpointConventionBuilder\u0060, etc..., you\u0027d be defining a bunch of types inheriting from different classes (assuming we unseal them and make the ctors public). And doing so still wouldn\u0027t fix the composability issues of supporting multiple classes that derive from a single one of these types. At least \u0060RouteHandlerBuilder\u0060 has a public constructor so you can create your own instance.\r\n\r\n\u003E Changing the signature of the existing APIs are a breaking change, but I believe that adding the intended generic implementations can live side-by-side with the existing non-generic variants.\r\n\r\nI tested adding the following overloads to \u0060OpenApiRouteHandlerBuilderExtensions.Accepts(...)\u0060:\r\n\r\n\u0060\u0060\u0060C#\r\n// Old\r\npublic static RouteHandlerBuilder Accepts\u003CTRequest\u003E(this RouteHandlerBuilder builder,\r\n    string contentType, params string[] additionalContentTypes) where TRequest : notnull\r\n\r\n// New\r\npublic static TBuilder Accepts\u003CTBuilder, TRequest\u003E(this TBuilder builder,\r\n    string contentType, params string[] additionalContentTypes) where TBuilder : IEndpointConventionBuilder where TRequest : notnull\r\n\r\n// New\r\npublic static TBuilder Accepts\u003CTBuilder, TRequest\u003E(this TBuilder builder,\r\n    string contentType, params string[] additionalContentTypes) where TBuilder : RouteHandlerBuilder where TRequest : notnull\r\n\u0060\u0060\u0060\r\n\r\nThe problem is that the C# compiler seems to always prefer the overload with less generic parameters unless you specify the generic parameters explicitly. The following would still use the old overload:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapPost(\u0022/accepts-xml\u0022, () =\u003E Accepted()).Accepts\u003CPerson\u003E(\u0022application/xml\u0022);\r\n\u0060\u0060\u0060\r\n\r\nI verified this is also the case for overloads that previously had no generic parameters.\r\n",
        "createdAt": "2022-01-18T20:45:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39604#issuecomment-1015819377"
      },
      {
        "id": "IC_kwDOAQzde848jEbH",
        "parentId": null,
        "author": "halter73",
        "content": "Maybe it\u0027s okay if the existing overloads \u0060OpenApiRouteHandlerBuilderExtensions\u0060 are preferred when given a \u0060RouteHandlerBuilder\u0060 as long as the new overloads also work on any \u0060IEndpointConventionBuilder\u0060. This means being able to call \u0060app.MapHub\u003CMyHub\u003E(\u0022/myhub\u0022).Accepts\u003CPerson\u003E(\u0022application/xml\u0022)\u0060 which is weird but perhaps the lesser evil.",
        "createdAt": "2022-01-18T20:55:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39604#issuecomment-1015826119"
      },
      {
        "id": "IC_kwDOAQzde848jT3s",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-18T22:24:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39604#issuecomment-1015889388"
      },
      {
        "id": "IC_kwDOAQzde848jWOj",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "Inheriting from \u0060RouteHandlerBuilder\u0060 wouldn\u0027t really help much. As you\u0027ve astutely outlined, it doesn\u0027t really address the crux of the problem. There are potentially some _less than ideal_ ways it _could_ be beaten into submission, but since the type is \u0060sealed\u0060 that avenue is a dead end. At least for API Versioning, there is little interest in extending \u0060RouteHandlerBuilder\u0060. I just wanted to call out that it\u0027s not an option for any extender.  That facet seems to be by design, which would be OK if the extension methods weren\u0027t coupled to that type.\r\n\r\nThe current plan of action is that the builder at this level in composition from API Versioning would return it\u0027s own \u0060VersionedEndpointMetadataBuilder\u0060 that would implement \u0060IEndpointConventionBuilder\u0060 with all the addition stuff specific to API versioning. API Explorer extensions for OpenAPI exist today and will certainly be asked for. It is very undesirable to maintain a separate, parallel copy that would essentially be a fork of the implementation in ASP.NET Core.\r\n\r\nIf we agree that the generic variants makes sense, the fact that \u0060RouteHandlerBuilder\u0060 is \u0060sealed\u0060 is irrelevant. In fact, that probably even helps. As I understand, the compiler will chose an extension method with a matching, explicit type over a compatible generic overload. That would seem to be the ideal, long-term solution IMO. There wouldn\u0027t be confusion between extension methods from a usage perspective because the \u0060RouteHandlerBuilder\u0060 extensions would never into an API Versioning extension since it\u0027s intrinsically not extensible.\r\n\r\nFor the scenarios that require multiple, generic parameters, I understand the challenge/problem. I also understand why/how this led down a path where a concrete type such as \u0060RouteHandlerBuilder\u0060 had to be used. For example, the proposed new signature:\r\n\r\n\u0060\u0060\u0060c#\r\npublic static TBuilder Accepts\u003CTBuilder, TRequest\u003E(\r\n    this TBuilder builder,\r\n    string contentType,\r\n    params string[] additionalContentTypes)\r\n    where TBuilder : IEndpointConventionBuilder\r\n    where TRequest : notnull\r\n\u0060\u0060\u0060\r\n\r\nwill not work because the compiler does not allow specifying only some of the generic type parameters explicitly this way. It would have to be \u0060builder.Accept\u003CVersionedRouteHandlerBuilder, Person\u003E(\u0022application/xml\u0022)\u0060, which is _yucky_.\r\n\r\nHowever, I feel with some additional thinking and refactoring, this is a solvable problem albeit it another form. For example, if the second generic type parameter was lifted out into a callback, the following _could_ work:\r\n\r\n\u0060\u0060\u0060c#\r\npublic class AcceptMetadataBuilder\r\n{\r\n    public AcceptMetadataBuilder Of\u003CTRequest\u003E(string contentType) where TRequest : notnull\r\n    {\r\n        // ...\r\n        return this;\r\n    }\r\n\r\n    public AcceptMetadata Build() { /* ... */  }\r\n}\r\n\r\n// ...\r\n\r\npublic static TBuilder Accept\u003CTBuilder\u003E(this TBuilder builder, Action\u003CAcceptMetadataBuilder\u003E configure)\r\n    where TBuilder : IEndpointConventionBuilder\r\n{\r\n     var acceptMetadata = new AcceptMetadataBuilder();\r\n     configure(acceptMetadata);\r\n     builder.WithMetadata(acceptMetadata.Build());\r\n    return builder;\r\n}\r\n\r\n// ...\r\n\r\nbuilder.Accept(request =\u003E request.Of\u003CPerson\u003E(\u0022application/json\u0022));\r\n\u0060\u0060\u0060\r\n\r\nThat\u0027s just one possible idea. I\u0027m sure there are other possible ways. Of course, the flavor that doesn\u0027t use the \u0060TRequest\u0060 is also an option:\r\n\r\n\u0060\u0060\u0060c#\r\nbuilder.Accept(typeof(Person), \u0022application/json\u0022);\r\n\u0060\u0060\u0060",
        "createdAt": "2022-01-18T22:41:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39604#issuecomment-1015899043"
      },
      {
        "id": "IC_kwDOAQzde84_83J5",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "I now have a working example for API Versioning that you can peek at [here](https://github.com/dotnet/aspnet-api-versioning/tree/main/src/AspNetCore/WebApi/src/Asp.Versioning.Http/Builder). Hopefully, that helps illustrate the amount of forking and/or implementation of existing code required to retain parity. It\u0027s not _everything_, but it\u0027s also not zero.\r\n\r\nThis is related to and _might_ be exacerbated by #36007.",
        "createdAt": "2022-03-19T02:09:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39604#issuecomment-1072919161"
      },
      {
        "id": "IC_kwDOAQzde85BMLEi",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "@halter73 API Versioning has an official Preview release with this support. As expected, the community is immediately champing at the bit for parity with the [OpenApiRouteHandlerBuilderExtensions](https://github.com/dotnet/aspnetcore/blob/main/src/Http/Routing/src/Builder/OpenApiRouteHandlerBuilderExtensions.cs). In my attempt to appease the masses, I realized that the current state of the union is even worse than I thought. The current \u0060IProducesResponseTypeMetadata\u0060 and \u0060IAcceptsMetadata\u0060 implementations are \u0060internal\u0060 classes **and** have \u0060internal\u0060 properties, which means I can\u0027t even fork their implementations. I\u0027ve had to resort to using Reflection with compiled lambdas to preserve the intrinsic behavior \uD83D\uDE1E. If you\u0027re curious, you can see the solution I came up with [here](https://github.com/dotnet/aspnet-api-versioning/blob/main/src/AspNetCore/WebApi/src/Asp.Versioning.Http/Builder/ApiExplorerBuilderExtensions.cs).\r\n\r\nI\u0027m trying to get the compatible .NET 6.0 release out within the next month (or less). Ideally, I\u0027d like to have signature parity with wherever this issue is going to land. That will minimize the impact for the .NET 7.0 release. Expanding upon what\u0027s already been discussed, here\u0027s the current preview solution I\u0027ve come up with:\r\n\r\n\u0060\u0060\u0060c#\r\napi.MapGet(\u0022/people/{id:int}\u0022, (int id) =\u003E new Person(){ Id = id })\r\n   .Produces(response =\u003E response.Body\u003CPerson\u003E())\r\n   .HasApiVersion(1.0);\r\n\r\napi.MapPost(\u0022/people\u0022, (Person person) =\u003E Results.Created(\u0022/people/\u0022 \u002B person.Id, person))\r\n   .Accepts(request =\u003E request.Body\u003CPerson\u003E())\r\n   .Produces(response =\u003E response.Body\u003CPerson\u003E(), 201)\r\n   .HasApiVersion(1.0);\r\n\r\napi.MapPatch(\u0022/people/{id:int}\u0022, (int id, Person person) =\u003E Results.NoContent())\r\n   .Accepts(request =\u003E request.Body\u003CPerson\u003E().FormattedAs(\u0022application/merge-patch\u002Bjson\u0022))\r\n   .Produces(response =\u003E response.Body\u003CPerson\u003E().FormattedAs(\u0022application/json\u0022), 204)\r\n   .HasApiVersion(1.0);\r\n\u0060\u0060\u0060\r\n\r\nTo see the complete picture, here\u0027s the end-to-end [Minimal OpenAPI Example](https://github.com/dotnet/aspnet-api-versioning/blob/main/examples/AspNetCore/WebApi/MinimalOpenApiExample/Program.cs).",
        "createdAt": "2022-04-09T05:43:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39604#issuecomment-1093710114"
      },
      {
        "id": "IC_kwDOAQzde85Go0hk",
        "parentId": null,
        "author": "halter73",
        "content": "\u003E There doesn\u0027t appear to be a clear reason why these decisions were made. There seems to be no reason to not implement all of the extension methods using the same approach that @JamesNK used in [RoutingEndpointConventionBuilderExtensions.cs](../blob/main/src/Http/Routing/src/Builder/RoutingEndpointConventionBuilderExtensions.cs). This would mean that all extension methods have the form of:\r\n\u003E \r\n\u003E \u0060\u0060\u0060cs\r\n\u003E public static TBuilder SomeExtension\u003CTBuilder\u003E(this TBuilder builder) where TBuilder : IEndpointConventionBuilder { } \r\n\u003E \u0060\u0060\u0060\r\n\r\n@commonsensesoftware We recently did some of this as part of https://github.com/dotnet/aspnetcore/issues/41428 and then also did this for \u0060AddEndpointFilter\u0060 and \u0060WithOpenApi\u0060 as part of #41427.\r\n\r\nThe \u0060Produces\u0060, \u0060ProducesProblem\u0060, \u0060ProducesValidationProblem\u0060 and \u0060Accepts\u0060 extension methods were notably excluded from this treatment even though I originally proposed we update these too. The main issue with updating these APIs were the type arguments. Having an additional type argument on top of \u0060TBuilder\u0060 is annoying because then you have to explicitly pass the \u0060TBuilder\u0060 argument then. And as mentioned in the [API Review Notes](https://github.com/dotnet/aspnetcore/issues/41428#issuecomment-1142635825), \u0060WithMetadata\u0060 can be used manually with attributes if needed. But as you note above, there is no public \u0060IProducesResponseTypeMetadata\u0060 implementation at the moment, so setting a response type on a non-\u0060RouteHandlerBuilder\u0060 is even less convenient than it otherwise would be.\r\n\r\nI\u0027ll admit that this API review was focused on the MapGroup use case and less on the API Versioning use case. I realize that the extension methods we left out are exactly the methods you proposed updating in this issue. Would you be okay with having to write something like \u0060.Accepts\u003CVersionedEndpointMetadataBuilder, RequestType\u003E(...)\u0060? Or is there something else you would prefer? Are there any other methods you\u0027d like to see use this \u0060TBuilder\u0060 pattern?",
        "createdAt": "2022-07-15T02:33:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39604#issuecomment-1185106020"
      },
      {
        "id": "IC_kwDOAQzde85MAXYs",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:20:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39604#issuecomment-1275164204"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85CQ7HM",
    "title": "Support returning Stream and PipeReader directly from route handler methods",
    "url": "https://github.com/dotnet/aspnetcore/issues/39711",
    "createdAt": "2022-01-23T00:43:31Z",
    "lastUpdated": "2024-03-01T22:54:53Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nToday we support several built in types as result types (along with async versions), \u0060string\u0060, \u0060IResult\u0060, any other object (JSON). The idea is to extend support for \u0060Stream\u0060 and \u0060PipeReader\u0060 (along with the async versions). This provides symmetry with automatic binding of Stream and PipeReader in the input and as the built in version of https://github.com/dotnet/aspnetcore/issues/39383.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nThis is an extension of https://github.com/dotnet/aspnetcore/issues/39383 to natively understand \u0060Stream\u0060, \u0060Task\u003CStream\u003E\u0060, \u0060ValueTask\u003CStream\u003E\u0060, \u0060PipeReader\u0060, \u0060Task\u003CPipeReader\u003E\u0060, and \u0060ValueTask\u003CPipeReader\u003E\u0060 as a return type from handler methods. The default behavior would be:\r\n- Set the content type to \u0022application/octet-stream\u0022 (if it\u0027s not already set)\r\n- We always copy the entire stream to the response body\r\n- Does not support range requests\r\n- Does not support download file names\r\n\r\n### Additional context\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/blob/download1\u0022, () =\u003E\r\n{\r\n    return File.OpenRead(\u0022../something.txt\u0022);\r\n});\r\n\u0060\u0060\u0060",
    "upvotes": 2,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde849Ancb",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-27T19:35:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39711#issuecomment-1023571739"
      },
      {
        "id": "IC_kwDOAQzde85MAWNi",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:15:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39711#issuecomment-1275159394"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85CbJMw",
    "title": "Automatically infer \u0060OpenApiSecuritySchemes\u0060 from authentication configuration",
    "url": "https://github.com/dotnet/aspnetcore/issues/39761",
    "createdAt": "2022-01-25T22:09:50Z",
    "lastUpdated": "2024-10-26T15:12:02Z",
    "body": "At the moment, when users enable authentication in their ASP.NET apps, they typically have to manually the describe the \u0060OpenApiSecuritySchemes\u0060 in their application and the top level and configure \u0060OpenApiSecurityRequirements\u0060 for each route that requires authentication and authorization.\r\n\r\nWe should infer as much of these definitions as possible so users don\u0027t need to configure auth twice, once for their application and another time for OpenAPI.\r\n\r\nProvide metadata support for parts of the specification documented in https://swagger.io/docs/specification/authentication/.",
    "upvotes": 16,
    "labels": [
      "enhancement",
      "area-mvc",
      "feature-openapi",
      "Priority:1",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde84_mkCO",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-03-14T17:08:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39761#issuecomment-1067073678"
      },
      {
        "id": "IC_kwDOAQzde85E3a1z",
        "parentId": null,
        "author": "captainsafia",
        "content": "Who knew auth could be so hard? \uD83E\uDD2A \r\n\r\nI started experimenting with some of this support in the new Microsoft.AspNetCore.OpenAPI package. The problem is generally easy to solve for cookie and JWT bearer-based authentication types, but OAuth authentication types are a lot trickier for us to derive automatic annotations for because:\r\n\r\n- We don\u0027t store any information about what type of grant flow an OAuth implementation uses\r\n- We don\u0027t make it easy for authentication scheme providers to describe what authentication type they are\r\n\r\nWe\u0027ve had conversations about how to make the authentication system more self-describing for annotation purposes. There\u0027s more design scenarios to reason about here but for .NET 7 we\u0027re scoping it down to auto-generating annotations for JWT-bearer based types to align with the work we\u0027ve done with \u0060dotnet user-jwts\u0060 and the options-from-config changes.",
        "createdAt": "2022-06-14T15:44:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39761#issuecomment-1155378547"
      },
      {
        "id": "IC_kwDOAQzde85Gmpjd",
        "parentId": null,
        "author": "julealgon",
        "content": "\u003E ...but for .NET 7 we\u0027re scoping it down to auto-generating annotations for JWT-bearer based types...\r\n\r\n@captainsafia wouldn\u0027t it be possible to request the information from the user for the things that are hard to imply? Not having any scaffolding for AAD integration feels really unprofessional right now (in the sense that it is a solution that just _doesn\u0027t work at all out of the box_) and it would be really nice to have _something_ in place for .NET7.\r\n\r\nAlso, a lot of parameters used to build the auth schema for swagger can leverage the config section created by Azure AD itself: that\u0027s what I did for a few APIs on my side by creating a generic extension method that introduces a \u0060IConfigureOptions\u0060 implementation for \u0060SwaggerGenOptions\u0060 and \u0060SwaggerUIOptions\u0060 that rely on the \u0060AzureAD\u0060 config options to read some of the values to build things like the authorize/token URLs. The only \u0022inputs\u0022 needed for a default scafolding would be what grant types the user expects to support (it could default to \u0022Implicit\u0022 by default for example which is the simplest one). Even scopes are added in the config by default so even those could be inferred.\r\n\r\nThen if the user wants to move away from some of that stuff (like handling scopes directly without the config) they can edit the initial template code to accomodate.",
        "createdAt": "2022-07-14T14:44:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39761#issuecomment-1184536797"
      },
      {
        "id": "IC_kwDOAQzde85Gmq0v",
        "parentId": null,
        "author": "julealgon",
        "content": "On another note, I wish Azure AD\u0027s OpenIdConnect endpoint was more useful for this... if it returned app-specific scopes and URLs, it could be used directly with Swagger to automatically setup a lot of different details that have to be manually added today when using the OAuth2 \u0060SecuritySchemeType\u0060.\r\n\r\nAs it stands today, AzureAD\u0027s OpenIdConnect discovery endpoint is completely useless IMHO.\r\n\r\nRelated:\r\n- https://github.com/AzureAD/microsoft-identity-web/discussions/1689",
        "createdAt": "2022-07-14T14:49:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39761#issuecomment-1184541999"
      },
      {
        "id": "IC_kwDOAQzde85GoTLo",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E @captainsafia wouldn\u0027t it be possible to request the information from the user for the things that are hard to imply?\r\n\r\nPerhaps within reason. Although the goal of this design is to automatically generate as much of the \u0060OpenApiSecurityRequirement\u0060 and \u0060OpenApiSecurityScheme\u0060 definitions in the document as possible. \r\n\r\n\u003E Also, a lot of parameters used to build the auth schema for swagger can leverage the config section created by Azure AD itself:\r\n\r\nWe had discussed this option. It dovetails nicely in some ways with the work we\u0027re doing to support loading more authentication options from config (see https://github.com/dotnet/aspnetcore/issues/42170). However, configuration isn\u0027t the source of truth for how authentication is set up in application. You\u0027ll get something that partly works for generating some schemas but not all the time. Not to mention, the approach doesn\u0027t help at all for applying the security requirements on operations.\r\n\r\n\u003E Not having any scaffolding for AAD integration feels really unprofessional right now\r\n\r\nWe hadn\u0027t really explored doing this as part of the template/scaffolding infrastructure. At the moment, the plan is to do this work in the framework so that it can play well with all authentication strategies.\r\n\r\n",
        "createdAt": "2022-07-14T22:56:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39761#issuecomment-1184969448"
      },
      {
        "id": "IC_kwDOAQzde85O6uZr",
        "parentId": null,
        "author": "captainsafia",
        "content": "I spent some time prototyping what this would look like and landed on a pretty solid strategy that uses \u0060PostConfigureOptions\u0060 on a custom \u0060AuthenticationBuilder\u0060 that would work well for this.\r\n\r\nWith that in mind, here\u0027s some of the challenges:\r\n\r\n- The \u0060PostConfigureOptions\u0060 needs to be added to DI as part of the \u0060AddAuthentication\u0060 call. In my demo, I added this behavior to a custom \u0060WebApplicationAuthenticationBuilder\u0060 that was part of \u0060WebApplication\u0060. Similar to the model that we tried out in .NET 7 with \u0060builder.Authentication\u0060. It\u0027s not totally necessary but not having it would mean that this behavior will be enabled for all authentication scenarios in .NET 8.\r\n- The \u0060PostConfigureOptions\u0060 would need to emit \u0060OpenApiSecuritySchemes\u0060 given \u0060AuthenticationSchemeOptions\u0060 but cannot take a dependency on the type since it is not in the shared framework. We could consider packaging it in the shared framework or build a set of intermediary definitions.\r\n- The prototype relies on a global document service existing (see https://github.com/dotnet/aspnetcore/issues/44192) so that the security schemes under components can be populated.",
        "createdAt": "2022-11-22T17:26:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39761#issuecomment-1324017259"
      },
      {
        "id": "IC_kwDOAQzde85O6ybn",
        "parentId": null,
        "author": "captainsafia",
        "content": "I only got \u0060CookieOptions\u0060 and \u0060GoogleOptions\u0060 working for the sake of my demo but we probably want to support the full spectrum of authentication options in framework. Starting a draft of the options in the table below here:\r\n\r\n| Authentication option | Generated security requirement |\r\n|----------------------|---------------------------------|\r\n| JwtBearerOptions | { type: \u0027http\u0027, scheme: \u0027Bearer\u0027 } |\r\n\r\n\u003E The PostConfigureOptions would need to emit OpenApiSecuritySchemes given AuthenticationSchemeOptions but cannot take a dependency on the type since it is not in the shared framework. We could consider packaging it in the shared framework or build a set of intermediary definitions.\r\n\r\nI think building a set of intermediary types is the best choice here. It\u0027ll allow us to provide plugins for MVC \u002B NSwag/Swashbuckle and will allow community-provided authentication providers to present their own definitions for the auth strategies they register. Although it increases the API surface area of the feature it is the most flexible.",
        "createdAt": "2022-11-22T17:42:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39761#issuecomment-1324033767"
      },
      {
        "id": "IC_kwDOAQzde86RaSMf",
        "parentId": null,
        "author": "diegosasw",
        "content": "@captainsafia thanks for the great changes.\n\nMay I ask what\u0027s the current situation for .NET 9 with this? Haven\u0027t found any doc or guidance.\n\n\nI\u0027m using \u0060Microsoft.AspNetCore.OpenApi\u0060 version \u00609.0.0-rc.2.24474.3\u0060.\nThe OpenApi document generates well. I actually tried generating it at compile time with \u0060Microsoft.Extensions.ApiDescription.Server\u0060 version \u00609.0.0-rc.2.24474.3\u0060 and the following OpenApi options in the _.csproj_ and it generates the OpenApi document properly, finding minimal endpoints and infering request/response schemas. All good there\n\u0060\u0060\u0060\n    \u003CPropertyGroup\u003E\n        \u003CTargetFramework\u003Enet9.0\u003C/TargetFramework\u003E\n        \u003CNullable\u003Eenable\u003C/Nullable\u003E\n        \u003CImplicitUsings\u003Eenable\u003C/ImplicitUsings\u003E\n        \u003CIsPackable\u003Efalse\u003C/IsPackable\u003E\n        \u003C!--Open Api Generation--\u003E\n        \u003COpenApiDocumentsDirectory\u003E$(MSBuildProjectDirectory)\u003C/OpenApiDocumentsDirectory\u003E\n        \u003COpenApiGenerateDocuments\u003Etrue\u003C/OpenApiGenerateDocuments\u003E\n        \u003COpenApiGenerateDocumentsOnBuild\u003Etrue\u003C/OpenApiGenerateDocumentsOnBuild\u003E\n        \u003C!--End of Open Api Generation--\u003E\n    \u003C/PropertyGroup\u003E\n\u0060\u0060\u0060\n\nNow I can plug Scalar or Swashbuckle UI and read from the OpenApi json to render a UI\n\u0060\u0060\u0060\napp .UseSwaggerUI(options =\u003E\n{\n      options.SwaggerEndpoint(\u0022/openapi/v1.json\u0022, \u0022MyProject.Api\u0022);\n});\n\u0060\u0060\u0060\n\nBut what\u0027s the situation with Authentication?\n\nMy endpoints are secured with Authentication Bearer schema, but the generated OpenApi document doesn\u0027t seem to infer this.\n\nAs I understood, [Security Schemas like Bearer authentication are standard in OpenApi v3](https://swagger.io/docs/specification/v3_0/authentication/bearer-authentication/)\n\nI suppose this is not yet available in the NuGet or .NET 9.\n\nIs there any workaround?\n\nIf I was using Swashbuckle Swagger also for OpenApi document generation, I could instruct it to generate security schema like this\n\u0060\u0060\u0060\nservices.AddSwaggerGen(\noptions =\u003E\n{\n\toptions.AddSecurityDefinition(\n\t\t\u0022Bearer\u0022,\n\t\tnew OpenApiSecurityScheme\n\t\t{\n\t\t\tName = \u0022Authorization\u0022,\n\t\t\tType = SecuritySchemeType.Http,\n\t\t\tScheme = \u0022Bearer\u0022,\n\t\t\tIn = ParameterLocation.Header,\n\t\t\tDescription = \u0022JWT Authorization header\u0022\n\t\t});\n\n\toptions.AddSecurityRequirement(\n\t\tnew OpenApiSecurityRequirement\n\t\t{\n\t\t\t{\n\t\t\t\tnew OpenApiSecurityScheme\n\t\t\t\t{\n\t\t\t\t\tReference = new OpenApiReference\n\t\t\t\t\t{\n\t\t\t\t\t\tType = ReferenceType.SecurityScheme,\n\t\t\t\t\t\tId = \u0022Bearer\u0022\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tArray.Empty\u003Cstring\u003E()\n\t\t\t}\n\t\t});\n});\n\u0060\u0060\u0060\n\nIs there any \u0022manual\u0022 way to do this in the Microsoft package? I don\u0027t see any security schema option\n\u0060\u0060\u0060\nservices.AddOpenApi(options =\u003E\n{\n     options.OpenApiVersion = OpenApiSpecVersion.OpenApi3_0;\n});\n\u0060\u0060\u0060\n\nMaybe there is some \u0060IOpenApiSchemaTransformer\u0060 implementation somewhere? Can\u0027t find anything\n\u0060\u0060\u0060\nservices.AddOpenApi(options =\u003E\n{\n    options.OpenApiVersion = OpenApiSpecVersion.OpenApi3_0;\n    options.AddSchemaTransformer\u003CMyOpenApiSchemaTransformer\u003E();\n});\n\u0060\u0060\u0060",
        "createdAt": "2024-10-26T13:35:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39761#issuecomment-2439586591"
      },
      {
        "id": "IC_kwDOAQzde86RaXQV",
        "parentId": null,
        "author": "diegosasw",
        "content": "I\u0027ll answer myself in case somebody find this useful. \n\nAfter playing a bit with the options I managed to add open api security scheme by adding a document transformer \u0060IOpenApiDocumentTransformer\u0060, which is later picked by Swashbuckle Swagger UI properly.\n\nI would like to find more examples if anyone knows, but for now this works fine.\n\n\u0060\u0060\u0060\ninternal static class OpenApiRegistrations\n{\n    internal static IServiceCollection AddMicrosoftOpenApi(\n        this IServiceCollection services)\n    {\n        services.AddOpenApi(options =\u003E\n        {\n            options.OpenApiVersion = OpenApiSpecVersion.OpenApi3_0;\n            options.AddDocumentTransformer\u003COpenApiSecuritySchemeTransformer\u003E();\n        });\n        \n        return services;\n    }\n}\n\npublic class OpenApiSecuritySchemeTransformer\n    : IOpenApiDocumentTransformer\n{\n    public Task TransformAsync(OpenApiDocument document, OpenApiDocumentTransformerContext context,\n        CancellationToken cancellationToken)\n    {\n        var securitySchema =\n            new OpenApiSecurityScheme\n            {\n                Type = SecuritySchemeType.Http,\n                Scheme = \u0022bearer\u0022,\n                BearerFormat = \u0022JWT\u0022,\n                Description = \u0022JWT Authorization header using the Bearer scheme.\u0022\n            };\n\n        var securityRequirement =\n            new OpenApiSecurityRequirement\n            {\n                {\n                    new OpenApiSecurityScheme\n                    {\n                        Reference = new OpenApiReference\n                        {\n                            Id = \u0022bearerAuth\u0022,\n                            Type = ReferenceType.SecurityScheme\n                        }\n                    },\n                    []\n                }\n            };\n        \n        document.SecurityRequirements.Add(securityRequirement);\n        document.Components = new OpenApiComponents()\n        {\n            SecuritySchemes = new Dictionary\u003Cstring, OpenApiSecurityScheme\u003E()\n            {\n                { \u0022bearerAuth\u0022, securitySchema }\n            }\n        };\n        return Task.CompletedTask;\n    }\n}\n\u0060\u0060\u0060\n\n",
        "createdAt": "2024-10-26T14:47:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39761#issuecomment-2439607317"
      },
      {
        "id": "IC_kwDOAQzde86RaZeW",
        "parentId": null,
        "author": "martincostello",
        "content": "An inline document transformer is also how I went about it: https://github.com/martincostello/aspnetcore-openapi/blob/d87b42a236762ac32d833e6b482500b4d97f118c/src/TodoApp/OpenApi/AspNetCore/AspNetCoreOpenApiEndpoints.cs#L35-L53",
        "createdAt": "2024-10-26T15:12:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39761#issuecomment-2439616406"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85CgTyf",
    "title": "Media type application/problem\u002Bjson still lost in combination with ProducesAttribute",
    "url": "https://github.com/dotnet/aspnetcore/issues/39802",
    "createdAt": "2022-01-27T04:37:25Z",
    "lastUpdated": "2024-07-12T17:17:09Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nThis issue is the same as reported and resolved here: https://github.com/dotnet/aspnetcore/issues/19510\r\n\r\nHaving tested with the project that is the previous issue\u0027s minimal repro (in .NET 6 instead of .NET core 3.1),  I\u0027ve found the same issue still persists.\r\n\r\nThat is, a controller with \u0060ProducesAttribute\u0060 set to \u0060application/json\u0060 will set the response header \u0060media-type\u0060 to \u0060application/json\u0060 when it\u0027s returning a \u0060ProblemDetails\u0060 or \u0060ValidationProblemDetails\u0060. It\u0027s supposed to return \u0060application/problem\u002Bjson\u0060.\r\n\r\n\r\n\r\n### Expected Behavior\r\n\r\nWhen the controller or framework returns a \u0060ProblemDetails\u0060 or \u0060ValidationProblemDetails\u0060, the response header \u0060media type\u0060 should be \u0060application/problem\u002Bjson\u0060 as per  https://datatracker.ietf.org/doc/html/rfc7807#section-3\r\n\r\n\r\n### Steps To Reproduce\r\n\r\nMinimalistic repro project: https://github.com/dsun1/ProblemMediaTypeIssue\r\n\r\nAttribute a controller class or method with \u0060ProducesAttribute(\u0022application/json\u0022)\u0060. If that controller returns a problem, or if the framework returns a validation problem, the response \u0060media type\u0060 will be \u0060application/json\u0060 instead of \u0060application/problem\u002Bjson\u0060.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n6.0.101\r\n\r\n### Anything else?\r\n\r\n\u0060dotnet --info\u0060\r\n\u0060\u0060\u0060\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.101\r\n Commit:    ef49f6213a\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  11.0\r\n OS Platform: Darwin\r\n RID:         osx.10.16-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/6.0.101/\r\n\r\nHost (useful for support):\r\n  Version: 6.0.1\r\n  Commit:  3a25a7f1cc\r\n\r\n.NET SDKs installed:\r\n  2.1.818 [/usr/local/share/dotnet/sdk]\r\n  3.1.416 [/usr/local/share/dotnet/sdk]\r\n  5.0.404 [/usr/local/share/dotnet/sdk]\r\n  6.0.101 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.30 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.30 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.22 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.13 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.22 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.13 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\u0060\u0060\u0060",
    "upvotes": 10,
    "labels": [
      "bug",
      "feature-mvc-execution-pipeline",
      "feature-problem-details",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde848-a9X",
        "parentId": null,
        "author": "angularsen",
        "content": "I was just about to file this exact same issue, dumping my report here instead.\r\n\r\nThis was reported in #19510 and fixed in #30367, included in .NET 6.0-preview3.\r\n\r\nI can still reproduce this issue, tested on:\r\n- .NET 6.0.100 SDK, AspNetCore 6.0.0, Windows 10.\r\n- .NET 6.0.101 SDK, AspNetCore 6.0.1, Windows 11.\r\n\r\nMinimal repro here:\r\nhttps://github.com/angularsen/repro-aspnetcore-19510\r\n\r\n## Repro details\r\n\r\n### \u2705 Test 1 - Problem() without [Produces]\r\nReturns \u0060application/problem\u002Bjson\u0060 as expected.\r\n\r\n\u0060\u0060\u0060shell\r\ncurl -i http://localhost:5106/test/1\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060http request\r\nHTTP/1.1 500 Internal Server Error\r\nContent-Type: application/problem\u002Bjson; charset=utf-8\r\nDate: Thu, 27 Jan 2022 07:53:16 GMT\r\nServer: Kestrel\r\nTransfer-Encoding: chunked\r\n\r\n{\u0022type\u0022:\u0022https://tools.ietf.org/html/rfc7231#section-6.6.1\u0022,\u0022title\u0022:\u0022An error occurred while processing your request.\u0022,\u0022status\u0022:500,\u0022detail\u0022:\u0022Test1 \u2705 - Problem(string) without ProducesAttribute =\u003E returns application/problem\u002Bjson. Assembly: C:\\\\Program Files\\\\dotnet\\\\shared\\\\Microsoft.AspNetCore.App\\\\6.0.1\\\\Microsoft.AspNetCore.Mvc.Core.dll\u0022,\u0022traceId\u0022:\u002200-f837e61b4f3fe38e1326d4b736ce4b1b-5f42df452447a45b-00\u0022}\r\n\u0060\u0060\u0060\r\n\r\n### \u274C Test 2 - Problem() with [Produces(\u0022application/json\u0022)]\r\nReturns \u0060application/json\u0060 instead of expected \u0060application/problem\u002Bjson\u0060.\r\n\r\n\u0060\u0060\u0060shell\r\ncurl -i http://localhost:5106/test/2\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060http request\r\nHTTP/1.1 500 Internal Server Error\r\nContent-Type: application/json; charset=utf-8\r\nDate: Thu, 27 Jan 2022 07:54:47 GMT\r\nServer: Kestrel\r\nTransfer-Encoding: chunked\r\n\r\n{\u0022type\u0022:\u0022https://tools.ietf.org/html/rfc7231#section-6.6.1\u0022,\u0022title\u0022:\u0022An error occurred while processing your request.\u0022,\u0022status\u0022:500,\u0022detail\u0022:\u0022Test2 \u274C - Problem(string) with [Produces(\\\u0022application/json\\\u0022)] =\u003E incorrectly returns application/json instead of application/problem\u002Bjson. Assembly: C:\\\\Program Files\\\\dotnet\\\\shared\\\\Microsoft.AspNetCore.App\\\\6.0.1\\\\Microsoft.AspNetCore.Mvc.Core.dll\u0022,\u0022traceId\u0022:\u002200-7898b5db7c72df8b1589c0776c857321-1145d480210ea6e5-00\u0022}\r\n\u0060\u0060\u0060\r\n\r\n### \u274C Test 3 - Problem() with [Produces(\u0022application/json\u0022, \u0022application/problem\u002Bjson\u0022)]\r\nReturns \u0060application/json\u0060 instead of expected \u0060application/problem\u002Bjson\u0060.\r\n\r\n\u0060\u0060\u0060shell\r\ncurl -i http://localhost:5106/test/3\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060http request\r\nHTTP/1.1 500 Internal Server Error\r\nContent-Type: application/json; charset=utf-8\r\nDate: Thu, 27 Jan 2022 08:50:00 GMT\r\nServer: Kestrel\r\nTransfer-Encoding: chunked\r\n\r\n{\u0022type\u0022:\u0022https://tools.ietf.org/html/rfc7231#section-6.6.1\u0022,\u0022title\u0022:\u0022An error occurred while processing your request.\u0022,\u0022status\u0022:500,\u0022detail\u0022:\u0022Test3 \u274C - Problem(string) with [Produces(\\\u0022application/json\\\u0022, \\\u0022application/problem\u002Bjson\\\u0022)] =\u003E incorrectly returns application/json instead of application/problem\u002Bjson. Assembly: C:\\\\Program Files\\\\dotnet\\\\shared\\\\Microsoft.AspNetCore.App\\\\6.0.1\\\\Microsoft.AspNetCore.Mvc.Core.dll\u0022,\u0022traceId\u0022:\u002200-4e825df690029941d19792a19b6e1346-1e417b4f47ca76cf-00\u0022}\r\n\u0060\u0060\u0060\r\n\r\n### \u274C Test 4 - Problem() with [Produces(\u0022application/problem\u002Bjson\u0022, \u0022application/json\u0022)]\r\nReturns \u0060application/problem\u002Bjson\u0060, but then \u0060Ok(object)\u0060 also returns \u0060application/problem\u002Bjson\u0060 instead of expected \u0060application/json\u0060.\r\n\r\n\u0060\u0060\u0060shell\r\ncurl -i http://localhost:5106/test/4\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060http request\r\nHTTP/1.1 500 Internal Server Error\r\nContent-Type: application/problem\u002Bjson; charset=utf-8\r\nDate: Thu, 27 Jan 2022 07:55:05 GMT\r\nServer: Kestrel\r\nTransfer-Encoding: chunked\r\n\r\n{\u0022type\u0022:\u0022https://tools.ietf.org/html/rfc7231#section-6.6.1\u0022,\u0022title\u0022:\u0022An error occurred while processing your request.\u0022,\u0022status\u0022:500,\u0022detail\u0022:\u0022Test4 \u274C - Problem(string) with [Produces(\\\u0022application/problem\u002Bjson\\\u0022, \\\u0022application/json\\\u0022)] =\u003E returns content-type application/problem\u002Bjson, but then Ok(string) also returns application/problem\u002Bjson. Assembly: C:\\\\Program Files\\\\dotnet\\\\shared\\\\Microsoft.AspNetCore.App\\\\6.0.1\\\\Microsoft.AspNetCore.Mvc.Core.dll\u0022,\u0022traceId\u0022:\u002200-cb867abbe8d88fbced809ff7764199fe-bb8a5378a54e6789-00\u0022}\r\n\u0060\u0060\u0060\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Edotnet --info\u003C/summary\u003E\r\n\u0060\u0060\u0060\r\ndotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.101\r\n Commit:    ef49f6213a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22000\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.101\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.1\r\n  Commit:  3a25a7f1cc\r\n\r\n.NET SDKs installed:\r\n  3.1.416 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.301 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.302 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100-rc.2.21505.57 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-rc.2.21480.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-rc.2.21480.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0-rc.2.21501.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E",
        "createdAt": "2022-01-27T09:11:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-1022996311"
      },
      {
        "id": "IC_kwDOAQzde849y4cF",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E \u274C Test 4 - Problem() with [Produces(\u0022application/problem\u002Bjson\u0022, \u0022application/json\u0022)]\r\n\r\nSo, the \u0060ProducesAttribute\u0060 has an \u0060OnResultExecuting\u0060 hook that runs before the logic in the \u0060ObjectResultExecutor\u0060 that was modified in the referenced PR runs. This \u0060OnResultExecuting\u0060 will clear out \u0060result.ContentTypes\u0060 and replace it with the content types that are defined in the \u0060ProducesAttribute\u0060.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/b21596afeb7412844ee5e19f6e5bef832c533c0f/src/Mvc/Mvc.Core/src/ProducesAttribute.cs#L91\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/b21596afeb7412844ee5e19f6e5bef832c533c0f/src/Mvc/Mvc.Core/src/ProducesAttribute.cs#L101-L108\r\n\r\nSo, this is going to set \u0060result.ContentTypes\u0060 to \u0060[\u0022application/problem\u002Bjson\u0022, \u0022application/json\u0022]\u0060. Now the \u0060InferContentType\u0060 method modified in the referenced PR effectively no-ops because \u0060result.ContentTypes\u0060 is not empty and the \u0060result.Value\u0060 is not \u0060ProblemDetails\u0060.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.Core/src/Infrastructure/ObjectResultExecutor.cs#L130-L142\r\n\r\nI believe that the tests introduced in that PR didn\u0027t catch the issue because they don\u0027t account for the fact that the \u0060ProducesAttribute\u0060 modifies the content types in this way.\r\n\r\nI think the fundamental right choice here is to modify the \u0060ProducesAttribute\u0060 such that the \u0060OnResultExecuting\u0060 invocation no-ops under certain scenarios since that\u0027s the root cause here.\r\n\r\n\r\n",
        "createdAt": "2022-02-11T23:20:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-1036748549"
      },
      {
        "id": "IC_kwDOAQzde85BoSD9",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-04-18T04:19:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-1101078781"
      },
      {
        "id": "IC_kwDOAQzde85BoSR4",
        "parentId": null,
        "author": "captainsafia",
        "content": "@brunolins16 Not sure if you want to consider this under the bucket of ProblemDetails-related items.\r\n\r\nNot sure about relative priority compared to the cost of fix here, so might not be worth doing...",
        "createdAt": "2022-04-18T04:21:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-1101079672"
      },
      {
        "id": "IC_kwDOAQzde85B2Jxd",
        "parentId": null,
        "author": "agilenut",
        "content": "Fingers crossed this gets fixed. Right now, I have to create an extra operation filter in every API I create.",
        "createdAt": "2022-04-21T05:10:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-1104714845"
      },
      {
        "id": "IC_kwDOAQzde85C4o8T",
        "parentId": null,
        "author": "angularsen",
        "content": "Just stumbled on this:\r\n[JSON output is the default negotiated content format](https://docs.microsoft.com/en-us/aspnet/core/web-api/advanced/formatting?view=aspnetcore-6.0#content-negotiation).\r\n\r\nFor our JSON APIs, this means \u0060[Produces(\u0022application/json\u0022)]\u0060 is largely redundant and we can remove it from our API controllers to get the correct response content type header \u0060application/problem\u002Bjson\u0060 when returning \u0060Problem()\u0060, \u0060ValidationProblem()\u0060 and other object results producing a ProblemDetails response.\r\n\r\nWe have generally transitioned from \u0060ActionResult\u0060 to exception flow to control error responses with https://github.com/khellang/Middleware, but many old endpoints still return ActionResult.",
        "createdAt": "2022-05-10T09:21:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-1122144019"
      },
      {
        "id": "IC_kwDOAQzde85DMg8T",
        "parentId": null,
        "author": "dnperfors",
        "content": "One reason we use \u0060[Produces(\u0022application/json\u0022]\u0060 is because we want our swagger documentation to show \u0060application/json\u0060 for our normal content. We would be glad if this would be fixed properly (and I would even consider helping with the PR for this).\r\nFor now I would probably go for a custom ProducesAttribute to \u0022fix\u0022 the problem myself.\r\n\r\n--- edit ---\r\nThe workaround I have chosen for now is to use \u0060[SwaggerResponse(StatusCodes.Status200OK, null, typeof(...), MediaTypes.Application.Json)]\u0060 without \u0060[Produces(MediaTypes.Application.Json)]\u0060. This will return the correct Content types in our swagger documentation and the correct content type in all responses (that I have tested)",
        "createdAt": "2022-05-16T08:01:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-1127354131"
      },
      {
        "id": "IC_kwDOAQzde85E47Vr",
        "parentId": null,
        "author": "agilenut",
        "content": "\u003E One reason we use [Produces(\u0022application/json\u0022] is because we want our swagger documentation to show application/json for our normal content.\r\n\r\nSame here. We need to be able to use both and get the correct media types.\r\n\r\n",
        "createdAt": "2022-06-14T22:32:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-1155773803"
      },
      {
        "id": "IC_kwDOAQzde85MAWZ_",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:16:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-1275160191"
      },
      {
        "id": "IC_kwDOAQzde85MAW-_",
        "parentId": null,
        "author": "agilenut",
        "content": "I know this sounds silly but this was actually my most anticipated \u0022feature\u0022 of .Net 7.",
        "createdAt": "2022-10-11T19:18:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-1275162559"
      },
      {
        "id": "IC_kwDOAQzde85PD7-D",
        "parentId": null,
        "author": "RenegadeVile",
        "content": "\u003E I know this sounds silly but this was actually my most anticipated \u0022feature\u0022 of .Net 7.\r\n\r\nSame here. I came here hoping to see it fixed.",
        "createdAt": "2022-11-24T13:09:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-1326432131"
      },
      {
        "id": "IC_kwDOAQzde85PXlYo",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E I think the fundamental right choice here is to modify the ProducesAttribute such that the OnResultExecuting invocation no-ops under certain scenarios since that\u0027s the root cause here.\r\n\r\n@brunolins16 What do you think about the proposed solution here?",
        "createdAt": "2022-11-30T02:59:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-1331582504"
      },
      {
        "id": "IC_kwDOAQzde85kcWcj",
        "parentId": null,
        "author": "niemyjski",
        "content": "Is this going to get fixed?",
        "createdAt": "2023-08-20T01:58:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-1685153571"
      },
      {
        "id": "IC_kwDOAQzde86AjeN-",
        "parentId": null,
        "author": "7amou3",
        "content": "still waiting the fix",
        "createdAt": "2024-06-09T20:44:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-2156782462"
      },
      {
        "id": "IC_kwDOAQzde86ErOAq",
        "parentId": null,
        "author": "tylerohlsen",
        "content": "I found a workaround.  If I remove the \u0060[Produces(...)]\u0060 attribute and replace it with:\r\n\u0060\u0060\u0060csharp\r\n[ProducesResponseType(typeof(MyResponseType), statusCode: 200, \u0022application/json\u0022)]\r\n[ProducesResponseType(typeof(ProblemDetails), statusCode: 400, \u0022application/problem\u002Bjson\u0022)]\r\n[ProducesResponseType(typeof(ProblemDetails), statusCode: 500, \u0022application/problem\u002Bjson\u0022)]\r\n\u0060\u0060\u0060\r\nthen the response has the correct content-type header (and swagger documentation is correct).\r\n\r\nOr if you want to make it automatic on every endpoint:\r\n\u0060\u0060\u0060\r\n.AddControllers(options =\u003E {\r\n    options.Filters.Add(new ProducesResponseTypeAttribute(typeof(ProblemDetails), statusCode: 400, \u0022application/problem\u002Bjson\u0022));\r\n    options.Filters.Add(new ProducesResponseTypeAttribute(typeof(ProblemDetails), statusCode: 500, \u0022application/problem\u002Bjson\u0022));\r\n})\r\n\u0060\u0060\u0060\r\nand then I only need to add the \u0060[ProducesResponseType(...)]\u0060 attribute for the success case (200/201/204) on each controller action",
        "createdAt": "2024-07-12T16:25:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-2225922090"
      },
      {
        "id": "IC_kwDOAQzde86Ergwc",
        "parentId": null,
        "author": "captainsafia",
        "content": "Assigning myself to this to see if I can land on a solution for this as part of the recent wave of OpenAPI-work. I\u0027m particularly eyeing the change in behavior between \u0060[Produces(\u0022application/json\u0022, \u0022application/problem\u002Bjson\u0022)]\u0060 and \u0060[Produces(\u0022application/problem\u002Bjson\u0022, \u0022application/json)]\u0060.\r\n\r\nI have to revisit the analysis I did in https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-1036748549. Hopefully, there is a straightforward way to apply this fix without having to considerably break into the content-neg layer in MVC.\r\n\r\n",
        "createdAt": "2024-07-12T17:17:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39802#issuecomment-2225998876"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85C1Oyy",
    "title": "Support XML-based OpenAPI docs for minimal and controller-based APIs with \u0060Microsoft.AspNetCore.OpenApi\u0060",
    "url": "https://github.com/dotnet/aspnetcore/issues/39927",
    "createdAt": "2022-02-01T22:08:13Z",
    "lastUpdated": "2024-11-20T21:39:18Z",
    "body": "This issue tracks adding support for enhancing OpenAPI documents generated via the \u0060Microsoft.AspNetCore.OpenApi\u0060 package with XML comments present in both minimal and controller-based APIs and their shared types.\n\nDevelopment for this is happening in preview over in the AspLabs repo [in this directory](https://github.com/aspnet/AspLabs/tree/main/src/OpenApiXmlCommentGenerator) but issues and discussions will happen here.\n\nEventually, the goal is to stabilize this source generator implementation then fold it into the \u0060Microsoft.AspNetCoreOpenApi\u0060. Tangentially, there\u0027s a soft goal to split out some of the logic for processing XML doc comments into structured metadata via Roslyn analysis into a separate package.\n\n**Update from October 26th, 2024:**\n\nI\u0027ve snapped out preview bits of XML support for both Minimal APIs \u002B controller-based APIs [out of the AspLabs repo](https://github.com/aspnet/AspLabs/tree/main/src/OpenApiXmlCommentGenerator). For now, this package is being shipping in preview out of the _dotnet10_ package feeds.\n\n\u0060\u0060\u0060\n$ dotnet new webapi\n$ dotnet new nugetconfig\n$ dotnet nuget add source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet10/nuget/v3/index.json -n dotnet10\n$ dotnet add package Microsoft.AspNetCore.OpenApi.SourceGenerators --prerelease\n\u0060\u0060\u0060\n\nCurrently, he functionality is on-by-default so once you add the package reference above you\u0027ll see annotations light up. No modifications to any code are necessary.\n\nSome limitations, caveats, and notes:\n\n- This package assumes that you are using \u0060Microsoft.AspNetCore.OpenApi\u0060 to generate your OpenAPI documents. Under the hood, it\u0027s using the transformer APIs in this package to apply the docs.\n- This package currently only applies XML docs in the application assembly. External references aren\u0027t supported. Apparently, there\u0027s some fussing about with MSBuild (and possibly the compiler) to get XML files associated with external references loaded smoothly.\n- There isn\u0027t super great support for \u0060crefs\u0060 as mentioned in [the comment above](https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2016960569) but this is something I hope to tackle before we ship the package inside \u0060Microsoft.AspnetCore.OpenApi\u0060 for v10.\n\nI\u0027ve created a branch in the TrainingApi sample app to showcase the current state of the package. You can find that sample over https://github.com/captainsafia/TrainingApi/tree/safia/xml-support.\n\n\u003Chr/\u003E\n\n\u003Cdetails\u003E\n\u003Csummary\u003EOpen me for old issue content\u003C/summary\u003E\n\n\n### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nSwashbuckle currently supports reading the XML doc string associated with an action\u0027s method to derive the description, summary, example, etc for an action.\n\nWe need to add similar support for minimal endpoints where the documentation might be on a referenced method group or (maybe) on a \u0060Map*\u0060 invocation.\n\n### Expected Behavior\n\n\u0060\u0060\u0060csharp\n/// \u003Csummary\u003E\n/// This is a foo.\n/// \u003C/summary\u003E\nstring GetFoo() =\u003E \u0022This is a test\u0022;\n\u0060\u0060\u0060\n\nShould resolve the correct summary info.\n\n\u003C/details\u003E",
    "upvotes": 62,
    "labels": [
      "area-mvc",
      "feature-openapi",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde849PBNk",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-02-01T22:24:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-1027347300"
      },
      {
        "id": "IC_kwDOAQzde85DdF7d",
        "parentId": null,
        "author": "jvetter713",
        "content": "I feel this is a very important feature.  Minimal Web API\u0027s are awesome but if we cannot use comments for use with Swagger, they lose their appeal.  Please make this happen.",
        "createdAt": "2022-05-19T13:37:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-1131699933"
      },
      {
        "id": "IC_kwDOAQzde85DfL4w",
        "parentId": null,
        "author": "LeoJHarris",
        "content": "Make minimal API\u0027s even better with comments \uD83D\uDC4D must have feature.",
        "createdAt": "2022-05-19T22:03:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-1132248624"
      },
      {
        "id": "IC_kwDOAQzde85EGkUi",
        "parentId": null,
        "author": "mholec",
        "content": "**I consider this functionality unnecessary.** Given the way REST APIs are created and the constant proliferation of approaches like microservices and API gateways, generating documentation in general makes no sense. The documentation generated falls short of the quality of the specification and reflects implementation errors. Generated documentation is unusable in practice for automation, mocking and testing. The specification first approach has been a trend for several years. ",
        "createdAt": "2022-05-31T19:41:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-1142572322"
      },
      {
        "id": "IC_kwDOAQzde85GFcF6",
        "parentId": null,
        "author": "t4apps",
        "content": "The Open API documentation can be imported directly into Azure APIM (public facing). It makes a lot of sense.",
        "createdAt": "2022-07-06T06:27:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-1175830906"
      },
      {
        "id": "IC_kwDOAQzde85KafY4",
        "parentId": null,
        "author": "andrewlock",
        "content": "Just FYI, this _already_ works, as long as you \r\n- Setup Documentation generation\r\n- Configure \u0060IncludeXmlComments\u0060 in \u0060AddSwaggerGen()\u0060\r\n- Use MethodGroup endpoint handlers.\r\n\r\nThat last point is the biggest sticking point - it would be great if you could use lambdas too, but at least this partially works \uD83D\uDE42 \r\n\r\nOne observation (I\u0027m not sure if it\u0027s a bug or expected behaviour). If you use \u0060WithOpenApi()\u0060, it wipes out any existing documentation of the parameters that comes from XML",
        "createdAt": "2022-09-15T18:33:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-1248458296"
      },
      {
        "id": "IC_kwDOAQzde85MAWW-",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:16:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-1275159998"
      },
      {
        "id": "IC_kwDOAQzde85OXJ8i",
        "parentId": null,
        "author": "JHorvath-MaxetaTech",
        "content": "As far as feedback goes, 100% yes please implement this. We just started to move all our old Controller based APIs to new Minimal APIs and immediately realized none of the documentation was coming across in the swagger page. HUGE let-down! This is super important for public facing APIs, allowing developers to easily understand and consume REST services without the need for separate documentation.",
        "createdAt": "2022-11-15T02:59:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-1314692898"
      },
      {
        "id": "IC_kwDOAQzde85PkqfN",
        "parentId": null,
        "author": "pepperpark",
        "content": "\u003E Thanks for contacting us.\r\n\u003E \r\n\u003E We\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). If we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).\r\n\r\nFive more comments and it will be moved to the .NET 9 Planning? :-D",
        "createdAt": "2022-12-02T09:59:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-1335011277"
      },
      {
        "id": "IC_kwDOAQzde85PmoYB",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Five more comments and it will be moved to the .NET 9 Planning? :-D\r\n\r\nlol trust me i feel this way about some favorite issues of mine too\r\n\r\nTo provide some more context here, at the moment, support for XML docs in OpenAPI isn\u0027t supported in-framework by ASP.NET. Instead, you\u0027re probably getting the functionality from whatever package you\u0027re using to render the Swagger UI and produce the OpenAPI JSON/YML document (usually NSwag or Swashbuckle for most people).\r\n\r\nThis issue is tracking making integration of XML docs automatic for minimal APIs that leverage \u0060WithOpenApi\u0060. It falls into the category of features like https://github.com/dotnet/aspnetcore/issues/44232 and https://github.com/dotnet/aspnetcore/issues/39761 where the goal is to make sure that more concepts from your code get funneled into OpenAPI documentation without you having to interfere as much (e.g. enable XML integration in options or document the OpenAPI security definitions yourself).\r\n\r\nThis feature has a lot of up-votes, which is one of the indicators we use for prioritization (see [the docs on how we do milestone planning](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md#milestone-planning)).\r\n\r\nSo if these types of features will be helpful to you, giving the main issue an upvote is a great way to help identify which issues are important. Especially for OpenAPI, where TBH, there\u0027s a lot of L-XL sized issues that are one our bucket list.\r\n\r\nLMK if you have any other feedback/questions.\r\n\r\nBTW: I have made of prototype of built-in XML support so there has been some effort applied in this area already.",
        "createdAt": "2022-12-02T16:51:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-1335526913"
      },
      {
        "id": "IC_kwDOAQzde85YCWIG",
        "parentId": null,
        "author": "MNF",
        "content": "@andrewlock, could you please point to an example where minimal api generates swagger  including  xml comments?\r\n",
        "createdAt": "2023-03-20T22:13:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-1477009926"
      },
      {
        "id": "IC_kwDOAQzde85YCexQ",
        "parentId": null,
        "author": "Lonli-Lokli",
        "content": "@MNF you can check https://github.com/dotnet/aspnet-api-versioning/tree/main/examples/AspNetCore/WebApi/MinimalOpenApiExample",
        "createdAt": "2023-03-20T22:48:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-1477045328"
      },
      {
        "id": "IC_kwDOAQzde85YCpOh",
        "parentId": null,
        "author": "captainsafia",
        "content": "@Lonli-Lokli It looks like the example that you provided showcases OpenAPI \u002B Minimal API \u002B API versioning. [This blog post](https://khalidabuhakmeh.com/using-xml-documentation-with-aspnetcore-minimal-api-apps-and-openapi) summarizes the XML-specific stuff.",
        "createdAt": "2023-03-20T23:36:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-1477088161"
      },
      {
        "id": "IC_kwDOAQzde854KnM0",
        "parentId": null,
        "author": "captainsafia",
        "content": "Automagic support for this will be included as part of the built-in OpenAPI document generation (https://github.com/dotnet/aspnetcore/issues/54598).\r\n\r\nLikely not as part of the feature set coming out with preview4 but hopefully before .NET 9 GA.\r\n\r\n![image](https://media4.giphy.com/media/huJmPXfeir5JlpPAx0/giphy.gif)",
        "createdAt": "2024-03-22T22:50:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2016047924"
      },
      {
        "id": "IC_kwDOAQzde854OGA5",
        "parentId": null,
        "author": "KristofferStrube",
        "content": "There isn\u0027t a set standard for how documentation like summaries, remarks, returns, and examples should be supplied when XML documentation is included in the generated document as it depends on how the Open API Spec is consumed.\r\nThe most common way to consume the specification is through Swagger UI which supports descriptions in HTML format for the different endpoints, their return value, the different route parameters, and post-bodies.\r\n\r\nWhen writing XML Documentation we can add extra child tags that convey extra semantic meaning like the following:\r\n\u0060\u0060\u0060csharp\r\n/// \u003Csummary\u003E\r\n/// Gets a new soft \u003Csee cref=\u0022Cat\u0022 /\u003E.\r\n/// \u003C/summary\u003E\r\nCat GetSoftCat() =\u003E new(\u0022Soft Kittie\u0022);\r\n\u0060\u0060\u0060\r\nOut of the box, the above would not render a correct link to the \u0060Cat\u0060 model in place of the \u0060\u003Csee/\u003E\u0060 tag, but we could look up the generated \u0060URI Fragment\u0060 i.e. \u0060#model-Cat\u0060 and replace the \u0060\u003Csee /\u003E\u0060 tag with an anchor to that fragment path. This would be nice as many use \u0060see\u0060 references in their XML Documentation.\r\n\r\nAnother nice feature of XML Documentation that can be used to minimize repetition of phrases in similar descriptions is the \u0060\u003Cinheritdoc/\u003E\u0060 tag.\r\n\u0060\u0060\u0060csharp\r\n/// \u003Csummary\u003E\r\n/// Gets a new happy \u003Csee cref=\u0022Cat\u0022 /\u003E.\r\n/// \u003C/summary\u003E\r\n/// \u003Creturns\u003E\r\n/// Returns a new \u003Csee cref=\u0022Cat\u0022 /\u003E instance.\r\n/// \u003C/returns\u003E\r\nCat GetHappyCat() =\u003E new(\u0022Happy Kittie\u0022);\r\n\r\n/// \u003Csummary\u003E\r\n/// Gets a new soft \u003Csee cref=\u0022Cat\u0022 /\u003E.\r\n/// \u003C/summary\u003E\r\n/// \u003Creturns\u003E\r\n/// \u003Cinheritdoc cref=\u0022GetHappyCat\u0022 path=\u0022/returns\u0022 /\u003E\r\n/// \u003C/returns\u003E\r\nCat GetSoftCat() =\u003E new(\u0022Soft Kittie\u0022);\r\n\u0060\u0060\u0060\r\n\r\nWhen XML documentation is exported it doesn\u0027t resolve these inheritdoc references meaning that the consumer needs to find out what has to be placed in its place. So, if we want to support the \u0060\u003Cinheritdoc/\u003E\u0060 tag when generating the descriptions we need to build a method for resolving any potential chain of \u0060\u003Cinheritdoc/\u003E\u0060 tags. There exist multiple OSS solutions for this already, but it essentially just consists of building a DAG of the references and filling them in from the end.",
        "createdAt": "2024-03-24T22:06:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2016960569"
      },
      {
        "id": "IC_kwDOAQzde86FIpBg",
        "parentId": null,
        "author": "captainsafia",
        "content": "Hi all!\r\n\r\nI wanted to share some updates in this workstream as we get closer to .NET 9 RCs and beyond. Here\u0027s the TL;DR:\r\n\r\n- The good news: I\u0027ve landed on a design for this feature that addresses our main priorities for this stream of work (native AoT-compat, perf, accuracy)\r\n- The bad news: This will not ship in GA quality for .NET 9.\r\n\r\nThe extended edition for those who care about it:\r\n\r\nThe long-term plan at the moment is to ship a source generator in-the-box with \u0060Microsoft.AspNetCore.OpenApi\u0060 that statically analyzes the code for XML comments at build-time and emits a \u0060IOpenApiTransformer\u0060 definitions to the compilation that apply these discovered annotations to the document model.\r\n\r\nDoing the discovery work at compile-time allows us to take advantage of pre-existing APIs in Roslyn and in DocFX for discovering XML comments and mapping them to types which lends itself well to accuracy/completeness in the model since these APIs have had some battle-testing in the form of their integrations in Visual Studio QuickInfo and the .NET API docs on docs.microsoft.com.\r\n\r\nAs for the delay in release, I want to take some time to polish the implementation instead of rushing to ship something in .NET 9 GA that will be incomplete/not land well.\r\n\r\nMy plan at the moment is to ship a preview-level package of the XML support out of [the AspLabs repo](https://github.com/aspnet/AspLabs) for .NET 9 and target this for official release as part of .NET 10. I think this strikes a good balance between giving those eager to try the feature the change to take advantage of it in .NET 9 and gives more bandwith to iterate and land on the right thing for an LTS release.\r\n\r\nSo yeah....I wish I had better news to share \uD83D\uDE05  but I hope this helps us make progress towards resolving this long-standing feature request once and for all.\r\n\r\nIf you have any questions about the implementation details, let me know. I hope to get the preview code out once action on the main Microsoft.AspNetCore.OpenApi work has slowed.\r\n",
        "createdAt": "2024-07-17T15:45:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2233634912"
      },
      {
        "id": "IC_kwDOAQzde86H5O-8",
        "parentId": null,
        "author": "bkoelman",
        "content": "\u003E The long-term plan at the moment is to ship a source generator in-the-box...\r\n\r\nWhat\u0027s great about ASP.NET is that many built-in framework components/services can be replaced with custom implementations, which is what third-party libraries are doing all the time. As a result, a rich ecosystem has emerged. The new OpenAPI integration in ASP.NET doesn\u0027t adhere to that design philosophy. Instead of being able to plug in alternate implementations, all that\u0027s provided are \u0022fix-up-afterwards\u0022 extensibility points (the transformers). Solutions like this paint third-party and framework developers into a corner: instead of plugging in customized behavior, they need to implement additional components that first \u0022undo\u0022 the built-in behaviors at runtime and then recreate or fix things up as needed. That\u0027s brittle and kills performance.\r\n\r\nAnd using a source generator, as proposed here, makes it _impossible_ to customize the experience (because source generators can\u0027t depend on other source generators, and third-party renderers can no longer depend on runtime information). This isn\u0027t good enough. NSwag and Swashbuckle are widely used because they\u0027re very extensible and customizable. Instead of using a source generator, the tooling should scan the \u0060assembly.xml\u0060 file and populate \u0060ApiExplorer\u0060, which would enable third-party libraries to integrate.",
        "createdAt": "2024-08-10T07:16:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2279927740"
      },
      {
        "id": "IC_kwDOAQzde86IL5gg",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E  Instead of being able to plug in alternate implementations\r\n\r\nI think it depends on what you mean by alternate implementations here...\r\n\r\nThe goal of the OpenAPI integration is to present information that ASP.NET Core understands about the binding/response serialization behavior of APIs in an application in a way that is compliant with the OpenAPI spec.\r\n\r\nIn that sense, its purely a presentation layer and the things you want to extend/customize are the framework abstractions that end up influencing the binding/metadata rules (\u0060IEndpointMetadataProvider\u0060, \u0060InputFormatter\u0060, \u0060OutputFormatter\u0060, etc.)\r\n\r\n\u003E And using a source generator, as proposed here, makes it impossible to customize the experience (because source generators can\u0027t depend on other source generators, and third-party renderers can no longer depend on runtime information).\r\n\r\nWhat kind of customizations to the XML documentation implementation are you looking to make/influence?\r\n\r\n\u003E the tooling should scan the assembly.xml file and populate ApiExplorer, which would enable third-party libraries to integrate.\r\n\r\n\u0060ApiExplorer\u0060 is the abstraction layer that allows framework implementations to describe the parameter binding and response serialization behavior of their implementation, which ends up influencing the resulting Open API document. \u0060ApiExplorer\u0060 isn\u0027t the abstraction layer for exposing information that is actually inert to the behavior of the framework. For example, endpoint descriptions and tags are represented using endpoint metadata, and not as first-class properties in ApiExplorer for this very reason.\r\n\r\nNow, there\u0027s a separate discussion to be had about whether or not it makes sense to expose the information derived XML docs on types via the source generator in some other runtime API, but I\u0027m not convinced that ASP.NET Core is the right place for an abstraction like that given it has no direct relationship to web APIs. \r\n",
        "createdAt": "2024-08-12T20:08:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2284820512"
      },
      {
        "id": "IC_kwDOAQzde86IXHqi",
        "parentId": null,
        "author": "bkoelman",
        "content": "I realize using \u0060ApiExplorer\u0060 is not the right terminology. Instead, I should have referred to MVC-based extensibility such as \u0060IEndpointMetadataProvider\u0060. That\u0027s where I\u0027d like the documentation to end up. So that a custom \u0060IActionDescriptorCollectionProvider\u0060 can modify it.\r\n\r\nThe thing is that \u0060summary\u0060 and \u0060description\u0060 in OpenAPI are the places to express human-friendly information that can\u0027t be expressed in the OAS structure itself. The use of .NET attributes enable API developers to indicate intent. From those, documentation can be generated to make API consumers aware of how to use it. Examples:\r\n- \u0060[UsesCursorPagination]\u0060: \u0022This endpoint uses cursor pagination. The \u0060next\u0060 link represents a snapshot that expires in 2 minutes.\u0022\r\n- \u0060[ExpiresAt(\u00222025-01-01\u0022, \u0022GetBasketSummary\u0022)]\u0060: \u0022This endpoint is deprecated and will be taken offline at 2025-01-01. Use the \u0060GetBasketSummary\u0060 endpoint instead.\u0022\r\n- \u0060[RequiresAdmin]\u0060: \u0022This endpoint is only accessible to admin users. See {link} on how to request access.\u0022\r\n- \u0060[IsExperimental]\u0060: \u0022This endpoint is experimental and may be changed in the future.\u0022\r\n- \u0060[RateLimited(RateLimitLevel.Medium)]\u0060: \u0022A rate limit of 30 requests per 5 minutes applies to this endpoint.\u0022\r\n- \u0060[AllowQuery(QueryParameter.Filter | QueryParameter.Sort)]\u0060: \u0022This endpoint can be used with the \u0060filter\u0060 and \u0060sort\u0060 query string parameters. See {link} for details.\u0022\r\n\r\nWhat\u0027s the objection against ASP.NET storing XML doc-comments in the endpoint descriptions, instead of emitting source code? \r\n\r\nIf the source generator is going to stay, is there a way for a library to deactivate it?",
        "createdAt": "2024-08-14T03:22:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2287762082"
      },
      {
        "id": "IC_kwDOAQzde86NsWiG",
        "parentId": null,
        "author": "PaulVrugt",
        "content": "\u003E Hi all!\r\n\u003E \r\n\u003E I wanted to share some updates in this workstream as we get closer to .NET 9 RCs and beyond. Here\u0027s the TL;DR:\r\n\u003E \r\n\u003E * The good news: I\u0027ve landed on a design for this feature that addresses our main priorities for this stream of work (native AoT-compat, perf, accuracy)\r\n\u003E * The bad news: This will not ship in GA quality for .NET 9.\r\n\u003E \r\n\u003E The extended edition for those who care about it:\r\n\u003E \r\n\u003E The long-term plan at the moment is to ship a source generator in-the-box with \u0060Microsoft.AspNetCore.OpenApi\u0060 that statically analyzes the code for XML comments at build-time and emits a \u0060IOpenApiTransformer\u0060 definitions to the compilation that apply these discovered annotations to the document model.\r\n\u003E \r\n\u003E Doing the discovery work at compile-time allows us to take advantage of pre-existing APIs in Roslyn and in DocFX for discovering XML comments and mapping them to types which lends itself well to accuracy/completeness in the model since these APIs have had some battle-testing in the form of their integrations in Visual Studio QuickInfo and the .NET API docs on docs.microsoft.com.\r\n\u003E \r\n\u003E As for the delay in release, I want to take some time to polish the implementation instead of rushing to ship something in .NET 9 GA that will be incomplete/not land well.\r\n\u003E \r\n\u003E My plan at the moment is to ship a preview-level package of the XML support out of [the AspLabs repo](https://github.com/aspnet/AspLabs) for .NET 9 and target this for official release as part of .NET 10. I think this strikes a good balance between giving those eager to try the feature the change to take advantage of it in .NET 9 and gives more bandwith to iterate and land on the right thing for an LTS release.\r\n\u003E \r\n\u003E So yeah....I wish I had better news to share \uD83D\uDE05 but I hope this helps us make progress towards resolving this long-standing feature request once and for all.\r\n\u003E \r\n\u003E If you have any questions about the implementation details, let me know. I hope to get the preview code out once action on the main Microsoft.AspNetCore.OpenApi work has slowed.\r\n\r\nI\u0027m a bit confused. Is this support that is not shipping with .net 9 specifically for minimal api\u0027s? Or does the openapi generator in .net 9 (the Microsoft.AspNetCore.OpenApi package) not support xml comments from controller methods either? Or does this post have nothing to do with \u0060Microsoft.AspNetCore.OpenApi\u0060? There are several youtube clips and blogs around stating the new \u0060Microsoft.AspNetCore.OpenApi\u0060 in .net 9 doesn\u0027t have xml comment support using this specific comment as a source. But I\u0027m struggling to understand if this is also the case for controller based api\u0027s",
        "createdAt": "2024-09-26T14:56:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2377214086"
      },
      {
        "id": "IC_kwDOAQzde86Ra1kB",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E I\u0027m a bit confused. Is this support that is not shipping with .net 9 specifically for minimal api\u0027s? Or does the openapi generator in .net 9 (the Microsoft.AspNetCore.OpenApi package) not support xml comments from controller methods either? Or does this post have nothing to do with Microsoft.AspNetCore.OpenApi?\n\nYes, this is a constraint for controller-based APIs as well....\n\n.....BUT....\n\nI\u0027ve snapped out preview bits of XML support for both Minimal APIs \u002B controller-based APIs [out of the AspLabs repo](https://github.com/aspnet/AspLabs/tree/main/src/OpenApiXmlCommentGenerator). For now, this package is being shipping in preview out of the _dotnet10_ package feeds.\n\n\u0060\u0060\u0060\n$ dotnet new webapi\n$ dotnet new nugetconfig\n$ dotnet nuget add source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet10/nuget/v3/index.json -n dotnet10\n$ dotnet add package Microsoft.AspNetCore.OpenApi.SourceGenerators --prerelease\n\u0060\u0060\u0060\n\nCurrently, he functionality is on-by-default so once you add the package reference above you\u0027ll see annotations light up. No modifications to any code are necessary.\n\nSome limitations, caveats, and notes:\n\n- This package assumes that you are using \u0060Microsoft.AspNetCore.OpenApi\u0060 to generate your OpenAPI documents. Under the hood, it\u0027s using the transformer APIs in this package to apply the docs.\n- This package currently only applies XML docs in the application assembly. External references aren\u0027t supported. Apparently, there\u0027s some fussing about with MSBuild (and possibly the compiler) to get XML files associated with external references loaded smoothly.\n- There isn\u0027t super great support for \u0060crefs\u0060 as mentioned in [the comment above](https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2016960569) but this is something I hope to tackle before we ship the package inside \u0060Microsoft.AspnetCore.OpenApi\u0060 for v10.\n\nI\u0027ve created a branch in the TrainingApi sample app to showcase the current state of the package. You can find that sample over https://github.com/captainsafia/TrainingApi/tree/safia/xml-support.\n\nI\u0027ll update the main description of the issue with these details and more now that we\u0027ve got something going here.\n\n\n",
        "createdAt": "2024-10-26T20:45:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2439731457"
      },
      {
        "id": "IC_kwDOAQzde86T2lHG",
        "parentId": null,
        "author": "bkoelman",
        "content": "@martincostello (co-author of Swashbuckle) built an awesome library at https://github.com/martincostello/openapi-extensions that fills the gap for several missing key pieces in \u0060Microsoft.AspNetCore.OpenApi\u0060 v9. It is AOT-compatible and includes support for XML documentation comments the way I imagined it could be implemented: by reading from the rich \u0060ApiDescription\u0060/\u0060EndpointMetadata\u0060 at runtime instead of using a source generator. Its approach provides full extensibility to third-party code to influence how documentation ends up in the \u0060openapi.json\u0060 file, leveraging the existing building blocks in ASP.NET.\n\nPlease drop the non-extensible source generator effort proposed here in favor of how the \u0060openapi-extensions\u0060 library works. Its implementation is clean and straightforward, doesn\u0027t require copied-in sources from other projects, and doesn\u0027t have to deal with quirks in MSBuild to load \u0060assembly.xml\u0060 files for referenced assemblies.\n\nTo put this in perspective: I\u0027m not concerned if rendering the \u0060openapi.json\u0060 document would take a little bit of time at runtime, because it happens sporadically compared to hitting actual API endpoints. Users who care about extreme performance can render the file at compile-time using \u0060Microsoft.Extensions.ApiDescription.Server\u0060, or use output caching. What _does_ matter to me is that source generators are being added more and more, which increases build time, severely degrading the inner loop experience in large projects. While the JIT compiler is extremely optimized, the C# compiler hardly does optimizations (by design), so pushing the burden to C# seems counter-productive, especially for API projects with a potentially large number of endpoints.",
        "createdAt": "2024-11-16T13:20:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2480558534"
      },
      {
        "id": "IC_kwDOAQzde86UCubv",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E includes support for XML documentation comments the way I imagined it could be implemented: by reading from the rich ApiDescription/EndpointMetadata at runtime\n\nThis is incorrect. It doesn\u0027t read XML docs from ApiDescriptions, it reads and parses the XML file from disk directly ([ref](https://github.com/martincostello/openapi-extensions/blob/1a0c9b3ce0fbe85e7b69accce46d874176afba29/src/OpenApi.Extensions/Transformers/AddXmlDocumentationTransformer.cs#L85-L95)).  \n\n\u003E instead of using a source generator. Its approach provides full extensibility to third-party code to influence how documentation ends up in the openapi.json file\n\nWhat extensibility is provided here? Can you show me the code that you would write to get the extensibility that you need?\n\n\u003E leveraging the existing building blocks in ASP.NET.\n\nYes, that\u0027s because it uses transformer and ApiExplorer metadata, which is the same approach that a source generator-based implementation would be based on. With that in mind...\n\n\u003E Please drop the non-extensible source generator effort proposed here in favor of how the openapi-extensions library works.\n\nYou\u0027ve not clarified how a source generator makes the implementation non-extensible by default or what kind of extensibility you care about.  In [this comment](https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2287762082), you stated that you want to be able to access  XML docs in the \u0060EndpointDescriptions\u0060. The package you referenced doesn\u0027t provide this extensibility either. It sets the XML information directly in the OpenAPI document using transformers, using the same extensibility strategy that the source generator-based approach uses.\n\n\u003E  Its implementation is clean and straightforward, doesn\u0027t require copied-in sources from other projects, and doesn\u0027t have to deal with quirks in MSBuild to load assembly.xml files for referenced assemblies.\n\nWhat aspects of a source generator-based approach make any of these things impossible?\n\n\u003E What does matter to me is that source generators are being added more and more, which increases build time, severely degrading the inner loop experience in large projects.\n\nThis concern is completely separate from the discussion here. Code with poor performance characteristics is not exclusive to source generators and the assumption that just because something is implemented as a source generator it has inherently poor performance characteristics is invalid.\n\nIn [this comment](https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2233634912), I shared the main value prop of using a Roslyn-based approach which is taking advantage of code reuse for existing XML doc handling in the the compiler.",
        "createdAt": "2024-11-18T17:57:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2483742447"
      },
      {
        "id": "IC_kwDOAQzde86UQF7N",
        "parentId": null,
        "author": "bkoelman",
        "content": "\u003E \u003E includes support for XML documentation comments the way I imagined it could be implemented: by reading from the rich ApiDescription/EndpointMetadata at runtime\n\u003E \n\u003E This is incorrect. It doesn\u0027t read XML docs from ApiDescriptions, it reads and parses the XML file from disk directly ([ref](https://github.com/martincostello/openapi-extensions/blob/1a0c9b3ce0fbe85e7b69accce46d874176afba29/src/OpenApi.Extensions/Transformers/AddXmlDocumentationTransformer.cs#L85-L95)).\n\nAgreed. I must have overlooked that part. That\u0027s a pity. It does however add action method descriptions to the metadata:\n\n![Image](https://github.com/user-attachments/assets/604ce9d9-37ef-4802-8574-835e62a2d493)\n\nThis enables third-party code to modify these descriptions, which is what we need. It would be great if the same were done for doc-comments, but unfortunately, that\u0027s not currently the case. If similar attributes for models and their members were defined and ended up in the metadata (produced from \u0060assembly.xml\u0060 or a source generator), third-party code could intercept there, leaving the existing translation from metadata to OpenAPI intact without intervention.\n\n\u003E \u003E instead of using a source generator. Its approach provides full extensibility to third-party code to influence how documentation ends up in the openapi.json file\n\u003E \n\u003E What extensibility is provided here? Can you show me the code that you would write to get the extensibility that you need?\n\nYes, I\u0027ve created a sample at https://github.com/bkoelman/OpenApiWithDocComments. The first commit is a standard Web API project, where I added \u0060OpenApiExtensions\u0060 and documented the \u0060WeatherForecast\u0060 type and members, and the controller action method. The second commit adds a class library that implements its own \u0060IOpenApiExampleMetadata\u0060 (from OpenApiExtensions) to produce custom \u0060IOpenApiAny\u0060 for examples. \u0060WeatherForecast\u0060 doesn\u0027t contain logic to produce its example anymore, but the API project still needs to pass the example data via options. The third commit more accurately reflects the goal. Here, the class library defines \u0060ApiExampleValueAttribute\u0060, which the API project uses to express example data in \u0060WeatherForecast\u0060. The \u0060IOpenApiExampleMetadata\u0060 implementation in the class library now reads the models from an EF Core DbContext, scans for usage of \u0060ApiExampleValueAttribute\u0060, and enriches that with extra information. Additionally, it enriches the documentation from the controller action method by plugging into \u0060OpenApiExtensionsOptions.DescriptionTransformations\u0060 (from OpenApiExtensions) and enriching there as well.\n\nFrom an extensibility perspective, this is still not as great as I hoped for, but at least it\u0027s heading in a usable direction. Because everything happens at runtime, third-party code can replace built-in services in the dependency container with custom implementations, which avoids executing the built-in logic. A third-party source generator can\u0027t prevent the built-in one from running and it must duplicate any built-in generation logic because it can\u0027t fallback to parts of the source generator.\n\nIf more information ended up in metadata, it would be easier to intercept. And then we wouldn\u0027t need to create \u0060IOpenApiAny\u0060 instances, but instead leave that up to the library.\n\n\u003E \u003E leveraging the existing building blocks in ASP.NET.\n\u003E \n\u003E Yes, that\u0027s because it uses transformer and ApiExplorer metadata, which is the same approach that a source generator-based implementation would be based on. With that in mind...\n\u003E \n\u003E \u003E Please drop the non-extensible source generator effort proposed here in favor of how the openapi-extensions library works.\n\u003E \n\u003E You\u0027ve not clarified how a source generator makes the implementation non-extensible by default or what kind of extensibility you care about. In [this comment](https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2287762082), you stated that you want to be able to access XML docs in the \u0060EndpointDescriptions\u0060. The package you referenced doesn\u0027t provide this extensibility either. It sets the XML information directly in the OpenAPI document using transformers, using the same extensibility strategy that the source generator-based approach uses.\n\nI\u0027ve provided examples of the extensibility we need at https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2287762082. A source generator makes the implementation non-extensible because third-party code can\u0027t interact with it. It\u0027s an all-or-nothing experience. We could turn it off entirely, but then we\u0027d also miss out on the generated code that translates metadata to OpenAPI. Similar to how we replace the built-in ASP.NET model validation today, we\u0027d like to interact with (or replace, not undo afterward) the code that produces descriptions from triple-slash comments, but still rely on translating them from metadata to OpenAPI. This is why I\u0027d like them to end up in the metadata.\n\nI\u0027m starting to understand why a source generator is most convenient to implement. A roslyn visitor is used to build the documentation, which needs a \u0060Compilation\u0060 as input. However, the same logic could still be used at runtime, such as done in the command-line tool [here](https://github.com/dotnet/aspire/blob/release/9.0/src/Tools/ConfigurationSchemaGenerator/ConfigSchemaEmitter.cs#L350).\n\n\u003E \u003E What does matter to me is that source generators are being added more and more, which increases build time, severely degrading the inner loop experience in large projects.\n\u003E \n\u003E This concern is completely separate from the discussion here. Code with poor performance characteristics is not exclusive to source generators and the assumption that just because something is implemented as a source generator it has inherently poor performance characteristics is invalid.\n\nNo, it is not. I\u0027m not referring to code with poor performance characteristics, this is about _how often_ it executes. The runtime provides source generators for JSON and regular expressions. While I haven\u0027t encountered projects containing thousands of regular expressions or JSON models, an API with thousands of endpoints and models isn\u0027t uncommon in enterprise-grade applications. Furthermore, the need for tweaking the logic that evaluates regular expressions is extremely rare, while JSON provides extensibility via converters (which enable to _replace_ logic, not just supplement it).\n\nThe performance hit from using source generators is not a theoretical concern. I\u0027ve experienced firsthand that introducing a source generator in a large project degraded the development experience so much that it made me buy a new desktop computer. While source generators can be incremental, each project/solution build runs everything. So every time I build this project, I\u0027m confronted with the slowdown. This happens _all the time_, while working on code that is unrelated to the source-generated bits. I\u0027ve contributed a lot to https://github.com/dotnet/roslyn-analyzers in the past (and even got a LinkedIn recommendation from one of the C# team members), so I\u0027m pretty familiar with writing such code that executes on almost every keystroke.\n\nFurthermore, we\u0027ve had complaints from users that separate models from APIs in different projects, after we introduced a source generator that produces API-related code. It simply doesn\u0027t work. The source generator (which runs during build of the API project) scans for attributes on the models, but it won\u0027t see them in referenced projects. The only option in that case is to turn off the source generator entirely and revert back to handwritten code.\n\nI\u0027ve tried the steps from https://github.com/dotnet/aspnetcore/issues/39927#issue-1121250482, but it doesn\u0027t work with .NET 9. It shows a compile error that the source generator didn\u0027t run because of a \u0060FileNotFoundException\u0060 for \u0060System.Text.Json\u0060 v8.0.0.0. Adding an explicit package reference didn\u0027t solve that.",
        "createdAt": "2024-11-20T03:03:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2487246541"
      },
      {
        "id": "IC_kwDOAQzde86UZC31",
        "parentId": null,
        "author": "bricelam",
        "content": "NSwag is really bad at preserving XML doc comment formatting. OpenAPI specifies support for markdown. Please consider the formatting of tags like \u0060c\u0060, \u0060code\u0060, \u0060list\u0060, \u0060para\u0060, and \u0060see\u0060 while implementing this feature.",
        "createdAt": "2024-11-20T21:39:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39927#issuecomment-2489593333"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85DhznN",
    "title": "Support localization for endpoint attributes",
    "url": "https://github.com/dotnet/aspnetcore/issues/40150",
    "createdAt": "2022-02-11T18:14:50Z",
    "lastUpdated": "2024-04-30T05:08:34Z",
    "body": "Minimal APIs leans heavily into endpoint metadata for providing annotations to endpoints. This metadata can be populated onto an endpoint via extension methods or attributes.\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/foo\u0022, [Tags(\u0022just\u0022, \u0022some\u0022, \u0022tags\u0022)] () =\u003E { ... })\r\n  .WithName(\u0022name\u0022);\r\n\u0060\u0060\u0060\r\n\r\nWhen extension methods are used, the contents of the metadata can be localized using the standard IStringLocalizer experience. The same is not possible with attributes due to limitations with the parameters that can be used to initialize an attribute.\r\n\r\nMVC supports localization of DataAnnotation attributes through some \u2728 fanciness \u2728 that we may consider replicating for minimal APIs.",
    "upvotes": 1,
    "labels": [
      "enhancement",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde849x4fg",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-02-11T18:14:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40150#issuecomment-1036486624"
      },
      {
        "id": "IC_kwDOAQzde858PUnu",
        "parentId": null,
        "author": "blogcraft",
        "content": "nothing yet? Is it impossible to do Localization on Minimal API?",
        "createdAt": "2024-04-30T05:08:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40150#issuecomment-2084391406"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Dif2_",
    "title": "Add support for \u0060-minimal\u0060 option for F# ASP.NET Core templates",
    "url": "https://github.com/dotnet/aspnetcore/issues/40161",
    "createdAt": "2022-02-11T21:32:32Z",
    "lastUpdated": "2023-06-20T22:31:33Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nA user at https://github.com/dotnet/sdk/issues/23782 was surprised to find no Minimal API variant of the F# template during their explorations, so this issue serves to track that request.\n\n### Describe the solution you\u0027d like\n\nA variant of the existing F# templates where the Minimal API configuration style is used to configure the generated project.\n\n### Additional context\n\n_No response_",
    "upvotes": 4,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde84_PmKM",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "@vzarytovskii Would you have some time to help with this issue?  We currently have minimal API templates for C# and there might be an interest in F# as well. ",
        "createdAt": "2022-03-07T19:28:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40161#issuecomment-1061053068"
      },
      {
        "id": "IC_kwDOAQzde84_PmMp",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-03-07T19:29:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40161#issuecomment-1061053225"
      },
      {
        "id": "IC_kwDOAQzde84_R51B",
        "parentId": null,
        "author": "vzarytovskii",
        "content": "\u003E @vzarytovskii Would you have some time to help with this issue? We currently have minimal API templates for C# and there might be an interest in F# as well.\r\n\r\nHey @rafikiassumani-msft. I would love to have it, I will put it on my backlog, not sure when exactly I\u0027ll get to it though :(. @KathleenDollard shall we track this in **\u0060dotnet/fsharp\u0060** too?",
        "createdAt": "2022-03-08T11:03:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40161#issuecomment-1061657921"
      },
      {
        "id": "IC_kwDOAQzde85GjVbK",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "@vzarytovskii any update on this ? ",
        "createdAt": "2022-07-13T20:53:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40161#issuecomment-1183667914"
      },
      {
        "id": "IC_kwDOAQzde85Gls6F",
        "parentId": null,
        "author": "vzarytovskii",
        "content": "\u003E @vzarytovskii Vlad Zarytovskii FTE any update on this ?\r\n\r\n@rafikiassumani-msft Unfortunately, we didn\u0027t get to it, we were very shorthanded and now is trying to focus on wrapping up some F# \u003C-\u003E C# interop improvements.\r\n\r\nWe have new team-members joined recently, hopefully, well get back to it soon, I have created a tracking issue in our repo too:\r\nhttps://github.com/dotnet/fsharp/issues/13510",
        "createdAt": "2022-07-14T10:44:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40161#issuecomment-1184288389"
      },
      {
        "id": "IC_kwDOAQzde85GnZN8",
        "parentId": null,
        "author": "inouiw",
        "content": "I think there is no easy translation of the C# template to F#.\r\n\r\nOne challenge is, the [EndpointRouteBuilderExtensions.cs](https://github.com/dotnet/aspnetcore/blob/main/src/Http/Routing/src/Builder/EndpointRouteBuilderExtensions.cs) uses \u0060Delegate\u0060 and \u0060RequestDelegate\u0060 as parameter types in the \u0060MapGet\u0060 and \u0060MapPost\u0060 methods. This only works with F# Lambda if wrapped in \u0060Func\u003C..., IResult\u003E()\u0060.\r\n\r\nIn C#\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/swagger/{fileName}\u0022, (string fileName) =\u003E\r\n{\r\n  new FileExtensionContentTypeProvider().TryGetContentType(fileName, out string? mimeType);\r\n  return Results.Stream(new FileStream($\u0022./wwwroot/swagger/{fileName}\u0022, FileMode.Open), mimeType);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nTranslated to F#\r\n\u0060\u0060\u0060F#\r\napp.MapGet(\u0022/swagger/{fileName}\u0022, Func\u003Cstring, IResult\u003E(fun fileName -\u003E\r\n  let (_, mimeType) = FileExtensionContentTypeProvider().TryGetContentType(fileName)\r\n  Results.Stream(new FileStream($\u0022./wwwroot/swagger/{fileName}\u0022, FileMode.Open), mimeType))) |\u003E ignore\r\n\u0060\u0060\u0060\r\n\r\nWithout wrapping in Func, the problem is:\r\n\u0060\u0060\u0060\r\nType constraint mismatch. The type \r\n    \u0027string -\u003E IResult\u0027    \r\nis not compatible with type\r\n    \u0027Delegate\u0027   \r\n\u0060\u0060\u0060\r\n\r\nThe Delegate type is used by the EndpointRouteBuilderExtensions so that a variable number of arguments of any type can be provided to the lambda. \r\nIt would be good to have a solution where the Lambda does not need to be wrapped in \u0060Func\u003C..., IResult\u003E()\u0060.\r\n\r\nEdit: One possible solution\r\n\r\nWith the following extension the API is much nicer:\r\n\r\n\u0060\u0060\u0060F#\r\nmodule FSharpEndpointRouteBuilderExtensions\r\n\r\nopen System\r\nopen Microsoft.AspNetCore.Builder\r\nopen Microsoft.AspNetCore.Http\r\nopen Microsoft.AspNetCore.Routing\r\nopen System.Threading.Tasks\r\n\r\ntype IEndpointRouteBuilder with\r\n  member this.MapGet(pattern: string, handler: Func\u003CIResult\u003E) : RouteHandlerBuilder =\r\n    this.MapGet(pattern, handler :\u003E Delegate)\r\n  member this.MapGet(pattern: string, handler: Func\u003CTask\u003E) : RouteHandlerBuilder =\r\n    this.MapGet(pattern, handler :\u003E Delegate)\r\n  member this.MapGet(pattern: string, handler: Func\u003C\u0027a, IResult\u003E) : RouteHandlerBuilder =\r\n    this.MapGet(pattern, handler :\u003E Delegate)\r\n  member this.MapGet(pattern: string, handler: Func\u003C\u0027a, Task\u003E) : RouteHandlerBuilder =\r\n    this.MapGet(pattern, handler :\u003E Delegate)\r\n  member this.MapGet(pattern: string, handler: Func\u003C\u0027a, \u0027b, IResult\u003E) : RouteHandlerBuilder =\r\n    this.MapGet(pattern, handler :\u003E Delegate)\r\n  member this.MapGet(pattern: string, handler: Func\u003C\u0027a, \u0027b, Task\u003E) : RouteHandlerBuilder =\r\n    this.MapGet(pattern, handler :\u003E Delegate)\r\n    // todo: further members\r\n\r\nopen FSharpEndpointRouteBuilderExtensions\r\n\u0060\u0060\u0060\r\n\r\nThen you can write \r\n\u0060\u0060\u0060F#\r\napp.MapGet(\u0022/test1/{fileName}\u0022, fun fileName -\u003E\r\n  printfn \u0022%s\u0022 fileName\r\n  Results.Ok(\u0022hello test1\u0022)).AllowAnonymous() |\u003E ignore\r\n\r\napp.MapGet(\u0022/test2\u0022, fun () -\u003E\r\n  Results.Ok(\u0022hello test2\u0022)) |\u003E ignore\r\n\u0060\u0060\u0060",
        "createdAt": "2022-07-14T17:47:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40161#issuecomment-1184732028"
      },
      {
        "id": "IC_kwDOAQzde85GtB4R",
        "parentId": null,
        "author": "inouiw",
        "content": "Just found the following\r\n\r\n\u003E Should there be a TDC from function types _ -\u003E _ to System.Delegate. This comes up in \u0022minimal APIs\u0022 which take System.Delegate as an argument. See https://github.com/halter73/HoudiniPlaygroundFSharp/pull/3/files for an example of the kind of change this would allow. The RFC includes the existing TDC from function types to specific delegate types. However this doesn\u0027t get us to the base type System.Delegate\r\n\r\nSee https://github.com/fsharp/fslang-design/blob/main/FSharp-6.0/FS-1093-additional-conversions.md",
        "createdAt": "2022-07-16T14:45:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40161#issuecomment-1186209297"
      },
      {
        "id": "IC_kwDOAQzde85PUC_o",
        "parentId": null,
        "author": "jkone27",
        "content": "looking forward to this one! \r\n\r\nmaybe a separate idea, but would be also nice to have more \u0022functional\u0022 versions so that also pipe operator can be adopted?  \r\netc probably it would be useful to generate this adapter functions for F# with source generators if that would be possible or some similar approach, so the \u0022api\u0022 keeps itself up to date with the C# api while evolving but also exposing the \u0022functional way\u0022?\r\n\r\n\u0060\u0060\u0060\r\nopen Microsoft.AspNetCore.FSharp\r\n\r\napp\r\n|\u003E mapGet \u0022/\u0022 (fun x -\u003E ...)\r\n|\u003E mapPost \u0022/orders\u0022 (fun x -\u003E )..\r\n\r\nservices\r\n|\u003E addTransient someServiceType\r\n|\u003E add..\r\n\r\n\u0060\u0060\u0060\r\n\r\nand so on?\r\n",
        "createdAt": "2022-11-29T13:29:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40161#issuecomment-1330655208"
      },
      {
        "id": "IC_kwDOAQzde85fJGQL",
        "parentId": null,
        "author": "jkone27",
        "content": "Also this is cool, could some part of Saturn just become a native part of aspnetcore for F#? https://saturnframework.org/reference/Saturn/saturn-application-applicationbuilder.html  this stuff would be super useful, or anything similar achieving a similar ease of configuration result!",
        "createdAt": "2023-06-18T17:43:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40161#issuecomment-1596220427"
      },
      {
        "id": "IC_kwDOAQzde85fJGjY",
        "parentId": null,
        "author": "En3Tho",
        "content": "You should check out Giraffe (https://github.com/giraffe-fsharp/Giraffe) too. I\u0027m not sure any of those libraries should be a native part of Asp.Net Core tbh. These are just convenient/opinionated wrappers of Asp.Net Core anyway. And both of those already got their own templates.",
        "createdAt": "2023-06-18T17:50:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40161#issuecomment-1596221656"
      },
      {
        "id": "IC_kwDOAQzde85fLUJs",
        "parentId": null,
        "author": "inouiw",
        "content": "Now I think the best fix for this is to return an error message when trying to create a F# \u0022-minimal\u0022 project. The error message would then link to the https://saturnframework.org/ (which is based on Griaffe) and state that the minimal web api is designed for C#, for functional F# code the F# team suggests to use the templates (https://saturnframework.org/tutorials/how-to-start.html) of the saturnframework, which is part of the SAFE stack.",
        "createdAt": "2023-06-19T09:06:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40161#issuecomment-1596801644"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85FKgSb",
    "title": "Support Custom Awaitable Types in Minimal API\u0027s",
    "url": "https://github.com/dotnet/aspnetcore/issues/40554",
    "createdAt": "2022-03-05T15:39:27Z",
    "lastUpdated": "2023-06-06T23:43:40Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nCurrently custom awaitables are [not supported and it is marked as a \u0060TODO\u0060 in the code](https://github.com/dotnet/aspnetcore/blob/main/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L643-L644).  Honestly, I don\u0027t have a use for this myself, I stick with \u0060Task\u0060 and \u0060ValueTask\u0060 but they exist out there and it would be nice to support them.\n\n### Describe the solution you\u0027d like\n\nSince a lot of [work is done on this line](https://github.com/dotnet/aspnetcore/blob/main/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L573) to test whether the type is awaitable but the \u0060AwaitableInfo\u0060 that method can return is discarded. I propose that information is used to create a custom \u0060Awaitable\u0060 that also implements everything required to be an awaitable [very similarly to \u0060ObjectMethodExecutorAwaitable\u0060](https://github.com/dotnet/aspnetcore/blob/main/src/Shared/ObjectMethodExecutor/ObjectMethodExecutorAwaitable.cs). I believe there would be two versions of this. One with a void result and one non-void result. We can also utilize generics to create this object to minimize boxing. That awaitable is created using \u0060Expression.New\u0060 and sent into a \u0060Execute[...]\u0060 method so that we can \u0060await\u0060 it. \r\n\r\nOne thing I propose this intentionally doesn\u0027t support is is the input delegate has a \u0060returnType\u0060 of \u0060System.Object\u0060. Currently when objects have that return type it gets sent to [this method](https://github.com/dotnet/aspnetcore/blob/main/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L1496-L1544). To support custom awaitables in that method we would have to utilize a lot of reflection each and every call and that would most likely slow down all the other \u0060Task\u003C\u003E\u0060 and such calls so that it would be fine not supporting this for calls that have to go through the runtime to determine how to format their output.\n\n### Additional context\n\nI have begun [working on this](https://github.com/justindbaur/aspnetcore/blob/custom-await/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L650-L737) but PR\u0027s require an issue to exist. I\u0027m not quite ready to create a PR because I need to make sure it\u0027s fully tested but I am close.",
    "upvotes": 0,
    "labels": [
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde84_Kw36",
        "parentId": null,
        "author": "davidfowl",
        "content": "I wouldn\u0027t add this until somebody asked for it. So we can leave this issue open and gauge interest. I\u0027m pretty sure the importance of custom awaitable types will drop significantly because of \u0060ValueTask\u0060 (it now supports extensiblity). So I\u0027d rather no do this unless there was demand.",
        "createdAt": "2022-03-05T15:49:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40554#issuecomment-1059786234"
      },
      {
        "id": "IC_kwDOAQzde84_Kw8-",
        "parentId": null,
        "author": "justindbaur",
        "content": "@davidfowl Totally understand. That\u0027s why I make it clear I don\u0027t even use it. Just wanted to play with Expressions and duck typing! But thought I would propose it anyways.",
        "createdAt": "2022-03-05T15:51:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40554#issuecomment-1059786558"
      },
      {
        "id": "IC_kwDOAQzde84_Kxp3",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E One thing I propose this intentionally doesn\u0027t support is is the input delegate has a returnType of System.Object. Currently when objects have that return type it gets sent to [this method](https://github.com/dotnet/aspnetcore/blob/main/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L1496-L1544). To support custom awaitables in that method we would have to utilize a lot of reflection each and every call and that would most likely slow down all the other Task\u003C\u003E and such calls so that it would be fine not supporting this for calls that have to go through the runtime to determine how to format their output.\r\n\r\nThis is also why we didn\u0027t do it. Because we wanted parity with the object returning method, which is much more difficult to make efficient.",
        "createdAt": "2022-03-05T16:10:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40554#issuecomment-1059789431"
      },
      {
        "id": "IC_kwDOAQzde84_Kx40",
        "parentId": null,
        "author": "justindbaur",
        "content": "Yep, I did my initial work and then started adding tests for a \u0060CustomAwaitable\u0060 return type to all the existing \u0060Theory\u0060s and immediately realized the work I had done wouldn\u0027t support \u0060object\u0060 return type without doing a lot of reflection work, boxing, and casting in the runtime to get it to work. I\u0027m happy with the other part of the work but as a user or minimal API\u0027s wouldn\u0027t want this code in \u0060ExecuteObjectReturn\u0060.",
        "createdAt": "2022-03-05T16:16:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40554#issuecomment-1059790388"
      },
      {
        "id": "IC_kwDOAQzde84_UTMu",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-03-08T22:30:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40554#issuecomment-1062286126"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85GjyLA",
    "title": "\u0060JsonPatchDocument.ApplyTo\u0060 should support \u0060DateOnly\u0060 data type",
    "url": "https://github.com/dotnet/aspnetcore/issues/40916",
    "createdAt": "2022-03-28T17:55:55Z",
    "lastUpdated": "2024-01-29T19:56:59Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n\u0060DateTime\u0060 works fine from JsonPatchDocument. However, \u0060DateOnly\u0060 will not parse from a string and you can\u0027t set its year/month/day from properties so you can\u0027t build up a new object and \u0022patch\u0022 it.\n\n### Describe the solution you\u0027d like\n\n\u0060DateOnly\u0060 should parse via JsonPatch from an ISO8601 date string that JavaScript uses.\r\n\r\nAlternatively, even a simple \u0060YYYY-MM-DD\u0060.\n\n### Additional context\n\nThe specific issue is that when sending a date string as an ISO 8601 value to be patched into a \u0060DateOnly\u0060 object such as \u00602022-03-17T00:00:00.000Z\u0060 the \u0060ApplyTo\u0060 call fails with \u0060The value \u00273/17/2022 12:00:00 AM\u0027 is invalid for target location.\u0060",
    "upvotes": 5,
    "labels": [
      "area-mvc",
      "feature-json-patch",
      "area-minimal",
      "area-networking"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85AbmPZ",
        "parentId": null,
        "author": "TanayParikh",
        "content": "This is likely a duplicate of https://github.com/dotnet/runtime/issues/53539.",
        "createdAt": "2022-03-28T18:07:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40916#issuecomment-1080976345"
      },
      {
        "id": "IC_kwDOAQzde85AbwA7",
        "parentId": null,
        "author": "mcaden",
        "content": "I don\u0027t think so... I\u0027m using Newtonsoft and I\u0027ve implemented the proper JsonConverters. Judging by https://github.com/dotnet/aspnetcore/blob/main/src/Features/JsonPatch/src/Internal/ConversionResultProvider.cs which is what tracing \u0060ApplyTo\u0060 leads to it doesn\u0027t look like there\u0027s an easy way to specify the contract resolver for that specific property without messing with JsonPatch\u0027s internals.",
        "createdAt": "2022-03-28T18:50:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40916#issuecomment-1081016379"
      },
      {
        "id": "IC_kwDOAQzde85AhCwf",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-03-29T21:47:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40916#issuecomment-1082403871"
      },
      {
        "id": "IC_kwDOAQzde85yK4Rn",
        "parentId": null,
        "author": "maddiemccoyyy",
        "content": "A workaround I used is to format payload value \u0060YYYY-MM-DD\u0060 rather than use ISO8601 \u0060YYYY-MM-DDT00:00:00Z\u0060 \r\n\r\nFor example,\r\nPATCH \u0060[{op: \u0022replace\u0022, path: \u0022/example\u0022, value: \u00222024-01-02\u0022}]\u0060 =\u003E succeeds\r\nPATCH \u0060[{op: \u0022replace\u0022, path: \u0022/example\u0022, value: \u00222024-01-02T00:00:00\u0022}]\u0060 =\u003E fails with exception \u0022The value \u002701/02/2024 00:00:00\u0027 is invalid for target location.\u0022\r\n\r\n",
        "createdAt": "2024-01-29T19:55:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40916#issuecomment-1915454567"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85HDEeX",
    "title": "ASP0001 warning when used inside app.MapWhen",
    "url": "https://github.com/dotnet/aspnetcore/issues/41030",
    "createdAt": "2022-04-04T15:48:47Z",
    "lastUpdated": "2023-06-20T23:20:02Z",
    "body": "I try to create a webapp with a port dedicated to grpc and another port dedicated to openapi with dotnet6\r\n\r\n\u0060\u0060\u0060\r\nvar app = builder.Build();\r\n\r\napp.MapWhen(context =\u003E context.Connection.LocalPort == myGrpcPort, grpcApp =\u003E\r\n{\r\n    grpcApp.UseRouting();\r\n    grpcApp.UseAuthentication();\r\n    grpcApp.UseAuthorization();\r\n    grpcApp.UseEndpoints(routeBuilder =\u003E\r\n    {\r\n        routeBuilder.MapGrpcService\u003CService1\u003E();\r\n        routeBuilder.MapCodeFirstGrpcReflectionService();\r\n    });\r\n});\r\napp.MapWhen(context =\u003E context.Connection.LocalPort == myOpenApiPort, openapiApp =\u003E\r\n{\r\n    openapiApp.UseRouting();\r\n    openapiApp.UseAuthentication();\r\n    openapiApp.UseAuthorization(); //this triggers the warning\r\n    openapiApp.UseEndpoints(routeBuilder =\u003E routeBuilder.MapControllers());\r\n\u0060\u0060\u0060\r\n\r\nWhen executing \u0060dotnet run\u0060\r\n\r\n\u0060\u0060\u0060\r\nwarning ASP0001: The call to UseAuthorization should appear between app.UseRouting() and app.UseEndpoints(..) for authorization to be correctly evaluated\r\n\u0060\u0060\u0060\r\n\r\nIf I  comment the grpcApp part, the warning disappear\r\n\r\nIf I swap openapiApp before grpcApp, the warning is triggered in the grpc part\r\n\r\n=\u003E how can I avoid the warning in the second app.MapWhen ?",
    "upvotes": 0,
    "labels": [
      "bug",
      "area-mvc",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85BiVFM",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Looks like there might be a bug in the analyzer, you can suppress that warning in this case, or you could use the alternative method for host matching:\r\nhttps://docs.microsoft.com/aspnet/core/fundamentals/routing?view=aspnetcore-6.0#host-matching-in-routes-with-requirehost",
        "createdAt": "2022-04-14T18:39:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41030#issuecomment-1099518284"
      },
      {
        "id": "IC_kwDOAQzde85BiVTH",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-04-14T18:40:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41030#issuecomment-1099519175"
      },
      {
        "id": "IC_kwDOAQzde85BiZAC",
        "parentId": null,
        "author": "christopheblin",
        "content": "@BrennanConroy From my testing, the RequireHost does not work with grpc code first ...\r\n\r\nSo I\u0027m going to suppress the warning in the csproj and I hope this will be fixed some day :)",
        "createdAt": "2022-04-14T19:01:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41030#issuecomment-1099534338"
      },
      {
        "id": "IC_kwDOAQzde85GtMQ5",
        "parentId": null,
        "author": "Youssef1313",
        "content": "It looks like the analyzer doesn\u0027t separate the analysis between different \u0060MapWhen\u0060 calls.\r\n\r\nI think a start here would be by changing:\r\n\r\n\u0060\u0060\u0060csharp\r\ninternal sealed class MiddlewareAnalysis\r\n{\r\n    public MiddlewareAnalysis(IMethodSymbol configureMethod, ImmutableArray\u003CMiddlewareItem\u003E middleware)\r\n    {\r\n        ConfigureMethod = configureMethod;\r\n        Middleware = middleware;\r\n    }\r\n\r\n    public INamedTypeSymbol StartupType =\u003E ConfigureMethod.ContainingType;\r\n\r\n    public IMethodSymbol ConfigureMethod { get; }\r\n\r\n    public ImmutableArray\u003CMiddlewareItem\u003E Middleware { get; }\r\n}\r\n\r\n\u0060\u0060\u0060\r\n\r\nIn a way that \u0060Middleware\u0060 isn\u0027t flattened like that, but becomes an \u0060ImmutableArray\u003CImmutableArray\u003CMiddlewareItem\u003E\u003E\u0060 or some sort of dictionary, and analyze these separately in \u0060UseAuthorizationAnalyzer.AnalyzeSymbol\u0060",
        "createdAt": "2022-07-16T17:52:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41030#issuecomment-1186251833"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85HEwXh",
    "title": "No way to pass build arguments to WebApplicationFactory as is ",
    "url": "https://github.com/dotnet/aspnetcore/issues/41039",
    "createdAt": "2022-04-04T23:31:24Z",
    "lastUpdated": "2023-10-25T09:02:48Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI try to pass build arguments like \u0060[\u0022--flag\u0022, \u00222\u0022]\u0060 to my test host but the only result I can get is \u0060--flag=2\u0060 or \u0060[[\u0022--flag=\u0022, \u0022--2=\u0022]]\u0060. The reason is this [line](https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.Testing/src/DeferredHostBuilder.cs#L46).\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nInitially I wanted to push just this:\r\n\r\n![image](https://user-images.githubusercontent.com/4963385/161648995-41a6e31e-cef9-462e-bb99-d8e53a9ec95d.png)\r\n but then I started to think that \u0060--\u0060 symbols might make issues too. If you are interested in, I can prepare a better change where you can avoid \u0060--\u0060 as well.\r\n\r\n### My current workaround\r\nI just copy/paste DeferredHostBuilder.cs, HostFactoryResolver.cs, WebApplicationFactory.cs and  WebApplicationFactoryClientOptions.cs and then do changes inside the project which is awful.",
    "upvotes": 1,
    "labels": [
      "investigate",
      "area-mvc",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85BPYZq",
        "parentId": null,
        "author": "davidfowl",
        "content": "Can you clarify what build arguments means? Can you show some code on what you\u0027re trying to accomplish?",
        "createdAt": "2022-04-11T04:57:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41039#issuecomment-1094551146"
      },
      {
        "id": "IC_kwDOAQzde85BWRLs",
        "parentId": null,
        "author": "Serg046",
        "content": "Yes, I have something like this: \u0060app.exe --port 1234 --setting1 2 --setting2 1 --setting3 3\u0060 and now need to pass the arguments for testing. ",
        "createdAt": "2022-04-12T08:31:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41039#issuecomment-1096356588"
      },
      {
        "id": "IC_kwDOAQzde85BZ6UN",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-04-12T22:52:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41039#issuecomment-1097311501"
      },
      {
        "id": "IC_kwDOAQzde85BagjT",
        "parentId": null,
        "author": "davidfowl",
        "content": "@Sergey-Grudskiy can you send a pull request with your change and a unit test for this scenario? I\u0027d love to see what code you wrote.",
        "createdAt": "2022-04-13T01:52:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41039#issuecomment-1097468115"
      },
      {
        "id": "IC_kwDOAQzde85fAJT6",
        "parentId": null,
        "author": "kierondye-git",
        "content": "Is this issue likely to be resolved? I had a similar requirement where I wanted to pass a command line parameter with no value e.g. on the command line it would look like \u0060myprocess.exe --param\u0060. However, \u0060WebApplicationFactory\u0060 (or \u0060DeferredHostBuilder\u0060) expects all parameters to be key value pairs separated by \u0060=\u0060 and if there is no value the \u0060=\u0060 gets appended anyway e.g. \u0060myprocess.exe --param=\u0060. Unfortunately, this prevents me running my integration tests as I planned.",
        "createdAt": "2023-06-16T00:13:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41039#issuecomment-1593873658"
      },
      {
        "id": "IC_kwDOAQzde85lJImg",
        "parentId": null,
        "author": "Dangeroustuber",
        "content": "I also had to deal with this issue. The solution for now is to write about 75 lines of code to fix the broken parameters and have to introduce a special delimiter for one parameter that is only present in integration test runs. There needs to be a simpler way to pass command line arguments in the exact same format as when running the program normally.",
        "createdAt": "2023-08-29T07:12:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41039#issuecomment-1696893344"
      },
      {
        "id": "IC_kwDOAQzde85qBrwn",
        "parentId": null,
        "author": "EraYaN",
        "content": "This also should provide a was to just set \u0022verb\u0022 arguments or positional arguments.\r\n\r\nLike \u0060./service start-service\u0060",
        "createdAt": "2023-10-25T09:02:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41039#issuecomment-1778826279"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85HVEMU",
    "title": "Augment performance scenarios for minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/41102",
    "createdAt": "2022-04-08T00:58:10Z",
    "lastUpdated": "2023-10-16T17:29:57Z",
    "body": "In .NET 6, we added some basic test scenarios for minimal APIs around returning plaintext responses and JSON-based responses.\r\n\r\nIn .NET 7, we introduced newer scenarios to asses the impact of route handler filters.\r\n\r\nThis issue captures improving our current set of scenarios and adding new ones to reflect key scenarios.\r\n\r\nhttps://github.com/aspnet/Benchmarks/blob/main/src/BenchmarksApps/MapAction/Program.cs",
    "upvotes": 0,
    "labels": [
      "task",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85BZ6_6",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-04-12T22:54:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41102#issuecomment-1097314298"
      },
      {
        "id": "IC_kwDOAQzde85pMvMF",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-10-16T17:29:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41102#issuecomment-1764946693"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85ICAIw",
    "title": "Best practice for a singleton route handler filter with Minimal APIs?",
    "url": "https://github.com/dotnet/aspnetcore/issues/41259",
    "createdAt": "2022-04-19T14:54:27Z",
    "lastUpdated": "2024-03-01T22:54:55Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nThe new support for route handler filters for Minimal APIs currently supports these use cases:\r\n\r\n1. Use an \u0060IRouteHandlerFilter\u0060 instance specified when the route is mapped.\r\n2. Create a new instance of type \u0060T\u0060 that implements \u0060IRouteHandlerFilter\u0060 per HTTP request and invoke it. The filter is created with access to the \u0060IServiceProvider\u0060 so can use types registered with \u0060IServiceCollection\u0060, but the filter itself is not resolved from the DI container.\r\n3. Two variants of invoking an anonymous filter that is the filter with \u0060RouteHandlerContext\u0060 and \u0060RouteHandlerFilterDelegate\u0060.\r\n\r\nIn the case that a filter can logically be re-used between multiple endpoints as a singleton but cannot be specified directly when mapping the request delegates (item 1), what is the recommended best practice here with Minimal APIs in ASP.NET Core 7?\r\n\r\nAn application could do this, but it seems a bit verbose to re-use the same filter instance compared to option 2, except that creates a new instance of the filter for each invocation.\r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Register a filter and its dependency as services\r\nbuilder.Services.AddSingleton\u003CMySingleton\u003E();\r\nbuilder.Services.AddSingleton\u003CMyFilter\u003E();\r\n\r\nvar app = builder.Build();\r\n\r\n// Filter method that resolves the singleton filter from DI and invokes it\r\nValueTask\u003Cobject?\u003E MyFilter(RouteHandlerInvocationContext context, RouteHandlerFilterDelegate next)\r\n{\r\n    var filter = context.HttpContext.RequestServices.GetRequiredService\u003CMyFilter\u003E();\r\n    return filter.InvokeAsync(context, next);\r\n}\r\n\r\n// Multiple arbitrary endpoints that use the same filter\r\napp.MapGet(\u0022/200\u0022, () =\u003E Results.Ok())\r\n   .AddFilter(MyFilter);\r\n\r\napp.MapGet(\u0022/500\u0022, () =\u003E Results.Problem())\r\n   .AddFilter(MyFilter);\r\n\r\napp.MapGet(\u0022/404\u0022, () =\u003E Results.NotFound())\r\n   .AddFilter(MyFilter);\r\n\r\napp.Run();\r\n\r\n// Arbitrary filter implementation that uses a singleton to achieve something\r\n// and can be a singleton in of itself as it has no per-request state so can be re-used\r\npublic class MyFilter : IRouteHandlerFilter\r\n{\r\n    public MyFilter(MySingleton singleton)\r\n    {\r\n        Singleton = singleton;\r\n    }\r\n\r\n    private MySingleton Singleton { get; }\r\n\r\n    public async ValueTask\u003Cobject?\u003E InvokeAsync(RouteHandlerInvocationContext context, RouteHandlerFilterDelegate next)\r\n    {\r\n        await Singleton.DoSomething();\r\n        return await next(context);\r\n    }\r\n}\r\n\r\n// Arbitrary singleton service that achieves some aim\r\npublic class MySingleton\r\n{\r\n    public Task DoSomething() =\u003E Task.CompletedTask;\r\n}\r\n\u0060\u0060\u0060\r\n\n\n### Describe the solution you\u0027d like\n\nWhat\u0027s the recommendation on how to author the application for this use-case where minimising the creation of \u0060IRouteHandlerFilter\u0060 instances is desired but it cannot be created up-front when registering the routes?\r\n\r\n* Is there a missing extension method to register a filter that\u0027s DI aware, rather than being activated per-request?\r\n* Is this a use case that will be less verbose to achieve using route groups (#36007) in later previews? \r\n\r\nI thought I\u0027d raise the question about this, as it seems to be a bit of an outlier compared to the rest of Minimal APIs where trying to use a service will get it from DI, otherwise try and parse/bind it or deserialize it from the request body. The \u0060AddFilter\u003CT\u003E()\u0060 method seems to be halfway in between, being able to leverage DI without being in DI itself.\r\n\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85BweId",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-04-19T22:23:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41259#issuecomment-1103225373"
      },
      {
        "id": "IC_kwDOAQzde85Bwkmu",
        "parentId": null,
        "author": "captainsafia",
        "content": "Some of what you\u0027re describing here feels like the \u0022global filters\u0022 concept that we discussed during the design of this feature. At the time, we concluded that we didn\u0027t want to build a design that explicitly favored global filters and relegated route groups as the many approach for solving \u0022apply the same filter to multiple routes.\u0022 After all, it would stand to reason that if you wanted to apply the same filter to multiple routes then they can be conceptually placed in a group.",
        "createdAt": "2022-04-19T23:15:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41259#issuecomment-1103251886"
      },
      {
        "id": "IC_kwDOAQzde85Bxefj",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Is there a missing extension method to register a filter that\u0027s DI aware, rather than being activated per-request?\r\n\r\nWe could make a tweak to \u0060AddFilter\u003CT\u003E\u0060 to detect filters added as services and avoiding the creation of them via \u0060ActivatorUtilities\u0060. The problem is these filters wont be able to access the \u0060RouteHandlerContext\u0060.\r\n\r\n\u003E Is this a use case that will be less verbose to achieve using route groups (https://github.com/dotnet/aspnetcore/issues/36007) in later previews?\r\n\r\nYes",
        "createdAt": "2022-04-20T05:34:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41259#issuecomment-1103488995"
      },
      {
        "id": "IC_kwDOAQzde85IuNxp",
        "parentId": null,
        "author": "captainsafia",
        "content": "@martincostello Have you had the chance to use groups \u002B filters in the latest preview7 release? Do you think that\u0027s a good solution to the problem you\u0027re having?",
        "createdAt": "2022-08-18T23:28:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41259#issuecomment-1220074601"
      },
      {
        "id": "IC_kwDOAQzde85IvA9B",
        "parentId": null,
        "author": "martincostello",
        "content": "Yes, I had a quick play around with them.\n\nIn this sample app I added route groups to apply the common metadata for all the endpoints, including applying the previously repeated filter: https://github.com/martincostello/polly-rate-limiting/pull/51/commits/cdc74e459022554fa78a13373d9e5c81d6fd4e49\n\nI think for what I\u0027ve done with it, it solves the duplication, thought I still feel it\u0027s a bit of an outlier compared to the rest of Minimal APIs that it\u0027s not resolved from DI as a service if registered as one.\n\nThat\u0027s not necessarily an issue with the route groups as it ultimately solves the use case, it just _feels_ a bit different/surprising compared to the overall Developer Experience for using/consuming services with 6.0.",
        "createdAt": "2022-08-19T06:01:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41259#issuecomment-1220284225"
      },
      {
        "id": "IC_kwDOAQzde85MAWly",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:16:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41259#issuecomment-1275160946"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85ISfMr",
    "title": "Resolve cyclic dependencies between Http.Results and Http.Extensions",
    "url": "https://github.com/dotnet/aspnetcore/issues/41330",
    "createdAt": "2022-04-22T21:29:53Z",
    "lastUpdated": "2024-03-01T22:54:56Z",
    "body": "To support users being able to determine if the handler they are wrapping a filter is a void-returning handler, we need to add support for returning the \u0060EmptyHttpResult\u0060 from the filter pipeline. However, do to cyclic dependencies we cannot use the defined \u0060EmptyHttpResult\u0060 type. This prevents users from being able to assert on the type.",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85B_f54",
        "parentId": null,
        "author": "davidfowl",
        "content": "One thing we can do is move results down and then typeforward them.",
        "createdAt": "2022-04-23T01:42:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41330#issuecomment-1107164792"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Iqr0Z",
    "title": "[Route Groups] Add default metadata to endpoints exposing group structure",
    "url": "https://github.com/dotnet/aspnetcore/issues/41429",
    "createdAt": "2022-04-28T19:02:50Z",
    "lastUpdated": "2024-03-01T22:54:56Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nCurrently the \u0060MapGroup\u0060 API described in #36007 does not add any default metadata enabling endpoint to observe what groups they\u0027re in if any.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\n\u0060MapGroup\u0060 should add default metadata. It\u0027s tempting to use \u0060EndpointGroupNameAttribute\u0060 like \u0060WithGroupName\u0060, but this implications on the swagger.json produced by Swashbuckle and NSwag (see https://github.com/dotnet/aspnetcore/issues/36414), so we want to be careful here.\r\n\r\nWe also need to consider what the default group name should be (just the prefix?) and whether nested groups should add multiple pieced of metadata or if the nested group structure can be encapsulated in a single object.",
    "upvotes": 1,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85CkC8n",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-05-03T23:14:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1116745511"
      },
      {
        "id": "IC_kwDOAQzde85GrDpN",
        "parentId": null,
        "author": "NinoFloris",
        "content": "This would be fairly useful to get into 7.0. It\u0027s very pleasant to be able to filter application subsystems in middleware through this kind of metadata on GetEndpoint.\r\n\r\nCurrently I\u0027m trialing \u0060RouteGroupBuilder.WithRouteGroupName\u0060 with metadata being stored in \u0060RouteGroupNameAttribute\u0060. And it would indeed be nice to have \u0060WithGroup\u0060 add the prefix as default metadata.\r\n\r\nWould something like those names - given the nice names are already in use for openapi - be accepted in api review?",
        "createdAt": "2022-07-15T16:13:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1185692237"
      },
      {
        "id": "IC_kwDOAQzde85GrPqd",
        "parentId": null,
        "author": "halter73",
        "content": "It\u0027s hard to say what will be accepted by API review as it\u0027s typically a decision made by multiple reviewers. But if you make a proposal, we can look at it. Sadly, the bar for getting new API in .NET 7 is quite high now, so this might have to be something that waits for .NET 8.\r\n\r\nWe already have a [WithGroupName method](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.routingendpointconventionbuilderextensions.withgroupname?view=aspnetcore-6.0#microsoft-aspnetcore-builder-routingendpointconventionbuilderextensions-withgroupname-1(-0-system-string)) that can be applied to the \u0060RouteGroupBuilder\u0060 returned from \u0060MapGroup\u0060, but [it causes multiple swagger documents to be generated which is usually undesirable](https://github.com/dotnet/aspnetcore/issues/36414#issuecomment-917739692). Whatever we come up with, we\u0027ll have to reconcile it with this pre-existing \u0060WithGroupName\u0060 method. \u0060WithRouteGroupName\u0060 is a different method name, but is it different enough?\r\n\r\nThis issue was originally intended to track adding metadata to route groups automatically without the need to call any \u0060WithGroup\u0060, \u0060WithGroupName\u0060, \u0060WithRouteGroupName\u0060, etc... methods. The question is what would this metadata be called and what properties would it have? \u0060RouteGroupNameAttribute\u0060 might work as the metadata, but groups don\u0027t really have names automatically. Maybe \u0060RouteGroupPrefixAttribute\u0060 would work and it could have a single \u0060public RoutePattern GroupPrefix { get; }\u0060 property.",
        "createdAt": "2022-07-15T17:13:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1185741469"
      },
      {
        "id": "IC_kwDOAQzde85GrSrr",
        "parentId": null,
        "author": "NinoFloris",
        "content": "\u003EWe already have a [WithGroupName method](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.routingendpointconventionbuilderextensions.withgroupname?view=aspnetcore-6.0#microsoft-aspnetcore-builder-routingendpointconventionbuilderextensions-withgroupname-1(-0-system-string)) that can be applied to the RouteGroupBuilder returned from MapGroup, but https://github.com/dotnet/aspnetcore/issues/36414#issuecomment-917739692.\r\n\r\nI read that in your initial post yeah, which is why I mentioned the good names are already used. Not sure what we can do about that at this point. \r\n\r\nI agree having both \u0060WithGroupName\u0060 and \u0060WithRouteGroupName\u0060 (the latter can at least be relegated to RouteGroupBuilder only) will probably raise some questions. Though the xml docs are already quite descriptive for \u0060WithGroupName\u0060. YMMV but it\u0027s how I found out I probably didn\u0027t want to use it and started searching the issues to see if route group metadata was already being considered.\r\n\r\nWhen it comes to implementation, it probably would fit the spirit of what \u0060object.ToString\u0060 does. Where it\u0027s automatically provided with the prefix being the value, and users can override this to provide a better value. As I do really think there is value in having an api for users to provide a custom name. Especially when route groups could presumably overlap when it comes to prefix (think prefix \u0022/\u0022).\r\n\r\nEither way thanks for your reply!",
        "createdAt": "2022-07-15T17:29:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1185753835"
      },
      {
        "id": "IC_kwDOAQzde85OUvLp",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "Of the remaining, open issue this appears to be the most relevant. I didn\u0027t want to comment on a closed issue. If this discussion should be moved to a different issue, just let me know.\r\n\r\nLet\u0027s start with the good. \u0060MapGroup\u0060 was a welcomed addition and it certainly makes API configuration more _natural_. Great work. \u0060IEndpointConventionBuilder.Finally\u0060 addressed a big gap, but sadly came in the 11th hour, which provided little time for review or feedback.\r\n\r\nUnfortunately, \u0060MapGroup\u0060 misses the mark on what _grouping_ means or what developers expect from a group. The current design is opinioned around route construction, but in practice that isn\u0027t always the case.\r\n\r\nLet\u0027s consider how a _Minimal API_ is versioned:\r\n\r\n\u0060\u0060\u0060c#\r\nvar builder = WebApplication.CreateBuilder( args );\r\n\r\nbuilder.Services.AddApiVersioning();\r\n\r\nvar app = builder.Build();\r\nvar orders = app.MapGroup( \u0022/order\u0022 ).WithApiVersionSet();\r\n\r\n// GET ~/order/{id}?api-version=1.0\r\norders.MapGet( \u0022/{id}\u0022, ( string id ) =\u003E new V1.Order() { Id = id, Customer = \u0022John Doe\u0022 } )\r\n      .HasApiVersion( 1.0 );\r\n\r\n// GET ~/order/{id}?api-version=2.0\r\norders.MapGet( \u0022/{id:int}\u0022, ( int id ) =\u003E new V2.Order() { Id = id, Customer = \u0022John Doe\u0022, Phone = \u0022555-555-5555\u0022 } )\r\n      .HasApiVersion( 2.0 );\r\n\r\n// DELETE ~/order/{id}?api-version=2.0\r\norders.MapDelete( \u0022/{id:int}\u0022, ( int id ) =\u003E Results.NoContent() )\r\n      .HasApiVersion( 2.0 );\r\n\u0060\u0060\u0060\r\n\r\nThe grouping construct requires you to define the route templates first and apply version metadata in a very _flat_ way. This is _unnatural_ to the way that developers think about defining a set of versioned APIs, which is typically:\r\n\r\n\u0060\u0060\u0060\r\n\u251C 1.0\r\n\u2502  \u2514 GET /order/{id}\r\n\u2514 2.0\r\n   \u251C GET /order/{id:int}\r\n   \u2514 DELETE /order/{id:int}\r\n\u0060\u0060\u0060\r\n\r\nThis is also true for the Swagger UI, where most people have a mental model of:\r\n\r\n\u0060\u0060\u0060\r\n\u2514 API Version (e.g. group group)\r\n   \u2514 API Name (e.g. logical name)\r\n      \u251C API (e.g. endpoint) \r\n      \u2514 ...\r\n\u0060\u0060\u0060\r\n\r\nInterestingly, the _name_ issue also affects versioned APIs because there is a _logical name_ to a set of APIs. Even though a single endpoint _can_ be an API, there is typically a logical name for a set of related APIs. An API version set _can_ have such a name, which _may_ optimally be used as the metadata for the name provided in OpenAPI if no other name is provided. A version set is required because there is a logical correlation between similar endpoints. This is achieved through the \u0060ApiVersionSet\u0060 monad for all endpoints registered against it; regardless of name.\r\n\r\nI considered creating some other _group-like_ construct in front of \u0060MapXXX\u0060, but @davidfowl strongly encouraged me to not do that (so I didn\u0027t). To me, that implies we\u0027re looking for one grouping API to rule them all. Perhaps that was intentional as a starting experiment, but the use of concrete, \u0060sealed\u0060 types makes it very, very difficult to extend or customize the current design.\r\n\r\nUltimately, for API Versioning, there are two significant shortcomings in the current design:\r\n\r\n1. \u0060MapGroup\u0060 tracks a series of conventions for an endpoint, but there are no actual _group_ conventions\r\n   a. \u0060IEndpointConventionBuilder\u0060 is for each specific \u0060Endpoint\u0060; _group_ conventions are copied to each \u0060Endpoint\u0060\r\n   b. There exists a concept to run before and after each group, which is not intrinsically supported\r\n   c. It took a long time to figure out how to get in front of things, but you can see one example how yucky it is [here](https://github.com/dotnet/aspnet-api-versioning/blob/5515464b1b7cbead8a26e2b6da4d2015db608372/src/AspNetCore/WebApi/src/Asp.Versioning.Http/Builder/VersionedEndpointRouteBuilder.cs#L98)\r\n2. If a developer doesn\u0027t call \u0060WithApiVersionSet()\u0060, then all other calls to \u0060HasApiVersion\u0060 and so on will apply metadata to the endpoint, but nothing is collated and ultimately will not work, but there is no way to validate or let the developer know they\u0027ve missed something\r\n\r\nAt the end of the day, we do have something that works, but I think we can do better. \uD83D\uDE09 \r\n\r\ncc: @davidfowl, @captainsafia ",
        "createdAt": "2022-11-14T16:42:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1314058985"
      },
      {
        "id": "IC_kwDOAQzde85OU4G8",
        "parentId": null,
        "author": "captainsafia",
        "content": "I had the chance to play with ApiVersioning some more recently and have some hands on experience with how clunky groups \u002B versioning can be.\r\n\r\n\u003E MapGroup tracks a series of conventions for an endpoint, but there are no actual group conventions\r\n\r\nI agree with this statement in principal, but I\u0027m not sure how much of an impact it has on the particular problem. What\u0027s the difference between setting a single metadata item once on a group vs. the same metadata item on each element within a group?\r\n\r\nI think there is something to be said for having clearer concepts around groups in the API (group metadata, group conventions) instead of having groups be largely route pattern-based as you mentioned. It would be good to get more scenarios that would be positively impacted by this.\r\n\r\n \u003E which is not intrinsically supported\r\n\r\nCan you clarify what you mean here?\r\n\r\n",
        "createdAt": "2022-11-14T17:08:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1314095548"
      },
      {
        "id": "IC_kwDOAQzde85OVCWa",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "Glad you got a chance to play with things. I just released \u00607.0.0-preview.1\u0060 which will have support for \u0060MapGroup\u0060 as shown in the example above. It\u0027s _less clunky_, but it\u0027s still less than ideal. Even though putting an API Versioning specific grouping construct in front of \u0060MapGroup\u0060 makes sense, I\u0027m very hesitant to do so since our melding of minds may produce a better, more universal API surface in .NET 8. I don\u0027t want to introduce a potential breaking change in the future because I chose to go _off script_.\r\n\r\nTo clarify what I mean, sets of APIs are logically collated; in this case, let\u0027s call the API **Orders**. When a developer sets \u0060ApiVersioningOptions.ReportApiVersions = true\u0060, the expectation is that the HTTP header \u0060api-support-versions: 1.0, 2.0\u0060 would be emitted in all responses for **Orders**. In order to achieve that, all API versions for a logical API have to be collated. In MVC Core, this achieved by pivoting on the controller name (e.g. logical API name) via the _Application Model_. That doesn\u0027t exist for _Minimal APIs_ (and rightly so) and a _Minimal API_ doesn\u0027t necessarily have a required, logical name or any other correlation to other _Minimal APIs_; hence, \u0060ApiVersionSet\u0060 was born. The _version set_ serves as means to track API version metadata across endpoints.\r\n\r\nNow, when we\u0027re finally getting ready to create endpoints, we run all the conventions as can be seen at:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/5918bc9db2099f90cc6f5b5db43a8d16f5dc89df/src/Http/Routing/src/RouteEndpointDataSource.cs#L216\r\n\r\nHowever, this is running _individual_ conventions for a specific \u0060Endpoint\u0060. What is really needed is:\r\n\r\n1. Run conventions per group\r\n2. Run conventions per endpoint\r\n3. Run finalizer conventions per endpoint\r\n4. Run finalizer conventions per group\r\n\r\nThis is not supported out-of-the-box. In the case of API Versioning, it needs \u00601.\u0060 so that it can collate API versions from all endpoints in the same _version set_. A _declared_ API version is what maps to a specific \u0060Endpoint\u0060 for dispatch, whereas a _supported_ API version is merely implemented - somewhere. As can be seen here (and linked above):\r\n\r\nhttps://github.com/dotnet/aspnet-api-versioning/blob/5515464b1b7cbead8a26e2b6da4d2015db608372/src/AspNetCore/WebApi/src/Asp.Versioning.Http/Builder/VersionedEndpointRouteBuilder.cs#L98\r\n\r\nAPI Versioning needs to decorate the \u0060EndpointDataSource\u0060 so that when \u0060GetGroupedEndpoints\u0060 is called this collation happens before the group is processed. Although API Versioning doesn\u0027t need post-processing, others _might_, which is where \u00604.\u0060 comes in. In fact, although I don\u0027t recall any design discussions about it (but maybe I missed it), I suspect that is how \u0060Finally\u0060 ended up being added. \u0060Add\u0060 effectively runs first/before and \u0060Finally\u0060 runs after. There are scenarios, like API Versioning, where this needs to happen at the group level itself and not just run on a single \u0060Endpoint\u0060.",
        "createdAt": "2022-11-14T17:40:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1314137498"
      },
      {
        "id": "IC_kwDOAQzde85OVMPF",
        "parentId": null,
        "author": "davidfowl",
        "content": "@commonsensesoftware it would help if you could show a code sample of what code you want to right. Sometimes it\u0027s really hard to match the requirements here from the outcome you\u0027re trying to achieve. Can you write 3 or 4 examples of what you want to enable? (Assuming you could change anything)",
        "createdAt": "2022-11-14T18:11:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1314177989"
      },
      {
        "id": "IC_kwDOAQzde85OW6ej",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "Sure... let\u0027s start with 2: a really basic example and one that\u0027s a little more advanced.\r\n\r\n\u0060\u0060\u0060c#\r\nvar builder = WebApplication.CreateBuilder( args );\r\n\r\nbuilder.Services.AddApiVersioning();\r\n\r\nvar app = builder.Build();\r\n\r\n// SCENARIO 1 -  a really simple Orders API\r\n\r\napp.DefineApi() // \u2190 logical group\r\n   .MapGroup( \u0022/orders\u0022, orders =\u003E\r\n    {\r\n    \torders.HasApiVersion( 1.0 ); // \u2190 group metadata\r\n    \torders.MapGet( \u0022/{id}\u0022, (string id) =\u003E Results.Ok() );\r\n    \torders.MapPost( \u0022/\u0022, (V1.Order order) =\u003E Results.Ok() );\r\n    \torders.MapDelete( \u0022/{id}\u0022, (string id) =\u003E Results.NoContent() ).IsApiVersionNeutral();\r\n    }\r\n   .MapGroup( \u0022/orders\u0022, orders =\u003E\r\n    {\r\n    \torders.HasApiVersion( 2.0 ); // \u2190 group metadata\r\n    \torders.MapGet( \u0022/{id:int}\u0022, (int id) =\u003E Results.Ok() );\r\n    \torders.MapPost( \u0022/\u0022, (V2.Order order) =\u003E Results.Ok() );\r\n    });\r\n\r\n// SCENARIO 2 - a more advanced Weather Forecast API\r\n\r\napp.DefineApi( \u0022Weather Forecast\u0022 )                      // \u2190 logical api group\r\n   .AdvertisesApiVersion( new DateOnly( 2022, 11, 01 ) ) // \u2190 api version implemented elsewhere\r\n   .ReportApiVersions()                                  // \u2190 applies to all endpoints in group\r\n   .MapGroup( \u0022/weatherforecast\u0022, group =\u003E               // \u2190 group within a group\r\n    {\r\n    \t// all endpoints implicitly map to 0.9 and 1.0\r\n    \tgroup.HasApiVersion( 0.9 )\r\n    \t     .HasApiVersion( 1.0 );\r\n\r\n        // GET /weatherforecast?api-version=0.9|1.0\r\n        group.MapGet( \u0022/\u0022, () =\u003E Results.Ok() );\r\n\r\n        // GET /weatherforecast/{city}?api-version=1.0\r\n        group.MapGet( \u0022/{city}\u0022, (string city) =\u003E Results.Ok() )\r\n             .MapToApiVersion( 1.0 );                    // \u2190 explicitly maps to 1.0 only;\r\n                                                         //   0.9 returns a client error\r\n\r\n        // DELETE /weatherforecast/{city}\r\n        // note: this can be declared anywhere, but there can be only one\r\n        group.MapDelete( \u0022/{city}\u0022, (string city) =\u003E Results.NoContent() )\r\n             .IsApiVersionNeutral();\r\n    } )\r\n   .MapGroup( \u0022/weatherforecast\u0022, group =\u003E\r\n    {\r\n    \t// all endpoints implicitly map to 2.0\r\n    \tgroup.HasApiVersion( 2.0 );\r\n\r\n        // GET /weatherforecast?api-version=2.0\r\n        group.MapGet( \u0022/\u0022, () =\u003E Results.Ok() );\r\n\r\n        // GET /weatherforecast/{city}?api-version=2.0\r\n        group.MapGet( \u0022/{city}\u0022, (string city) =\u003E Results.Ok() );\r\n\r\n        // POST /weatherforecast?api-version=2.0\r\n        group.MapPost( \u0022/\u0022, ( WeatherForecast forecast ) =\u003E Result.Ok() );\r\n    } );\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\nHonestly, I think I _could_ build out and make an implementation work like that today, but it would all be custom without any generalization provided by ASP.NET Core. Now that I\u0027ve had some time to deeply play with what \u0060MapGroup\u0060 can and can\u0027t do, I _think_ a generic grouping interface would look something like:\r\n\r\n\u0060\u0060\u0060c#\r\npublic interface IGroupEndpointRouteBuilder :\r\n    IEndpointRouteBuilder,\r\n    IEndpointConventionBuilder\r\n{\r\n    IList\u003Cobject\u003E Metadata { get; }\r\n    void BeforeConventions(IReadOnlyList\u003CEndpointBuilder\u003E builders);\r\n    void AfterConventions(IReadOnlyList\u003CEndpointBuilder\u003E builders);\r\n}\r\n\u0060\u0060\u0060\r\n\u003EThis is meant to spark discussion. It\u0027s not a formal API proposal.\r\n\r\nThis would address the current limitations of \u0060RouteGroupBuilder\u0060, namely:\r\n\r\n- Pass group-level metadata through one or more group builders\r\n- Perform group-level conventions before each endpoint convention is applied\r\n- Perform group-level post-conventions after each endpoint convention is applied\r\n\r\nThe way I [currently] _think_ this would be passed down through each group is by wiring up the callbacks to the \u0060RouteGroupContext\u0060 like so:\r\n\r\n\u0060\u0060\u0060diff\r\npublic sealed class RouteGroupContext\r\n{\r\n\t// ...\r\n\u002B\trequired public Action\u003CIReadOnlyList\u003CEndpointBuilder\u003E\u003E BeforeConventions { get; init; }\r\n\u002B\trequired public Action\u003CIReadOnlyList\u003CEndpointBuilder\u003E\u003E AfterConventions { get; init; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThen in \u0060EndpointDataSource.GetGroupedEndpoints\u0060 you\u0027d be able to have something like:\r\n\r\n\u0060\u0060\u0060c#\r\npublic virtual IReadOnlyList\u003CEndpoint\u003E GetGroupedEndpoints(RouteGroupContext context)\r\n{\r\n    RouteEndpointBuilder[] builders = CreateBuilders( Endpoints );\r\n    \r\n    context.BeforeConventions(builders);\r\n\r\n    for (int i = 0; i \u003C builders.Count; i\u002B\u002B)\r\n    {\r\n    \tvar builder = builders[i];\r\n\r\n    \tforeach (var convention in context.Conventions)\r\n        {\r\n            convention(builder);\r\n        }\r\n\r\n        foreach (var metadata in routeEndpoint.Metadata)\r\n        {\r\n            builder.Metadata.Add(metadata);\r\n        }\r\n\r\n        foreach (var finallyConvention in context.FinallyConventions)\r\n        {\r\n            finallyConvention(builder);\r\n        }\r\n    }\r\n\r\n    context.AfterConventions(builders);\r\n\r\n    return ToWrappedEndpoints(builders);\r\n}\r\n\u0060\u0060\u0060\r\n\u003EAbridged, pseudocode.\r\n\r\nUsing some variant of this approach, we should be able to have any type of grouping, including groups of groups (of groups, etc). The only significant side effect I see (so far) are more loops during endpoint construction, but that should only affect cold start times. IMHO, this would be negligable and acceptable. The example above, \u0060DefineApi\u0060 would return a \u0060IGroupEndpointRouteBuilder\u0060 that can be combined with other types of groups. Most other extension methods would be used to attach metadata or create nested groups. There may be opportunities to generalize how metadata is applied (maybe another interface?) so that a single set of extensions methods can apply metadata to a group or a specific endpoint. I could see authorization or OpenAPI metadata being applied this way too. Grouping endpoints doesn\u0027t _have_ to use callbacks, but it does provide a nice visualization in the code that we\u0027re closing over a group.\r\n\r\nHopefully that starts turning some gears. I\u0027m sure there\u0027s plenty of things I\u0027ve missed or overlooked, but I think this is enough to keep the dialog going. \uD83D\uDE4F\uD83C\uDFFD ",
        "createdAt": "2022-11-15T01:24:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1314629539"
      },
      {
        "id": "IC_kwDOAQzde85OXfgz",
        "parentId": null,
        "author": "davidfowl",
        "content": "## Example 1\r\n\r\nOK, so the first example. Why does \u0060DefineApi\u0060 need to exist? Here at all? Is it adding metadata somewhere? Using .NET 7\u0027s route groups this would look like:\r\n\r\n\u0060\u0060\u0060C#\r\nvar v0 = app.MapGroup(\u0022orders\u0022);\r\n\r\nv0.HasApiVersion(1.0); // \u2190 group metadata\r\nv0.MapGet(\u0022/{id}\u0022, (string id) =\u003E Results.Ok());\r\nv0.MapPost(\u0022/\u0022, (V1.Order order) =\u003E Results.Ok());\r\nv0.MapDelete(\u0022/{id}\u0022, (string id) =\u003E Results.NoContent()).IsApiVersionNeutral();\r\n\r\nvar v1 = app.MapGroup(\u0022orders\u0022);\r\n\r\nv1.HasApiVersion(1.0); // \u2190 group metadata\r\nv1.MapGet(\u0022/{id}\u0022, (string id) =\u003E Results.Ok());\r\nv1.MapPost(\u0022/\u0022, (V1.Order order) =\u003E Results.Ok());\r\nv1.MapDelete(\u0022/{id}\u0022, (string id) =\u003E Results.NoContent()).IsApiVersionNeutral();\r\n\u0060\u0060\u0060\r\n\r\nWhat is missing there? Besides the nesting API, which we punted for now (but I understand is nicer to look at from a logical nesting PoV).\r\n\r\n## Example 2\r\n\r\n\u0060\u0060\u0060C#\r\nvar g = app.MapGroup(\u0022\u0022); // Hacky, no prefix I now but it works \uD83D\uDE04 \r\ng.DefineApi(\u0022Weather Forecast\u0022)  \r\n   .AdvertisesApiVersion(new DateOnly(2022, 11, 01))   // \u2190 api version implemented elsewhere\r\n   .ReportApiVersions();                                                 // \u2190 applies to all endpoints in group\r\n\r\nvar g1 = g.MapGroup(\u0022weatherforecast\u0022);\r\ng1.HasApiVersion(0.9).HasApiVersion(1.0);\r\n\r\n// GET /weatherforecast?api-version=0.9|1.0\r\ng1.MapGet(\u0022/\u0022, () =\u003E Results.Ok());\r\n\r\n// GET /weatherforecast/{city}?api-version=1.0\r\ng1.MapGet(\u0022/{city}\u0022, (string city) =\u003E Results.Ok())\r\n     .MapToApiVersion(1.0);                    // \u2190 explicitly maps to 1.0 only;\r\n                                                             //   0.9 returns a client error\r\n\r\nvar g2 = g.MapGroup(\u0022weatherforecast\u0022);\r\n\r\n// all endpoints implicitly map to 2.0\r\ng2.HasApiVersion(2.0);\r\n\r\n// GET /weatherforecast?api-version=2.0\r\ng2.MapGet(\u0022/\u0022, () =\u003E Results.Ok());\r\n\r\n// GET /weatherforecast/{city}?api-version=2.0\r\ng2.MapGet(\u0022/{city}\u0022, (string city) =\u003E Results.Ok());\r\n\r\n// POST /weatherforecast?api-version=2.0\r\ng2.MapPost(\u0022/\u0022, (WeatherForecast forecast ) =\u003E Result.Ok());\r\n\u0060\u0060\u0060\r\n\r\nIs it about the features or is it about the API style? As far as we\u0027re concerned, groups are already general purpose and can be nested. They are also logical, so you get a new group when MapGroup is called. That means you can declare 2 groups with the same prefix and different metadata already.\r\n\r\nDoes this solve your problems? If not, what am I missing?\r\n\r\nPS: There are some tweaks we want to make to groups for .NET 8. Some that come to mind are:\r\n- A cleaner way to apply global conventions.\r\n- A cleaner way to make a group without a prefix (passing \u0022\u0022) is kinda gross.\r\n- Maybe a nesting API MapGroup that takes a delegate with the group being created.",
        "createdAt": "2022-11-15T05:06:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1314781235"
      },
      {
        "id": "IC_kwDOAQzde85OXxOC",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "I suppose if \u0060MapGroup(\u0022\u0022)\u0060 or \u0060MapGroup()\u0060 works, then that would be _acceptable_. \u0060DefineApi\u0060 doesn\u0027t _need_ to exist. You asked how I would _want_ it to look if I could change anything. \uD83D\uDE09 Using \u0060MapGroup\u0060 can most definitely work, but it\u0027s a bit _unnatural_ because you aren\u0027t mapping any routes - yet. Maybe that\u0027s the intent. I\u0027ve seen no such examples or documentation.\r\n\r\nThe only thing that you missed is the setup needs to be:\r\n\r\n\u0060\u0060\u0060c#\r\napp.MapGroup( \u0022/orders\u0022 ).WithApiVersionSet();\r\n\u0060\u0060\u0060\r\n\r\nWhich was from my [earlier comment](#issuecomment-1314058985). That is what I currently have working in preview. So - yes - some future \u0060DefineApi\u0060 would add metadata to a group builder. It would be a group that doesn\u0027t itself represent any endpoints. It is purely a _builder_ that collates metadata for endpoints further down the chain.\r\n\r\nIf \u0060MapGroup\u0060 can achieve that, then I\u0027ll have to consider whether I leave it as is or add something like \u0060DefineApi\u0060, which would merely be shorthand for \u0060MapGroup( \u0022\u0022 ).WithApiVersionSet()\u0060.\r\n\r\nThe current grouping API design does not intrinsically support group-level conventions so you\u0027ve missed that. \u0060MapGroup\u0060 collates on the routes, but API Versioning collates on logical API sets. In MVC Core, this was achieved by controller name. The \u0060ApiVersionSet\u0060 serves as a similar monad for _Minimal APIs_ which collates API versions together; regardless of name (but a developer can provide one). This makes \u0060ApiVersioningOptions.ReportApiVersions = true\u0060 continue to work for _Minimal APIs_. The example above \u0060/weatherforecast?api-version=1.0\u0060 and \u0060/weatherforecast?api-version=2.0\u0060 would both return the header \u0060api-supported-versions: 1.0, 2.0\u0060.\r\n\r\nI linked to the source implementation I have a couple of times above (as it\u0027s nontrivial to copy over), but long story short, I have to decorate the \u0060EndpointDataSource\u0060 so that I can collate all API versioning metadata for related APIs before the endpoints are generated and run their own conventions. Am I blocked? No. Is the grouping API painful to extend - kinda. Since the \u0060RouteGroupBuilder\u0060 is \u0060sealed\u0060 and implements two disjoint interfaces, I had to create the interface:\r\n\r\n\u0060\u0060\u0060c#\r\npublic interface IVersionedEndpointRouteBuilder :\r\n    IEndpointRouteBuilder,\r\n    IEndpointConventionBuilder\r\n{\r\n}\r\n\u0060\u0060\u0060\r\n\r\nSo that I can decorate \u0060RouteGroupBuilder\u0060, retain its functionality, and add the necessary collation logic. The problem is the inverse of what you stated: two different groups with the **same** metadata. The shared metadata is the what is collated across all endpoints. If that can thread through a group a la \u0060MapGroup( \u0022\u0022 )\u0060, then that might just work.\r\n\r\nCurrently, I don\u0027t have support for adding metadata via \u0060RouteGroupBuilder\u0060, but I _think_ I could. It\u0027s an implementation detail, but \u0060HasApiVersion\u0060 implicitly defined on a group has a different meaning that \u0060HasApiVersion\u0060 explicitly on an \u0060Endpoint\u0060. That might seem strange, but most people want to define versioned APIs in logical sets. It is possible to have two different endpoints in a set with the same route template map to different versions a la \u0060MapToApiVersion\u0060. In a controller this would be different action methods. You can, however, explicitly define API versions on any specific endpoint. When you do that, any implicit API versions (from the group) are ignored. To make it work, I\u0027m pretty sure I\u0027d have to track if the metadata was defined by a group or explicitly on an endpoint. Achievable, but a lot of internal ceremony (if only it was my day job \uD83D\uDE06).\r\n\r\nTo be crystal clear, I do have _something_ working. I will take all the feedback and challenge to design you are willing to put forth (here or back in the API Versioning repo). I do, however, think there are some opportunities to make defining these groups less _clunky_ as we look into the future. \uD83D\uDE09 ",
        "createdAt": "2022-11-15T06:52:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1314853762"
      },
      {
        "id": "IC_kwDOAQzde85OahXF",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E OK, so the first example. Why does DefineApi need to exist? Here at all? Is it adding metadata somewhere? Using .NET 7\u0027s route groups this would look like:\r\n\r\nThis sample is what I was anticipating the experience would look like. With the noticeable tweak that versions would be registered something like this:\r\n\r\n\u0060\u0060\u0060csharp\r\nvar v0 = app.DefineApi(\u0022v0\u0022);\r\nv0.MapTodos();\r\n\r\nvar v1 = app.DefineApi(\u0022v1\u0022);\r\nv1.MapTodos();\r\nv1.MapUsers();\r\n\u0060\u0060\u0060\r\n\r\n\u003E or add something like DefineApi, which would merely be shorthand for MapGroup( \u0022\u0022 ).WithApiVersionSet().\r\n\r\nI like having \u0060DefineApi\u0060 as a shorthand for \u0060MapGroup\u0060 \u002B \u0060WithApiVersionSet\u0060 and I believe we currently have all the moving parts to make this happen. \r\n\r\nThe notable exception being that there isn\u0027t a way to represent the \u0060ApiVersionSetBuilder\u0060 as group metadata.\r\n\r\n\u003E To be crystal clear, I do have something working. I will take all the feedback and challenge to design you are willing to put forth (here or back in the API Versioning repo).\r\n\r\nI\u0027ll try the changes added in the last week and share any feedback.",
        "createdAt": "2022-11-15T16:37:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1315575237"
      },
      {
        "id": "IC_kwDOAQzde85ObCZb",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "Thanks for all the dialog. The way I was able to get the metadata to flow through the groups was by decorating \u0060IServiceProvider\u0060 on the \u0060EndpointBuilder\u0060 and making it resolvable that way. \r\n\r\nIt may take me a couple of days, but I have a few additional ideas about how this might work. For example:\r\n\r\n\u0060\u0060\u0060c#\r\n// MapApiGroup might make sense too\r\n// regardless, it\u0027s a shortcut over MapGroup \u002B Custom metadata\r\nvar todo = app.DefineApi( \u0022ToDo\u0022 );\r\n\r\n// 1.0\r\nvar v1 = todo.MapGroup( \u0022todo\u0022 );\r\nv1.HasApiVersion( 1.0 );  // \u2190 attached to this group and applies to all mapped endpoints\r\nv1.MapGet( \u0022/\u0022, () =\u003E Results.Ok() );\r\n\r\n// 2.0\r\nvar v2 = todo.MapGroup( \u0022todo\u0022 );\r\nv2.HasApiVersion( 2.0 ); // \u2190 attached to this group and applies to all mapped endpoints\r\nv2.MapGet( \u0022/\u0022, () =\u003E Results.Ok() );\r\nv2.MapGet( \u0022/{id}\u0022, (string id) =\u003E Results.Ok() );\r\nv2.MapPost( \u0022/\u0022, (ToDo todo) =\u003E Results.Ok() );\r\n\u0060\u0060\u0060\r\n\r\nAll subgroups roll back up to \u0060todo\u0060 and will be correctly collated. Extension methods as shortcuts are still an option and supported, but in most situations, the configuration will be different. At a minimum, I would expect the model to be different between versions, but it might solvable via generics. In any case, it\u0027s in the hands of the developer.\r\n\r\nI\u0027ll report back my findings and any additional pain points.",
        "createdAt": "2022-11-15T18:31:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1315710555"
      },
      {
        "id": "IC_kwDOAQzde85ObdVd",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E  The way I was able to get the metadata to flow through the groups was by decorating IServiceProvider on the EndpointBuilder and making it resolvable that way.\r\n\r\n\uD83D\uDE14. can you show that code?",
        "createdAt": "2022-11-15T20:21:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1315820893"
      },
      {
        "id": "IC_kwDOAQzde85Oboz4",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "@davidfowl \r\n\r\nhttps://github.com/dotnet/aspnet-api-versioning/blob/5515464b1b7cbead8a26e2b6da4d2015db608372/src/AspNetCore/WebApi/src/Asp.Versioning.Http/Builder/VersionedEndpointRouteBuilder.cs#L98\r\n\r\n\u0060\u0060\u0060c#\r\ncontext = new RouteGroupContext()\r\n{\r\n    // decorate IServiceProvider with group-level metadata so it\u0027s accessible in the Finally convention\r\n    ApplicationServices = new ServiceProviderDecorator( context.ApplicationServices, versionSetBuilder ),\r\n    Conventions = context.Conventions,\r\n    FinallyConventions = context.FinallyConventions,\r\n    Prefix = context.Prefix,\r\n};\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2022-11-15T21:10:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1315867896"
      },
      {
        "id": "IC_kwDOAQzde85Oi0D-",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "It went smoother and faster than I thought. Groups of groups are working correctly with only minor refactoring. Unless there are other recommendations, this is were API Versioning will land for its .NET 7 Preview 2:\r\n\r\n\u0060\u0060\u0060c#\r\n// stick with the MapXXX convention and indicate this is a group. this is just a shortcut for:\r\n// app.MapGroup( \u0022\u0022 ).WithApiVersionSet( \u0022ToDo\u0022 );\r\nvar todo = app.MapApiGroup( \u0022ToDo\u0022 );\r\n\r\n// 1.0\r\nvar v1 = todo.MapGroup( \u0022todo\u0022 ).HasApiVersion( 1.0 ); \r\n\r\nv1.MapGet( \u0022/\u0022, () =\u003E Results.Ok() );\r\n\r\n// 2.0\r\nvar v2 = todo.MapGroup( \u0022todo\u0022 ).HasApiVersion( 2.0 );\r\n\r\nv2.MapGet( \u0022/\u0022, () =\u003E Results.Ok() );\r\nv2.MapGet( \u0022/{id}\u0022, (string id) =\u003E Results.Ok() );\r\nv2.MapPost( \u0022/\u0022, (ToDo todo) =\u003E Results.Ok() );\r\n\u0060\u0060\u0060\r\n\r\nTo see a full example with OpenAPI support, you can peek at [this example](https://github.com/dotnet/aspnet-api-versioning/blob/2e8d692830a0b97f341eed929c66bdb396b57b17/examples/AspNetCore/WebApi/MinimalOpenApiExample/Program.cs).\r\n\r\nIn terms of grouping constructs, the design holds up. We could split hairs on _style_, but that\u0027s irrelevant. The two remaining challenges as it related to this issue are:\r\n\r\n1. There is no way to process group-level conventions\r\n    a. API Versioning needs to collate metadata across the group **before** endpoint conventions are applied\r\n2. There is no concept of group-level metadata\r\n\r\nI have it working, but not without a lot of trial and error, which ultimately required decorating \u0060RouteGroupBuilder\u0060 so I could get in front of it to do group-level convention processing. You can see the main problem area [here](https://github.com/dotnet/aspnet-api-versioning/blob/2e8d692830a0b97f341eed929c66bdb396b57b17/src/AspNetCore/WebApi/src/Asp.Versioning.Http/Builder/VersionedEndpointRouteBuilder.cs).\r\n\r\nAnother area to _consider_ is validation. There just may not be a general form for it and it will be up to extenders. For API Versioning there are a number of validation scenarios such as:\r\n\r\n- Should not be able to call \u0060MapApiGroup\u0060 on a nested group (it\u0027s illogical and likely will not flow correctly)\r\n- Should not be able to call \u0060WithApiVersionSet\u0060 after \u0060MapApiGroup\u0060 or vice versa\r\n- Should be able to call \u0060NewApiVersionSet\u0060 and pass it to \u0060WithApiVersionSet\u0060 for an endpoint (in the .NET 6 style) after you\u0027ve used one of the supported group constructs\r\n\r\nFood for thought. I don\u0027t have any good ideas here. I tried through \u0060Finally\u0060, but that doesn\u0027t work in my scenario. Conventions can be added to a group or specific endpoint, but they have different validation semantics. The goal is to help developers detect and surface misconfigurations as early as possible.",
        "createdAt": "2022-11-16T22:19:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41429#issuecomment-1317748990"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Iq1xY",
    "title": "[Route Groups] Implement IApplicationBuilder to support grouped middleware",
    "url": "https://github.com/dotnet/aspnetcore/issues/41431",
    "createdAt": "2022-04-28T19:38:30Z",
    "lastUpdated": "2024-03-01T22:54:57Z",
    "body": "We want \u0060MapGroup\u0060 to support middleware via the \u0060IApplicationBuilder\u0060 interface so things like \u0060UseResponseCompression()\u0060, \u0060UseHttpLogging()\u0060, \u0060UseForwardedHeaders()\u0060, \u0060UseRequestLocalization()\u0060, terminal middleware like \u0060UseStaticFiles()\u0060 and [more](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-6.0#built-in-middleware) can be called on a group.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nThis still needs design, but there are a lot of open questions. We still need to figure out how we define a middleware that runs every time a route handler in a given group is hit. before running the endpoint and similar middleware from inner groups?\r\n\r\n- How do we deal with middleware that checks the request path?\r\n  - Can we trim the group prefix from the path?\r\n- What about middleware that\u0027s aware of grouping and wants the real full path?\r\n  - Do we add a new feature to support this?\r\n  - Can middleware use default endpoint metadata (#41429) to infer the real full path?\r\n- What if no endpoint is matched, but the middleware would have been terminal?\r\n  - Do we create a low-priority catchall endpoint with the route prefix?\r\n- Then what if the middleware isn\u0027t terminal?\r\n  - Can we still fallback to the normal missing endpoint logic if we add a fake catchall endpoint?\r\n- Will we support middleware rewriting the route after matching a specific group prefix and rerun routing?\r\n  - This seems like too much. What if the new\r\n",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85CkC9Y",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-05-03T23:14:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41431#issuecomment-1116745560"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Iq6n-",
    "title": "[Route Groups] Investigate callback based API",
    "url": "https://github.com/dotnet/aspnetcore/issues/41432",
    "createdAt": "2022-04-28T19:54:26Z",
    "lastUpdated": "2024-03-01T22:54:57Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nA callback-based version of \u0060MapGroup\u0060 was considered as an [alternative design in the [original route grouping issue](https://github.com/dotnet/aspnetcore/issues/36007#issuecomment-1087774396). In this design, the \u0060IEndpointRouteBuilder\u0060 would be passed to a callback rather than returned from \u0060MapGroup\u0060.\r\n\r\n\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nIf we use callbacks instead of the return type of \u0060MapGroup\u0060 to define endpoints, it naturally leads to a nested structure in the cod that matches the nested structure of a group. For example:\r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n// ...\r\nvar app = builder.Build();\r\n\r\napp.MapGroup(\u0022/todos\u0022, group =\u003E\r\n{\r\n    group.MapGet(\u0022/\u0022, (int id, TodoDb db) =\u003E db.ToListAsync());\r\n    group.MapGet(\u0022/{id}\u0022, (int id, TodoDb db) =\u003E db.GetAsync(id));\r\n    group.MapPost(\u0022/\u0022, (Todo todo, TodoDb db) =\u003E db.AddAsync(todo));\r\n\r\n    // string org cannot be an argument to the configureGroup callback because that would require MapGet and other\r\n    // IEndpointRouteBuilder extension methods to be repeatedly called fore every request.\r\n    group.MapGroup(\u0022/{org}\u0022, nestedGroup =\u003E\r\n    {\r\n        nestedGroup.MapGet(\u0022/\u0022, (string org, TodoDb db) =\u003E db.Filter(todo =\u003E todo.Org == org).ToListAsync());\r\n        // ...\r\n    }).RequireAuthorization();\r\n    // ....\r\n}).RequireCors(\u0022AllowAll\u0022);\r\n// ...\r\n\u0060\u0060\u0060\r\n\r\nSo instead of what we have today:\r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n// ...\r\nvar app = builder.Build();\r\n\r\nvar group = app.MapGroup(\u0022/todos\u0022);\r\ngroup.MapGet(\u0022/\u0022, (int id, TodoDb db) =\u003E db.ToListAsync());\r\ngroup.MapGet(\u0022/{id}\u0022, (int id, TodoDb db) =\u003E db.GetAsync(id));\r\ngroup.MapPost(\u0022/\u0022, (Todo todo, TodoDb db) =\u003E db.AddAsync(todo));\r\ngroup.RequireCors(\u0022AllowAll\u0022);\r\n\r\nvar nestedGroup = group.MapGroup(\u0022/{org}\u0022);\r\nnestedGroup.MapGet(\u0022/\u0022, (string org, TodoDb db) =\u003E db.Filter(todo =\u003E todo.Org == org).ToListAsync());\r\nnestedGroup.RequireAuthorization();\r\n// ...\r\n\u0060\u0060\u0060\r\n\r\nYou an already manually introduce scopes to get a similar kind of structure with the existing API as demonstrated by https://twitter.com/davidfowl/status/1519480212060139521, but I doubt many people will structure their code like this in practice unless we use callbacks:\r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n// ...\r\nvar app = builder.Build();\r\n\r\nvar group = app.MapGroup(\u0022/todos\u0022);\r\n{\r\n        group.MapGet(\u0022/\u0022, (int id, TodoDb db) =\u003E db.ToListAsync());\r\n        group.MapGet(\u0022/{id}\u0022, (int id, TodoDb db) =\u003E db.GetAsync(id));\r\n        group.MapPost(\u0022/\u0022, (Todo todo, TodoDb db) =\u003E db.AddAsync(todo));\r\n        group.RequireCors(\u0022AllowAll\u0022);\r\n\r\n        var nestedGroup = group.MapGroup(\u0022/{org}\u0022);\r\n        {\r\n            nestedGroup.MapGet(\u0022/\u0022, (string org, TodoDb db) =\u003E db.Filter(todo =\u003E todo.Org == org).ToListAsync());\r\n            nestedGroup.RequireAuthorization();\r\n        }\r\n}\r\n// ...\r\n\u0060\u0060\u0060\r\n\r\n\r\n### Additional context\r\n\r\nThe current API and a callback-based API are not mutually exclusive. These are different overloads, so both could be supported. I don\u0027t like this however, because I think having too many ways to do things does more harm by creating confusion than it helps by providing more flexibility.\r\n\r\nIf we do decide to support both, we\u0027d need to decide would \u0060MapGroup\u0060 still return a \u0060GroupRouteBuilder\u0060 that you can add endpoints on? And would the callback parameter also be a \u0060GroupRouteBuilder\u0060 meaning you could add both routes and conventions both inside and outside the callback? In our docs, would we normally add endpoints inside the callback and conventions outside the callback like in the sample above?",
    "upvotes": 2,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85CkC91",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-05-03T23:15:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41432#issuecomment-1116745589"
      },
      {
        "id": "IC_kwDOAQzde85NbFTk",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-01T18:33:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41432#issuecomment-1298945252"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85IswyV",
    "title": "Reduce usage of Expression.Constant in RequestDelegateFactory",
    "url": "https://github.com/dotnet/aspnetcore/issues/41435",
    "createdAt": "2022-04-29T03:12:38Z",
    "lastUpdated": "2024-03-01T22:54:58Z",
    "body": "We can generate more efficient code by calling into static properties rather than using Expression.Constant.\r\n\r\n- https://github.com/dotnet/aspnetcore/blob/f1ebd5d426a1996980eec00be55459352c6f27dc/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L321 - We should translate this into a call to a constructor \u0060new ValueTask\u003Cobject\u003E(EmptyResult.Instance)\u0060.\r\n- https://github.com/dotnet/aspnetcore/blob/f1ebd5d426a1996980eec00be55459352c6f27dc/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L860 - We should translate to this into a call to \u0060CancellationToken.None\u0060.\r\n- https://github.com/dotnet/aspnetcore/blob/f1ebd5d426a1996980eec00be55459352c6f27dc/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L1289 - We should translate to this into a call to \u0060CultureInfo.InvariantCulture.\r\n- https://github.com/dotnet/aspnetcore/blob/f1ebd5d426a1996980eec00be55459352c6f27dc/src/Shared/ParameterBindingMethodCache.cs#L122 - We should generate the flags enum usage\r\n- https://github.com/dotnet/aspnetcore/blob/f1ebd5d426a1996980eec00be55459352c6f27dc/src/Shared/ParameterBindingMethodCache.cs#L131 - Same as above.",
    "upvotes": 0,
    "labels": [
      "Perf",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85CsXBZ",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Could you explain how Expression.Constant generates worse code than calling a static property?\r\n\r\nAre you wanting something more like:\r\n\u0060private static readonly MethodInfo ExecuteValueTaskOfStringMethod = typeof(RequestDelegateFactory).GetMethod(nameof(ExecuteValueTaskOfString), BindingFlags.NonPublic | BindingFlags.Static)!;\u0060 for these? Most of the listed examples are dealing with structs which should be generating good code.",
        "createdAt": "2022-05-05T18:39:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41435#issuecomment-1118924889"
      },
      {
        "id": "IC_kwDOAQzde85CtCax",
        "parentId": null,
        "author": "davidfowl",
        "content": "Here\u0027s a very simple example. Lets say we wanted to generate a delegate that mapped to a function that looked like this:\r\n\r\n\u0060\u0060\u0060C#\r\npublic Task Something()\r\n{\r\n   return Task.CompletedTask;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nIf you were to generate this using a constant for this:\r\n\r\n\u0060\u0060\u0060C#\r\nvar f = Expression.Lambda\u003CFunc\u003CTask\u003E\u003E(Expression.Constant(Task.CompletedTask)).Compile();\r\nf();\r\n\u0060\u0060\u0060\r\n\r\nIt ends up generating a function that looks like this:\r\n\r\n\u0060\u0060\u0060C#\r\npublic Task Something(Closure closure)\r\n{\r\n   return (Task)closure.Constants[0];\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThere\u0027s a [closure array created](https://github.com/dotnet/runtime/blob/6ca8c9bc0c4a5fc1082c690b6768ab3be8761b11/src/libraries/System.Linq.Expressions/src/System/Runtime/CompilerServices/Closure.cs#L19) to store the constants that is associated with this generated delegate. We\u0027d store the \u0060Task.CompletedTask\u0060 in that array and then it will be implicitly passed into the method when called (like currying). Beyond that there\u0027s an additional bounds check and cast per call. \r\n\r\nSo instead of generating code that references constants from the outside, we can just generate code that calls the static (like Task.CompletedTask etc). We can trivially avoid these overheads by tweaking the codegen slightly.\r\n\r\nSo the suggestion is to do this (looking at the Task.CompletedTask example) instead:\r\n\r\n\u0060\u0060\u0060C#\r\nvar completedTaskMember = typeof(Task).GetProperty(nameof(Task.CompletedTask), BindingFlags.Public | BindingFlags.Static)!;\r\nvar completedTaskExpr = Expression.MakeMemberAccess(null, completedTaskMember);\r\nvar c2 = Expression.Lambda\u003CFunc\u003CTask\u003E\u003E(completedTaskExpr).Compile();\r\n\u0060\u0060\u0060",
        "createdAt": "2022-05-05T22:32:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41435#issuecomment-1119102641"
      },
      {
        "id": "IC_kwDOAQzde85C73FC",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-05-10T22:55:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41435#issuecomment-1122988354"
      },
      {
        "id": "IC_kwDOAQzde85MAWn3",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:17:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41435#issuecomment-1275161079"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Isyh5",
    "title": "Profile and fix low hanging fruit in startup usage of minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/41436",
    "createdAt": "2022-04-29T03:17:36Z",
    "lastUpdated": "2024-03-01T22:54:59Z",
    "body": "We haven\u0027t done any profiling or work in this space, we should measure the current state and make improvements to the startup logic.\r\n\r\n@sebastienros Do we have startup time as part of these benchmarks?",
    "upvotes": 1,
    "labels": [
      "Perf",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85CX23f",
        "parentId": null,
        "author": "sebastienros",
        "content": "We measure startup and first request for all benchmarks. Everything is tracked in PBI too.",
        "createdAt": "2022-04-29T17:24:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41436#issuecomment-1113550303"
      },
      {
        "id": "IC_kwDOAQzde85CsVuH",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-05-05T18:33:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41436#issuecomment-1118919559"
      },
      {
        "id": "IC_kwDOAQzde85MAWqr",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:17:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41436#issuecomment-1275161259"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85I7epy",
    "title": "Warn on inconsistent annotations in \u0060RHIC.GetArgument\u0060 and handler parameter",
    "url": "https://github.com/dotnet/aspnetcore/issues/41489",
    "createdAt": "2022-05-03T02:00:40Z",
    "lastUpdated": "2023-06-14T01:36:25Z",
    "body": "https://github.com/dotnet/aspnetcore/pull/41406#discussion_r863081020",
    "upvotes": 0,
    "labels": [
      "bug",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85CsVWe",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Triage: This seems like an uncommon scenario. Let\u0027s backlog until we see customer feedback around this area.",
        "createdAt": "2022-05-05T18:31:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41489#issuecomment-1118918046"
      },
      {
        "id": "IC_kwDOAQzde85CsVYT",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-05-05T18:31:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41489#issuecomment-1118918163"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85JQJkQ",
    "title": "Invoking a Minimal Web API in .NET 6 via dotnet throws an exception but runs fine as .exe",
    "url": "https://github.com/dotnet/aspnetcore/issues/41578",
    "createdAt": "2022-05-08T19:39:17Z",
    "lastUpdated": "2024-06-25T12:42:36Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nA minimal web API in .NET 6 throws the following exception when invoked as \u0060dotnet MyApp.dll\u0060\r\n\r\n\u0060\u0060\u0060\r\nUnhandled exception. System.IO.FileNotFoundException: Could not load file or assembly \u0027dotnet, Culture=neutral, PublicKeyToken=null\u0027. The system cannot find the file specified.\r\nFile name: \u0027dotnet, Culture=neutral, PublicKeyToken=null\u0027\r\n\u0060\u0060\u0060\r\n\r\nHowever the same application runs without any errors when run directly from _Visual Studio_ or invoked as _MyApp.exe_\n\n### Expected Behavior\n\nThe application should start successfully regardless of how it is started.\n\n### Steps To Reproduce\n\n1. Clone the following repo: https://github.com/NimaAra/WhereIsTheTruck\r\n2. Publish the web API project via:\r\n\u0060dotnet publish WhereIsTheTruck.Web.App\\WhereIsTheTruck.Web.App.csproj -c Release -o dist\u0060\r\n3. Set the required env variables:\r\n    \u0060\u0060\u0060\r\n    set WhereIsTheTruck:TruckApiEndpoint=http://data.sfgov.org/resource/rqzj-sfat.json\r\n    set WhereIsTheTruck:TruckApiRefreshInterval=1:0:0\r\n    \u0060\u0060\u0060\r\n4. Run the application:\r\n\u0060dotnet .\\dist\\WhereIsTheTruck.Web.App.dll\u0060\n\n### Exceptions (if any)\n\n\u0060\u0060\u0060\r\nUnhandled exception. System.IO.FileNotFoundException: Could not load file or assembly \u0027dotnet, Culture=neutral, PublicKeyToken=null\u0027. The system cannot find the file specified.\r\nFile name: \u0027dotnet, Culture=neutral, PublicKeyToken=null\u0027\r\n   at System.Reflection.RuntimeAssembly.InternalLoad(ObjectHandleOnStack assemblyName, ObjectHandleOnStack requestingAssembly, StackCrawlMarkHandle stackMark, Boolean throwOnFileNotFound, ObjectHandleOnStack assemblyLoadContext, ObjectHandleOnStack retAssembly)\r\n   at System.Reflection.RuntimeAssembly.InternalLoad(AssemblyName assemblyName, RuntimeAssembly requestingAssembly, StackCrawlMark\u0026 stackMark, Boolean throwOnFileNotFound, AssemblyLoadContext assemblyLoadContext)\r\n   at System.Reflection.Assembly.Load(AssemblyName assemblyRef)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.GetApplicationPartAssemblies(String entryAssemblyName)\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateDefaultParts(String entryAssemblyName)\r\n   at Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.GetApplicationPartManager(IServiceCollection services, IWebHostEnvironment environment)\r\n   at Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(IServiceCollection services)\r\n   at Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllersCore(IServiceCollection services)\r\n   at Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllers(IServiceCollection services)\r\n   at Program.\u003C\u003CMain\u003E$\u003Eg__AddServices|0_3(AppConfig config, \u003C\u003Ec__DisplayClass0_0\u0026 ) in D:\\My-Code\\GitHub\\WhereIsTheTruck\\WhereIsTheTruck.Web.App\\Program.cs:line 84\r\n   at Program.\u003C\u003CMain\u003E$\u003Eg__BuildWebApp|0_0(String[] args) in D:\\My-Code\\GitHub\\WhereIsTheTruck\\WhereIsTheTruck.Web.App\\Program.cs:line 43\r\n   at Program.\u003CMain\u003E$(String[] args) in D:\\My-Code\\GitHub\\WhereIsTheTruck\\WhereIsTheTruck.Web.App\\Program.cs:line 10\r\n\u0060\u0060\u0060\n\n### .NET Version\n\n6.0.202\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85C71zO",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "The issue is that you\u0027re setting the application name to the process name (which is dotnet if you run with \u0060dotnet ...\u0060)\r\nhttps://github.com/NimaAra/WhereIsTheTruck/blob/1e2eae059e59d9618578496f3d529c8e34ddd853/WhereIsTheTruck.Web.App/Program.cs#L36\r\n\r\nTriage: We probably want to have different behavior than relying on \u0060environment.ApplicationName\u0060 when loading the entry assembly.",
        "createdAt": "2022-05-10T22:50:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41578#issuecomment-1122983118"
      },
      {
        "id": "IC_kwDOAQzde85C72LI",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-05-10T22:50:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41578#issuecomment-1122984648"
      },
      {
        "id": "IC_kwDOAQzde85RgNL8",
        "parentId": null,
        "author": "hitman9",
        "content": "Me also facing similar issues for one of the .net 6 api project, any solution fix for this. @NimaAra, @BrennanConroy  ",
        "createdAt": "2022-12-29T15:07:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41578#issuecomment-1367397116"
      },
      {
        "id": "IC_kwDOAQzde85RgOBH",
        "parentId": null,
        "author": "NimaAra",
        "content": "In my case, [THIS](https://github.com/NimaAra/WhereIsTheTruck/issues/1) fixed it.",
        "createdAt": "2022-12-29T15:12:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41578#issuecomment-1367400519"
      },
      {
        "id": "IC_kwDOAQzde85RgOe3",
        "parentId": null,
        "author": "hitman9",
        "content": "@NimaAra, The link is not accessible, how you fixed it. ",
        "createdAt": "2022-12-29T15:15:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41578#issuecomment-1367402423"
      },
      {
        "id": "IC_kwDOAQzde85RgO0w",
        "parentId": null,
        "author": "NimaAra",
        "content": "Removed \u0060builder.Services.AddControllers()\u0060 as well as \u0060app.MapControllers()\u0060.",
        "createdAt": "2022-12-29T15:17:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41578#issuecomment-1367403824"
      },
      {
        "id": "IC_kwDOAQzde85RgQHJ",
        "parentId": null,
        "author": "hitman9",
        "content": "I haven\u0027t added that, i suspecting the application name to process name setting problem might caused it.\r\n",
        "createdAt": "2022-12-29T15:25:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41578#issuecomment-1367409097"
      },
      {
        "id": "IC_kwDOAQzde85lXPB8",
        "parentId": null,
        "author": "VladBullet",
        "content": "Any news on this? I am facing the same issue and none of the links above are working. \r\nPlease, if anybody fixed it, explain how. Thanks :) \r\n@NimaAra @hitman9 @BrennanConroy ",
        "createdAt": "2023-08-31T08:26:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41578#issuecomment-1700589692"
      },
      {
        "id": "IC_kwDOAQzde85lXX3K",
        "parentId": null,
        "author": "NimaAra",
        "content": "Hey @VladBullet,\r\n\r\nI had to unset the \u0060ApplicationName\u0060 and that fixed it for me: \r\n![image](https://github.com/dotnet/aspnetcore/assets/16215744/61db4c4e-b7a5-4033-b0b1-237810149bd1)\r\n",
        "createdAt": "2023-08-31T08:49:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41578#issuecomment-1700625866"
      },
      {
        "id": "IC_kwDOAQzde85lXerg",
        "parentId": null,
        "author": "VladBullet",
        "content": "I wasn\u0027t expecting anybody to answer on this issue.\uD83D\uDE05 \nThanks for the quick reply.\uD83D\uDE0D \nI\u0027ll try your solution.\n\nHappy coding!\n\n*later edit*\nIt worked. My problem was that I got the same error when deploying the app via docker, and it failed on runtime when I would \u0022docker-compose up\u0022. \nYou saved me a couple hours of research. \nNow it works wonderfully. \uD83D\uDC4C\uD83D\uDC4D",
        "createdAt": "2023-08-31T09:07:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41578#issuecomment-1700653792"
      },
      {
        "id": "IC_kwDOAQzde85lXnDI",
        "parentId": null,
        "author": "NimaAra",
        "content": "No problem, good luck and pass it on :-)",
        "createdAt": "2023-08-31T09:28:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41578#issuecomment-1700688072"
      },
      {
        "id": "IC_kwDOAQzde86CdvYy",
        "parentId": null,
        "author": "da1ight",
        "content": "Thank you! you save my time)",
        "createdAt": "2024-06-25T12:42:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41578#issuecomment-2188834354"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85KHA8q",
    "title": "EndpointMetadataApiDescriptionProvider Misses Route Parameters",
    "url": "https://github.com/dotnet/aspnetcore/issues/41773",
    "createdAt": "2022-05-20T16:00:57Z",
    "lastUpdated": "2024-02-07T17:15:13Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\n\u0060EndpointMetadataApiDescriptionProvider\u0060 misses creating \u0060ApiDescriptionParameter\u0060 instances that are defined as \u0060BindingSource.Custom\u0060 or \u0060BindingSource.Special\u0060. As seen [here](../blob/release/6.0/src/Mvc/Mvc.ApiExplorer/src/EndpointMetadataApiDescriptionProvider.cs#L103), \u0060\u0060EndpointMetadataApiDescriptionProvider\u0060\u0060 only considers parameter candidates via the \u0060ParameterInfo\u0060 acquired through Reflection.\r\n\r\nSome \u0060BindingSource.Special\u0060 parameters _should_ be ignored, such as \u0060CancellationToken\u0060. API Versioning defines the \u0060ApiVersion\u0060 as \u0060BindingSource.Special\u0060 because the value can typically come from one or more places (even zero is technically possible). The value of \u0060ApiVersion\u0060 is set and retrieved through \u0060IApiVersioningFeature\u0060.\r\n\r\nThis behavior is a deviation from \u0060DefaultApiDescriptionProvider\u0060, which considers and creates an \u0060ApiParameterDescription\u0060 for route parameters, even if they don\u0027t have a formal \u0060ParameterInfo\u0060 partner (as seen [here](../blob/release/6.0/src/Mvc/Mvc.ApiExplorer/src/DefaultApiDescriptionProvider.cs#L233)).\r\n\r\nDeclaring the formal parameter \u0060ApiVersion version\u0060 will not work because \u0060TryParse\u0060 is delegated to \u0060IApiVersionParser\u0060 so that a developer can opt to change the behavior if they want to. Parsing the value at this point in the pipeline is also too late and affects routing or would result in parsing the value more than once.\r\n\r\nUltimately, \u0060EndpointMetadataApiDescriptionProvider\u0060 should create an \u0060ApiParameterDescription\u0060 for every route parameter in the \u0060RoutePattern\u0060 (e.g. template); regardless of whether there is a corresponding method parameter.\r\n\r\n\u003EIt should be noted that this behavior does **not** affect routing and it only happens when a developer elects to version solely by URL segment.\n\n### Expected Behavior\n\n\u0060EndpointMetadataApiDescriptionProvider\u0060 should have parity with \u0060DefaultApiDescriptionProvider\u0060 wherever possible (obviously modeling binding isn\u0027t available for _Minimal APIs_).\r\n\r\nConsider the following:\r\n\r\n\u0060\u0060\u0060c#\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddEndpointsApiExplorer();\r\nbuilder.Services.AddApiVersioning(options =\u003E options.ApiVersionReader = new UrlSegmentApiVersionReader())\r\n                .AddApiExplorer(options =\u003E options.options.SubstituteApiVersionInUrl = true);\r\n\r\napp.MapGet( \u0022v{version:apiVersion}/weatherforecast/{city}\u0022, () =\u003E\r\n    {\r\n        return Enumerable.Range( 1, 5 ).Select( index =\u003E\r\n            new WeatherForecast\r\n            (\r\n                DateTime.Now.AddDays( index ),\r\n                Random.Shared.Next( -20, 55 ),\r\n                summaries[Random.Shared.Next( summaries.Length )]\r\n            ) );\r\n    } )\r\n   .WithApiVersionSet(app.NewApiVersionSet().HasApiVersion(1.0).Build());\r\n\u0060\u0060\u0060\r\n\r\nThis should produce \u0060ApiDescription.RelativePath\u0060 with \u0060v1/weatherforecast/{city}\u0060, but instead produces \u0060v{version}/weatherforecast/{city}\u0060. Worse still, there is no \u0060ApiParameterDescription\u0060 for \u0060{version}\u0060. API Versioning relies on the existence of the parameter description and substitutes the token in the template with the corresponding API version value.\r\n\r\nThis behavior can be reproduced without API Versioning from a pure API Explorer perspective, but the API will not be reachable since the route parameter wouldn\u0027t be matched.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n6.0.300\n\n### Anything else?\n\nThis was first reported in dotnet/aspnet-api-versioning#830.\r\n\r\nASP.NET Core 6.0\r\n\r\n\u0060\u0060\u0060\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.300\r\n Commit:    8473146e7d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22000\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.300\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.5\r\n  Commit:  70ae3df4a6\r\n\r\n.NET SDKs installed:\r\n  6.0.202 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.203 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.300 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\u0060\u0060\u0060",
    "upvotes": 1,
    "labels": [
      "bug",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85DvdrL",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Triage: We should look at doing something similar to MVC\r\nhttps://github.com/dotnet/aspnetcore/blob/2d2295183b26b98c386d31c29403328e9c1f53ef/src/Mvc/Mvc.ApiExplorer/src/DefaultApiDescriptionProvider.cs#L284\r\nwhere we still set the \u0060ApiParameterDescription\u0060 when there isn\u0027t a parameter in the delegate.\r\n\r\nSecond, we need to think about the \u0060ApiDescription.RelativePath\u0060 part.",
        "createdAt": "2022-05-24T23:04:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41773#issuecomment-1136515787"
      },
      {
        "id": "IC_kwDOAQzde85D0sy-",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "@BrennanConroy I don\u0027t need a date, but will this be patched in 6.0? I need to provide guidance to customers around how to address this situation in the interim.",
        "createdAt": "2022-05-25T22:04:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41773#issuecomment-1137888446"
      },
      {
        "id": "IC_kwDOAQzde85D4ksF",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-05-26T18:51:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41773#issuecomment-1138903813"
      },
      {
        "id": "IC_kwDOAQzde85IuNld",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Ultimately, EndpointMetadataApiDescriptionProvider should create an ApiParameterDescription for every route parameter in the RoutePattern (e.g. template); regardless of whether there is a corresponding method parameter.\r\n\r\nI don\u0027t necessarily agree with this perspective. The way I see it, the method signature should be the source of truth for API annotations about a particular endpoint, not the route parameter.\r\n\r\n@commonsensesoftware Have you looked into leveraging route groups (.NET 7) in the API versioning package at all? It might help alleviate the particular issue here. I\u0027m imagining that calling:\r\n\r\n\u0060\u0060\u0060csharp\r\nApiVersion apiV1 = new ApiVersion(1);\r\n\u0060\u0060\u0060\r\n\r\nWould great a \u0060RouteGroupBuilder\u0060 under the hood that users can attach their mappings to.\r\n\r\ncc: @halter73 ",
        "createdAt": "2022-08-18T23:26:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41773#issuecomment-1220073821"
      },
      {
        "id": "IC_kwDOAQzde85Ixnrk",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "@captainsafia Unfortunately, the source of truth is not the method signature. HTTP _is_ the API. C#, just like any other language, has an impedance mismatch. It\u0027s no different than the incongruence between C# (say - a la EF) and SQL. There are just some things that cannot be expressed in C# because it\u0027s not HTTP.\r\n\r\nAn API version is _special_ in terms of how it matches up in the code. The call site (e.g. method) not necessarily have to be present for the endpoint to be invoked. This is the same as the \u0060CancellationToken\u0060. Every method can support it, regardless of whether you formally declare it. The incongruence, however, can be highlighted in other ways. It\u0027s perfectly acceptable for a HTTP API to accept the query parameter \u0060api-version\u0060 **and** the header \u0060x-api-version\u0060. API Versioning understands this nuance, validates either is specified or both are the same, and resolves a single value that is provided to the bound C# method. Two method arguments are neither required nor wanted.\r\n\r\nAPI authors need to describe their APIs terms of HTTP because that\u0027s how their clients will call them. An author _trusts_ that API Versioning will call the correct endpoint so they may not have any interest in declaring the code parameter because it would never be used. However, a client needs to know which parameters they can specify, which might be more than one (ex: header and query string).\r\n\r\nA route group will not address this specific issue. Grouping constructs are useful and will be integrated into API Versioning, but it won\u0027t help here. As it stands, an \u0060ApiVersion\u0060 parameter can currently only be provided via a \u0060ModelBinder\u0060.  Model binding isn\u0027t supported for _Minimal APIs_, but as I recall there is a new platform hook to address this (offhand, the name escapes me).  Serialization is also impossible because the value doesn\u0027t even have to come from the HTTP request. It\u0027s possible and supported for code to explicitly set the resolved API version at a particular point in the pipeline.\r\n\r\nThere\u0027s really no compelling reason to not have to two flavors of API Explorer be incongruent. This is a violation of [POLA](https://en.wikipedia.org/wiki/Principle_of_least_astonishment). It is completely reasonable that a route parameter can exist that isn\u0027t  defined in the method signature. Furthermore, any unknown route parameter value can always default to using the parameter name defined in the parsed template and assume the value is a \u0060string\u0060 if the platform cannot determine otherwise.",
        "createdAt": "2022-08-19T18:12:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41773#issuecomment-1220967140"
      },
      {
        "id": "IC_kwDOAQzde85MAWsT",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:17:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41773#issuecomment-1275161363"
      },
      {
        "id": "IC_kwDOAQzde85zL9bM",
        "parentId": null,
        "author": "MackinnonBuck",
        "content": "@adityamandaleeka, this was in the .NET 8 Planning milestone but it\u0027s in the servicing project board. I\u0027ve removed the milestone so your team can decide where this should go.",
        "createdAt": "2024-02-07T17:15:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41773#issuecomment-1932515020"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Kdaw5",
    "title": "Non-conforming container support in Minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/41863",
    "createdAt": "2022-05-26T07:49:36Z",
    "lastUpdated": "2024-05-22T07:34:45Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI\u0027ve been trying to write documentation on how Simple Injector users can integrate with the new ASP.NET Core Minimal API model, but it seems the injection of services into Minimal API map delegates is tight to the built-in DI abstraction, without the existence of an abstraction of some sort (such as MVC\u0027s \u0060IControllerActivator\u0060) to replace to hook into the pipeline.\r\n\r\n[The documentation](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0#explicit-parameter-binding) shows the following example where \u0060Service\u0060 is injected into the delegate and resolved from the configuration system:\r\n\r\n\u0060\u0060\u0060 c#\r\napp.MapGet(\u0022/{id}\u0022, ([FromRoute] int id,\r\n                     [FromQuery(Name = \u0022p\u0022)] int page,\r\n                     [FromServices] Service service,\r\n                     [FromHeader(Name = \u0022Content-Type\u0022)] string contentType) \r\n                     =\u003E {});\r\n\u0060\u0060\u0060\r\n\r\n## Context\r\n\r\nSimple Injector is a so-called \u0022non-conforming\u0022 DI Container, meaning that it doesn\u0027t replace the built-in DI Container, but instead lives side-by-side the built-in container. Where the built-in container is used to resolve framework and third-party components, Simple Injector is used by the application developer to resolve their application components. This concept of non-conforming containers should be well-known within Microsoft, for instance from former discussions such as https://github.com/dotnet/aspnetcore/issues/30115, https://github.com/dotnet/aspnetcore/issues/29194, https://github.com/dotnet/aspnetcore/issues/28957, https://github.com/dotnet/aspnetcore/issues/14585, https://github.com/dotnet/aspnetcore/issues/8886 and https://github.com/aspnet/DependencyInjection/issues/334.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nThe introduction of an interception point that would allow non-conforming containers (and other interested parties) to intercept the creation of dependencies that are injected into Minimal API maps.",
    "upvotes": 2,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85D4kw2",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-05-26T18:51:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41863#issuecomment-1138904118"
      },
      {
        "id": "IC_kwDOAQzde85D76lJ",
        "parentId": null,
        "author": "dotnetjunkie",
        "content": "I\u0027d like @davidfowl to chime in on this one.\r\n\r\nI might be overlooking an existing extension point here that can be used to achieve this. David, do you know of any extensibility point that we can use to achieve this? Your feedback is appreciated.\r\n\r\nCheers",
        "createdAt": "2022-05-27T16:33:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41863#issuecomment-1139779913"
      },
      {
        "id": "IC_kwDOAQzde85EDGUE",
        "parentId": null,
        "author": "davidfowl",
        "content": "Minimal APIs are very efficient in the way code is generated to fill in parameter. There\u0027s no abstraction and we basically generate the code you would have hand rolled yourself to bind each of the known parameter types. There are a few paths forward here:\r\n- Simple injector would support a new type for binding from it\u0027s container. This type would can implement \u0060BindAsync\u0060 on a type and support .e.g:\r\n  \u0060\u0060\u0060C#\r\n  class FromSimpleInjector\u003CT\u003E\r\n  {\r\n      public FromSimpleInjector(T service) =\u003E Service = service;\r\n      public T Service { get; }\r\n      \r\n      // This will get called when the parameter is bound\r\n      public static FromSimpleInjector\u003CT\u003E BindAsync(HttpContext context) =\u003E new(context.RequestServices.GetRequiredService\u003CContainer\u003E().Resolve\u003CT\u003E());\r\n  }\r\n  \u0060\u0060\u0060\r\n- In .NET 7 there\u0027s route handler filters and https://github.com/dotnet/aspnetcore/issues/35489 that will make this a little smoother",
        "createdAt": "2022-05-31T04:45:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41863#issuecomment-1141662980"
      },
      {
        "id": "IC_kwDOAQzde85MAWtq",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:17:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41863#issuecomment-1275161450"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85LpRH1",
    "title": "optimize the startup name in the project template",
    "url": "https://github.com/dotnet/aspnetcore/issues/42162",
    "createdAt": "2022-06-13T08:45:30Z",
    "lastUpdated": "2023-06-20T23:20:03Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nhttps://github.com/dotnet/aspnetcore/blob/da6cdcbd5dc75b695cee36d47a22e1399cbea89e/src/ProjectTemplates/Web.ProjectTemplates/content/EmptyWeb-CSharp/Properties/launchSettings.json#L19-L47\r\n\n### Describe the solution you\u0027d like\n\nsuggest renaming it to project name \u002B protocol name,such as \u0027ProjectName(http)\u0027 and \u0027ProjectName(https)\u0027\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "feature-templates",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85EyuPI",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "Thanks for contacting us. This is not something we plan to do. Mainly because VS shows the startup project name in the toolbar already.",
        "createdAt": "2022-06-13T16:41:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42162#issuecomment-1154147272"
      },
      {
        "id": "IC_kwDOAQzde85Ez9oe",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "We\u0027d like to avoid the names being long here so that they\u0027re easier to invoke when using the dotnet CLI too, e.g. \u0060dotnet run -lp https\u0060.\r\n\r\nFeel free to log feedback tickets in Visual Studio about how the launch settings are visualized in the toolbar, etc.",
        "createdAt": "2022-06-13T21:48:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42162#issuecomment-1154472478"
      },
      {
        "id": "IC_kwDOAQzde85E0PNm",
        "parentId": null,
        "author": "Varorbc",
        "content": "Let\u0027s forget about the name of the startup item in vs. let\u0027s discuss the name in the launch settings of the startup item. In the past, it can be said that it was all the program name, proxy server or other names, generally the name of the application. Now it is replaced by the name of the network protocol, which is easier to start, but more difficult to understand",
        "createdAt": "2022-06-13T23:24:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42162#issuecomment-1154544486"
      },
      {
        "id": "IC_kwDOAQzde85E0qw8",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "They\u0027ve always been free-form names though. The name of the launch profile happening to match the project name doesn\u0027t actually ensure it launches the project at all. I\u0027m happy to leave this issue open to allow for more feedback as part of these changes going out in a preview and see if a suitable suggestion that considers all the places this name is displayed and specified is a better trade-off.",
        "createdAt": "2022-06-14T03:03:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42162#issuecomment-1154657340"
      },
      {
        "id": "IC_kwDOAQzde85E0qyk",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-06-14T03:04:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42162#issuecomment-1154657444"
      },
      {
        "id": "IC_kwDOAQzde85HC8uC",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-07-21T21:31:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42162#issuecomment-1191955330"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Lr3lw",
    "title": "Introduce support for defining Authorization policies via Configuration",
    "url": "https://github.com/dotnet/aspnetcore/issues/42172",
    "createdAt": "2022-06-13T18:19:09Z",
    "lastUpdated": "2023-06-02T00:52:25Z",
    "body": "Spin-off of #39855 focusing on addition of top-level authorization configuration API.\r\n\r\nExample matching \u0060Authorization\u0060 changes to consider, allowing sharing of policies, etc.:\r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Authentication.AddJwtBearer();\r\nbuilder.Authorization.AddPolicy(\u0022HasProtectedAccess\u0022, policy =\u003E\r\n    policy.RequireClaim(\u0022scope\u0022, \u0022myapi:protected-access\u0022));\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022/hello\u0022, () =\u003E \u0022Hello!\u0022);\r\n\r\napp.MapGet(\u0022/hello-protected\u0022, () =\u003E \u0022Hello, you are authorized to see this!\u0022)\r\n    .RequireAuthorization(\u0022HasProtectedAccess\u0022);\r\n\r\napp.MapGet(\u0022/hello-also-protected\u0022, () =\u003E \u0022Hello, you authorized to see this to!\u0022)\r\n    .RequireAuthorization(\u0022HasProtectedAccess\u0022);\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\nThe \u0060WebApplicationBuilder.Authorization\u0060 property is typed as \u0060AuthorizationOptions\u0060 allowing simple creation of policies and configuration of the default and fallback policies:\r\n\r\n\u0060\u0060\u0060csharp\r\nbuilder.Authorization.AddPolicy(\u0022HasProtectedAccess\u0022, policy =\u003E policy.RequireClaim(\u0022scope\u0022, \u0022myapi:protected-access\u0022));\r\nbuilder.Authorization.DefaultPolicy = builder.Authorization.GetPolicy(\u0022HasProtectedAccess\u0022);\r\n\r\n// Consider new methods to enable easily setting default/fallback policies by name\r\nbuilder.Authorization.SetDefaultPolicy(\u0022HasProtectedAccess\u0022);\r\nbuilder.Authorization.SetFallbackPolicy(\u0022HasProtectedAccess\u0022);\r\n\u0060\u0060\u0060 \r\n\r\nThe \u0060WebApplicationBuilder\u0060 would register an \u0060IConfigureOptions\u003CAuthorizationOptions\u003E\u0060 in the services collection with a delegate that applies the settings.\r\n\r\nNote this suggestion has a fundamental issue in that the \u0060AuthorizationOptions\u0060 isn\u0027t designed to be mutated in this way, rather it should be configured via a callback registered in DI so that it runs at the appropriate time during app startup and composes with other code that wishes to configure it.\r\n\r\nPerhaps instead the \u0060Authentication\u0060 property should also read from configuration for authorization settings, and the \u0060Authorization\u0060 property would be a new type that simply provides easy access to adding a configuration delegate, e.g.:\r\n\r\n\u0060\u0060\u0060jsonc\r\n{\r\n  \u0022Authorization\u0022: {\r\n    \u0022DefaultPolicy\u0022: \u0022HasProtectedAccess\u0022,\r\n    \u0022FallbackPolicy\u0022: \u0022\u0022,\r\n    \u0022InvokeHandlersAfterFailure\u0022: true,\r\n    \u0022Policies\u0022: {\r\n      \u0022HasProtectedAccess\u0022: {\r\n        \u0022Claims\u0022: [\r\n          { \u0022scope\u0022 : \u0022myapi:protected-access\u0022 }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060csharp\r\nbuilder.Authentication.AddJwtBearer();\r\nbuilder.Authorization.Configure(authz =\u003E\r\n{\r\n    // Following is the code-based equivalent of config above\r\n    authz.AddPolicy(\u0022HasProtectedAccess\u0022, policy =\u003E policy.RequireClaim(\u0022scope\u0022, \u0022myapi:protected-access\u0022));\r\n    authz.DefaultPolicy = authz.GetPolicy(\u0022HasProtectedAccess\u0022);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nSome other potential example policies as defined via configuration:\r\n\r\n\u0060\u0060\u0060jsonc\r\n{\r\n  \u0022Authorization\u0022: {\r\n    \u0022DefaultPolicy\u0022: \u0022HasProtectedAccess\u0022,\r\n    \u0022Policies\u0022: {\r\n      \u0022AuthenticatedUsers\u0022: {\r\n        \u0022AuthenticationRequired\u0022: true\r\n      },\r\n      \u0022Employees\u0022: {\r\n        \u0022AuthenticationRequired\u0022: true,\r\n        \u0022Roles\u0022: [ \u0022Employees\u0022 ]\r\n      },\r\n      \u0022OnlyHomers\u0022: {\r\n        \u0022AuthenticationRequired\u0022: true,\r\n        \u0022UserName\u0022: \u0022Homer\u0022\r\n      },\r\n      \u0022ApiClients\u0022: {\r\n        \u0022AuthenticationRequired\u0022: true,\r\n        // Any unrecognized properties are auto-mapped as claims perhaps?\r\n        \u0022scope\u0022: [ \u0022myapi:read\u0022, \u0022myapi:protected-access\u0022 ]\r\n      }\r\n    }\r\n  }\r\n}\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "area-auth",
      "feature-minimal-hosting",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85Ez80Z",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "FYI @HaoK @Tratcher @davidfowl @captainsafia @jcjiang @blowdart ",
        "createdAt": "2022-06-13T21:44:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1154469145"
      },
      {
        "id": "IC_kwDOAQzde85Ez817",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-06-13T21:44:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1154469243"
      },
      {
        "id": "IC_kwDOAQzde85Ez_Bb",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Perhaps instead the Authentication property should also read from configuration for authorization settings, and the Authorization property would be a new type that simply provides easy access to adding a configuration delegate, e.g.:\r\n\r\nI\u0027m a fan of this approach:\r\n\r\n- It\u0027s consistent with what we do for \u0060Authentication\u0060 and makes it easier for users to reason about the mental model here.\r\n- It provides us with a way to examine the authorization config for an application globally, which will help with some of the details in https://github.com/dotnet/aspnetcore/issues/39761 as I\u0027ve been discovering.\r\n\r\nI\u0027m not aware of any implementation complexities that make the options-from-config approach not viable for authorization but @HaoK might be able to add some color here.",
        "createdAt": "2022-06-13T21:55:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1154478171"
      },
      {
        "id": "IC_kwDOAQzde85E0B_c",
        "parentId": null,
        "author": "HaoK",
        "content": "Yeah config binding seems the cleanest for the properties (everything that\u0027s not a policy).  Directly configuring an instance of AuthorizationOptions off of the builder seems more trouble than what\u0027s it worth.  If you really want something like that, maybe just have an alternate dictionary of named policies, and settings, which you use in a regular options configuration of AuthorizationOptions, basically an AuthorizationOptionsBuilder property would be the analogy here.\r\n\r\nIn regards to authZ policies in config.  Personally I would rather define that in code rather than muck around with json but seems ok as long as we don\u0027t go too insane with what requirements we support.  We can certainly start with seeing what config definition of some simple policies look like, requiring the presence of a specific claim/role seems reasonably easy.  \r\n",
        "createdAt": "2022-06-13T22:09:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1154490332"
      },
      {
        "id": "IC_kwDOAQzde85E0dgN",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "Ok so the feature would be \u0060IServiceCollection.AddAuthorization()\u0060 will now also register an \u0060IConfigureOptions\u003CAuthorizationOptions\u003E\u0060 that enables the configuration of \u0060AuthorizationOptions\u0060 including defining policies from configuration.\r\n\r\n~A new property, \u0060WebApplicationBuilder.Authorization\u0060 will be added that enables registering custom \u0060Action\u003CAuthorizationOptions\u003E\u0060 configuration delegates that run in addition to the one added by \u0060WebApplicationBuilder.Authentication\u0060, essentially an alias for \u0060builder.Services.Configure(Action\u003CAuthorizationOptions\u003E configure)\u0060.~\r\n\r\nRegarding the AuthZ policy configuration binding support, here\u0027s a strawman:\r\n- \u0060DenyAnonymousAuthorizationRequirement\u0060\r\n    Configuration property name \u0060RequireAuthenticatedUsers\u0060. Supports a single boolean value.\r\n    \u0060\u0060\u0060json\r\n    \u0022PolicyName\u0022: {\r\n        \u0022RequireAuthenticatedUsers\u0022: true\r\n    },\r\n    \u0060\u0060\u0060\r\n- \u0060RolesAuthorizationRequirement\u0060\r\n    Configuration property name \u0060Roles\u0060. Supports a single string value **OR** an array of string values (i.e. it looks for configuration keys like \u0060Authorization.PolicyName.Roles.0\u0060, \u0060Authorization.PolicyName.Roles.1\u0060, etc.).\r\n    \u0060\u0060\u0060json\r\n    \u0022PolicyName1\u0022: {\r\n        \u0022Roles\u0022: [ \u0022RoleName1\u0022, \u0022RoleName2\u0022 ]\r\n    },\r\n    \u0022PolicyName2\u0022: {\r\n        \u0022Roles\u0022: \u0022SingleRole\u0022\r\n    },\r\n    \u0060\u0060\u0060\r\n- \u0060ClaimsAuthorizationRequirement\u0060\r\n    Configuration property name \u0060Claims\u0060. Supports an object where property names are claim types mapped to \u0060ClaimsAuthorizationRequirement.ClaimType\u0060 and property values are a single string value **OR** an array of string values which are mapped to \u0060ClaimsAuthorizationRequirement.AllowedValues\u0060.\r\n    \u0060\u0060\u0060json\r\n    \u0022PolicyName1\u0022: {\r\n        \u0022Claims\u0022: {\r\n            \u0022scope\u0022: [ \u0022scope1\u0022, \u0022scope2\u0022, \u0022scope3\u0022 ],\r\n            \u0022otherClaim\u0022: \u0022claim value\u0022,\r\n        }\r\n    },\r\n    \u0060\u0060\u0060\r\n- \u0060NameAuthorizationRequirement\u0060\r\n    Configuration property name \u0060RequiredName\u0060. Supports a single string value\r\n    \u0060\u0060\u0060json\r\n    \u0022PolicyName\u0022: {\r\n        \u0022RequiredName\u0022: \u0022SuperAdminUser\u0022\r\n    },\r\n    \u0060\u0060\u0060",
        "createdAt": "2022-06-14T01:08:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1154603021"
      },
      {
        "id": "IC_kwDOAQzde85E0nY5",
        "parentId": null,
        "author": "davidfowl",
        "content": "Does this really add much over the call to AddAuthorization call?",
        "createdAt": "2022-06-14T02:35:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1154643513"
      },
      {
        "id": "IC_kwDOAQzde85E0p0e",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "\u003E Does this really add much over the call to AddAuthorization call?\r\n\r\nThe top-level \u0060WebApplicationBuilder.Authorization\u0060 property doesn\u0027t no, we could not do that and just focus on the configuration binding aspect instead.",
        "createdAt": "2022-06-14T02:55:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1154653470"
      },
      {
        "id": "IC_kwDOAQzde85E0_gO",
        "parentId": null,
        "author": "HaoK",
        "content": "\u002B1 on just focusing on the configuration binding ",
        "createdAt": "2022-06-14T05:45:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1154742286"
      },
      {
        "id": "IC_kwDOAQzde85E20Qb",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "Removed the proposed API addition.",
        "createdAt": "2022-06-14T13:55:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1155220507"
      },
      {
        "id": "IC_kwDOAQzde85E3BM4",
        "parentId": null,
        "author": "captainsafia",
        "content": "Assuming it\u0027s just config work, the only public API that we might need is an \u0060IAuthorizationConfigProvider\u0060 interface for implementing getters for the \u0060Authorization\u0060 config and a \u0060GetPolicyByName\u0060 extension method for resolving individual policies from the config. The options implementations can likely remain internal.\r\n\r\n\u0060\u0060\u0060csharp\r\nnamespace Microsoft.AspNetCore.Authorization;\r\n\r\ninterface IAuthorizationConfigurationProvider\r\n{\r\n  IConfiguration AuthorizationConfiguration { get; }\r\n}\r\n\r\npublic static class AuthorizationConfigurationProviderExtensions\r\n{\r\n  public static IConfiguration GetAuthorizationPolicyByName(\r\n    this IAuthorizationConfigurationProvider provider,\r\n    string policyName)\r\n}\r\n\u0060\u0060\u0060\r\n\r\nEDIT: actually no extension method needed. The following should suffice:\r\n\r\n\u0060\u0060\u0060csharp\r\nnamespace Microsoft.AspNetCore.Authorization;\r\n\r\ninterface IAuthorizationConfigurationProvider\r\n{\r\n  IConfiguration AuthorizationConfiguration { get; }\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2022-06-14T14:30:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1155273528"
      },
      {
        "id": "IC_kwDOAQzde85E4Ruw",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "@HaoK any thoughts on the [strawman binding rules](https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1154603021)?",
        "createdAt": "2022-06-14T18:56:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1155603376"
      },
      {
        "id": "IC_kwDOAQzde85E4fwA",
        "parentId": null,
        "author": "HaoK",
        "content": "What do we think about doing something spicier to make this extensible.  I was thinking about how we\u0027d implement this, and that lead me to something like the following schema instead, with a similar pluggable pattern we could use for authN as well for schemes.\r\n\r\n\u0060\u0060\u0060c#\r\n{ \u0022Policies\u0022: // Master list of named polices\r\n   { \u0022\u003CpolicyName\u003E\u0022 : // policyName : [list of requirements] all instances must be met for a success\r\n      [  \r\n          // General schema for a requirement, its identifier (for dispatching to the right factory, and its config data)\r\n          \u0022\u003CrequirementIdentifier\u003E\u0022 : {\r\n                // Arbitrary config data that gets passed to the requirement to initialize itself\r\n          },\r\n          // Examples of instances of our built in requirements\r\n          \u0022RequireAuthenticatedUsers\u0022 : { }, // DenyAnonymous takes no data\r\n          \u0022Roles\u0022 : {\r\n              \u0022AllowedRoles\u0022 : [ \u0022\u003Crole1\u003E\u0022 , \u0022\u003Crole2\u003E\u0022] // Maps directly to AllowedRoles property on requirement \r\n           }\r\n          \u0022Claim\u0022 : {\r\n               \u0022ClaimType\u0022: \u0022\u003CrequiredClaimType\u003E\u0022,\r\n               \u0022AllowedValues\u0022: [ \u0022\u003Cvalue1\u003E\u0022, \u0022\u003Cvalue2\u003E\u0022 ] // must match one of these if present.\r\n          }\r\n      ]\r\n   }\r\n}\r\n\r\n// We register our build in requirements and have them implement the factory to parse the config into instances\r\npublic interface IConfigurationRequirementRegistry {\r\n     // Hopefully we can let the factory use things in DI to create the requirements?\r\n     public void Register\u003CIConfigurationAuthorizationRequirementFactory\u003E(string requirementIdentifier) \r\n}\r\n\r\npublic interface IConfigurationAuthorizationRequirementFactory {\r\n       public IAuthorizationRequirement Create(IConfiguration configData); // Given the config data for a requirement, knows how create an instance\r\n}\r\n\r\n// Analog on the authN side could be IConfigurationAuthenticationSchemeRegistry / IConfigurationAuthenticationSchemeFactory or something which also would be passed something like:\r\n\r\n\u0022\u003CschemeName\u003E\u0022 : {\r\n    \u0022\u003CschemeIdentifer\u003E\u0022 : // i.e. \u0022Jwt | Cookie | Certificate\u0022, Extensible string -\u003E factory registration\r\n       {\r\n        // \u003Cscheme configuration data\r\n       }\r\n}\r\n\r\n\u0060\u0060\u0060\r\n\r\n\r\n\r\n",
        "createdAt": "2022-06-14T20:05:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1155660800"
      },
      {
        "id": "IC_kwDOAQzde85E4sM0",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "@HaoK my first thought is: wow, that\u0027s a lot. But I certainly appreciate that this kind of configuration extensibility is not uncommon at all, although I wonder if we can reduce by a couple of levels?\r\n\r\n- Why do the policies have to be an array rather than named objects (aka a dictionary)? You can\u0027t add two policies with the same name anyway so structuring it as dictionary would remove a layer of nesting.\r\n- It would need to support multiple claims in the list of requirements right? Your proposal seems as though it\u0027s limited to a single claim in the requirements list.\r\n- What was the reasoning to having a single nested object property called \u0022Requirements\u0022 instead of just having the policy itself be an array? Schema extensibility?\r\n- Similar question but for Roles/AllowedRoles. Are you allowing space for more options under Roles?",
        "createdAt": "2022-06-14T21:04:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1155711796"
      },
      {
        "id": "IC_kwDOAQzde85E4wvs",
        "parentId": null,
        "author": "HaoK",
        "content": "I was mostly thinking about the extensibility model, so I didn\u0027t put too much thought into the exact shape of the schema.\r\n\r\n\u003E Why do the policies have to be an array rather than named objects (aka a dictionary)? You can\u0027t add two policies with the same name anyway so structuring it as dictionary would remove a layer of nesting.\r\n\r\nGood point, the names are required to be unique so we can get rid of that outer array, i\u0027ll edit that above to remove\r\n\r\n\u003E It would need to support multiple claims in the list of requirements right? Your proposal seems as though it\u0027s limited to a single claim in the requirements list.\r\n\u003E What was the reasoning to having a single nested object property called \u0022Requirements\u0022 instead of just having the policy itself be an array? Schema extensibility?\r\n\r\nI was just demonstrating examples of what some requirement would look like, you can have duplicate requirements of the same instance.  The requirements can be dropped, with the downside of not leaving space if we ever want to add new metadata to \u0060AuthorizationPolicy\u0060 instances (although we could just add logic that branched on if the value was an array or a subobject in the future, so seems fine)\r\n\r\n\u0060\u0060\u0060\r\n     // \u003CPolicyName\u003E : \u003CList of requirements\u003E, all instances must be satisfied to succeed a policy\r\n     { \u0022exampleAdminPolicy\u0022 : \r\n          [ \r\n            \u0022RequireAuthenticatedUsers\u0022 : { }, // DenyAnonymous takes no data\r\n            \u0022Roles\u0022 : {\r\n                \u0022AllowedRoles\u0022 : [ \u0022Admin\u0022 ] // Maps directly to AllowedRoles property on requirement \r\n             },\r\n            \u0022Claim\u0022 : {\r\n                 \u0022ClaimType\u0022: \u0022someOrgClaim\u0022,\r\n                 \u0022AllowedValues\u0022: [ \u0022aspnet\u0022, \u0022devdiv\u0022 ] // must match one of these if present.\r\n            },\r\n            \u0022Claim\u0022 : {\r\n                 \u0022ClaimType\u0022: \u0022empId\u0022 // Must be an employee\r\n            },\r\n            \u0022CustomAdminRequirement\u0022: // Some custom requirement they register\r\n            {\r\n                  \u0022authenticatorRequired\u0022 : \u0022true\u0022,\r\n                  \u0022lastTfaVerifiedDate\u0022 : \u00225/14/2022\u0022\r\n                  \u0022passwordComplexityCheck\u0022 : \u0022true\u0022\r\n           }\r\n        ]\r\n     }\r\n\u0060\u0060\u0060\r\n\r\nBasically this lets each policy have space to store all of the custom data that any requirements would ever need, as they get passed the section underneath the requirement Identifier\r\n\r\n\u0060\u0060\u0060\r\n                    \u0022\u003CrequirementIdentifier\u003E\u0022 : {\r\n                          // Arbitrary config data that gets passed to the requirement to initialize itself\r\n                    },\r\n\u0060\u0060\u0060\r\n\r\nWe can certainly make our built in requirements have shorter/more concise config, I was just doing this mechanically to match the types at this point (basically viewing our requirements no differently than a 3rd party requirement that attempted to use the config binder even), our requirements could be implemented basically be \u0060configSection.Get\u003CTRequirement\u003E()\u0060 with this schema since we only have very simple requirements with strings",
        "createdAt": "2022-06-14T21:30:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1155730412"
      },
      {
        "id": "IC_kwDOAQzde85E42Q_",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "@HaoK yep that makes sense and your updated example looks reasonable.",
        "createdAt": "2022-06-14T22:01:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1155753023"
      },
      {
        "id": "IC_kwDOAQzde85E5MSN",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "@HaoK actually your example is invalid JSON now I think, as you have an array that contains object notation under the \u0022exampleAdminPolicy\u0022. I think we\u0027d likely support defining schemes for policies too yes?\r\n\r\nSo revised to this?\r\n\r\n\u0060\u0060\u0060jsonc\r\n{\r\n  \u0022Authorization\u0022: {\r\n    \u0022DefaultPolicy\u0022: \u0022HasProtectedAccess\u0022,\r\n    \u0022Policies\u0022: {\r\n      // Each property on the Policies object is a named policy comprised of an array of requirement objects\r\n      \u0022AuthenticatedUsers\u0022: [\r\n        { \u0022RequireAuthenticatedUsers\u0022 : {} } // DenyAnonymous takes no data, could \u0027null\u0027 too\r\n      ],\r\n      \u0022Employees\u0022: [\r\n        { \u0022Schemes\u0022 : { \u0022AllowedSchemes\u0022: [ \u0022Bearer\u0022 ] } },\r\n        { \u0022RequireAuthenticatedUsers\u0022 : {} },\r\n        { \u0022Roles\u0022: { \u0022AllowedRoles\u0022: [ \u0022Employees\u0022 ] } }\r\n      ],\r\n      \u0022OnlyHomers\u0022: [\r\n        { \u0022RequireAuthenticatedUsers\u0022 : {} },\r\n        { \u0022RequiresUserName\u0022 : { \u0022UserName\u0022: \u0022Homer\u0022 } }\r\n      ],\r\n      \u0022ApiClients\u0022: [\r\n        { \u0022RequireAuthenticatedUsers\u0022 : {} },\r\n        { \u0022Claim\u0022: { \u0022ClaimType\u0022: \u0022scope\u0022, \u0022AllowedValues\u0022: [ \u0022myapi:read\u0022, \u0022myapi:protected-access\u0022 ] } }\r\n      ],\r\n      \u0022exampleAdminPolicy\u0022: [\r\n        { \u0022RequireAuthenticatedUsers\u0022 : {} },\r\n        { \u0022Roles\u0022: { \u0022AllowedRoles\u0022: [ \u0022Admin\u0022 ] } }, // Maps directly to AllowedRoles property on requirement \r\n        { \u0022Claim\u0022: { \u0022ClaimType\u0022: \u0022someOrgClaim\u0022, \u0022AllowedValues\u0022: [ \u0022aspnet\u0022, \u0022devdiv\u0022 ] } }, // Must match one of these if present\r\n        { \u0022Claim\u0022: { \u0022ClaimType\u0022: \u0022empId\u0022 } }, // Must be an employee\r\n        { \u0022CustomAdminRequirement\u0022:  // Some custom requirement they register\r\n            {\r\n                \u0022authenticatorRequired\u0022 : \u0022true\u0022,\r\n                \u0022lastTfaVerifiedDate\u0022 : \u00225/14/2022\u0022,\r\n                \u0022passwordComplexityCheck\u0022 : \u0022true\u0022\r\n           }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2022-06-15T00:30:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1155843213"
      },
      {
        "id": "IC_kwDOAQzde85E5YJr",
        "parentId": null,
        "author": "HaoK",
        "content": "Wait, you can\u0027t have an array of json objects?  Really?\r\n\r\nWell as soon as we are setting Schemes on Policies, then I\u0027d argue we want it to be like I had before with Requirements/Schemes being top level: so for that employees policy\r\n\r\n\u0060\u0060\u0060\r\n      \u0022Employees\u0022: {\r\n        \u0022AuthenticationSchemes\u0022 : [ \u0022Bearer\u0022 ],\r\n        \u0022Requirements\u0022 : [\r\n           { \u0022RequireAuthenticatedUsers\u0022 : {} },\r\n           { \u0022Roles\u0022: { \u0022AllowedRoles\u0022: [ \u0022Employees\u0022 ] } }\r\n         ],\r\n     }\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2022-06-15T02:01:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1155891819"
      },
      {
        "id": "IC_kwDOAQzde85E5asd",
        "parentId": null,
        "author": "HaoK",
        "content": "But it feels a bit icky to mix authenticationSchemes in with the policies definitions, because now if you want to have a slightly different Employee Cookie policy, you have to duplicate everything and just say \u0022Cookies\u0022 for the scheme.  \r\n\r\n\u0060[Authorize(AuthenticationSchemes = \u0022Bearer\u0022, Policy = \u0022Employees\u0022)]\u0060\r\n\u0060[Authorize(AuthenticationSchemes = \u0022Cookie\u0022, Policy = \u0022Employees\u0022)]\u0060\r\n\r\nvs\r\n\r\n\u0060[Authorize(\u0022Cookie-Employees\u0022)]\u0060\r\n\u0060[Authorize(\u0022Bearer-Employees\u0022)]\u0060\r\n\r\nBut that\u0027s already an issue today ",
        "createdAt": "2022-06-15T02:17:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1155902237"
      },
      {
        "id": "IC_kwDOAQzde85E8xet",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "A (fundamental?) issue that\u0027s been raised about this approach is that you can\u0027t define a policy in configuration that itself relies on values from configuration, as configuration is strictly statically defined name/value pairs with no ability to statically reference values from elsewhere.\r\n\r\nE.g. if one wanted to create a policy with a claim requirement for \u0022iss\u0022 (Issuer) that matches the configuration of the JWT scheme\u0027s issuer, which is also declared in configuration you\u0027d be forced to duplicate values in configuration:\r\n\r\n\u0060\u0060\u0060jsonc\r\n{\r\n  \u0022Authentication\u0022: {\r\n    \u0022Schemes\u0022: {\r\n      \u0022Bearer\u0022: {\r\n        \u0022Issuer\u0022: \u0022SuperDuperIdP\u0022 // \u003C-- Specified here\r\n      }\r\n    }\r\n  },\r\n  \u0022Authorization\u0022: {\r\n    \u0022DefaultPolicy\u0022: \u0022AuthenticatedUsers\u0022,\r\n    \u0022Policies\u0022: {\r\n      \u0022AuthenticatedUsers\u0022: [\r\n        // DenyAnonymousAuthorizationRequirement\r\n        \u0022RequireAuthenticatedUsers\u0022,\r\n        // ClaimsAuthorizationRequirement\r\n        {\r\n          \u0022Claims\u0022: {\r\n            \u0022ClaimType\u0022: \u0022iss\u0022,\r\n            \u0022AllowedValues\u0022: [ \u0022SuperDuperIdP\u0022 ] // \u003C-- Specified *again* here\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2022-06-15T18:12:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1156781997"
      },
      {
        "id": "IC_kwDOAQzde85FA2Qb",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "This proposal obviously has some issues that make it unpragmatic to include in .NET 7, so I\u0027ve spun-off #42235 to revisit the idea of a more top-level API (\u0060builder.Authorization\u0060) for setting up app-wide AuthZ options without needing to resort to \u0060builder.Services.AddAuthorization()\u0060 or \u0060builder.Services.Configure\u003CAuthorizationOptions\u003E()\u0060.",
        "createdAt": "2022-06-16T16:06:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1157850139"
      },
      {
        "id": "IC_kwDOAQzde85FA2Xc",
        "parentId": null,
        "author": "HaoK",
        "content": "RE the duplication of values, this seems more like a general issue for configuration.  We can certainly address that by introducing our own abstraction/layer to support configuration variables or something if this is really a blocker we need to solve.\r\n\r\nAdd some kind of notion of config variables in some special section:\r\n\r\n\u0060\u0060\u0060\r\n{ \u0022variables\u0022 : \r\n {\r\n     \u0022$idp$\u0022 = \u0022superDuperIdP\u0022\r\n     \u0022#var#\u0022 = \u0022whatever\u0022\r\n }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nHave our authorization config parsing system wrap IConfiguration to replace the final Get string calls to replace any variables using this section which allows folks to define this.  But this seems like a feature for config to add to me",
        "createdAt": "2022-06-16T16:06:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1157850588"
      },
      {
        "id": "IC_kwDOAQzde85TxZge",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "Think we should just close or move this to backlog at this point.",
        "createdAt": "2023-01-26T18:56:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1405458462"
      },
      {
        "id": "IC_kwDOAQzde85Tx51h",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-01-26T20:10:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42172#issuecomment-1405590881"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Lwo3t",
    "title": "Universal way to get metadata about endpoint parameters.",
    "url": "https://github.com/dotnet/aspnetcore/issues/42184",
    "createdAt": "2022-06-14T16:14:29Z",
    "lastUpdated": "2023-06-23T01:58:23Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am not sure whether this [issue](https://github.com/dotnet/aspnetcore/issues/41421) is about the same problem I have.\r\n\r\nSee also [my question](https://stackoverflow.com/questions/72618163/what-is-the-most-universal-way-to-get-metadata-about-defined-endpoint-parameters) on Stack Overflow.\r\n\r\nI need a universal way to get metadata about endpoint parameters. It\u0027s not too difficult for controller actions but not that simple for the endpoints with delegate implementations.\n\n### Describe the solution you\u0027d like\n\nWell, I expect that Endpoint\u0027s metadata contains \u0060Parameters\u0060 property like \u0060ControllerActionDescription\u0060 does.\n\n### Additional context\n\nSee also [my question](https://stackoverflow.com/questions/72618163/what-is-the-most-universal-way-to-get-metadata-about-defined-endpoint-parameters) on Stack Overflow.",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85E5zGQ",
        "parentId": null,
        "author": "davidfowl",
        "content": "I don\u0027t see a why attached to that question, what are you trying to do?",
        "createdAt": "2022-06-15T05:24:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42184#issuecomment-1156002192"
      },
      {
        "id": "IC_kwDOAQzde85E59XT",
        "parentId": null,
        "author": "voroninp",
        "content": "@davidfowl , I am trying to check that query parameter is defined by the endpoint.\r\n\r\nI have an authorization handler which checks some requirements against entity from DB, for that it needs to resolve the id of the entity: from resource, from route data, from query parameter. For the latter one I want the resolution take place only in case the parameter is defined in code.",
        "createdAt": "2022-06-15T06:33:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42184#issuecomment-1156044243"
      },
      {
        "id": "IC_kwDOAQzde85E6Hjl",
        "parentId": null,
        "author": "davidfowl",
        "content": "So to be clear, you\u0027re casting the resource to an HttpContext in the authorization handler, getting the controller action descriptor out of the endpoint metadata and using it in someway to determine which parameter is the query string?\r\n\r\nCan you show what this handler looks like today?\r\n\r\nUnfortunately there\u0027s no binding information easily available on the endpoint metadata.",
        "createdAt": "2022-06-15T07:22:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42184#issuecomment-1156085989"
      },
      {
        "id": "IC_kwDOAQzde85E6TUp",
        "parentId": null,
        "author": "voroninp",
        "content": "No, I use \u0060IHttpContextAccessor\u0060 to get \u0060HttpContext\u0060 and then I resolve the id:\r\n\r\n\u0060\u0060\u0060\r\nif (!TryGetOrderId(context, attribute.OrderIdParameterName, out Guid orderId))\r\n{\r\n    return;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThe methods are:\r\n\u0060\u0060\u0060\r\nprivate bool TryGetOrderId(AuthorizationHandlerContext context, string paramName, out Guid orderId) =\u003E\r\n    TryGetOrderIdAsResource(context, out orderId)\r\n    || TryGetOrderIdFromRouteData(paramName, out orderId) \r\n    || TryGetOrderIdFromQuery(paramName, out orderId);\r\n\r\nprivate bool TryGetOrderIdFromQuery(string paramName, out Guid orderId)\r\n{\r\n    var httpContext = _httpContextAccessor.HttpContext;\r\n    if (httpContext is null)\r\n    {\r\n        throw new InvalidOperationException(\u0022No active HttpConext\u0022);\r\n    }\r\n    var query = httpContext.Request.Query;\r\n    var valuesFromQuery = query[paramName];\r\n    if (valuesFromQuery.Count != 1)\r\n    {\r\n        orderId = Guid.Empty;\r\n        return false;\r\n    }\r\n\r\n    return Guid.TryParse(valuesFromQuery.FirstOrDefault(), out orderId);\r\n}\r\n\u0060\u0060\u0060\r\n\r\nMy concern here is that resource and route parameters are defined by the developer, yet the query parameters can be added by the requestor, and thus I would like to ensure this parameter is actually something endpoint is aware of.\r\n\r\nLet\u0027s imagine there\u0027s an endpoint which accepts \u0060orderId\u0060 as part of  body:\r\n\r\n\u0060\u0060\u0060\r\npublic sealed record Bar(Guid OrderId);\r\n\r\n[OwnerOfOrder]\r\npublic IActionResult Foo(Bar payload) { ... }\r\n\r\n[OwnerOfOrder]\r\npublic IActionResult Foo2([FromQuery(Name = \u0022orderId\u0022)]Guid id) { ... }\r\n\u0060\u0060\u0060\r\n\r\n\u0060OwnerOfOrder\u0060 inherits from \u0060Authorize\u0060 and just specifies the policy which has a requirement processed by the handler.\r\n\r\nFor \u0060Foo\u0060 endpoint handler won\u0027t resolve \u0060orderId\u0060 from the route, so authorization will always fail unless request contains additional query parameter \u0060orderId\u0060. But code does not use it, it works with the id in \u0060payload\u0060, so the values can differ.\r\n\r\nYet for \u0060Foo2\u0060 it\u0027s safe to assume that \u0060orderId\u0060 parameter will be bound to \u0060id\u0060 and it will be used in code below.\r\n\r\nThis is a contrived example, but I hope it explains the \u0060WHY\u0060.",
        "createdAt": "2022-06-15T08:05:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42184#issuecomment-1156134185"
      },
      {
        "id": "IC_kwDOAQzde85FbI7T",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-06-23T18:35:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42184#issuecomment-1164742355"
      },
      {
        "id": "IC_kwDOAQzde85It0qj",
        "parentId": null,
        "author": "captainsafia",
        "content": "@voroninp We don\u0027t store any information about the parameter in the endpoint metadata at the moment. Your best bet is to leverage the strategy you mentioned in the StackOverflow issue and check the \u0060ParamterInfo\u0060 of the method similar to what we do in the API description provider.\r\n\r\nBTW, it might not help your particular scenario, but we introduced support for an \u0060IEndpointMetadataProvider\u0060 in the .NET 7 that can be used to allow parameter/return types to annotate metadata with information. \r\n\r\n\u0060\u0060\u0060csharp\r\nclass IdFromQueryOrRoute : IEndpointParameterMetadataProvider\r\n{\r\n  public static void PopulateMetadata(EndpointParameterMetadataContext parameterContext)\r\n  {\r\n    if (parameterContext.Parameter.HasFromQueryAttribute())\r\n    {\r\n      parameterContext.EndpointMetadata.Add(new FooMetadata())\r\n    }\r\n  }\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2022-08-18T21:15:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42184#issuecomment-1219971747"
      },
      {
        "id": "IC_kwDOAQzde85MAWwJ",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:17:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42184#issuecomment-1275161609"
      },
      {
        "id": "IC_kwDOAQzde85QJ8jh",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-12-09T21:07:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42184#issuecomment-1344784609"
      },
      {
        "id": "IC_kwDOAQzde85QJ87I",
        "parentId": null,
        "author": "captainsafia",
        "content": "I think \u0060IEndpointParameterMetadataProvider\u0060 is a sufficient API here. Instead of endpoint\u0027s storing \u0060ParmaterInfo\u0060 for each as metadata that is then derived in filters/handlers, the parameters themselves should project whatever information is necessary into metadata via the \u0060IEndpointParameterMetadataProvider.",
        "createdAt": "2022-12-09T21:09:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42184#issuecomment-1344786120"
      },
      {
        "id": "IC_kwDOAQzde85QKMxH",
        "parentId": null,
        "author": "davidfowl",
        "content": "I think the bigger question is if we choose to invent a metadata model that encapsulates the decisions that happen inside of the RequestDelegateFactory. Right now we hand out the MethodInfo and you have to duplicate our logic (this is what the ApiExplorer implementation does as well).",
        "createdAt": "2022-12-09T22:32:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42184#issuecomment-1344851015"
      },
      {
        "id": "IC_kwDOAQzde85flLJA",
        "parentId": null,
        "author": "mitchdenny",
        "content": "Removing the Needs Attention tag from this issue since I think that its on the backlog appropriately for now if we choose to emit more metadata which represents the binding decisions that were made in either RDF or RDG.",
        "createdAt": "2023-06-23T01:58:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42184#issuecomment-1603580480"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85LxSZo",
    "title": "Reduce friction in the Web/Worker/Database on Azure Container Apps scenario",
    "url": "https://github.com/dotnet/aspnetcore/issues/42193",
    "createdAt": "2022-06-14T18:30:30Z",
    "lastUpdated": "2024-03-01T22:55:01Z",
    "body": "[This issue was copied from the planning repo]\r\n\r\nEstablish baseline effort score for .NET 6 ASP.NET Core customers to create a Worker/Web app that makes use of 2 different Azure messaging services when wired up with Visual Studio Connected Services for a specific, opinionated scenario. We\u0027ll first tackle this scenario with Azure Storage Queues, but could roll in Event Grid or other providers if time permits.\r\n\r\nThe app should consist of the following components:\r\n\r\n- [ ] A minimal API that drops messages it receives into an Azure Storage Queue for asynchronous processing by the worker service\r\n- [ ] A front-end ASP.NET Core app providing the user interface to the API\r\n- [ ] A Worker Service project that runs as a queue-watcher, processing incoming messages and saving them to a SQL DB using Entity Framework Core\r\n- [ ] A SQL database storing the data permanently\r\n- [ ] An Azure Storage Queue receiving the API\u0027s posts\r\n- [ ] Application Insights telemetry so the customer can see an Application Map of the entire flow of traffic at the end (this is the \u0022visual goal\u0022 for the experience)\r\n- [ ] Ideally we use service authentication and not connection strings in this e2e\r\n\r\nWe\u0027ll provide customers/tester the end-to-end and gain insight into the slow parts, complex parts, and gain insight into how the experience could be improved upon. \r\n\r\nWe\u0027ll also provide our testing team the end-to-end as a scenario test they can run on intervals so we can keep tabs on how changes in the APIs and SDKs impact the experience and resources available for customers trying to achieve it. ",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85FBb9A",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-06-16T18:29:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42193#issuecomment-1158004544"
      },
      {
        "id": "IC_kwDOAQzde85MAWxT",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:17:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42193#issuecomment-1275161683"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85MHNhX",
    "title": "RFC9110 - UnprocessableContent",
    "url": "https://github.com/dotnet/aspnetcore/issues/42302",
    "createdAt": "2022-06-20T13:47:38Z",
    "lastUpdated": "2024-03-01T22:48:46Z",
    "body": "## Background and Motivation\r\n\r\nNow that [RFC 9110 - HTTP Semantics](https://www.rfc-editor.org/rfc/rfc9110.html) is official, with the inclusion of the \u0060422 Unprocessable Content\u0060 status code, I\u0027d like to propose the following changes to ASP.NET Core APIs.\r\n\r\nExisting (shipped) members containing UnprocessableEntity is kept, but will simply forward to its UnprocessableContent counterpart.\r\n\r\n## Proposed API\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Http;\r\n\r\npublic static class StatusCodes\r\n{\r\n\u002B    public const int Status422UnprocessableContent = 422;\r\n}\r\n\r\npublic static partial class Results\r\n{\r\n\u002B    public static IResult UnprocessableContent(object? error = null) { throw null; }\r\n}\r\n\r\npublic static class TypedResults {\r\n-    public static UnprocessableEntity UnprocessableEntity();\r\n\u002B    public static UnprocessableContent UnprocessableContent();\r\n-    public static UnprocessableEntity\u003CTValue\u003E UnprocessableEntity\u003CTValue\u003E(TValue? error) { throw null; }\r\n\u002B    public static UnprocessableContent\u003CTValue\u003E UnprocessableContent\u003CTValue\u003E(TValue? error) { throw null; }\r\n}\r\n\r\nnamespace Microsoft.AspNetCore.Http.HttpResults;\r\n\r\n-public sealed class UnprocessableEntity : IResult, IEndpointMetadataProvider { }\r\n\u002Bpublic sealed class UnprocessableContent : IResult, IEndpointMetadataProvider { }\r\n\r\n-public sealed class UnprocessableEntity\u003CTValue\u003E : IResult, IEndpointMetadataProvider { }\r\n\u002Bpublic sealed class UnprocessableContent\u003CTValue\u003E : IResult, IEndpointMetadataProvider { }\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\n\r\nKeeping the old name as-is? Should the existing \u0060UnprocessableEntity\u0060 APIs be marked as \u0060[Obsolete]\u0060?\r\n\r\n## Risks\r\n\r\nI\u0027m not sure there are any.",
    "upvotes": 1,
    "labels": [
      "api-suggestion",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85FK2oj",
        "parentId": null,
        "author": "khellang",
        "content": "BTW, this is what the changes would look like (inside Microsoft.AspNetCore.Http only): https://github.com/dotnet/aspnetcore/compare/main...khellang:unprocessable-content",
        "createdAt": "2022-06-20T13:48:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42302#issuecomment-1160473123"
      },
      {
        "id": "IC_kwDOAQzde85FLSi3",
        "parentId": null,
        "author": "davidfowl",
        "content": "This diverges from MVC\u0027s ActionResult (https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.unprocessableentityresult?view=aspnetcore-6.0).",
        "createdAt": "2022-06-20T15:29:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42302#issuecomment-1160587447"
      },
      {
        "id": "IC_kwDOAQzde85FLkp7",
        "parentId": null,
        "author": "khellang",
        "content": "Yeah, or MVC needs the same treatment?",
        "createdAt": "2022-06-20T16:48:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42302#issuecomment-1160661627"
      },
      {
        "id": "IC_kwDOAQzde85FLk4D",
        "parentId": null,
        "author": "khellang",
        "content": "In this case, it\u0027s still not too late to rename some of the APIs. In MVC\u0027s case, it\u0027ll all have to live side by side.",
        "createdAt": "2022-06-20T16:49:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42302#issuecomment-1160662531"
      },
      {
        "id": "IC_kwDOAQzde85H0qt6",
        "parentId": null,
        "author": "khellang",
        "content": "@rafikiassumani-msft If this ships in .NET 7, it would be a breaking change to do anything with it in .NET 8. Is it too late to change this in .NET 7?",
        "createdAt": "2022-08-04T09:17:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42302#issuecomment-1204988794"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Mn5qh",
    "title": "Allow [FromQuery] to work with simple objects in Minimal API.",
    "url": "https://github.com/dotnet/aspnetcore/issues/42438",
    "createdAt": "2022-06-27T09:39:04Z",
    "lastUpdated": "2023-07-05T01:22:54Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nMinimal API currently supports \u0060[FromBody] SomeObject request\u0060 as a parameter, whereas \u0060[FromQuery]\u0060 only supports simple types.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nIt would be less code and more intuitive to support objects with \u0060[FromQuery]\u0060 too. For example\r\n\r\n\u0060\u0060\u0060\r\napp.MapGet(\u0022/users/search\u0022, ([FromQuery] UserSearchQuery query) =\u003E Mediator.Send(query);\r\n\u0060\u0060\u0060\r\n\r\nJust as we do for posts\r\n\r\n\u0060\u0060\u0060\r\napp.MapPost(\u0022/users/search\u0022, ([FromBody] UserSearchQuery query) =\u003E Mediator.Send(query);\r\n\u0060\u0060\u0060\r\n\r\nNote that having attributes decorating the properties of the query object, or requiring it to implement a static method to parse a query string would both be more work and also enforce the Contracts project have a dependency on ASP.NET, which is undesirable as the contract class should have no concept of how it came to exist.\r\n\r\nSo I propose the \u0060[FromQuery]\u0060 approach being implemented in the ASP.NET level.\r\n\r\n### Additional context\r\n\r\nDavid Fowler = https://twitter.com/davidfowl/status/1541088042169008130",
    "upvotes": 4,
    "labels": [
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85FoImW",
        "parentId": null,
        "author": "davidfowl",
        "content": "@brunolins16 FWIW, I think this would look exactly like \u0060[AsParameters]\u0060. No nesting of these within the object graph and only a single binding source. I wonder if that logic can be generalized? Also if there was a name specified on this attribute it would fail if there was no custom TryParse method.",
        "createdAt": "2022-06-28T02:38:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42438#issuecomment-1168148886"
      },
      {
        "id": "IC_kwDOAQzde85Fzjm6",
        "parentId": null,
        "author": "mrpmorris",
        "content": "I don\u0027t think it should require a TryParse method. The idea is that the object itself is completely agnostic as to how it is being used (Http, ServiceBus, etc).\r\n\r\nJust a one-to-one mapping from each value named in the QueryString to property in the class.",
        "createdAt": "2022-06-30T12:12:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42438#issuecomment-1171143098"
      },
      {
        "id": "IC_kwDOAQzde85Fz8j_",
        "parentId": null,
        "author": "davidfowl",
        "content": "The above description are implementation notes for the engineer that takes this on. Today we detect \u0060TryParse\u0060 on types that have \u0060[FromQuery]\u0060 and we pass the value from the query string that maps to the parameter name of the name specified in the attribute. This is new behavior and we need to make sure it doesn\u0027t break existing behavior. \r\n\r\nToday, if you have an explicit [FromQuery] and a missing TryParse, this would be the fallback behavior. Specifically here https://github.com/dotnet/aspnetcore/blob/2bc2c8ec339266b16b26d4ef61d413d560f31d6f/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L1397-L1401\r\n\r\nToday this code path converges for query/route/header for any \u0060T\u0060 or \u0060T[]\u0060. We should explicitly not support \u0060T[]\u0060 for this scenario .\r\n\r\nIt also needs to work with OpenAPI.",
        "createdAt": "2022-06-30T13:50:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42438#issuecomment-1171245311"
      },
      {
        "id": "IC_kwDOAQzde85F5Y3t",
        "parentId": null,
        "author": "brunolins16",
        "content": "\u003E I wonder if that logic can be generalized?\r\n\r\nDo you mean, we should have same behavior for other sources, eg. \u0060FromHeader\u0060?\r\n\r\n\u003E I think this would look exactly like \u0060[AsParameters]\u0060\r\n\r\nJust to make sure I understood. Will both examples have the same behavior?\r\n\r\n\u0060\u0060\u0060 C#\r\npublic struct UserSearchQuery\r\n{\r\n   // Attributes are not required but added just to make the example clearer.\r\n   [FromQuery]\r\n   public string FirstName { get; set;}\r\n   [FromQuery]\r\n   public string LastName { get; set;}\r\n}\r\napp.MapGet(\u0022/users/search\u0022, ([AsParameters] UserSearchQuery query) =\u003E Mediator.Send(query);\r\n\u0060\u0060\u0060 \r\n\r\nand\r\n\r\n\u0060\u0060\u0060 C#\r\npublic struct UserSearchQuery\r\n{\r\n   public string FirstName { get; set;}\r\n   public string LastName { get; set;}\r\n}\r\napp.MapGet(\u0022/users/search\u0022, ([FromQuery] UserSearchQuery query) =\u003E Mediator.Send(query);\r\n\u0060\u0060\u0060 \r\n",
        "createdAt": "2022-07-01T19:58:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42438#issuecomment-1172671981"
      },
      {
        "id": "IC_kwDOAQzde85F5ZX_",
        "parentId": null,
        "author": "brunolins16",
        "content": "A difference between \u0060AsParameters\u0060 and this new \u0060FromQuery\u0060 will be how we handle \u0060properties\u0060 attributes because when using \u0060FromQuery\u0060 we should ignore or throw if a binding source attribute is present, right?",
        "createdAt": "2022-07-01T20:01:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42438#issuecomment-1172674047"
      },
      {
        "id": "IC_kwDOAQzde85GAR9W",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Just to make sure I understood. Will both examples have the same behavior?\r\n\r\nYes, that\u0027s right.\r\n\r\n\u003E A difference between AsParameters and this new FromQuery will be how we handle properties attributes because when using FromQuery we should ignore or throw if a binding source attribute is present, right?\r\n\r\nThrow.",
        "createdAt": "2022-07-05T00:40:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42438#issuecomment-1174478678"
      },
      {
        "id": "IC_kwDOAQzde85UuO8g",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-02-07T20:32:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42438#issuecomment-1421405984"
      },
      {
        "id": "IC_kwDOAQzde85giWyV",
        "parentId": null,
        "author": "diegosasw",
        "content": "I\u0027ve found the conversation on Twitter.\r\n\r\nI had also noticed in .NET 7 the minimal API \u0060[FromQuery]\u0060 behaves differently than when using the endpoint in a controller extending \u0060ControllerBase\u0060, as the [FromQuery] in minimal API, which seems to require adding additional things to the filter model.\r\n\u003E No public static bool AgentTenantedFilter.TryParse(string, out AgentTenantedFilter) method found for filter.\r\n\r\nI suppose this is the same issue you were suggesting a new feature for?\r\n\r\n\u0060[AsParameters]\u0060 is not an equivalent. In my case, since my filter extends some functionality, Swagger/OpenAPI is marking the inherited filter properties as required.\r\n\r\nTL;DR; I just wanted to confirm that currently in .NET 7 minimal API \u0060[FromQuery]\u0060 behaves differently by design, which would explain why I can\u0027t move my controller\r\n\u0060\u0060\u0060\r\n[Route(\u0022agents\u0022)]\r\npublic class AgentQueryApi : QueryControllerBase // which is a ControllerBase\r\n{\r\n\tprivate readonly FilteredQueryService\u003CAgentDocument, AgentTenantedFilter\u003E _filteredQueryService;\r\n\r\n\tpublic AgentQueryApi(FilteredQueryService\u003CAgentDocument, AgentTenantedFilter\u003E filteredQueryService)\r\n\t\t=\u003E _filteredQueryService = filteredQueryService;\r\n\r\n\t[HttpGet]\r\n\tpublic async Task\u003CPagedResult\u003CAgentDocument\u003E\u003E GetAll(\r\n\t\t[FromQuery] AgentTenantedFilter agentTenantedFilter,\r\n\t\tCancellationToken cancellationToken)\r\n\t{\r\n\t\tvar result = await _filteredQueryService.Get(agentTenantedFilter, cancellationToken);\r\n\t\treturn result;\r\n\t}\r\n}\r\n\u0060\u0060\u0060\r\n\r\nto a minimal API\r\n\u0060\u0060\u0060\r\napp.MapGet(\u0022agents\u0022,\r\n    async (FilteredQueryService\u003CAgentDocument, AgentTenantedFilter\u003E filteredQueryService,\r\n    [FromQuery] AgentTenantedFilter agentTenantedFilter,\r\n        CancellationToken cancellationToken) =\u003E\r\n    {\r\n        // It won\u0027t work anyway, as Swagger complains\r\n    })\r\n\u0060\u0060\u0060\r\n\r\nIs it because the \u0060ControllerBase\u0060 is adding some binding behavior? Will Minimal API be able to ever work in the same way so that migrating from \u0060ControllerBase\u0060 to minimal API is trivial?\r\n\r\nSorry if my question is not really related to the original motivation.",
        "createdAt": "2023-07-04T06:52:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42438#issuecomment-1619618965"
      },
      {
        "id": "IC_kwDOAQzde85gnNAt",
        "parentId": null,
        "author": "mitchdenny",
        "content": "@davidfowl I\u0027m wondering what the value is of \u0060[FromQuery]\u0060 being used to replicate the behavior of \u0060[AsParameters]\u0060? Doesn\u0027t that just make things more confusing?",
        "createdAt": "2023-07-05T01:22:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42438#issuecomment-1620889645"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85M2NZu",
    "title": "Improve route pattern related errors when working with route groups",
    "url": "https://github.com/dotnet/aspnetcore/issues/42491",
    "createdAt": "2022-06-29T20:40:54Z",
    "lastUpdated": "2024-03-01T22:48:46Z",
    "body": "Route groups must have unique route parameter names across all the group definitions. If you have a duplicate route parameter name somewhere, you\u0027ll get an error.\r\n\r\n![Screen Shot 2022-06-28 at 10 32 03 PM](https://user-images.githubusercontent.com/1857993/176540444-22ba4842-8627-4ca1-b874-a2c3fd50c0e0.png)\r\n\r\nUnfortunately, this error isn\u0027t specific about where the impacted group is so you end up having to grep through your code. It would be helpful if it showed the routes with duplicates.\r\n\r\n",
    "upvotes": 1,
    "labels": [
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85OQhqD",
    "title": "Not possible to handle/log serialization errors when returning IQueryable from an endpoint",
    "url": "https://github.com/dotnet/aspnetcore/issues/42849",
    "createdAt": "2022-07-21T09:26:59Z",
    "lastUpdated": "2023-06-20T21:48:08Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nbefore i start: \r\n\r\nIt is possible that we can return an IQueryable form an endpoint. this results in a massive performance improvement especially for mass-data, since there is no in-memory object created, it\u0027s serialized \u0022on-the-fly\u0022, like return item 1 -\u003E discard -\u003E return item 2 -\u003E discard ...\r\nof course using this behaviour we can\u0027t step in when an item can\u0027t be converted (e.g. incompatible database type), because the response is already in the process of writing\r\n\r\nnow the problem:\r\nthe frontend in this case gets success status code with a incomplete JSON array and as developers we have no way to determine what exactly is broken in the situation. we don\u0027t get a precise error message and nothing is logged at all because this seems to be out of scope for the global error handler \r\n\r\n\n\n### Expected Behavior\n\nThere should be an Event flying for a serializer or maybe even the global exception handler should be able to process those serialization errors\n\n### Steps To Reproduce\n\n1. Create a test-database with a test table\r\n2. bind a EFCore model to that database \r\n3. create a mismatch in one of the property types.\r\ne.g. \u0060public Guid Id {get;set;}\u0060 receives a null-value in database \r\n4. create an endpoint that returns an IQueryable of the above created model\r\n\r\nyou will now see the broken JSON in the frontend and no way to log or handle this exception. \n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n6.0.300-preview.22204.3\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85HCZac",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "@Kokujou We don\u0027t advise to return \u0060IQueryable\u0060 from an endpoint. Can you provide a GitHub repo to help us understand what you are trying to do and provide some options? ",
        "createdAt": "2022-07-21T18:36:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42849#issuecomment-1191810716"
      },
      {
        "id": "IC_kwDOAQzde85HCZjL",
        "parentId": null,
        "author": "??",
        "content": "Hi @Kokujou. We have added the \u0022Needs: Author Feedback\u0022 label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
        "createdAt": "2022-07-21T18:37:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42849#issuecomment-1191811275"
      },
      {
        "id": "IC_kwDOAQzde85HCmEr",
        "parentId": null,
        "author": "Kokujou",
        "content": "have a look at this repository, it\u0027s my for my own personal use, and not stricly bound to that topic but in the last commit i changed the code which is doing the stuff i proposed\r\nhttps://github.com/Kokujou/ObscuritasMediaManager/commit/239adf679de7948a17dad2c58bcf69491d15df03\r\n\r\nreturning an IQueryable from an endpoint is not only highly advised, i can even call it a killer-feature! imagine you have thousands of megabytes of data. Mass data. what would happen if you cast it to list? simple. \r\nyou will load megabytes of data in memory and if this stuff is then executed parallelly by a lot of user this will probably cause a huge memory leak, which is bad. because it will literally load everything in memory.\r\n\r\nwhat this way of writing does is, it serializes on the fly. so it doesnt take the x00 megabytes in RAM, it only takes one object, writes it, flushs it. takes the next, writes it, flush it.  this is awesome! we tested it and the performance improvement is enormous in our application.\r\n\r\nthe only problem is now: where do you log serliazation exceptions?\r\ni already gave reproduction steps, if you want i can even create a little dummy repository  bnut i think when looking at the commit you should get the idea.\r\n\r\ni have no idea about the backgrounds but i need to dig into the JSON serialization somehow to append an extra error handler that logs away such errors or does whatever with the thrown exception \r\n",
        "createdAt": "2022-07-21T19:38:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42849#issuecomment-1191862571"
      },
      {
        "id": "IC_kwDOAQzde85Hbx38",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-07-28T18:01:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42849#issuecomment-1198464508"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Pthhc",
    "title": "Global endpoint filter (edit: and other conventions?)",
    "url": "https://github.com/dotnet/aspnetcore/issues/43237",
    "createdAt": "2022-08-12T15:14:28Z",
    "lastUpdated": "2024-03-01T22:48:47Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nSince we introduced the endpoint filter feature, is there also a global endpoint filter available?\r\n\r\nSo that we could avoid registering the endpoint filter for each endpoint.\r\n\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nMaybe likes MVC global filters, and maybe group endpoint filter for a \u0060Group\u0060 (\u0060MapGroup\u0060) likes the filter for controller\r\n\r\n### Additional context\r\n\r\n_No response_",
    "upvotes": 3,
    "labels": [
      "api-needs-work",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85IYhbu",
        "parentId": null,
        "author": "davidfowl",
        "content": "The way to do this is with groups. Make a global group and stick all of the endpoints in it. In the future, we may consider a default convention builder on the WebApplication object.\r\n\r\n\u0060\u0060\u0060C#\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build();\r\n\r\nvar routes = app.MapGroup(\u0022\u0022);\r\n\r\nroutes.AddEndpointFilter((context, next) =\u003E\r\n{\r\n    return next(context);\r\n});\r\n\r\nroutes.MapGet(\u0022/\u0022, () =\u003E \u0022Hello World!\u0022);\r\n\r\napp.Run();\r\n\u0060\u0060\u0060",
        "createdAt": "2022-08-14T14:20:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43237#issuecomment-1214387950"
      },
      {
        "id": "IC_kwDOAQzde85IZC7I",
        "parentId": null,
        "author": "WeihanLi",
        "content": "Thanks @davidfowl ",
        "createdAt": "2022-08-15T01:49:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43237#issuecomment-1214525128"
      },
      {
        "id": "IC_kwDOAQzde85Ijiuy",
        "parentId": null,
        "author": "halter73",
        "content": "I love using an empty group prefix for this! Support for gobal metadata and filters was the main reason I figured it was worth allowing empty group prefixes. I think we can do better though. What do we think about having \u0060WebApplication\u0060 implement \u0060IEndpointConventionBuilder\u0060.\r\n\r\n## Background and Motivation\r\n\r\nSee above.\r\n\r\n## Proposed API\r\n\r\nnamespace Microsoft.AspNetCore.Builder;\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Http;\r\n\r\n- public sealed class WebApplication : IHost, IApplicationBuilder, IEndpointRouteBuilder, IAsyncDisposable\r\n\u002B public sealed class WebApplication : IHost, IApplicationBuilder, IEndpointRouteBuilder, IEndpointConventionBuilder, IAsyncDisposable\r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\n\u0060\u0060\u0060C#\r\nvar app = WebApplication.Create(args);\r\n\r\napp.AddEndpointFilter((context, next) =\u003E\r\n{\r\n    return next(context);\r\n});\r\n\r\napp.MapGet(\u0022/\u0022, () =\u003E \u0022Hello World!\u0022);\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\n\r\nLeave it as is. You can always create an route group with an empty prefix if you want this functionality as @davidfowl suggests:\r\n\r\n\u0060\u0060\u0060C#\r\nvar app = WebApplication.Create(args);\r\nvar routes = app.MapGroup(\u0022\u0022);\r\n\r\nroutes.AddEndpointFilter((context, next) =\u003E\r\n{\r\n    return next(context);\r\n});\r\n\r\nroutes.MapGet(\u0022/\u0022, () =\u003E \u0022Hello World!\u0022);\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\n## Risks\r\n\r\nIt would be too noisy to have too many extension methods that all work on \u0060WebApplication\u0060.\r\n",
        "createdAt": "2022-08-16T23:38:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43237#issuecomment-1217276850"
      },
      {
        "id": "IC_kwDOAQzde85IjizZ",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2022-08-16T23:38:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43237#issuecomment-1217277145"
      },
      {
        "id": "IC_kwDOAQzde85IjkNi",
        "parentId": null,
        "author": "WeihanLi",
        "content": "The \u0060MatchGroup\u0060 with empty had to update the existing code, if there are a lot of endpoints it may need a big effort to update.\r\nPersonally, I prefer the proposal",
        "createdAt": "2022-08-16T23:48:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43237#issuecomment-1217282914"
      },
      {
        "id": "IC_kwDOAQzde85Ijku6",
        "parentId": null,
        "author": "davidfowl",
        "content": "I don\u0027t like this proposal I think top level intellisense will be too noisy. Routing methods are usually Map*, middleware methods are Use*, these conventions could don\u0027t have a consistent naming scheme. We use With*, Add*, Require*. I\u0027m worried about jumbled intellisense and naming conflicts.",
        "createdAt": "2022-08-16T23:52:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43237#issuecomment-1217285050"
      },
      {
        "id": "IC_kwDOAQzde85Ijm1x",
        "parentId": null,
        "author": "davidfowl",
        "content": "Here\u0027s an alternative proposal:\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Http;\r\n\r\npublic sealed class WebApplication \r\n{\r\n\u002B    public RouteGroupBuilder Routes { get; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nWe expose a default top level \u0060RouteGroup\u0060  that you can hang your routes on. Internally, we\u0027d create a default route group and   would use it for both top level routes hanging off the \u0060WebApplication\u0060 itself and for the Routes property.\r\n\r\n\u0060\u0060\u0060C#\r\napp.Routes.MapGet(\u0022/\u0022, () =\u003E \u0022Hello\u0022);\r\n\u0060\u0060\u0060\r\n\r\nis the same as:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/\u0022, () =\u003E \u0022Hello\u0022);\r\n\u0060\u0060\u0060\r\n\r\nAdding global conventions is then:\r\n\r\n\u0060\u0060\u0060C#\r\napp.Routes.AddEndpointFilter((context, next) =\u003E\r\n{\r\n    return next(context);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nIt also solves some of the complaints we\u0027ve had in this area:\r\n- https://andrewlock.net/exploring-dotnet-6-part-4-building-a-middleware-pipeline-with-webapplication/ (scroll to the last section)\r\n- https://khalidabuhakmeh.com/adding-clarity-to-dotnet-minimal-hosting#proposed-minimal-enhancement",
        "createdAt": "2022-08-17T00:06:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43237#issuecomment-1217293681"
      },
      {
        "id": "IC_kwDOAQzde85IyQlk",
        "parentId": null,
        "author": "halter73",
        "content": "Another alternative is adding a \u0060Conventions\u0060 property that\u0027s just an \u0060IEndpointConventionBuilder\u0060. Under the covers, we would use groups to implement this, but we don\u0027t need to expose that implementation detail if we don\u0027t want to.\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Http;\r\n\r\npublic sealed class WebApplication \r\n{\r\n\u002B    public IEndpointConventionBuilder Conventions { get; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nUsage:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/\u0022, () =\u003E \u0022Hello\u0022);\r\n\r\napp.Conventions.AddEndpointFilter((context, next) =\u003E\r\n{\r\n    return next(context);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nWe\u0027ve said that we don\u0027t want APIs targeting \u0060RouteGroupBuilder\u0060 directly. It\u0027s a sealed type. Any single API should target either \u0060IEndpointRouteBuilder\u0060 or \u0060IEndpointConventionBuilder\u0060, but not both. If later on, we feel this is a mistake, we could create a new interface that implements both. We could then have \u0060RouteGroupBuilder\u0060 implement that and tell people to target the new combined interface, but I don\u0027t think we\u0027re going to need that.",
        "createdAt": "2022-08-19T22:24:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43237#issuecomment-1221134692"
      },
      {
        "id": "IC_kwDOAQzde85IyRO7",
        "parentId": null,
        "author": "halter73",
        "content": "Or we could do a hybrid approach, so we still allow you to delineate between the \u0060IApplicationBuilder\u0060 and the \u0060IEndpointConventionBuilder\u0060 if you want to.\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Http;\r\n\r\npublic sealed class WebApplication \r\n{\r\n\u002B    public IEndpointRouteBuilder Routes { get; }\r\n\u002B    public IEndpointConventionBuilder Conventions { get; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nUsage:\r\n\r\n\u0060\u0060\u0060C#\r\napp.Routes.MapGet(\u0022/\u0022, () =\u003E \u0022Hello\u0022);\r\n\r\napp.Conventions.AddEndpointFilter((context, next) =\u003E\r\n{\r\n    return next(context);\r\n});\r\n\u0060\u0060\u0060",
        "createdAt": "2022-08-19T22:29:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43237#issuecomment-1221137339"
      },
      {
        "id": "IC_kwDOAQzde85IyRQK",
        "parentId": null,
        "author": "davidfowl",
        "content": "I considered this as well but I figured 2 birds with one stone (see the blog posts). Is there any reason why we can\u0027t expose a sealed type? Are you predicting extension methods targeting this?",
        "createdAt": "2022-08-19T22:30:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43237#issuecomment-1221137418"
      },
      {
        "id": "IC_kwDOAQzde85IyTwJ",
        "parentId": null,
        "author": "halter73",
        "content": "\u003E I considered this as well but I figured 2 birds with one stone (see the blog posts).\r\n\r\nI just read them before I suggested the hybrid proposal that addresses the concern of both blogposts. I think it\u0027s better because it\u0027s not adding yet a new property that arguably implements too many interfaces on a single type.\r\n\r\n\u003E Are you predicting extension methods targeting this?\r\n\r\nI hope not. If we were willing to make a major change to the route group APIs in the 11th hour of .NET 7 we could change \u0060RouteGroupBuilder\u0060 itself to not implement two very distinct interfaces. Arguably, this would avoid repeating the mistake we made with \u0060WebApplication\u0060:\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Routing;\r\n\r\n- public sealed class RouteGroupBuilder : IEndpointRouteBuilder, IEndpointConventionBuilder\r\n\u002B public sealed class RouteGroupBuilder\r\n{\r\n\u002B     public IEndpointRouteBuilder Routes { get; }\r\n\u002B     public IEndpointConventionBuilder Conventions { get; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nWith this API change, the current workaround for global convetions goes from being like:\r\n\r\n\u0060\u0060\u0060C#\r\n\r\nvar app = WebApplication.Create(args);\r\nvar routes = app.MapGroup(\u0022\u0022);\r\n\r\nroutes.AddEndpointFilter((context, next) =\u003E\r\n{\r\n    return next(context);\r\n});\r\n\r\nroutes.MapGet(\u0022/\u0022, () =\u003E \u0022Hello World!\u0022);\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\nTo something like this:\r\n\r\n\u0060\u0060\u0060C#\r\nvar app = WebApplication.Create(args);\r\nvar group = app.MapGroup(\u0022\u0022);\r\n\r\ngroup.Conventions.AddEndpointFilter((context, next) =\u003E\r\n{\r\n    return next(context);\r\n});\r\n\r\ngroup.Routes.MapGet(\u0022/\u0022, () =\u003E \u0022Hello World!\u0022);\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\n@andrewlock and @khalidabuhakmeh do either of you have any thoughts on this?",
        "createdAt": "2022-08-19T22:50:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43237#issuecomment-1221147657"
      },
      {
        "id": "IC_kwDOAQzde85I4nf4",
        "parentId": null,
        "author": "halter73",
        "content": "API Review Notes:\r\n\r\n- Having to type the extra \u0060.Routes\u0060 or \u0060.Conventions\u0060 characters is annoying.\r\n- Can we use destructors?\r\n    - This enables you to delineate between the \u0060IApplicationBuilder\u0060 and the \u0060IEndpointConventionBuilder\u0060 if you want to.\r\n- Can we use it for \u0060RouteGroupBuilder\u0060?\r\n- Can we add an empty overload to \u0060MapGroup\u0060 without the prefix parameter? If this is the preferred way to add conventions to a group of endpoints, it might make sense.\r\n\r\nWe feel we\u0027re going to need customer feedback to see if we really want to do any of the above proposals.\r\n\r\nWe do not think we want \u0060RouteGroupBuilder\u0060 to stop implementing both \u0060IEndpointRouteBuilder\u0060 and \u0060IEndpointConventionBuilder\u0060. That\u0027s one of the few decisions we won\u0027t be able to take back after .NET 7.\r\n\r\nMost of the other suggestions are additive and could be done in a later release.",
        "createdAt": "2022-08-22T19:12:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43237#issuecomment-1222801400"
      },
      {
        "id": "IC_kwDOAQzde85I4oa1",
        "parentId": null,
        "author": "andrewlock",
        "content": "\u003E do either of you have any thoughts on this?\r\n\r\nI mean, I have definite thoughts if we could turn back time and have \u0060WebApplication\u0060 not directly implement \u0060IEndpointRouteBuilder\u0060 (as I mentioned in the blog post), but I assume that\u0027s not really on the cards \uD83D\uDE04\r\n\r\nFor the hybrid approach:\r\nI think having \u0060WebApplication\u0060 directly implement \u0060IEndpointRouteBuilder\u0060 _and_ having a \u0060Routes\u0060 property _may_ be worse than one or the other, as it adds confusion/ambiguity (i.e. the difference between \u0060app.MapGet()\u0060 and \u0060app.Routes.MapGet()\u0060 is not obvious)\r\n\r\nRE splitting \u0060RouteBuilder\u0060:\r\nI\u0027m not sure if it adds a lot splitting \u0060IEndpointRouteBuilder\u0060 and \u0060IEndpointConventionBuilder\u0060 other than make things a bit more verbose. I quite like that I didn\u0027t even appreciate that there were two interfaces involved here previously, as everything just flows quite nicely. \r\n\r\nFor me the top-level \u0060Conventions\u0060 property makes most sense probably, though I\u0027m not a fan of the name (I don\u0027t think of filters etc as being \u0022conventions\u0022, and nor do any of the docs, even if that\u0027s now they\u0027re implemented).\r\n\r\nPersonally, I think the original workaround, of creating a \u0022top-level route\u0022 is the best option given the existing constraints",
        "createdAt": "2022-08-22T19:15:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43237#issuecomment-1222805173"
      },
      {
        "id": "IC_kwDOAQzde85JKzQ3",
        "parentId": null,
        "author": "khalidabuhakmeh",
        "content": "I agree with @andrewlock in the sense that \u0060Conventions\u0060 doesn\u0027t make a lot of sense here. I would consider it as part of the request pipeline, so possibly \u0060Pipeline\u0060 or \u0060Filters\u0060 (to stay in line with Razor Pages and MVC) would make the most sense.\r\n\r\nThe thing I like about ASP.NET Core is the shared model, and that includes the shared mental model across all the approaches. Trying to be too different might drive people to \u0022pick sides\u0022, rather than realizing the strength is in flowing between Razor Pages, Minimal API endpoints, MVC, and SignalR. ",
        "createdAt": "2022-08-25T17:31:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43237#issuecomment-1227568183"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85PucYO",
    "title": "Run group FinallyConventions after conventions for each endpoint within a group",
    "url": "https://github.com/dotnet/aspnetcore/issues/43246",
    "createdAt": "2022-08-12T18:31:49Z",
    "lastUpdated": "2024-03-01T22:48:48Z",
    "body": "It would be convenient if we could run the final conventions after running the normal conventions for *all* the endpoints produced by this data source. I don\u0027t see any downside to delaying the final conventions a little more, and that way conventions could be made aware of all the endpoints provided by the data source before finalizing any endpoints if they care.\r\n\r\n_Originally posted by @halter73 in https://github.com/dotnet/aspnetcore/pull/43225#discussion_r944007851_",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85P58zF",
    "title": "CorsPolicyBuilder does not correctly combine policy with DefaultIsOriginAllowed",
    "url": "https://github.com/dotnet/aspnetcore/issues/43319",
    "createdAt": "2022-08-16T16:17:26Z",
    "lastUpdated": "2024-03-01T22:48:48Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nA CorsPolicy has per default a DefaultIsOriginAllowed func which is responsible for evaluating if an origin is allowed. Because this func [encapsulates a member access to \u0060Origins\u0060](https://github.com/dotnet/aspnetcore/blob/7b5da426f9bd42fa515a6b67e0bd1504eacbc6c7/src/Middleware/CORS/src/Infrastructure/CorsPolicy.cs#L177), cors policy builder will not correctly combine two cors policies.\r\nFollowing sample code demonstrates the problem. It is the Program.cs of a new .net 6 Web API Project.\r\n\r\n\u0060\u0060\u0060\r\nusing Microsoft.AspNetCore.Cors.Infrastructure;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add services to the container.\r\n\r\nbuilder.Services.AddControllers();\r\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\r\nbuilder.Services.AddEndpointsApiExplorer();\r\nbuilder.Services.AddSwaggerGen();\r\n\r\n// does not work\r\nvar policy1 = new CorsPolicyBuilder(new CorsPolicy())\r\n  .AllowAnyHeader()\r\n  .AllowAnyMethod()\r\n  .WithOrigins(\u0022https://www.microsoft.com\u0022)\r\n  .Build();\r\n//builder.Services.AddCors(options =\u003E {\r\n//  options.AddDefaultPolicy(policy1);\r\n//});\r\n\r\n// works\r\nvar policy2 = new CorsPolicyBuilder(\u0022https://www.microsoft.com\u0022)\r\n  .AllowAnyHeader()\r\n  .AllowAnyMethod()\r\n  .Build();\r\n\r\n// will not work if cors request is made for origin https://www.visualstudio.com\r\n//var policy3 = new CorsPolicyBuilder(policy2)\r\n//  .WithOrigins(\u0022https://www.visualstudio.com\u0022)\r\n//  .Build();\r\n\r\n\r\nbuilder.Services.AddCors(options =\u003E {\r\n  options.AddDefaultPolicy(policy2);\r\n});\r\n\r\nConsole.WriteLine(policy1.IsOriginAllowed(\u0022https://www.microsoft.com\u0022)); // =\u003E false\r\nConsole.WriteLine(policy2.IsOriginAllowed(\u0022https://www.microsoft.com\u0022)); // =\u003E true\r\n\r\nvar app = builder.Build();\r\n\r\n// Configure the HTTP request pipeline.\r\nif (app.Environment.IsDevelopment()) {\r\n  app.UseSwagger();\r\n  app.UseSwaggerUI();\r\n}\r\n\r\napp.UseHttpsRedirection();\r\napp.UseCors();\r\napp.UseAuthorization();\r\napp.MapControllers();\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\n### Expected Behavior\r\n\r\nCombining two policies using [\u0060CorsPolicyBuilder\u0060](https://github.com/dotnet/aspnetcore/blob/7b5da426f9bd42fa515a6b67e0bd1504eacbc6c7/src/Middleware/CORS/src/Infrastructure/CorsPolicyBuilder.cs#L29) where each policy has allowed origins should combine correctly. \r\nOne solution would be, that if the first policy has \u0060IsDefaultIsOriginAllowed\u0060 set to true then the IsOriginAllowed func of the second policy should be kept in the [Combine](https://github.com/dotnet/aspnetcore/blob/7b5da426f9bd42fa515a6b67e0bd1504eacbc6c7/src/Middleware/CORS/src/Infrastructure/CorsPolicyBuilder.cs#L260) function. A prettier solution would probably be to consider changes around the IsDefaultIsOriginAllowed / IsOriginAllowed  func approach, but might be more difficult to implement without breaking changes.\r\n\r\n### Steps To Reproduce\r\n\r\nRun following unit test.\r\n\u0060\u0060\u0060\r\n  [TestClass]\r\n  public class UnitTest1 {\r\n    [TestMethod]\r\n    public void CorsBuilder_should_combine_correctly() {\r\n      var policy1 = new CorsPolicyBuilder(new CorsPolicy())\r\n        .AllowAnyHeader()\r\n        .AllowAnyMethod()\r\n        .WithOrigins(\u0022https://www.microsoft.com\u0022)\r\n        .Build();\r\n      \r\n      var policy2 = new CorsPolicyBuilder(\u0022https://www.microsoft.com\u0022)\r\n        .AllowAnyHeader()\r\n        .AllowAnyMethod()\r\n        .Build();\r\n\r\n      var policy3 = new CorsPolicyBuilder(policy2)\r\n        .WithOrigins(\u0022https://www.visualstudio.com\u0022)\r\n        .Build();\r\n\r\n      Assert.IsTrue(policy1.IsOriginAllowed(\u0022https://www.microsoft.com\u0022)); // fails\r\n      Assert.IsTrue(policy2.IsOriginAllowed(\u0022https://www.microsoft.com\u0022)); // works\r\n      Assert.IsTrue(policy3.IsOriginAllowed(\u0022https://www.microsoft.com\u0022)); // works\r\n      Assert.IsTrue(policy3.IsOriginAllowed(\u0022https://www.visualstudio.com\u0022)); // fails\r\n    }\r\n  }\r\n\r\n\u0060\u0060\u0060\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n6.0.203\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 1,
    "labels": [
      "bug",
      "area-mvc",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85Ijdda",
        "parentId": null,
        "author": "captainsafia",
        "content": "Is the bug you\u0027ve identified with the lines of code here?\r\n\r\n\u0060\u0060\u0060\r\nConsole.WriteLine(policy1.IsOriginAllowed(\u0022https://www.microsoft.com\u0022)); // =\u003E false\r\nConsole.WriteLine(policy2.IsOriginAllowed(\u0022https://www.microsoft.com\u0022)); // =\u003E true\r\n\u0060\u0060\u0060\r\n\r\nOne thing to note about the code sample above is that \u0060policy2\u0060 is the only Cors policy registered in the same code below and that \u0060IsOriginAllowed\u0060 is called before any of the conventions on the policies have been applied.",
        "createdAt": "2022-08-16T23:02:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43319#issuecomment-1217255258"
      },
      {
        "id": "IC_kwDOAQzde85IjeCr",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Taking a glance at the CORS code and the code posted above, I think they are saying the problem code is \r\n\u0060\u0060\u0060\r\nnew CorsPolicyBuilder(new CorsPolicy())\r\n.WithOrigins(\u0022https://www.microsoft.com\u0022)\r\n\u0060\u0060\u0060\r\nand if you remove \u0060new CorsPolicy()\u0060 then it will work.",
        "createdAt": "2022-08-16T23:06:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43319#issuecomment-1217257643"
      },
      {
        "id": "IC_kwDOAQzde85IjiOK",
        "parentId": null,
        "author": "halter73",
        "content": "I see. The following is setting the \u0060policy.IsOriginAllowed\u0060 \u0060Func\u003Cstring, bool\u003E\u0060 which is based on the old policy\u0027s origins even though IsOriginAllowed was never changed from the default. While powerful, having a settable \u0060Func\u0060 for this is what made it so easy to introduce this bug.\r\n\r\nI\u0027m guessing this:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/00ed4bb71ffd4b5527594ab0703e5d7ed6c26afa/src/Middleware/CORS/src/Infrastructure/CorsPolicyBuilder.cs#L249-L260\r\n\r\nShould be this:\r\n\r\n\u0060\u0060\u0060csharp\r\n    private CorsPolicyBuilder Combine(CorsPolicy policy)\r\n    {\r\n        if (policy == null)\r\n        {\r\n            throw new ArgumentNullException(nameof(policy));\r\n        }\r\n\r\n        WithOrigins(policy.Origins.ToArray());\r\n        WithHeaders(policy.Headers.ToArray());\r\n        WithExposedHeaders(policy.ExposedHeaders.ToArray());\r\n        WithMethods(policy.Methods.ToArray());\r\n\r\n        if (!policy.IsDefaultIsOriginAllowed)\r\n        {\r\n              SetIsOriginAllowed(policy.IsOriginAllowed);\r\n        }\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2022-08-16T23:34:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43319#issuecomment-1217274762"
      },
      {
        "id": "IC_kwDOAQzde85Ikm14",
        "parentId": null,
        "author": "dIeGoLi",
        "content": "@halter73 exactly\r\n\r\nAs a sidenote. When combining two policies where each (or at least the first) has not the default \u0060IsOriginAllowed\u0060 func, could be considered to throw an exception. Because with the current design of CorsPolicyBuilder it is impossible to combine such two policies. It would only work, if instead of combining the two policies, they would be chained, but i don\u0027t think that\u0027s a practical use case.",
        "createdAt": "2022-08-17T07:18:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43319#issuecomment-1217555832"
      },
      {
        "id": "IC_kwDOAQzde85IlGd1",
        "parentId": null,
        "author": "dIeGoLi",
        "content": "@captainsafia Yes basically the two console writelines demonstrate the problem. I added _Steps To Reproduce_ to clarify the issue.",
        "createdAt": "2022-08-17T08:34:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43319#issuecomment-1217685365"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85P7AzC",
    "title": "Remove default Response (200) on methods POST, PUT and DELETE",
    "url": "https://github.com/dotnet/aspnetcore/issues/43330",
    "createdAt": "2022-08-16T20:52:53Z",
    "lastUpdated": "2024-03-01T22:48:49Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI was working on a Minimal API project, and I realize endpoints are being defaulted to at least have a 200 response. Take this for example.\r\n\r\n\u0060\u0060\u0060\r\napp.MapDelete(\u0022/specials/{id}\u0022, (Guid id) =\u003E\r\n{\r\n    if (id == Guid.Empty) return Results.BadRequest();\r\n\r\n    var pizzaSpecial = specials.FirstOrDefault(s =\u003E s.Id == id);\r\n    if (pizzaSpecial is null) return Results.NotFound();\r\n\r\n    specials.Remove(pizzaSpecial);\r\n\r\n    return Results.NoContent();\r\n})\r\n.WithOpenApi(o =\u003E\r\n{\r\n    o.Summary = \u0022Remove pizza special\u0022;\r\n    o.Description = \u0022Removes a pizza special by its unique identifier\u0022;\r\n    o.Responses.Clear();\r\n    o.Responses.Add(StatusCodes.Status400BadRequest.ToString(), new OpenApiResponse { Description = \u0022The given id is incorrect\u0022 });\r\n    o.Responses.Add(StatusCodes.Status404NotFound.ToString(), new OpenApiResponse { Description = \u0022The given id could not be found\u0022 });\r\n    o.Responses.Add(StatusCodes.Status204NoContent.ToString(), new OpenApiResponse { Description = \u0022Pizza special removed\u0022 });\r\n\r\n    return o;\r\n});\r\n\u0060\u0060\u0060\r\n\r\nIf I don\u0027t call \u0060Clear()\u0060 before adding the allowed responses, Swagger will also display 200 is allowed, which was not my plan. I understand the intent was sort of give developers a starting point, but at the same time it would have been better if devs are given the freedom to decide what responses to allow.\n\n### Describe the solution you\u0027d like\n\nSince we are talking about Minimal, I would suggest not defaulting a response (see below). That way devs would know by looking at Swagger they need to list the allowed response(s).\r\n\r\n\u003Cimg width=\u0022718\u0022 alt=\u0022image\u0022 src=\u0022https://user-images.githubusercontent.com/63487874/184982655-5f4e9158-533f-4a4b-97a9-486cf9d7a3c2.png\u0022\u003E\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85JK_Ca",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: we\u0027ll want to get more feedback on what the appropriate defaults to set for different HTTP methods are here. For now, 200 seems like a safe fallback.",
        "createdAt": "2022-08-25T18:24:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43330#issuecomment-1227616410"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85QJQGL",
    "title": "Microsoft.Extensions.ApiDescription.Server does not dispose the created host thus could hang/fail the build process",
    "url": "https://github.com/dotnet/aspnetcore/issues/43395",
    "createdAt": "2022-08-19T15:39:48Z",
    "lastUpdated": "2024-11-12T07:00:00Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nApiDescription.Server constructs a service provider by running parts of the application (up to building the \u0060IHost\u0060), then uses this service provider to retrieve API descriptions. However this host and/or service provider is not disposed properly. This is problematic for services that allocate some background resources and are realized as part of building/configuring the host, typically a logger provider.\n\n### Expected Behavior\n\nGenerating the OpenAPI doc should not hang or fail.\n\n### Steps To Reproduce\n\nThe following example creates a logger provider that starts a worker thread. This is similar to what \u0060ConsoleLoggerProvider\u0060 does in https://github.com/dotnet/runtime/tree/v6.0.8/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLoggerProcessor.cs#L30. In this example the thread is not marked as a background thread in order to enforce graceful shutdown.\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Ea.csproj\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060csproj\r\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk.Web\u0022\u003E\r\n\r\n  \u003CPropertyGroup\u003E\r\n    \u003CTargetFramework\u003Enet6.0\u003C/TargetFramework\u003E\r\n    \u003CNullable\u003Eenable\u003C/Nullable\u003E\r\n    \u003CImplicitUsings\u003Eenable\u003C/ImplicitUsings\u003E\r\n    \u003COpenApiGenerateDocumentsOnBuild\u003Etrue\u003C/OpenApiGenerateDocumentsOnBuild\u003E\r\n  \u003C/PropertyGroup\u003E\r\n\r\n  \u003CItemGroup\u003E\r\n    \u003CPackageReference Include=\u0022Swashbuckle.AspNetCore\u0022 Version=\u00226.2.3\u0022 /\u003E\r\n    \u003CPackageReference Include=\u0022Microsoft.Extensions.ApiDescription.Server\u0022 Version=\u00226.0.8\u0022 PrivateAssets=\u0022all\u0022 /\u003E\r\n  \u003C/ItemGroup\u003E\r\n\r\n\u003C/Project\u003E\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003EProgram.cs\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060cs\r\nusing Microsoft.Extensions.DependencyInjection.Extensions;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// An instance of this is created when an ILogger is injected to the IHost on .Build()\r\nbuilder.Logging.Services.TryAddEnumerable(ServiceDescriptor.Singleton\u003CILoggerProvider, DisposeMe\u003E());\r\n\r\nbuilder.Services.AddEndpointsApiExplorer();\r\nbuilder.Services.AddSwaggerGen();\r\n\r\nvar app = builder.Build();\r\napp.Run();\r\n\r\nclass DisposeMe : ILoggerProvider\r\n{\r\n    private readonly Thread _worker;\r\n    private readonly CancellationTokenSource _workerStop = new();\r\n    public DisposeMe()\r\n    {\r\n        Console.WriteLine(\u0022I have been constructed\u0022);\r\n        _worker = new Thread(() =\u003E _workerStop.Token.WaitHandle.WaitOne());\r\n        // Uncomment for ungraceful shutdown. ConsoleLoggerProvider does this.\r\n        // _worker.IsBackground = true;\r\n        _worker.Start();\r\n    }\r\n    public void Dispose()\r\n    {\r\n        // Flush cache, etc\r\n        Console.WriteLine(\u0022I have been disposed\u0022);\r\n        _workerStop.Cancel();\r\n        _worker.Join();\r\n    }\r\n\r\n    public ILogger CreateLogger(string categoryName) =\u003E Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance;\r\n}\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\nRun \u0060dotnet build\u0060. After emitting the openapi doc the build process will hang for 2 minutes then fail.\r\n\r\nApiDescriptions.Server constructs a partial application by throwing after the host is built: https://github.com/dotnet/runtime/blob/v6.0.8/src/libraries/Microsoft.Extensions.HostFactoryResolver/src/HostFactoryResolver.cs#L344\r\nThis exception is swallowed at https://github.com/dotnet/runtime/blob/55fb7ef977e7d120dc12f0960edcff0739d7ee0e/src/libraries/Microsoft.Extensions.HostFactoryResolver/src/HostFactoryResolver.cs#L252\r\nThe process then fails to quit because the worker thread is still running.\r\n\r\nIf running the app directly the \u0060app.Run()\u0060 call would dispose the host or an exception would crash the entire process.\n\n### Exceptions (if any)\n\n(removed some clutter)\r\n\u0060\u0060\u0060\r\nMicrosoft.Extensions.ApiDescription.Server.targets(66,5): error :\r\nSystem.TimeoutException: Process C:\\Program Files\\dotnet\\dotnet.exe timed out after 2 minutes.\r\nat Microsoft.Extensions.ApiDescription.Tool.Exe.Run(String executable, IReadOnlyList\u00601 args, IReporter reporter, String workingDirectory, Boolean interceptOutput)\r\nat Microsoft.Extensions.ApiDescription.Tool.Commands.InvokeCommand.Execute()\r\nat Microsoft.Extensions.ApiDescription.Tool.Commands.CommandBase.\u003C\u003Ec__DisplayClass14_0.\u003CConfigure\u003Eb__0()\r\nat Microsoft.Extensions.CommandLineUtils.CommandLineApplication.Execute(String[]args)\r\nat Microsoft.Extensions.ApiDescription.Tool.ProgramBase.Run(String[] args, CommandBase command, Boolean throwOnUnexpectedArg)\r\n\r\nMicrosoft.Extensions.ApiDescription.Server.targets(66,5): error MSB3073:\r\nThe command \u0022dotnet \u0022****\\../tools/dotnet-getdocument.dll\u0022 --assembly \u0022***\\bin\\Debug\\net6.0\\a.dll\u0022 --file-list \u0022obj\\a.OpenApiFiles.cache\u0022 --framework \u0022.NETCoreApp,Version=v6.0\u0022 --output \u0022obj\u0022 --project \u0022a\u0022 --assets-file \u0022****\\obj\\project.assets.json\u0022 --platform \u0022AnyCPU\u0022 \u0022 exited with code 1.\r\n\u0060\u0060\u0060\n\n### .NET Version\n\n6.0.400\n\n### Anything else?\n\nSome related issues:\r\n#14410 assumptions about the user code that runs as part of the API discovery are still not documented\r\n#23033 some current configuration APIs simply don\u0027t support deferring actual work past the host startup.\r\n#43391 the host is intercepted before all user code that affects the API had a chance to run\r\n\r\nSome considerations on how to resolve this\r\n\r\n**1. Don\u0027t run user code. Ever.**\r\nIdeally no user code should be run as part of the build process. This would be bordering on the impossible with the current API shape.\r\n\r\n**2. Allow the host to be fully constructed and disposed by user code**\r\nA possible solution (that would also solve #43391) is to capture the host right before starting it.  This would allow using this pattern in user code to dispose the host:\r\n\r\n**3. Pass a different environment**\r\nThe generator should pass \u0060--environment GeneratingApi\u0060 or something similar to the app when generating the API doc so that user code could trim unnecessary/dangerous services and configuration. Maybe even make the host refuse to start or immediately quit when this parameter is present.\r\nThis is probably the easiest to implement.\r\n\r\n\u0060\u0060\u0060c#\r\nawait using var app = builder.Build(); // Currently this would throw an exception before assigning to the variable\r\n// ...\r\nawait app.StartAsync();\r\nawait app.WaitForShutdownAsync();\r\n\u0060\u0060\u0060\r\nHowever this would have the drawback that even more services with side effects could be realized when configuring the pipeline.\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Edotnet --info\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.400\r\n Commit:    7771abd614\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19044\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.400\\\r\n\r\nHost:\r\n  Version:      7.0.0-preview.7.22375.6\r\n  Architecture: x64\r\n  Commit:       eecb028078\r\n\r\n.NET SDKs installed:\r\n  6.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.100-preview.7.22377.5 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.0-preview.7.22376.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.0-preview.7.22375.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.0-preview.7.22377.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  arm64 [C:\\Program Files\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\arm64\\InstallLocation]\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E",
    "upvotes": 0,
    "labels": [
      "investigate",
      "area-mvc",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85IxH1L",
        "parentId": null,
        "author": "davidfowl",
        "content": "The console logging thread won\u0027t hang the app because it\u0027s [a background thread](https://github.com/dotnet/runtime/blob/55fb7ef977e7d120dc12f0960edcff0739d7ee0e/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLoggerProcessor.cs#L27) but your repro will because it isn\u0027t.\r\n\r\n\u003E Ideally no user code should be run as part of the build process. This would be bordering on the impossible with the current API shape.\r\n\r\nThis is a non-starter.\r\n\r\n\u003E 2. Allow the host to be fully constructed and disposed by user code\r\n\r\nSee my comment here https://github.com/dotnet/aspnetcore/issues/43391#issuecomment-1220836423\r\n\r\n\u003E 3. Pass a different environment\r\n\r\nThis is the one that makes the most sense and is cooperative. We should also provide an API that can be used to detect this mode so that the app developer can avoid side effects etc.",
        "createdAt": "2022-08-19T15:59:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43395#issuecomment-1220836683"
      },
      {
        "id": "IC_kwDOAQzde85IxVJk",
        "parentId": null,
        "author": "bachratyg",
        "content": "\u003E The console logging thread won\u0027t hang the app because it\u0027s [a background thread](https://github.com/dotnet/runtime/blob/55fb7ef977e7d120dc12f0960edcff0739d7ee0e/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLoggerProcessor.cs#L27) but your repro will because it isn\u0027t.\r\n\r\nLike I said\r\n\r\n\u003E in order to enforce graceful shutdown\r\n\u003E \u0060\u0060\u0060// Uncomment for ungraceful shutdown. ConsoleLoggerProvider does this.\u0060\u0060\u0060\r\n\r\nI might have been overly cautious with this. The point is if the live app is terminating in an unexpected way for whatever reason then having the process hang around a bit longer (or possibly indefinitely) might be the better option than losing potential log messages that show the way to the crash.",
        "createdAt": "2022-08-19T16:56:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43395#issuecomment-1220891236"
      },
      {
        "id": "IC_kwDOAQzde85Kxh9I",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-09-22T04:08:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43395#issuecomment-1254498120"
      },
      {
        "id": "IC_kwDOAQzde85LKwnu",
        "parentId": null,
        "author": "captainsafia",
        "content": "During triage, we talked about whether or not the fix to support the minimal host might\u0027ve resolved this. I didn\u0027t think it did but validated the hunch now that we have a release with the working \u0060ApiDescription.Server\u0060. Alas, it doesn\u0027t. I\u0027ll leave this in .NET 8 Planning for now. I think this is probably roughly a ~P2.",
        "createdAt": "2022-09-28T15:50:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43395#issuecomment-1261111790"
      },
      {
        "id": "IC_kwDOAQzde86TNVP9",
        "parentId": null,
        "author": "anhphuong22tuoi",
        "content": "Hi all. Is this fixed for version 8.0.10? Microsoft.Extensions.ApiDescription.Server somehow calls to the Program.cs file of my project, which I think it shouldn\u0027t",
        "createdAt": "2024-11-12T06:59:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43395#issuecomment-2469745661"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85QRJ-i",
    "title": "ApiExplorer does not respect [FromQuery.Name] for complex parameter types",
    "url": "https://github.com/dotnet/aspnetcore/issues/43464",
    "createdAt": "2022-08-22T16:23:08Z",
    "lastUpdated": "2024-03-01T22:48:50Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\n\u0060FromQuery.Name\u0060 is not respected for complex type parameters, see *Steps To Reproduce* for code samples: query parameter name suggested by ApiExplorer is \u0060Input\u0060, which does not work with a request: \u0060?Input=xyz\u0060.\n\n### Expected Behavior\n\nIf \u0060FromQuery.Name\u0060 is set, it should be added as a prefix to parameter name, because that is how ASP.NET handles it. See *Steps To Reproduce* for code samples: query parameter name should instead be \u0060custom.Input\u0060, like in \u0060?custom.Input=xyz\u0060.\n\n### Steps To Reproduce\n\n\u0060\u0060\u0060cs\r\npublic class CustomType {\r\n    public string Input { get; set; } = null;\r\n}\r\n\r\n[HttpGet]\r\npublic async Task\u003CIActionResult\u003E Get([FromQuery(Name = \u0022custom\u0022)] CustomType customType)\r\n{\r\n    return Ok();\r\n}\r\n\u0060\u0060\u0060\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n6.0.1\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "bug",
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85JLDiT",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: ApiExplorer will use the \u0060ParameterInfo.Name\u0060 by default as the name that is generated for API descriptions (regardless of what is in on the attribute). We should probably update the implementation to respect name\u0027s explicitly provided in the attribute as they likely have higher precedence than the name we would infer from the parameter list.",
        "createdAt": "2022-08-25T18:45:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43464#issuecomment-1227634835"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85QX6Sb",
    "title": "Support Deprecation Metadata in the API Explorer",
    "url": "https://github.com/dotnet/aspnetcore/issues/43493",
    "createdAt": "2022-08-23T19:26:52Z",
    "lastUpdated": "2024-03-01T22:48:51Z",
    "body": "## Background and Motivation\r\n\r\nThe API Explorer has been the pinnacle of sharing API metadata across different ASP.NET Core libraries. The concept of a _deprecated_ API exists in a number of different libraries such as ASP.NET API Versioning, Swashbuckle, NSwag, and OpenAPI .NET to name a few. Each library has its own method of describing a deprecated API, without any shared metadata, developers are required to create their own bridges to connect the two.\r\n\r\nWhile not strictly required, it is reasonable to have the existing API Explorer metadata discovery indicate an API is deprecated when the \u0060ObsoleteAttribute\u0060 is applied.\r\n\r\n## Proposed API\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Mvc.ApiExplorer;\r\n\r\npublic class ApiDescription\r\n{\r\n\u002B    /// \u003Csummary\u003E\r\n\u002B    /// Gets or sets a value indicating whether the API is deprecated.\r\n\u002B    /// \u003C/summary\u003E\r\n\u002B    /// \u003Cvalue\u003ETrue if the API deprecated; otherwise, false. The default value is \u003Cc\u003Efalse\u003C/c\u003E.\u003C/value\u003E\r\n\u002B    public bool IsDeprecated { get; set; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\n### Default Behavior\r\n\r\nThe presence of \u0060ObsoleteAttribute\u0060 on a valid action would set \u0060ApiDescription.IsDeprecated\u0060 to \u0060true\u0060.\r\n\r\n**Default Action (Not Deprecated)**\r\n\u0060\u0060\u0060c#\r\n[HttpGet]\r\npublic IActionResult Get() =\u003E Ok();\r\n\u0060\u0060\u0060\r\n\r\n**Deprecated Action**\r\n\u0060\u0060\u0060c#\r\n[Obsolete, HttpGet]\r\npublic IActionResult Get() =\u003E Ok();\r\n\u0060\u0060\u0060\r\n\r\n**Non-Action (Ignored)**\r\n\u0060\u0060\u0060c#\r\n[Obsolete, NonAction, HttpGet]\r\npublic override IActionResult Get() =\u003E NotImplemented();\r\n\u0060\u0060\u0060\r\n\r\n**Deprecated Controller**\r\n\u0060\u0060\u0060c#\r\n[Obsolete]\r\n[Route(\u0022[controller]\u0022)]\r\npublic class ValuesController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    public IActionResult Get() =\u003E Ok();\r\n}\r\n\u0060\u0060\u0060\r\n\r\n**Non-Action on Deprecated Controller (Ignored)**\r\n\u0060\u0060\u0060c#\r\n[Obsolete]\r\n[Route(\u0022[controller]\u0022)]\r\npublic class Values2Controller : ValuesController\r\n{\r\n    [NonAction]\r\n    [HttpGet]\r\n    public override IActionResult Get() =\u003E NotImplemented();\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### API Versioning Behavior\r\n\r\nThe API Versioning extensions for the API Explorer will set \u0060ApiDescription.IsDeprecated\u0060 to \u0060true\u0060 when\r\na known, deprecated API version is encountered.\r\n\r\n\u0060\u0060\u0060c#\r\nvar builder = WebApplication.CreateBuilder( args );\r\nvar app = builder.Build();\r\nvar orders = app.NewApiVersionSet( \u0022Orders\u0022 ).Build();\r\n\r\napp.MapGet( \u0022/orders/{id:int}\u0022, ( int id ) =\u003E new Order() { Id = id, Customer = \u0022John Doe\u0022 } )\r\n   .Produces\u003COrder\u003E()\r\n   .Produces( 404 )\r\n   .WithApiVersionSet( orders )\r\n   .HasDeprecatedApiVersion( 0.9 )\r\n   .HasApiVersion( 1.0 );\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\n\r\n_Minimal APIs_ have exposed an extension method to set the OpenAPI metadata, but this approach is no different than using an OpenAPI extension in Swashbuckle, NSwag, and so on or simply using OpenAPI .NET directly.\r\n\r\n## Risks\r\n\r\nThere are no tangible risks. The default behavior will continue to indicate that an API is not deprecated by default. Library will authors will be required to update this information when appropriate and consumers will be obliged to honor the value when set.\r\n\r\n## Related Links\r\n\r\n- #35091\r\n- domaindrivendev/Swashbuckle.AspNetCore#412\r\n- [Omit Obsolete Operations and/or Schema Properties (Swashbuckle)](https://github.com/domaindrivendev/Swashbuckle.AspNetCore#omit-obsolete-operations-andor-schema-properties)",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "api-suggestion",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85JLGo9",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Each library has its own method of describing a deprecated API, without any shared metadata, developers are required to create their own bridges to connect the two.\r\n\r\nIs there a reason that the \u0060OpenApiOperation\u0060 metadata with the \u0060Deprecated\u0060 property is not a sufficient \u0022shared\u0022 metadata to use here consider that NSwag/Swashbuckle/Microsoft.AspNetCore.OpenApi leverage it for minimal APIs?\r\n\r\nFor MVC controllers, is it possible to check for the \u0060Obsolete\u0060 attribute on the action descriptor directly?\r\n\r\n\u0060\u0060\u0060csharp\r\napiDescription.CustomAttributes().OfType\u003CObsoleteAttribute\u003E().Any();\r\n\u0060\u0060\u0060",
        "createdAt": "2022-08-25T18:59:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43493#issuecomment-1227647549"
      },
      {
        "id": "IC_kwDOAQzde85JLMz4",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "Yes - there is a reason. Not every library needs or uses OpenAPI. API Versioning does not directly reference or otherwise specifically care about OpenAPI. OpenAPI document generators like Swashbuckle and NSwag use the metadata provided by the API Explorer. API Versioning exposes this metadata to them (and anyone else) without any direct knowledge or dependency on OpenAPI.\r\n\r\nIs an attribute is _possible_ - yes; however, you\u0027re missing the point. Using the \u0060ObsoleteAttribute\u0060 is one method of _how_ \u0060IsDeprecated\u0060 could be set. API Versioning doesn\u0027t use or honor the \u0060ObsoleteAttribute\u0060 because it is typically a code-only concept. Instead, API Versioning exposes an explicit, intention-revealing method of providing this metadata; for example:\r\n\r\n\u0060\u0060\u0060c#\r\n[ApiVersion(0.9, Deprecated = true)]\r\n[Route(\u0022[controller]\u0022)]\r\npublic class LegacyController : ControllerBase { }\r\n\u0060\u0060\u0060\r\n\r\nThis is just one example of how it can be done. API Versioning also doesn\u0027t care about specific attributes. Using attributes are just one way that the versioning metadata can be expressed. The problem with using an attribute - any attribute, such as \u0060ObsoleteAttribute\u0060, is that this has to be agreed upon across libraries. The entire point of the API Explorer is to provide _what_ common set of metadata is available and separate that from _how_ it is realized (e.g. populated).\r\n\r\nThere are potential use cases outside of OpenAPI. Looking back at how the API Explorer was brought into the ASP.NET Core world, there are definitely some things that probably _should_ have been done differently. This is how I managed to get \u0060IsRequired\u0060 and \u0060DefaultValue\u0060 support added to explored parameters a few years back. API Explorer shouldn\u0027t _have_ to rely on MVC to function, but that is now a \uD83D\uDC00 \uD83E\uDDF6 to unwind. The purpose of API Explorer was not just to service OpenAPI, that is just one way it can be used. Developers and library authors have been getting along without this very simple piece of metadata, but it is incredibly low-hanging fruit that would make everyone\u0027s life on the consuming side just a little bit better. \uD83D\uDE09 ",
        "createdAt": "2022-08-25T19:28:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43493#issuecomment-1227672824"
      },
      {
        "id": "IC_kwDOAQzde85JLYbL",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "Honestly, I thought this would be easy win.\r\n\r\nSince we\u0027re on the topic of _deprecation_, there are other, related pieces of metadata that are not exposed either. _Deprecation_ typically implies that an API will sunset (e.g. go away) at some point, but not necessarily. \u0060IsDeprecated\u0060 doesn\u0027t indicate if the API will sunset or when. At best, it simply says _\u0022You shouldn\u0027t use this anymore.\u0022_\r\n\r\nAPI Versioning now supports _Sunset Policies_ as defined by [RFC 8594](https://datatracker.ietf.org/doc/html/rfc8594). This provides information as to when or if an API will be sunset as well as any related links; for example, an API might have a web page with a publicly stated policy.\r\n\r\nThese not concepts are not mutually exclusive. A deprecated API _should_ have a stated sunset policy, but an API can also have a sunset policy without being deprecated. While it might be possible via an extension, OpenAPI nor any document generator that I know of can provide this type of information today. This type of information, however, is useful for API clients when the onboard.\r\n\r\nThis information can also change on a dime. It\u0027s possible to onboard to a supported API and a week later it\u0027s deprecated. API Versioning now provides DI extensions for \u0060HttpClient\u0060 that can detect when it\u0027s using a deprecated API and/or it is approaching sunset and forward that to the configured instrumentation. This assumes the API reports that information, presumably a la API Versioning on the server side. This informs API clients that they need to update as well as how much time they have left to do so.\r\n\r\nI figured adding numerous metadata bits to the API Explorer would have resistance so I initially didn\u0027t think it worth mentioning. Since this appears to be turning into a longer debate and justification, I\u0027ll just throw all my cards out on the table. A sunset policy would consist of nothing more than an ISO 8601 date (e.g. \u0060DateTimeOffset\u0060) and an optional collection of links. Links are _supposed_ to conform to [RFC 8288](https://datatracker.ietf.org/doc/html/rfc8288), which is what API Versioning does, but something simpler could work for API Explorer. I think would still be more than URLs, since are other useful pieces of metadata such as relationship type, language, title, [media] type, and title. You can peek at what [SunsetPolicy](https://github.com/dotnet/aspnet-api-versioning/blob/main/src/Abstractions/src/Asp.Versioning.Abstractions/SunsetPolicy.cs) and [Link](https://github.com/dotnet/aspnet-api-versioning/blob/main/src/Abstractions/src/Asp.Versioning.Abstractions/LinkHeaderValue.cs) might look like. I\u0027m open to as much or as little is worth being added. I can see these additions driving formal support in OpenAPI at some point in the future.",
        "createdAt": "2022-08-25T20:20:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43493#issuecomment-1227720395"
      },
      {
        "id": "IC_kwDOAQzde85JbkrA",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E I figured adding numerous metadata bits to the API Explorer would have resistance so I initially didn\u0027t think it worth mentioning.\r\n\r\nYep, the metadata pattern is what motivated us to pursue the more OpenAPI-based approach in the first place. As we examined some of the feedback on features that were missing in ApiExplorer, we realized a lot of them were addressed by more complete OpenApi support. Essentially, switching from a model where an adhoc-ish collection of metadata that we maintain is the contract, to more formally using OpenAPI as the contract.\r\n\r\nI recognize that this means that these tools now have to take a dependency on OpenAPI, but given that OpenAPI is meant to provide a standard for annotating these RESTful APIs, it makes sense to lean on that instead of continuing to re-invent in our own metadata.\r\n\r\n\u003E API Versioning now supports Sunset Policies as defined by [RFC 8594](https://datatracker.ietf.org/doc/html/rfc8594). This provides information as to when or if an API will be sunset as well as any related links; for example, an API might have a web page with a publicly stated policy.\r\n\r\nInteresting. Is this information that could be communicated in the \u0060OpenApi.Extensions\u0060 property for an endpoint\u0027s annotation? How does API versioning currently derive the information needed to construct the sunset policy? I assume users have to input it manually using API versioning\u0027s APIs....",
        "createdAt": "2022-08-30T17:35:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43493#issuecomment-1231964864"
      },
      {
        "id": "IC_kwDOAQzde85Jb5CY",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "I _understand_ the motivation, but I\u0027ll have to agree to disagree. The foundation of all OpenAPI support in ASP.NET Core, even with _Minimal APIs_, still relies on API Explorer and I don\u0027t see that changing anytime soon. For things that are _truly_ OpenAPI-specific, I think the extension paths that have been added make complete sense. There are several other areas, however, that will feel are disjointed because it requires a combination of some API Explorer and some OpenAPI extensions.\r\n\r\nThe real issue I see with this approach is that is forcing everyone using OpenAPI in the .NET ecosystem to use \u0060Microsoft.OpenAPI\u0060 which feels highly opinionated. As far as I tell, NSwag is does not directly use this library, but is still wildly popular. If there is some larger, longer roadmap which sees API Explorer and OpenAPI reimagined as near one in the same, so be it, but I not aware of that being communicated. API Versioning has stayed neutral on Swagger/OpenAPI for that very reason. There is no preference on library, implementation, or whether you even use OpenAPI. There have been plenty of scenarios, such as automated tests, that run suites by version without any concern for _documentation_. If there is some longer-term strategy at play, it\u0027d be nice to advertise that roadmap with the most popular platform extenders.\r\n\r\n\u003ESide bar: OpenAPI is an _Interface Definition Language_ (IDL) that addresses the impedance mismatch between HTTP (the API) and client/server implementation code. _\u0022I am getting frustrated by the number of people calling any HTTP-based interface a REST API_\u0022 - \u0060@fieldinghimself\u0060 \uD83D\uDE09 \r\n\r\nYes - it could most definitely be added as an general extension. That\u0027s certainly where it would start, but given that it\u0027s based on a now ratified RFC, I think there is a possibility for it to evolve into a standard part of OpenAPI at some point. If using \u0060Microsoft.OpenAPI\u0060 is now what\u0027s required to _play_ in the ecosystem, I\u0027ll consider how things _might_ be able to hook up (in yet one more library). The Swagger/OpenAPI landscape has changed a lot over the years and, as a one-person team, it\u0027s hard for me to keep up with moving targets.\r\n\r\nTo your point, API Versioning does not derive policy; it can\u0027t. Only an API author knows what the policy is. This has long been a gap for APIs. Deprecation is one thing, but how is policy conveyed? When will a deprecated API sunset? Maybe a supported API has a known sunset policy in the future. Maybe an API has none of the above and just wants to advertise to clients here\u0027s where you find out what an API\u0027s stated policy is.  Even knowing where the OpenAPI document is located is not standard. Being able to send \u0060OPTIONS /api\u0060 and retrieve links to discover versions, policy, and OpenAPI information is useful; especially for tooling.\r\n\r\nAPI Versioning allows the sunset policy to be defined by API name, API version, or a combination of both. It is emitted any time an API author opts into _reporting_ API version information to clients. This could be for an entire application or just for one or more \u0060OPTIONS\u0060 endpoints. The configuration setup looks like [this](https://github.com/dotnet/aspnet-api-versioning/blob/main/examples/AspNetCore/WebApi/MinimalOpenApiExample/Program.cs#L25):\r\n\r\n\u0060\u0060\u0060c#\r\noptions.Policies.Sunset( 0.9 )\r\n                .Effective( DateTimeOffset.Now.AddDays( 60 ) )\r\n                .Link( \u0022policy.html\u0022 )\r\n                    .Title( \u0022Versioning Policy\u0022 )\r\n                    .Type( \u0022text/html\u0022 );\r\n\u0060\u0060\u0060\r\n\r\nI\u0027m still working on putting together comprehensive documentation, but you can get a sense of how it can be consumed by looking at [these tests](https://github.com/dotnet/aspnet-api-versioning/blob/main/src/Client/test/Asp.Versioning.Http.Client.Tests/net6.0/ApiVersionHandlerLoggerTTest.cs). It\u0027s important to know that the capabilities transcend OpenAPI. Documentation is great, but there is no substitution for real-time data. APIs need a way to advertise to their clients when new versions are available or when APIs will sunset without having to rely solely human interaction. If a client onboards to a supported API via an OpenAPI document which later becomes deprecated and will sunset, how would the client know? If API clients configure alerts from their telemetry, they can be notified when these events occur and take appropriate action, if any.",
        "createdAt": "2022-08-30T19:00:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43493#issuecomment-1232048280"
      },
      {
        "id": "IC_kwDOAQzde85PKkZD",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "@captainsafia,\r\n\r\nAn interesting issue came up in dotnet/aspnet-api-versioning#920 that is relevant to this issue and I would be relevant to share. \r\n\r\nSince deprecation isn\u0027t directly supported, there needs to be a bridge in Swashbuckle (or somewhere):\r\n\r\n\u0060\u0060\u0060c#\r\npublic class SwaggerDefaultValues : IOperationFilter\r\n{\r\n    public void Apply( OpenApiOperation operation, OperationFilterContext context ) =\u003E\r\n        operation.Deprecated |= context.ApiDescription.IsDeprecated(); // \u2190 API Versioning extension method\r\n}\r\n\u0060\u0060\u0060\r\n\r\nNow that we have grouping, consider:\r\n\r\n\u0060\u0060\u0060c#\r\nvar builder = WebApplication.CreateBuilder( args );\r\nvar services = builder.Services;\r\n\r\nservices.AddProblemDetails();\r\nservices.AddEndpointsApiExplorer();\r\nservices.AddApiVersioning()\r\n        .AddApiExplorer(options =\u003E options.GroupNameFormat = \u0022\u0027v\u0027VVV\u0022);\r\n\r\nservices.AddSwaggerGen( options =\u003E options.OperationFilter\u003CSwaggerDefaultValues\u003E() );\r\n\r\nvar app = builder.Build();\r\nvar orders = app.MapApiGroup( \u0022Orders\u0022 );\r\n\r\nvar v1 = orders.MapGroup( \u0022/orders\u0022 )\r\n               .HasDeprecatedApiVersion( 0.9 )\r\n               .HasApiVersion( 1.0 );\r\n\r\nv1.MapGet( \u0022/{id:int}\u0022, ( int id ) =\u003E new Order() { Id = id, Customer = \u0022John Doe\u0022 } )\r\n  .Produces\u003COrder\u003E()\r\n  .Produces( 404 );\r\n\u0060\u0060\u0060\r\n\r\nNo surprise, if you run this in the Swagger UI, things work as expected, which is to say:\r\n\r\n1. \u0060/orders/{id:int}\u0060 is listed in \u00600.9\u0060 and is shown as deprecated\r\n2. \u0060/orders/{id:int}\u0060 is listed in \u00601.0\u0060\r\n\r\nIf we then, bring in **Microsoft.AspNetCore.OpenApi** and add \u0060WithOpenApi\u0060 (in any form) like this:\r\n\r\n\u0060\u0060\u0060c#\r\nv1.MapGet( \u0022/{id:int}\u0022, ( int id ) =\u003E new Order() { Id = id, Customer = \u0022John Doe\u0022 } )\r\n  .WithOpenApi()\r\n  .Produces\u003COrder\u003E()\r\n  .Produces( 404 );\r\n\u0060\u0060\u0060\r\n\r\nthings fall down; specifically:\r\n\r\n\u2705  \u0060/orders/{id:int}\u0060 is listed in \u00600.9\u0060 and is shown as deprecated\r\n\u274C  \u0060/orders/{id:int}\u0060 is listed in \u00601.0\u0060 and is shown as deprecated\r\n\r\nThis happens because \u0060WithOpenApi\u0060 presumes that there is a \u00601:1\u0060 mapping between \u0060Endpoint\u0060 and \u0060OpenApiOperation\u0060, which isn\u0027t always true. In this scenario, the same \u0060OpenApiOperation\u0060 instance passed through the filter. Typically, you\u0027d honor any explicit setting on \u0060OpenApiOperation.Deprecated\u0060 by using \u0060|=\u0060. Here, that works on the first pass, but fails on the second. It\u0027s easily remedied by changing things to a direct assignment (e.g. \u0060=\u0060).\r\n\r\nIt\u0027s also worth noting that a \u0060IOperationFilter\u0060 is required for this to work. There\u0027s no method (I can think of), where you could make \u0060WithOpenApi\u0060 work because the value of \u0060Deprecated\u0060 can be conditional or otherwise fanned.\r\n\r\nAPI Versioning ensures things work through the API Explorer by _fanning out_ \u0060ApiDescription\u0060 instances for each API version (e.g. clone it). That avoids this type of scenario. This isn\u0027t the only case where this can happen. If you\u0027re versioning by media type, the you might only configure \u0060[Produces(\u0022application/json\u0022)]\u0060, but the API Explorer will add \u0060application/json; v=1.0\u0060, and so on, according the API version and endpoint combination being visited. I don\u0027t see how \u0060WithOpenApi\u0060 can support that type of configuration.\r\n\r\nIf the direction is an entirely new API and overhaul of what the API Explorer did that is purely OpenAPI focused, I can get onboard with that, but there are significant barriers to achieving parity with how things work today.\r\n\r\nAs an aside, there were previous gaps that were addressed long ago. I believe this is the last hurdle to achieve parity, even if Swashbuckle still doesn\u0027t honor them all (which is a separate issue).",
        "createdAt": "2022-11-27T04:44:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43493#issuecomment-1328170563"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Q2Eab",
    "title": "Add support for metadata-only endpoints to support path-based authorization, output caching, etc.",
    "url": "https://github.com/dotnet/aspnetcore/issues/43642",
    "createdAt": "2022-08-30T21:48:01Z",
    "lastUpdated": "2024-03-01T22:48:51Z",
    "body": "Related #43352\r\n\r\nThere are scenarios where it is desirable to affect the behavior of endpoint-aware middleware that runs in a request pipeline that will be handled by a non-endpoint-aware middleware (rather than an actual endpoint) such that the endpoint-aware middleware performs its operations as if the request-handling middleware were actually an endpoint.\r\n\r\nFor example, the static files middleware handles requests but **does not do so via endpoints**. Rather, it is a terminal middleware for requests with paths that map to static files in the configured file provider. The authorization middleware is an endpoint-aware middleware that uses metadata from the current request endpoint to perform authorization actions and will no-op for requests with no active endpoint. This means that one can\u0027t use the authorization middleware to enforce authorization for static files. The output cache middleware is similar.\r\n\r\nThe repo [AspNetCorePathAuthorization](https://github.com/DamianEdwards/AspNetCorePathAuthorization#endpoint-metadata-decorators-implementation-points) demonstrates a concept of \u0022metadata-only endpoints\u0022 that allows endpoints to be registered that have only metadata, and no actual endpoint handler. These endpoints only exist for the purpose of effectively adding metadata to arbitrary route paths, either adding metadata to existing real endpoints, or providing metadata for requests with no real endpoint but with a matching path. This metadata can then be used by endpoint-aware middleware to perform operations relevant for the current request.\r\n\r\nAn example of what this API could look like:\r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nvar app = builder.Build();\r\n\r\n// Add metadata to every request in the app\r\napp.MapMetadata(\u0022/{**subpath}\u0022, new { Whatever = \u0022This is on every request now!\u0022 });\r\n\r\n// Add metadata to all requests under /public in the app\r\napp.MapMetadata(\u0022/public/{**subpath}\u0022, new MessageMetadata(\u0022Hello from /public!\u0022));\r\n\r\n// Potentially terminal middleware\r\napp.Use(async (ctx, next) =\u003E\r\n{\r\n    // This obviously isn\u0027t a good example but something like the static files middleware effectively does this\r\n    if (ctx.Request.Path.StartsWithSegments(\u0022/public\u0022))\r\n    {\r\n        var message = ctx.GetEndpoint()?.Metadata.GetMetadata\u003CMessageMetadata\u003E()?.Message;\r\n\r\n        await ctx.Response.WriteAsync($\u0022{message ?? \u0022No message metadata found :(\u0022}\u0022);\r\n        return;\r\n    }\r\n\r\n    await next();\r\n});\r\n\r\napp.Run();\r\n\r\nrecord MessageMetadata(string Message);\r\n\u0060\u0060\u0060\r\n\r\nHigher level APIs like Authorization and Output Caching could be updated to leverage this with new top-level APIs for configuring authorization and output caching based on path, e.g.:\r\n\r\n\u0060\u0060\u0060csharp\r\n// Authorize all requests under /users\r\napp.RequireAuthorization(\u0022/users\u0022);\r\n\r\n// Disable authorization for all requests under /public\r\napp.AllowAnonymous(\u0022/public\u0022);\r\n\r\n// Cache all requests under /expensivestuff\r\napp.CacheOutput(\u0022/expensivestuff\u0022);\r\n\u0060\u0060\u0060 ",
    "upvotes": 0,
    "labels": [
      "Needs: Design",
      "feature-static-files",
      "feature-routing",
      "feature-output-caching",
      "area-minimal",
      "area-middleware"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85Jcms0",
        "parentId": null,
        "author": "rynowak",
        "content": "I worry about examples like these, and user not understand the blast radius of making a change:\r\n\r\n\u0060\u0060\u0060C#\r\n// Disable authorization for all requests under /public\r\napp.AllowAnonymous(\u0022/public\u0022);\r\n\r\n\u0060\u0060\u0060\r\n\r\nIf my mental model is correct this does define an endpoint, and that endpoint would be a candidate for path matching along with all the other endpoints, including the ability to cause ambiguities (HTTP 500).\r\n\r\nBasically these features will only work the way you when they don\u0027t overlap with other endpoints in your app. The sample here with \u0060AllowAnonymous\u0060 *feels like* it\u0027s applying a path-matching rule, but it\u0027s actually changing your route table. \r\n\r\nSo my feedback is that this feels like it\u0027s going to be misunderstood. It puts a lot of burden on the user to understand what happens behind the scenes. \r\n\r\nTake this example (modified from yours):\r\n\r\n\u0060\u0060\u0060C#\r\n// Disable authorization for all requests under /public\r\napp.AllowAnonymous(\u0022/public\u0022);\r\n\r\n// Cache all requests under /public\r\napp.CacheOutput(\u0022/public\u0022);\r\n\u0060\u0060\u0060\r\n\r\nWhat happens? I think most users would expect paths under \u0060/public\u0060 to be public and cached. I think it will cause an ambiguity in the route table and throw.",
        "createdAt": "2022-08-30T22:29:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43642#issuecomment-1232235316"
      },
      {
        "id": "IC_kwDOAQzde85JcxJB",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "@rynowak the ambiguities are resolved via a [custom \u0060IEndpointSelectorPolicy\u0060](https://github.com/DamianEdwards/AspNetCorePathAuthorization/blob/main/src/AspNetCore.Authorization.PathBased/EndpointMetadataDecoratorMatcherPolicy.cs) to avoid the issues you refer to. ~In other words, metadata-only endpoints will never be selected as matches during routing~ *(see below).* Ideally this would happen during the building of the route graph, rather than per-request, via a custom \u0060INodeBuilderPolicy\u0060 or some such.\r\n\r\n**Edit:** metadata-only endpoints **can** be selected as the match during routing, but **only** in the case there are no other candidates available. When they do match, they have a null handler, so while there\u0027s an active endpoint for the request to carry the metadata, there\u0027s no request delegate to execute.",
        "createdAt": "2022-08-30T23:36:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43642#issuecomment-1232278081"
      },
      {
        "id": "IC_kwDOAQzde85JmpS1",
        "parentId": null,
        "author": "captainsafia",
        "content": "It seems like this feature lends itself nicely to the design of \u0022route-based endpoint conventions\u0022 given that \u0022metadata-only endpoints\u0022 doesn\u0027t apply exclusively to routes that do not map to an endpoint handler.\r\n\r\nLooking through this particular example:\r\n\r\n\u0060\u0060\u0060csharp\r\n// Authorize all requests under /users\r\napp.RequireAuthorization(\u0022/users\u0022);\r\n\u0060\u0060\u0060\r\n\r\nI wonder how this feature would intersect with route groups. When and why would a user use the syntax above when they could also do:\r\n\r\n\u0060\u0060\u0060csharp\r\nvar users = app.MapGroup(\u0022/users\u0022);\r\nusers.RequireAuthorization();\r\n\u0060\u0060\u0060\r\n\r\nIs the assumption that route group-based conventions would intersect with \u0022metadata-only endpoints\u0022 in some way via the implementation?\r\n\r\n\u003E a concept of \u0022metadata-only endpoints\u0022 that allows endpoints to be registered that have only metadata, and no actual endpoint handler. \r\n\r\nHow common are these types of endpoints? Static file support seems like a big one. Are there other scenarios in app where a path is not going to be tied to a handler?\r\n",
        "createdAt": "2022-09-01T22:53:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43642#issuecomment-1234867381"
      },
      {
        "id": "IC_kwDOAQzde85Jmvhg",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "One would use \u0060app.RequireAuthorization(\u0022/users\u0022);\u0060 when it is known that there will be requests served under that path that *aren\u0027t* implemented as endpoints *or* they wish not to use route groups for some reason, e.g. there are files served by the static files middleware under that path.\r\n\r\nUltimately, the metadata on metadata-only endpoints (MOE) applies to any request that matches the route pattern for the MOE, which for the cases outlined would almost certainly include greedily capturing any sub-path. This is true whether there are actual endpoints in play or not, so they interact in that they compose, i.e. the metadata from the MOE is copied to the actual endpoint (in the [prototype implementation the endpoint is actually replaced by the \u0060MatcherPolicy\u0060 per request](https://github.com/DamianEdwards/AspNetCorePathAuthorization/blob/main/src/AspNetCore.Authorization.PathBased/EndpointMetadataDecoratorMatcherPolicy.cs#L102-L124) but if this were a first-class feature I\u0027d expect this to be done during the building of the route graph).\r\n\r\n\u003E How common are these types of endpoints? Static file support seems like a big one. Are there other scenarios in app where a path is not going to be tied to a handler?\r\n\r\nHard to say. Prior to ASP.NET Core 3.0 it was everything that was request-handling. Anything that didn\u0027t move to be endpoint-based would count, and I think things like Swashbuckle still use terminal middleware too.",
        "createdAt": "2022-09-01T23:19:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43642#issuecomment-1234892896"
      },
      {
        "id": "IC_kwDOAQzde85V9865",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-02-23T19:16:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43642#issuecomment-1442303673"
      },
      {
        "id": "IC_kwDOAQzde85gE5jv",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-06-28T18:35:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43642#issuecomment-1611897071"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85R3Tvf",
    "title": "Produces and Accepts should target IEndpointConventionBuilder",
    "url": "https://github.com/dotnet/aspnetcore/issues/43985",
    "createdAt": "2022-09-14T19:01:41Z",
    "lastUpdated": "2025-01-20T18:22:29Z",
    "body": "## Background and Motivation\r\n\r\nThis is a continuation of #41428. I first proposed this API there, but it only got partially approved. #43675 demonstrates there are scenarios when we want to apply this kind of metadata to a group.\u0060ProducesMetadata\u0060, but calling an extension method on group might be more convenient for app developers.\r\n\r\n## Proposed API\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Http;\r\n\r\npublic static class OpenApiRouteHandlerBuilderExtensions\r\n{\r\n    public static RouteHandlerBuilder Produces\u003CTResponse\u003E(\r\n        this RouteHandlerBuilder builder,\r\n        int statusCode = StatusCodes.Status200OK,\r\n        string? contentType = null,\r\n        params string[] additionalContentTypes);\r\n    public static RouteHandlerBuilder Produces(\r\n        this RouteHandlerBuilder builder,\r\n        int statusCode,\r\n        Type? responseType = null,\r\n        string? contentType = null,\r\n        params string[] additionalContentTypes);\r\n\u002B    public static TBuilder Produces\u003CTBuilder\u003E(\r\n\u002B        this TBuilder builder,\r\n\u002B        Type? responseType = null,\r\n\u002B        int statusCode = StatusCodes.Status200OK,\r\n\u002B        string? contentType = null,\r\n\u002B        params string[] additionalContentTypes) where TBuilder : IEndpointConventionBuilder;\r\n\r\n    public static RouteHandlerBuilder ProducesProblem(\r\n        this RouteHandlerBuilder builder,\r\n        int statusCode,\r\n        string? contentType = null);\r\n\u002B    public static TBuilder ProducesProblem\u003CTBuilder\u003E(\r\n\u002B        this TBuilder builder,\r\n\u002B        int statusCode,\r\n\u002B        string? contentType = null) where TBuilder : IEndpointConventionBuilder;\r\n\r\n    public static RouteHandlerBuilder ProducesValidationProblem(\r\n        this RouteHandlerBuilder builder,\r\n        int statusCode = StatusCodes.Status400BadRequest,\r\n        string? contentType = null);\r\n\u002B    public static TBuilder ProducesValidationProblem\u003CTBuilder\u003E(\r\n\u002B        this TBuilder builder,\r\n\u002B        int statusCode = StatusCodes.Status400BadRequest,\r\n\u002B        string? contentType = null) where TBuilder : IEndpointConventionBuilder;\r\n\r\n    public static RouteHandlerBuilder Accepts\u003CTRequest\u003E(\r\n        this RouteHandlerBuilder builder,\r\n        bool isOptional,\r\n        string contentType,\r\n        params string[] additionalContentTypes) where TRequest : notnull;\r\n    public static RouteHandlerBuilder Accepts(\r\n        this RouteHandlerBuilder builder,\r\n        Type requestType,\r\n        bool isOptional,\r\n        string contentType,\r\n        params string[] additionalContentTypes);\r\n    public static RouteHandlerBuilder Accepts(\r\n        this RouteHandlerBuilder builder,\r\n        Type requestType,\r\n        string contentType,\r\n        params string[] additionalContentTypes);\r\n\u002B    public static TBuilder Accepts\u003CTBuilder\u003E(\r\n\u002B        this TBuilder builder,\r\n\u002B        Type requestType,\r\n\u002B        bool isOptional,\r\n\u002B        string contentType,\r\n\u002B        params string[] additionalContentTypes) where TBuilder : IEndpointConventionBuilder;\r\n\u002B    public static TBuilder Accepts\u003CTBuilder\u003E(\r\n\u002B        this TBuilder builder,\r\n\u002B        Type requestType,\r\n\u002B        string contentType,\r\n\u002B        params string[] additionalContentTypes) where TBuilder : IEndpointConventionBuilder;\r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\n Now you\u0027re forced to manually add attributes using \u0060WithMetadata()\u0060:\r\n\r\n\u0060\u0060\u0060csharp\r\n// Describe that all APIs can return errors as JSON or plain text\r\nexamples.WithMetadata(new ProducesResponseTypeAttribute(typeof(ProblemDetails), 401, \u0022application/problem\u002Bjson\u0022, \u0022text/plain\u0022));\r\nexamples.WithMetadata(new ProducesResponseTypeAttribute(typeof(ProblemDetails), 403, \u0022application/problem\u002Bjson\u0022, \u0022text/plain\u0022));\r\n\u0060\u0060\u0060\r\n\r\nRather than\r\n\r\n\u0060\u0060\u0060csharp\r\n// Describe that all APIs can return errors as JSON or plain text\r\nexamples.ProducesProblem(401);\r\nexamples.ProducesProblem(403);\r\n\u0060\u0060\u0060\r\n\r\nI don\u0027t have as concrete a scenario for adding accepts metadata to an entire group. We could consider skipping this again, but I like having both for consistency. In theory, middleware or \u0060BindAsync\u0060 could be adding additional accepted content types to an entire group somehow. There are alternatives for types implementing \u0060BindAsync\u0060 like also implementing \u0060PopulateMetadata\u0060, but who knows? Maybe it\u0027s too dynamic to be implemented via a static interface.\r\n\r\n## Alternative Designs\r\n\r\n- Only target \u0060IEndpointConventionBuilder\u0060 for \u0060Produces\u0060, \u0060ProducesProblem\u0060 and \u0060ProducesValidationProblem\u0060, but not \u0060Accepts\u0060.\r\n- Add an overload for \u0060RouteGroupBuilder\u0060 rather than \u0060IEndpointConventionBuilder\u0060 even though that\u0027s less extensible.\r\n\r\n\r\n## Risks\r\n\r\nThese are just more extension methods that now show up in intellisense for all \u0060IEndpointConventionBuilder\u0060 types.\r\n\r\n",
    "upvotes": 1,
    "labels": [
      "api-suggestion",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85KVoPw",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2022-09-14T19:01:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43985#issuecomment-1247183856"
      },
      {
        "id": "IC_kwDOAQzde85KVqvH",
        "parentId": null,
        "author": "halter73",
        "content": "Here\u0027s a more in-depth explanation I gave in another issues filed by @commonsensesoftware for why we rejected this the first time.\r\n\r\n\u003E The \u0060Produces\u0060, \u0060ProducesProblem\u0060, \u0060ProducesValidationProblem\u0060 and \u0060Accepts\u0060 extension methods were notably excluded from this treatment even though I originally proposed we update these too. The main issue with updating these APIs were the type arguments. Having an additional type argument on top of \u0060TBuilder\u0060 is annoying because then you have to explicitly pass the \u0060TBuilder\u0060 argument then. And as mentioned in the [API Review Notes](https://github.com/dotnet/aspnetcore/issues/41428#issuecomment-1142635825), \u0060WithMetadata\u0060 can be used manually with attributes if needed. But as you note above, there is no public \u0060IProducesResponseTypeMetadata\u0060 implementation at the moment, so setting a response type on a non-\u0060RouteHandlerBuilder\u0060 is even less convenient than it otherwise would be.\r\n\u003E\r\n\u003E I\u0027ll admit that this API review was focused on the MapGroup use case and less on the API Versioning use case. I realize that the extension methods we left out are exactly the methods you proposed updating in this issue. Would you be okay with having to write something like \u0060.Accepts\u003CVersionedEndpointMetadataBuilder, RequestType\u003E(...)\u0060? Or is there something else you would prefer? Are there any other methods you\u0027d like to see use this \u0060TBuilder\u0060 pattern?\r\n\r\nhttps://github.com/dotnet/aspnetcore/issues/39604#issuecomment-1185106020",
        "createdAt": "2022-09-14T19:12:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43985#issuecomment-1247194055"
      },
      {
        "id": "IC_kwDOAQzde85LHDz0",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-09-27T22:31:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43985#issuecomment-1260141812"
      },
      {
        "id": "IC_kwDOAQzde86bJyHW",
        "parentId": null,
        "author": "murshex",
        "content": "Any update?",
        "createdAt": "2025-01-20T18:22:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43985#issuecomment-2603033046"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85SRqVt",
    "title": "Should a required array bound to query string throw an exception when omitted?",
    "url": "https://github.com/dotnet/aspnetcore/issues/44102",
    "createdAt": "2022-09-21T05:57:33Z",
    "lastUpdated": "2024-03-01T22:48:52Z",
    "body": "I am not sure whether the current implementation is a bug or a feature.\r\n\r\nIf we navigate to \u0060\u0022/\u0022\u0060  without specifying the required \u0060x\u0060, the framework does **not** throw an exception.\r\nInterestingly \u0060x\u0060 is set to a zero-length array.\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/\u0022, ([FromQuery] int[] x) =\u003E\r\n{\r\n    return $\u0022Length of x is : {x.Length}\u0022;\r\n});\r\n\u0060\u0060\u0060\r\n\r\n\r\nBut if I change the binding source from \u0060FromQuery\u0060 to \u0060FromBody\u0060, the framework behaves as expected. \r\nIt **does** throw an exception if the required \u0060x\u0060 is omitted.\r\n\r\n\r\n### Question:\r\nShould a required array bound to query string throw an exception when omitted?\r\n",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85K1FCM",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "Triage: This is by design. The behavior was introduced in .NET7. We will keep this issue open for more feedback and revisit it during our .NET8 Planning. \r\n",
        "createdAt": "2022-09-22T18:58:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44102#issuecomment-1255428236"
      },
      {
        "id": "IC_kwDOAQzde85K1FFG",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-09-22T18:58:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44102#issuecomment-1255428422"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85S6-NT",
    "title": "Docs: Minimal APIs - Middleware \u002B perf \u002B configs",
    "url": "https://github.com/dotnet/aspnetcore/issues/44259",
    "createdAt": "2022-09-29T16:56:38Z",
    "lastUpdated": "2024-03-04T21:37:29Z",
    "body": "- [x] Middlewares (All the middlewares  except rate limiting)\r\n- [x]  Rate limiting middleware\n- [x] Creating Middleware\n- [ ] Perf Considerations\r\n- [ ] Configuration (ports, json, environments, logging, webapplication builder, etc)\r\n- [ ] Why Minimal APIs (MapXXX vs Controllers, perf advantages, etc.)\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "Docs",
      "area-minimal",
      "net8_docathon"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85TW97u",
    "title": "[Analyzer] Warn about returning \u0060IEnumerable\u003CT\u003E\u0060 from action or minimal API",
    "url": "https://github.com/dotnet/aspnetcore/issues/44391",
    "createdAt": "2022-10-06T00:11:30Z",
    "lastUpdated": "2024-03-01T22:48:54Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n\u003E Returning \u0060IEnumerable\u003CT\u003E\u0060 from an action results in synchronous collection iteration by the serializer. The result is the blocking of calls and a potential for thread pool starvation. To avoid synchronous enumeration, use ToListAsync before returning the enumerable.\r\n\r\nSee https://learn.microsoft.com/en-us/aspnet/core/performance/performance-best-practices?view=aspnetcore-6.0#return-ienumerablet-or-iasyncenumerablet\n\n### Describe the solution you\u0027d like\n\nAn analyzer that warns when \u0060IEnumerable\u003CT\u003E\u0060 is returned from a controller or minimal API.\n\n### Additional context\n\n_No response_",
    "upvotes": 2,
    "labels": [
      "investigate",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85Luo8v",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2022-10-06T18:34:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44391#issuecomment-1270517551"
      },
      {
        "id": "IC_kwDOAQzde85Luo_l",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-06T18:34:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44391#issuecomment-1270517733"
      },
      {
        "id": "IC_kwDOAQzde85L6lrA",
        "parentId": null,
        "author": "halter73",
        "content": "API Review Notes:\r\n\r\n1. Is this going to look specifically for EF methods like \u0060ToList\u0060 vs \u0060ToListAsync\u0060?\r\n2. Are there other cases we can detect? A type that implements both \u0060IEnumerable\u0060 and \u0060IAsyncEnumerable\u0060? Do those exist?\r\n\r\nLet\u0027s wait until @JamesNK can explain it more next week.",
        "createdAt": "2022-10-10T17:59:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44391#issuecomment-1273649856"
      },
      {
        "id": "IC_kwDOAQzde85OJQlO",
        "parentId": null,
        "author": "halter73",
        "content": "API review notes:\r\n\r\n1. It\u0027s not clear if we need to special-case certain APIs like \u0060ToList()\u0060 on an \u0060IQueryable\u0060? That would be an EF analyzer.\r\n2. We think this might need some investigation to see what specifically triggers the analyzer warning.\r\n3. Should this even be a warning? Maybe if there\u0027s little to no risk of false positives, but this needs investigation.",
        "createdAt": "2022-11-10T23:47:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44391#issuecomment-1311050062"
      },
      {
        "id": "IC_kwDOAQzde85fNVZa",
        "parentId": null,
        "author": "PeterDraex",
        "content": "Does it ever make sense to use an interface as a return type for an action/minimal API?\r\nWhen the method has an interface as a return type, it gives the impression that you can change the concrete type that\u0027s being returned without making a breaking change. This is not true for action/minimal API, as the client must specify a concrete type when deserializing the method result. Changing the concrete type will very likely break the client code, even if the interface is still supported.\r\n\r\nI think this fundamental API design problem deserves a warning even more than the performance problem.",
        "createdAt": "2023-06-19T14:54:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44391#issuecomment-1597331034"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85T9idy",
    "title": "Add StringSyntax formats throughout source code",
    "url": "https://github.com/dotnet/aspnetcore/issues/44535",
    "createdAt": "2022-10-14T01:59:06Z",
    "lastUpdated": "2024-03-01T22:48:55Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nStringSyntaxAttribute is placed on strings to tell tooling what format the string will take. For example, regex, JSON, XML, date format string, etc. This is then used to provide helpful features such as completion of date format strings, regex/JSON/XML highlighting, analyzers, etc.\r\n\r\nWe should ensure all the ASP.NET Core strings have this attribute where appropriate, so ASP.NET Core APIs get tooling enhancements.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nAudit dotnet/aspnetcore source and add StringSyntax attribute with format strings as needed:\r\n\r\n- [x] CompositeFormat - The syntax identifier for strings containing composite formats for string formatting.\r\n- [x] DateOnlyFormat - The syntax identifier for strings containing date format specifiers.\r\n- [x] DateTimeFormat - The syntax identifier for strings containing date and time format specifiers.\r\n- [ ] EnumFormat - The syntax identifier for strings containing enum format specifiers.\r\n- [ ] GuidFormat - The syntax identifier for strings containing GUID format specifiers.\r\n- [x] Json - The syntax identifier for strings containing JavaScript Object Notation (JSON).\r\n- [ ] NumericFormat - The syntax identifier for strings containing numeric format specifiers.\r\n- [x] Regex - The syntax identifier for strings containing regular expressions. https://github.com/dotnet/aspnetcore/pull/40589\r\n- [x] TimeOnlyFormat - The syntax identifier for strings containing time format specifiers.\r\n- [ ] TimeSpanFormat - The syntax identifier for strings containing TimeSpan format specifiers.\r\n- [x] Uri - The syntax identifier for strings containing URIs.\r\n- [x] Xml - The syntax identifier for strings containing XML.\r\n\r\nThis list is from https://github.com/dotnet/runtime/blob/664d7c68d53f2465b79de25fdd6827007216239f/src/libraries/System.Private.CoreLib/src/System/Diagnostics/CodeAnalysis/StringSyntaxAttribute.cs#L38-L72\r\n\r\nI expect many of these won\u0027t have any usage - e.g. the format strings (except CompositeFormat) - but we should have Regex, Uri, Json and Xml.\r\n\r\n### Additional context\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "good first issue",
      "area-minimal",
      "help candidate"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85MM6zS",
        "parentId": null,
        "author": "danmoseley",
        "content": "Example of this kind of thing done previously in runtime\nhttps://github.com/dotnet/runtime/pull/67621 ",
        "createdAt": "2022-10-14T04:09:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1278454994"
      },
      {
        "id": "IC_kwDOAQzde85MOCqe",
        "parentId": null,
        "author": "blouflashdb",
        "content": "I would love to help here. ",
        "createdAt": "2022-10-14T09:36:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1278749342"
      },
      {
        "id": "IC_kwDOAQzde85MPgeA",
        "parentId": null,
        "author": "danmoseley",
        "content": "I have assigned to you @blouflashdb ",
        "createdAt": "2022-10-14T15:08:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1279133568"
      },
      {
        "id": "IC_kwDOAQzde85MQXtK",
        "parentId": null,
        "author": "blouflashdb",
        "content": "#44555 PR for CompositeFormat\r\n\r\nmore will follow soon.",
        "createdAt": "2022-10-14T19:04:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1279359818"
      },
      {
        "id": "IC_kwDOAQzde85MRsgN",
        "parentId": null,
        "author": "blouflashdb",
        "content": "@JamesNK I have a question about StringSyntaxAttribute.Uri. \r\n\r\nThere are some places where a RelativeIUri is passed as an parameter. I saw that optinal arguments can be added to StringSyntaxAttribute for example uriKind. How should the StringSyntaxAttribute look like for relative uri?\r\n\r\nThere is also one place in the code where a relative or absolute url can be passed to the methode. For Example WebViewManager.Navigate . How to handle this case?",
        "createdAt": "2022-10-15T09:42:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1279707149"
      },
      {
        "id": "IC_kwDOAQzde85MRzRu",
        "parentId": null,
        "author": "JamesNK",
        "content": "Good question. Thanks for thinking about this.\r\n\r\nI think \u0060StringSyntaxAttribute.Uri\u0060 should be used for both relative and absolute URLs. For \u0060UriKind\u0060, an example of it is on the \u0060Uri\u0060 ctor, and it looks like it the parameter named is passed as an argument on the attribute - https://github.com/dotnet/runtime/blob/9bcbf50d9ebe60cd83ed724179a5a503cbf03702/src/libraries/System.Private.Uri/src/System/Uri.cs#L405-L414\r\n\r\n@stephentoub I see you added Uri throughout dotnet/runtime in https://github.com/dotnet/runtime/pull/67621. Any extra input on these StringSyntaxAttribute usages?",
        "createdAt": "2022-10-15T12:23:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1279734894"
      },
      {
        "id": "IC_kwDOAQzde85MR0DP",
        "parentId": null,
        "author": "danmoseley",
        "content": "btw @CyrusNajmabadi just curious what the status of tooling support for these is? Do you expect them to all have an experience like regex has?",
        "createdAt": "2022-10-15T12:41:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1279738063"
      },
      {
        "id": "IC_kwDOAQzde85MR2IE",
        "parentId": null,
        "author": "blouflashdb",
        "content": "Does StringSyntaxAttribute also works on parameters like this? params string[] urls ?",
        "createdAt": "2022-10-15T13:31:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1279746564"
      },
      {
        "id": "IC_kwDOAQzde85MR20l",
        "parentId": null,
        "author": "JamesNK",
        "content": "I tested it, and yes it does:\r\n\r\n![image](https://user-images.githubusercontent.com/303201/195989775-a6c62fed-4b4c-4305-9565-c7567f1740c0.png)\r\n\r\nHowever, looks like there is a bug in Roslyn where it only applies it to the first string. New Roslyn issue: https://github.com/dotnet/roslyn/issues/64756",
        "createdAt": "2022-10-15T13:47:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1279749413"
      },
      {
        "id": "IC_kwDOAQzde85MR72O",
        "parentId": null,
        "author": "CyrusNajmabadi",
        "content": "\u003E Do you expect them to all have an experience like regex has?\r\n\r\nWe can add support if the language provides a suitable parser we can depend on. ",
        "createdAt": "2022-10-15T15:44:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1279769998"
      },
      {
        "id": "IC_kwDOAQzde85MR74E",
        "parentId": null,
        "author": "CyrusNajmabadi",
        "content": "My preference though would be to treat it like asp route strings. Have the bcl team own the integration points, not Roslyn. ",
        "createdAt": "2022-10-15T15:45:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1279770116"
      },
      {
        "id": "IC_kwDOAQzde85Mpckm",
        "parentId": null,
        "author": "blouflashdb",
        "content": "There are no public api parameters where StringFormatAttribute Xml can be added. ",
        "createdAt": "2022-10-20T17:52:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1285933350"
      },
      {
        "id": "IC_kwDOAQzde85Mpfo3",
        "parentId": null,
        "author": "blouflashdb",
        "content": "There are some for DateOnlyFormat \u0026 DateTimeFormat. Others I haven\u0027t checked yet.",
        "createdAt": "2022-10-20T18:04:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1285945911"
      },
      {
        "id": "IC_kwDOAQzde85MpoMp",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-20T18:37:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1285980969"
      },
      {
        "id": "IC_kwDOAQzde85MyZQK",
        "parentId": null,
        "author": "stephentoub",
        "content": "\u003E @stephentoub I see you added Uri throughout dotnet/runtime in https://github.com/dotnet/runtime/pull/67621. Any extra input on these StringSyntaxAttribute usages?\r\n\r\n@JamesNK, what are you looking for feedback on here?",
        "createdAt": "2022-10-24T01:22:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1288279050"
      },
      {
        "id": "IC_kwDOAQzde85Myb1d",
        "parentId": null,
        "author": "JamesNK",
        "content": "Original question was about arguments to URI strings. We figured it out.",
        "createdAt": "2022-10-24T01:35:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1288289629"
      },
      {
        "id": "IC_kwDOAQzde85Thois",
        "parentId": null,
        "author": "danmoseley",
        "content": "@blouflashdb is there more to do here, after your last changes? if so any interest in doing the last ones?",
        "createdAt": "2023-01-24T02:42:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1401325740"
      },
      {
        "id": "IC_kwDOAQzde85TkVuC",
        "parentId": null,
        "author": "blouflashdb",
        "content": "@danmoseley I will look into the remaining things aswell.",
        "createdAt": "2023-01-24T14:24:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1402035074"
      },
      {
        "id": "IC_kwDOAQzde85TlPFt",
        "parentId": null,
        "author": "danmoseley",
        "content": "Thanks @blouflashdb ",
        "createdAt": "2023-01-24T16:54:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1402270061"
      },
      {
        "id": "IC_kwDOAQzde85c16Sp",
        "parentId": null,
        "author": "abc516",
        "content": "Hi @danmoseley @JamesNK, I notice this issue hasn\u0027t had activity for a while. Do you still need someone to take on the remaining tasks (e.g. GuidFormat)? Thanks.",
        "createdAt": "2023-05-22T17:40:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1557636265"
      },
      {
        "id": "IC_kwDOAQzde85c4xva",
        "parentId": null,
        "author": "JamesNK",
        "content": "It\u0027s already assigned but it has been idle for a while. @blouflashdb Do you plan to keep looking at this?",
        "createdAt": "2023-05-23T02:06:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1558387674"
      },
      {
        "id": "IC_kwDOAQzde85c5_DD",
        "parentId": null,
        "author": "blouflashdb",
        "content": "Sorry, I cant work on it anymore.",
        "createdAt": "2023-05-23T07:36:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1558704323"
      },
      {
        "id": "IC_kwDOAQzde85c-QhV",
        "parentId": null,
        "author": "danmoseley",
        "content": "@blouflashdb thanks for the part you did. @abc516 thanks for taking on the rest!",
        "createdAt": "2023-05-23T16:57:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1559824469"
      },
      {
        "id": "IC_kwDOAQzde85k_9sq",
        "parentId": null,
        "author": "cansozbir",
        "content": "I wonder if NumericFormat is already done.",
        "createdAt": "2023-08-26T19:44:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1694489386"
      },
      {
        "id": "IC_kwDOAQzde85te4OO",
        "parentId": null,
        "author": "ShirAvneri",
        "content": "@danmoseley I noticed that the last PR that addressed this issue was closed.\nWould it be okay if I tried to work on this issue?",
        "createdAt": "2023-12-01T21:37:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44535#issuecomment-1836811150"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85T-5hV",
    "title": "Json parsing error behaviors control in Minimal Api",
    "url": "https://github.com/dotnet/aspnetcore/issues/44538",
    "createdAt": "2022-10-14T08:45:41Z",
    "lastUpdated": "2024-03-01T22:42:27Z",
    "body": "## Background and Motivation\r\n\r\nI was porting one of my API from controllers to minimal API. I noticed an unexpected behavior in minimal API. Like when I have invalid JSON in the request body in controllers the parameter binds to null and there is an error message added to \u0060ModelStateDictionary\u0060. But in minimal APIs, it throws a JsonException, most importantly the request doesn\u0027t even reach the handler method. I wasn\u0027t expecting that. Because in my mind minimal API suppose to give me more flexibility. \r\n\r\n## Proposed API\r\n\r\nThere can be a simple solution. Instead of throwing a JsonException why not just provide the handler with correct error messages?\r\n\r\n\u0060\u0060\u0060c#\r\npublic class ParsingError\r\n{\r\n   // necessary infors\r\n}\r\npublic class ParsingErrorParamaterAttribute : Attribute\r\n{\r\n   public ParsingErrorParamaterAttribute(string paramName) {}\r\n}\r\n\u0060\u0060\u0060\r\n\r\nHere \u0060ParsingError\u0060 will contain whole contexts about the wrong request body format. So for this to happen with custom bindings there needs to be a new overload of the BindAsync method. \r\n\r\n\u0060\u0060\u0060c#\r\n\r\npublic class Post\r\n{\r\n    public static ValueTask\u003CBindingResult\u003CT\u003E\u003E BindAsync(HttpContext context, ParameterInfo parameter)\r\n    {\r\n        // binding code\r\n    }\r\n}\r\npublic record BindingResult\u003CT\u003E(T? Model, ParsingError? Error);\r\n\u0060\u0060\u0060\r\n\r\nSo now custom bindings can also return ParsingError. \r\n\r\n## Usage Examples\r\n\r\nThe usage would be very simple. There will be just one extra parameter.\r\n\u0060\u0060\u0060C#\r\napp.MapPost(\u0022api/posts/\u0022,  (Post post, [ParsingErrorParamater(\u0022post\u0022)] ParsingError postParsingError) =\u003E \r\n{\r\n  // handler code\r\n});\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\n\r\nThere can be a configuration option to turn this on or off.\r\n\r\n",
    "upvotes": 2,
    "labels": [
      "api-suggestion",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85MSa2V",
        "parentId": null,
        "author": "davidfowl",
        "content": "Yes, we\u0027ve discussed this situation many times, but model state is *expensive*. I like the idea of a generic type that can capture the appropriate binding errors/context. What you have above doesn\u0027t quite work as well because a valid, non-null Post object still needs to be provided to the method. Instead, maybe we can have something like this:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapPost(\u0022api/posts/\u0022, (ModelState\u003CPost\u003E modelState) =\u003E \r\n{\r\n    if (!modelState.IsValid)\r\n    {\r\n        var exception = modelState.Exception;\r\n        return Results.Problem(\u0022Something is wrong\u0022);\r\n    }\r\n    var post = modelState.Model;\r\n\r\n    // Do stuff here ...\r\n});\r\n\u0060\u0060\u0060\r\n\r\nPS: You can build this today:\r\n\r\n\u0060\u0060\u0060C#\r\nrecord struct ModelState\u003CT\u003E(T? Model, Exception? Exception)\r\n{\r\n    public bool IsValid =\u003E Exception is null;\r\n\r\n    public static async ValueTask\u003CModelState\u003CT\u003E\u003E BindAsync(HttpContext httpContext)\r\n    {\r\n        try\r\n        {\r\n            var item = await httpContext.Request.ReadFromJsonAsync\u003CT\u003E();\r\n\r\n            return new(item, null);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            return new(default, ex);\r\n        }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nI\u0027m not married to the name ModelState. BindingResult sounds better \uD83D\uDE04 ",
        "createdAt": "2022-10-16T05:42:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44538#issuecomment-1279896981"
      },
      {
        "id": "IC_kwDOAQzde85MSk92",
        "parentId": null,
        "author": "ziaulhasanhamim",
        "content": "Yeah, that approach is much cleaner.\r\n\r\n\u003E we\u0027ve discussed this situation many times, but the model state is expensive\r\n\r\nThe model state would be expensive because of validations. But this would be inappropriate to call it ModelState.  It would just contain the errors regarding the parsing of JSON and nothing else. So I don\u0027t think it would be expensive to use \u0060BindingResult\u003CPost\u003E\u0060 over \u0060Post\u0060. It would rather simplify request body parsing.",
        "createdAt": "2022-10-16T10:14:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44538#issuecomment-1279938422"
      },
      {
        "id": "IC_kwDOAQzde85MS18g",
        "parentId": null,
        "author": "davidfowl",
        "content": "Correct, if it was simple like the above, then we can have a well-known type/shape for preserving the error that you can opt-into in your handler.",
        "createdAt": "2022-10-16T16:53:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44538#issuecomment-1280007968"
      },
      {
        "id": "IC_kwDOAQzde85MS2MB",
        "parentId": null,
        "author": "ziaulhasanhamim",
        "content": "So is there any plan to add a type like this \u0060Parsable\u003CT\u003E\u0060 or \u0060BindingResult\u003CT\u003E\u0060 in ASP.NET? Because I wouldn\u0027t like idea of giving default validation provider in minimal apis. I like the current approach where I can plug in any validators. But for json errors \u0060BindingResult\u003CT\u003E\u0060 is useful. ",
        "createdAt": "2022-10-16T16:58:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44538#issuecomment-1280008961"
      },
      {
        "id": "IC_kwDOAQzde85MS2hz",
        "parentId": null,
        "author": "davidfowl",
        "content": "Well you filed an issue, that\u0027s the first step. The team will see this issue and make a decision \uD83D\uDE04. It\u0027s still the weekend.",
        "createdAt": "2022-10-16T17:05:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44538#issuecomment-1280010355"
      },
      {
        "id": "IC_kwDOAQzde85Mern_",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-18T23:07:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44538#issuecomment-1283111423"
      },
      {
        "id": "IC_kwDOAQzde85kBQcQ",
        "parentId": null,
        "author": "rellis-of-rhindleton",
        "content": "(Update: I\u0027m looking at using MiniValidation and MinimalApis.Extensions for this. Actually might solve my problem.)\r\n\r\nThis issue is approaching a year old, but it\u0027s still open and I\u0027m having similar problems, so I\u0027ll chime in with some context.\r\n\r\n(BTW: Using the approach detailed above seems to break OpenAPI for that endpoint, which is a dealbreaker. Am I missing something?)\r\n\r\nWhat I need is the ability to control the error message and make it useful. I\u0027m not in love with ModelState but it allowed me to do that for bad request errors fairly easily, whether from within the handler method or in other ways. I\u0027m not finding a way to do this with minimal APIs.\r\n\r\nSay I omit a required property from an input model. A BadHttpRequestException is thrown:\r\n\r\n\u0060\u0060\u0060Failed to read parameter \u0022ModelType model\u0022 from the request body as JSON.\u0060\u0060\u0060\r\n\r\nThis message doesn\u0027t tell me what was wrong with the request. It also shares internal names, and it sounds like the problem happened on the server side, which is misleading.\r\n\r\nThe inner exception is a JsonException and looks like this:\r\n\r\n\u0060\u0060\u0060JSON deserialization for type \u0027ModelType\u0027 was missing required properties, including the following: propertyName\u0060\u0060\u0060\r\n\r\nThis message contains internal information which should not be shared, but it also contains information that *should* be shared. I\u0027d like to tell the client about missing required properties and which ones they are as part of a ProblemDetails response. But I can\u0027t get to that without scraping the string, which doesn\u0027t seem like a good idea. This seems to be a problem with System.Text.Json\u0027s JsonException and ThrowHelper, which starts out with the information I want but doesn\u0027t keep it separate. There may not be anything you can do about that.\r\n",
        "createdAt": "2023-08-14T20:58:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44538#issuecomment-1678051088"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85UJja7",
    "title": "Add a way to customize WebApplicationBuilder before Build is called",
    "url": "https://github.com/dotnet/aspnetcore/issues/44599",
    "createdAt": "2022-10-17T15:30:36Z",
    "lastUpdated": "2024-02-13T02:00:02Z",
    "body": "## Background and Motivation\r\n\r\nBefore the Minimal API there was [\u0060IStartupFilter\u0060](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.istartupfilter?view=aspnetcore-6.0) interface that allowed us to customize existing \u0060IApplicationBuilder\u0060. But I can\u0027t find something similar for \u0060WebApplicationBuilder\u0060.\r\n\r\nIt would be really useful to have such an option. For example, \u0060WebApplicationBuilder.Logging\u0060 immediately executes provided code, so it is impossible to use configuration sources or other services that can be added later.\r\n\r\nAs I found, Serilog developers faced the same issue [here](https://github.com/serilog/serilog-aspnetcore/blob/bf4ae072f7472d285c72f9a43f3eb4920e743110/src/Serilog.AspNetCore/SerilogWebHostBuilderExtensions.cs#L100): instead of simple calling \u0060WebApplicationBuilder.Logging.AddProvider\u0060 they have to do lazy initialization via \u0060ConfigureServices.AddSingleton(SerilogFactory)\u0060 and moreover implement their own \u0060ILoggerFactory\u0060 for that.\r\n \r\nSame thoughts may be also applied for \u0060WebApplication\u0060.\r\n\r\n## Proposed API\r\n\r\nAdd startup filters for \u0060WebApplicationBuilder\u0060 and \u0060WebApplication\u0060:\r\n\r\n\u0060\u0060\u0060csharp\r\npublic interface IWebApplicationBuilderStartupFilter\r\n{\r\n    Action\u003CWebApplicationBuilder\u003E Configure(Action\u003CWebApplicationBuilder\u003E next);\r\n}\r\n\r\npublic interface IWebApplicationStartupFilter\r\n{\r\n    Action\u003CWebApplication\u003E Configure(Action\u003CWebApplication\u003E next);\r\n}\r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\n\u0060\u0060\u0060csharp\r\npublic class WebApplicationBuilderStartupFilter : IWebApplicationBuilderStartupFilter\r\n{\r\n    public Action\u003CWebApplicationBuilder\u003E Configure(Action\u003CWebApplicationBuilder\u003E next)\r\n    {\r\n        return builder =\u003E\r\n        {\r\n            var someRequiredColdLogSettings = builder.Configuration.Get\u003CMyLoggerSettings\u003E();\r\n\r\n            builder.Logging.AddProvider(new MyLoggerProvider(someRequiredColdLogSettings));\r\n            \r\n            next(builder);\r\n        };\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\n\r\nInstead of some startup filters there may be some pre build/run actions.\r\n\r\n## Risks\r\n\r\nI\u0027m not an expert of AspNetCore, so if there is another way to solve my issue please tell me.\r\n\r\n",
    "upvotes": 2,
    "labels": [
      "api-suggestion",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85MW_vZ",
        "parentId": null,
        "author": "davidfowl",
        "content": "IStartupFilter should still work, albeit slightly differently.\r\n\r\n\u003E It would be really useful to have such an option. For example, WebApplicationBuilder.Logging immediately executes provided code, so it is impossible to use configuration sources or other services that can be added later.\r\n\r\nYou can use IHostingStartup for this, it still works (though it is tied to the IWebHostBuilder APIs).",
        "createdAt": "2022-10-17T15:56:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44599#issuecomment-1281096665"
      },
      {
        "id": "IC_kwDOAQzde85MXNTT",
        "parentId": null,
        "author": "kunga",
        "content": "\u003E IStartupFilter should still work, albeit slightly differently.\r\n\u003E \r\n\u003E \u003E It would be really useful to have such an option. For example, WebApplicationBuilder.Logging immediately executes provided code, so it is impossible to use configuration sources or other services that can be added later.\r\n\u003E \r\n\u003E You can use IHostingStartup for this, it still works (though it is tied to the IWebHostBuilder APIs).\r\n\r\nHow can I add \u0060IHostingStartup\u0060 to \u0060WebApplicationBuilder\u0060?\r\n\r\nBut anyway, I want to use whole \u0060WebApplicationBuilder\u0060, so that it\u0027s the recommended way to configure host for now.\r\n",
        "createdAt": "2022-10-17T16:39:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44599#issuecomment-1281152211"
      },
      {
        "id": "IC_kwDOAQzde85MX7-y",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E How can I add IHostingStartup to WebApplicationBuilder?\r\n\r\nhttps://learn.microsoft.com/en-us/aspnet/core/fundamentals/host/platform-specific-configuration?view=aspnetcore-6.0\r\n\r\n\r\nI\u0027m not too keen on adding something like this mostly because of it doesn\u0027t work on the other host. IHostingStartup are currently work on both old and new hosts.\r\n\r\nWhat sort of API are you looking for and what is your exact scenario?",
        "createdAt": "2022-10-17T19:07:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44599#issuecomment-1281343410"
      },
      {
        "id": "IC_kwDOAQzde85Mg1V9",
        "parentId": null,
        "author": "kunga",
        "content": "I\u0027m a developer of core libraries such as tracing, [logging](https://vostok.gitbook.io/logging) and metrics instrumentation.\r\n\r\nI want to create my \u0060Log\u0060, \u0060Tracer\u0060, \u0060MetricsContext\u0060 components and register them in the DI container. For that I want to use \u0060WebApplicationBuilder.Logging.AddProvider\u0060 and \u0060WebApplicationBuilder.Host.ConfigureServises\u0060. \r\n\r\nBut I can\u2019t create them immediately when some \u0060WebApplicationBuilder.AddMyComponents\u0060 method is called because they may require additional settings that user may provide later:\r\n\r\n\u0060\u0060\u0060csharp\r\nWebApplicationBuilder.AddMyComponents(); //some initial setup, creates Log and calls WebApplicationBuilder.Logging.AddProvider\r\nbuilder.Services.Configure\u003CMyLogOptions\u003E(...); //some additional log setup, that should be applied to created Log\r\n\u0060\u0060\u0060\r\n\r\nI can hack it and provide components factories to \u0060ConfigureServises\u0060, however it requires a lot of complex code like [these](https://github.com/serilog/serilog-aspnetcore/blob/bf4ae072f7472d285c72f9a43f3eb4920e743110/src/Serilog.AspNetCore/SerilogWebHostBuilderExtensions.cs#L100) or [these](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.Logging.Console/src/ConsoleLoggerExtensions.cs#L42).\r\n\r\nInstead, I can implement some \u0060IWebApplicationBuilderStartupFilter\u0060 that would be called right before \u0060WebApplicationBuilder.Build\u0060 method and create and register my components there.",
        "createdAt": "2022-10-19T09:06:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44599#issuecomment-1283675517"
      },
      {
        "id": "IC_kwDOAQzde85Mg5f-",
        "parentId": null,
        "author": "kunga",
        "content": "\u003E https://learn.microsoft.com/en-us/aspnet/core/fundamentals/host/platform-specific-configuration?view=aspnetcore-6.0\r\n\r\nAs I see, \u0060IHostingStartup\u0060 is usable only with the attribute, so I can\u0027t integrate it with my external Log/Tracing/Metrics libraries. \r\n\r\nIt is usable only in main assembly.",
        "createdAt": "2022-10-19T09:19:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44599#issuecomment-1283692542"
      },
      {
        "id": "IC_kwDOAQzde85Mg6LA",
        "parentId": null,
        "author": "kunga",
        "content": "\u003E I\u0027m not too keen on adding something like this mostly because of it doesn\u0027t work on the other host. IHostingStartup are currently work on both old and new hosts.\r\n\r\nAnd don\u0027t you plan to remove old builders at all in next .NET versions?)",
        "createdAt": "2022-10-19T09:21:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44599#issuecomment-1283695296"
      },
      {
        "id": "IC_kwDOAQzde85Mj9wZ",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E And don\u0027t you plan to remove old builders at all in next .NET versions?)\r\n\r\nNo.",
        "createdAt": "2022-10-19T19:49:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44599#issuecomment-1284496409"
      },
      {
        "id": "IC_kwDOAQzde85c042m",
        "parentId": null,
        "author": "peteraritchie",
        "content": "I went down this rabbit hole a bit and tried to implement \u0060IHostingStartup\u0060.  What I found was that the Nuget package that originally housed \u0060IHostingStartup\u0060 ([Microsoft.AspNetCore.Hosting.Abstractions](https://www.nuget.org/packages/Microsoft.AspNetCore.Hosting.Abstractions)) is deprecated.  \u0060IHostingStartup\u0060 is documented as now being housed in [Microsoft.AspNetCore.App.Ref](https://www.nuget.org/packages/Microsoft.AspNetCore.App.Ref) but that package is described as \u0022an internal implementation of the .NET Core SDK and is not meant to be used as a normal PackageReference.\u0022.\r\n\r\n[Use hosting startup assemblies in ASP.NET Core](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/host/platform-specific-configuration?view=aspnetcore-7.0) describes creating a class library or a console app to implement \u0060IHostingStartup\u0060.  But, when trying to add the nuget package included in the \u0060IHostingStartup\u0060 documentation (and ignoring _Use hosting startup assemblies in ASP.NET Core_ telling you to use \u0022Microsoft.AspNetCore.Hosting.Abstractions\u0022), the following error is the result:\r\n\r\n\u0060\u0060\u0060cmd\r\nNU1213: The package Microsoft.AspNetCore.App.Ref 7.0.5 has a package type DotnetPlatform that is incompatible with this project. \r\nPackage \u0027Microsoft.AspNetCore.App.Ref 7.0.5\u0027 has a package type \u0027DotnetPlatform\u0027 that is not supported by project\r\n\u0060\u0060\u0060\r\n\r\nQuestion @davidfowl, is \u0060IHostingStartup\u0060 and \u0060IStartupFilter\u0060 still supported in ASP.Net Core 7 and 8?",
        "createdAt": "2023-05-22T14:55:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44599#issuecomment-1557368230"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85UKUS9",
    "title": "Consider searching for ROS\u003Cchar\u003E variants of TryParse in RDF",
    "url": "https://github.com/dotnet/aspnetcore/issues/44603",
    "createdAt": "2022-10-17T18:00:06Z",
    "lastUpdated": "2024-03-01T22:42:28Z",
    "body": "We should consider searching for \u0060ReadOnlySpan\u003Cchar\u003E\u0060 overloads of \u0060TryParse\u0060 in \u0060RequestDelegateFactory\u0060 to support types like \u0060IPNetwork\u0060. Context: https://github.com/dotnet/aspnetcore/issues/8606#issuecomment-1281250234",
    "upvotes": 0,
    "labels": [
      "investigate",
      "enhancement",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85Mposh",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-20T18:39:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44603#issuecomment-1285983009"
      },
      {
        "id": "IC_kwDOAQzde85Mpouk",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-20T18:39:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44603#issuecomment-1285983140"
      },
      {
        "id": "IC_kwDOAQzde85StsxD",
        "parentId": null,
        "author": "Tratcher",
        "content": "IPNetwork may become obsolete. https://github.com/dotnet/runtime/issues/79946",
        "createdAt": "2023-01-18T20:09:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44603#issuecomment-1387711555"
      },
      {
        "id": "IC_kwDOAQzde85UuZDH",
        "parentId": null,
        "author": "mitchdenny",
        "content": "Sounds like there will be an alternative type though (e.g. IPSubnet).",
        "createdAt": "2023-02-07T21:03:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44603#issuecomment-1421447367"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85UhiAy",
    "title": "Incorrect OpenAPI schema generated for implicit services/special types/parseables",
    "url": "https://github.com/dotnet/aspnetcore/issues/44677",
    "createdAt": "2022-10-21T09:55:04Z",
    "lastUpdated": "2024-09-10T20:04:44Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI\u0027m working on a talk I\u0027ll be giving soon on new features in ASP.NET Core 7 and Minimal APIs, and in the process of updating my [sample application](https://github.com/martincostello/aspnet-core-7-samples) for RC2 I\u0027ve noticed a number of issues with the OpenAPI schema generated for various endpoints in the sample.\r\n\r\n1. Using [implicit service resolution](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-2/#infer-api-controller-action-parameters-that-come-from-services) for an [MVC controller](https://github.com/martincostello/aspnet-core-7-samples/blob/f0d3dccb4592afdd0dd49e984f3ef836158e1b69/src/TodoApp/SampleController.cs#L11-L16) renders the service as an object in the OpenAPI schema and as a query string parameter.\r\n\r\n![image](https://user-images.githubusercontent.com/1439341/197166064-1eaaa438-3dd9-49b5-b85a-ad36cfffef4b.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1439341/197166119-40c0f46c-b7f7-4b44-a4f8-d831b8240b8b.png)\r\n\r\n2. Using [TryParse() support](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-3/#bind-using-tryparse-in-mvc-and-api-controllers) for parameters for an [MVC controller](https://github.com/martincostello/aspnet-core-7-samples/blob/f0d3dccb4592afdd0dd49e984f3ef836158e1b69/src/TodoApp/SampleController.cs#L21-L25) has a similar issue, and renders the query string parameter as an object mirroring the C# model, rather than as a string.\r\n\r\n![image](https://user-images.githubusercontent.com/1439341/197166340-1291e735-3622-48c9-bf26-8785c8e10756.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1439341/197166384-d91d5370-f39b-47a6-8fd4-5edee8d7afa1.png)\r\n\r\n3. Using the [support for \u0060Stream\u0060 and \u0060PipeReader\u0060](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-net-7-preview-1/#bind-the-request-body-as-a-stream-or-pipereader) to consume the request body shows both [\u0060Stream\u0060](https://github.com/martincostello/aspnet-core-7-samples/blob/f0d3dccb4592afdd0dd49e984f3ef836158e1b69/src/TodoApp/SampleEndpoints.cs#L171-L192) and [\u0060PipeReader\u0060](https://github.com/martincostello/aspnet-core-7-samples/blob/f0d3dccb4592afdd0dd49e984f3ef836158e1b69/src/TodoApp/SampleEndpoints.cs#L194-L201) in the schema.\r\n\r\n![image](https://user-images.githubusercontent.com/1439341/197167499-1b61fa59-499e-49bf-8ca8-11577501f3f4.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1439341/197167543-34a6abef-257e-4e1e-a856-9c08add0b8ea.png)\r\n\n\n### Expected Behavior\n\n1. \u0060MyService\u0060 is not shown as an endpoint parameter and is not included in the OpenAPI schemas.\r\n2. The \u0060name\u0060 parameter is shown as a simple string and \u0060Name\u0060 is not included in the OpenAPI schemas.\r\n3. \u0060Stream\u0060 and \u0060PipeReader\u0060 are not included in the OpenAPI schemas.\r\n\n\n### Steps To Reproduce\n\n1. Clone the [martincostello/aspnet-core-7-samples](https://github.com/martincostello/aspnet-core-7-samples) repository.\r\n2. Build and run the application.\r\n3. View the rendered OpenAPI schema with Swagger UI at \u0060https://localhost:5001/swagger-ui/index.html\u0060.\r\n\n\n### Exceptions (if any)\n\nNone.\n\n### .NET Version\n\n7.0.100-rc.2.22477.23\n\n### Anything else?\n\n\u0060\u0060\u0060sh\r\n\u003E dotnet --info\r\n.NET SDK:\r\n Version:   7.0.100-rc.2.22477.23\r\n Commit:    0a5360315a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22000\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.100-rc.2.22477.23\\\r\n\r\nHost:\r\n  Version:      7.0.0-rc.2.22472.3\r\n  Architecture: x64\r\n  Commit:       550605cc93\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85MvWyJ",
        "parentId": null,
        "author": "captainsafia",
        "content": "Great sample app! Thanks for putting it together.\r\n\r\n\u003E Using [implicit service resolution](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-2/#infer-api-controller-action-parameters-that-come-from-services) for an [MVC controller](https://github.com/martincostello/aspnet-core-7-samples/blob/f0d3dccb4592afdd0dd49e984f3ef836158e1b69/src/TodoApp/SampleController.cs#L11-L16) renders the service as an object in the OpenAPI schema and as a query string parameter.\r\n\r\nIt looks like the \u0060ApiExplorer\u0060 is producing an \u0060ApiParameterDescription\u0060 for the service parameter and it ends up being treated as a query parameter [by the fallback logic in Swashbuckle](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/blob/4a28652059c93dc95146d962df645bff8953e39f/src/Swashbuckle.AspNetCore.SwaggerGen/SwaggerGenerator/SwaggerGenerator.cs#L331-L333). I\u0027m not totally familiar with MVC\u0027s model binding logic but my suspicion is that we\u0027ll have to update [this](https://github.com/dotnet/aspnetcore/blob/8c19ce1bd7b91b72a4b8a5c96183b0258221d99e/src/Mvc/Mvc.ApiExplorer/src/DefaultApiDescriptionProvider.cs#L162) to not generate a parameter description for parameters that might be implicit services. Paging @brunolins16 for model binding insights.\r\n\r\n\u003E Using [TryParse() support](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-3/#bind-using-tryparse-in-mvc-and-api-controllers) for parameters for an [MVC controller](https://github.com/martincostello/aspnet-core-7-samples/blob/f0d3dccb4592afdd0dd49e984f3ef836158e1b69/src/TodoApp/SampleController.cs#L21-L25) has a similar issue, and renders the query string parameter as an object mirroring the C# model, rather than as a string.\r\n\r\nI suspect the same thing happening for services is happening here. We need to update the pseudo-model binding logic in the ApiExplorer to match the new behavior in MVC.\r\n\r\n\u003E Using the [support for Stream and PipeReader](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-net-7-preview-1/#bind-the-request-body-as-a-stream-or-pipereader) to consume the request body shows both [Stream](https://github.com/martincostello/aspnet-core-7-samples/blob/f0d3dccb4592afdd0dd49e984f3ef836158e1b69/src/TodoApp/SampleEndpoints.cs#L171-L192) and [PipeReader](https://github.com/martincostello/aspnet-core-7-samples/blob/f0d3dccb4592afdd0dd49e984f3ef836158e1b69/src/TodoApp/SampleEndpoints.cs#L194-L201) in the schema.\r\n\r\nWe\u0027re using Swahsbuckle\u0027s schema generator here (see [this PR](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/pull/2441)). It looks like the schema generator does not support generating schemes for those two types yet...",
        "createdAt": "2022-10-21T22:06:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44677#issuecomment-1287482505"
      },
      {
        "id": "IC_kwDOAQzde85Mvp_r",
        "parentId": null,
        "author": "brunolins16",
        "content": "\u003E 1. Using [implicit service resolution](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-preview-2/#infer-api-controller-action-parameters-that-come-from-services) for an [MVC controller](https://github.com/martincostello/aspnet-core-7-samples/blob/f0d3dccb4592afdd0dd49e984f3ef836158e1b69/src/TodoApp/SampleController.cs#L11-L16) renders the service as an object in the OpenAPI schema and as a query string parameter.\r\n\r\n@martincostello implicit service resolution, as all other implicit source resolution, are enable by default for **API Controllers** only, so you need to add the \u0060ApiControllerAttribute\u0060 and this should be fixed",
        "createdAt": "2022-10-22T00:41:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44677#issuecomment-1287561195"
      },
      {
        "id": "IC_kwDOAQzde85Mvx0L",
        "parentId": null,
        "author": "brunolins16",
        "content": "\u003E I suspect the same thing happening for services is happening here. We need to update the pseudo-model binding logic in the ApiExplorer to match the new behavior in MVC.\r\n\r\nA type with \u0060TryParse\u0060 is consider Simple Type and \u0060Metadata.IsComplexType\u0060 should be false and report it correctly. Let me take a further look at how this code works to see if I can understand what I happening. ",
        "createdAt": "2022-10-22T02:49:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44677#issuecomment-1287593227"
      },
      {
        "id": "IC_kwDOAQzde85MwA9G",
        "parentId": null,
        "author": "martincostello",
        "content": "Confirmed that adding \u0060[ApiController]\u0060 fixed item 1.",
        "createdAt": "2022-10-22T07:08:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44677#issuecomment-1287655238"
      },
      {
        "id": "IC_kwDOAQzde85MwDml",
        "parentId": null,
        "author": "martincostello",
        "content": "@captainsafia Do you think this is the right fix for item 3, or have I got the best representation for the data here completely wrong and it just \u0022fixes it\u0022 by accident?\r\n\r\nhttps://github.com/domaindrivendev/Swashbuckle.AspNetCore/compare/master...martincostello:Swashbuckle.AspNetCore:handle-stream-and-pipereader\r\n\r\nTesting locally, \u0060Stream\u0060 and \u0060PipeReader\u0060 stop being returned in the schema with these changes.\r\n\r\n![image](https://user-images.githubusercontent.com/1439341/197327338-0dd7adc7-e528-4fed-b7e7-b7590c877384.png)\r\n\r\n",
        "createdAt": "2022-10-22T07:46:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44677#issuecomment-1287666085"
      },
      {
        "id": "IC_kwDOAQzde85MwFfd",
        "parentId": null,
        "author": "martincostello",
        "content": "@brunolins16 I had a quick look at the code. I didn\u0027t fully dig through and understand it all, but I wondered if this line needs changing to use \u0060string\u0060 for the type if \u0060IsParseableType\u0060 is \u0060true\u0060?\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/8c19ce1bd7b91b72a4b8a5c96183b0258221d99e/src/Mvc/Mvc.Abstractions/src/ModelBinding/ModelMetadata.cs#L658\r\n\r\n\u0060\u0060\u0060diff\r\n- UnderlyingOrModelType = Nullable.GetUnderlyingType(ModelType) ?? ModelType;\r\n\u002B UnderlyingOrModelType = IsParseableType ? typeof(string) : Nullable.GetUnderlyingType(ModelType) ?? ModelType;\r\n\u0060\u0060\u0060",
        "createdAt": "2022-10-22T08:15:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44677#issuecomment-1287673821"
      },
      {
        "id": "IC_kwDOAQzde85Mwwk7",
        "parentId": null,
        "author": "brunolins16",
        "content": "\u003E @brunolins16 I had a quick look at the code. I didn\u0027t fully dig through and understand it all, but I wondered if this line needs changing to use \u0060string\u0060 for the type if \u0060IsParseableType\u0060 is \u0060true\u0060?\r\n\u003E \r\n\u003E https://github.com/dotnet/aspnetcore/blob/8c19ce1bd7b91b72a4b8a5c96183b0258221d99e/src/Mvc/Mvc.Abstractions/src/ModelBinding/ModelMetadata.cs#L658\r\n\u003E \r\n\u003E \u0060\u0060\u0060diff\r\n\u003E - UnderlyingOrModelType = Nullable.GetUnderlyingType(ModelType) ?? ModelType;\r\n\u003E \u002B UnderlyingOrModelType = IsParseableType ? typeof(string) : Nullable.GetUnderlyingType(ModelType) ?? ModelType;\r\n\u003E \u0060\u0060\u0060\r\n\r\nI think is not possible to simply change it because it might affect the binding logic. However we might be able to apply the same idea in the API Explorer but we will need to think how can we differentiate from primitives (\u0060int\u0060, \u0060bool\u0060, etc.). \r\n\r\nI need to check what we are doing for Minimal Endpoints. \r\n\r\nBTW: Types  with \u0060Type Converter\u0060 have the same problem ",
        "createdAt": "2022-10-22T16:39:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44677#issuecomment-1287850299"
      },
      {
        "id": "IC_kwDOAQzde85M2aay",
        "parentId": null,
        "author": "brunolins16",
        "content": "@martincostello Maybe we can do the same as here \u0060IsPrimitive\u0060:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/dcbfb829777da26078b31bace83736e6f3bf3295/src/Mvc/Mvc.ApiExplorer/src/EndpointMetadataApiDescriptionProvider.cs#L291-L292\r\n\r\nI will do some experiments and create a PR if it works. Thanks for reporting this bug.\r\n",
        "createdAt": "2022-10-24T17:02:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44677#issuecomment-1289332402"
      },
      {
        "id": "IC_kwDOAQzde85M3kGt",
        "parentId": null,
        "author": "brunolins16",
        "content": "I give it a try but, if I got it correctly, [\u0060IsPrimitive\u0060 ](https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/RuntimeHelpers.cs,90) is based on the [CorElementType](https://source.dot.net/System.Private.CoreLib/R/74bfbae3c61889bc.html) that means some types will not be covered (that probably make sense for OpenAPI), eg. \u0060decimal\u0060 or \u0060guid\u0060, and will be reported as \u0060string\u0060. That is probably the cause of https://github.com/dotnet/aspnetcore/issues/39886",
        "createdAt": "2022-10-24T21:22:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44677#issuecomment-1289634221"
      },
      {
        "id": "IC_kwDOAQzde85M8NrE",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E @captainsafia Do you think this is the right fix for item 3, or have I got the best representation for the data here completely wrong and it just \u0022fixes it\u0022 by accident?\r\n\u003E \r\n\u003E [domaindrivendev/Swashbuckle.AspNetCore@master...martincostello:Swashbuckle.AspNetCore:handle-stream-and-pipereader](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/compare/master...martincostello:Swashbuckle.AspNetCore:handle-stream-and-pipereader)\r\n\u003E \r\n\u003E Testing locally, \u0060Stream\u0060 and \u0060PipeReader\u0060 stop being returned in the schema with these changes.\r\n\u003E \r\n\u003E ![image](https://user-images.githubusercontent.com/1439341/197327338-0dd7adc7-e528-4fed-b7e7-b7590c877384.png)\r\n\r\nI _think_ that should be sufficient given the version of OpenAPI schema that Swashbuckle is currently targeting. I went down a bit of a rabbit hole trying to figure out what the best type/format to use is given the different OAS versions but this seems to be appropriate for v3.0.",
        "createdAt": "2022-10-25T16:45:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44677#issuecomment-1290853060"
      },
      {
        "id": "IC_kwDOAQzde85M8OTg",
        "parentId": null,
        "author": "martincostello",
        "content": "Great, thanks for looking @captainsafia - I\u0027ll open a PR against Swashbuckle with that change shortly \uD83D\uDC4D ",
        "createdAt": "2022-10-25T16:47:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44677#issuecomment-1290855648"
      },
      {
        "id": "IC_kwDOAQzde85NH3qd",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-27T18:27:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44677#issuecomment-1293908637"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85VFhMJ",
    "title": "Custom Authorization Attributes on Min APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/44783",
    "createdAt": "2022-10-28T16:39:11Z",
    "lastUpdated": "2024-02-27T16:39:27Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nOn our legacy ApiControllers, we have our own customer Authorization Attributes, for instance:\r\n\r\n[FeatureAuthorize(Features.ManageRegions]\r\n\r\nWe would like to apply the same to MinAPI, both with attributes and fluent\n\n### Describe the solution you\u0027d like\n\n\r\napp.MapGet(\u0022/login\u0022, [FeatureAuthorize(Features.ManageRegions] () =\u003E \u0022This endpoint is those users with this feature assigned.\u0022);\r\n\r\napp.MapGet(\u0022/login2\u0022, () =\u003E \u0022This endpoint also requires this feature.\u0022)\r\n   .FeatureAuthorize(Features.ManageRegions);\r\n\r\nI guess the former might work out of the box... but how would the latter be accomplished, i.e. a fluent syntax for associating a customer authorization attribute with a Map call (via an extension method).\r\n\r\n\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-auth",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85NNBNC",
        "parentId": null,
        "author": "johnkwaters",
        "content": "Use same approach as for AllowAnonymous:\r\n\r\n\u0060\u0060\u0060\r\npublic static class CustomAuthorizationEndpointConventionBuilderExtensions\r\n{\r\n    /// \u003Csummary\u003E\r\n    /// Requires that the caller have access to the specified feature.\r\n    /// \u003C/summary\u003E\r\n    /// \u003Cparam name=\u0022builder\u0022\u003EThe endpoint convention builder.\u003C/param\u003E\r\n    /// \u003Creturns\u003EThe original convention builder parameter.\u003C/returns\u003E\r\n    public static TBuilder RequireFeature\u003CTBuilder\u003E(this TBuilder builder, params Feature[] features)\r\n        where TBuilder : IEndpointConventionBuilder\r\n    {\r\n        builder.Add(endpointBuilder =\u003E { endpointBuilder.Metadata.Add(\r\n            new FeatureAuthorizeAttribute(features)); });\r\n        return builder;\r\n    }\r\n}\r\n\r\n\u0060\u0060\u0060\r\nAnd\r\n\r\n\u0060\u0060\u0060\r\napp.MapGet(\u0022/api/viewusers\u0022, () =\u003E \u0022I have access to ViewUsers!\u0022)\r\n    .RequireFeature(Feature.ViewUsers);\r\n\r\n\r\n\u0060\u0060\u0060\r\n\r\n",
        "createdAt": "2022-10-28T17:22:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1295258434"
      },
      {
        "id": "IC_kwDOAQzde85NN1zH",
        "parentId": null,
        "author": "Tratcher",
        "content": "We don\u0027t recommend custom auth attributes anymore. What component do you expect to run them?\r\n\r\nMost of this logic should move into authorization policies.",
        "createdAt": "2022-10-28T21:14:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1295473863"
      },
      {
        "id": "IC_kwDOAQzde85NOdjy",
        "parentId": null,
        "author": "davidfowl",
        "content": "I\u0027m not 100% sure this is easy to do with authorization policies but will be easier in the next version on .NET. You\u0027ll can do this in multiple ways today but using custom metadata makes using authorization policies challenging. In .NET 7 I would use a filter for this until we get https://github.com/dotnet/aspnetcore/issues/44551",
        "createdAt": "2022-10-28T23:25:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1295636722"
      },
      {
        "id": "IC_kwDOAQzde85NOkQq",
        "parentId": null,
        "author": "davidfowl",
        "content": "I should add, this is easier with minimal APIs because you can now directly add an auth policy directly to endpoints. That would allow you to write one like above inline on the endpoint ",
        "createdAt": "2022-10-29T00:39:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1295664170"
      },
      {
        "id": "IC_kwDOAQzde85NOkYB",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u0060\u0060\u0060C#\r\npublic static TBuilder RequireFeature\u003CTBuilder\u003E(this TBuilder builder, params Feature[] features)\r\n    where TBuilder : IEndpointConventionBuilder\r\n{\r\n    builder.RequireAuthorization(pb =\u003E pb.RequireAssertion(context =\u003E HasFeatures(context, features)));\r\n    return builder;\r\n}\r\n\r\nprivate static bool HasFeatures(AuthorizationHandlerContext context, Feature[] features)\r\n{\r\n    // Write logic here\r\n    return true;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nOR\r\n\r\n\u0060\u0060\u0060C#\r\npublic static TBuilder RequireFeature\u003CTBuilder\u003E(this TBuilder builder, params Feature[] features)\r\n    where TBuilder : IEndpointConventionBuilder\r\n{\r\n    builder.RequireAuthorization(pb =\u003E pb.AddRequirements(new FeatureRequirement(features)));\r\n    return builder;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThis lets you directly add requirements to an auth policy.",
        "createdAt": "2022-10-29T00:41:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1295664641"
      },
      {
        "id": "IC_kwDOAQzde85NO1Y_",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/login\u0022, [FeatureAuthorize(Features.ManageRegions)] () =\u003E \u0022This endpoint is those users with this feature assigned.\u0022);\r\n\u0060\u0060\u0060\r\n\r\nThis pattern is much harder to pull off. The attribute will be part of the metadata since that happens automagically but flowing that data to authentication handlers is much harder.\r\n",
        "createdAt": "2022-10-29T04:50:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1295734335"
      },
      {
        "id": "IC_kwDOAQzde85NRBA3",
        "parentId": null,
        "author": "jxwaters",
        "content": "My current implementation of this authorization attribute uses policies under the hood, and automatically generates a policy name based on the list of features enum names, concatenated. How could this more cleanly be expressed using your recommended approach, without the custom attribute?\r\n\r\n1. The custom attribute, which sets the Policy Name:\r\n\r\n\u0060\u0060\u0060\r\ninternal class FeatureAuthorizeAttribute : AuthorizeAttribute\r\n{\r\n    const string FEATURE_POLICY_PREFIX = \u0022Feature\u0022;\r\n\r\n    public FeatureAuthorizeAttribute(params Feature[] features) =\u003E Features = features;\r\n\r\n    public Feature[] Features\r\n    {\r\n        get\r\n        {\r\n            var policyFeature = Policy;\r\n            foreach (var fp in policyFeature.Substring(FEATURE_POLICY_PREFIX.Length \u002B 1).Split(\u0027,\u0027))\r\n            {\r\n                var tryParse = Enum.TryParse\u003CFeature\u003E(fp, out var feature);\r\n                if (tryParse)\r\n                {\r\n                    features.Add(feature);\r\n                }\r\n            }\r\n            return default;\r\n        }\r\n        set =\u003E Policy = $\u0022{FEATURE_POLICY_PREFIX}_{string.Join(\u0027,\u0027, value)}\u0022;\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n2, The custom policy provider that resolves policies with this name pattern to a FeatureRequirement:\r\n\r\n\u0060\u0060\u0060\r\npublic class CustomPolicyProvider : IAuthorizationPolicyProvider\r\n{\r\n\r\n    public Task\u003CAuthorizationPolicy?\u003E GetPolicyAsync(string policyName)\r\n    {\r\n        var isFP = policyName.StartsWith(FEATURE_POLICY_PREFIX, StringComparison.OrdinalIgnoreCase);\r\n        if (isFP)\r\n        {\r\n            var features = new List\u003CFeature\u003E();\r\n            foreach (var fp in policyName.Substring(FEATURE_POLICY_PREFIX.Length \u002B 1).Split(\u0027,\u0027))\r\n            {\r\n                var tryParse = Enum.TryParse\u003CFeature\u003E(fp, out var feature);\r\n                if (tryParse)\r\n                {\r\n                    features.Add(feature);\r\n                }\r\n            }\r\n            var policy = new AuthorizationPolicyBuilder();\r\n            policy.AddRequirements(new FeatureRequirement(features.ToArray()));\r\n            return Task.FromResult(policy.Build());\r\n        }\r\n        return Task.FromResult\u003CAuthorizationPolicy\u003E(null);\r\n    }\r\n\r\n\u0060\u0060\u0060\r\n\r\n3. The Feature Requirement:\r\n\r\n\u0060\u0060\u0060\r\npublic class FeatureRequirement : IAuthorizationRequirement\r\n{\r\n    public Feature[] RequiredFeatures { get; set; }\r\n\r\n    public FeatureRequirement(Feature[] requiredFeatures)\r\n    {\r\n        RequiredFeatures = requiredFeatures;\r\n    }\r\n}\r\n\r\n\u0060\u0060\u0060\r\n\r\n4. The FeatureHandler\r\n\r\nNOTE the IUserContext is populated by middleware that runs before the Auth pipeline, and contains the features that the user has\r\n\r\n\u0060\u0060\u0060\r\npublic class FeatureHandler : AuthorizationHandler\u003CFeatureRequirement\u003E\r\n{\r\n    private readonly IUserContext _userContext;\r\n\r\n    public FeatureHandler(IUserContext userContext)\r\n    {\r\n        _userContext = userContext;\r\n    }\r\n\r\n    protected override async Task HandleRequirementAsync(AuthorizationHandlerContext context,\r\n        FeatureRequirement requirement)\r\n    {\r\n        if (context.User.Identity?.IsAuthenticated ?? false)\r\n        {\r\n            if (_userContext.Features.Any(t =\u003E requirement.RequiredFeatures.Contains(t)))\r\n            {\r\n                context.Succeed(requirement);\r\n            }            \r\n        }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nI feel like this is a very laborious way to accomplish what I want!\r\n",
        "createdAt": "2022-10-30T17:16:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1296306231"
      },
      {
        "id": "IC_kwDOAQzde85NRJJZ",
        "parentId": null,
        "author": "davidfowl",
        "content": "@jxwaters this is exactly what we\u0027re going to solve in .NET 8 with https://github.com/dotnet/aspnetcore/issues/44551. It will let you express requirements as attributes. In your example it will eliminate step 2 and in step 1, the attribute would look like this:\r\n\r\n\u0060\u0060\u0060C#\r\ninternal class FeatureAuthorizeAttribute : AuthorizeAttribute, IAuthorizationRequirementData\r\n{\r\n    public FeatureAuthorizeAttribute(params Feature[] features) =\u003E Features = features;\r\n\r\n    public Feature[] Features { get; }\r\n    \r\n    public IEnumerable\u003CIAuthorizationRequirement\u003E GetRequirements()\r\n    {\r\n        yield return new FeatureRequirement(Features);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThis will be enough to flow an \u0060IAuthorizationRequirement\u0060 as attributes without smuggleing them via the policy name (which is what we document today).\r\n\r\nThere are other ways to get at this metadata but it isn\u0027t very easy either so it\u0027s may not be worth expressing here.\r\n\r\n@HaoK the other thing worth following up on here is additional user context (the IUserContext) that needs to flow to authorization handlers. There\u0027s no good way to flow that today other than a scoped service that is first set by middleware. \r\n\r\n@jxwaters it may be possible to create your own derived context by using \u0060IAuthorizationHandlerContextFactory\u0060. That would allow you to pass your \u0060IUserContext\u0060 in the constructor and set it as part of a derived \u0060AuthorizationHandlerContext\u0060.\r\n\r\nWith minimal APIs, you can directly inline the requirement and close over state in the method (in this case the features) https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1295664641. So there\u0027s less indirection.",
        "createdAt": "2022-10-30T20:04:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1296339545"
      },
      {
        "id": "IC_kwDOAQzde85NVC7X",
        "parentId": null,
        "author": "HaoK",
        "content": "\u003Ethe other thing worth following up on here is additional user context (the IUserContext) that needs to flow to authorization handlers. There\u0027s no good way to flow that today other than a scoped service that is first set by middleware.\r\n\r\n@davidfowl Just to clarify what feels weird, the fact that the handler has to get it from the container via constructor?  \r\n\r\nOr are we looking for some mechanism to pass additional arbitrary data in the default context, with a new mechanism to request stuff (as opposed to just pulling it out of the container in the handler?)",
        "createdAt": "2022-10-31T16:36:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1297362647"
      },
      {
        "id": "IC_kwDOAQzde85NX2qQ",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E @davidfowl Just to clarify what feels weird, the fact that the handler has to get it from the container via constructor?\r\n\r\nNo that is pretty clean, but it\u0027s the fact that the IUserContext is popualated by middleware (that code isn\u0027t shown here).\r\n\r\n\u003E Or are we looking for some mechanism to pass additional arbitrary data in the default context, with a new mechanism to request stuff (as opposed to just pulling it out of the container in the handler?)\r\n\r\nI was thinking something along these lines. The factory looks like a great extensibility point but flowing your scoped user context to the call is tricky.",
        "createdAt": "2022-11-01T06:51:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1298098832"
      },
      {
        "id": "IC_kwDOAQzde85NZenD",
        "parentId": null,
        "author": "jxwaters",
        "content": "I do like the idea of being able to inject whatever you need into the handler. In this case, the user context is populated in middleware by a combination of things - some things come from claims, but some things are actually fetched from the database and stored in a server side session state cache, so this needs to be accessed with an async call. So this all happens in a middleware. If this helps you think about the possible scenarios of what kinds of things might need to happen to provide what the handler needs.",
        "createdAt": "2022-11-01T13:39:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1298524611"
      },
      {
        "id": "IC_kwDOAQzde85Nciyk",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-01T22:56:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1299328164"
      },
      {
        "id": "IC_kwDOAQzde85NdFIV",
        "parentId": null,
        "author": "davidfowl",
        "content": "@jxwaters can you share pesudo code for your middleware? It might not be worth improving if the solution is already simple enough.",
        "createdAt": "2022-11-02T02:18:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1299468821"
      },
      {
        "id": "IC_kwDOAQzde85NhYGZ",
        "parentId": null,
        "author": "jxwaters",
        "content": "1. Inject IUserContext into the middleware\r\n2. Populate it with information from claims\r\n3. Look up server side state in IMemoryCache - if not found, fetch from DB and add to cache\r\n4. Put some info from the server side state into the IUserContext",
        "createdAt": "2022-11-02T14:55:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1300595097"
      },
      {
        "id": "IC_kwDOAQzde85NhZli",
        "parentId": null,
        "author": "jxwaters",
        "content": "    public async Task InvokeAsync(HttpContext context, IUserContext userContext, ISessionCacheHelper sch)\r\n    {\r\n...",
        "createdAt": "2022-11-02T14:58:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1300601186"
      },
      {
        "id": "IC_kwDOAQzde85NiJSp",
        "parentId": null,
        "author": "HaoK",
        "content": "Another wrinkle for us to make this better is that the main AuthorizationHandlerContext is created inside of AuthorizationService which is at the lowest layer which doesn\u0027t even have the concept of HttpContext/request, so we\u0027d have to likely invent another context which would probably result in something more complicated than the inject/InvokeAsync in middleware",
        "createdAt": "2022-11-02T16:12:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1300796585"
      },
      {
        "id": "IC_kwDOAQzde85te-LX",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-12-01T22:00:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1836835543"
      },
      {
        "id": "IC_kwDOAQzde851Pput",
        "parentId": null,
        "author": "asos-alexhaigh",
        "content": "This appears to be implemented now but poorly documented. Can we get some official docs with better examples?\r\n\r\nThis is the current one (appears to be AI written) and it does not adequately explain all the features available.\r\nhttps://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/security?view=aspnetcore-8.0",
        "createdAt": "2024-02-27T16:39:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44783#issuecomment-1967037357"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85VLxcx",
    "title": "Support object content along with custom status code in Results API",
    "url": "https://github.com/dotnet/aspnetcore/issues/44789",
    "createdAt": "2022-10-31T02:25:18Z",
    "lastUpdated": "2024-04-26T01:59:43Z",
    "body": "## Background and Motivation\r\n\r\nAllow return custom response object along with a specific HTTP status code. Currently \u0060\u0060\u0060Results\u0060\u0060\u0060 class supports only returning custom status code using \u0060\u0060\u0060Results.StatusCode(int)\u0060\u0060\u0060 would be great if this method can be extended to include custom object as part of response.\r\n\r\nToday it is possible to achieve this using other APIs such as \u0060\u0060\u0060Results.Json(Object, JsonSerializerOptions, String, Nullable\u003CInt32\u003E)\u0060\u0060\u0060 but this always uses JSON serialization. And it\u0027s not useful if minimal supports another serialization e.g., XML.\r\n\r\n## Proposed API\r\n\r\n\u0060\u0060\u0060diff\r\nResults.Status(int statusCode, object object) //produces a response with given status code and content \r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\n\u0060\u0060\u0060csharp\r\ninternal record Error(int ErrorCode, string Message, string HelpLink);\r\n\r\nResults.Status(500,new Error(5566,\u0022Failed to connect to external API\u0022,\u0022https://example.com/supportexternalAPI.htm\u0022));\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\n\r\n\r\n## Risks\r\n",
    "upvotes": 0,
    "labels": [
      "api-suggestion",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85NRpX-",
        "parentId": null,
        "author": "davidfowl",
        "content": "Why not use \u0060Results.Json\u0060? \r\n\r\n\u003E And it\u0027s not useful if minimal supports another serialization e.g., XML.\r\n\r\nWhen that time comes, we\u0027ll have another API, right now it just supports JSON so I would use that overload.",
        "createdAt": "2022-10-31T02:54:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44789#issuecomment-1296471550"
      },
      {
        "id": "IC_kwDOAQzde85NRvw8",
        "parentId": null,
        "author": "krishnakanumuri",
        "content": "@davidfowl First of all thanks for quick response.\r\n\r\nWe could use the \u0060\u0060\u0060Results.Json()\u0060\u0060\u0060 but it\u0027s just more about consistency. Most of \u0060\u0060\u0060Results\u0060\u0060\u0060 class methods abstract underlying serializer but to send result with custom status code we need to use method that directly tied to serializer. So, thought would be good to have an API for sending object result with custom status code. I think as I said it\u0027s more for readability.\r\n\r\nAlso, I wonder is there any specific reason for not including such API in first place?",
        "createdAt": "2022-10-31T03:37:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44789#issuecomment-1296497724"
      },
      {
        "id": "IC_kwDOAQzde85NR3-s",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Also, I wonder is there any specific reason for not including such API in first place?\r\n\r\nBecause there\u0027s a JSON method that covered this scenario and because we have problem details for error responses that let you specify the status code.\r\n\r\nI don\u0027t have a problem adding an API like this for the reasons you mention, but:\r\n- There\u0027s no content negotiation, if we add it, there\u0027ll likely be more APIs added as well.\r\n- It\u0027ll have to wait until .NET 8\r\n- The JSON overload of the API does this already",
        "createdAt": "2022-10-31T04:36:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44789#issuecomment-1296531372"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85VRHdU",
    "title": "Support inferring rate-limited endpoints in OpenAPI",
    "url": "https://github.com/dotnet/aspnetcore/issues/44810",
    "createdAt": "2022-10-31T21:59:15Z",
    "lastUpdated": "2024-03-01T22:42:29Z",
    "body": "Starting in .NET 7, it is possible to enable rate-limiting on certain endpoints. When this is the case, the endpoints might return a response with a 503 status code.\r\n\r\nWe don\u0027t currently pass this information to any OpenAPI annotations, but we should probably document this when it is possible to infer.\r\n\r\nNote: this is similar to the problem with the global \u0060ProblemDetails\u0060 service (pun intended) and is related to https://github.com/dotnet/aspnetcore/issues/44192.",
    "upvotes": 1,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85NcjXP",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-01T23:00:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44810#issuecomment-1299330511"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85VWZdR",
    "title": "Hot Reload /hot restart features (e.g. top-level statements, modifying route mappings, DI, etc.)[ ] Improve error messages for optional parameters and \u0060TryParse\u0060 failures: Support custom error messages when validation fails on minimal APIs\u0026nbsp;#35501",
    "url": "https://github.com/dotnet/aspnetcore/issues/44822",
    "createdAt": "2022-11-01T19:02:21Z",
    "lastUpdated": "2024-03-01T22:42:30Z",
    "body": "",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85NbN2Z",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-01T19:04:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44822#issuecomment-1298980249"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85VWZfo",
    "title": "Simplify CORS for Minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/44823",
    "createdAt": "2022-11-01T19:02:27Z",
    "lastUpdated": "2024-03-01T22:42:30Z",
    "body": "",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85NbNZg",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-01T19:03:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44823#issuecomment-1298978400"
      },
      {
        "id": "IC_kwDOAQzde85NtWnX",
        "parentId": null,
        "author": "praEngineer",
        "content": "In my VS2022 I have a Blazor WASM.  When I start it with IIS Express, it generates a CORS block as it attempts use of the \u0022BrowserLinkSignalR\u0022.  Nevertheless, I can step through code execution.\r\n\r\nHowever, if I start from the \u0022Browser Link Dashboard\u0022 -- \u0022View in Browser\u0022 the CORS issue above is not in the browser console log.    The unfortunate result is that in this method of running the WASM, I cannot step through code execution.\r\n\r\nthis is in the IIS Express mode of running the WASM:\r\n![GitHub](https://user-images.githubusercontent.com/3459509/200009967-23c395e2-3312-486a-9fc7-b58468144a4c.jpg)\r\n",
        "createdAt": "2022-11-04T15:14:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44823#issuecomment-1303734743"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85VWiW4",
    "title": "[Epic]: Analyzers for Minimal APIs \u002B MVC",
    "url": "https://github.com/dotnet/aspnetcore/issues/44824",
    "createdAt": "2022-11-01T19:29:26Z",
    "lastUpdated": "2024-03-01T22:42:31Z",
    "body": "| Analyzer | API Review Status    | Implemented |\r\n|----------|----------------------|-------------|\r\n| #35760   | api-ready-for-review |             |\r\n| #35761   |                      |             |\r\n| #35762   |                      |             |\r\n| #35812   |                      |             |\r\n| #35733   |                      |             |\r\n| #35727   |                      |             |\r\n| #28217   |                      |             |\r\n",
    "upvotes": 1,
    "labels": [
      "area-mvc",
      "Epic",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85NbVKp",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-01T19:29:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44824#issuecomment-1299010217"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85VddRm",
    "title": "When using Hot Reload endpoints get duplicated",
    "url": "https://github.com/dotnet/aspnetcore/issues/44857",
    "createdAt": "2022-11-02T21:03:26Z",
    "lastUpdated": "2024-09-10T20:04:45Z",
    "body": "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/When-using-Hot-Reload-endpoints-get-dupl/10134744)._\n\n---\n[severity:It bothers me. A fix would be nice] [regression] [worked-in:17.3.3]\r\nI\u0027m working on an API project using .NET 6, and when using hot reload, after a certain number of times, the method (and thus the enpoind) gets duplicated. I\u0027m not quite sure if it\u0027s a .NET 6 problem or a VS problem. \n\nTo replicate (could be a local problem also):\n- Create an edpoint and edit it several times, then hot reload, after multiple times reloading the code the app will get an  Microsoft.AspNetCore.Routing.Matching.AmbiguousMatchException: The request matched multiple endpoints. \n\nIf I start reloading several times after I get the error, the endpoint will get duplicated the number of times I have hot reloaded my code.\n\n---\n### Original Comments\n\n#### Feedback Bot on 8/30/2022, 07:35 PM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)",
    "upvotes": 5,
    "labels": [
      "bug",
      "blocked",
      "Author: Migration Bot :robot:",
      "feature-hot-reload",
      "area-minimal",
      "triaged"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85NoYr-",
        "parentId": null,
        "author": "seangwright",
        "content": "I\u0027m also experiencing this issue, which I thought was being caused by the SpaStaticFiles middleware. However, I disabled that and I\u0027m still seeing an issue with endpoints being duplicated with hot reload enabled via \u0060dotnet watch\u0060.\r\n\r\nAfter I run the app, I can save a change in my API Controller and hot reload works fine. Then, the 2nd time I save a change, hot reload works, but then my requests fail to that endpoint until I restart the application. Other endpoints work fine.\r\n\r\nThis issue seems to either be related to or a duplicate of https://github.com/dotnet/aspnetcore/issues/41177\r\n\r\nHere is the error I\u0027m seeing coming back from my API requests:\r\n\r\n\u0060\u0060\u0060\r\nMicrosoft.AspNetCore.Routing.Matching.AmbiguousMatchException: The request matched multiple endpoints. Matches: \r\n\r\nMyEndpoint.HandleAsync (MyProject)\r\nMyEndpoint.HandleAsync (MyProject)\r\n   at Microsoft.AspNetCore.Routing.Matching.DefaultEndpointSelector.ReportAmbiguity(CandidateState[] candidateState)\r\n   at Microsoft.AspNetCore.Routing.Matching.DefaultEndpointSelector.ProcessFinalCandidates(HttpContext httpContext, CandidateState[] candidateState)\r\n   at Microsoft.AspNetCore.Routing.Matching.DefaultEndpointSelector.Select(HttpContext httpContext, CandidateState[] candidateState)\r\n   at Microsoft.AspNetCore.Routing.Matching.DfaMatcher.MatchAsync(HttpContext httpContext)\r\n   at Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware.Invoke(HttpContext httpContext)\r\n   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\n...\r\n\r\nHEADERS\r\n=======\r\n...\r\n\u0060\u0060\u0060\r\n\r\nI am using Attribute routing and here\u0027s my middleware pipeline:\r\n\r\n\u0060\u0060\u0060csharp\r\n    public void Configure(IApplicationBuilder app) =\u003E\r\n        app\r\n            .IfDevelopment(Environment, a =\u003E\r\n                a\r\n                .UseDeveloperExceptionPage()\r\n                .UseCors(\u0022CORS\u0022)\r\n                .UseSwagger()\r\n                .UseSwaggerUI(c =\u003E c.SwaggerEndpoint(\u0022/swagger/v1/swagger.json\u0022, \u0022MyProject v1\u0022)))\r\n            .IfNotDevelopment(Environment, a =\u003E\r\n                a.UseExceptionHandler(\u0022/error\u0022))\r\n            .UseHttpsRedirection()\r\n            .UseStaticFiles()\r\n            .UseRouting()\r\n            .UseAuthentication()\r\n            .UseAuthorization()\r\n            .UseEndpoints(endpoints =\u003E\r\n            {\r\n                _ = endpoints.MapControllers();\r\n            });\r\n\u0060\u0060\u0060\r\n\r\nHere is my \u0060dotnet --info\u0060:\r\n\r\n\u0060\u0060\u0060\r\n\u003E dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.402\r\n Commit:    6862418796\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19043\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.402\\\r\n\r\nglobal.json file:\r\n  C:\\dev\\projects\\my\\project\\global.json\r\n\r\nHost:\r\n  Version:      6.0.10\r\n  Architecture: x64\r\n  Commit:       5a400c212a\r\n\r\n.NET SDKs installed:\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.424 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.408 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.201 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.302 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.305 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.402 [C:\\Program Files\\dotnet\\sdk]\r\n\u0060\u0060\u0060",
        "createdAt": "2022-11-03T17:18:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44857#issuecomment-1302432510"
      },
      {
        "id": "IC_kwDOAQzde85OXtjI",
        "parentId": null,
        "author": "captainsafia",
        "content": "Took a stab at trying to reproduce this. It appears that only certain types of edits cause the duplicate endpoints to be produced. Specifically, changing the return type as mentioned in https://github.com/dotnet/aspnetcore/issues/41177 is a reliable repro. Another one is modifying the parameter types in a method.\r\n\r\n@tmat Is there anything special that happens when applying deltas for these types of scenarios that could be a clue here?",
        "createdAt": "2022-11-15T06:35:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44857#issuecomment-1314838728"
      },
      {
        "id": "IC_kwDOAQzde85ObJIs",
        "parentId": null,
        "author": "tmat",
        "content": "My guess is that there are two reasons for this:\r\n1) https://github.com/dotnet/runtime/issues/75154\r\n2) Caches in ASP.NET need to be invalidated.\r\n\r\n@davidwengier FYI\r\n",
        "createdAt": "2022-11-15T19:00:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44857#issuecomment-1315738156"
      },
      {
        "id": "IC_kwDOAQzde85OcU76",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Caches in ASP.NET need to be invalidated.\r\n\r\nWhich caches are you referring to here?",
        "createdAt": "2022-11-15T23:56:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44857#issuecomment-1316048634"
      },
      {
        "id": "IC_kwDOAQzde85OcXJw",
        "parentId": null,
        "author": "tmat",
        "content": "Any caches of endpoints that memoize MethodInfos ",
        "createdAt": "2022-11-16T00:03:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44857#issuecomment-1316057712"
      },
      {
        "id": "IC_kwDOAQzde85PAfQc",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-23T18:57:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44857#issuecomment-1325528092"
      },
      {
        "id": "IC_kwDOAQzde85PAltH",
        "parentId": null,
        "author": "seangwright",
        "content": "\u003E Because it\u0027s not immediately obvious that this is a bug in our framework.\r\n\r\nHa. Well, it certainly isn\u0027t a bug in my code because it worked one day and then when I updated the .NET SDK it stopped working \uD83E\uDD37\u200D\u2642\uFE0F.\r\n\r\nAlso, if anyone looks at [#41177](https://github.com/dotnet/aspnetcore/issues/41177) you can see this problem has been around since at least April 2022.",
        "createdAt": "2022-11-23T19:19:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44857#issuecomment-1325554503"
      },
      {
        "id": "IC_kwDOAQzde85PAnlS",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E \u003E Because it\u0027s not immediately obvious that this is a bug in our framework.\r\n\u003E \r\n\u003E Ha. Well, it certainly isn\u0027t a bug in my code because it worked one day and then when I updated the .NET SDK it stopped working \uD83E\uDD37\u200D\u2642\uFE0F.\r\n\u003E \r\n\u003E Also, if anyone looks at [#41177](https://github.com/dotnet/aspnetcore/issues/41177) you can see this problem has been around since at least April 2022.\r\n\r\nOoof! Ignore the bot response in this case. We placed it in the milestone because I need more time to investigate what is happening here. There\u0027s a couple of hunches to track down and I\u0027m aware of the referenced issue...",
        "createdAt": "2022-11-23T19:27:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44857#issuecomment-1325562194"
      },
      {
        "id": "IC_kwDOAQzde85lv0Hk",
        "parentId": null,
        "author": "nikriaz",
        "content": "Absolutely the same problem. It used to work but suddenly I discovered that endpoints get duplicated when I change literally anything inside actions. Visual Studio 2022 17.7.3. I suspect it\u0027s related to the spree of recent updates. ",
        "createdAt": "2023-09-05T17:36:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44857#issuecomment-1707033060"
      },
      {
        "id": "IC_kwDOAQzde85oZMcB",
        "parentId": null,
        "author": "??",
        "content": "To learn more about what this message means, what to expect next, and how this issue will be handled you can read our [Triage Process document](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).\nWe\u0027re moving this issue to the .NET 9 Planning milestone for future evaluation / consideration. Because it\u0027s not immediately obvious what is causing this behavior, we would like to keep this around to collect more feedback, which can later help us determine how to handle this. We will re-evaluate this issue, during our next planning meeting(s).\nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact work.",
        "createdAt": "2023-10-06T21:44:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44857#issuecomment-1751435009"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85V9DLA",
    "title": "\u0060RequestDelegate\u0060-based handlers do not surface in OpenAPI descriptions",
    "url": "https://github.com/dotnet/aspnetcore/issues/44970",
    "createdAt": "2022-11-09T13:06:34Z",
    "lastUpdated": "2024-09-20T14:50:59Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nhi I found that the minimal Api TypedResults method does not automatically inject HttpContext.\r\nThe httpcontext principle is here in the reference\r\nhttps://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-7.0#binding-precedence\r\n\r\n\r\n\r\n### Expected Behavior\r\n\r\nThe TypedResults method can automatically inject HttpContext.  \r\n\r\n### Steps To Reproduce\r\n\r\nFile\uFF1AProgram.cs\r\n\u0060\u0060\u0060 \r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddEndpointsApiExplorer();\r\nbuilder.Services.AddSwaggerGen();\r\n\r\nvar app = builder.Build();\r\n\r\nif (app.Environment.IsDevelopment())\r\n{\r\n    app.UseSwagger();\r\n    app.UseSwaggerUI();\r\n}\r\n\r\napp.MapGroup(\u0022/connect\u0022).MapConnect();\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\nFile\uFF1AConnect.cs\r\n\u0060\u0060\u0060\r\npublic static class Connect\r\n{\r\n    public static RouteGroupBuilder MapConnect(this RouteGroupBuilder group)\r\n    {\r\n        group.MapGet(\u0022/authorize\u0022, AuthorizeAsync);\r\n        group.MapGet(\u0022/GoodMinimalApi\u0022, GoodMinimalApi);\r\n        return group;\r\n    }\r\n    public static async Task\u003CIResult\u003E GoodMinimalApi() // not HttpContext\r\n    {\r\n        await Task.CompletedTask;\r\n        return TypedResults.Ok();\r\n    }\r\n    public static async Task\u003CIResult\u003E AuthorizeAsync(HttpContext context)\r\n    {\r\n        await Task.CompletedTask;\r\n        return TypedResults.Ok();\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\nEnd result\r\n\r\n![image](https://user-images.githubusercontent.com/48701698/200835675-7e07e49e-5c9c-45a4-8dce-1172fb7711c0.png)\r\n\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\ndotnet 7.0\r\n\r\n### Anything else?\r\n\r\nMicrosoft Visual Studio Enterprise 2022 (64 \u4F4D) - Current\u7248\u672C 17.4.0\r\nASP.NET Core 7\r\nMinimal Api",
    "upvotes": 1,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85OA6Gs",
        "parentId": null,
        "author": "quan0zhou",
        "content": "This is a problem with Swashbuckle.AspNetCore",
        "createdAt": "2022-11-09T14:37:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44970#issuecomment-1308860844"
      },
      {
        "id": "IC_kwDOAQzde85OBHbo",
        "parentId": null,
        "author": "YataoFeng",
        "content": "\u003E This is a problem with Swashbuckle.AspNetCore\r\n\r\n3q",
        "createdAt": "2022-11-09T15:14:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44970#issuecomment-1308915432"
      },
      {
        "id": "IC_kwDOAQzde85OCZRE",
        "parentId": null,
        "author": "halter73",
        "content": "Does updating\r\n\r\n\u0060\u0060\u0060csharp\r\ngroup.MapGet(\u0022/authorize\u0022, AuthorizeAsync);\r\n\u0060\u0060\u0060\r\nto\r\n\r\n\u0060\u0060\u0060csharp\r\ngroup.MapGet(\u0022/authorize\u0022, (Delegate)AuthorizeAsync);\r\n\u0060\u0060\u0060\r\n\r\nfix your issue?\r\n\r\nIt looks like you\u0027re getting the \u0060RequestDelegate\u0060 overload of MapGet when you need the \u0060Delegate\u0060 overload in order to process the \u0060Task\u003CT\u003E\u0060 (specifically \u0060Task\u003CIResult\u003E\u0060) overload. @JamesNK added an analyzer to warn about this and recommend this workaround described https://github.com/dotnet/aspnetcore/issues/44316.\r\n\r\nThis didn\u0027t get added in time for the .NET 7 release though. Is this something we could backport to the .NET 7 SDK in a servicing release? I think there could be false positives, so that might be risky.\r\n\r\nWe wanted to just make this work (see see https://github.com/dotnet/aspnetcore/pull/40235), but this caused issues for trimming and AOT. Using source generators, we might be able to just make this work once a gain but in a way that\u0027s trim friendly.\r\n",
        "createdAt": "2022-11-09T19:24:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44970#issuecomment-1309250628"
      },
      {
        "id": "IC_kwDOAQzde85OCaX0",
        "parentId": null,
        "author": "halter73",
        "content": "Also, if you want to get the best swagger output for TypedResults, you want to include the specific TypedResult in the return type. \u0060Task\u003CIResult\u003E\u0060 loses information. \u0060Task\u003COk\u003E\u0060 indicates that the route handler will return a 200 response. This might be the default assumption, but this becomes more important with different status codes (e.g. \u0060Task\u003CNotFound\u003E\u0060 or \u0060Task\u003CResults\u003COk, NotFound\u003E\u003E\u0060) or with a specific schema (e.g. \u0060Task\u003COk\u003CMyDto\u003E\u003E\u0060).\r\n\r\nSo you should prefer\r\n\r\n\u0060\u0060\u0060csharp\r\npublic static async Task\u003COk\u003E GoodMinimalApi()\r\n\u0060\u0060\u0060\r\n\r\nover\r\n\r\n\u0060\u0060\u0060csharp\r\npublic static async Task\u003CIResult\u003E GoodMinimalApi()\r\n\u0060\u0060\u0060\r\n\r\nYou can read more about \u0060TypedResults\u0060 and \u0060Results\u003CTResult1, ..., TResultN\u003E\u0060 at https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/responses?view=aspnetcore-7.0#resultstresult1-tresultn.",
        "createdAt": "2022-11-09T19:28:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44970#issuecomment-1309255156"
      },
      {
        "id": "IC_kwDOAQzde85OCzA8",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E This is a problem with Swashbuckle.AspNetCore\r\n\r\nThis issue actually starts in ASP.NET Core. Our OpenAPI infrastructure relies on \u0060MethodInfo\u0060 being available in \u0060EndpointMetadata\u0060. However, as mentioned above, since your code is resolving to the \u0060RequestDelegate\u0060 overload of \u0060MapGet\u0060, we explicitly don\u0027t add method info to the metadata in this case.\r\n\r\nIn .NET 7 RC1, we actually enabled adding \u0060MethodInfo\u0060 to metadata for all types of endpoints (ones using \u0060RequestDelegate\u0060 or \u0060Delegate\u0060) but we got feedback that this was resulting in undesired behavior (see https://github.com/dotnet/aspnetcore/issues/44005) so we undid it.\r\n\r\nOn solution we discussed was making it so that calling \u0060WithOpenApi\u0060 on an endpoint would add it to OpenAPI definition regardless of the delegate type. This would mean your problem would be solved by calling \u0060group.MapGet(\u0022/authorize\u0022, AuthorizeAsync).WithOpenApi();\u0060 or \u0060app.MapGroup(\u0022/connect\u0022).MapConnect().WithOpenApi();\u0060.\r\n\r\nDoes that seem like a sensible solution?\r\n\r\ncc: @martincostello for thoughts as well",
        "createdAt": "2022-11-09T20:46:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44970#issuecomment-1309356092"
      },
      {
        "id": "IC_kwDOAQzde85OG8pd",
        "parentId": null,
        "author": "martincostello",
        "content": "I like the idea of making it opt-in via something like \u0060WithOpenApi()\u0060.\r\n\r\nMy main concern (and how I found #44005) was that third party code might start exposing unintended endpoints that are difficult to suppress from the OpenAPI document (if you notice them even appear) if you can\u0027t update the source of the endpoint to mark it has hidden.\r\n",
        "createdAt": "2022-11-10T15:16:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44970#issuecomment-1310444125"
      },
      {
        "id": "IC_kwDOAQzde85OHlY7",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E I like the idea of making it opt-in via something like \u0060WithOpenApi()\u0060.\r\n\u003E \r\n\u003E My main concern (and how I found #44005) was that third party code might start exposing unintended endpoints that are difficult to suppress from the OpenAPI document (if you notice them even appear) if you can\u0027t update the source of the endpoint to mark it has hidden.\r\n\r\nThanks for the feedback! Yeah, I\u0027m thinking that by leveraging \u0060WithOpenApi\u0060 as an opt-in and introducing support for https://github.com/dotnet/aspnetcore/issues/44192, there will be flexibility to include and omit these \u0060RequestDelegate\u0060-based endpoints as needed.",
        "createdAt": "2022-11-10T17:05:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44970#issuecomment-1310611003"
      },
      {
        "id": "IC_kwDOAQzde85OHlqC",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-10T17:06:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44970#issuecomment-1310612098"
      },
      {
        "id": "IC_kwDOAQzde85YDNqo",
        "parentId": null,
        "author": "captainsafia",
        "content": "I started working on a PR for this (https://github.com/dotnet/aspnetcore/pull/47346) and ran into a little snafu when defining the OpenAPI operation, specifically around how the \u0060HttpContext\u0060 parameter is handled.\r\n\r\nUltimately, I decided that by default, an \u0060HttpContext\u0060 parameter would _not_ be emitted to the OpenAPI spec since \u0060HttpContext\u0060 isn\u0027t a deserializable or parsable parameter type and doesn\u0027t represent a public API for the endpoint. Users can always modify this by configuring their own parameters in the \u0060WithOpenApi\u0060 extension method.\r\n\r\nThis means that when testing with the Swagger UI, you\u0027ll only be able to send parameter-less and body-less requests to the endpoint for testing. This restriction makes sense to me. Thoughts? \r\n",
        "createdAt": "2023-03-21T03:38:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44970#issuecomment-1477237416"
      },
      {
        "id": "IC_kwDOAQzde85YHp25",
        "parentId": null,
        "author": "halter73",
        "content": "Ignoring \u0060HttpContext\u0060 parameters when building the OpenAPI operation makes sense to me too. You can\u0027t infer anything about what the route handler is doing just from knowing it takes in an \u0060HttpContext\u0060. Is there really any alternative?",
        "createdAt": "2023-03-21T18:33:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44970#issuecomment-1478401465"
      },
      {
        "id": "IC_kwDOAQzde85t-ciX",
        "parentId": null,
        "author": "syedsuhaib",
        "content": "I am using the Delegate overload of MapGet but my issue is slightly different:\r\n\r\nI have a response dto being returned by the delegate whose display title I would like to customize in Swagger. While using controllers, decorating the response model with a \u0060SwaggerSchemaAttribute\u0060 would do the trick like so:\r\n\r\n\u0060\u0060\u0060csharp\r\n[SwaggerSchema(Title = \u0022ResponseNameToShowInSwagger\u0022, Description = \u0022I expect to see this description is swagger.\u0022)]\r\npublic class MyResponse\r\n{\r\n}\r\n\u0060\u0060\u0060\r\n\r\nHowever, this no longer seems to be respected by minimal APIs. I just want to know whether the issue being tracked here will solve my problem as well or could there a different cause of my issue? Will appreciate any heads up on this.",
        "createdAt": "2023-12-07T10:29:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44970#issuecomment-1845086359"
      },
      {
        "id": "IC_kwDOAQzde85uOhNX",
        "parentId": null,
        "author": "captainsafia",
        "content": "@syedsuhaib Can you file a separate issue for this? I can provide guidance there...",
        "createdAt": "2023-12-11T04:18:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44970#issuecomment-1849299799"
      },
      {
        "id": "IC_kwDOAQzde86M5oJn",
        "parentId": null,
        "author": "ds5678",
        "content": "Workaround:\r\n\u0060\u0060\u0060cs\r\nprivate static IEndpointConventionBuilder MapGetWithOpenAPI(this IEndpointRouteBuilder builder, [StringSyntax(\u0022Route\u0022)] string path, RequestDelegate requestDelegate)\r\n{\r\n    return builder.MapGet(path, requestDelegate).WithMetadata(requestDelegate.Method);\r\n}\r\n\u0060\u0060\u0060\r\nSee: https://github.com/dotnet/aspnetcore/issues/44005#issuecomment-1248717069",
        "createdAt": "2024-09-20T14:50:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44970#issuecomment-2363916903"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85WAPat",
    "title": "TypedResults metadata are not inferred for API Controllers",
    "url": "https://github.com/dotnet/aspnetcore/issues/44988",
    "createdAt": "2022-11-09T23:12:55Z",
    "lastUpdated": "2025-01-23T23:40:21Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nAs described in [HttpResults type](https://learn.microsoft.com/en-us/aspnet/core/web-api/action-return-types?view=aspnetcore-7.0#httpresults-type), \u0060IResult\u0060 types are supported in API Controller, however, after https://github.com/dotnet/aspnetcore/pull/43543 the metadata from \u0060IEndpointMetadataProvider\u0060 are not populated to API Controller Actions anymore.\r\n\r\nIt is caused because the \u0060ActionDescriptor\u0060 is already created when the \u0060EndpointMetadataPopulator\u0060 is called and not getting updated.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/bb6a05b71bb1b50fc561522ac9284ca88580b65b/src/Mvc/Mvc.Core/src/Routing/ActionEndpointFactory.cs#L372\r\n\r\n### swagger.json\r\n\u0060\u0060\u0060 json\r\n{\r\n  \u0022openapi\u0022: \u00223.0.1\u0022,\r\n  \u0022info\u0022: {\r\n    \u0022title\u0022: \u0022WebApplication22\u0022,\r\n    \u0022version\u0022: \u00221.0\u0022\r\n  },\r\n  \u0022paths\u0022: {\r\n    \u0022/api/Test\u0022: {\r\n      \u0022get\u0022: {\r\n        \u0022tags\u0022: [\r\n          \u0022Test\u0022\r\n        ],\r\n        \u0022responses\u0022: {\r\n          \u0022200\u0022: {\r\n            \u0022description\u0022: \u0022Success\u0022\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \u0022components\u0022: { }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Expected Behavior\r\n\r\n### swagger.json\r\n\u0060\u0060\u0060json\r\n{\r\n  \u0022openapi\u0022: \u00223.0.1\u0022,\r\n  \u0022info\u0022: {\r\n    \u0022title\u0022: \u0022WebApplication22\u0022,\r\n    \u0022version\u0022: \u00221.0\u0022\r\n  },\r\n  \u0022paths\u0022: {\r\n    \u0022/api/Test\u0022: {\r\n      \u0022get\u0022: {\r\n        \u0022tags\u0022: [\r\n          \u0022Test\u0022\r\n        ],\r\n        \u0022responses\u0022: {\r\n          \u0022200\u0022: {\r\n            \u0022description\u0022: \u0022Success\u0022,\r\n            \u0022content\u0022: {\r\n              \u0022application/json\u0022: {\r\n                \u0022schema\u0022: {\r\n                  \u0022$ref\u0022: \u0022#/components/schemas/FooBar\u0022\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \u0022components\u0022: {\r\n    \u0022schemas\u0022: {\r\n      \u0022FooBar\u0022: {\r\n        \u0022type\u0022: \u0022object\u0022,\r\n        \u0022properties\u0022: {\r\n          \u0022requiredParam\u0022: {\r\n            \u0022type\u0022: \u0022string\u0022,\r\n            \u0022nullable\u0022: true\r\n          }\r\n        },\r\n        \u0022additionalProperties\u0022: false\r\n      }\r\n    }\r\n  }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Steps To Reproduce\r\n\r\n\u0060\u0060\u0060c#\r\nusing Microsoft.AspNetCore.Http.HttpResults;\r\nusing Microsoft.AspNetCore.Mvc;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddControllers();\r\nbuilder.Services.AddEndpointsApiExplorer();\r\nbuilder.Services.AddSwaggerGen();\r\n\r\nvar app = builder.Build();\r\n\r\nif (app.Environment.IsDevelopment())\r\n{\r\n    app.UseSwagger();\r\n    app.UseSwaggerUI();\r\n}\r\n\r\n\r\napp.MapControllers();\r\n\r\n\r\napp.Run();\r\n\r\n\r\n[ApiController]\r\n[Route(\u0022api/[controller]\u0022)]\r\npublic class TestController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    public Ok\u003CFooBar\u003E GEt()\r\n     =\u003E TypedResults.Ok(new FooBar() { RequiredParam = \u0022\u0022});\r\n}\r\n\r\npublic class FooBar\r\n{\r\n    public required string RequiredParam { get; set; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.100-alpha.1.22472.9\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 43,
    "labels": [
      "bug",
      "Needs: Design",
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85PvuO8",
        "parentId": null,
        "author": "andresmoschini",
        "content": "\u002B1",
        "createdAt": "2022-12-05T18:32:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1337910204"
      },
      {
        "id": "IC_kwDOAQzde85T3G0H",
        "parentId": null,
        "author": "honzapatCZ",
        "content": "bump",
        "createdAt": "2023-01-27T19:04:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1406954759"
      },
      {
        "id": "IC_kwDOAQzde85Uz82t",
        "parentId": null,
        "author": "honzapatCZ",
        "content": "Has anyone found a workaround/polyfill? This is an unsolvable thing for me.",
        "createdAt": "2023-02-08T16:32:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1422904749"
      },
      {
        "id": "IC_kwDOAQzde85ZSVql",
        "parentId": null,
        "author": "NMillard",
        "content": "\uD83D\uDC40 Bump ",
        "createdAt": "2023-04-05T19:03:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1497979557"
      },
      {
        "id": "IC_kwDOAQzde85ZTXCy",
        "parentId": null,
        "author": "honzapatCZ",
        "content": "I managed to get around this issue with a special openapi filter provider. But that\u0027s just a super big hack rather than a solution ....",
        "createdAt": "2023-04-05T22:42:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1498247346"
      },
      {
        "id": "IC_kwDOAQzde85ZUsTc",
        "parentId": null,
        "author": "vernou",
        "content": "@honzapatCZ , well play. Can you share the filter?",
        "createdAt": "2023-04-06T07:10:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1498596572"
      },
      {
        "id": "IC_kwDOAQzde85ZVYCt",
        "parentId": null,
        "author": "honzapatCZ",
        "content": "\u0060\u0060\u0060cs\r\n    public class TypedResultsMetadataProvider : IOperationFilter\r\n    {\r\n        public void Apply(OpenApiOperation operation, OperationFilterContext context)\r\n        {\r\n            var responseType = context.MethodInfo.ReturnType;\r\n            //Console.WriteLine(context.MethodInfo.DeclaringType.Name);\r\n            //Console.WriteLine(context.MethodInfo.Name);\r\n            //Console.WriteLine(responseType);\r\n            var t = IsSubclassOfRawGeneric(typeof(Microsoft.AspNetCore.Http.HttpResults.Results\u003C,\u003E), responseType);\r\n            if (t == null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            var parArg = t.GetGenericArguments();\r\n            if (operation.Responses.ContainsKey(\u0022200\u0022))\r\n                operation.Responses.Remove(\u0022200\u0022);\r\n\r\n            foreach (var arg in parArg)\r\n            {\r\n                if (arg == typeof(NotFound))\r\n                {\r\n                    operation.Responses.Add(\u0022404\u0022, new OpenApiResponse { Description = \u0022Not found\u0022 });\r\n                }\r\n                else if (arg == typeof(Ok))\r\n                {\r\n                    operation.Responses.Add(\u0022200\u0022, new OpenApiResponse { Description = \u0022Success\u0022 });\r\n                }\r\n                else if (IsSubclassOfRawGeneric(typeof(Ok\u003C\u003E), arg) != null)\r\n                {\r\n\r\n                    var okArg = IsSubclassOfRawGeneric(typeof(Ok\u003C\u003E), arg).GetGenericArguments()[0];\r\n                    Console.WriteLine(\u0022Adding: \u0022 \u002B okArg);\r\n\r\n                    //get or generate the schema\r\n                    var schema = context.SchemaGenerator.GenerateSchema(okArg, context.SchemaRepository);\r\n                    operation.Responses.Add(\u0022200\u0022, new OpenApiResponse { Description = \u0022Success\u0022, Content = { { \u0022application/json\u0022, new OpenApiMediaType { Schema = schema } } } });\r\n\r\n                }\r\n                else if (arg == typeof(CreatedAtRoute))\r\n                {\r\n                    operation.Responses.Add(\u0022201\u0022, new OpenApiResponse { Description = \u0022Success\u0022 });\r\n                }\r\n                else if (IsSubclassOfRawGeneric(typeof(CreatedAtRoute\u003C\u003E), arg) != null)\r\n                {\r\n                    if (operation.Responses.ContainsKey(\u0022201\u0022))\r\n                        operation.Responses.Remove(\u0022201\u0022);\r\n\r\n                    var okArg = IsSubclassOfRawGeneric(typeof(CreatedAtRoute\u003C\u003E), arg).GetGenericArguments()[0];\r\n                    Console.WriteLine(\u0022Adding: \u0022 \u002B okArg);\r\n\r\n                    //get or generate the schema\r\n                    var schema = context.SchemaGenerator.GenerateSchema(okArg, context.SchemaRepository);\r\n                    operation.Responses.Add(\u0022201\u0022, new OpenApiResponse { Description = \u0022Success\u0022, Content = { { \u0022application/json\u0022, new OpenApiMediaType { Schema = schema } } } });\r\n                }\r\n                else if (arg == typeof(BadRequest))\r\n                {\r\n                    operation.Responses.Add(\u0022400\u0022, new OpenApiResponse { Description = \u0022There was an error\u0022 });\r\n                }\r\n                else if (IsSubclassOfRawGeneric(typeof(BadRequest\u003C\u003E), arg) != null)\r\n                {\r\n                    if (operation.Responses.ContainsKey(\u0022400\u0022))\r\n                        operation.Responses.Remove(\u0022400\u0022);\r\n\r\n                    var okArg = IsSubclassOfRawGeneric(typeof(BadRequest\u003C\u003E), arg).GetGenericArguments()[0];\r\n                    Console.WriteLine(\u0022Adding: \u0022 \u002B okArg);\r\n\r\n                    //get or generate the schema\r\n                    var schema = context.SchemaGenerator.GenerateSchema(okArg, context.SchemaRepository);\r\n                    operation.Responses.Add(\u0022400\u0022, new OpenApiResponse { Description = \u0022There was an error\u0022, Content = { { \u0022application/json\u0022, new OpenApiMediaType { Schema = schema } } } });\r\n                }\r\n                else\r\n                {\r\n                    Console.WriteLine(\u0022Unknown type: \u0022 \u002B arg);\r\n                }\r\n            }\r\n        }\r\n\r\n        static Type? IsSubclassOfRawGeneric(Type generic, Type toCheck)\r\n        {\r\n            while (toCheck != null \u0026\u0026 toCheck != typeof(object))\r\n            {\r\n                //if Task is used, we need to check the underlying type\r\n                var realTypeNoTask = toCheck.IsGenericType \u0026\u0026 toCheck.GetGenericTypeDefinition() == typeof(Task\u003C\u003E) ? toCheck.GetGenericArguments()[0] : toCheck;\r\n                var cur = realTypeNoTask.IsGenericType ? realTypeNoTask.GetGenericTypeDefinition() : realTypeNoTask;\r\n                //Console.WriteLine(cur);\r\n                if (generic == cur)\r\n                {\r\n                    return realTypeNoTask;\r\n                }\r\n                toCheck = toCheck.BaseType;\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n\u0060\u0060\u0060",
        "createdAt": "2023-04-06T09:41:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1498775725"
      },
      {
        "id": "IC_kwDOAQzde85ixYco",
        "parentId": null,
        "author": "opflucker",
        "content": "Any news?",
        "createdAt": "2023-07-30T11:17:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1657112360"
      },
      {
        "id": "IC_kwDOAQzde85oLQR2",
        "parentId": null,
        "author": "vernou",
        "content": "While waiting for a solution, I do a operation filter to generate OpenApi response from HttpResults type  and I wrapped it in a NuGet package :\r\n[Vernou.Swashbuckle.HttpResultsAdapter](https://www.nuget.org/packages/Vernou.Swashbuckle.HttpResultsAdapter)\r\n\r\nYou can add the package :\r\n\u0060\u0060\u0060sh\r\ndotnet add package Vernou.Swashbuckle.HttpResultsAdapter\r\n\u0060\u0060\u0060\r\nSo you can register the filter :\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n...\r\nbuilder.Services.AddSwaggerGen(options =\u003E\r\n{\r\n    ...\r\n    options.OperationFilter\u003CVernou.Swashbuckle.HttpResultsAdapter.HttpResultsOperationFilter\u003E();\r\n});\r\n\u0060\u0060\u0060\r\n\r\nIf you prefer, you can just copy/paste the filter file from repository :\r\n[HttpResultsOperationFilter.cs](https://github.com/vernou/Vernou.Swashbuckle.HttpResultsAdapter/blob/main/src/Vernou.Swashbuckle.HttpResultsAdapter/HttpResultsOperationFilter.cs)",
        "createdAt": "2023-10-04T23:22:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1747780726"
      },
      {
        "id": "IC_kwDOAQzde85ugNKh",
        "parentId": null,
        "author": "RobinMeow",
        "content": "\u002B1",
        "createdAt": "2023-12-13T13:38:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1853936289"
      },
      {
        "id": "IC_kwDOAQzde85waEzB",
        "parentId": null,
        "author": "flashgordon2016",
        "content": "\u002B1",
        "createdAt": "2024-01-10T23:01:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1885883585"
      },
      {
        "id": "IC_kwDOAQzde851NZQI",
        "parentId": null,
        "author": "miguelEsteban",
        "content": "\u002B1",
        "createdAt": "2024-02-27T12:32:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1966445576"
      },
      {
        "id": "IC_kwDOAQzde851h-ay",
        "parentId": null,
        "author": "Dejavu333",
        "content": "still waiting for a solution...",
        "createdAt": "2024-02-29T19:44:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1971840690"
      },
      {
        "id": "IC_kwDOAQzde851lIVf",
        "parentId": null,
        "author": "opflucker",
        "content": "\u002B1",
        "createdAt": "2024-03-01T07:31:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1972667743"
      },
      {
        "id": "IC_kwDOAQzde851tSvJ",
        "parentId": null,
        "author": "grafsnikers",
        "content": "\u002B1",
        "createdAt": "2024-03-02T14:16:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1974807497"
      },
      {
        "id": "IC_kwDOAQzde851ukUT",
        "parentId": null,
        "author": "Krusen",
        "content": "Here\u0027s my solution, using NSwag, in case someone else wants to use it.\r\nIt should support most cases, if not all.\r\n\r\nBaseOperationProcessor.cs\r\n\u0060\u0060\u0060csharp\r\nusing System.Net;\r\nusing System.Reflection;\r\nusing Microsoft.AspNetCore.Http.Metadata;\r\nusing Namotion.Reflection;\r\nusing NJsonSchema;\r\nusing NSwag;\r\nusing NSwag.Generation.Processors;\r\nusing NSwag.Generation.Processors.Contexts;\r\n\r\nnamespace YourProject.NSwag.OperationProcessors;\r\n\r\npublic abstract class BaseOperationProcessor : IOperationProcessor\r\n{\r\n    protected static readonly MethodInfo PopulateMetadataInterfaceMethod =\r\n        typeof(IEndpointMetadataProvider).GetMethod(nameof(IEndpointMetadataProvider.PopulateMetadata))!;\r\n\r\n    public bool Process(OperationProcessorContext context)\r\n    {\r\n        var providerTypes = GetEndpointMetadataProviderTypes(context.MethodInfo);\r\n\r\n        foreach (var type in providerTypes)\r\n        {\r\n            var populateMetadataMethod = GetInterfaceMethodImplementation(type, PopulateMetadataInterfaceMethod);\r\n            var endpointBuilder = new FakeEndpointBuilder();\r\n            populateMetadataMethod.Invoke(null, new object[] { context.MethodInfo, endpointBuilder });\r\n\r\n            var responseTypeMetadata = endpointBuilder.Metadata.OfType\u003CIProducesResponseTypeMetadata\u003E();\r\n\r\n            ProcessMetadata(context, responseTypeMetadata);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// \u003Csummary\u003E\r\n    /// Gets the matching implemented method on \u003Cparamref name=\u0022implementationType\u0022/\u003E\r\n    /// matching the given \u003Cparamref name=\u0022interfaceMethod\u0022/\u003E from an implemented interface.\r\n    /// See \u003Ca href=\u0022https://stackoverflow.com/a/52743438/5358985\u0022\u003Ethis answer\u003C/a\u003E on Stack Overflow for more details.\r\n    /// \u003C/summary\u003E\r\n    /// \u003Cparam name=\u0022implementationType\u0022\u003EThe type implementing the \u003Cparamref name=\u0022interfaceMethod\u0022/\u003E.\u003C/param\u003E\r\n    /// \u003Cparam name=\u0022interfaceMethod\u0022\u003E\u003C/param\u003E\r\n    protected static MethodInfo GetInterfaceMethodImplementation(Type implementationType, MethodInfo interfaceMethod)\r\n    {\r\n        var map = implementationType.GetInterfaceMap(interfaceMethod.DeclaringType!);\r\n        for (var i = 0; i \u003C map.InterfaceMethods.Length; i\u002B\u002B)\r\n        {\r\n            if (map.InterfaceMethods[i].Equals(interfaceMethod))\r\n            {\r\n                return map.TargetMethods[i];\r\n            }\r\n        }\r\n\r\n        throw new InvalidOperationException(\r\n            $\u0022Interface method ({interfaceMethod.Name}) not found on implementation type ({implementationType.FullName})\u0022);\r\n    }\r\n\r\n    protected void ProcessMetadata(OperationProcessorContext context, IEnumerable\u003CIProducesResponseTypeMetadata\u003E responseTypeMetadata)\r\n    {\r\n        var operation = context.OperationDescription.Operation;\r\n\r\n        foreach (var metadata in responseTypeMetadata)\r\n        {\r\n            var response = new OpenApiResponse\r\n            {\r\n                Description = ((HttpStatusCode)metadata.StatusCode).ToString(),\r\n            };\r\n\r\n            if (metadata.Type is not null)\r\n            {\r\n                var schema = context.SchemaGenerator.GenerateWithReference\u003CJsonSchema\u003E(metadata.Type.ToContextualType(), context.SchemaResolver);\r\n                foreach (var contentType in metadata.ContentTypes)\r\n                {\r\n                    response.Content[contentType] = new OpenApiMediaType\r\n                    {\r\n                        Schema = schema,\r\n                    };\r\n                }\r\n            }\r\n\r\n            operation.Responses[metadata.StatusCode.ToString()] = response;\r\n            operation.Produces.AddRange(metadata.ContentTypes);\r\n        }\r\n\r\n        operation.Produces = operation.Produces.Distinct().ToList();\r\n    }\r\n\r\n    /// \u003Csummary\u003E\r\n    /// A simple implementation of \u003Csee cref=\u0022EndpointBuilder\u0022/\u003E\r\n    /// so we can capture the populated metadata.\r\n    /// \u003C/summary\u003E\r\n    private class FakeEndpointBuilder : EndpointBuilder\r\n    {\r\n        public override Endpoint Build()\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n    }\r\n\r\n    protected abstract IEnumerable\u003CType\u003E GetEndpointMetadataProviderTypes(MethodInfo method);\r\n}\r\n\u0060\u0060\u0060\r\n\r\nTypedResultsOperationProcessor.cs\r\n\u0060\u0060\u0060csharp\r\nusing System.Reflection;\r\nusing Microsoft.AspNetCore.Http.HttpResults;\r\nusing Microsoft.AspNetCore.Http.Metadata;\r\nusing IEndpointMetadataProvider = Microsoft.AspNetCore.Http.Metadata.IEndpointMetadataProvider;\r\n\r\nnamespace YourProject.NSwag.OperationProcessors;\r\n\r\n/// \u003Csummary\u003E\r\n/// Operation processor that reads \u003Csee cref=\u0022IProducesResponseTypeMetadata\u0022/\u003E\r\n/// from the return types implementing \u003Csee cref=\u0022IResult\u0022/\u003E, i.e. when using \u003Csee cref=\u0022TypedResults\u0022/\u003E\r\n/// like \u003Csee cref=\u0022NotFound\u0022/\u003E, \u003Csee cref=\u0022Ok\u0022/\u003E, \u003Csee cref=\u0022Ok{TValue}\u0022/\u003E etc.\r\n/// \u003C/summary\u003E\r\n/// \u003Cremarks\u003E\r\n/// See \u003Ca href=\u0022https://learn.microsoft.com/en-us/aspnet/core/web-api/action-return-types?view=aspnetcore-7.0#httpresults-type\u0022\u003Ehere\u003C/a\u003E for details about HttpResults types.\r\n/// \u003C/remarks\u003E\r\npublic class TypedResultsOperationProcessor : BaseOperationProcessor\r\n{\r\n    /// \u003Csummary\u003E\r\n    /// Finds the actual return type implementing \u003Csee cref=\u0022IEndpointMetadataProvider\u0022/\u003E\r\n    /// (i.e. in case of \u003Csee cref=\u0022Task\u0022/\u003E) or null if the return type does not implement \u003Csee cref=\u0022IEndpointMetadataProvider\u0022/\u003E.\r\n    /// \u003C/summary\u003E\r\n    protected override IEnumerable\u003CType\u003E GetEndpointMetadataProviderTypes(MethodInfo method)\r\n    {\r\n        if (method.ReturnType.IsAssignableTo(typeof(IEndpointMetadataProvider)))\r\n            return new List\u003CType\u003E(1) { method.ReturnType };\r\n\r\n        var returnType = method.ReturnType;\r\n\r\n        if (!returnType.IsGenericType)\r\n            return new List\u003CType\u003E();\r\n\r\n        if (!returnType.IsAssignableTo(typeof(Task)))\r\n            return new List\u003CType\u003E();\r\n\r\n        var type = returnType.GenericTypeArguments.First();\r\n        if (type.IsAssignableTo(typeof(IEndpointMetadataProvider)))\r\n            return new List\u003CType\u003E(1) { type };\r\n\r\n        return new List\u003CType\u003E();\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nAnd here\u0027s how to use it:\r\n\u0060\u0060\u0060\r\nservices.AddOpenApiDocument(x =\u003E\r\n{\r\n    x.OperationProcessors.Add(new TypedResultsOperationProcessor());\r\n});\r\n\u0060\u0060\u0060",
        "createdAt": "2024-03-03T12:17:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-1975141651"
      },
      {
        "id": "IC_kwDOAQzde85_XZCI",
        "parentId": null,
        "author": "opflucker",
        "content": "still waiting for a solution...",
        "createdAt": "2024-05-29T08:27:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-2136838280"
      },
      {
        "id": "IC_kwDOAQzde86H4Y__",
        "parentId": null,
        "author": "jgarciadelanoceda",
        "content": "@captainsafia, are you planning to handle this issue?\nIt\u0027s an issue in Swashbuckle and also in Microsoft.AspNetcore.OpenApi",
        "createdAt": "2024-08-10T06:31:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-2279706623"
      },
      {
        "id": "IC_kwDOAQzde86ILa-q",
        "parentId": null,
        "author": "captainsafia",
        "content": "@jgarciadelanoceda I\u0027m not planning on handling this issue at the moment. There\u0027s some subtleties to untangle with this one, especially with regard to how we handle metadata in the \u0060ActionEndpointFactory\u0060 component mentioned above.\r\n\r\nIf you\u0027d like to take a look at it, I\u0027d be happy to to review a PR. As a heads up, from what I recall the last time I looked at it it requires a bit more legwork to fix in a backwards-compatible way. You might have more luck figuring out a nice solution here...",
        "createdAt": "2024-08-12T18:50:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-2284695466"
      },
      {
        "id": "IC_kwDOAQzde86JPNrU",
        "parentId": null,
        "author": "jgarciadelanoceda",
        "content": "I have just did a change that seems to be working, but the problem is that I think that could be a Breaking change:\r\nhttps://github.com/dotnet/aspnetcore/blob/4a46df1ebafc9d8ea98820fb9094b40a0a2853f2/src/Mvc/Mvc.Core/src/Routing/ActionEndpointFactory.cs#L401-L407\r\n\r\nReplace it with this code:\r\n\u0060\u0060\u0060c#\r\nif (action.FilterDescriptors != null \u0026\u0026 action.FilterDescriptors.Count \u003E 0)\r\n{\r\n    foreach (var filter in action.FilterDescriptors.OrderBy(f =\u003E f, FilterDescriptorOrderComparer.Comparer).Select(f =\u003E f.Filter))\r\n    {\r\n        builder.Metadata.Add(filter);\r\n    }\r\n}\r\naction.FilterDescriptors ??= [];\r\nforeach (var metadata in builder.Metadata.OfType\u003CIProducesResponseTypeMetadata\u003E())\r\n{\r\n    if (metadata?.Type is not null)\r\n    {\r\n        action.FilterDescriptors.Add(new(new ProducesResponseTypeAttribute(metadata.Type, metadata.StatusCode), 0));\r\n    }\r\n}\r\n\u0060\u0060\u0060 \r\n\r\nCan you guide my in the process of the elements involved and so on to continue thinking about a right solution?. I think that this solution is only valid if there is no ProducesResponseTypeAttribute on the endpoint ",
        "createdAt": "2024-08-21T16:11:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-2302466772"
      },
      {
        "id": "IC_kwDOAQzde86JQqOb",
        "parentId": null,
        "author": "captainsafia",
        "content": "@jgarciadelanoceda Yeah, as you mentioned the proposed change will only impact \u0060IProducesResponseTypeMetadata\u0060 and doesn\u0027t handle any metadata produced by an \u0060IEndpointMetadataProvider\u0060 implementation.\r\n\r\nWe have a set of [test cases that check for \u0060EndpointMetadataProvider\u0060 behavior here](https://github.com/dotnet/aspnetcore/blob/14d5122683d32a9f7ad30ecb860174cea2d3bcc3/src/Mvc/Mvc.Core/test/ApplicationModels/EndpointMetadataProviderTest.cs) although I suspect they don\u0027t capture the real E2E given they pass.",
        "createdAt": "2024-08-21T19:20:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-2302845851"
      },
      {
        "id": "IC_kwDOAQzde86JQ1Ie",
        "parentId": null,
        "author": "jgarciadelanoceda",
        "content": "I just tested with Results\u003COk\u003CT\u003E,NotFound\u003CU\u003E\u003E, and what is getting indeed is the IEndpointMetadataProvider implementation here https://github.com/dotnet/aspnetcore/blob/main/src%2FHttp%2FHttp.Results%2Fsrc%2FResultsOfT.Generated.cs#L70-L71\nI find the solution quite clean, because in the builder.Metadata aspNetcore is storing the responseTypes for Results types :)",
        "createdAt": "2024-08-21T19:46:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-2302890526"
      },
      {
        "id": "IC_kwDOAQzde86OWwQU",
        "parentId": null,
        "author": "DavidBal",
        "content": "### Describe the bug\n\nI want to  generate a OpenApi json for my Controller based Api. \r\n\r\nI have the following controller Code:\r\n\r\n\u0060\u0060\u0060c#\r\n[Route(\u0022api/[controller]\u0022)]\r\n[ApiController]\r\npublic class TestController : ControllerBase\r\n{\r\n    [HttpPost(\u0022test\u0022)]\r\n    public async Task\u003CIActionResult\u003E PostTest([FromBody] XmlPlaceholder? xmlPlaceholder = null)\r\n    {\r\n        return Ok();\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThe XmlPlaceholder class looks like this:\r\n\u0060\u0060\u0060c#\r\npublic class XmlPlaceholder : IEndpointParameterMetadataProvider\r\n{\r\n    public static void PopulateMetadata(ParameterInfo parameter, EndpointBuilder builder)\r\n    {\r\n        builder.Metadata.Add(new AcceptsMetadata([\u0022application/xml\u0022, \u0022text/xml\u0022], typeof(XmlPlaceholder)));\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThe generated OpenAPI json looks like this:\r\n\u0060\u0060\u0060\u0060json\r\n \u0022/api/Test/test\u0022: {\r\n      \u0022post\u0022: {\r\n        \u0022tags\u0022: [\r\n          \u0022Test\u0022\r\n        ],\r\n        \u0022requestBody\u0022: {\r\n          \u0022content\u0022: {\r\n            \u0022application/json\u0022: {\r\n              \u0022schema\u0022: {\r\n                \u0022$ref\u0022: \u0022#/components/schemas/XmlPlaceholder\u0022\r\n              }\r\n            },\r\n            \u0022text/json\u0022: {\r\n              \u0022schema\u0022: {\r\n                \u0022$ref\u0022: \u0022#/components/schemas/XmlPlaceholder\u0022\r\n              }\r\n            },\r\n            \u0022application/*\u002Bjson\u0022: {\r\n              \u0022schema\u0022: {\r\n                \u0022$ref\u0022: \u0022#/components/schemas/XmlPlaceholder\u0022\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \u0022responses\u0022: {\r\n          \u0022200\u0022: {\r\n            \u0022description\u0022: \u0022OK\u0022\r\n          }\r\n        }\r\n      }\r\n    }\r\n\u0060\u0060\u0060\u0060\r\n\n\n### Expected Behavior\n\nI  would expect the same behavior as for minimal apis.\r\n\r\nThere the metadata is used and produces the following output:\r\n\r\n\u0060\u0060\u0060json\r\n    \u0022/minimalTest\u0022: {\r\n      \u0022post\u0022: {\r\n        \u0022tags\u0022: [\r\n          \u0022WebApplication2\u0022\r\n        ],\r\n        \u0022operationId\u0022: \u0022Minimal Test\u0022,\r\n        \u0022requestBody\u0022: {\r\n          \u0022content\u0022: {\r\n            \u0022application/xml\u0022: {\r\n              \u0022schema\u0022: {\r\n                \u0022$ref\u0022: \u0022#/components/schemas/XmlPlaceholder\u0022\r\n              }\r\n            },\r\n            \u0022text/xml\u0022: {\r\n              \u0022schema\u0022: {\r\n                \u0022$ref\u0022: \u0022#/components/schemas/XmlPlaceholder\u0022\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \u0022responses\u0022: {\r\n          \u0022200\u0022: {\r\n            \u0022description\u0022: \u0022OK\u0022\r\n          }\r\n        }\r\n      }\r\n    },\r\n\u0060\u0060\u0060\r\n\r\n\n\n### Steps To Reproduce\n\nhttps://github.com/DavidBal/-Demo_IEndpointParameterMetadataProvider_for_Controller/tree/master\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100-rc.1.24452.12\n\n### Anything else?\n\n\u0060\u0060\u0060\u0060xml\r\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk.Web\u0022\u003E\r\n\r\n  \u003CPropertyGroup\u003E\r\n    \u003CTargetFramework\u003Enet9.0\u003C/TargetFramework\u003E\r\n    \u003CNullable\u003Eenable\u003C/Nullable\u003E\r\n    \u003CImplicitUsings\u003Eenable\u003C/ImplicitUsings\u003E\r\n  \u003C/PropertyGroup\u003E\r\n\r\n  \u003CItemGroup\u003E\r\n    \u003CPackageReference Include=\u0022Microsoft.AspNetCore.OpenApi\u0022 Version=\u00229.0.0-rc.1.24452.1\u0022 /\u003E\r\n  \u003C/ItemGroup\u003E\r\n\r\n\u003C/Project\u003E\r\n\u0060\u0060\u0060\u0060",
        "createdAt": "2024-10-02T10:39:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44988#issuecomment-2388329492"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85WJitx",
    "title": "dotnet-getdocument issues in .NET7",
    "url": "https://github.com/dotnet/aspnetcore/issues/45025",
    "createdAt": "2022-11-11T11:30:13Z",
    "lastUpdated": "2024-11-28T08:06:49Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWe\u0027re currently on .NET6 and trying to migrate to .NET7. We\u0027re making use of \u0060\u003COpenApiGenerateDocumentsOnBuild/\u003E\u0060 and \u0060\u003COpenApiProjectReference/\u003E\u0060. The implementation of  \u0060GetDocument.Insider\u0060 has changed in .NET7 ([https://github.com/dotnet/aspnetcore/pull/43701](https://github.com/dotnet/aspnetcore/pull/43701)) to start all  \u0060IHostedService\u0060 implementations and allow for all DI configuration to be executed. As pointed out by [bachratyg](https://github.com/dotnet/aspnetcore/issues/43391#issuecomment-1220878694) this implementation might be handy for some cases, but is also completely undesirable for others. For example, we\u0027re using a \u0060IHostedService\u0060 implementation to make a call to a microservice in the same solution at startup, which is now impossible to do. We\u0027re also validating the presence of certain configuration entries at startup e.g:\r\n\u0060 if (string.IsNullOrEmpty(config.GetConnectionString(\u0022database\u0022))) { throw new Exception(); }\u0060. This now fails because these are defined in our docker-compose.yml file.\r\n\r\nI\u0027m not sure if there\u0027s a one-size-fits-all solution to this problem but it would at least be nice to have the option to revert back to the previous behaviour.\r\n\r\n### Expected Behavior\r\n\r\nThe project builds succesfully and generates an openapi document without invoking a bunch of application code.\r\n\r\n### Steps To Reproduce\r\n\r\nA .csproj:\r\n\r\n\u0060\u0060\u0060xml\r\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk.Web\u0022\u003E\r\n\t\u003CPropertyGroup\u003E\r\n\t\t\u003CTargetFramework\u003Enet7.0\u003C/TargetFramework\u003E\r\n\t\t\u003COpenApiGenerateDocumentsOnBuild\u003Etrue\u003C/OpenApiGenerateDocumentsOnBuild\u003E\r\n\t\t\u003CImplicitUsings\u003Eenable\u003C/ImplicitUsings\u003E\r\n\t\u003C/PropertyGroup\u003E\r\n\r\n\t\u003CItemGroup\u003E\r\n\t\t\u003CPackageReference Include=\u0022Swashbuckle.AspNetCore\u0022 Version=\u00226.2.3\u0022 /\u003E\r\n\t\t\u003CPackageReference Include=\u0022Microsoft.Extensions.ApiDescription.Server\u0022 Version=\u00227.0.0\u0022 PrivateAssets=\u0022all\u0022 /\u003E\r\n\t\u003C/ItemGroup\u003E\r\n\u003C/Project\u003E\r\n\u0060\u0060\u0060\r\n\r\nExample scenarios:\r\n- Register an \u0060IHostedService\u0060 implementation that executes some logic which is impossible to do at build time. For example making a call to a microservice in the same solution.\r\n- Validate the presence of a configuration entry which is defined outside of \u0060appsettings.json\u0060 (e.g. user secrets or docker-compose.yml). For example:\r\n\r\n\u0060\u0060\u0060CSharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nvar connectionString = builder.Configuration.GetConnectionString(\u0022Database\u0022);\r\n\r\nif (string.IsNullOrEmpty(connectionString))\r\n{\r\n    throw new Exception();\r\n}\r\n\r\n// Add services to the container.\r\n\r\nbuilder.Services.AddControllers();\r\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\r\nbuilder.Services.AddEndpointsApiExplorer();\r\nbuilder.Services.AddSwaggerGen();\r\n\r\nvar app = builder.Build();\r\n\r\n// Configure the HTTP request pipeline.\r\nif (app.Environment.IsDevelopment())\r\n{\r\n    app.UseSwagger();\r\n    app.UseSwaggerUI();\r\n}\r\n\r\napp.UseHttpsRedirection();\r\n\r\napp.UseAuthorization();\r\n\r\napp.MapControllers();\r\n\r\napp.Run();\r\n\r\n\u0060\u0060\u0060\r\n\r\nThe project now fails to build.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7\r\n\r\n### Anything else?\r\n\r\nRelated: \r\n- [https://github.com/dotnet/aspnetcore/issues/43391](https://github.com/dotnet/aspnetcore/issues/43391)\r\n- [https://github.com/dotnet/aspnetcore/pull/43701](https://github.com/dotnet/aspnetcore/pull/43701)",
    "upvotes": 0,
    "labels": [
      "investigate",
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85OXrtJ",
        "parentId": null,
        "author": "captainsafia",
        "content": "Thanks for filing this issue! Referencing https://github.com/dotnet/aspnetcore/issues/43395 alongside here as well.\r\n\r\n\u003E I\u0027m not sure if there\u0027s a one-size-fits-all solution to this problem but it would at least be nice to have the option to revert back to the previous behaviour.\r\n\r\nUnfortunately, I don\u0027t think a revert to the previous behavior is a valid option here. AFAIK, the previous behavior doesn\u0027t work with the new builder in .NET 6. Do you currently have a working scenario in .NET 6?\r\n\r\nWill noodle on this a bit more and add notes...",
        "createdAt": "2022-11-15T06:23:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-1314831177"
      },
      {
        "id": "IC_kwDOAQzde85OYHvs",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Validate the presence of a configuration entry which is defined outside of appsettings.json (e.g. user secrets or docker-compose.yml). For example:\r\n\r\nThis should still work if it\u0027s in user secrets. If the application is missing required configuration in development then it never ran to begin with, right?\r\n\r\n\u003E Register an IHostedService implementation that executes some logic which is impossible to do at build time. For example making a call to a microservice in the same solution.\r\n\r\nYes, this one isn\u0027t ever going to work. I think we could do something here, like never run hosted services in this mode.",
        "createdAt": "2022-11-15T08:14:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-1314946028"
      },
      {
        "id": "IC_kwDOAQzde85Obtxv",
        "parentId": null,
        "author": "Wtiben",
        "content": "\u003E Unfortunately, I don\u0027t think a revert to the previous behavior is a valid option here. AFAIK, the previous behavior doesn\u0027t work with the new builder in .NET 6. Do you currently have a working scenario in .NET 6?\r\n\r\nWe currently have a solution with a couple of projects using \u0060\u003COpenApiGenerateDocumentsOnBuild\u003Etrue\u003C/OpenApiGenerateDocumentsOnBuild\u003E\u0060,  other projects referencing them with \u0060\u003COpenApiProjectReference Include=\u0022RelativePath\u0022\u003E\u0060 and all of them using .NET6\u0027 \u0060WebApplication\u0060 and top level statements. So far it\u0027s been working fine and we haven\u0027t ran into issues.\r\n\r\n\u003E This should still work if it\u0027s in user secrets. If the application is missing required configuration in development then it never ran to begin with, right?\r\n\r\nThe only way to get it to build this way is with an explicit call to \u0060Configuration.AddUserSecrets\u003CProgram\u003E()\u0060. Since \u0060dotnet-getdocument\u0060 isn\u0027t running the application with ASPNETCORE_ENVIRONMENT=Development, user secrets aren\u0027t being added to the \u0060WebApplication\u0060\u0027s default configuration and thus the build fails.\r\nDuring local development this isn\u0027t too much of an issue as we can just add a call to \u0060AddUserSecrets(),\u0060 but it would still fail in CI environments as there are no user secrets available (same goes for any other external configuration sources).\r\n\r\nAt its core i think its very problematic to have application startup code be invoked at all, as there\u0027s always gonna be stuff which isn\u0027t possible/available at build time.\r\n",
        "createdAt": "2022-11-15T21:31:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-1315888239"
      },
      {
        "id": "IC_kwDOAQzde85OcH2b",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E and all of them using .NET6\u0027 WebApplication and top level statements. So far it\u0027s been working fine and we haven\u0027t ran into issues.\r\n\r\nInteresting...We did backport the fix to the .NET 6 SDK. I assume you\u0027re on the latest patch?\r\n\r\n\u003E At its core i think its very problematic to have application startup code be invoked at all, as there\u0027s always gonna be stuff which isn\u0027t possible/available at build time.\r\n\r\nThere\u0027s a chance we maybe able to avoid this if we statically analyzed the application to determine the OpenApiDocument. For context, the reason we need to run the application in order to generate the OpenApi document is to be able to populate an accurate description of all the routes in an application.",
        "createdAt": "2022-11-15T23:13:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-1315995035"
      },
      {
        "id": "IC_kwDOAQzde85OcULz",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-15T23:54:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-1316045555"
      },
      {
        "id": "IC_kwDOAQzde85OhTgB",
        "parentId": null,
        "author": "davidfowl",
        "content": "The application code always ran, even in .NET \u003C 6. The difference is it ran a different entry point which hopefully did less. Now with the new hosting model, there\u2019s no second entry point we can use to get the service provider from various tools",
        "createdAt": "2022-11-16T17:00:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-1317353473"
      },
      {
        "id": "IC_kwDOAQzde85OtaQL",
        "parentId": null,
        "author": "0xced",
        "content": "I had the same issue (i.e. multiple \u0060IHostedService\u0060 implementations running at build time) when I upgraded from \u0060Microsoft.Extensions.ApiDescription.Server\u0060 version 6.0.10 to version 6.0.11.\r\n\r\nMy workaround detects when the entry point is being called by \u0060GetDocument.Insider\u0060 and stops after building the app, which is enough for the OpenAPI generation to work.\r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddControllers();\r\nbuilder.Services.AddEndpointsApiExplorer();\r\nbuilder.Services.AddSwaggerGen();\r\nvar app = builder.Build();\r\n\r\nif (Environment.GetCommandLineArgs().Any(e =\u003E e.Contains(\u0022GetDocument.Insider\u0022)))\r\n{\r\n    Console.WriteLine(\u0022Called by GetDocument.Insider in order to generate the OpenAPI definition at build time.\u0022);\r\n    return;\r\n}\r\n\r\napp.UseSwagger();\r\napp.UseSwaggerUI();\r\napp.UseHttpsRedirection();\r\napp.UseAuthorization();\r\napp.MapControllers();\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\nThe behaviour becomes more like the previous version which was basically only [calling the \u0060CreateHostBuilder\u0060 method](https://github.com/dotnet/aspnetcore/blob/v6.0.10/src/Tools/GetDocumentInsider/src/Commands/GetDocumentCommandWorker.cs#L58) (through the [HostFactoryResolver](https://github.com/dotnet/runtime/blob/v6.0.10/src/libraries/Microsoft.Extensions.HostFactoryResolver/src/HostFactoryResolver.cs#L22)) to build the host.",
        "createdAt": "2022-11-18T21:12:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-1320526859"
      },
      {
        "id": "IC_kwDOAQzde85PCrB2",
        "parentId": null,
        "author": "axelgenus",
        "content": "@0xced gave me the inspiration to implement a different workaround (using Reflection) on the various \u0060ServiceCollectionExtensions\u0060 classes we have in our shared libraries:\r\n\r\n\u0060\u0060\u0060csharp\r\npublic static class ServiceCollectionExtensions\r\n{\r\n    private static readonly string EntryAssemblyName;\r\n\r\n    static ServiceCollectionExtensions()\r\n    {\r\n        var assembly = Assembly.GetEntryAssembly();\r\n        AssemblyName assemblyName = assembly?.GetName();\r\n\r\n        EntryAssemblyName = assemblyName?.Name;\r\n    }\r\n\r\n    public static IServiceCollection AddWhatever(this IServiceCollection services)\r\n    {\r\n        if (EntryAssemblyName == @\u0022GetDocument.Insider\u0022)\r\n        {\r\n            return services;\r\n        }\r\n\r\n        // [...]\r\n\r\n        return services;\r\n    }\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2022-11-24T08:18:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-1326100598"
      },
      {
        "id": "IC_kwDOAQzde85PbI1s",
        "parentId": null,
        "author": "michaelrp",
        "content": "We seem to have a similar issue in that a connection string is defined in _appsettings.Development.json_ but not in _appsettings.json_. Version 6.0.7 works fine, but 7.0.0 fails when running \u0060dotnet build\u0060.",
        "createdAt": "2022-11-30T17:35:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-1332514156"
      },
      {
        "id": "IC_kwDOAQzde85fImKY",
        "parentId": null,
        "author": "kev-andrews",
        "content": "are there any plans to fix this in any way? we have multiple projects that require workarounds such as the ones described here to function now. especially ones relying on Hangfire. The .AddHangfire call in ConfigureServices causes a db connection to be established (at least when using the postgres storage). It just seems very hacky and its kind of hard to explain when onboarding new project members why building the project causes the code to run and db connections to be established...",
        "createdAt": "2023-06-18T10:27:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-1596088984"
      },
      {
        "id": "IC_kwDOAQzde85hEKlR",
        "parentId": null,
        "author": "jecook",
        "content": "Sounds similar to the issues we\u0027ve been facing. We have also had to work around GetDocument.Insider not running in the environment that we want for different scenarios.\r\n\r\nSomething that might make it easier would be to allow setting environment variables for the generation process. I think that this could be done fairly simply by adding a new property, say \u0060OpenApiGenerationEnvironmentVariables\u0060, in \u0060Microsoft.Extensions.ApiDescription.Server.props\u0060:\r\n\u0060\u0060\u0060xml\r\n\u003COpenApiGenerationEnvironmentVariables Condition=\u0022 \u0027$(OpenApiGenerationEnvironmentVariables)\u0027 == \u0027\u0027 \u0022 /\u003E\r\n\u0060\u0060\u0060\r\nAnd then outputting that in a new \u0060EnvironmentVariables\u0060 attribute of the \u0060Exec\u0060 task in the \u0060GenerateOpenApiDocuments\u0060 target in \u0060Microsoft.Extensions.ApiDescription.Server.targets\u0060:\r\n\u0060\u0060\u0060xml\r\n\u003CTarget Name=\u0022GenerateOpenApiDocuments\u0022 Inputs=\u0022$(TargetPath)\u0022 Outputs=\u0022$(_OpenApiDocumentsCache)\u0022\u003E\r\n  \u003C!-- . . . other code omitted for brevity . . . --\u003E\r\n  \u003CExec Command=\u0022$(_Command)\u0022 EnvironmentVariables=\u0022$(OpenApiGenerationEnvironmentVariables)\u0022 LogStandardErrorAsError=\u0022true\u0022 /\u003E\r\n\u003C/Target\u003E\r\n\u0060\u0060\u0060\r\nThen specific (or even dynamic) environments can be set in the project file (and any other useful configuration settings too):\r\n\u0060\u0060\u0060xml\r\n\u003COpenApiGenerationEnvironmentVariables\u003EASPNETCORE_ENVIRONMENT=Development\u003C/OpenApiGenerationEnvironmentVariables\u003E\r\n\u0060\u0060\u0060",
        "createdAt": "2023-07-10T08:22:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-1628481873"
      },
      {
        "id": "IC_kwDOAQzde856nIoI",
        "parentId": null,
        "author": "david-brink-talogy",
        "content": "@captainsafia, clearly this didn\u0027t happen for .NET 8.  Allowing environment variables seems like a reasonable and low effort solution.  Any thoughts on getting this planned for .NET 9?",
        "createdAt": "2024-04-15T15:03:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-2057079304"
      },
      {
        "id": "IC_kwDOAQzde86A2Rs0",
        "parentId": null,
        "author": "EvanSchallerer",
        "content": "I\u0027m interested in hearing about updates to this as well.\r\n\r\n*@davidfowl said:*\r\n\u003E \u003E Validate the presence of a configuration entry which is defined outside of appsettings.json (e.g. user secrets or docker-compose.yml). For example:\r\n\u003E \r\n\u003E This should still work if it\u0027s in user secrets. If the application is missing required configuration in development then it never ran to begin with, right?\r\n\u003E \r\n\r\nThis comment is a couple years old now, but is anyone else able to validate that this is true in .NET 8? I am finding that specifying \u0060\u003COpenApiGenerateDocumentsOnBuild\u003Etrue\u003C/OpenApiGenerateDocumentsOnBuild\u003E\u0060 breaks the build if a dependency expects to receive a value from the ConfigurationManager. Following is a \u0060.csproj\u0060 and \u0060Program.cs\u0060 for an otherwise out-of-the-box ASP NET Core Web API project generated by Visual Studio 17.10.1 that reproduces this issue. I have \r\n\u0022AppConfigConnectionString\u0022 in my user secrets and the project builds and runs locally without \u0060OpenApiGenerateDocumentsOnBuild\u0060 set to true.\r\n\r\n*Delme.csproj:*\r\n\u0060\u0060\u0060xml\r\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk.Web\u0022\u003E\r\n\t\u003CPropertyGroup\u003E\r\n\t\t\u003CTargetFramework\u003Enet8.0\u003C/TargetFramework\u003E\r\n\t\t\u003CNullable\u003Eenable\u003C/Nullable\u003E\r\n\t\t\u003CImplicitUsings\u003Eenable\u003C/ImplicitUsings\u003E\r\n\t\u003C/PropertyGroup\u003E\r\n\r\n\t\u003CPropertyGroup\u003E\r\n\t\t\u003COpenApiDocumentsDirectory\u003E$(MSBuildProjectDirectory)\u003C/OpenApiDocumentsDirectory\u003E\r\n\t\t\u003COpenApiGenerateDocuments\u003Etrue\u003C/OpenApiGenerateDocuments\u003E\r\n\t\t\u003COpenApiGenerateDocumentsOnBuild\u003Etrue\u003C/OpenApiGenerateDocumentsOnBuild\u003E\r\n\t\t\u003CUserSecretsId\u003E47d6aea4-0b43-4b96-8258-3df0ffc01a49\u003C/UserSecretsId\u003E\r\n\t\u003C/PropertyGroup\u003E\r\n\r\n\t\u003CItemGroup\u003E\r\n\t\t\u003CPackageReference Include=\u0022Microsoft.Azure.AppConfiguration.AspNetCore\u0022 Version=\u00227.2.0\u0022 /\u003E\r\n\t\t\u003CPackageReference Include=\u0022Microsoft.Extensions.ApiDescription.Server\u0022 Version=\u00228.0.6\u0022\u003E\r\n\t\t\t\u003CPrivateAssets\u003Eall\u003C/PrivateAssets\u003E\r\n\t\t\t\u003CIncludeAssets\u003Eruntime; build; native; contentfiles; analyzers; buildtransitive\u003C/IncludeAssets\u003E\r\n\t\t\u003C/PackageReference\u003E\r\n\t\t\u003CPackageReference Include=\u0022Swashbuckle.AspNetCore\u0022 Version=\u00226.6.2\u0022 /\u003E\r\n\t\u003C/ItemGroup\u003E\r\n\u003C/Project\u003E\r\n\u0060\u0060\u0060\r\n\r\n*Program.cs:*\r\n\u0060\u0060\u0060c#\r\nnamespace Delme\r\n{\r\n\tpublic class Program\r\n\t{\r\n\t\tpublic static void Main(string[] args)\r\n\t\t{\r\n\t\t\tvar builder = WebApplication.CreateBuilder(args);\r\n\r\n\t\t\t// ATTN: This line breaks the build with error \u0022System.ArgumentNullException: Value cannot be null. (Parameter \u0027connectionString\u0027)\u0022\r\n\t\t\tbuilder.Configuration.AddAzureAppConfiguration(builder.Configuration[\u0022AppConfigConnectionString\u0022]);\r\n\r\n\t\t\tbuilder.Services.AddControllers();\r\n\t\t\tbuilder.Services.AddEndpointsApiExplorer();\r\n\t\t\tbuilder.Services.AddSwaggerGen();\r\n\r\n\t\t\tvar app = builder.Build();\r\n\t\t\tif (app.Environment.IsDevelopment())\r\n\t\t\t{\r\n\t\t\t\tapp.UseSwagger();\r\n\t\t\t\tapp.UseSwaggerUI();\r\n\t\t\t}\r\n\t\t\tapp.UseHttpsRedirection();\r\n\t\t\tapp.UseAuthorization();\r\n\t\t\tapp.MapControllers();\r\n\t\t\tapp.Run();\r\n\t\t}\r\n\t}\r\n}\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2024-06-11T22:34:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-2161711924"
      },
      {
        "id": "IC_kwDOAQzde86BQDJE",
        "parentId": null,
        "author": "GabrielHSFerreira",
        "content": "Same problem here. I don\u0027t want to have to do some fancy workaround using reflection or changing services registration just to generate a swagger file.",
        "createdAt": "2024-06-14T17:28:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-2168468036"
      },
      {
        "id": "IC_kwDOAQzde86BQPc3",
        "parentId": null,
        "author": "GabrielHSFerreira",
        "content": "\u003E I had the same issue (i.e. multiple \u0060IHostedService\u0060 implementations running at build time) when I upgraded from \u0060Microsoft.Extensions.ApiDescription.Server\u0060 version 6.0.10 to version 6.0.11.\r\n\u003E \r\n\u003E My workaround detects when the entry point is being called by \u0060GetDocument.Insider\u0060 and stops after building the app, which is enough for the OpenAPI generation to work.\r\n\u003E \r\n\u003E \u0060\u0060\u0060cs\r\n\u003E var builder = WebApplication.CreateBuilder(args);\r\n\u003E builder.Services.AddControllers();\r\n\u003E builder.Services.AddEndpointsApiExplorer();\r\n\u003E builder.Services.AddSwaggerGen();\r\n\u003E var app = builder.Build();\r\n\u003E \r\n\u003E if (Environment.GetCommandLineArgs().Any(e =\u003E e.Contains(\u0022GetDocument.Insider\u0022)))\r\n\u003E {\r\n\u003E     Console.WriteLine(\u0022Called by GetDocument.Insider in order to generate the OpenAPI definition at build time.\u0022);\r\n\u003E     return;\r\n\u003E }\r\n\u003E \r\n\u003E app.UseSwagger();\r\n\u003E app.UseSwaggerUI();\r\n\u003E app.UseHttpsRedirection();\r\n\u003E app.UseAuthorization();\r\n\u003E app.MapControllers();\r\n\u003E app.Run();\r\n\u003E \u0060\u0060\u0060\r\n\u003E \r\n\u003E The behaviour becomes more like the previous version which was basically only [calling the \u0060CreateHostBuilder\u0060 method](https://github.com/dotnet/aspnetcore/blob/v6.0.10/src/Tools/GetDocumentInsider/src/Commands/GetDocumentCommandWorker.cs#L58) (through the [HostFactoryResolver](https://github.com/dotnet/runtime/blob/v6.0.10/src/libraries/Microsoft.Extensions.HostFactoryResolver/src/HostFactoryResolver.cs#L22)) to build the host.\r\n\r\nUsing this works but is a kind of weird if to have in middle the startup.",
        "createdAt": "2024-06-14T18:04:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-2168518455"
      },
      {
        "id": "IC_kwDOAQzde86B_9_V",
        "parentId": null,
        "author": "EvanSchallerer",
        "content": "Unfortunately that solution doesn\u0027t work for my scenario where a dependency requires a configuration value before calling \u0060builder.Build()\u0060. I suppose any of those dependencies could be wrapped with the same check but I think that is too much of a hack for me to stomach.",
        "createdAt": "2024-06-20T15:51:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-2181029845"
      },
      {
        "id": "IC_kwDOAQzde86VVrHR",
        "parentId": null,
        "author": "spaasis",
        "content": "Just chiming in - an option to define the application environment, be it via environment variables or e.g. \u0060--environment Development\u0060, would make this functionality easy to use.",
        "createdAt": "2024-11-28T08:06:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45025#issuecomment-2505486801"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85WNH59",
    "title": "How to validate DI container in minimal api?",
    "url": "https://github.com/dotnet/aspnetcore/issues/45047",
    "createdAt": "2022-11-12T06:04:18Z",
    "lastUpdated": "2024-03-01T22:42:32Z",
    "body": "Before I was having something like this:\r\n\r\n\u0060\u0060\u0060c#\r\npublic static class Program\r\n{\r\n    private static async Task Main(string[] args)\r\n    {\r\n        var host = CreateHostBuilder(args).Build();\r\n        await host.RunAsync();\r\n    }\r\n\r\n    public static IHostBuilder CreateHostBuilder(params string[] args) =\u003E\r\n        Host.CreateDefaultBuilder(args)\r\n            .ConfigureHostConfiguration(builder =\u003E { })\r\n            .ConfigureAppConfiguration((context, builder) =\u003E { })\r\n            .ConfigureLogging((context, logging) =\u003E { })\r\n            .ConfigureWebHostDefaults(builder =\u003E builder.UseStartup\u003CStartup\u003E());\r\n}\r\n\u0060\u0060\u0060\r\n\r\nand then\r\n\r\n\u0060\u0060\u0060c#\r\n[TestClass]\r\npublic class HostTests\r\n{\r\n    [TestMethod]\r\n    public void Build_Should_Return_Host_With_Valid_Services()\r\n    {\r\n        var builder = Program.CreateHostBuilder()\r\n                             .UseDefaultServiceProvider(options =\u003E\r\n                                {\r\n                                    options.ValidateScopes = true;\r\n                                    options.ValidateOnBuild = true;\r\n                                });\r\n        var host = builder.Build();\r\n        host.Should().NotBeNull();\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nso it would fail in case of the DI container misconfiguration. Not always, but at least a basic smoke test.\r\n\r\nWhat would be an alternative in the Minimal API and .NET 7?",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85OPLBJ",
        "parentId": null,
        "author": "davidfowl",
        "content": "You have 2 options:\r\n- Use \u0060WebApplicationFactory\u003CT\u003E\u0060 from your unit test to bootstrap and modify the host builder\r\n- Do what you\u0027re doing right now, move the shared code into a method and call that from the test.",
        "createdAt": "2022-11-13T00:03:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45047#issuecomment-1312600137"
      },
      {
        "id": "IC_kwDOAQzde85OVX8C",
        "parentId": null,
        "author": "abatishchev",
        "content": "hi @davidfowl,\r\nthanks for helping me with my questions about the Minimal API. one of my goals is to bring to your and the team\u0027s attention some _deficiencies_, if you will, comparing to the classic model.\r\n\r\nin this case I was looking for a separation of concerns, to have a test dedicated to the validation of the DI container, which maybe would run longer but would produce an elaborate error if detects a misconfiguration, e.g. mismatch between lifecycles, etc.\r\n\r\nSomething similar to Simple Injector\u0027s [Verify()](https://docs.simpleinjector.org/en/latest/diagnostics.html).\r\n\r\nRight now, my problem with \u0060WebApplicationFactory\u003CT\u003E\u0060 is that it produces a very basic, unreadable exception. See https://github.com/dotnet/aspnetcore/issues/45252.",
        "createdAt": "2022-11-14T18:54:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45047#issuecomment-1314225922"
      },
      {
        "id": "IC_kwDOAQzde85PAhjx",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-23T19:06:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45047#issuecomment-1325537521"
      },
      {
        "id": "IC_kwDOAQzde85zEn_f",
        "parentId": null,
        "author": "abatishchev",
        "content": "@davidfowl do you know if any improvements to this area are planned in .NET 9 or already were made in .NET?",
        "createdAt": "2024-02-06T19:13:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45047#issuecomment-1930592223"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85WrR_Y",
    "title": "Enable Option to Use Content Negotiation for ProblemDetails",
    "url": "https://github.com/dotnet/aspnetcore/issues/45159",
    "createdAt": "2022-11-17T23:52:32Z",
    "lastUpdated": "2024-03-01T23:51:07Z",
    "body": "## Background and Motivation\r\n\r\nThe implementation of \u0060DefaultProblemDetailsWriter\u0060 strictly enforces that \u0060ProblemDetails\u0060 are only written if \u0060Accept\u0060 is present and can be content negotiated. This is contrary to the HTTP specification. [RFC 7231 \u00A75.3.2](https://www.rfc-editor.org/rfc/rfc7231#section-5.3.2) semantics for the \u0060Accept\u0060 header states:\r\n\r\n\u003E_...disregard the header field by treating the response as if it is not subject to content negotiation._\r\n\r\nThe current behavior is very sensible as a default. It requires a client to understand they can get a \u0060ProblemDetails\u0060 response; however, it is very common for API authors to not honor content negotiation for errors.\r\n\r\n\u0060DefaultProblemDetailsWriter\u0060 is \u0060internal\u0060 and \u0060sealed\u0060 with functionality that cannot be easily extended or customized. Ultimately, an API author simply wants to decide if content negotiation should take place for \u0060ProblemDetails\u0060 and that shouldn\u0027t require customization when trivial configuration will suffice.\r\n\r\n## Proposed API\r\n\r\nThe proposed API would be to extend \u0060ProblemDetailsOptions\u0060 to include a property to determine whether content negotiation should be used. The default value will be \u0060true\u0060, which retains the current behavior. If a developer sets the value to \u0060false\u0060, the expectation is that content negotiation is skipped.\r\n\r\n\u0060\u0060\u0060diff\r\npublic class ProblemDetailsOptions\r\n{\r\n    /// \u003Csummary\u003E\r\n    /// The operation that customizes the current \u003Csee cref=\u0022Mvc.ProblemDetails\u0022/\u003E instance.\r\n    /// \u003C/summary\u003E\r\n    public Action\u003CProblemDetailsContext\u003E? CustomizeProblemDetails { get; set; }\r\n\r\n\u002B   /// \u003Csummary\u003E\r\n\u002B   /// Gets or sets a value indicating whether to use HTTP content negotiation.\r\n\u002B   /// \u003C/summary\u003E\r\n\u002B   /// \u003Cvalue\u003ETrue if the content negotiation is used; otherwise, false. The default value is \u003Cc\u003Etrue\u003C/c\u003E.\u003C/value\u003E\r\n\u002B   public bool UseContentNegotiation { get; set; } = true;\r\n}\r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\nThe default configuration where content negotiation is used. This is the same behavior as today.\r\n\r\n\u0060\u0060\u0060c#\r\nbuilder.Services.AddProblemDetails();\r\n\u0060\u0060\u0060\r\n\r\nA new configuration option which can instruct \u0060IProblemDetailsWriter\u0060 implementations not to honor content negotiation.\r\n\r\n\u0060\u0060\u0060c#\r\nbuilder.Services.AddProblemDetails(options =\u003E options.UseContentNegotiation = false);\r\n\u0060\u0060\u0060\r\n\r\n## Risks\r\n\r\nNothing apparent. The default configuration and behavior would be retained.\r\n\r\n## Additional Information\r\n\r\nIn accordance with [RFC 7231 \u00A75.3.2](https://www.rfc-editor.org/rfc/rfc7231#section-5.3.2), if \u0060Accept\u0060 is unspecified or is empty, then the value of \u0060ProblemDetailsOptions.UseContentNegotiation\u0060 should be ignored and implied to be \u0060false\u0060. This behavior is being tracked in #45051.\r\n",
    "upvotes": 2,
    "labels": [
      "area-mvc",
      "api-needs-work",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85PAdv8",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2022-11-23T18:51:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45159#issuecomment-1325521916"
      },
      {
        "id": "IC_kwDOAQzde85PQD02",
        "parentId": null,
        "author": "halter73",
        "content": "API Review Notes\r\n\r\n1. Where is this options used? When writing problem details via the new service for MVC, the error handler middleware, status page result, the developer exception page.\r\n2. Is there another name for \u0060UseContentNegotiation\u0060 that can default for false? \u0060IgnoreAcceptHeader\u0060?\r\n3. Can we change the default and make a breaking change announcement? The developer exception page will try to render to HTML first, so it shouldn\u0027t break that. @commonsensesoftware Do you think it would be too breaking to change the default here?\r\n\r\nWe\u0027ll hold off on approving this until we\u0027re confident what we want the default to be. Ideally, we\u0027ll have whatever we name the option false by default.",
        "createdAt": "2022-11-28T19:08:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45159#issuecomment-1329610038"
      },
      {
        "id": "IC_kwDOAQzde85PQqHB",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "Great questions.\r\n\r\n\u003E1. Where is this option used?\r\n\r\nThis _should_ be useful in any scenario where \u0060ProblemDetails\u0060 or \u0060ProblemDetailsOptions\u0060 would be used to make a decision, which includes all of the scenarios you outlined.\r\n\r\nI was specifically thinking in \u0060DefaultProblemDetailsWriter\u0060 like this:\r\n\r\n\u0060\u0060\u0060diff\r\npublic DefaultProblemDetailsWriter(IOptions\u003CProblemDetailsOptions\u003E options)\r\n{\r\n    _options = options.Value;\r\n}\r\n\r\npublic bool CanWrite(ProblemDetailsContext context)\r\n{\r\n\u002B    if (_options.SkipContentNegotiation)\r\n\u002B    {\r\n\u002B        // always return true because we aren\u0027t honoring Accept\r\n\u002B        return true;\r\n\u002B    }\r\n...\r\n}\r\n\u0060\u0060\u0060\r\n\r\nHowever, this could just as easily be used for the \u0060ProblemDetailsFactory\u0060 too.\r\n\r\n\u003E2. Is there another name that can default to \u0060false\u0060?\r\n\r\n- \u0060SkipContentNegotiation\u0060\r\n- \u0060DisableContentNegotation\u0060\r\n\r\nwere a few other variants I considered. Those can be used to default to \u0060false\u0060.\r\n\r\nI did consider \u0060IgnoreAcceptHeader\u0060, but content negotiation _can_ be more complex that just the \u0060Accept\u0060 header. I was concerned the term would be misleading, even though the alternative is a bit verbose.\r\n\r\nConsider the following request:\r\n\r\n\u0060\u0060\u0060http\r\nPOST /order HTTP/3\r\nHost: localhost\r\nContent-Type: application/json\r\nContent-Length: 420\r\n\r\n{\u0022customer\u0022: \u0022John Doe\u0022, \u0022product\u0022: \u0022Contoso soap\u0022, \u0022quantity\u0022: 42}\r\n\u0060\u0060\u0060\r\n\r\nIf this results in a client error, say validation, and \u0060ProblemDetails\u0060 were to be returned, then the current behavior would not yield a body because there is no \u0060Accept\u0060. A server _could_ rationalize that \u0060application/problem\u002Bjson\u0060 is a reasonable choice because \u0060Content-Type\u0060 was \u0060application/json\u0060. This would be a form of content negotiation without \u0060Accept\u0060.\r\n\r\n\u0060UseContentNegotiation\u0060 or \u0060SkipContentNegotiation\u0060 would express the same intent, albeit a bit longer, but without restricting it specifically to the \u0060Accept\u0060 header. I have a mild concern that if the option is too specific, then it could lead to additional options or changes in the future. I don\u0027t think we\u0027d want to add \u0060IgnoreAcceptHeader\u0060 and then potentially \u0060IgnoreContenTypeHeader\u0060 later.\r\n\r\nI\u0027m open to other names, but that\u0027s my 2\u00A2.\r\n\r\n\u003E3. Can we change the default and make a breaking change announcement?\r\n\r\nArguably, the behavior is already broken in .NET 7; at least, using the \u0060IProblemDetailsService\u0060. I agree and think the behavior to restrict matching a \u0060ProblemDetails\u0060 response to \u0060Accept\u0060 (when specified) is correct, but it was unexpected. I don\u0027t immediately see a need to change the default behavior for \u0060AddProblemDetails\u0060 in .NET 8.0\u002B. Anyone that adapts to the .NET 7.0 behavior will likely be upset if things flip-flop. This new option would be congruent with how things currently behave.\r\n\r\nAs you point out, this option _could_ be used in other places and could be tricky with the current, expected behaviors. Another alternative could be to use:\r\n\r\n\u0060\u0060\u0060c#\r\npublic bool? SkipContentNegotiation { get; set; }\r\n\u0060\u0060\u0060\r\n\r\nThis would be expected to have the following behaviors:\r\n\r\n- \u0060false\u0060 - do not skip content negotiation\r\n- \u0060true\u0060 - skip/ignore content negotiation\r\n- \u0060null\u0060 - the default; since it is unspecified, the option consumer decides which would allow retaining backward compatibility\r\n\r\nAn enumeration might be more _intention revealing_ here:\r\n\r\n\u0060\u0060\u0060c#\r\npublic enum ProblemDetailsContentNegotiation\r\n{\r\n    Default = 0, // whatever the existing, default behavior is; backward compatible\r\n    Strict  = 1, // could also be Required, Enforce\r\n    Skip    = 2, // could also be None, Optional\r\n}\r\n\r\npublic ProblemDetailsContentNegotiation ContentNegotiation { get; set; }\r\n\u0060\u0060\u0060",
        "createdAt": "2022-11-28T21:09:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45159#issuecomment-1329766849"
      },
      {
        "id": "IC_kwDOAQzde85VP5Fo",
        "parentId": null,
        "author": "brunolins16",
        "content": "I have been thinking about this proposal and one thing that, since the initial proposal, annoyed me is that we are adding an option to \u0060ProblemDetailsOptions\u0060 that will not be always honored. \r\n\r\nLet me try explaining what I mean about \u0022will not be always honored\u0022. We are adding the new flag \u0060SkipContentNegotiation\u0060, or \u0060IgnoreAccept\u0060, as a user my expectation is that once it is \u0060true\u0060 all problem details generation, using the \u0060IProblemDetailsService\u0060 will skip the \u0060Accept\u0060 header validation, however, it will only be true for our \u0060DefaultProblemDetailsWriter\u0060 and we cannot guarantee that a custom \u0060IProblemDetailsWriter\u0060 will follow this flag or not.\r\n\r\nI was thinking about naming it something like \u0060AlwaysFallbackToDefaultWriter\u0060, the name is bad \uD83D\uDE02 but the idea is to be something that clear indicates a \u0060Problem Details\u0060 will be always generated, using the default writer, when no other writer is able to handle it. Basically, when \u0060true\u0060 we will never call \u0060CanWrite\u0060 for \u0060DefaultProblemDetailsWriter\u0060 and write directly.\r\n\r\nEg.:\r\n\r\n\u0060\u0060\u0060c#\r\n// Try to write using all registered writers (not including the defaullt writer)\r\n// sequentially and stop at the first one that\r\n// \u0060canWrite.\r\nfor (var i = 0; i \u003C _writers.Length; i\u002B\u002B)\r\n{\r\n    var selectedWriter = _writers[i];\r\n    if (selectedWriter.CanWrite(context))\r\n    {\r\n        return selectedWriter.WriteAsync(context);\r\n    }\r\n}\r\n\r\nif (_options.AlwaysFallbackToDefaultWriter || _defaultWriter.CanWrite(context))\r\n{\r\n    return _defaultWriter.WriteAsync(context);\r\n}\r\n\u0060\u0060\u0060\r\n\r\n@commonsensesoftware Thoughts?",
        "createdAt": "2023-02-14T18:55:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45159#issuecomment-1430229352"
      },
      {
        "id": "IC_kwDOAQzde85V4uGE",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "@brunolins16 ignoring options is always a possibility. Extenders don\u0027t have to honor the \u0060JsonOptions\u0060 either. They might elect not to or don\u0027t realize they need to nor how (e.g. via DI). This falls into the category of _caveat emptor_ IMHO. There is a certain amount of knowledge expected when you extend or customize things. The most rudimentary of testing should equally reveal if the correct behavior has been implemented.\r\n\r\nI _think_ what we are collectively saying and agreeing to, in somewhat different ways, is that content negotiation validation in conjunction with the proposed option needs to be lifted out of the internal space. There are two ways I can currently think of that this could be done.\r\n\r\n### Option 1\r\n\r\nRefactor the validation logic for each type of media type into an interface that would have a concrete implementation for 2 default rules:\r\n\r\n- \u0060Accept\u0060\r\n- \u0060Content-Type\u0060\r\n\r\nThe \u0060ProblemDetailsOptions\u0060 could then add these rules in its default initialization. This would provide full access to the rules and logic in a reusable way as well as allow extenders to remove the rules or add, new custom implementions.\r\n\r\nWhile this would work, I concede that it\u0027s probably _over-engineered_, which is why I haven\u0027t bothered showcasing what the code _might_ look like (but I can \uD83D\uDE09). These are likely the only two content negotiation scenarios that will ever exist.\r\n\r\n### Option 2\r\n\r\nCreate a new base class that has the common logic baked into. Something like:\r\n\r\n\u0060\u0060\u0060c#\r\npublic abstract class ProblemDetailsWriterBase : IProblemDetailsWriter\r\n{\r\n    private static readonly MediaTypeHeaderValue _jsonMediaType = new(\u0022application/json\u0022);\r\n    private static readonly MediaTypeHeaderValue _problemDetailsJsonMediaType = new(\u0022application/problem\u002Bjson\u0022);\r\n    private readonly IOptions\u003CProblemDetailsOptions\u003E _options;\r\n\r\n    protected ProblemDetailsWriterBase(IOptions\u003CProblemDetailsOptions\u003E options) =\u003E _options = options;\r\n\r\n    protected ProblemDetailsOptions Options =\u003E _options.Value;\r\n\r\n    bool IProblemDetailsWriter.CanWrite(ProblemDetailsContext context) =\u003E\r\n        CanNegotiateContent(context) \u0026\u0026 CanWrite(context);\r\n\r\n    public abstract ValueTask WriteAsync(ProblemDetailsContext context);\r\n\r\n    protected virtual bool CanWrite(ProblemDetailsContext context) =\u003E true;\r\n\r\n    protected virtual bool CanNegotiateContent(ProblemDetailsContext context)\r\n    {\r\n        if (Options.SkipContentNegotiation)\r\n        {\r\n            return true;\r\n        }\r\n        \r\n        var headers = context.HttpContext.Request.Headers;\r\n        var accept = headers.Accept.GetList\u003CMediaTypeHeaderValue\u003E();\r\n\r\n        if (IsAcceptable(accept))\r\n        {\r\n            return true;\r\n        }\r\n\r\n        // if Accept isn\u0027t specified, infer from Content-Type if possible\r\n        if (accept.Count == 0 \u0026\u0026\r\n            headers.Get\u003CMediaTypeHeaderValue\u003E(HeaderNames.ContentType) is MediaTypeHeaderValue contentType)\r\n        {\r\n            return IsSupportedMediaType(contentType);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected bool IsAcceptable(IReadOnlyList\u003CMediaTypeHeaderValue\u003E accept)\r\n    {\r\n        // Based on https://www.rfc-editor.org/rfc/rfc7231#section-5.3.2 a request\r\n        // without the Accept header implies that the user agent\r\n        // will accept any media type in response\r\n        if (accept.Count == 0)\r\n        {\r\n            return true;\r\n        }\r\n\r\n        for (var i = 0; i \u003C accept.Count; i\u002B\u002B)\r\n        {\r\n            var value = accept[i];\r\n\r\n            if (_jsonMediaType.IsSubsetOf(value) ||\r\n                _problemDetailsJsonMediaType.IsSubsetOf(value))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected bool IsSupportedMediaType(MediaTypeHeaderValue contentType) =\u003E\r\n        jsonMediaType.IsSubsetOf( contentType )\r\n        || problemDetailsJsonMediaType.IsSubsetOf( contentType );\r\n}\r\n\u0060\u0060\u0060\r\n\r\nUsing this approach, all of the logic in \u0060DefaultProblemDetailsWriter.CanWrite\u0060 is moved to the base class. Extenders can (and likely will) start with the \u0060ProblemDetailsWriterBase\u0060, which will enforce whether content negotiation is valid before checking any additional validation. The door is still open to implement \u0060IProblemDetailsWriter\u0060 directly, but then we circle back to caveat emptor and, as the extending developer, you\u0027re responsible for doing the _right_ thing.",
        "createdAt": "2023-02-22T22:42:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45159#issuecomment-1440932228"
      },
      {
        "id": "IC_kwDOAQzde85WFcS8",
        "parentId": null,
        "author": "brunolins16",
        "content": "@commonsensesoftware appreciate your thoughts and **option 2** is not bad but I really believe we could try simplifying instead over engineering it.  We can have the \u0060DefaultProblemDetailsWriter\u0060 public and probably change some methods to \u0060virtual\u0060, however, I think we should try to keep the design simply and just allow an always skip/validation behavior or maybe a delegate that could be customized.",
        "createdAt": "2023-02-24T18:59:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45159#issuecomment-1444267196"
      },
      {
        "id": "IC_kwDOAQzde85WFxxO",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "@brunolins16 I agree - no need to over-engineer things. Rolling up things into the \u0060DefaultProblemDetailsWriter\u0060 and making it extensible would be great. I suspect it would probably look like the example provided.\r\n\r\nJust as things can be over-engineered, they can also be _over-configured_. Having some kind of delegate is unnecessary IMO. I suspect most people will not change whatever the default setting settles on. For those that do change it, they will likely only want all validation or none - as originally described. Anyone that needs or wants to configure things further _should_ be expected to understand the \uD83D\uDC30 \uD83D\uDD73\uFE0F they are going down. This is where keeping it simple and enforcing specific behaviors are at odds. Expecting a developer to know and honor the option when they down this path is not unreasonable to me. Similarly extending the out-of-the-box functionality should be possible without having to reimplement everything (as is currently the case).\r\n\r\nUltimately, that\u0027s why the original proposal is a single, simple option setting that you can configure. Honoring the setting should be the onus of the developers that extend the functionality as is the case with every other setting.",
        "createdAt": "2023-02-24T19:49:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45159#issuecomment-1444355150"
      },
      {
        "id": "IC_kwDOAQzde85Zo6i6",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-04-11T18:38:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45159#issuecomment-1503897786"
      },
      {
        "id": "IC_kwDOAQzde85Zo67c",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "Looks like the next step here is to revise the proposed API and decide how to proceed. Moving this back to .NET 8 planning; the team is fairly slammed at the moment so we don\u0027t expect to have cycles for this in the near term.",
        "createdAt": "2023-04-11T18:40:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45159#issuecomment-1503899356"
      },
      {
        "id": "IC_kwDOAQzde85Zo84X",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "@adityamandaleeka The primary work is settling on the the API design, which seems largely to be naming. The effort to execute is trivial IMHO and I\u0027m happy to put the PR for it once some decisions are locked. If there is something more I can do to help move things along, just let me know. ",
        "createdAt": "2023-04-11T18:44:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45159#issuecomment-1503907351"
      },
      {
        "id": "IC_kwDOAQzde85jt7cH",
        "parentId": null,
        "author": "source-studio",
        "content": "We\u0027re experiencing an issue that might be related to this and also #45051.\r\n\r\nWe\u0027ve enabled versioning on our Minimal API using the \u0060MediaTypeApiVersionReader\u0060 approach, which stipulates the inclusion of a version parameter within the \u0060Accept\u0060 header, such as \u0060v=1.0\u0060. A typical \u0060Accept\u0060 header would therefore look something like: \u0060application/json; v=1.0\u0060.\r\n\r\nHowever, since this is a more _specific_ media type than \u0060application/json\u0060, the call to \u0060_jsonMediaType.IsSubsetOf(value)\u0060 in\u0060Rfc7231ProblemDetailsWriter\u0060 returns \u0060false\u0060, which means the problem details response is never written. I actually believe this was the original cause of #45051, as it describes the exact scenario we\u0027re facing.\r\n\r\nI guess it might be necessary to permit more specific media types by allowing for this in the conditional checks, for example:\r\n\r\n\u0060\u0060\u0060csharp\r\nif (_jsonMediaType.IsSubsetOf(acceptHeaderValue) ||\r\n    acceptHeaderValue.IsSubsetOf(_jsonMediaType) ||\r\n    _problemDetailsJsonMediaType.IsSubsetOf(acceptHeaderValue) ||\r\n    acceptHeaderValue.IsSubsetOf(_problemDetailsJsonMediaType))\r\n{\r\n    return true;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThis is unfortunately blocking us from using both Minimal API versioning with a media type header in conjunction with problem details responses, so we\u0027ll have to fall back to another version reader implementation until this is addressed.",
        "createdAt": "2023-08-10T10:42:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45159#issuecomment-1672984327"
      },
      {
        "id": "IC_kwDOAQzde85jwslb",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "@source-studio I have confirmed that this is, in fact, a \uD83D\uDC1E . The current adapter logic is backward. It should be:\r\n\r\n\u0060\u0060\u0060c#\r\nif ( acceptHeaderValue.IsSubsetOf( jsonMediaType ) ||\r\n     acceptHeaderValue.IsSubsetOf( problemDetailsJsonMediaType ) )\r\n{\r\n    return true;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThe naming is a feels off IMHO. \u0060application/json;v=1.0\u0060 feels like a _superset_ of \u0060application/json\u0060 as opposed to a _subset_. Upon reading the documentation more closely, it is clear that it\u0027s backward. I was able to repro the scenario and verify things should be inverted.\r\n\r\nPlease file a [new bug](https://github.com/dotnet/aspnet-api-versioning/issues/new?assignees=commonsensesoftware\u0026labels=bug%2Ctriage\u0026projects=\u0026template=10_bug_report.yml) in the [API Versioning](https://github.com/dotnet/aspnet-api-versioning) repo. I\u0027ll have it patched for you ASAP.",
        "createdAt": "2023-08-10T18:31:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45159#issuecomment-1673709915"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85W8Ykx",
    "title": "[Codefixer] Recommend using \u0060TypedResults\u0060 over using \u0060Results\u0060",
    "url": "https://github.com/dotnet/aspnetcore/issues/45217",
    "createdAt": "2022-11-21T22:21:12Z",
    "lastUpdated": "2024-12-13T04:19:21Z",
    "body": "## Background and Motivation\r\n\r\n\u003C!--\r\nWe welcome new analyzers and codefixers in the ASP.NET repo!\r\n\r\nWe use the same process to review both new analyzer/codefixer submissions and API proposals. There is an overview of our process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md). This template will help us gather the information we need to start the review process.\r\n\r\nUnder this heading, describe the problem that your analyzer is trying to solve. Examples of great motivating scenarios include helping users avoid\r\nperformance issues, potentially insecure code, or recommending better APIs for a scenario.\r\n--\u003E\r\n\r\n- Recommend returning \u0060TypedResults\u0060 instead of \u0060Results\u0060\r\n- Recommend adding the \u0060Results\u003C\u003E\u0060 return type to your class \r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/\u0022, (int id) =\u003E SomeCondition(id) ? Results.Ok() : Results.NotFound());\r\n\u0060\u0060\u0060\r\n\r\nBecomes\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/\u0022, (int id) =\u003E SomeCondition(id) ? TypedResults.Ok() : TypedResults.NotFound());\r\n\u0060\u0060\u0060\r\n\r\nAnd further becomes:\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/\u0022, Results\u003COk, NotFound\u003E(int id) =\u003E SomeCondition(id) ? TypedResults.Ok() : TypedResults.NotFound());\r\n\u0060\u0060\u0060\r\n\r\n## Proposed Analyzer\r\n\r\n### Analyzer Behavior and Message\r\n\r\n\u003C!--\r\nProvide a description of when the analyzer will trigger and the associated analyzer message.\r\n--\u003E\r\n\r\n\u003C!--\r\nAnalyzer categories are derived from the categories documented in https://learn.microsoft.com/dotnet/fundamentals/code-analysis/categories\r\nTo select a category, review each category\u0027s description and select the best category based on the functionality of your analyzer.\r\n\r\nAnalyzer severity levels are documented in https://learn.microsoft.com/visualstudio/code-quality/use-roslyn-analyzers#configure-severity-levels\r\nReview the description to observe how the level set on the analyzer will affect build-time and editor behavior and select the best\r\nlevel for the task.\r\n--\u003E\r\n\r\n### Category\r\n\r\n- [ ] Design\r\n- [ ] Documentation\r\n- [ ] Globalization\r\n- [ ] Interoperability\r\n- [ ] Maintainability\r\n- [ ] Naming\r\n- [ ] Performance\r\n- [ ] Reliability\r\n- [ ] Security\r\n- [ ] Style\r\n- [ ] Usage\r\n\r\n### Severity Level\r\n\r\n- [ ] Error\r\n- [X] Warning\r\n- [ ] Info\r\n- [ ] Hidden\r\n\r\n## Usage Scenarios\r\n\r\n\u003C!--\r\nProvide code examples that would trigger your analyzer to warn. Identify the spans of code that the analyzer\r\nwill be triggered on. When applicable, describe the result of the code fix associated with the change.\r\n--\u003E\r\n\r\n## Risks\r\n\r\n\u003C!--\r\nPlease mention any risks that to your knowledge the API proposal might entail, such as breaking changes, performance regressions, etc.\r\n--\u003E\r\n",
    "upvotes": 0,
    "labels": [
      "api-suggestion",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde858Ub6g",
        "parentId": null,
        "author": "captainsafia",
        "content": "Cleaning things out and moving this to the backlog. I think this should be done in two parts: an analyzer to recommend \u0060TypedResults\u0060 over \u0060Results\u0060 and an analyzer to recommend adding the results type. IMO, the second one is probably less urgent.\r\n\r\nPaging resident analyzer guru @david-acker for any interest/time in doing this.",
        "createdAt": "2024-04-30T15:48:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45217#issuecomment-2085732000"
      },
      {
        "id": "IC_kwDOAQzde858WTWE",
        "parentId": null,
        "author": "david-acker",
        "content": "@captainsafia I\u0027d be happy to pick this up when I have some free time!",
        "createdAt": "2024-04-30T17:44:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45217#issuecomment-2086221188"
      },
      {
        "id": "IC_kwDOAQzde86XbTm9",
        "parentId": null,
        "author": "gregatwisetech",
        "content": "@david-acker @captainsafia \n\nI\u0027ve come across this issue while searching for whether an analyzer exists for it.\n\nBelow, \u0022part 1\u0022 and \u0022part 2\u0022 refer to parts as suggested by @captainsafia.\n\nHere\u0027s my thinking, which I think is very close to part 2: I would like to analyze \u0060IEndpointRouteBuilder.Map...()\u0060 calls and suggest using \u0060Results\u003C\u003E\u0060 if the delegate passed in returns an \u0060IResult\u0060.\n\nThe reason I would like to implement part 2 is that my use case is that I want to prevent returning \u0060IResult\u0060.\n\nIf I start with part 1, that is not sufficient to reach my goal - when \u0060TypedResults\u0060 are used, the return type of the delegate may still be \u0060IResult\u0060 (it will be the right type in the case of the example in the OP, but it won\u0027t for methods returning \u0060IResult\u0060 being passed in).\n\nIf I start with part 2 though, it will implicitly take care of the first part as well: since \u0060Results\u003C\u003E\u0060 is a more specific type than \u0060IResult\u0060, calls to \u0060Results\u0060 methods will result in a CS0266 compiler error (Cannot implicitly convert type \u0027Microsoft.AspNetCore.Http.IResult\u0027 to \u0027Microsoft.AspNetCore.Http.HttpResults.Results...\u0027) thus providing an indirect prompt to use \u0060TypedResults\u0060.\n\nTime permitting, I may opt for implementing both parts, but part 2 is the one I need.\n\nSince it\u0027s not tagged with \u0060help wanted\u0060, please let me know if you would be interested in receiving this contribution and if you have any feedback regarding the approach I suggested, as well as any suggestions for the wording of the diagnostic. I need this analyzer either way and I\u0027d be happy to share it.\n\nPlease note I currently do not intend to provide a code fix for it, just the analyzer.",
        "createdAt": "2024-12-13T04:19:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45217#issuecomment-2540517821"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85W8elz",
    "title": "[Analyzer] Warn on inconsistent constraints between route params and types",
    "url": "https://github.com/dotnet/aspnetcore/issues/45218",
    "createdAt": "2022-11-21T22:40:18Z",
    "lastUpdated": "2024-02-13T01:49:56Z",
    "body": "## Background and Motivation\r\n\r\nIt is possible to add constraints to route parameters that will never bind to an MVC or Minimal API action.\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/product/{id:alpha}\u0022, (int id) =\u003E ...);\r\n\u0060\u0060\u0060\r\nIn the example above, alpha characters are never valid with an int route and will always fail.\r\n\r\n## Proposed Analyzer\r\n\r\nThe analyzer should check for constraints inconsistent with the type being bound to and warn the user.\r\n\r\n### Analyzer Behavior and Message\r\n\r\nA route value that passes data type constraints such as datetime/alpha/bool errors when binding to int/double/decimal/etc:\r\n\r\n\u0060\u0060\u0060cs\r\napp.MapGet(\u0022/{id:datetime}\u0022, (int id) =\u003E ...);\r\napp.MapGet(\u0022/{id:alpha}\u0022, (int id) =\u003E ...);\r\napp.MapGet(\u0022/{id:bool}\u0022, (int id) =\u003E ...);\r\n\u0060\u0060\u0060\r\n\r\nAnd others like float/int/decimal constraints error when binding to bool/DateTime/etc.\r\n\r\nSome number-based constraints require the parameter value is parsable as a number. That means they can\u0027t be bound to a DateTime, for example.\r\n\r\n\u0060\u0060\u0060cs\r\napp.MapGet(\u0022/{id:min(10)}\u0022, (DateTime id) =\u003E ...);\r\n\u0060\u0060\u0060\r\n\r\nThe message should be:\r\n\r\n\u003E $\u0022The constraint \u0027{constraint}\u0027 on parameter \u0027{parameter}\u0027 can\u0027t be used with type {typeName}.\u0022\r\n\r\n### Category\r\n\r\n- [ ] Design\r\n- [ ] Documentation\r\n- [ ] Globalization\r\n- [ ] Interoperability\r\n- [ ] Maintainability\r\n- [ ] Naming\r\n- [ ] Performance\r\n- [ ] Reliability\r\n- [ ] Security\r\n- [ ] Style\r\n- [x] Usage\r\n\r\n### Severity Level\r\n\r\n- [x] Error\r\n- [ ] Warning\r\n- [ ] Info\r\n- [ ] Hidden\r\n\r\n## Usage Scenarios\r\n\r\n\u0060\u0060\u0060cs\r\napp.MapGet(\u0022/{id:datetime}\u0022, (int id) =\u003E ...);\r\napp.MapGet(\u0022/{id:alpha}\u0022, (int id) =\u003E ...);\r\napp.MapGet(\u0022/{id:bool}\u0022, (int id) =\u003E ...);\r\napp.MapGet(\u0022/{id:min(10)}\u0022, (DateTime id) =\u003E ...);\r\napp.MapGet(\u0022/{id:long}\u0022, (int id) =\u003E ...);\r\n\u0060\u0060\u0060\r\n\r\nShould also work on MVC actions and Razor pages.\r\n\r\n## Risks\r\n\r\n\u003C!--\r\nPlease mention any risks that to your knowledge the API proposal might entail, such as breaking changes, performance regressions, etc.\r\n--\u003E\r\n",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "api-approved",
      "api-suggestion",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85O3Cbz",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2022-11-22T04:44:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45218#issuecomment-1323050739"
      },
      {
        "id": "IC_kwDOAQzde85PP-eK",
        "parentId": null,
        "author": "halter73",
        "content": "API Review Notes:\r\n\r\n1. Usage and error makes sense. We\u0027re confident these endpoints will be completely broken when hit at runtime.\r\n2. This only fires for routes that have constraints already.\r\n3. Given that this \u0022[s]hould also work on MVC actions and Razor pages.\u0022 How do you read from a slug in a razor page? What would be invalid? A \u0060datetime\u0060 constraint?\r\n4. \u0060app.MapGet(\u0022/{id:int}\u0022, (long id) =\u003E ...);\u0060 should not trigger the analyzer because the route is more constrained than the parameter. It should fire for the opposite where the route is less constrained.\r\n5. Should we have a fixer? It would be easy to suggest removing the constraint, but developers probably added them for a reason. However suggesting an \u0060int\u0060 constraint for \u0060int\u0060 parameters seems redundant. That would just turn 400 results into 404. tl;dr: We\u0027re fine without a fixer for now.\r\n\r\nAPI Approved!\r\n\r\n\u0060\u0060\u0060\r\nMessage: $\u0022The constraint \u0027{constraint}\u0027 on parameter \u0027{parameter}\u0027 can\u0027t be used with type {typeName}.\u0022\r\nCategory: Usage\r\nSeverity Level: Error\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2022-11-28T18:52:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45218#issuecomment-1329588106"
      },
      {
        "id": "IC_kwDOAQzde85hGbnb",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-07-10T14:19:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45218#issuecomment-1629075931"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85W8i-E",
    "title": "[Refactoring] Add back middlesware that are registered by WebApplication",
    "url": "https://github.com/dotnet/aspnetcore/issues/45222",
    "createdAt": "2022-11-21T22:54:04Z",
    "lastUpdated": "2024-07-03T21:21:20Z",
    "body": "## Background and Motivation\r\n\r\n\u003C!--\r\nWe welcome new analyzers and codefixers in the ASP.NET repo!\r\n\r\nWe use the same process to review both new analyzer/codefixer submissions and API proposals. There is an overview of our process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md). This template will help us gather the information we need to start the review process.\r\n\r\nUnder this heading, describe the problem that your analyzer is trying to solve. Examples of great motivating scenarios include helping users avoid\r\nperformance issues, potentially insecure code, or recommending better APIs for a scenario.\r\n--\u003E\r\n\r\n## Proposed Analyzer\r\n\r\nFor middlesware that are registered automatically by the WebApplication, consider a refactoring to manually add them back to the application.\r\n\r\n### Analyzer Behavior and Message\r\n\r\n\u003C!--\r\nProvide a description of when the analyzer will trigger and the associated analyzer message.\r\n--\u003E\r\n\r\n\u003C!--\r\nAnalyzer categories are derived from the categories documented in https://learn.microsoft.com/dotnet/fundamentals/code-analysis/categories\r\nTo select a category, review each category\u0027s description and select the best category based on the functionality of your analyzer.\r\n\r\nAnalyzer severity levels are documented in https://learn.microsoft.com/visualstudio/code-quality/use-roslyn-analyzers#configure-severity-levels\r\nReview the description to observe how the level set on the analyzer will affect build-time and editor behavior and select the best\r\nlevel for the task.\r\n--\u003E\r\n\r\n### Category\r\n\r\n- [ ] Design\r\n- [ ] Documentation\r\n- [ ] Globalization\r\n- [ ] Interoperability\r\n- [ ] Maintainability\r\n- [ ] Naming\r\n- [ ] Performance\r\n- [ ] Reliability\r\n- [ ] Security\r\n- [ ] Style\r\n- [x] Usage\r\n\r\n### Severity Level\r\n\r\n- [ ] Error\r\n- [ ] Warning\r\n- [x] Info\r\n- [ ] Hidden\r\n\r\n## Usage Scenarios\r\n\r\n\u003C!--\r\nProvide code examples that would trigger your analyzer to warn. Identify the spans of code that the analyzer\r\nwill be triggered on. When applicable, describe the result of the code fix associated with the change.\r\n--\u003E\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build(); // \u003C-- underline \u0027app\u0027 with refactor suggestion\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060csharp\r\nvar app = WebApplication.Create(args); // \u003C-- underline \u0027app\u0027 with refactor suggestion\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\nResult:\r\n\u0060\u0060\u0060csharp\r\nvar app = WebApplication.Create(args);\r\nif (app.HostingEnvironment.IsDevelopment())\r\n{\r\n    app.UseDeveloperExceptionPage();\r\n}\r\n\r\napp.UseRouting();\r\n\r\napp.UseAuthentication(); // detect any \u0060UseAuthentication\u0060 call and omit this if there is one\r\napp.UseAuthorization(); // detect any \u0060UseAuthorization\u0060 call and omit this if there is one\r\n// additionally, place after any existing \u0060UseAuthentication\u0060 call\r\n\r\n// detect user middleware/endpoints and put them here\r\n\r\napp.UseEndpoints(e =\u003E {});\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\n## Risks\r\n\r\n\u003C!--\r\nPlease mention any risks that to your knowledge the API proposal might entail, such as breaking changes, performance regressions, etc.\r\n--\u003E\r\nWe will not be able to place the auto-injected middleware correctly in all situations, that should be fine since this refactor is to help users be explicit about their middleware order.\r\n\r\nAnother risk is if we add more implicit middleware we\u0027ll want to keep the refactoring up to date.",
    "upvotes": 0,
    "labels": [
      "api-needs-work",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85O2MV3",
        "parentId": null,
        "author": "Tratcher",
        "content": "Why?",
        "createdAt": "2022-11-22T00:20:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45222#issuecomment-1322829175"
      },
      {
        "id": "IC_kwDOAQzde85O2fz-",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Why?\r\n\r\nWe were discussing the fact that the \u0060WebApplicationBuilder\u0060 is opinionated about the order in which middlesware are inserted. This suggestion came up as a way to provide users with a refactoring that would explicitly register the middlesware that we auto-register so that users could re-adjust the ordering when needed. ",
        "createdAt": "2022-11-22T02:01:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45222#issuecomment-1322908926"
      },
      {
        "id": "IC_kwDOAQzde85PAqS2",
        "parentId": null,
        "author": "Tratcher",
        "content": "Ah, hopefully thus preventing WebApplicationBuilder from adding duplicates?",
        "createdAt": "2022-11-23T19:41:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45222#issuecomment-1325573302"
      },
      {
        "id": "IC_kwDOAQzde85PA2ab",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Ah, hopefully thus preventing WebApplicationBuilder from adding duplicates?\r\n\r\nYes. The WebApplicationBuilder actually already avoids adding duplicates so when the user does the registration in their app code in whatever order they desire we won\u0027t register the same middlewares.\r\n\r\n\r\n",
        "createdAt": "2022-11-23T20:28:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45222#issuecomment-1325622939"
      },
      {
        "id": "IC_kwDOAQzde85PRXBx",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2022-11-29T01:16:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45222#issuecomment-1329950833"
      },
      {
        "id": "IC_kwDOAQzde85QSzTc",
        "parentId": null,
        "author": "halter73",
        "content": "API Review Notes:\r\n\r\n- Should the \u0022Severity Level\u0022 be \u0022info\u0022? Do we really want analyzer firing be default for something we don\u0027t necessarily recommend changing. Can it be \u0022hidden\u0022 instead. Would this mean that you\u0027d have to manually do something like \u0060dotnet_diagnostic.ASP####.severity = info\u0060 to see it?\r\n- Could this be an refactoring instead? That seems to be what \u0022invert if\u0022 is.\r\n\r\n@amcasey Do you have any preference based on what other analyzers/refactorings do.",
        "createdAt": "2022-12-12T19:03:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45222#issuecomment-1347106012"
      },
      {
        "id": "IC_kwDOAQzde85QTEw0",
        "parentId": null,
        "author": "amcasey",
        "content": "There\u0027s a fine line between sub-warning diagnostics and refactorings.  The key functional differences are that code-fixes can be applied in multiple places at once (i.e. fix-all) and refactorings can take user-specified spans as inputs (e.g. for extract method).\r\n\r\nThere\u0027s probably also a (relatively minor) perf consideration - analyzers everywhere even though most hidden diagnostics will never be \u0022fixed\u0022 and refactoring run every time the cursor is moved.\r\n\r\nEither is probably fine in this case (unless this is the sort of thing you\u0027d want to apply to multiple locations in the same project). ",
        "createdAt": "2022-12-12T19:32:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45222#issuecomment-1347177524"
      },
      {
        "id": "IC_kwDOAQzde85XjJpf",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-03-14T20:54:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45222#issuecomment-1468832351"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85W_uL4",
    "title": "Deadlock in Microsoft.AspNetCore.Mvc.Testing on .NET 7",
    "url": "https://github.com/dotnet/aspnetcore/issues/45233",
    "createdAt": "2022-11-22T10:08:45Z",
    "lastUpdated": "2024-03-01T22:42:32Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nThe following combination causes a deadlock when trying to read \u0060HttpContext.Request.Body\u0060:\r\n\r\n* NET 7 (\u00607.0.100\u0060)\r\n* \u0060Microsoft.AspNetCore.Mvc.Testing\u0060 (\u00607.0.0\u0060)\r\n* Using the \u0060Microsoft.AspNetCore.Hosting.HttpRequestIn.Start\u0060 \u0060DiagnosticListener\u0060 event.\r\n* Using **synchronous** IO to read the request body (e.g. \u0060ReadToEnd()\u0060).\r\n\r\nThe code snippet below is from the [linked reproducer sample](https://github.com/z1c0/Mvc.TestingHang).\r\nThe call to \u0060ReadToEnd()\u0060 hangs forever.\r\n\r\n\u0060\u0060\u0060cs\r\ninternal class KeyValueObserver : IObserver\u003CKeyValuePair\u003Cstring, object\u003E\u003E\r\n{\r\n    public void OnNext(KeyValuePair\u003Cstring, object\u003E kvp)\r\n    {\r\n        if (kvp.Key == \u0022Microsoft.AspNetCore.Hosting.HttpRequestIn.Start\u0022)\r\n        {\r\n            var context = kvp.Value as HttpContext;\r\n            \r\n            var bodyControlFeature = context.Features.Get\u003CIHttpBodyControlFeature\u003E();\r\n            bodyControlFeature.AllowSynchronousIO = true;\r\n            \r\n            var stream = new StreamReader(context.Request.Body);\r\n            var body = stream.ReadToEnd();  // Hangs forever!\r\n            body.ToString();\r\n        }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nRunning the same code with previous versions of .NET (Core) works without a problem.\n\n### Expected Behavior\n\nThe call should not hang as with previous versions.\n\n### Steps To Reproduce\n\nReproducer project: https://github.com/z1c0/Mvc.TestingHang\r\nRun the unit test method \u0060BasicTests.TestPost\u0060.\r\n* NET 7.0: The test hangs forever\r\n* NET 6.0: The test terminates and the request body can be read correctly.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.100\n\n### Anything else?\n\nI could reproduce the problem on Windows, Linux, and macOS.\r\nThe same code worked fine with previous versions (.NET Core 3.1, .NET 5.0, .NET 6.0 on all platforms).",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85PAcM9",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-23T18:46:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45233#issuecomment-1325515581"
      },
      {
        "id": "IC_kwDOAQzde85aOkNr",
        "parentId": null,
        "author": "MehdiNaz",
        "content": "I am getting the same error",
        "createdAt": "2023-04-18T20:39:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45233#issuecomment-1513767787"
      },
      {
        "id": "IC_kwDOAQzde85af9_9",
        "parentId": null,
        "author": "MehdiNaz",
        "content": "please help me \r\nERORRRRRR\r\nMicrosoft.Data.SqlClient.SqlException (0x80131904): Transaction (Process ID 285) was deadlocked on lock resources with another process and has been chosen as the deadlock victim. Rerun the transaction.\r\n\r\n",
        "createdAt": "2023-04-21T20:59:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45233#issuecomment-1518329853"
      },
      {
        "id": "IC_kwDOAQzde85af-EH",
        "parentId": null,
        "author": "MehdiNaz",
        "content": "please help me \r\nERORRRRRR\r\nMicrosoft.Data.SqlClient.SqlException (0x80131904): Transaction (Process ID 285) was deadlocked on lock resources with another process and has been chosen as the deadlock victim. Rerun the transaction.\r\n\r\n",
        "createdAt": "2023-04-21T20:59:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45233#issuecomment-1518330119"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85XOXWA",
    "title": "\u0060RouteHandlerBuilder.Accepts\u0060 does not return 415 response when the request has no \u0060Content-Type\u0060",
    "url": "https://github.com/dotnet/aspnetcore/issues/45264",
    "createdAt": "2022-11-24T13:53:17Z",
    "lastUpdated": "2024-03-01T22:42:33Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nThis is probably a duplicate of #43794 but I would like to get further information on this issue, namely:\r\n\r\n1. If empty string is not in the list of content types to accept, why should empty string not be handled as 415?\r\n2. Given the current behavior of \u0060Accepts\u0060, is an explicit check for the existence of the \u0060Content-Type\u0060 header required?\r\n\r\nCode:\r\n\u0060\u0060\u0060cs\r\napp.MapPut(\u0022/file\u0022, Created (HttpRequest request) =\u003E\r\n{\r\n\treturn TypedResults.Created(\u0022https://example.org\u0022);\r\n})\r\n.WithOpenApi()\r\n.Accepts\u003Cbyte[]\u003E(\u0022application/zip\u0022)\r\n.Produces(StatusCodes.Status415UnsupportedMediaType);\r\n\u0060\u0060\u0060\r\n\r\n### Expected Behavior\r\n\r\n\u0060415 Unsupported Media Type\u0060 is returned.\r\n\r\n### Actual Behavior\r\n\r\n\u0060201 Created\u0060 is returned.\r\n\r\n### Steps To Reproduce\r\n\r\nAfter \u0060dotnet run\u0060, make a PUT request with no header\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.100\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "Docs",
      "area-minimal",
      "help candidate",
      "net8_docathon"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85PhqU3",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: @captainsafia (and maybe @brunolins16) need to take a look at the notes from last time and answer the additional questions here.",
        "createdAt": "2022-12-01T19:08:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45264#issuecomment-1334224183"
      },
      {
        "id": "IC_kwDOAQzde85QJWe4",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E If empty string is not in the list of content types to accept, why should empty string not be handled as 415?\r\n\r\n\u0060string.Empty\u0060 isn\u0027t treated as a \u0060Content-Type\u0060. \u0060string.Empty\u0060 in the request essentially bypasses the \u0060AcceptsMatcherPolicy\u0060. Essentially, if the request doesn\u0027t contain an explicit \u0060Content-Type\u0060, then we match the endpoint based on whatever other policies that exist.\r\n\r\n\u003E Given the current behavior of Accepts, is an explicit check for the existence of the Content-Type header required?\r\n\r\nYes, you can probably achieve this with an [endpoint filter in .NET 7](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/min-api-filters?view=aspnetcore-7.0).",
        "createdAt": "2022-12-09T18:30:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45264#issuecomment-1344628664"
      },
      {
        "id": "IC_kwDOAQzde85QJWh-",
        "parentId": null,
        "author": "??",
        "content": "Hi @FranklinWhale. We have added the \u0022Needs: Author Feedback\u0022 label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
        "createdAt": "2022-12-09T18:30:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45264#issuecomment-1344628862"
      },
      {
        "id": "IC_kwDOAQzde85QMIIn",
        "parentId": null,
        "author": "FranklinWhale",
        "content": "[\u0060Accepts\u0060](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.openapiroutehandlerbuilderextensions.accepts?view=aspnetcore-7.0) gives an impression to developer that it works like a whitelist, which means only the value specified in \u0060contentType\u0060 and those in \u0060additionalContentTypes\u0060 will be accepted and any other value, including missing header, will result in \u0060415\u0060.\r\n\r\nThe impression is reinforced by the description of [\u0060IAcceptsMetadata.ContentTypes\u0060](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.metadata.iacceptsmetadata.contenttypes?view=aspnetcore-7.0):\r\n\r\n\u003E If the incoming request does not have a Content-Type with one of these values, the request will be rejected with a 415 response.\r\n\r\nI think an \u0060AcceptsMatcherPolicy\u0060 should not be bypassed. If missing header is acceptable, an empty string should be added to \u0060contentType\u0060 or \u0060additionalContentTypes\u0060 to indicate that.\r\n\r\nIs it possible to change the behavior in .NET 8 and add a warning to the document of \u0060Accepts\u0060 and \u0060IAcceptsMetadata\u0060 to warn developer that empty \u0060Content-Type\u0060 will not result in \u0060415\u0060?",
        "createdAt": "2022-12-10T18:29:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45264#issuecomment-1345356327"
      },
      {
        "id": "IC_kwDOAQzde85QcjaO",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E [Accepts](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.openapiroutehandlerbuilderextensions.accepts?view=aspnetcore-7.0) gives an impression to developer that it works like a whitelist, which means only the value specified in contentType and those in additionalContentTypes will be accepted and any other value, including missing header, will result in 415.\r\n\r\nThis is fair feedback. The description should probably be updated to document the following:\r\n\r\n\u003E Gets a list of the allowed request content types. If the **incoming request contains a Content-Type header** that does not have one of these values, the request will be rejected with a 415 response.\r\n\r\nWould you be interested in updating the doc string [here](https://github.com/dotnet/aspnetcore/blob/63d2fb07e93007af1f016d447a904ce187256881/src/Http/Http.Abstractions/src/Metadata/IAcceptsMetadata.cs#L11-L14) to reflect this in a PR?\r\n\r\n\u003E Is it possible to change the behavior in .NET 8 \r\n\r\nChanging the behavior for .NET 8 here might be hard since it\u0027s been long-standing behavior and is at a core component in the stack. But we can see if it would be a benefit to other users and make the breaking change if so.\r\n\r\n\r\n",
        "createdAt": "2022-12-13T20:41:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45264#issuecomment-1349662350"
      },
      {
        "id": "IC_kwDOAQzde85QckT5",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-12-13T20:43:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45264#issuecomment-1349666041"
      },
      {
        "id": "IC_kwDOAQzde85QftkG",
        "parentId": null,
        "author": "FranklinWhale",
        "content": "Thanks. I will submit a PR for the doc change later.\r\n\r\nHowever, would you mind explaining the rationale for not returning 415 for request without \u0060Content-Type\u0060?\r\n\r\nIt appears that \u0060AcceptsMatcherPolicy\u0060 is able to handle empty \u0060Content-Type\u0060:\r\nhttps://github.com/dotnet/aspnetcore/blob/main/src/Http/Routing/src/Matching/AcceptsMatcherPolicy.cs#L118",
        "createdAt": "2022-12-14T06:42:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45264#issuecomment-1350490374"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85XcVAE",
    "title": "Investigate options to allow pooling of JSON serialization infrastructure",
    "url": "https://github.com/dotnet/aspnetcore/issues/45332",
    "createdAt": "2022-11-28T20:23:32Z",
    "lastUpdated": "2024-03-01T22:42:34Z",
    "body": "Related:\r\n- dotnet/runtime#69889\r\n- dotnet/runtime#78646\r\n- #45330 \r\n\r\nOur JSON-related extension methods on \u0060HttpResponse\u0060 today and the inherent JSON serialization implemented by Minimal APIs (either directly from route handler returned objects or the JSON \u0060IResult\u0060 types) call through the JSON serializers async code paths. These paths don\u0027t implement any pooling for the underlying infrastructure like \u0060Utf8JsonWriter\u0060 resulting in repeated allocations of those types, which for small payloads can represent the majority of allocations for the related requests.\r\n\r\nWe should explore options to enable these features to either pool the underlying types or instead go through the synchronous code paths of \u0060JsonSerializer\u0060 instead, as they implement pooling under the covers, with appropriate heuristics or options to ensure expectations around memory allocations, back pressure, etc. are maintained.\r\n\r\nNote it\u0027s possible [existing ongoing work in the runtime](https://github.com/dotnet/runtime/pull/78646) will yield some benefits here already.",
    "upvotes": 0,
    "labels": [
      "Perf",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85PhrUt",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: @BrennanConroy Is this something that you are taking a look at?\r\n\r\nUpdate triage: Brennan has updated benchmark apps to pool the UTF8Writer and used the source generator for message payloads and this led to improvements in the number of allocations that occur from the JSON middleware.\r\n\r\nAlso merged a PR for minimal APIs that reduces allocations for minimal API scenarios via https://github.com/dotnet/aspnetcore/pull/45359 and Brennan is working on a change to remove boxing struct types in the serialization.\r\n\r\nStick this in .NET 8 since there\u0027s work in progress on this front.",
        "createdAt": "2022-12-01T19:12:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45332#issuecomment-1334228269"
      },
      {
        "id": "IC_kwDOAQzde85Phsl5",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-12-01T19:16:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45332#issuecomment-1334233465"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85XnfbU",
    "title": "WebApplicationFactory Client returns NotFound for all requests with Overriding Configure method ",
    "url": "https://github.com/dotnet/aspnetcore/issues/45372",
    "createdAt": "2022-11-30T17:13:03Z",
    "lastUpdated": "2024-11-22T22:03:30Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nHi,\r\nI create bellow [custom factory](https://github.com/mehdihadeli/e2e-test/blob/master/Test/CustomWebApplicationFactory.cs) for E2E test:\r\n\r\n\u0060\u0060\u0060 csharp\r\npublic class CustomWebApplicationFactory : WebApplicationFactory\u003CProgram\u003E\r\n{\r\n    protected override void ConfigureWebHost(IWebHostBuilder builder)\r\n    {\r\n        builder.ConfigureServices(services =\u003E\r\n        {\r\n            // extend service collection\r\n        });\r\n\r\n        builder.ConfigureTestServices(services =\u003E\r\n        {\r\n            // extend service collection\r\n        });\r\n\r\n         builder.Configure(app =\u003E\r\n         {\r\n             // extend application builder\r\n         });\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\nAlso, this is my [Program](https://github.com/mehdihadeli/e2e-test/blob/master/App/Program.cs) file:\r\n\r\n\u0060\u0060\u0060 csharp\r\nusing System.Reflection;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add services to the container.\r\n\r\nbuilder.Services.AddControllers() .AddApplicationPart(Assembly.GetExecutingAssembly());;\r\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\r\nbuilder.Services.AddEndpointsApiExplorer();\r\nbuilder.Services.AddSwaggerGen();\r\n\r\nvar app = builder.Build();\r\n\r\n// Configure the HTTP request pipeline.\r\nif (app.Environment.IsDevelopment())\r\n{\r\n    app.UseSwagger();\r\n    app.UseSwaggerUI();\r\n}\r\n\r\napp.UseHttpsRedirection();\r\n\r\napp.UseAuthorization();\r\n\r\napp.MapControllers();\r\n\r\napp.MapGet(\u0022WeatherForecast\u0022, _ =\u003E\r\n{\r\n    var summaries = new[]\r\n    {\r\n        \u0022Freezing\u0022, \u0022Bracing\u0022, \u0022Chilly\u0022, \u0022Cool\u0022, \u0022Mild\u0022, \u0022Warm\u0022, \u0022Balmy\u0022, \u0022Hot\u0022, \u0022Sweltering\u0022, \u0022Scorching\u0022\r\n    };\r\n    return Task.FromResult(Enumerable.Range(1, 5).Select(index =\u003E new WeatherForecast\r\n    {\r\n        Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\r\n        TemperatureC = Random.Shared.Next(-20, 55),\r\n        Summary = summaries[Random.Shared.Next(summaries.Length)]\r\n    }));\r\n});\r\n\r\napp.Run();\r\n\r\npublic partial class Program{}\r\n\u0060\u0060\u0060\r\n\r\nWhen I want to call \u0060WeatherForecast\u0060 GET endpoint, with WebApplicationFactory \u0060Client\u0060 I get \u0060NotFound\u0060 response from client in my test instead of \u0060OK\u0060\r\n\r\n\u0060\u0060\u0060 csharp\r\npublic class UnitTest1: CustomWebApplicationFactory\r\n{\r\n    [Fact]\r\n    public async Task Test1()\r\n    {\r\n        var response = await CreateClient().GetAsync(\u0022/WeatherForecast\u0022);\r\n        response.Should().Be200Ok();\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\nIf I remove below section from My CustomFactory my http client returns OK status code\r\n\r\n\u0060\u0060\u0060 csharp\r\n  builder.Configure(app =\u003E\r\n {\r\n     // extend application builder\r\n });\r\n\u0060\u0060\u0060\r\n\r\n### Expected Behavior\r\n\r\nI Expect to get a 200 ok status code for this http call on http client\r\n\r\n### Steps To Reproduce\r\nRun [this test](https://github.com/mehdihadeli/e2e-test/blob/master/Test/UnitTest1.cs#L8)\r\n\r\n### Exceptions (if any)\r\n\r\n\u0060\u0060\u0060 bash\r\nXunit.Sdk.XunitException\r\nExpected response to be HttpStatusCode.OK {value: 200}, but found HttpStatusCode.NotFound {value: 404}.\r\n\r\nThe HTTP response was:\r\n\r\nHTTP/1.1 404 NotFound\r\nContent-Length: 0\r\n\r\n\r\nThe originated HTTP request was:\r\n\r\nGET http://localhost/WeatherForecast HTTP 1.1\r\nContent-Length: 0\r\n\r\n   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)\r\n   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)\r\n   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)\r\n   at FluentAssertions.Execution.AssertionScope.FailWith(Func\u00601 failReasonFunc)\r\n   at FluentAssertions.Execution.AssertionScope.FailWith(Func\u00601 failReasonFunc)\r\n   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)\r\n   at FluentAssertions.Web.HttpResponseMessageAssertions.Be200Ok(String because, Object[] becauseArgs)\r\n   at FluentAssertions.HttpStatusCodeAssertionsExtensions.Be200Ok(HttpResponseMessageAssertions\u00601 parent, String because, Object[] becauseArgs)\r\n   at E2E.UnitTest1.Test1() in C:\\Users\\MehdiHadeli\\Desktop\\E2E\\Test\\UnitTest1.cs:line 11\r\n   at Xunit.Sdk.TestInvoker\u00601.\u003C\u003Ec__DisplayClass48_0.\u003C\u003CInvokeTestMethodAsync\u003Eb__1\u003Ed.MoveNext() in /_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs:line 264\r\n--- End of stack trace from previous location ---\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func\u00601 asyncAction) in /_/src/xunit.execution/Sdk/Frameworks/ExecutionTimer.cs:line 48\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(Func\u00601 code) in /_/src/xunit.core/Sdk/ExceptionAggregator.cs:line 90\r\n\u0060\u0060\u0060\r\n\r\n### .NET Version\r\n\r\n7.0.0\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 2,
    "labels": [
      "Docs",
      "area-mvc",
      "area-minimal",
      "net8_docathon"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85PbKlu",
        "parentId": null,
        "author": "davidfowl",
        "content": "You can\u0027t extend the application when you override configure. We should probably throw here.",
        "createdAt": "2022-11-30T17:42:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45372#issuecomment-1332521326"
      },
      {
        "id": "IC_kwDOAQzde85PbLJE",
        "parentId": null,
        "author": "mehdihadeli",
        "content": "@davidfowl  Why do we have this method on WebHostBuilder? Because on internal hosting process of aspnetcore?\r\nWhat is the usage of this Configure method?",
        "createdAt": "2022-11-30T17:44:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45372#issuecomment-1332523588"
      },
      {
        "id": "IC_kwDOAQzde85PbMrg",
        "parentId": null,
        "author": "davidfowl",
        "content": "It\u0027s been around since ASP.NET Core 1.0 and it\u0027s the way the application was configured we built the new hosting API.",
        "createdAt": "2022-11-30T17:50:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45372#issuecomment-1332529888"
      },
      {
        "id": "IC_kwDOAQzde85PbNT-",
        "parentId": null,
        "author": "mehdihadeli",
        "content": "Ok thanks :)",
        "createdAt": "2022-11-30T17:52:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45372#issuecomment-1332532478"
      },
      {
        "id": "IC_kwDOAQzde85PpYTJ",
        "parentId": null,
        "author": "mehdihadeli",
        "content": "I think if override Program \u0060Configure\u0060 functionality is not allowed, framework should throw an [exception here](https://github.com/mehdihadeli/e2e-test/blob/master/Test/CustomWebApplicationFactory.cs#L21), but both [Program Configure](https://github.com/mehdihadeli/e2e-test/blob/master/App/Program.cs#L16) and my [override Configure](https://github.com/mehdihadeli/e2e-test/blob/master/Test/CustomWebApplicationFactory.cs#L22) in WebAppFactory run without any error. I just can catch the exception when I call my app endpoint with WebAppFactory [httpclient](https://github.com/mehdihadeli/e2e-test/blob/master/Test/UnitTest1.cs#L10) and I get NotFound error.",
        "createdAt": "2022-12-03T19:56:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45372#issuecomment-1336247497"
      },
      {
        "id": "IC_kwDOAQzde85PpYeu",
        "parentId": null,
        "author": "davidfowl",
        "content": "This is a breaking change. Not saying we can\u0027t do it, but it requires doing research to understand if this will break any mainline scenarios.",
        "createdAt": "2022-12-03T20:01:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45372#issuecomment-1336248238"
      },
      {
        "id": "IC_kwDOAQzde85P4TA2",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: We can consider logging an error here as an alternative to throwing an exception but that might have poor visibility to users.\r\n\r\nAs mentioned, need to do more research into impact of exception.\r\n\r\nIt might help to clarify this in the docs as well as part of https://github.com/dotnet/AspNetCore.Docs/issues/27844.",
        "createdAt": "2022-12-06T23:33:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45372#issuecomment-1340158006"
      },
      {
        "id": "IC_kwDOAQzde85Qrmo5",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-12-15T19:32:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45372#issuecomment-1353607737"
      },
      {
        "id": "IC_kwDOAQzde85k497w",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "@captainsafia Is the docs part of this done with https://github.com/dotnet/AspNetCore.Docs/issues/27844 or is there more docs work here?",
        "createdAt": "2023-08-25T02:11:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45372#issuecomment-1692655344"
      },
      {
        "id": "IC_kwDOAQzde85k-kxZ",
        "parentId": null,
        "author": "captainsafia",
        "content": "Nope, this particular note wasn\u0027t addressed in the linked issue. We\u0027ll need to add a new note about this behavior. Likely [on this page](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/test-min-api?view=aspnetcore-7.0).",
        "createdAt": "2023-08-26T02:32:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45372#issuecomment-1694125145"
      },
      {
        "id": "IC_kwDOAQzde86D3bYS",
        "parentId": null,
        "author": "M-L-Ml",
        "content": "\u003E bellow [custom factory](https://github.com/mehdihadeli/e2e-test/blob/master/Test/CustomWebApplicationFactory.cs) for E2E test:\r\n\r\nThe repo of the link is absent - 404 . Sad. I need details.",
        "createdAt": "2024-07-07T06:53:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45372#issuecomment-2212345362"
      },
      {
        "id": "IC_kwDOAQzde86UtcxZ",
        "parentId": null,
        "author": "HEBOS",
        "content": "Why would you use \u0022UseHttpsRedirection\u0022?\nWebApplicationFactory client doesn\u0027t use SSL.",
        "createdAt": "2024-11-22T22:03:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45372#issuecomment-2494942297"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Xn2Pk",
    "title": "[Minimal APIs] async handlers with single \u0060HttpContext\u0060 parameter  are not working",
    "url": "https://github.com/dotnet/aspnetcore/issues/45373",
    "createdAt": "2022-11-30T18:35:53Z",
    "lastUpdated": "2024-10-30T17:58:34Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIt seems that issue described in https://github.com/dotnet/aspnetcore/issues/39956 was not fixed but even got worse -  Minimal APIs handler with single param of type \u0060HttpContext\u0060 results in empty response.\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapPost(\u0022testpost_works\u0022, async (HttpContext context, CancellationToken ct) =\u003E await Task.FromResult(context.Request.Method \u002B \u0022 response\u0022));\r\napp.MapPost(\u0022testpost_fails\u0022, Handler);\r\napp.MapGet(\u0022testget_works\u0022, async (HttpContext context, CancellationToken ct) =\u003E await Task.FromResult(context.Request.Method \u002B \u0022 response\u0022));\r\napp.MapGet(\u0022testget_fails1\u0022, async (HttpContext context) =\u003E await Task.FromResult(context.Request.Method \u002B \u0022 response\u0022));\r\napp.MapGet(\u0022testget_fails2\u0022, Handler);\r\n\r\nasync Task\u003Cstring\u003E Handler(HttpContext context) =\u003E await Task.FromResult(context.Request.Method \u002B \u0022response\u0022);\r\n\u0060\u0060\u0060\r\n\r\nEndpoints suffixed \u0060fails\u0060 return empty result while others return \u0022VERB response\u0022\r\n\r\nIn addition only \u0022works\u0022 endpoints are recognized by swagger:\r\n\r\n![image](https://user-images.githubusercontent.com/6535969/204880335-e2c1d7ba-227f-4fa2-96dc-9a16b8256b7a.png)\r\n\r\n\r\n### Expected Behavior\r\n\r\nAll endpoints return \u0022VERB response\u0022\r\n\r\n### Steps To Reproduce\r\n\r\nUse Minimal APIs defined above.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.100\r\n\r\n### Anything else?\r\n\r\n \u003E dotnet --info\r\n.NET SDK:\r\n Version:   7.0.100\r\n Commit:    e12b7af219\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22000\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.100\\\r\n",
    "upvotes": 4,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85Ph9zT",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: This behavior is a result of the change introduced [in this PR](https://github.com/dotnet/aspnetcore/pull/42519/files#diff-f8807c470bcc3a077fb176668a46df57b4bb99c992b6b7b375665f8bf3903c94L202-L207). \r\n\r\nWe introduced an analyzer for this in .NET 8 at https://github.com/dotnet/aspnetcore/pull/44048 that we should consider backporting to .NET 7. @JamesNK Thoughts on backporting this?\r\n\r\nThe PR above backports a runtime fix that was addressed in https://github.com/dotnet/aspnetcore/issues/39956.\r\n\r\nNote: this runtime behavior also exists in .NET 6. \r\n\r\n",
        "createdAt": "2022-12-01T19:47:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45373#issuecomment-1334303955"
      },
      {
        "id": "IC_kwDOAQzde85PiGPg",
        "parentId": null,
        "author": "captainsafia",
        "content": "Addendum: at least for the OpenAPI-related aspects we are tracking this via https://github.com/dotnet/aspnetcore/issues/44970.",
        "createdAt": "2022-12-01T20:02:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45373#issuecomment-1334338528"
      },
      {
        "id": "IC_kwDOAQzde85QEIBE",
        "parentId": null,
        "author": "captainsafia",
        "content": "@JamesNK Thoughts on a partial revert of https://github.com/dotnet/aspnetcore/pull/42519/files#diff-f8807c470bcc3a077fb176668a46df57b4bb99c992b6b7b375665f8bf3903c94L202-L207?\r\n\r\ncc: @eerhardt ",
        "createdAt": "2022-12-08T19:35:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45373#issuecomment-1343258692"
      },
      {
        "id": "IC_kwDOAQzde85QEX8X",
        "parentId": null,
        "author": "eerhardt",
        "content": "My understanding of https://github.com/dotnet/aspnetcore/pull/42519/files#diff-f8807c470bcc3a077fb176668a46df57b4bb99c992b6b7b375665f8bf3903c94L202-L207 is that we were doing \u0022trim unsafe\u0022 behavior before that change - specifically we would JSON serialize the \u0060T\u0060 value of \u0060Task\u003CT\u003E\u0060. That\u0027s not a warning we can suppress because if the app didn\u0027t enable JSON source generation, trimming will change the behavior here.\r\n\r\nSo in this case, the options I see are:\r\n\r\n1. Marking the API as \u0060RequiresUnreferencedCode\u0060\r\n2. Removing the behavior (what #42519 did)\r\n3. Adding an analyzer that warns specifically for this situation saying that it is not trim safe, and then suppressing the warning in our code.\r\n    - Or resolving the JSON serialization trimming issue in ASP.NET all up, and then suppressing the warning in our code.",
        "createdAt": "2022-12-08T20:37:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45373#issuecomment-1343323927"
      },
      {
        "id": "IC_kwDOAQzde85QE59S",
        "parentId": null,
        "author": "JamesNK",
        "content": "\u003E @JamesNK Thoughts on a partial revert of [#42519 (files)](https://github.com/dotnet/aspnetcore/pull/42519/files#diff-f8807c470bcc3a077fb176668a46df57b4bb99c992b6b7b375665f8bf3903c94L202-L207)?\r\n\u003E \r\n\u003E cc: @eerhardt\r\n\r\nI\u0027m against reverting the change. These low-level methods are used by app frameworks, e.g. gRPC, and app frameworks should have a simple way to add endpoints that doesn\u0027t create warnings.\r\n\r\nI don\u0027t have a problem with backporting the analyzer https://github.com/dotnet/aspnetcore/pull/44048",
        "createdAt": "2022-12-08T22:35:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45373#issuecomment-1343463250"
      },
      {
        "id": "IC_kwDOAQzde85Ts7rn",
        "parentId": null,
        "author": "g-jozsef",
        "content": "A workaround (at least for .net 7.0.100) is to force the type to be a simple Delegate instead of a RequestDelegate (for functions with a single HttpContext param)\r\n\u0060\u0060\u0060\r\npublic async Task\u003C....\u003E TestFunction(HttpContext http)\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\nDelegate d = TestFunction;\r\nbuilder.MapGet(\u0022/some-endpoint\u0022, d)\r\n\u0060\u0060\u0060\r\n\r\nResponse body is populated correctly with all headers, and it even shows up in the generated openapi docs",
        "createdAt": "2023-01-25T22:05:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45373#issuecomment-1404287719"
      },
      {
        "id": "IC_kwDOAQzde85UAXq9",
        "parentId": null,
        "author": "gurustron",
        "content": "@g-jozsef yes it is either casting to \u0022correct\u0022 type or adding a parameter, for example \u0060CancelationToken\u0060.",
        "createdAt": "2023-01-30T21:39:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45373#issuecomment-1409383101"
      },
      {
        "id": "IC_kwDOAQzde85psmHC",
        "parentId": null,
        "author": "LeonSpors",
        "content": "\r\n\u003E @g-jozsef yes it is either casting to \u0022correct\u0022 type or adding a parameter, for example \u0060CancelationToken\u0060.\r\n\r\nThank you for the workaround! I\u0027ve tested it, and it works perfectly. I appreciate your help.\r\nDo you believe it\u0027s advisable to incorporate a cancellation token in every asynchronous request across all scenarios?\r\n\r\n@captainsafia\r\nAny updates on when we can expect a fix for this issue?",
        "createdAt": "2023-10-20T19:36:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45373#issuecomment-1773298114"
      },
      {
        "id": "IC_kwDOAQzde85ps7jA",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E \u003E @g-jozsef yes it is either casting to \u0022correct\u0022 type or adding a parameter, for example \u0060CancelationToken\u0060.\r\n\u003E \r\n\u003E Thank you for the workaround! I\u0027ve tested it, and it works perfectly. I appreciate your help. Do you believe it\u0027s advisable to incorporate a cancellation token in every asynchronous request across all scenarios?\r\n\u003E \r\n\u003E @captainsafia Any updates on when we can expect a fix for this issue?\r\n\r\nAt the moment, I don\u0027t believe that we would do anything to change the overload behavior here. This issue occurs because the compiler favors the \u0060RequestDelegate\u0060 overload of the \u0060MapX\u0060 methods when the provided handler takes a single \u0060HttpContext\u0060 and returns a \u0060Task\u0060.  Adding a cast or an additional parameter changes the signature of the delegate and the compiler will pick the \u0060MapX(Delegate handler)\u0060 overload in those scenarios. I think requiring an explicit cast is sufficient in those scenarios.",
        "createdAt": "2023-10-20T20:58:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45373#issuecomment-1773385920"
      },
      {
        "id": "IC_kwDOAQzde858t2jM",
        "parentId": null,
        "author": "ghord",
        "content": "Woudn\u0027t it be better to partially revert \u0060Map\u0060 as suggested by @captainsafia and introduce new method such as \u0060MapTrimSafe\u0060 for gRPC and other app frameworks? Frameworks can move to more verbose name of the method without impacting users. It is easy to trip over this for beginners... \r\n\r\n",
        "createdAt": "2024-05-03T06:38:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45373#issuecomment-2092394700"
      },
      {
        "id": "IC_kwDOAQzde86PmGx1",
        "parentId": null,
        "author": "bjornen77",
        "content": "\u003E \u003E \u003E [@g-jozsef](https://github.com/g-jozsef) yes it is either casting to \u0022correct\u0022 type or adding a parameter, for example \u0060CancelationToken\u0060.\n\u003E \u003E \n\u003E \u003E \n\u003E \u003E Thank you for the workaround! I\u0027ve tested it, and it works perfectly. I appreciate your help. Do you believe it\u0027s advisable to incorporate a cancellation token in every asynchronous request across all scenarios?\n\u003E \u003E [@captainsafia](https://github.com/captainsafia) Any updates on when we can expect a fix for this issue?\n\u003E \n\u003E At the moment, I don\u0027t believe that we would do anything to change the overload behavior here. This issue occurs because the compiler favors the \u0060RequestDelegate\u0060 overload of the \u0060MapX\u0060 methods when the provided handler takes a single \u0060HttpContext\u0060 and returns a \u0060Task\u0060. Adding a cast or an additional parameter changes the signature of the delegate and the compiler will pick the \u0060MapX(Delegate handler)\u0060 overload in those scenarios. I think requiring an explicit cast is sufficient in those scenarios.\n\nWould it be possible to use the new C#13 OverloadResolutionPriorityAttribute to solve this?\nhttps://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-13#overload-resolution-priority\n\n@captainsafia @JamesNK",
        "createdAt": "2024-10-13T21:06:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45373#issuecomment-2409131125"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85ZUNwC",
    "title": "Cannot override authentication in Microsoft.AspNetCore.Mvc.Testing",
    "url": "https://github.com/dotnet/aspnetcore/issues/45608",
    "createdAt": "2022-12-15T13:49:03Z",
    "lastUpdated": "2024-03-01T22:42:35Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nOverride authentication as described in https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-7.0#mock-authentication using Microsoft.AspNetCore.Mvc.Testing does not work.\r\n\r\nThe issue appears to be similar to #37680 where configuration cannot be overridden via the new webapi templates (without startup.cs).\r\n\r\nIt appears that\r\n\r\n\u0060\u0060\u0060csharp\r\nbuilder.Services\r\n    .AddAuthorization(options =\u003E { })\r\n    .AddAuthentication(options =\u003E\r\n    {\r\n        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\r\n        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\r\n    })\r\n    .AddJwtBearer();\r\n\u0060\u0060\u0060\r\n\r\nwill go off **after** a ConfigureTestServices method in WebApplicationFactory\u003CProgram\u003E and overriding it.\r\nOmitting the above add authentication does trigger the the fake principal and authentication.\r\n\r\nI created a repo case over here\r\nhttps://github.com/kaylumah/WebApiOverrideConfigIssue\r\n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\nnet7\n\n### Anything else?\n\n_No response_",
    "upvotes": 6,
    "labels": [
      "investigate",
      "area-mvc",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85QptkP",
        "parentId": null,
        "author": "kaylumah",
        "content": "To verify that other service can be overridden I also added a IWeatherService which gets replaced from the same ConfigureTestServices and that does work, so not sure what the difference is here :)",
        "createdAt": "2022-12-15T13:49:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45608#issuecomment-1353111823"
      },
      {
        "id": "IC_kwDOAQzde85QriCV",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: We need to investigate if the authentication options changes that we made in .NET 7 might have had a downstream impact on the testing overrides that happen here. ",
        "createdAt": "2022-12-15T19:16:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45608#issuecomment-1353588885"
      },
      {
        "id": "IC_kwDOAQzde85QriJs",
        "parentId": null,
        "author": "??",
        "content": "To learn more about what this message means, what to expect next, and how this issue will be handled you can read our [Triage Process document](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).\nWe\u0027re moving this issue to the .NET 8 Planning milestone for future evaluation / consideration. Because it\u0027s not immediately obvious what is causing this behavior, we would like to keep this around to collect more feedback, which can later help us determine how to handle this. We will re-evaluate this issue, during our next planning meeting(s).\nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact work.",
        "createdAt": "2022-12-15T19:17:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45608#issuecomment-1353589356"
      },
      {
        "id": "IC_kwDOAQzde85QucY2",
        "parentId": null,
        "author": "kaylumah",
        "content": "Not sure if the issue is just .net7 and newer, it also appears to be present in net6.0 \r\n\r\nPerhaps I missed something in the guide, or perhaps just like the linked issue regarding config the order of loading the testserver/normal app changed",
        "createdAt": "2022-12-16T08:01:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45608#issuecomment-1354352182"
      },
      {
        "id": "IC_kwDOAQzde85Q61Rh",
        "parentId": null,
        "author": "kaylumah",
        "content": "I am a step further in troubleshooting thanks to a comment on https://mazeez.dev/posts/auth-in-integration-tests\r\n\r\n\u0060\u0060\u0060csharp\r\npublic class WebApp : WebApplicationFactory\u003CProgram\u003E\r\n{\r\n    protected override void ConfigureWebHost(IWebHostBuilder builder)\r\n    {\r\n        builder.ConfigureTestServices(services =\u003E\r\n        {\r\n            // works\r\n            services.AddAuthentication(options =\u003E\r\n                {\r\n                    options.DefaultAuthenticateScheme = TestAuthHandler.AuthenticationScheme;\r\n                    options.DefaultScheme = TestAuthHandler.AuthenticationScheme;\r\n                    options.DefaultChallengeScheme = TestAuthHandler.AuthenticationScheme;\r\n                })\r\n                .AddScheme\u003CAuthenticationSchemeOptions, TestAuthHandler\u003E(TestAuthHandler.AuthenticationScheme, options =\u003E {});\r\n\r\n            // does not work\r\n            services.AddAuthentication(defaultScheme: TestAuthHandler.AuthenticationScheme)\r\n                .AddScheme\u003CAuthenticationSchemeOptions, TestAuthHandler\u003E(TestAuthHandler.AuthenticationScheme, options =\u003E { });\r\n        });\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nWhich means I can test authentication now.\r\nHowever I get successfully authenticated now even with the following snippet\r\n\r\n\u0060\u0060\u0060csharp\r\nvar factory = new WebApp();\r\n        var client = factory.CreateDefaultClient();\r\n        //client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(scheme: TestAuthHandler.AuthenticationScheme);\r\n\u0060\u0060\u0060\r\n\r\nAs I understand it the AuthenticationHeaderValue is what should have triggered TestAuthHandler",
        "createdAt": "2022-12-19T12:30:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45608#issuecomment-1357599841"
      },
      {
        "id": "IC_kwDOAQzde85XUQyf",
        "parentId": null,
        "author": "sondli",
        "content": "\u003E I am a step further in troubleshooting thanks to a comment on https://mazeez.dev/posts/auth-in-integration-tests\r\n\u003E \r\n\u003E \u0060\u0060\u0060cs\r\n\u003E public class WebApp : WebApplicationFactory\u003CProgram\u003E\r\n\u003E {\r\n\u003E     protected override void ConfigureWebHost(IWebHostBuilder builder)\r\n\u003E     {\r\n\u003E         builder.ConfigureTestServices(services =\u003E\r\n\u003E         {\r\n\u003E             // works\r\n\u003E             services.AddAuthentication(options =\u003E\r\n\u003E                 {\r\n\u003E                     options.DefaultAuthenticateScheme = TestAuthHandler.AuthenticationScheme;\r\n\u003E                     options.DefaultScheme = TestAuthHandler.AuthenticationScheme;\r\n\u003E                     options.DefaultChallengeScheme = TestAuthHandler.AuthenticationScheme;\r\n\u003E                 })\r\n\u003E                 .AddScheme\u003CAuthenticationSchemeOptions, TestAuthHandler\u003E(TestAuthHandler.AuthenticationScheme, options =\u003E {});\r\n\u003E \r\n\u003E             // does not work\r\n\u003E             services.AddAuthentication(defaultScheme: TestAuthHandler.AuthenticationScheme)\r\n\u003E                 .AddScheme\u003CAuthenticationSchemeOptions, TestAuthHandler\u003E(TestAuthHandler.AuthenticationScheme, options =\u003E { });\r\n\u003E         });\r\n\u003E     }\r\n\u003E }\r\n\u003E \u0060\u0060\u0060\r\n\u003E \r\n\u003E Which means I can test authentication now. However I get successfully authenticated now even with the following snippet\r\n\u003E \r\n\u003E \u0060\u0060\u0060cs\r\n\u003E var factory = new WebApp();\r\n\u003E         var client = factory.CreateDefaultClient();\r\n\u003E         //client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(scheme: TestAuthHandler.AuthenticationScheme);\r\n\u003E \u0060\u0060\u0060\r\n\u003E \r\n\u003E As I understand it the AuthenticationHeaderValue is what should have triggered TestAuthHandler\r\n\r\nI have the exact same issue, hope there will be some updates on this.",
        "createdAt": "2023-03-11T15:00:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45608#issuecomment-1464929439"
      },
      {
        "id": "IC_kwDOAQzde85mOa5n",
        "parentId": null,
        "author": "nibblesnbits",
        "content": "Has anyone looked into this recently?  It\u0027s a big roadblock for me.",
        "createdAt": "2023-09-12T06:18:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45608#issuecomment-1715056231"
      },
      {
        "id": "IC_kwDOAQzde85p0e0u",
        "parentId": null,
        "author": "codehunter13",
        "content": "same problem over here...",
        "createdAt": "2023-10-23T14:43:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45608#issuecomment-1775365422"
      },
      {
        "id": "IC_kwDOAQzde85tP2JV",
        "parentId": null,
        "author": "xzxzxc",
        "content": "I think I have a workaround for the issue. \r\n\r\n**Description:** As you can see [here](https://github.com/dotnet/aspnetcore/blob/4a25559687edf1ed6dc1f95b27dd4d69f9e4f849/src/Security/Authentication/Core/src/AuthenticationMiddleware.cs#L50), \u0060AuthenticationMiddleware\u0060 uses instances of \u0060IAuthenticationRequestHandler\u0060 before using a default scheme. So instead of setting \u0060TestAuthHandler\u0060 as default, we can make it implement \u0060IAuthenticationRequestHandler\u0060 and, with a bit of copy-paste of internal code, do the same as \u0060AuthenticationMiddleware\u0060 does.\r\n\r\n**Workaround**: \r\n1. Replace the \u0060TestAuthHandler\u0060 from the [Mock authentication example](https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-7.0#mock-authentication) with the following\r\n\u0060\u0060\u0060c#\r\npublic class TestAuthHandler : AuthenticationHandler\u003CAuthenticationSchemeOptions\u003E, IAuthenticationRequestHandler\r\n{\r\n\tpublic TestAuthHandler(\r\n\t\tIOptionsMonitor\u003CAuthenticationSchemeOptions\u003E options,\r\n\t\tILoggerFactory logger,\r\n\t\tUrlEncoder encoder,\r\n\t\tISystemClock clock)\r\n\t\t: base(options, logger, encoder, clock)\r\n\t{\r\n\t}\r\n\r\n\tpublic async Task\u003Cbool\u003E HandleRequestAsync()\r\n\t{\r\n\t\tif (Request.Headers.Authorization != \u0022TestScheme\u0022)\r\n\t\t\treturn false;\r\n\r\n\t\tvar claims = new[] { new Claim(ClaimTypes.Name, \u0022Test user\u0022) };\r\n\t\tvar identity = new ClaimsIdentity(claims, \u0022Test\u0022);\r\n\t\tvar principal = new ClaimsPrincipal(identity);\r\n\r\n\t\tvar ticket = new AuthenticationTicket(principal, \u0022TestScheme\u0022);\r\n\r\n\t\tvar authFeatures = new AuthenticationFeatures(AuthenticateResult.Success(ticket));\r\n\t\tContext.Features.Set\u003CIHttpAuthenticationFeature\u003E(authFeatures);\r\n\t\tContext.Features.Set\u003CIAuthenticateResultFeature\u003E(authFeatures);\r\n\r\n\t\t// return false, otherwise the AuthenticationMiddleware will finish the pipeline\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected override async Task\u003CAuthenticateResult\u003E HandleAuthenticateAsync()\r\n\t{\r\n\t\t// this should never be called\r\n\t\tthrow new NotImplementedException();\r\n\t}\r\n\r\n\t/// \u003Csummary\u003E\r\n\t/// Copied from https://github.com/dotnet/aspnetcore/blob/main/src/Security/Authentication/Core/src/AuthenticationFeatures.cs\r\n\t/// \u003C/summary\u003E\r\n\tinternal sealed class AuthenticationFeatures : IAuthenticateResultFeature, IHttpAuthenticationFeature\r\n\t{\r\n\t\tprivate ClaimsPrincipal? _user;\r\n\t\tprivate AuthenticateResult? _result;\r\n\r\n\t\tpublic AuthenticationFeatures(AuthenticateResult result)\r\n\t\t{\r\n\t\t\tAuthenticateResult = result;\r\n\t\t}\r\n\r\n\t\tpublic AuthenticateResult? AuthenticateResult\r\n\t\t{\r\n\t\t\tget =\u003E _result;\r\n\t\t\tset\r\n\t\t\t{\r\n\t\t\t\t_result = value;\r\n\t\t\t\t_user = _result?.Principal;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic ClaimsPrincipal? User\r\n\t\t{\r\n\t\t\tget =\u003E _user;\r\n\t\t\tset\r\n\t\t\t{\r\n\t\t\t\t_user = value;\r\n\t\t\t\t_result = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\u0060\u0060\u0060\r\n2. Remove the \u0060defaultScheme: \u0022TestScheme\u0022\u0060 argument from the \u0060services.AddAuthentication\u0060 call so it looks like \r\n\u0060\u0060\u0060c#\r\n            builder.ConfigureTestServices(services =\u003E\r\n            {\r\n                services.AddAuthentication()\r\n                    .AddScheme\u003CAuthenticationSchemeOptions, TestAuthHandler\u003E(\r\n                        \u0022TestScheme\u0022, options =\u003E { });\r\n            });\r\n\u0060\u0060\u0060\r\nNow, you can control the authentication with the \r\n\u0060\u0060\u0060c#\r\nclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(scheme: \u0022TestScheme\u0022);\r\n\u0060\u0060\u0060\r\nTested in net6.0.",
        "createdAt": "2023-11-29T23:39:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45608#issuecomment-1832870485"
      },
      {
        "id": "IC_kwDOAQzde85zPw9J",
        "parentId": null,
        "author": "kaylumah",
        "content": "@wtgodbe think something is broken with the both, it readds this label to this issue (which is not a PR..)",
        "createdAt": "2024-02-08T07:40:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45608#issuecomment-1933512521"
      },
      {
        "id": "IC_kwDOAQzde85zQurP",
        "parentId": null,
        "author": "wtgodbe",
        "content": "Sorry about that, please see https://github.com/dotnet/aspnetcore/issues/53859",
        "createdAt": "2024-02-08T10:20:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45608#issuecomment-1933765327"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85ajuIc",
    "title": "When returning a TypedResult from a controller or minimal API endpoint the configured JsonOptions are not used",
    "url": "https://github.com/dotnet/aspnetcore/issues/45872",
    "createdAt": "2023-01-04T17:10:02Z",
    "lastUpdated": "2024-02-13T01:46:38Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen \u0060JsonOptions\u0060 are configured either through \u0060AddControllers().AddJsonOptions()\u0060 or \u0060PostConfigure\u003CJsonOptions\u003E\u0060, endpoints that return \u0060IActionResult\u0060 respect this configuratrion. Endpoints that return \u0060TypedResult\u0060 do not.\r\n\r\n\u0060\u0060\u0060csharp\r\nbuilder.Services.PostConfigure\u003CJsonOptions\u003E(opt =\u003E\r\n    opt.JsonSerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull);\r\n\r\n// this works as expected and omits null values from the response\r\n[HttpGet(\u0022{thingId}\u0022)]\r\npublic async Task\u003CIActionResult\u003E GetThing(string thingId, CancellationToken cancellationToken) =\u003E \r\n    await handler.Handle(new GetThingRequest(thingId), cancellationToken) switch\r\n    {\r\n        { } thing=\u003E new JsonResult(thing),\r\n        _ =\u003E NotFound()\r\n    };\r\n\r\n// this does not work, null values are always included \r\n[HttpGet(\u0022{thingId}\u0022)]\r\npublic async Task\u003CResults\u003COk\u003CThing\u003E, NotFound\u003E\u003E GetThing(string thingId, CancellationToken cancellationToken) =\u003E \r\n    await handler.Handle(new GetThingRequest(thingId), cancellationToken) switch\r\n    {\r\n        { } thing =\u003E TypedResults.Ok(thing ),\r\n        _ =\u003E TypedResults.NotFound()\r\n    };\r\n\u0060\u0060\u0060\r\n\r\nChanging \u0060Ok\u003CThing\u003E\u0060 to \u0060JsonHttpResult\u003CThing\u003E\u0060 and passing the DI\u0027d \u0060JsonOptions\u0060 serializer settings does work correctly but this feels cumbersome and defeats the purpose of it being configured globally.\n\n### Expected Behavior\n\nI could see the argument that minimal APIs wouldn\u0027t use \u0060JsonOptions\u0060 that were configured by chaining off \u0060AddControllers\u0060 because you\u0027re not really using the MVC pipeline, but not respecting the options that are configured via PostConfigure is confusing. Having to DI another dependency into your controller or endpoint just to have \u0060TypedResult.Json\u0060 respect what has already been configured also seems odd. I would expect it to simply use what was configured - same goes for \u0060TypedResult.Ok\u0060 when your default serialization is JSON.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.101\n\n### Anything else?\n\n_No response_",
    "upvotes": 2,
    "labels": [
      "Needs: Design",
      "investigate",
      "area-mvc",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85Rvtho",
        "parentId": null,
        "author": "brunolins16",
        "content": "@MonocleKelso Unfortunately, there are two different \u0060JsonOptions\u0060\r\n\r\n1. https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.json.jsonoptions?view=aspnetcore-7.0\r\n2. https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.jsonoptions?view=aspnetcore-7.0\r\n\r\n\u0060TypedResult\u0060 depends on \u0060#1\u0060 and I believe you are configuring \u0060#2\u0060. Could you try add:\r\n\r\n\u0060\u0060\u0060 c#\r\nbuilder.Services.ConfigureHttpJsonOptions(opt =\u003E\r\n    opt.SerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull);\r\n\u0060\u0060\u0060",
        "createdAt": "2023-01-04T21:41:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45872#issuecomment-1371461736"
      },
      {
        "id": "IC_kwDOAQzde85RxGBn",
        "parentId": null,
        "author": "davidfowl",
        "content": "@brunolins16 can you file an issue so we can build another API that sets the default in all the different cases?\r\n\r\n![image](https://user-images.githubusercontent.com/95136/210713781-22d300f8-b7bc-4a6d-94a3-9bae98524b3b.png)\r\n",
        "createdAt": "2023-01-05T06:13:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45872#issuecomment-1371824231"
      },
      {
        "id": "IC_kwDOAQzde85RzObv",
        "parentId": null,
        "author": "MonocleKelso",
        "content": "Thanks @brunolins16 that worked. And yes, @davidfowl I think \u0060unfortunate\u0060 is the right word to use \uD83E\uDD23 ",
        "createdAt": "2023-01-05T15:41:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45872#issuecomment-1372382959"
      },
      {
        "id": "IC_kwDOAQzde85R0JX-",
        "parentId": null,
        "author": "halter73",
        "content": "\u003E @brunolins16 can you file an issue so we can build another API that sets the default in all the different cases?\r\n\r\nWhat if MVC registered an \u0060IConfigureOptions\u003CMvc.JsonOptions\u003E\u0060 that copies from the extensions \u0060JsonOptions\u0060?",
        "createdAt": "2023-01-05T19:11:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45872#issuecomment-1372624382"
      },
      {
        "id": "IC_kwDOAQzde85TxfIv",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-01-26T19:14:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45872#issuecomment-1405481519"
      },
      {
        "id": "IC_kwDOAQzde85UuCa7",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: Need to investigate if the proposal [here](https://github.com/dotnet/aspnetcore/issues/45872#issuecomment-1372624382) is a viable approach.",
        "createdAt": "2023-02-07T19:50:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45872#issuecomment-1421354683"
      },
      {
        "id": "IC_kwDOAQzde85UuENE",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-02-07T19:57:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45872#issuecomment-1421361988"
      },
      {
        "id": "IC_kwDOAQzde85mXYVS",
        "parentId": null,
        "author": "Misiu",
        "content": "The code provided by @brunolins16 also helped when I needed to use a custom converter in minimal API.\r\nIn my case I have this endpoint:\r\n\u0060\u0060\u0060\r\napp.MapPatch(\u0022/{id}\u0022, async Task\u003CResults\u003COk, NotFound\u003E\u003E (ICarService carService, Guid id, IDictionary\u003Cstring, object?\u003E changes)\r\n\u0060\u0060\u0060\r\nand I wanted to get real values and not JsonElements (which is weird IMO)\r\nAfter creating a custom converter and registering it using the provided code in the Program.cs everything works fine.\r\n\r\nMaybe info about custom converters should be added here: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/parameter-binding?view=aspnetcore-7.0#configure-json-deserialization-options-globally?",
        "createdAt": "2023-09-13T10:57:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45872#issuecomment-1717405010"
      },
      {
        "id": "IC_kwDOAQzde85mblzQ",
        "parentId": null,
        "author": "captainsafia",
        "content": "@Misiu Would [linking to the official docs](https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/converters-how-to?pivots=dotnet-7-0) be helpful here?",
        "createdAt": "2023-09-14T01:11:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45872#issuecomment-1718508752"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85a5ydY",
    "title": "\u0060string[]\u0060 bound to querystring in minimal API should return \u0060400\u0060 when not present",
    "url": "https://github.com/dotnet/aspnetcore/issues/45956",
    "createdAt": "2023-01-09T07:55:43Z",
    "lastUpdated": "2024-02-13T01:46:04Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen you have a minimal API that takes a \u0060string[]\u0060 (or \u0060StringValues\u0060) parameter which binds to the querystring, for example:\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/\u0022, (string[] q) =\u003E q);\r\n\u0060\u0060\u0060\r\n\r\ncalling the API without a querystring (e.g. \u0060/\u0060) _should_ give a 400 response saying \u0060BadHttpRequestException: Required parameter \u0022string[] q\u0022 was not provided from query string.\u0060\r\n\r\nBut this does not happen - instead \u0060q\u0060 is an empty array. This differs from both of the following other examples:\r\n \r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/\u0022, (string q) =\u003E q); //\r\napp.MapGet(\u0022/\u0022, (StringValues q) =\u003E q); \r\n\u0060\u0060\u0060\r\n\r\nwhich both return a 400 response as expected.\n\n### Expected Behavior\n\n[When binding a required parameter](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-7.0#optional-parameters) in a minimal API, a value must be present in the binding source (typically the querystring when binding arrays), otherwise the API returns a 400. This is [the documented behaviour](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-7.0#optional-parameters) which works for other parameter types.\n\n### Steps To Reproduce\n\nTo reproduce, create an api like this: \u0060app.MapGet(\u0022/\u0022, (string[] q) =\u003E q);\u0060 and call the URL \u0060/\u0060 (without a querystring). The response is \u0060[]\u0060, where it should be a 400 Bad Request.\r\n\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.101\n\n### Anything else?\n\n\r\nI found this behaviour while reading some of the \u0060Expression\u0060 generation code in \u0060RequestDelegateFactory\u0060. In particular \u0060CreateArgument()\u0060 calls [\u0060BindParameterFromValue\u0060](https://github.com/dotnet/aspnetcore/blob/v7.0.1/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L1457-L1461) which calls [\u0060BindParameterFromExpression\u0060](https://github.com/dotnet/aspnetcore/blob/v7.0.1/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L1682).\r\n\r\nThe argument expression generated by this code when binding a \u0060string[]\u0060 parameter (called \u0060q\u0060 in this example) to the querystring is similar to the following (some artisitic license):\r\n\r\n\u0060\u0060\u0060csharp\r\nTask Invoke(HttpContext httpContext)\r\n{\r\n    bool wasParamCheckFailure = false; // Added by RequestDelegateFactory.Create()\r\n\r\n    string[] q_local = httpContext.Request.Query[\u0022q\u0022] // \uD83D\uDC48 This is the problem\r\n    if (q_local == null) // \uD83D\uDC48 Because this is never true.\r\n    {\r\n        wasParamCheckFailure = true;\r\n        Log.RequiredParameterNotProvided(httpContext, \u0022string[]\u0022, \u0022q\u0022, \u0022query\u0022);\r\n    }\r\n\r\n    if(wasParamCheckFailure) // Added by RequestDelegateFactory.Create()\r\n    {\r\n        httpContext.Response.StatusCode = 400;\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n    // .. call handler, handle response\r\n}\r\n\u0060\u0060\u0060\r\n \r\nI think the problem lies in the line above. \u0060Query[\u0022q\u0022]\u0060 returns \u0060StringValues.Empty\u0060 when the item is not present, and is implicitly converted to a \u0060string[]\u0060. \u0060(string[])StringValues.Empty\u0060 _always_ returns an empty array, so is never \u0060null\u0060, so the check never succeeds.\r\n",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85SBKCU",
        "parentId": null,
        "author": "andrewlock",
        "content": "I\u0027ve noticed that this actually applies to all arrays of \u0060TryParse\u0060-ables too, not just \u0060string[]\u0060, because the expression for \u0060int[]\u0060 (for example) [uses a \u0060string[] tempStringArray\u0060](https://github.com/dotnet/aspnetcore/blob/v7.0.1/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L1594).",
        "createdAt": "2023-01-09T18:03:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45956#issuecomment-1376034964"
      },
      {
        "id": "IC_kwDOAQzde85ST1Ca",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: We had a fair bit of discussion about how we would handle these types of the \u0060StringValues/\u0060\u0060string[]\u0060 arguments in the RequestDelegateFactory. Some of this was captured in the discussions on https://github.com/dotnet/aspnetcore/pull/41789#discussion_r880853228. For now, the distinction is intended behavior.\r\n\r\nAs an alternative to this, you could implement the check for \u0060StringValues.Empty\u0060 on the argument in an endpoint filter.\r\n\r\ncc: @halter73 for more on the background conversation around this",
        "createdAt": "2023-01-12T19:55:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45956#issuecomment-1380929690"
      },
      {
        "id": "IC_kwDOAQzde85TnXuC",
        "parentId": null,
        "author": "halter73",
        "content": "Starting in .NET 7 with #41789, \u0060StringValues\u0060 behaves the way you want \u0060string[]\u0060 to behave, so you can take a \u0060StringValues\u0060 parameter instead and cast to \u0060string[]\u0060 as needed as a workaround.\r\n\r\nHere\u0027s our initial conversation about nullable arrays. https://github.com/dotnet/aspnetcore/issues/32516#issuecomment-1020275918. I think the string[] behavior was intentional, and I\u0027d be hesitant to break people expecting and getting an empty array in this case ",
        "createdAt": "2023-01-24T23:34:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45956#issuecomment-1402829698"
      },
      {
        "id": "IC_kwDOAQzde85TnYZ1",
        "parentId": null,
        "author": "??",
        "content": "Hi @andrewlock. We have added the \u0022Needs: Author Feedback\u0022 label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
        "createdAt": "2023-01-24T23:38:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45956#issuecomment-1402832501"
      },
      {
        "id": "IC_kwDOAQzde85Tnb47",
        "parentId": null,
        "author": "andrewlock",
        "content": "Thanks for the context. I haven\u0027t been affected by this directly, so I\u0027m not super passionate, it was just something I noticed when reading the code. \r\n\r\nThat said, it seems... odd... to have the inconsistency. As far as I can work out, this is now the _only_ case where a nullable parameter _can\u0027t_ ever actually be null.\r\n\r\nThe fact that \u0060(StringValues? myval) =\u003E { }\u0060 gives \u0060myval\u0060 as \u0060null\u0060, yet \u0060(string[]? myval) =\u003E { }\u0060 _won\u0027t_ be \u0060null\u0060 is a weird disconnect IMO. Additionally, the \u0060StringValues?\u0060 \u0022trick\u0022 doesn\u0027t work if you\u0027re binding an optional array of \u0060TryParse\u0060-ables (like \u0060int[]?\u0060). The array can\u0027t ever be \u0060null\u0060 here.\r\n\r\nAs for breaking people, I\u0027d be surprised people would be marking arrays as explicitly nullable if they _weren\u0027t_ ever expecting the parameter to be null \uD83E\uDD14 \r\n\r\nThat said, I understand it could be a breaking change, in which case I\u0027d suggest at least [updating the documentation to](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-7.0#optional-parameters) highlight this exception to the rule?",
        "createdAt": "2023-01-25T00:00:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45956#issuecomment-1402846779"
      },
      {
        "id": "IC_kwDOAQzde85Tnm-t",
        "parentId": null,
        "author": "halter73",
        "content": "\u003E That said, it seems... odd... to have the inconsistency. As far as I can work out, this is now the _only_ case where a nullable parameter _can\u0027t_ ever actually be null.\r\n\r\nI think you\u0027re right that arrays are currently the only type of parameter that can never be null, but it\u0027s also the only supported parameter type other than \u0060StringValues\u0060 that can already uniquely represent missing parameters without using null. If you were binding an array from the body, there\u0027s a difference between \u0060[]\u0060 and an empty body that needs to be represented.\r\n\r\nTo me this is similar to the following in DI where \u0060dependency\u0060 will never be null:\r\n\r\n\u0060\u0060\u0060csharp\r\npublic MyService(IEnumerable\u003CMyMissingDependency\u003E dependency = null)\r\n\u0060\u0060\u0060\r\n\r\n\u003E The fact that \u0060(StringValues? myval) =\u003E { }\u0060 gives \u0060myval\u0060 as \u0060null\u0060, yet \u0060(string[]? myval) =\u003E { }\u0060 _won\u0027t_ be \u0060null\u0060 is a weird disconnect IMO.\r\n\r\nI completely agree this is a weird disconnect. In a world where more people were aware of the existence of \u0060StringValues.Empty\u0060 and redundancy of \u0060Nullable\u003CStringValues\u003E\u0060, I would have liked to use \u0060StringValues.Empty\u0060 instead of null here as well. I don\u0027t think empty arrays are nearly as obscure.\r\n\r\n\u003E As for breaking people, I\u0027d be surprised people would be marking arrays as explicitly nullable if they _weren\u0027t_ ever expecting the parameter to be null \uD83E\uDD14\r\n\r\nI\u0027m not as worried about passing null into a \u0060string[]?\u0060 parameter. If someone went out of their way to make the parameter nullable, passing in null seems reasonable to me. After all, the original proposal from @davidfowl in https://github.com/dotnet/aspnetcore/issues/32516#issuecomment-1020275918 was, \u0022If there are no values we pass an empty array unless the user makes the array nullable.\u0022\r\n\r\nHowever, going from calling the route handler with an empty array to short-circuiting with a 400 in the non-nullable \u0060string[]\u0060/\u0060int[]\u0060/\u0060whatever[]\u0060 case does seem very risky. And then if we\u0027re going to pass in an empty array in the non-nullable case, passing in null for the exact same request in the nullable case also seems inconsistent.\r\n\r\n\u003E That said, I understand it could be a breaking change, in which case I\u0027d suggest at least [updating the documentation to](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-7.0#optional-parameters) highlight this exception to the rule?\r\n\r\nAgreed. We should update that section to call out the behavior of both \u0060StringValues\u0060 and \u0060string\u0060/tryparsable arrays.",
        "createdAt": "2023-01-25T00:46:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45956#issuecomment-1402892205"
      },
      {
        "id": "IC_kwDOAQzde85Z31AU",
        "parentId": null,
        "author": "mitchdenny",
        "content": "@halter73 what was the actual action here? From my reading we won\u0027t be changing any implementation here - but maybe a docs update?",
        "createdAt": "2023-04-14T01:33:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45956#issuecomment-1507807252"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85bM3X5",
    "title": "[Perf] Remove extra array allocation when using request filters with request delegate",
    "url": "https://github.com/dotnet/aspnetcore/issues/46046",
    "createdAt": "2023-01-12T04:57:44Z",
    "lastUpdated": "2024-03-01T22:42:35Z",
    "body": "Follow up to https://github.com/dotnet/aspnetcore/pull/46020\r\n\r\nDefaultEndpointFilterInvocationContext requires a collection be allocated. Ideally, the code to build the pipeline moves to RequestDelegateFactory - https://github.com/dotnet/aspnetcore/issues/46024 - and we can reuse a generated context.",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85SPkp7",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-01-12T04:57:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46046#issuecomment-1379814011"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85cgeIx",
    "title": "Add color definitions to VS for route syntax highlighting",
    "url": "https://github.com/dotnet/aspnetcore/issues/46207",
    "createdAt": "2023-01-22T06:06:14Z",
    "lastUpdated": "2024-04-26T02:01:33Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nRoute syntax highlighting is currently reusing classifications from regex highlighting.\n\n### Expected Behavior\n\nShould add a set of dedicated color configuration options to VS so people can customize what routes look like.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85741Lf",
        "parentId": null,
        "author": "captainsafia",
        "content": "@JamesNK I assume this is still pending. I\u0027ll stick it in the backlog for now but feel free to adjust if that is needed.",
        "createdAt": "2024-04-26T02:01:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46207#issuecomment-2078495455"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85c1-rI",
    "title": "[AOT] Improve Results\u003C...\u003E.PopulateMetadata implementation",
    "url": "https://github.com/dotnet/aspnetcore/issues/46267",
    "createdAt": "2023-01-26T05:36:55Z",
    "lastUpdated": "2024-02-13T01:44:29Z",
    "body": "There currently isn\u0027t a good way to call static generic methods from reflection. \u0060Results\u003C...\u003E.PopulateMetadata\u0060 currently requires DAM methods and some non-ideal reflection.\r\n\r\nSome options are described here: https://github.com/dotnet/aspnetcore/pull/46082#discussion_r1086848062",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85TuERf",
        "parentId": null,
        "author": "JamesNK",
        "content": "Improve compiler: https://github.com/dotnet/runtime/issues/81204\r\nImprove C#: https://github.com/dotnet/csharplang/discussions/6308",
        "createdAt": "2023-01-26T05:43:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46267#issuecomment-1404585055"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85c71g2",
    "title": "[Question] How do I get route values in a CORS preflight request?",
    "url": "https://github.com/dotnet/aspnetcore/issues/46284",
    "createdAt": "2023-01-27T05:13:23Z",
    "lastUpdated": "2024-02-13T01:44:26Z",
    "body": "I am implementing an [ICorsPolicyProvider](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.cors.infrastructure.icorspolicyprovider?view=aspnetcore-7.0) to dynamically determine whether or not a cross-origin request is allowed based on the route values of a GET request.\r\nWhen a CORS preflight request is received, the route value cannot be retrieved ([GetRouteValue](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.routing.routinghttpcontextextensions.getroutevalue) method returns \u0060null\u0060), probably because the corresponding route is not defined for the OPTIONS method.\r\nThe HTTP method used in the actual resource request that follows the preflight request is specified in the \u0060Access-Control-Request-Method\u0060 request header.\r\nTherefore, I would think it would be possible to determine the GET route and parse route values based on the request path and the value of this header, but I do not know exactly how to do this.",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85T4uJk",
        "parentId": null,
        "author": "Kahbazi",
        "content": "@aetos382 I\u0027m guessing your CORS middleware is added before \u0060UseRouting\u0060. Have you tried moving \u0060UseCors\u0060 after \u0060UseRouting\u0060?",
        "createdAt": "2023-01-28T11:23:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46284#issuecomment-1407378020"
      },
      {
        "id": "IC_kwDOAQzde85UIYHD",
        "parentId": null,
        "author": "aetos382",
        "content": "@Kahbazi Thank you.\r\nI am calling \u0060UseRouting\u0060 before \u0060UseCors\u0060.\r\nI can get route values for \u0060GET\u0060 requests, but not for \u0060OPTIONS\u0060 requests.",
        "createdAt": "2023-02-01T05:16:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46284#issuecomment-1411482051"
      },
      {
        "id": "IC_kwDOAQzde85Ubv9X",
        "parentId": null,
        "author": "aetos382",
        "content": "Repro code is here: https://github.com/aetos382/RouteValuesForOptions\r\n\r\nI want this test to be a success.\r\nhttps://github.com/aetos382/RouteValuesForOptions/blob/f2c55dce70e2dd65eaba3ff91b4b566adc4e82ff/RouteValuesForOptions.Tests/MyCorsPolicyProviderTest.cs#L46-L49",
        "createdAt": "2023-02-04T00:37:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46284#issuecomment-1416560471"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85dFAMn",
    "title": "App first request performance with many Minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/46313",
    "createdAt": "2023-01-30T01:48:11Z",
    "lastUpdated": "2024-07-31T20:18:18Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nFound while investigating https://github.com/dotnet/aspnetcore/issues/46154\r\n\r\nThe app below has 30,000 endpoints. The first request to \u0060/\u0060 takes 0.5 seconds with 280 MB memory usage:\r\n\r\n\u0060\u0060\u0060cs\r\nusing System.Diagnostics;\r\nusing System.Globalization;\r\nusing System.Reflection;\r\nusing Microsoft.AspNetCore.Http.HttpResults;\r\nusing Microsoft.AspNetCore.Http.Metadata;\r\nusing Microsoft.AspNetCore.Mvc;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build();\r\n\r\napp.Use(async (HttpContext context, Func\u003CTask\u003E next) =\u003E\r\n{\r\n    Console.WriteLine(\u0022Start time\u0022);\r\n    Stopwatch stopwatch = Stopwatch.StartNew();\r\n\r\n    await next();\r\n\r\n    stopwatch.Stop();\r\n    Console.WriteLine(stopwatch.Elapsed.TotalSeconds);\r\n});\r\n\r\napp.UseRouting();\r\n\r\nTask Plaintext(HttpContext context) =\u003E context.Response.WriteAsync(\u0022Hello, World!\u0022);\r\nfor (int i = 0; i \u003C 30_000; i\u002B\u002B)\r\n{\r\n    var url = \u0022/plaintext/nested\u0022 \u002B i;\r\n    app.MapGet(url, Plaintext);\r\n}\r\n\r\napp.MapGet(\u0022/\u0022, (HttpContext context) =\u003E\r\n{\r\n    return context.Response.WriteAsync(\u0022Hello world\u0022);\r\n});\r\n\r\nConsole.WriteLine(\u0022Running app\u0022);\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\nIf I change the \u0060Plaintext\u0060 endpoint to be a minimal API (aka use \u0060RequestDelegateFactory\u0060) like so:\r\n\r\n\u0060\u0060\u0060diff\r\n- Task Plaintext(HttpContext context) =\u003E context.Response.WriteAsync(\u0022Hello, World!\u0022);\r\n\u002B string Plaintext() =\u003E \u0022Hello, World!\u0022;\r\n\u0060\u0060\u0060\r\n\r\nWith 30,000 minimal APIs, it now takes 32 seconds to get the first request. And memory usage is 1,065 MB.\r\n\r\n### Expected Behavior\r\n\r\nI expect a fast startup time.\r\n\r\nI think the problem is \u0060RequestDelegateFactory\u0060 is building and compiling expressions for all minimal API endpoints when routing starts. Creating a minimal API\u0027s expression should be lazy and wait until an endpoint is first visited.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "Needs: Design",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85T6mUT",
        "parentId": null,
        "author": "JamesNK",
        "content": "cc @davidfowl ",
        "createdAt": "2023-01-30T01:52:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46313#issuecomment-1407870227"
      },
      {
        "id": "IC_kwDOAQzde85T6_BF",
        "parentId": null,
        "author": "davidfowl",
        "content": "Yea, this is known, and we could definitely do a better job here. Also the above code isn\u0027t super realistic, maybe our benchmark should have different API shapes with argument types to better represent something more realistic. The reason I suggest that is because I can see 2 optimizations:\r\n\r\n1. Making delegate compilation lazy\r\n2. Caching similar delegates to reduce repeated compilation (would work great in the above scenario).",
        "createdAt": "2023-01-30T04:16:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46313#issuecomment-1407971397"
      },
      {
        "id": "IC_kwDOAQzde85T_cA7",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "Didn\u0027t we have a test set of routes/APIs based on all the public Azure or MS REST APIs at one point? I seem to recall we used it to help determine endpoint routing performance in 3.0.",
        "createdAt": "2023-01-30T18:40:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46313#issuecomment-1409138747"
      },
      {
        "id": "IC_kwDOAQzde85UAjpE",
        "parentId": null,
        "author": "JamesNK",
        "content": "I think making delegate compilation lazy is the easiest fix here.\r\n\r\n\u0060\u0060\u0060csharp\r\nvar buildExpressionLazy = new Lazy\u003CRequestDelegate\u003E(Builder, LazyThreadSafetyMode.ExecutionAndPublication);\r\nRequestDelegate d = (context) =\u003E\r\n{\r\n    var realDelegate = buildExpressionLazy.Value;\r\n    return realDelegate(context);\r\n};\r\nreturn d;\r\n\r\n// \u002B Build method which handles calling off to RequestDelegateFactory to generate compiled expression.\r\n\u0060\u0060\u0060\r\n\r\nCaching similar delegates is useful but could come later.",
        "createdAt": "2023-01-30T22:14:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46313#issuecomment-1409432132"
      },
      {
        "id": "IC_kwDOAQzde85UBAin",
        "parentId": null,
        "author": "davidfowl",
        "content": "I agree, it doesn\u0027t solve the peak memory problem, but it does make it pay as you go.",
        "createdAt": "2023-01-31T00:09:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46313#issuecomment-1409550503"
      },
      {
        "id": "IC_kwDOAQzde85UF3Rp",
        "parentId": null,
        "author": "halter73",
        "content": "Lazily calling RequestDelegateFactory.Create has the possible issue that this will surface some errors later that used to happen on the first request. It also could introduce subtle ordering issues for filter factories and complicated IEndpointConventionBuilder.Add callbacks if they rely on some sort of global state.\r\n\r\nI don\u0027t find this super likely to cause issues though, and the fact that the errors were never truly at startup and instead during first request might make the impact of this less significant. More analyzers that highlight these errors at compilation time will also mitigate this.\r\n\r\nCaching similar RequestDelegates has some potential. Scenarios like this where endpoints are added programmatically or during source gen seem common enough. A developer could call RequestDelegateFactory.Create() and cache themselves if they start noticing startup issues, but that\u0027d be extremely unobvious.",
        "createdAt": "2023-01-31T17:55:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46313#issuecomment-1410823273"
      },
      {
        "id": "IC_kwDOAQzde85UHdmP",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: We need to identify what in the startup codepath is causing this (compiling LINQ expressions, something else?)\r\n\r\nWe\u0027ll also want to test how the source generated-endpoints impact this behavior.",
        "createdAt": "2023-02-01T00:05:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46313#issuecomment-1411242383"
      },
      {
        "id": "IC_kwDOAQzde85UOKOM",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Triage: We need to identify what in the startup codepath is causing this (compiling LINQ expressions, something else?)\r\n\u003E \r\n\u003E We\u0027ll also want to test how the source generated-endpoints impact this behavior.\r\n\r\nFollow up with some numbers from a run I did:\r\n\r\n\u0060\u0060\u0060\r\nStart time (with RequestDelegate)\r\n0.27807\r\n\r\nStart time (with route handler)\r\n1.2106882\r\n\r\nStart time (with route handler and generator)\r\n0.7631818\r\n\u0060\u0060\u0060\r\n\r\nLooks like there\u0027s something else producing overhead in the source generator scenario...",
        "createdAt": "2023-02-02T01:03:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46313#issuecomment-1412998028"
      },
      {
        "id": "IC_kwDOAQzde85UOM_F",
        "parentId": null,
        "author": "davidfowl",
        "content": "The dictionary lookups? ",
        "createdAt": "2023-02-02T01:18:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46313#issuecomment-1413009349"
      },
      {
        "id": "IC_kwDOAQzde85UOWuL",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "Aren\u0027t those per-request? Or are they when the endpoint is built?",
        "createdAt": "2023-02-02T02:08:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46313#issuecomment-1413049227"
      },
      {
        "id": "IC_kwDOAQzde85UOp4u",
        "parentId": null,
        "author": "davidfowl",
        "content": "It\u2019s during startup (the calls the Map*)",
        "createdAt": "2023-02-02T04:12:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46313#issuecomment-1413127726"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85dL_zF",
    "title": "DeveloperExceptionMiddleware shouldn\u0027t have dependencies to \u0060ProblemDetails\u0060",
    "url": "https://github.com/dotnet/aspnetcore/issues/46339",
    "createdAt": "2023-01-31T00:33:29Z",
    "lastUpdated": "2024-02-13T01:44:02Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIn https://github.com/dotnet/aspnetcore/issues/42212 was introduced the \u0060IProblemDetailsService\u0060 and the \u0060DeveloperExceptionPageMiddleware\u0060 updated to include \u0060ProblemDetails\u0060 payload generation. \r\n\r\nHowever, it introduced an unnecessary dependency to \u0060JsonOptions\u0060 and \u0060ProblemDetails\u0060 that could have been avoided if the the \u0060ProblemDetails\u0060 generation was implemented using an \u0060IDeveloperPageExceptionFilter\u0060.\r\n\r\n### Expected Behavior\r\n\r\n\u0060DeveloperExceptionPageMiddleware\u0060 should not have dependencies to \u0060JsonOptions\u0060 or \u0060ProblemDetails\u0060 but should have the \u0060ProblemDetails\u0060 payload generated when \u0060AddProblemDetails\u0060 is called.\r\n\r\n### .NET Version\r\n\r\n.NET 7",
    "upvotes": 0,
    "labels": [
      "feature-problem-details",
      "area-minimal",
      "area-middleware"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85XjsL3",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: @mitchdenny As part of https://github.com/dotnet/aspnetcore/issues/46969, can you see if \u0060ProblemDetails\u0060 is a big contributor to the size accounting for DeveloperExceptionPage? If it is a big contributor, we may consider doing this work.",
        "createdAt": "2023-03-14T22:53:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46339#issuecomment-1468973815"
      },
      {
        "id": "IC_kwDOAQzde85Y2qcU",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-03-30T18:13:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46339#issuecomment-1490724628"
      },
      {
        "id": "IC_kwDOAQzde85eKVmV",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-06-07T02:22:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46339#issuecomment-1579768213"
      },
      {
        "id": "IC_kwDOAQzde85eKVoX",
        "parentId": null,
        "author": "mitchdenny",
        "content": "Moving to backlog due to reprioritization.",
        "createdAt": "2023-06-07T02:22:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46339#issuecomment-1579768343"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85dMNT-",
    "title": "Share route pattern parsing logic between analyzers and generators",
    "url": "https://github.com/dotnet/aspnetcore/issues/46342",
    "createdAt": "2023-01-31T01:51:07Z",
    "lastUpdated": "2024-03-01T22:42:36Z",
    "body": "Both the route handler analyzers and the RequestDelegateGenerator share a requirement for being able to parse a route pattern string and extract information about the route parameters in it, constraints on those parameters, etc.\r\n\r\nWe should identify a way to share this code across the analyzers and generators.\r\n\r\nAs part of consuming this logic in the RequestDelegateGenerator we want to emit logic that will determine if a parameter appears in the route and sourcing it from the route values dictionary.\r\n\r\ncc: @halter73 as this relates to the parameter binding work\r\ncc: @JamesNK who has knowledge in this area",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85UBSwR",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-01-31T01:51:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46342#issuecomment-1409625105"
      },
      {
        "id": "IC_kwDOAQzde85WQysv",
        "parentId": null,
        "author": "halter73",
        "content": "Continuing the conversation from https://github.com/dotnet/aspnetcore/pull/46838/files#r1119362420\r\n\r\nCompile-time pattern parsing won\u0027t work a lot of the time like when the \u0060IEndpointRouteBuilder\u0060 is really a group with an unknown prefix.\r\n\r\nI think our best option is going to be to continue validating the route values during the call to \u0060RouteEndpointDataSource.GetGroupedEndpoints(context)\u0060 like we do in RDF today. Waiting until the \u0060RequestDelegate\u0060 is invoked to throw the \u0060InvalidOperationException\u0060 is too late.\r\n\r\nWe shouldn\u0027t be checking \u0060options?.RouteParameterNames?.Contains(\u0022{{endpointParameter.Name}}\u0022, StringComparer.OrdinalIgnoreCase) != true\u0060 every single request for each potential route parameter for performance reasons anyway. We should be caching the result of this during \u0060GetGroupedEndpoints\u0060. This is more important than improving the compile-time analysis because the runtime check can always work.",
        "createdAt": "2023-02-27T22:59:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46342#issuecomment-1447242543"
      },
      {
        "id": "IC_kwDOAQzde85WRFYa",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E We shouldn\u0027t be checking options?.RouteParameterNames?.Contains(\u0022{{endpointParameter.Name}}\u0022, StringComparer.OrdinalIgnoreCase) != true every single request for each potential route parameter for performance reasons anyway. \r\n\r\nActually, I think this should be doable if we move the check from [here](https://github.com/dotnet/aspnetcore/blob/efb237bf5ac5558a8c9c7549ad33341f157f2638/src/Http/Http.Extensions/test/RequestDelegateGenerator/Baselines/MapAction_ExplicitSource_SimpleReturn_Snapshot.generated.txt#L255-L258) to [here](https://github.com/dotnet/aspnetcore/blob/efb237bf5ac5558a8c9c7549ad33341f157f2638/src/Http/Http.Extensions/test/RequestDelegateGenerator/Baselines/MapAction_ExplicitSource_SimpleReturn_Snapshot.generated.txt#L236). This is what uController does anyways ([ref](https://github.com/davidfowl/uController/blob/main/GeneratedOutput/RouteBuilderExtensions.g.cs#L794)) and we\u0027ve talked about doing it that way before but this detail was missed in the original implementation. I can take a look at fixing this.",
        "createdAt": "2023-02-28T00:11:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46342#issuecomment-1447319066"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85dQsZ7",
    "title": "Support generating parameter validations via source generation",
    "url": "https://github.com/dotnet/aspnetcore/issues/46349",
    "createdAt": "2023-01-31T16:37:56Z",
    "lastUpdated": "2024-10-28T14:47:32Z",
    "body": "Minimal APIs doesn\u0027t currently support validations on request parameters. Ideally, this is functionality that we would be able to support by taking advantage of the endpoint filters feature introduced in .NET 7 and the existing of the \u0060DataAnnotations\u0060 attributes.\r\n\r\nIn line with the implementation of the compile-time based generator for route handler based endpoints, we want to support this functionality using a source generator. Some of this is prototyped in [this repo](https://github.com/captainsafia/ValidationSourceGenerator).\r\n\r\nThe code generated for validation does the following:\r\n\r\n- Examines parameter types to determine what validation attributes might exist on them\r\n- Generates a static cache of validation attribute instances\r\n- Generates \u0060Validate\u0060 overloads for each validatable parameter type\r\n\t- Support generating \u0060Validate\u0060 overloads for parameter types associated with complex objects \t\r\n- Registers an endpoint filter to invoke the validate overloads and return ProblemDetails if validation fails\r\n- Expose abstractions that allow consumption from both minimal APIs and Blazor",
    "upvotes": 18,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86BwZh8",
        "parentId": null,
        "author": "captainsafia",
        "content": "Hi all --\r\n\r\nWe originally intended to ship this feature in .NET 9. However, due to shifting priorities and some additional requirements associated with this feature, this work is being punted to a future release.\r\n\r\nFor the time being, we recommend using packages, like [MiniValidation](https://www.nuget.org/packages/MiniValidation/), to add validation support to your minimal APIs. While we work through all the technical details to ship a high-quality feature in a future release, we\u0027d still appreciate your feedback to scope out the shape of the API as needed.",
        "createdAt": "2024-06-18T20:49:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46349#issuecomment-2176948348"
      },
      {
        "id": "IC_kwDOAQzde86MHsU0",
        "parentId": null,
        "author": "Simonl9l",
        "content": "I\u0027m exploring this subject and by no mean an expert\r\n\r\nI\u0027d suggest from a scope perspective, there are use cases as simple as a console app not using a Host, and perhaps a simple DI Service Container in support of say a CLI of some kind.\r\n\r\n\u0060System.ComponentModel.Annotations\u0060 seems to have a lot of dependencies on Aps.Net (Core), and the \u0060ValidationContext\u0060 with \u0060[RequiresUnreferencedCode]\u0060 attributes all over it is not AoT-able. \r\n\r\nIt\u0027s also a logical need to be able to inject a context with the DI Service Provider into validations equivalent to \u0060[ValidationAttribute]\u0060.\r\n\r\nI also ran into this related discussion - https://github.com/dotnet/csharplang/discussions/6373 so perhaps the C# and Asp Net Core team, and others, can get together on this?",
        "createdAt": "2024-09-14T04:21:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46349#issuecomment-2350826804"
      },
      {
        "id": "IC_kwDOAQzde86MJQ9c",
        "parentId": null,
        "author": "captainsafia",
        "content": "@Simonl9l Thanks for sharing these thoughts!\r\n\r\nThere have been some conversations about the possibility of generating a \u0022common type validation source generator\u0022 based on the \u0060System.ComponentModel.Annotations\u0060 library. The primary motivations was the goal of standardizing the way validation is done across implementations in the ecosystem (the Options validation generator that shipped in .NET 8, the minimal APIs validation generator once we ship it, and support for Blazor Web) and providing an avenue for code sharing amongst the stacks.\r\n\r\nWe\u0027ve only had a few conversations about what this might look like and haven\u0027t committed to a full design yet, but the possibility of some sort of common layer for source generator-based validation engines has definitely been discussed.",
        "createdAt": "2024-09-15T00:15:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46349#issuecomment-2351239004"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85dyyPN",
    "title": "Avoid \u0060file private\u0060 visibility when targeting LangVersion \u003C 11",
    "url": "https://github.com/dotnet/aspnetcore/issues/46496",
    "createdAt": "2023-02-07T02:56:30Z",
    "lastUpdated": "2024-09-10T20:04:45Z",
    "body": "The RequestDelegateGenerator currently emits a class with \u0060file private\u0060 visibility to avoid leaking implementation details to user space. This can be problematic if users are targeting a language version below C# 11. To avoid this, we\u0027ll want to use \u0060internal\u0060 visibility for those scenarios.",
    "upvotes": 0,
    "labels": [
      "feature-rdg",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85UpV5w",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-02-07T02:56:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46496#issuecomment-1420123760"
      },
      {
        "id": "IC_kwDOAQzde85a0UoI",
        "parentId": null,
        "author": "eerhardt",
        "content": "We should just error out if you aren\u0027t using a new enough C#. It is what we do in other source generators - i.e. Regex and Config Binder. ex. https://github.com/dotnet/runtime/pull/83996",
        "createdAt": "2023-04-26T15:58:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46496#issuecomment-1523665416"
      },
      {
        "id": "IC_kwDOAQzde85a4QHI",
        "parentId": null,
        "author": "mitchdenny",
        "content": "Does raise an interesting question. With source generators the language version we rely on when we release 8.0 becomes part of the contract. Moving to newer language features could be considered a breaking change.",
        "createdAt": "2023-04-27T04:48:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46496#issuecomment-1524695496"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85eBQOP",
    "title": "Warning on use of regex constraints in route parameters.",
    "url": "https://github.com/dotnet/aspnetcore/issues/46546",
    "createdAt": "2023-02-09T07:31:47Z",
    "lastUpdated": "2024-02-13T01:43:11Z",
    "body": "## Background and Motivation\r\n\r\nAs part of #46227 we are removing the default regex constraint from the set of constraints available when \u0060\u0060\u0060CreateSlimBuilder(...)\u0060\u0060\u0060 is used. The reason for this is that including regular expression support on constraints pulls in about 800K of extra file size. We still include the regex constraint resolver when \u0060\u0060\u0060CreateBuilder(...)\u0060\u0060\u0060 is used.\r\n\r\nHowever ... there is an opportunity for people to continue to use regular expressions for router parameters if they implement their own route constraints and provided they know what the regular expression is in advance they can take advantage of source generated regular expressions. We want an analyzer which detects the use of regex constraints and adds a warning which links to documentation on how to create a custom route constraint that uses source generated regex.\r\n\r\n## Proposed Analyzer\r\n\r\n### Analyzer Behavior and Message\r\n\r\nWhen a route pattern is used that includes a regex constraint, we would output the following info message:\r\n\r\n\u003E INFO: Recommend use of custom reoute constraint with source generated regular expressions. See https://aka.ms/aspet/tba for more details.\r\n\r\nNote, if we detect that we are using CreateSlimBuilder (won\u0027t always be possible) then we can increase this to a warning?\r\n\r\n### Category\r\n\r\n- [ ] Design\r\n- [ ] Documentation\r\n- [ ] Globalization\r\n- [ ] Interoperability\r\n- [ ] Maintainability\r\n- [ ] Naming\r\n- [ ] Performance\r\n- [ ] Reliability\r\n- [ ] Security\r\n- [ ] Style\r\n- [x] Usage\r\n\r\n### Severity Level\r\n\r\n- [ ] Error\r\n- [ ] Warning\r\n- [x] Info\r\n- [ ] Hidden\r\n\r\n## Usage Scenarios\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/products/{productId:regex(...)}\u0022, (string productId) =\u003E {});\r\n\u0060\u0060\u0060\r\n\r\n## Risks\r\n\r\nTo discuss.",
    "upvotes": 0,
    "labels": [
      "api-ready-for-review",
      "analyzer",
      "feature-routing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85U3ML4",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2023-02-09T07:32:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46546#issuecomment-1423753976"
      },
      {
        "id": "IC_kwDOAQzde85XjpQb",
        "parentId": null,
        "author": "captainsafia",
        "content": "Triage: This analyzer would be most helpful in scenarios where the user has updated their code to use the \u0060SlimBuilder\u0060 and is still using regular expressions in their route. In this case, it would fallback to a runtime warning that describes the issue. Users who are upgrading from .NET 7 to .NET 8 won\u0027t run into any issues since they don\u0027t use the \u0060SlimBuilder\u0060.\r\n\r\nFor a full-fidelity solution, we can consider this analyzer and a fixer that generates code the Regex constraint referenced in the route. ",
        "createdAt": "2023-03-14T22:38:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46546#issuecomment-1468961819"
      },
      {
        "id": "IC_kwDOAQzde85XjpUo",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-03-14T22:38:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46546#issuecomment-1468962088"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85eDfal",
    "title": "Strange behavior of minimal api when using it in fsharp",
    "url": "https://github.com/dotnet/aspnetcore/issues/46551",
    "createdAt": "2023-02-09T14:15:57Z",
    "lastUpdated": "2024-02-13T01:43:04Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nHello!  I am trying to use minimal api from fsharp, and encountered a following problem: \r\n\r\nhttps://gist.github.com/vshapenko/5c6ae1c0cb005dddd1325caca266ecd4 \r\n\r\n\r\nFirst method in gist above works as intended, second and third do not pass value to handler. \r\n\r\nCan somebody explain this strange behavior?\n\n### Expected Behavior\n\nAll methods returns input string\n\n### Steps To Reproduce\n\nRun the gist above, invoke endpoints\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.100\n\n### Anything else?\n\n_No response_",
    "upvotes": 1,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85XjqYN",
        "parentId": null,
        "author": "captainsafia",
        "content": "@vshapenko Thanks for filing this issue! We don\u0027t have capacity to investigate at the moment and will place it in the backlog. You can try filing it on StackOverflow to see if folks from the F# community might have some insight on this.",
        "createdAt": "2023-03-14T22:43:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46551#issuecomment-1468966413"
      },
      {
        "id": "IC_kwDOAQzde85XjqaV",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-03-14T22:43:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46551#issuecomment-1468966549"
      },
      {
        "id": "IC_kwDOAQzde85r6WUT",
        "parentId": null,
        "author": "lucasteles",
        "content": "@vshapenko This happens because of how F# deals with Delegates, an F# function is not the same as a C# lambda/delegate. \r\n\r\nSo, there is no information about the parameter name when you construct a \u0060Func\u003C\u003E\u0060 using an **already existing** F# function and ASPNET is unable to bind the parameter correctly\r\n\r\nThe first case is working because the F# compiler when see you directly calling a lambda on an \u0060Expression\u003CFunc\u003C\u003E\u003E\u0060 or \u0060Func\u003C\u003E\u0060 emits a compatible delegate type\r\n\r\n\r\nMore here https://github.com/fsharp/fslang-suggestions/issues/1083\r\nand here https://github.com/fsharp/fslang-suggestions/issues/1131\r\n\r\n\r\n",
        "createdAt": "2023-11-14T15:29:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46551#issuecomment-1810457875"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85eRl-5",
    "title": "Minimal APIs result processing does not support IResult via polymorphism unless an endpoint filter is added",
    "url": "https://github.com/dotnet/aspnetcore/issues/46599",
    "createdAt": "2023-02-13T05:10:15Z",
    "lastUpdated": "2024-03-01T23:57:29Z",
    "body": "Processing of \u0060IResult\u0060 instances returned from route handler delegates in minimal APIs only takes into the consideration the declared return type of the delegate. The example below will result in the returned object being JSON serialized, rather than the \u0060DerivedType.ExecuteAsync\u0060 method being called.\r\n\r\nHowever, adding a no-op passthrough filter to this endpoint will change the return object processing behavior to use the runtime type instead.\r\n\r\nThis different behavior is hard to reason about. Consider a scenario where an endpoint is added with a filter initially, and as a result will have its results processed as \u0060IResult\u0060, and then if the filter is later removed the results will now be JSON serialized.\r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022/\u0022, BaseType () =\u003E new DerivedType());\r\napp.Run();\r\n\r\nclass BaseType { }\r\nclass DerivedType : BaseType, IResult\r\n{\r\n    public Task ExecuteAsync(HttpContext httpContext)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85V-Kxt",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-02-23T20:02:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46599#issuecomment-1442360429"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85elbIV",
    "title": "Address generating FQN for types in RDF",
    "url": "https://github.com/dotnet/aspnetcore/issues/46694",
    "createdAt": "2023-02-16T01:55:01Z",
    "lastUpdated": "2024-09-10T20:04:46Z",
    "body": "Follow up to https://github.com/dotnet/aspnetcore/pull/46653#discussion_r1107458645",
    "upvotes": 0,
    "labels": [
      "feature-rdg",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85YCi5s",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-03-20T23:02:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46694#issuecomment-1477062252"
      },
      {
        "id": "IC_kwDOAQzde85jh1r7",
        "parentId": null,
        "author": "captainsafia",
        "content": "Moving this to .NET 9, we may be generating type names that are more fully qualified that they need to be but this isn\u0027t a dealbreaker for .NET 8.",
        "createdAt": "2023-08-08T15:14:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46694#issuecomment-1669815035"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85fBzyP",
    "title": "Remove special case handling for numeric type parameter binding in RDF",
    "url": "https://github.com/dotnet/aspnetcore/issues/46788",
    "createdAt": "2023-02-22T01:28:09Z",
    "lastUpdated": "2024-02-13T01:41:55Z",
    "body": "Now that numeric types in .NET all seem to implement \u0060\u0060\u0060IParsable\u003CT\u003E\u0060\u0060\u0060 do we need the special case numeric handling in \u0060\u0060\u0060RequestDelegateFactory\u0060\u0060\u0060 and friends - especially if the \u0060\u0060\u0060IParsable\u003CT\u003E\u0060\u0060\u0060 implementation is preferenced.",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85dhDm2",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "@mitchdenny Re-milestone?",
        "createdAt": "2023-05-30T19:14:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46788#issuecomment-1568946614"
      },
      {
        "id": "IC_kwDOAQzde85diw6F",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-05-31T02:10:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46788#issuecomment-1569394309"
      },
      {
        "id": "IC_kwDOAQzde85diyQl",
        "parentId": null,
        "author": "mitchdenny",
        "content": "@adityamandaleeka I\u0027ve put it into the backlog milestone for now. It isn\u0027t super urgent that we address this.",
        "createdAt": "2023-05-31T02:18:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46788#issuecomment-1569399845"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85fePJT",
    "title": "Difference between StringValue parameter handling in RDF and RDG",
    "url": "https://github.com/dotnet/aspnetcore/issues/46912",
    "createdAt": "2023-02-27T18:53:54Z",
    "lastUpdated": "2024-03-01T22:42:37Z",
    "body": "The RDF does requiredness checks by comparing the value extracted from the HttpContext against \u0060null\u0060.\r\n\r\nThe RDG uses \u0060StringValues.IsNullOrEmpty\u0060 to execute requiredness checks for values extract from the HttpContext as \u0060StringValue\u0060s (Header or Query). This results in distinct behavior between the RDF and RDG implementations:\r\n\r\n| Handler | Query String | RDG | RDF |\r\n|--|---|--|--|\r\n| \u0060(int p) =\u003E ..\u0060 | \u0060?p=1\u0060 | Binds to 1 | Binds to 1 |\r\n| \u0060(int p) =\u003E ..\u0060 | \u0060?p=\u0060 | Does not bind | Does not bind, throws failed to bind exception |\r\n| \u0060(int p) =\u003E ..\u0060 | none | Does not bind | Does not bind, throws requiredness exception |\r\n| \u0060(int? p) =\u003E ..\u0060 | \u0060?p=1\u0060 | Binds to 1 | Binds to 1 |\r\n| \u0060(int? p) =\u003E ..\u0060 | \u0060?p=\u0060 | Does not bind, defaults to null | Does not bind, throws failed to bind exception |\r\n| \u0060(int? p) =\u003E ..\u0060 | none | Does not bind, defaults to null | Does not bind, defaults to null |",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85W93PI",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-03-08T00:05:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46912#issuecomment-1459057608"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85gYEFT",
    "title": "F# examples in docs",
    "url": "https://github.com/dotnet/aspnetcore/issues/47108",
    "createdAt": "2023-03-09T10:40:28Z",
    "lastUpdated": "2024-02-13T01:40:40Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nF# is an amazing language and recently has been increasing in TIOBE index also --\u003E it\u0027s at number 25 (march 2023)! above Kotlin, Haskell, Scala, Lua, Objective-C, Groovy, Dart, and many other amazing languages!\r\n\r\nhttps://www.tiobe.com/tiobe-index/\r\n\r\n\u003Cimg width=\u0022575\u0022 alt=\u0022image\u0022 src=\u0022https://user-images.githubusercontent.com/10419217/224000058-4667698e-d31e-4885-afa2-76d074625658.png\u0022\u003E\r\n\r\n*  in \u0022official\u0022 docs, e.g. aspnetcore (but also ef core), F# does not appear as a choice or option for devs in the main doc pages\r\n* web api templates, we don\u0027t have many F# versions and \u0022figuring it out\u0022 can be cumbersome for F# users and F# students.\r\n\r\nI understand that F# is very much community based, with other solutions like Giraffe but would be awesome to at least see some basic examples for F# as well in 101 docs for aspnetcore\r\n\r\n\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nwould be great to see examples of minimal apis in F# or integrating Giraffe in aspnetcore , also in docs\r\n\r\nhttps://learn.microsoft.com/en-us/aspnet/core/tutorials/min-web-api?view=aspnetcore-7.0\u0026tabs=visual-studio\r\n\r\nhttps://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-7.0\r\n\r\nadding an F# tab here? \r\n\r\n### Additional context\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-minimal",
      "help candidate"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85XNbiL",
        "parentId": null,
        "author": "mitchdenny",
        "content": "Thanks for the passion around F# support in ASP.NET Core, @jkone27. This is probably an area where we would need to look to the community come up with some decent samples which idiomatic from a F# developers perspective. Fortunately our docs are open source too:\r\n\r\nhttps://github.com/dotnet/AspNetCore.Docs/blob/main/aspnetcore/tutorials/min-web-api.md\r\n\r\nI\u0027m not sure to what extent we would want to feature F# code in our primary docs vs. having a page (or pages) dedicated to F# concerns.",
        "createdAt": "2023-03-10T02:31:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47108#issuecomment-1463138443"
      },
      {
        "id": "IC_kwDOAQzde85uVRTr",
        "parentId": null,
        "author": "enzonun",
        "content": "any update on this ? ",
        "createdAt": "2023-12-11T23:40:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47108#issuecomment-1851069675"
      },
      {
        "id": "IC_kwDOAQzde85ucEX4",
        "parentId": null,
        "author": "captainsafia",
        "content": "@enzonun No updates at the moment!\r\n\r\n@Rick-Anderson Do you have any thoughts on what the best way to incorporate F#-specific examples for our Minimal API docs would be? I don\u0027t know if we\u0027d want to include F# versions of every code sample in the doc, but maybe just an F# variant for the tutorial?",
        "createdAt": "2023-12-12T21:39:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47108#issuecomment-1852851704"
      },
      {
        "id": "IC_kwDOAQzde85zEpnD",
        "parentId": null,
        "author": "jkone27",
        "content": "Would be nice to add a minimal api example for C# code also for F# code indeed! @captainsafia \uD83C\uDF31\u270C\uFE0F\uD83C\uDF08 ",
        "createdAt": "2024-02-06T19:17:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47108#issuecomment-1930598851"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85g8piQ",
    "title": "RDG does not support route handlers that return an anonymous type",
    "url": "https://github.com/dotnet/aspnetcore/issues/47244",
    "createdAt": "2023-03-16T01:04:13Z",
    "lastUpdated": "2024-02-13T01:39:59Z",
    "body": "Given the code:\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/\u0022, () =\u003E new { Name = \u0022Tester\u0022});\r\n\u0060\u0060\u0060\r\n\r\nThe RDG will generate code that fails to comply because of the anonymous type is unspeakable.",
    "upvotes": 0,
    "labels": [
      "bug",
      "feature-rdg",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85Xr3cA",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-03-16T01:04:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47244#issuecomment-1471117056"
      },
      {
        "id": "IC_kwDOAQzde85a2H4q",
        "parentId": null,
        "author": "captainsafia",
        "content": "I\u0027m taking a look at getting this working by taking advantage of the interceptors prototype that is in https://github.com/dotnet/aspnetcore/tree/safia/interceptors-prototype.\n\nThe first onion to peel is that at the moment, we don\u0027t have access to a speakable type name for the anonymous types in two locations.\n\n- The strongly-typed endpoint definition\n- The cast from \u0060Delegate\u0060 to the strongly typed handler that can be invoked with parameters\n\nInterceptors solve the first problem but we still have the second issue to contend with.",
        "createdAt": "2023-04-26T22:58:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47244#issuecomment-1524137514"
      },
      {
        "id": "IC_kwDOAQzde85a2a8B",
        "parentId": null,
        "author": "captainsafia",
        "content": "Update: we realized that even if we get this working from RDG\u0027s perspective, the JSON generator still lacks support for anonymous types so we\u0027re likely to deadend here.\n\nMoving this issue to Low/never since we can\u0027t take any action immediately. We already emit a diagnostic so we are good there.",
        "createdAt": "2023-04-26T23:46:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47244#issuecomment-1524215553"
      },
      {
        "id": "IC_kwDOAQzde85a2gUB",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-04-27T00:00:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47244#issuecomment-1524237569"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85hBkl7",
    "title": "Simpler Alternative to WebApplicationFactory (\u0022compose instead of inherit\u0022 / no \u0060DeferredHost\u0060)",
    "url": "https://github.com/dotnet/aspnetcore/issues/47255",
    "createdAt": "2023-03-16T16:00:30Z",
    "lastUpdated": "2024-02-13T01:39:54Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n## ** After some valuable feedback from @davidfowl I\u0027m rephrasing this ticket. ** Further below you\u0027ll find the original issue report so that you can still follow how I end up with the request.\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\nFeatures of \u0060WebApplicationFactory\u0060 are not available when using \u0060TestServer\u0060 directly.\r\nBasically it would be nice to have features of \u0060WebApplicationFactory\u0060 without it calling the application\u0027s entry point:\r\n\r\n- HttpClient with\r\n  - cookie support (\u0060CookieContainerHandler\u0060)\r\n  - redirect support (\u0060RedirectHandler\u0060)\r\n  - [tracking](https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.Testing/src/WebApplicationFactory.cs#L31) and disposing of created \u0060HttpClients\u0060\r\n- Setting up the content root (to point to the assembly/project of a type of my choice).\r\n  (maybe this is insensible because it\u0027s already easy, I haven\u0027t investigated this closely)\r\n- .. other features I forgot...?\r\n\r\nSo basically I propose to move all the stuff from the \u0060WebApplicationFactory\u0060 to \u0060TestServer\u0060 except what relates to calling the application\u0027s entry point.\r\n\r\n## Original Issue\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI was trying to create a TestServer for a .net 7 Web App.\r\n\u0060WebApplicationFactory\u0060 \u0022works\u0022 but it\u0027s complicated because it\u0027s basically running the entry point of the real application.\r\nThat means, for tests now I have to replace relevant parts to make sure they don\u0027t use the \u0022real thing\u0022. Depending on how program.cs is written I\u0027ll have to fulfill dependencies (on config values, for example), even though they are never relevant for the the test system (apart by reason of being referenced in program.cs - but later being replaced).\r\nI don\u0027t think this ever was good practice, so I\u0027ll refrain from arguing this further at the moment (if you ask me to, I will).\r\n\r\nThis somewhat relates to https://github.com/dotnet/aspnetcore/issues/33846, because a conclusion there is as well that the implementation of Microsoft.AspNetCore.Mvc.Testing should be split into (externally) reusable parts.\r\n\r\nIt also relates to issues like https://github.com/dotnet/aspnetcore/issues/38335, because having a simple alternative to \u0060WebApplicationFactory\u0060 would obviate the need for \u0060DeferredHostBuilder\u0060 and thus get rid of the problems it brings.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nAfter a few hours of reading the source code of  Microsoft.AspNetCore.Mvc.Testing, debugging it and trial \u0026 error I came up with the following (for xUnit).\r\nIt contains a bit of source code copied from Microsoft.AspNetCore.Mvc.Testing (which I would like to prevent).\r\n\r\nThis is how it looks:\r\n\r\n### Program.cs\r\n\r\n    var builder = WebApplication.CreateBuilder(args);\r\n\r\n    var config = /* reading the config */;\r\n\r\n    ConfigureApplication( // this is reused in tests\r\n        builder,\r\n        config);\r\n\r\n    var app = builder.Build();\r\n\r\n    ConfigurePipeline(app);\r\n\r\n    app.Run();\r\n\r\n## xUnit Fixture\r\n\r\n### Base Class\r\n\r\nThis is basically what should be provided by Microsoft.AspNetCore.Mvc.Testing. Of course it would be fine if it would not implement xUnit\u0027s \u0060IAsyncLifetime\u0060 interface. Also, currently this is missing a few of the features which are part of Microsoft.AspNetCore.Mvc.Testing.\r\n\r\n    using Microsoft.AspNetCore.Builder;\r\n    using Microsoft.AspNetCore.Hosting;\r\n    using Microsoft.AspNetCore.Hosting.Server;\r\n    using Microsoft.AspNetCore.Mvc.Testing.Handlers;\r\n    using Microsoft.AspNetCore.TestHost;\r\n    using Microsoft.Extensions.DependencyInjection;\r\n    using Microsoft.Extensions.Hosting;\r\n\r\n    namespace WebApiServer.SystemTests;\r\n\r\n    public abstract class AbstractTestServerFixture :\r\n        IAsyncLifetime\r\n    {\r\n        private readonly CancellationTokenSource cancellationTokenSource;\r\n        private readonly List\u003CHttpClient\u003E clients;\r\n        private WebApplication? app;\r\n        private TestServer? server;\r\n\r\n        protected AbstractTestServerFixture()\r\n        {\r\n            cancellationTokenSource = new();\r\n            clients = new();\r\n        }\r\n\r\n        async Task IAsyncLifetime.InitializeAsync()\r\n        {\r\n            var builder = WebApplication.CreateBuilder(\r\n                new WebApplicationOptions\r\n                {\r\n                    EnvironmentName = Environments.Development\r\n                });\r\n            builder.WebHost\r\n                .UseShutdownTimeout(TimeSpan.FromSeconds(5))\r\n                .UseTestServer();\r\n            \r\n            await ConfigureApplication(builder);\r\n\r\n            app = builder.Build();\r\n            \r\n            await ConfigurePipeline(app);\r\n\r\n            server = (TestServer)app.Services.GetRequiredService\u003CIServer\u003E();\r\n            \r\n            await app.StartAsync(cancellationTokenSource.Token);\r\n        }\r\n\r\n        protected abstract Task ConfigureApplication(WebApplicationBuilder builder);\r\n\r\n        protected abstract Task ConfigurePipeline(WebApplication app);\r\n\r\n        async Task IAsyncLifetime.DisposeAsync()\r\n        {\r\n            foreach (var client in clients)\r\n            {\r\n                client.Dispose();\r\n            }\r\n            \r\n            cancellationTokenSource.Cancel();\r\n\r\n            app?.StopAsync(TimeSpan.FromSeconds(30));\r\n            await (app?.DisposeAsync() ?? ValueTask.CompletedTask);\r\n            server?.Dispose();\r\n        }\r\n\r\n        public HttpClient CreateClient()\r\n        {\r\n            return CreateClientInternal(\r\n                new RedirectHandler(7),\r\n                new CookieContainerHandler());\r\n        }\r\n\r\n\r\n        // MIT License\r\n        // loosely based on the source code of https://www.nuget.org/packages/Microsoft.AspNetCore.Mvc.Testing\r\n        // found at https://github.com/dotnet/aspnetcore/tree/main/src/Mvc/Mvc.Testing/src\r\n        // (version at the time of writing: https://github.com/dotnet/aspnetcore/tree/cbb4916ecc63785267a750a78b42f3a769230509/src/Mvc/Mvc.Testing/src)\r\n        private HttpClient CreateClientInternal(\r\n            params DelegatingHandler[] handlers)\r\n        {\r\n            HttpClient client;\r\n            if (handlers.Length == 0)\r\n            {\r\n                client = server!.CreateClient();\r\n            }\r\n            else\r\n            {\r\n                for (var i = handlers.Length - 1; i \u003E 0; i--)\r\n                {\r\n                    handlers[i - 1].InnerHandler = handlers[i];\r\n                }\r\n\r\n                var serverHandler = server!.CreateHandler();\r\n                handlers[^1].InnerHandler = serverHandler;\r\n\r\n                client = new HttpClient(handlers[0]);\r\n            }\r\n\r\n            clients.Add(client);\r\n\r\n            client.BaseAddress = server.BaseAddress;\r\n\r\n            return client;\r\n        }\r\n    }\r\n\r\n### Concrete Fixture Class\r\n\r\n    using Microsoft.AspNetCore.Builder;\r\n    using Microsoft.Extensions.Configuration;\r\n    using Microsoft.Extensions.Hosting;\r\n    using Xunit.Abstractions;\r\n\r\n    namespace WebApiServer.SystemTests;\r\n\r\n    public class WebApiServerFixture :\r\n        AbstractTestServerFixture\r\n    {\r\n        protected override Task ConfigureApplication(\r\n            WebApplicationBuilder builder)\r\n        {\r\n            var config = /* your test config */;\r\n        \r\n            Program.ConfigureApplication(\r\n                builder,\r\n                config);\r\n            \r\n            return Task.CompletedTask;\r\n        }\r\n\r\n        protected override Task ConfigurePipeline(\r\n            WebApplication app)\r\n        {\r\n            Program.ConfigurePipeline(app);\r\n\r\n            return Task.CompletedTask;\r\n        }\r\n    }\r\n\r\n\r\n## Test\r\n\r\n    namespace WebApiServer.SystemTests;\r\n\r\n    public class OAuthTests :\r\n        IClassFixture\u003CWebApiServerFixture\u003E\r\n    {\r\n        private readonly WebApiServerFixture server;\r\n\r\n        public OAuthTests(WebApiServerFixture server)\r\n        {\r\n            this.server = server;\r\n        }\r\n\r\n        [Fact]\r\n        public async Task SomeTest()\r\n        {\r\n            var client = server.CreateClient();\r\n\r\n            var response = await client.GetAsync(\u0022not/an/existing/route\u0022);\r\n\r\n            response.EnsureSuccessStatusCode(); // Status Code 200-299\r\n        }\r\n    }\r\n\r\n### Additional context\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85X5unn",
        "parentId": null,
        "author": "davidfowl",
        "content": "A couple of us have been discussing a better version of WebApplicationFactory and this particular approach seems fine. Of course, by default it would still run the entry point if you pointed it at program and didn\u0027t override those 2 calls, but I like this model is a pretty explicit way to handle the current problems we have running the application entry point.\r\n\r\nThe extra ceremony is super unfortunate though (but maybe warranted in this case?), I assume you have a program class with those 2 methods so that they can be called from the test. \r\n\r\n\u0060\u0060\u0060C#\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nawait ConfigureApplication(builder);\r\n\r\nvar app = builder.Build();\r\n\r\nawait ConfigurePipeline(app);\r\n\r\napp.Run();\r\n\r\npublic partial class Program\r\n{\r\n    public static Task ConfigureBuilderAsync(WebApplicationBuilder builder)\r\n    {\r\n    }\r\n\r\n    public static Task ConfigureApplicatonAsync(WebApplication app)\r\n    {\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nPS, not sure why the configuration needs to be passed into \u0060ConfigureBuilderAsync\u0060.",
        "createdAt": "2023-03-18T06:48:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47255#issuecomment-1474750951"
      },
      {
        "id": "IC_kwDOAQzde85X8HK3",
        "parentId": null,
        "author": "BrunoJuchli",
        "content": "@davidfowl\r\n\r\nThanks for your feedback.\r\nPersonally I would prefer it not to run the entry point because then how could I opt out of parts of it?\r\nIf overriding \u0060ConfigureBuilderAsync\u0060 and \u0060ConfigureApplicationAsync\u0060 would achieve that, that would be ok. But personally I don\u0027t see a nice way to do so. I also think using a convention (looking for a method named \u0060ConfigureBuilderAsync\u0060 on \u0060Program\u0060, for example) here doesn\u0027t make sense. IMO conventions make sense when you repeat something many times in your app, but this would be a zero or once thing, so I would much rather the test tooling would be explicit about accepting/requiring what (pass in a delegate taking a \u0060WebApplicationBuilder\u0060, for example). Also, it would force a specific interface on me - and maybe I need to pass in different information than that interface envisions? I wouldn\u0027t want to use static variables to circumvent this...\r\n\r\nRegarding the configuration: I don\u0027t like to use the same config \u0022interface\u0022 in test as in production. In production, the app is configured via json files and environment variables. In Testing, I just instanciate config-classes as needed (something like a \u0060CassandraSettings\u0060 record, for example). No point in serializing that stuff to json as the contents differ from the one used in production, so using a JSON would not prove anything about the SUT.\r\n\r\nThat also means that IMO it\u0027s not necessary for the test-infrastructure to pass along config to \u0022my\u0022 code separately, it should just leave it up to me how I want to deal with configuration, and not demand a specific interface and/or design in my Program.cs\r\n\r\nOr to put it in another words: give me the freedom to do whatever I want while making it easy to create a \u0060TestServer\u0060 on asp.net 6\u002B, reusing what ever parts of the production system I like to...",
        "createdAt": "2023-03-19T19:35:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47255#issuecomment-1475375799"
      },
      {
        "id": "IC_kwDOAQzde85YLx1h",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Or to put it in another words: give me the freedom to do whatever I want while making it easy to create a TestServer on asp.net 6\u002B, reusing what ever parts of the production system I like to...\r\n\r\nYou can already do this today without WebApplicationFactory.\r\n\r\nApp.csproj\r\n\r\n\u0060\u0060\u0060C#\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nawait ConfigureBuilderAsync(builder);\r\n\r\nvar app = builder.Build();\r\n\r\nawait ConfigureApplicatonAsync(app);\r\n\r\napp.Run();\r\n\r\npublic partial class Program\r\n{\r\n    public static Task ConfigureBuilderAsync(WebApplicationBuilder builder)\r\n    {\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n    public static Task ConfigureApplicatonAsync(WebApplication app)\r\n    {\r\n        app.MapGet(\u0022/\u0022, () =\u003E \u0022Hello World\u0022);\r\n        return Task.CompletedTask;\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nTest.csproj\r\n\r\n\u0060\u0060\u0060C#\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.TestHost;\r\n\r\nnamespace TestProject1;\r\n\r\npublic class UnitTest1\r\n{\r\n    [Fact]\r\n    public async Task Test1()\r\n    {\r\n        var builder = WebApplication.CreateBuilder();\r\n\r\n        builder.WebHost.UseTestServer();\r\n\r\n        await Program.ConfigureBuilderAsync(builder);\r\n\r\n        var app = builder.Build();\r\n\r\n        await Program.ConfigureApplicatonAsync(app);\r\n\r\n        await app.StartAsync();\r\n\r\n        var client = app.GetTestClient();\r\n\r\n        var data = await client.GetStringAsync(\u0022/\u0022);\r\n\r\n        Assert.Equal(\u0022Hello World\u0022, data);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nWebApplicationFactory is useful for a couple of things:\r\n- Setting up the content root to point at the main project to load configuration files and static files correctly\r\n- Calling the application\u0027s entry point\r\n\r\nYou can use the test server manually in your tests and call into the parts of your program that you want to test since it seems like you\u0027re not using those features.",
        "createdAt": "2023-03-22T12:24:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47255#issuecomment-1479482721"
      },
      {
        "id": "IC_kwDOAQzde85YL_9a",
        "parentId": null,
        "author": "BrunoJuchli",
        "content": "\u003E You can already do this today without \u0060WebApplicationFactory\u0060.\r\n\r\nOh, I never noticed these extension methods... I read several posts on the topic but all but one was only about using \u0060WebApplicationFactory\u0060, the other one was about why one has to move from \u0060TestServer\u0060 to \u0060WebApplicationFactory\u0060.\r\n\r\nHowever I just tried it out and it doesn\u0027t work for me:\r\n\r\n\u003E \r\n\u003E WebApplicationFactory is useful for a couple of things:\r\n\u003E \r\n\u003E     * Setting up the content root to point at the main project to load configuration files and static files correctly\r\n\u003E     * Calling the application\u0027s entry point\r\n\u003E \r\n\r\nActually there\u0027s also differences in the test-\u0060HttpClient\u0060. The \u0060HttpClient\u0060 created via \u0060WebApplicationFactory:\r\n- supports redirects (\u0060RedirectHandler\u0060)\r\n- supports cookies (\u0060CookieContainerHandler\u0060)\r\n- is tracked/disposed by \u0060WebApplicationFactory\u0060 (this one if I remember correctly)\r\n\r\nAnd in **my case I am relying on the cookie feature**.\r\n\r\nSo I guess I would rephrase this ticket to:\r\n\r\n- move the HttpClient functionality from the \u0060WebApplicationFactory\u0060 to \u0060TestServer\u0060\r\n- (possibly make it easier to change the content root of \u0060TestServer\u0060 - but not auto detecting it. I haven\u0027t looked into it yet)\r\n- secondary goal: make the stuff more discoverable. But I guess that\u0027s hard to to fit with the current design where we configure the server and then later the server instanciates stuff itself.\r\n  Simplest syntax I could envision would be \u0060TestServer testServer = app.UseTestServer()\u0060 But this goes against current design of lifecycle of components. So maybe a pattern like this would be feasible (just a rough idea, I\u0027m sure it can be refined):\r\n\r\n      ServiceTicket\u003CTestServer\u003E testServerTicket = app.UseTestServer();\r\n      \r\n      app.StartAsync(x =\u003E x\r\n         .Ticket(\r\n             testServerTicket, out TestServer testServer));\r\n  the idea here being that when we add a component to the app builder we get back a \u0022promise\u0022 (ticket) that when the app successfully starts this components will be created. So then we pass on this ticket to the \u0060StartAsync\u0060method which exchanges it for the actual component.",
        "createdAt": "2023-03-22T13:08:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47255#issuecomment-1479540570"
      },
      {
        "id": "IC_kwDOAQzde85hGU5Y",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-07-10T14:08:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47255#issuecomment-1629048408"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85hUiSK",
    "title": "RDG does not support generic types from outer scope",
    "url": "https://github.com/dotnet/aspnetcore/issues/47338",
    "createdAt": "2023-03-20T19:59:58Z",
    "lastUpdated": "2024-10-28T16:41:22Z",
    "body": "Given the code:\r\n\r\n\u0060\u0060\u0060csharp\r\npublic static void TestGenericParam\u003CTUser\u003E(IEndpointRouteBuilder app) where TUser : class\r\n{\r\n    app.MapPost(\u0022/test-param\u0022, ([FromServices] UserManager\u003CTUser\u003E userManager) =\u003E { });\r\n}\r\n\r\npublic static void TestGenericResponse\u003CTUser\u003E(IEndpointRouteBuilder app) where TUser : new()\r\n{\r\n    app.MapPost(\u0022/test-return\u0022, () =\u003E new TUser());\r\n}\r\n\u0060\u0060\u0060\r\n\r\nRDG will generate code that fails to compile because \u0060TUser\u0060 is undefined. As a short-term mitigation, we can skip generating \u0060MapPost\u0060 and similar methods when we see an open generic parameter in the delegate signature. Long term, we can look at flowing the generic parameters through the \u0060Map\u0060 methods we generate which can then hopefully be inferred.\r\n\r\n\u0060\u0060\u0060\r\nGeneratedRouteBuilderExtensions.g.cs(73,85): error CS0246: The type or namespace name \u0027TUser\u0027 could not be found (are you missing a using directive or an assembly reference?)\r\nGeneratedRouteBuilderExtensions.g.cs(88,33): error CS0246: The type or namespace name \u0027TUser\u0027 could not be found (are you missing a using directive or an assembly reference?)\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060csharp\r\n        internal static global::Microsoft.AspNetCore.Builder.RouteHandlerBuilder MapPost(\r\n            this global::Microsoft.AspNetCore.Routing.IEndpointRouteBuilder endpoints,\r\n            [global::System.Diagnostics.CodeAnalysis.StringSyntax(\u0022Route\u0022)] string pattern,\r\n            global::System.Action\u003Cglobal::Microsoft.AspNetCore.Identity.UserManager\u003CTUser\u003E\u003E handler, // \u003C---- Error!\r\n            [global::System.Runtime.CompilerServices.CallerFilePath] string filePath = \u0022\u0022,\r\n            [global::System.Runtime.CompilerServices.CallerLineNumber]int lineNumber = 0)\r\n        {\r\n// ...\r\n                            handler(ic.GetArgument\u003Cglobal::Microsoft.AspNetCore.Identity.UserManager\u003CTUser\u003E\u003E(0)!);\r\n// ... \r\n                        var userManager_local = httpContext.RequestServices.GetRequiredService\u003CMicrosoft.AspNetCore.Identity.UserManager\u003CTUser\u003E\u003E();\r\n// ...\r\n                    var handler = (Func\u003CTUser\u003E)del;\r\n// ...\r\n                    var jsonTypeInfo =  (JsonTypeInfo\u003CTUser\u003E)serializerOptions.GetTypeInfo(typeof(TUser));\r\n\u0060\u0060\u0060",
    "upvotes": 2,
    "labels": [
      "bug",
      "feature-rdg",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85YvyMq",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-03-29T16:25:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47338#issuecomment-1488921386"
      },
      {
        "id": "IC_kwDOAQzde85a2Hfk",
        "parentId": null,
        "author": "halter73",
        "content": "FWIW, I worked around this in \u0060MapIdentityApi\u003CTUser\u003E\u0060 by injecting \u0060IServiceProvider\u0060 instead of \u0060UserManager\u003CTUser\u003E\u0060 the and calling \u0060GetRequiredService\u003CUserManager\u003CTUser\u003E\u003E()\u0060 inside the body of the route handler.",
        "createdAt": "2023-04-26T22:56:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47338#issuecomment-1524135908"
      },
      {
        "id": "IC_kwDOAQzde85cgS-E",
        "parentId": null,
        "author": "captainsafia",
        "content": "I investigated what it would look like to add support for this but ultimately believe that it should be done after https://github.com/dotnet/aspnetcore/issues/48289 and https://github.com/dotnet/roslyn/pull/68218 are resolved.\r\n\r\nA current limitation in the interceptors feature is that it does _not_ support intercepting methods with generic type arguments. This gives us three options with how to handle this moving forward:\r\n\r\n- Implement support for endpoints that capture type parameters using overload resolution semantics and use interceptors for other endpoints. This is the least ideal option, because although we end up supporting this scenario, we do so at the cost of a straightforward generator implementation and a less robust interceptors API.\r\n- Add support for intercepting generic methods in the interceptors feature and leverage that  in the implementation. This is the ideal scenarios as it means that our source generator can rely on one strategy for intercepting method calls (using the interceptors feature) and the interceptors feature is made more robust.\r\n- Do not support this feature (for now maybe).\r\n\r\nMy preference is the 2nd, 3rd, and 1st options in that order. I\u0027d like to move us away from a world where we ship a generator that has two different interception strategies that we need to support for the lifetime of 8.0. ",
        "createdAt": "2023-05-17T19:58:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47338#issuecomment-1551970180"
      },
      {
        "id": "IC_kwDOAQzde85eJZqU",
        "parentId": null,
        "author": "halter73",
        "content": "Even if https://github.com/dotnet/roslyn/pull/68218 is resolved, I do not think it will address our issue. I explain why in https://github.com/dotnet/roslyn/pull/68218/files#r1220428975, but it mostly boils down to that proposal being about intercepting methods that are already generic rather than introducing generic parameters. And even if we could change the generic arity, we\u0027d then also need to change the handler parameter type from \u0060Delegate\u0060 to something like \u0060Action\u003CUserManager\u003CTUser\u003E\u003E\u0060 for type inference to work. That part in particular feels like it might be a big ask.\r\n\r\nIn any case, it doesn\u0027t look like any sort of generic interceptor support is planned for .NET 8. Is the plan for preview6 to have RDG skip over delegates with generic types in their signature and emit a warning?",
        "createdAt": "2023-06-06T22:10:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47338#issuecomment-1579522708"
      },
      {
        "id": "IC_kwDOAQzde85h7Emd",
        "parentId": null,
        "author": "captainsafia",
        "content": "Moving this to the backlog. For preview7, we fixed this so that static codegen does not happen for these codepaths. We\u0027ll need to fix the underlying issues in the interceptors feature for .NET 9.",
        "createdAt": "2023-07-19T23:04:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47338#issuecomment-1642875293"
      },
      {
        "id": "IC_kwDOAQzde85h7Ep-",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-07-19T23:04:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47338#issuecomment-1642875518"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85h7-db",
    "title": "[Analyzer] Prefer HttpRequest.ReadFormAsync over HttpRequest.Form",
    "url": "https://github.com/dotnet/aspnetcore/issues/47460",
    "createdAt": "2023-03-28T02:52:55Z",
    "lastUpdated": "2024-02-13T01:38:52Z",
    "body": "## Background and Motivation\r\n\r\n\u0060HttpRequest.Form\u0060 is a blocking API (it reads the request body which may not be available yet). Using it can cause thread exhaustion and server throughput problems.\r\n\r\n\u0060HttpRequest.Form\u0060 is confusing to people as similar APIs such \u0060HttpRequest.QueryString\u0060, \u0060HttpRequest.Cookies\u0060, \u0060HttpRequest.Headers\u0060, etc, are safe to use.\r\n\r\n## Proposed Analyzer\r\n\r\n### Analyzer Behavior and Message\r\n\r\nUsing \u0060HttpRequest.Form\u0060 should generate a warning. There are some cases where it is safe to use, so we need to figure out how broad to make the warning.\r\n\r\nOne option could be:\r\n* API used inside an async method = warning\r\n* API used inside a sync method = info\r\n\r\nSee discussion at https://github.com/dotnet/aspnetcore/issues/44390#issuecomment-1269279517 for more info.\r\n\r\n\u003C!--\r\nAnalyzer categories are derived from the categories documented in https://learn.microsoft.com/dotnet/fundamentals/code-analysis/categories\r\nTo select a category, review each category\u0027s description and select the best category based on the functionality of your analyzer.\r\n\r\nAnalyzer severity levels are documented in https://learn.microsoft.com/visualstudio/code-quality/use-roslyn-analyzers#configure-severity-levels\r\nReview the description to observe how the level set on the analyzer will affect build-time and editor behavior and select the best\r\nlevel for the task.\r\n--\u003E\r\n\r\n### Category\r\n\r\n- [ ] Design\r\n- [ ] Documentation\r\n- [ ] Globalization\r\n- [ ] Interoperability\r\n- [ ] Maintainability\r\n- [ ] Naming\r\n- [x] Performance\r\n- [ ] Reliability\r\n- [ ] Security\r\n- [ ] Style\r\n- [ ] Usage\r\n\r\n### Severity Level\r\n\r\n- [ ] Error\r\n- [x] Warning (async method?)\r\n- [x] Info (sync method?)\r\n- [ ] Hidden\r\n\r\n## Usage Scenarios\r\n\r\n\u0060\u0060\u0060csharp\r\npublic Task\u003CResult\u003E SaveProduct()\r\n{\r\n    var productName = Request.Form[\u0022product_name\u0022]; // WARNING HERE\r\n    _repository.Add(new Product { Name = productName });\r\n    await _repository.SaveAsync();\r\n    return SuccessResult();\r\n}\r\n\u0060\u0060\u0060\r\n\r\n## Risks\r\n\r\n\u0060HttpRequest.Form\u0060 is safe if the form has already been loaded. People who know and rely on that behavior and like the terseness of \u0060HttpRequest.Form\u0060 would be impacted. They could either suppress the analyzer or assign the form to a local variable:\r\n\r\n\u0060\u0060\u0060csharp\r\npublic Task\u003CResult\u003E SaveProduct()\r\n{\r\n    var form = Request.ReadFormAsync();\r\n    var productName = form[\u0022product_name\u0022];\r\n    var productPrice = form[\u0022product_price\u0022];\r\n    // etc\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u003C!--\r\nPlease mention any risks that to your knowledge the API proposal might entail, such as breaking changes, performance regressions, etc.\r\n--\u003E\r\n",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "api-suggestion",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85Yp-_q",
        "parentId": null,
        "author": "Tratcher",
        "content": "\u003E HttpRequest.Form is safe if the form has already been loaded. People who know and rely on that behavior and like the terseness of HttpRequest.Form would be impacted.\r\n\r\nThis is why we haven\u0027t attempted this in the past. I don\u0027t think an analyzer can reliably detect when Form is safe or not.\r\n\r\nAlternative: Change the runtime behavior instead so Form throws instead of doing unsafe sync over async. Include an appcontext switch for back-compat. There should be a property/method you can call to see if the form was read to avoid the exception.",
        "createdAt": "2023-03-28T18:19:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47460#issuecomment-1487400938"
      },
      {
        "id": "IC_kwDOAQzde85hGbUC",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-07-10T14:19:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47460#issuecomment-1629074690"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85iJiuY",
    "title": "Build errors coming from RequestDelegateGenerator generated code instead of my code",
    "url": "https://github.com/dotnet/aspnetcore/issues/47488",
    "createdAt": "2023-03-29T23:18:46Z",
    "lastUpdated": "2024-03-01T22:42:37Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nUsing the RequestDelegateGenerator in an app that is missing using statements appears to be hiding the real build errors in my code and masking them with build errors from the generated code.\n\n### Expected Behavior\n\nI expect to get a build error in my own code because I am missing the commented out \u0060using\u0060 at the top of the C# file.\n\n### Steps To Reproduce\n\n\u0060dotnet build\u0060 the following app:\r\n\r\n\u0060\u0060\u0060C#\r\n//using System.Security.Claims;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddAuthentication().AddJwtBearer();\r\nbuilder.Services.AddAuthorization();\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022/\u0022, () =\u003E \u0022Hello, World!\u0022);\r\napp.MapGet(\u0022/secret\u0022, (ClaimsPrincipal user) =\u003E $\u0022Hello {user.Identity?.Name}. My secret\u0022)\r\n\u00A0\u00A0 .RequireAuthorization();\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060xml\r\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk.Web\u0022\u003E\r\n\r\n  \u003CPropertyGroup\u003E\r\n    \u003CTargetFramework\u003Enet8.0\u003C/TargetFramework\u003E\r\n    \u003CNullable\u003Eenable\u003C/Nullable\u003E\r\n    \u003CImplicitUsings\u003Eenable\u003C/ImplicitUsings\u003E\r\n    \u003CPublishAot\u003Etrue\u003C/PublishAot\u003E\r\n    \u003CEnableRequestDelegateGenerator\u003Etrue\u003C/EnableRequestDelegateGenerator\u003E\r\n  \u003C/PropertyGroup\u003E\r\n\r\n  \u003CItemGroup\u003E\r\n    \u003CPackageReference Include=\u0022Microsoft.AspNetCore.Authentication.JwtBearer\u0022 Version=\u00228.0.0-preview.2.23153.2\u0022 /\u003E\r\n  \u003C/ItemGroup\u003E\r\n\r\n\u003C/Project\u003E\r\n\u0060\u0060\u0060\r\n\r\nI am only getting errors for generated code:\r\n\r\n\u0060\u0060\u0060\r\n\u276F dotnet build\r\nMSBuild version 17.6.0-preview-23174-01\u002Be7de13307 for .NET\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\nC:\\dotnet\\sdk\\8.0.100-preview.4.23179.4\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(287,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [C:\\DotNetTest\\Net8Web\\Net8Web.csproj]\r\nC:\\DotNetTest\\Net8Web\\Microsoft.AspNetCore.Http.RequestDelegateGenerator\\Microsoft.AspNetCore.Http.RequestDelegateGenerator.RequestDelegateGenerator\\GeneratedRouteBuilderExtensions.g.cs(58,33): error CS0246: The type or namespace name \u0027ClaimsPrincipal\u0027 could not be found (are you missing a using directive or an assembly reference?) [C:\\DotNetTest\\Net8Web\\Net8Web.csproj]\r\n\r\nBuild FAILED.\r\n\r\nC:\\DotNetTest\\Net8Web\\Microsoft.AspNetCore.Http.RequestDelegateGenerator\\Microsoft.AspNetCore.Http.equestDelegateGenerator.RequestDelegateGenerator\\GeneratedRouteBuilderExtensions.g.cs(58,33): error CS0246: The type or namespace name \u0027ClaimsPrincipal\u0027 could not be found (are you missing a using directive or an assembly reference?) [C:\\DotNetTest\\Net8Web\\Net8Web.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\u0060\u0060\u0060\n\n### Exceptions (if any)\n\nN/A\n\n### .NET Version\n\n8.0.100-preview.4.23179.4\n\n### Anything else?\n\nN/A",
    "upvotes": 0,
    "labels": [
      "feature-rdg",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85Yx4XE",
        "parentId": null,
        "author": "captainsafia",
        "content": "This might be related to https://github.com/dotnet/aspnetcore/issues/46694.\r\n\r\nWhen you don\u0027t have the using in user code, our symbol formatter emits the following display string for the type:\r\n\r\n\u0060\u0060\u0060\r\nglobal::System.Func\u003CClaimsPrincipal, global::System.String\u003E handler,\r\n\u0060\u0060\u0060\r\n\r\nIt might not be possible to resolve the actual FQN if the using isn\u0027t in-scope when the generator runs but we\u0027ll have to look into this scenario.\r\n\r\nIt _is_ surprising to me that you only get one error from the generated code. At minimum, I\u0027d expect two warnings from user code and generated code but the overload resolution might be impacting the behavior here.",
        "createdAt": "2023-03-29T23:31:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47488#issuecomment-1489470916"
      },
      {
        "id": "IC_kwDOAQzde85cZXtd",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-05-16T18:22:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47488#issuecomment-1550154589"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85kZMCY",
    "title": "Simplify baseline tests for RDG",
    "url": "https://github.com/dotnet/aspnetcore/issues/47897",
    "createdAt": "2023-04-26T05:52:45Z",
    "lastUpdated": "2024-02-13T01:37:08Z",
    "body": "Inspired by the conversation in https://github.com/dotnet/aspnetcore/pull/47741#discussion_r1177021092, now that we have more features in RDG we should consider implementing baseline tests that validate the code generated for more app like scenarios instead of single endpoints.\r\n\r\nFor example, instead of validating the baseline for a single parameter scenario like here:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/726f467f4c0d23b40a937edab56430c3861e73b9/src/Http/Http.Extensions/test/RequestDelegateGenerator/RequestDelegateCreationTests.Arrays.cs#L22-L41\r\n\r\nWe would check in baselines for more complex scenarios (like various combinations of parameters) as well as a single barebones scenario (to validate the unneeded type omission logic).",
    "upvotes": 2,
    "labels": [
      "feature-rdg",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85axHnC",
        "parentId": null,
        "author": "captainsafia",
        "content": "cc: @eerhardt @mitchdenny ",
        "createdAt": "2023-04-26T05:54:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47897#issuecomment-1522825666"
      },
      {
        "id": "IC_kwDOAQzde85jh2Lv",
        "parentId": null,
        "author": "captainsafia",
        "content": "Moving this to RC2. This won\u0027t impact product code.",
        "createdAt": "2023-08-08T15:15:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47897#issuecomment-1669817071"
      },
      {
        "id": "IC_kwDOAQzde85sOCC7",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-11-17T01:47:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47897#issuecomment-1815617723"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85kdCRI",
    "title": "Benchmark and improve shared \u0060RequestDelegateCreation\u0060 test infrastructure",
    "url": "https://github.com/dotnet/aspnetcore/issues/47907",
    "createdAt": "2023-04-26T16:16:17Z",
    "lastUpdated": "2024-02-13T01:37:05Z",
    "body": "The RequestDelegateGenerator uses Roslyn\u0027s testing APIs to validate the compile time and runtime behavior of RDG-enabled apps in tests.\r\n\r\nAs part of the work to share tests between the two implementations, we migrated RDF tests to use the same infrastructure.\r\n\r\nThe benefit of shared testing infrastructure comes with some downsides as we migrate more tests to the shared infrastructure. Some ideas that we can consider to improve test perf:\r\n\r\n- Use a single shared compilation for all unit tests with a unique source file per test\r\n- Remove unneeded baseline asserts to avoid the read/write of baseline text files\r\n- Move the loading of symbols for generated code behind a developer enabled flag like \u0060RegenerateBaselines\u0060\r\n\r\nUpdate: profiling locally suggests that we can save a fair bit by avoiding the multiple calls to \u0060GetCompilationAsync\u0060 and the loading of assembly references into the compilation.",
    "upvotes": 0,
    "labels": [
      "feature-rdg",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85a0brZ",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-04-26T16:16:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47907#issuecomment-1523694297"
      },
      {
        "id": "IC_kwDOAQzde85jh1_U",
        "parentId": null,
        "author": "captainsafia",
        "content": "Moving this to rc2. This is not customer impacting so we shouldn\u0027t need to take this through a servicing call.",
        "createdAt": "2023-08-08T15:15:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47907#issuecomment-1669816276"
      },
      {
        "id": "IC_kwDOAQzde85sOCDy",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-11-17T01:47:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47907#issuecomment-1815617778"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85kroxw",
    "title": "Add JSON Serialize API to support ASP.NET polymorphic serialization",
    "url": "https://github.com/dotnet/aspnetcore/issues/47973",
    "createdAt": "2023-04-28T21:40:01Z",
    "lastUpdated": "2024-02-13T01:36:55Z",
    "body": "## Background and Motivation\r\n\r\nAs described in https://github.com/dotnet/aspnetcore/issues/47548, ASP.NET has some internal logic around how it serializes objects to JSON for Minimal APIs and MVC. When fixing this issue in https://github.com/dotnet/aspnetcore/pull/47859, I noticed that this logic is spread out between:\r\n\r\n* MVC\u0027s SystemTextJsonOutputFormatter\r\n* HttpResultsHelper\r\n* ExecuteHandlerHelper (shared between Http.Extensions and Routing)\r\n* RequestDelegateGenerator generated code\r\n\r\nThe logic for all 4 looks like:\r\n\r\n https://github.com/dotnet/aspnetcore/blob/6d30638626ff0f471f431ae2247ce95480e418ef/src/Shared/RouteHandlers/ExecuteHandlerHelper.cs#L39-L57\r\n\r\nwith the \u0022ShouldUseWith\u0022 logic:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/6d30638626ff0f471f431ae2247ce95480e418ef/src/Shared/Json/JsonSerializerExtensions.cs#L13-L17\r\n\r\nIf users want to have this same serialization behavior, they would have to write that same logic in their app/library. Also, we need to encode this logic in the source generator, which means it isn\u0027t as serviceable because if we need to fix a bug in it, the dev needs to rebuild their app to get the fix.\r\n\r\nWe should come up with an API that we can shared code between these 4 places, and allow customers to serialize objects with the same behavior as how MVC and Minimal APIs does.\r\n\r\n## Proposed API\r\n\r\nTBD\r\n\u003C!--\r\nPlease provide the specific public API signature diff that you are proposing. For example:\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Http;\r\n\r\npublic static class HttpResponseWritingExtensions\r\n{\r\n\u002B    public Task WriteAsync(this HttpResponse response, StringBuilder builder);\r\n}\r\n\u0060\u0060\u0060\r\nYou may find the [Framework Design Guidelines](https://github.com/dotnet/runtime/blob/master/docs/coding-guidelines/framework-design-guidelines-digest.md) helpful.\r\n--\u003E\r\n\r\n## Usage Examples\r\n\r\nTBD\r\n\u003C!--\r\nPlease provide code examples that highlight how the proposed API additions are meant to be consumed.\r\nThis will help suggest whether the API has the right shape to be functional, performant and useable.\r\nYou can use code blocks like this:\r\n\u0060\u0060\u0060csharp\r\n// some lines of code here\r\n\u0060\u0060\u0060\r\n--\u003E\r\n\r\n## Alternative Designs\r\n\r\n\u003C!--\r\nWere there other options you considered, such as alternative API shapes?\r\nHow does this compare to analogous APIs in other ecosystems and libraries?\r\n--\u003E\r\n\r\n## Risks\r\n\r\nThe name of the API is a risk at confusing people what the difference between our existing APIs and this one do.\r\n\r\n______\r\ncc @halter73 @captainsafia @mitchdenny @eiriktsarpalis ",
    "upvotes": 3,
    "labels": [
      "api-suggestion",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85d8cnm",
        "parentId": null,
        "author": "mitchdenny",
        "content": "Interesting comment about serviceability. If someone happens to be using RDG without native AOT I guess they could run into that issue. but in the case of RDG with native AOT the serviceability problem is inevitable.",
        "createdAt": "2023-06-05T06:32:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47973#issuecomment-1576126950"
      },
      {
        "id": "IC_kwDOAQzde85ehFWg",
        "parentId": null,
        "author": "shivangnayar-dev",
        "content": "can i be assigned this issue\r\n",
        "createdAt": "2023-06-10T16:41:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47973#issuecomment-1585730976"
      },
      {
        "id": "IC_kwDOAQzde85f4Qr3",
        "parentId": null,
        "author": "captainsafia",
        "content": "@shivangnayar-dev At the moment, the issue isn\u0027t ready for implementation. The next step is to polish up the requirements here into an API proposal (fill in all the TBD sections) and take it through API review. You\u0027re welcome to help with that process but it would be helpful to have context into the background here...\r\n\r\nI\u0027d recommend checking out the \u0060help-wanted\u0060 label for issues that are more shovel-ready.",
        "createdAt": "2023-06-27T01:52:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47973#issuecomment-1608583927"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85ksqyW",
    "title": "Make ProblemDetailsDefaults public",
    "url": "https://github.com/dotnet/aspnetcore/issues/47978",
    "createdAt": "2023-04-29T07:21:02Z",
    "lastUpdated": "2024-02-13T01:36:53Z",
    "body": "## Background and Motivation\r\n\r\nReplaces https://github.com/dotnet/aspnetcore/issues/47822\r\n\r\nProblem Details (RFC 7807) is a standardized way to communicate details for errors in HTTP Responses.\r\nIn ASP.NET Core this is surfaced by the public type [ProblemDetails](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.problemdetails) and related types. The RFC states, that an URL in \u0060\u0060Type\u0060\u0060 is the canonical way to identify the details, a list of default URLs for the common Status Codes is available in [ProblemDetailsDefaults](https://github.com/dotnet/aspnetcore/blob/main/src/Shared/ProblemDetails/ProblemDetailsDefaults.cs), this type also includes a method to apply defaults to \u0060\u0060ProblemDetails\u0060\u0060, but the type is internal. There is infrastructure available to write serialized ProblemDetails into responses, but it is designed around having access to \u0060\u0060HttpContext\u0060\u0060. \r\nIf a developer wants to use the Problem Details without an active HttpRequest, he can\u0027t apply the nice defaults via the above mentioned type, instead need to maintain their own list and logic. The URLs currently point to the most recent HTTP rfc, this change was done for 8.0 via PR https://github.com/dotnet/aspnetcore/pull/43232\r\n\r\nSo I propose to make the type public.\r\n\r\n## Proposed API\r\n\u0060\u0060\u0060diff\r\n// Microsoft.AspNetCore.Http.Extensions.dll (ProblemDetailsDefaults is currently in multiple assemblies, but they all depend on Http.Extensions)\r\nnamespace Microsoft.AspNetCore.Http;\r\n\r\n- internal static class ProblemDetailsDefaults\r\n\u002B public static class ProblemDetailsDefaults\r\n{\r\n-  public static readonly Dictionary\u003Cint, (string Type, string Title)\u003E Defaults;\r\n\u002B  public static readonly IReadOnlyDictionary\u003Cint, (string Type, string Title)\u003E Defaults;\r\n   public static void Apply(ProblemDetails problemDetails, int? statusCode);\r\n}\r\n\u0060\u0060\u0060\r\nThe type is changed to public, and the type of the static readonly field was changed to IReadOnlyDictionary, to prevent accidental changes.\r\n\r\n## Usage Examples\r\n\u0060\u0060\u0060csharp\r\n\r\nvar pd = new ProblemDetails();\r\nProblemDetailDefaults.Apply(pd, 200);\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\n\r\n@halter73 suggested in https://github.com/dotnet/aspnetcore/issues/47822 that the name \u0060\u0060Apply\u0060\u0060 might not be descriptive enough and/or to add it to the \u0060\u0060ProblemDetails\u0060\u0060 type directly named \u0060\u0060ApplyStatusCodeDefaults\u0060\u0060\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Mvc;\r\n \r\npublic class ProblemDetails\r\n{\r\n\u002B     public void ApplyStatusCodeDefaults(int? statusCode);\r\n}\r\n\r\n\u0060\u0060\u0060\r\n\r\nThere is also the interface \u0060\u0060IProblemDetailsService\u0060\u0060 where the same method could be added:\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Mvc;\r\n \r\npublic interface IProblemDetailsService\r\n{\r\n\u002B     public void ApplyStatusCodeDefaults(ProblemDetails problemDetails, int? statusCode);\r\n}\r\n\r\n\u0060\u0060\u0060\r\n\r\n## Risks\r\n- Making the static type public is the easiest, with few risks as the type is internal at the moment, but it has risks as the type is included in multiple assemblies.\r\n- Adding it to the \u0060\u0060ProblemDetails\u0060\u0060 as a member requires more thought, as there are already derived types of \u0060\u0060ProblemDetails\u0060\u0060 and defaults might mean something else for them, the method might need to be virtual.\r\n- The interface is just for completeness here, as this is a proper breaking change (without some default interface implementation workarounds), while I doubt that many devs supply their own implementation of that interface, I don\u0027t think it is worth it.\r\n\r\n",
    "upvotes": 1,
    "labels": [
      "area-mvc",
      "api-needs-work",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85bIApd",
        "parentId": null,
        "author": "campbellwray",
        "content": "@Tornhoof, I was following your original issue, and was not aware of this:\r\n\r\n\u003E There is infrastructure available to write serialized ProblemDetails into responses, but it is designed around having access to HttpContext.\r\n\r\nWould you mind providing some more information, as I believe I have access to an \u0060HttpContext\u0060 in my implementation.\r\n\r\nCurrently I am creating a \u0060ProblemDetails\u0060 object and using (a public copy of) \u0060ProblemDetailsDefaults\u0060 to add the \u0060Type\u0060 and other details automatically, I was wondering if it might be possible to use an existing language feature to perform this task.\r\n\r\nThanks.",
        "createdAt": "2023-04-29T16:41:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47978#issuecomment-1528826461"
      },
      {
        "id": "IC_kwDOAQzde85bIBRW",
        "parentId": null,
        "author": "Tornhoof",
        "content": "\u003E Would you mind providing some more information, as I believe I have access to an HttpContext in my implementation.\r\n\r\nThere is the afore mentioned \u0060\u0060IProblemDetailsService\u0060\u0060 which takes a \u0060\u0060ProblemDetailsContext\u0060\u0060, this one takes both the \u0060\u0060HttpContext\u0060\u0060 and the \u0060\u0060ProblemDetails\u0060\u0060 and uses \u0060\u0060IProblemDetailsWriter\u0060\u0060 to serialize the details into JSON. See https://github.com/dotnet/aspnetcore/blob/main/src/Http/Http.Extensions/src/DefaultProblemDetailsWriter.cs for details.",
        "createdAt": "2023-04-29T16:57:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47978#issuecomment-1528829014"
      },
      {
        "id": "IC_kwDOAQzde85bJj5D",
        "parentId": null,
        "author": "mitchdenny",
        "content": "Somewhat related to this is an API review that we\u0027ve just created which asks for the ability to make the \u0060\u0060\u0060ProblemDetails\u0060\u0060\u0060 on \u0060\u0060\u0060ProblemDetailsContext\u0060\u0060\u0060 settable:\r\n\r\nhttps://github.com/dotnet/aspnetcore/issues/47633",
        "createdAt": "2023-05-01T01:31:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47978#issuecomment-1529232963"
      },
      {
        "id": "IC_kwDOAQzde85bVbgf",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2023-05-03T01:19:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47978#issuecomment-1532344351"
      },
      {
        "id": "IC_kwDOAQzde85bVcV2",
        "parentId": null,
        "author": "halter73",
        "content": "Thanks for the API proposal!\r\n\r\nI don\u0027t think we\u0027re going to expose the type and title as a \u0060ValueTuple\u0060, but we might expose it if we defined a proper type for it. We\u0027d then need to figure out what to name it though. I\u0027d be tempted to go with \u0060IReadOnlyDictionary\u003Cint, ProblemDetails\u003E\u0060 and leave most of the properties uninitialized, but we can\u0027t put mutable values in there.\r\n\r\nIs exposing the \u0060IReadOnlyDictionary\u0060 important? Or is a method populating an existing \u0060ProblemDetails\u0060 sufficient?",
        "createdAt": "2023-05-03T01:27:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47978#issuecomment-1532347766"
      },
      {
        "id": "IC_kwDOAQzde85bV9tR",
        "parentId": null,
        "author": "Tornhoof",
        "content": "From my POV the method would be enough.",
        "createdAt": "2023-05-03T05:57:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47978#issuecomment-1532484433"
      },
      {
        "id": "IC_kwDOAQzde85cSN_8",
        "parentId": null,
        "author": "halter73",
        "content": "API Review Notes:\r\n\r\n- We still don\u0027t want to expose the type and title as a \u0060ValueTuple\u0060.\r\n- You could just copy the dictionary yourself into your code.\r\n- Would anyone other than @Tornhoof and @campbellwray use this? It\u0027s not clear that they would. Might be nice if you were serializing to something other than the HttpResponse using the writer though.\r\n- Would this lock us into supporting something we want to change in the future? We don\u0027t think so, but you never know.\r\n\r\nAPI needs more interest to warrant the public API change. We were the closest to approving the instance method without the dictionary, but we decided against approving any new API at this time.\r\n\r\n",
        "createdAt": "2023-05-15T17:42:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47978#issuecomment-1548279804"
      },
      {
        "id": "IC_kwDOAQzde85cSODd",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-05-15T17:42:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47978#issuecomment-1548280029"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85lOhKM",
    "title": ".NET 7 UseAuthentication and UserAuthorization ordering not respected when within UseWhen",
    "url": "https://github.com/dotnet/aspnetcore/issues/48098",
    "createdAt": "2023-05-05T23:28:55Z",
    "lastUpdated": "2024-03-01T22:42:38Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen configuring my WebApplication I make use of a UseWhen statement so that auth logic is only applied to endpoints with a specific base path.\r\n\r\nThis worked with ASP.NET Core 6.0 but with 7.0 there are two problems:\r\n1. Auth is applied to all endpoints.\r\n2. Auth middleware runs before all other middleware.\r\n\r\nI believe this to be caused by the new 7.0 feature that automatically calls UseAuthentication and UseAuthorization when AddAuthentication / AddAuthorization are called. I see there is code in place to prevent this if it is detected that UseAuthentication / UseAuthentication have already been called, but this does not appear to take UseWhen into account.\r\n\r\n### Expected Behavior\r\n\r\nAuth middleware is not inserted when already inserted within a UseWhen statement.\r\n\r\n### Steps To Reproduce\r\n\r\n\u0060\u0060\u0060\r\napp.UseWhen(\r\n    httpContext =\u003E httpContext.Request.Path.StartsWithSegments(\u0022/api\u0022),\r\n    subApp =\u003E\r\n    {\r\n        subApp.UseAuthentication();\r\n        subApp.UseAuthorization();\r\n    });\r\n\u0060\u0060\u0060\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.203\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "bug",
      "feature-minimal-hosting",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85bm5D4",
        "parentId": null,
        "author": "Tratcher",
        "content": "@BrennanConroy \uD83D\uDE01 ",
        "createdAt": "2023-05-06T00:03:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48098#issuecomment-1536921848"
      },
      {
        "id": "IC_kwDOAQzde85bm5MS",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "You\u0027re thinking of the wrong change Chris.",
        "createdAt": "2023-05-06T00:03:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48098#issuecomment-1536922386"
      },
      {
        "id": "IC_kwDOAQzde85bm6yD",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "You can probably work around this with\r\n\u0060\u0060\u0060c#\r\napp.Properties[\u0022__AuthenticationMiddlewareSet\u0022] = true;\r\napp.Properties[\u0022__AuthorizationMiddlewareSet\u0022] = true;\r\n\u0060\u0060\u0060",
        "createdAt": "2023-05-06T00:13:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48098#issuecomment-1536928899"
      },
      {
        "id": "IC_kwDOAQzde85bnCuS",
        "parentId": null,
        "author": "UniSnake",
        "content": "Unfortunately the Properties are not public.",
        "createdAt": "2023-05-06T01:21:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48098#issuecomment-1536961426"
      },
      {
        "id": "IC_kwDOAQzde85boF4s",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u0060((IApplicationBuilder)app).Properties[...]\u0060",
        "createdAt": "2023-05-06T22:42:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48098#issuecomment-1537236524"
      },
      {
        "id": "IC_kwDOAQzde85bt2Yh",
        "parentId": null,
        "author": "UniSnake",
        "content": "Thanks for that! I can confirm that I was able to work around the issue with the suggestion.\r\n\r\n\u0060\u0060\u0060\r\nvar app = builder.Build();\r\n((IApplicationBuilder)app).Properties[\u0022__AuthenticationMiddlewareSet\u0022] = true;\r\n((IApplicationBuilder)app).Properties[\u0022__AuthorizationMiddlewareSet\u0022] = true;\r\n...\r\napp.UseWhen(\r\n    httpContext =\u003E httpContext.Request.Path.StartsWithSegments(\u0022/api\u0022),\r\n    subApp =\u003E\r\n    {\r\n        subApp.UseAuthentication();\r\n        subApp.UseAuthorization();\r\n    });\r\n\u0060\u0060\u0060",
        "createdAt": "2023-05-08T17:14:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48098#issuecomment-1538745889"
      },
      {
        "id": "IC_kwDOAQzde85b0rKE",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "@BrennanConroy, @Tratcher is there a bug then here for us to address later?",
        "createdAt": "2023-05-09T16:55:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48098#issuecomment-1540534916"
      },
      {
        "id": "IC_kwDOAQzde85b0tkf",
        "parentId": null,
        "author": "Tratcher",
        "content": "Yes, we should see what we can do to improve this.",
        "createdAt": "2023-05-09T17:02:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48098#issuecomment-1540544799"
      },
      {
        "id": "IC_kwDOAQzde85b8ItJ",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "Thanks @Tratcher.\r\nAs I understand it, a follow-up work is pending on the runtime side then? Moved to that area path and assigned to .NET 8 Planning milestone.",
        "createdAt": "2023-05-10T16:24:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48098#issuecomment-1542490953"
      },
      {
        "id": "IC_kwDOAQzde85b8Ivb",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-05-10T16:24:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48098#issuecomment-1542491099"
      },
      {
        "id": "IC_kwDOAQzde850ZGoK",
        "parentId": null,
        "author": "eg-bernardo",
        "content": "I\u0027m on NET8 and I\u0027m seeing this, which I think may be related:\r\n\r\nthis works as expected:\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme).AddCookie();\r\nbuilder.Services.AddAuthorization(opts =\u003E\r\n{\r\n    var policy = new AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build();\r\n    opts.DefaultPolicy = policy;\r\n    opts.FallbackPolicy = policy;\r\n});\r\n\r\nvar app = builder.Build();\r\n\r\napp.UseAuthentication();\r\napp.UseRouting();\r\napp.UseAuthorization();\r\napp.Map(\u0022/api/hello\u0022, () =\u003E \u0022Hello\u0022).AllowAnonymous();\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\u0060/api/hello\u0060 returns status \u0060200\u0060 with content \u0060Hello\u0060\r\n\r\nbut with\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme).AddCookie();\r\nbuilder.Services.AddAuthorization(opts =\u003E\r\n{\r\n    var policy = new AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build();\r\n    opts.DefaultPolicy = policy;\r\n    opts.FallbackPolicy = policy;\r\n});\r\n\r\nvar app = builder.Build();\r\n\r\napp.Map(\u0022/api\u0022, app =\u003E\r\n{\r\n    app.UseRouting();\r\n    app.UseAuthentication();\r\n    app.UseAuthorization();\r\n    app.UseEndpoints(endpoints =\u003E\r\n    {\r\n        endpoints.Map(\u0022/hello\u0022, () =\u003E \u0022Hello\u0022).AllowAnonymous();\r\n    });\r\n});\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\u0060/api/hello\u0060 returns \u0060302\u0060 with a redirect to \u0060/Account/Login?ReturnUrl=%2Fapi%2Fhello\u0060\r\n\r\nApplying the workaround also makes it work.",
        "createdAt": "2024-02-19T15:45:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48098#issuecomment-1952737802"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85lThI5",
    "title": "Handle \u0060AsParameters\u0060-enabled types with indexers in request delegate creation",
    "url": "https://github.com/dotnet/aspnetcore/issues/48118",
    "createdAt": "2023-05-08T06:25:34Z",
    "lastUpdated": "2024-02-13T01:36:17Z",
    "body": "Follow-up to https://github.com/dotnet/aspnetcore/pull/47914#discussion_r1185483963.\r\n\r\nThe implementation for the \u0060AsParameters\u0060 feature in both RDF and RDG doesn\u0027t currently handle types that contain indexers:\r\n\r\n\u0060\u0060\u0060csharp\r\npublic class ClassWithIndexer\r\n{\r\n    private int[] arr = new int[100];\r\n\r\n    public int this[int i]\r\n    {\r\n        get { return arr[i]; }\r\n        set { arr[i] = value; }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nWe\u0027ll want to explore either:\r\n\r\n- Adding support for this feature\r\n- Explicitly disabling support for types that contain indexers with RDF\r\n\r\nIf we do consider adding support, we may want to tie this with the existing array binding features in RDF.",
    "upvotes": 0,
    "labels": [
      "feature-rdg",
      "area-minimal",
      "feature-rdf"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85cFlRT",
        "parentId": null,
        "author": "amcasey",
        "content": "Don\u0027t forget that indexers can be named, either natively in a language like VB or via an attribute.",
        "createdAt": "2023-05-12T01:17:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48118#issuecomment-1544967251"
      },
      {
        "id": "IC_kwDOAQzde85cJcZ_",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Don\u0027t forget that indexers can be named, either natively in a language like VB or via an attribute.\r\n\r\nGood note! VB is out-of-scope but we should keep the \u0060IndexerNameAttribute\u0060 in mind for this implementation.",
        "createdAt": "2023-05-12T16:13:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48118#issuecomment-1545979519"
      },
      {
        "id": "IC_kwDOAQzde85cJjc8",
        "parentId": null,
        "author": "amcasey",
        "content": "Oh cool, I forgot we didn\u0027t have to think about types from metadata.  That sure makes things easier. \uD83D\uDE04 ",
        "createdAt": "2023-05-12T16:36:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48118#issuecomment-1546008380"
      },
      {
        "id": "IC_kwDOAQzde85h7Er1",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-07-19T23:04:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48118#issuecomment-1642875637"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85lg4FX",
    "title": "Update route analyzer to use FilterSpan when it\u0027s available",
    "url": "https://github.com/dotnet/aspnetcore/issues/48157",
    "createdAt": "2023-05-10T04:46:58Z",
    "lastUpdated": "2024-02-13T01:36:10Z",
    "body": "Recent Roslyn change has made \u0060FilterSpan\u0060 public. This API can be used to improve analysis performance when doing \u0060SemanticModelAnalysisContext\u0060 analysis.\r\n\r\nWe can\u0027t use it until Roslyn is updated (probably during .NET 9).\r\n\r\nSee https://github.com/dotnet/aspnetcore/pull/48105 for more information.",
    "upvotes": 0,
    "labels": [
      "blocked",
      "area-mvc",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85b3xMB",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-05-10T04:47:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48157#issuecomment-1541346049"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85l-G9C",
    "title": "Make RDG handle names that are escaped keywords",
    "url": "https://github.com/dotnet/aspnetcore/issues/48248",
    "createdAt": "2023-05-15T20:30:06Z",
    "lastUpdated": "2024-02-13T01:35:46Z",
    "body": "When we generate code containing user-defined names (e.g. using \u0060typeof\u0060 on the type of a parameter), we need to be careful to generate syntactically valid code in the presence of escaped keywords like \u0060@class\u0060.\r\n\r\n\u003E Ah! I misinterpreted your comment a little bit. I thought your inquiry was around the use of the \u0060@\u0060 prefix on class names in general (which ends up producing something like \u0060typeof(MyClass)\u0060 which is valid) but you were referring to the literal use of \u0060class @class\u0060.\r\n\u003E \r\n\u003E My initial reaction to this is that it\u0027s the kind of edge case that I\u0027d be comfortable not addressing specifically in RDG.\r\n\u003E \r\n\u003E My second reaction is to explore what the implementation complexity would look like with this and see if it is worth pursuing given cost/reward. It might very well be we have to pass a formatter to \u0060ToDisplayString\u0060 here to get the desired behavior.\r\n\u003E \r\n\u003E My third reaction is wondering if the current behavior (compiler errors on generated code) is a valid experience for users who run into these kinds of buggy experiences.\r\n\u003E \r\n\u003E In any case, this is worth tracking in a follow-up issue if you\u0027d like to file one?\r\n\r\n_Originally posted by @captainsafia in https://github.com/dotnet/aspnetcore/pull/47914#discussion_r1194173902_\r\n            ",
    "upvotes": 0,
    "labels": [
      "feature-rdg",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85h7Eym",
        "parentId": null,
        "author": "captainsafia",
        "content": "Moving this to the backlog. I think this is below the cutline for .NET 8 given it\u0027s unlikely for customers to run into this.",
        "createdAt": "2023-07-19T23:05:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48248#issuecomment-1642876070"
      },
      {
        "id": "IC_kwDOAQzde85h7E0P",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-07-19T23:05:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48248#issuecomment-1642876175"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85maqDV",
    "title": "Introduce a more ergonomic way of enabling case-insensitive enum parsing in Minimal API endpoints",
    "url": "https://github.com/dotnet/aspnetcore/issues/48346",
    "createdAt": "2023-05-20T19:27:58Z",
    "lastUpdated": "2025-01-06T11:03:57Z",
    "body": "Basically the same as #45590.\r\nCurrently, the only way to make this work would be to create another type that acts as a wrapper around the enum, just to implement a \u0060TryParse\u0060 method that does case-insensitive parsing for the underlying enum; as @captainsafia described in the aforementioned issue:\r\n\u003E You might want to consider implementing your own TryParse implementation on a wrapper for your MyEnum type that is case-insensitive. See more info at https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/parameter-binding?view=aspnetcore-7.0#tryparse\r\n\r\nBut it goes without saying that this is incredibly ugly.\r\n\r\nSo, either:\r\n- When binding enum parameters in minimal API handlers, use the \u0060Enum.TryParse\u0060 overload that does a case-insensitive comparison. This way the behavior will also be consistent with that of MVC controllers. Or provide a global opt-in option that lets the developer decide.\r\n- Provide a simpler way to customize parameter binding on an individual-parameter-basis for minimal API handlers without having to define a \u0060TryParse\u0060 or \u0060BindAsync\u0060 method on the **type** of the parameter. This is a direly needed feature in general; as you don\u0027t always have access to the type of a parameter in such a way that you can declare a static \u0060TryParse\u0060 or \u0060BindAsync\u0060 method on them (as is effectively the case for enums, or for types that come from third-party libraries), so it should be possible to customize binding for individual parameters in a granular fashion, as opposed to having to modify the types themselves.\r\n\r\nThe second option is of course preferable.",
    "upvotes": 16,
    "labels": [
      "Needs: Design",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85c2DXW",
        "parentId": null,
        "author": "captainsafia",
        "content": "@aradalvand Thanks for filing this issue!\r\n\r\nI see there\u0027s been some conversation in the related issue around customizing parameter binding in minimal APIs. I think this particular aspects needs some design and, to be frank, some more details about the types of granular modifications that need to be made. \r\n\r\nI\u0027ll park this under \u0060Needs Design\u0060 for now given the requirement to flesh this out. I\u0027d be curious to see if you have thoughts on how to tackle this separate from what has been proposed in #35489.",
        "createdAt": "2023-05-22T18:08:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48346#issuecomment-1557673430"
      },
      {
        "id": "IC_kwDOAQzde85c2Dau",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-05-22T18:08:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48346#issuecomment-1557673646"
      },
      {
        "id": "IC_kwDOAQzde85tF-wf",
        "parentId": null,
        "author": "adamijak",
        "content": "You can use [this](https://gist.github.com/adamijak/0ab78a4334f4a8c40b1f971079f3120a) GitHub gist.\r\n\r\nWith example usage:\r\n\u0060\u0060\u0060c#\r\napp.MapGet(\u0022/\u0022, ([FromQuery] EnumBinding\u003CMyEnum\u003E param) =\u003E \r\n{\r\n   MyEnum enumValue = param;\r\n});\r\n\u0060\u0060\u0060",
        "createdAt": "2023-11-28T16:50:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48346#issuecomment-1830284319"
      },
      {
        "id": "IC_kwDOAQzde85tG6FK",
        "parentId": null,
        "author": "captainsafia",
        "content": "@adamijak Thanks for sharing the code sample with folks! This is a good reminder that I should post some updates on #35489 based on some recent things I learned about how we might take advantage of keyed services in our parameter binding layer.",
        "createdAt": "2023-11-28T19:21:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48346#issuecomment-1830527306"
      },
      {
        "id": "IC_kwDOAQzde86SzLmi",
        "parentId": null,
        "author": "jrebagliatti",
        "content": "To add to @adamijak\u0027s [workaround](https://github.com/dotnet/aspnetcore/issues/48346#issuecomment-1830284319) for those that want a proper Swagger documentation, you can add an [schema filter](https://github.com/domaindrivendev/Swashbuckle.AspNetCore/blob/master/README.md#schema-filters) like this one:\n\n\u0060\u0060\u0060c#\n    public class EnumSchemaFilter : ISchemaFilter\n    {\n        public void Apply(OpenApiSchema schema, SchemaFilterContext context)\n        {\n            var type = context.Type;\n\n            if (type == null)\n            {\n                return;\n            }\n\n            if (type.IsGenericType \u0026\u0026 type.GetGenericTypeDefinition() == typeof(EnumBinding\u003C\u003E))\n            {\n                var enumType = type.GetGenericArguments().FirstOrDefault(x =\u003E x.IsEnum);\n\n                if (enumType == null)\n                {\n                    return;\n                }\n\n                var names = Enum.GetNames(enumType);\n\n                if (names == null)\n                {\n                    return;\n                }\n                \n                schema.Type = \u0022string\u0022;\n                schema.Enum = names.OfType\u003Cstring\u003E().Select(x =\u003E new OpenApiString(x)).ToList\u003CIOpenApiAny\u003E();\n            }\n        }\n    }\n\u0060\u0060\u0060\n\n",
        "createdAt": "2024-11-07T17:57:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48346#issuecomment-2462890402"
      },
      {
        "id": "IC_kwDOAQzde86ZWwUh",
        "parentId": null,
        "author": "adamijak",
        "content": "@jrebagliatti @captainsafia I updated the [gist](https://gist.github.com/adamijak/0ab78a4334f4a8c40b1f971079f3120a). Now it  accepts boolean and DateTime types as-well.\n",
        "createdAt": "2025-01-06T11:03:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48346#issuecomment-2572879137"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85nYO6x",
    "title": "RDF emits incorrect code when \u0060ThrowOnBadRequest\u0060 is disabled with AsParameters and null binding",
    "url": "https://github.com/dotnet/aspnetcore/issues/48547",
    "createdAt": "2023-05-31T14:48:21Z",
    "lastUpdated": "2024-05-02T17:27:53Z",
    "body": "Found a bug in RDF that occurs when the following code scenario is in play:\r\n\r\n- \u0060ThrowOnBadRequest\u0060 is disabled\r\n- A parameter with \u0060AsParameters\u0060 is used\r\n- The argument surrogate type contains a parameter that should be bound implicitly from the body\r\n\r\nIn that scenario, the following code is generated:\r\n\r\n\u0060\u0060\u0060\r\n.Block(\r\n    Microsoft.AspNetCore.Http.Generators.Tests.ParametersListWithImplicitFromBody $args_local,\r\n    System.Boolean $wasParamCheckFailure) {\r\n    .Block() {\r\n        .If ($bodyValue == null) {\r\n            .Block() {\r\n                $wasParamCheckFailure = True;\r\n                .Call Microsoft.AspNetCore.Http.RequestDelegateFactory\u002BLog.ImplicitBodyNotProvided(\r\n                    $httpContext,\r\n                    \u0022Todo\u0022,\r\n                    False)\r\n            }\r\n        } .Else {\r\n            .Default(System.Void)\r\n        }\r\n    };\r\n    $args_local = .New Microsoft.AspNetCore.Http.Generators.Tests.ParametersListWithImplicitFromBody(\r\n        $httpContext,\r\n        (Microsoft.AspNetCore.Http.Generators.Tests.TodoStruct)$bodyValue);\r\n    .If (\r\n        $wasParamCheckFailure\r\n    ) {\r\n        .Block() {\r\n            ($httpContext.Response).StatusCode = 400;\r\n            System.Threading.Tasks.Task.CompletedTask\r\n        }\r\n    } .Else {\r\n        .Block() {\r\n            .Call TestMapActions.\u003CMapTestEndpoints\u003Eg__TestAction|0_0($args_local);\r\n            System.Threading.Tasks.Task.CompletedTask\r\n        }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nObserve that if \u0060bodyValue\u0060 evaluates to null, we log an exception related to the requiredness check but attempt to construct the argument surrogate type (\u0060ParametersListWithImplicitFromBody\u0060) anyways with a null value that throws an NRE.\r\n\r\nWhen \u0060ThrowOnBadRequest\u0060 is enabled, the call to \u0060ImplicitBodyNotProvider\u0060 will throw an exception and not fall through to the buggy code.\r\n\r\nWe should be initialized \u0060args_local\u0060 _after_ the \u0060wasParamCheckFailure\u0060 occurs.",
    "upvotes": 0,
    "labels": [
      "area-minimal",
      "feature-rdf"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85ng6OZ",
    "title": "RequireLocalPort and related extensions for IEndpointConventionBuilder",
    "url": "https://github.com/dotnet/aspnetcore/issues/48571",
    "createdAt": "2023-06-01T16:23:26Z",
    "lastUpdated": "2024-07-03T12:09:12Z",
    "body": "## Background and Motivation\r\nThis is basically a continuation of the discussion in #46057 which got closed due to missing author feedback.\r\n\r\nCurrently the asp.net core API surface offers no straight-forward way to restrict access to an endpoint to a specific port or host. In many locations on the net, including Microsoft documentation like [Health-Checks](https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-7.0#require-host) patterns like\r\n\u0060\u0060\u0060csharp\r\napp.MapHealthChecks(\u0022/healthz\u0022)\r\n    .RequireHost(\u0022*:5001\u0022);\r\n\u0060\u0060\u0060\r\nare suggested to enforce a port restriction. However this is an unsafe way to implement such a restriction as host matching is only performed based on the often user controllable Host header of the request. This is especially dangerous as the restriction appears to work when using a benign client like a browser.\r\n\r\nhttps://learn.microsoft.com/en-us/aspnet/core/fundamentals/routing?view=aspnetcore-7.0#host-matching-in-routes-with-requirehost and the extension method documentation in https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.routingendpointconventionbuilderextensions.requirehost?view=aspnetcore-7.0 also do not make it clear that this relies on the potentially user controlled Host header field.\r\n\r\nTo make it easy for users to get correct and safe behavior when trying to restrict access to a specific port, having extension methods to match on \u0060HttpContext.Connection.LocalPort\u0060 would be helpful. A related though probably rarer and more complicated problem would be to want to require connections from a specific ip (or interface) if multiple are bound. The basic ip restriction version could match on \u0060HttpContext.Connection.LocalIpAddress\u0060 . To get full control the ability to match exactly what the server actually [listens on](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.kestrel.core.kestrelserveroptions.listen?view=aspnetcore-7.0) (e.g. could even be a unix domain socket) would be needed.\r\n\r\nI reported the specific health check documentation issue in https://github.com/dotnet/AspNetCore.Docs/issues/29399 and was asked to create a more general issue here.\r\n\r\n## Proposed API\r\nAs suggested in #46057 in addition to improving the documentation on \u0060RequireHost\u0060,  there could be a \u0060RequireLocalPort\u0060 extension method for \u0060IEndpointConventionBuilder\u0060.\r\n\r\nAdditionally a corresponding \u0060RequireLocalIpAddress\u0060 could be added.\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Builder;\r\n\r\npublic static class RoutingEndpointConventionBuilderExtensions\r\n{\r\n\u002B    public static TBuilder RequireLocalPort\u003CTBuilder\u003E(this TBuilder builder, params int[] ports) where TBuilder : IEndpointConventionBuilder { ... };\r\n\u002B    public static TBuilder RequireLocalIpAddress\u003CTBuilder\u003E(this TBuilder builder, params string[] ips) where TBuilder : IEndpointConventionBuilder { ... };\r\n}\r\n\u0060\u0060\u0060\r\n\r\nTo give full control from where a connection is coming from, additional extension methods matching the corresponding listen endpoint possibilities could be added. However I do not think I have enough framework knowledge to propose good and implementable api for these. Maybe something in the direction of:\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Builder;\r\n\r\npublic static class RoutingEndpointConventionBuilderExtensions\r\n{\r\n\u002B    public static TBuilder RequireNetEndPoint\u003CTBuilder\u003E(this TBuilder builder, params System.Net.EndPoint[] socketEndpoint) where TBuilder : IEndpointConventionBuilder { ... };\r\n}\r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet( \u0022/only5001\u0022, () =\u003E\u0022Only reachable on port 5001\u0022)\r\n  .RequireLocalPort(5001);\r\n\r\napp.MapGet( \u0022/onlyloopback\u0022, () =\u003E \u0022Only reachable through loopback\u0022)\r\n  .RequireLocalIpAddress(\u0022127.0.0.1\u0022, \u0022[::1]\u0022);\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060csharp\r\nUnixDomainSocketEndPoint domainSocket = ...;\r\napp.MapGet( \u0022/onlydomainsocket\u0022, () =\u003E \u0022Only reachable on domain socket\u0022)\r\n  .RequireNetEndPoint(domainSocket);\r\n\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\n- To simplify usage something like a \u0060RequireLocalHost\u0060 analog to \u0060RequireHost\u0060 could be introduced that understands things like \u0060localhost:1234\u0060, \u0060*:80\u0060, \u0060127.0.0.1.:*\u0060. However this is easy to confuse with \u0060RequireHost\u0060 and due to the flexible interface it is not so simple to answer what should happen if it were given a DNS name or any other current/future options \u0060RequireHost\u0060 might support.\r\n\r\n- \u0060RequireLocalIpAddress\u0060 could take an actual \u0060IPAddress\u0060 object instead of a string. In practice I think this would just lead to the vast majority of users having to add a \u0060IPAddress.Parse\u0060 into the call. Of course both overloads could be offered.\r\n\r\n- The methods could be abbreviated to \u0060RequirePort\u0060 and \u0060RequireIpAddress\u0060. This makes it harder to understand that this matches a specific part of the \u0060HttpContext.Connection\u0060 and if \u0022remote\u0022 were added later could be slightly harder to understand. On the other hand the \u0022Local\u0022 part might confuse some.\r\n\r\ncc: @guardrex https://github.com/dotnet/AspNetCore.Docs/issues/29399\r\n",
    "upvotes": 5,
    "labels": [
      "api-suggestion",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85dueth",
        "parentId": null,
        "author": "Tratcher",
        "content": "\u003E * \u0060RequireLocalIpAddress\u0060 could take an actual \u0060IPAddress\u0060 object instead of a string. In practice I think this would just lead to the vast majority of users having to add a \u0060IPAddress.Parse\u0060 into the call. Of course both overloads could be offered.\r\n\r\nYes, include both overloads. I expect static instances like IPAddress.Loopback to be commonly used.\r\n\r\nSince the APIs take lists, the names should be plural.",
        "createdAt": "2023-06-01T17:13:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48571#issuecomment-1572465505"
      },
      {
        "id": "IC_kwDOAQzde85duwEb",
        "parentId": null,
        "author": "hacst",
        "content": "\u003E Yes, include both overloads. I expect static instances like IPAddress.Loopback to be commonly used.\r\n\r\nMakes sense. Do I just edit the proposal for that or what is the process?\r\n \r\n\u003E Since the APIs take lists, the names should be plural.\r\n\r\nI oriented myself after the \u0060RequireHost\u0060 which is singular but takes a variable amount of arguments. I assumed the idea was that most callers would only pass one argument and hence the singular is preferrable.",
        "createdAt": "2023-06-01T17:58:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48571#issuecomment-1572536603"
      },
      {
        "id": "IC_kwDOAQzde85dxJJS",
        "parentId": null,
        "author": "davidfowl",
        "content": "RequireLocalPort -\uD83D\uDC4D\uD83C\uDFFE \r\nRequireLocalIpAddress - Why isn\u0027t this hosts, why does it need to be ips?\r\nRequireNetEndPoint - How would this work? ",
        "createdAt": "2023-06-02T05:14:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48571#issuecomment-1573163602"
      },
      {
        "id": "IC_kwDOAQzde85dxeDJ",
        "parentId": null,
        "author": "hacst",
        "content": "\u003E RequireLocalIpAddress - Why isn\u0027t this hosts, why does it need to be ips?\r\n\r\nI did consider it. However as at the \u0022receiving a normal network connection\u0022 level the host is not a thing, something the user might expect to be able to pass for a host like \u0022myhost.com\u0022 would have to be turned into a set of IPs in a predictable way to compare the connection against. Given how name resolution like DNS works and is used (e.g. traffic management) this felt to brittle to me for this API. Is there some precedent in .NET where \u0022host\u0022 is defined and successfully used in such tasks that could solve this?\r\n\r\nLimiting it to IPs otherwise would of course also work. Also being able to specify \u0022localhost\u0022 and have it bind ipv4 and ipv6 loopback with one call like the server does would be useful. E.g. \r\n\u0060\u0060\u0060\r\n x.RequireLocalHost(\u002224.24.24.24:1234\u0022);\r\n y.RequireLocalHost(\u0022*:3456\u0022);\r\n z.RequireLocalHost(\u0022localhost\u0022);\r\n\u0060\u0060\u0060\r\n(note: I do not like that name for the function)\r\n\r\nThe IP based interface on its own seemed well specified and useful as an addition to \u0060.RequireLocalPort\u0060 even if it would overlap with a more \u0022host\u0022 like variant down the line so I thought it would be the better option to propose.\r\n\r\n\u003E RequireNetEndPoint - How would this work?\r\n\r\nAs mentioned this is where my framework knowledge is insufficient to make a good proposal or judge how/whether it would fit into the architecture. The goal would be to be able to restrict an endpoint to whatever the underlying server is actually bound/listens to in the most precise way. In the case of Kestrel it looked like that might be a number of \u0060Net.EndPoint\u0060s though I might very well be mistaken. For things like unix domain sockets this would probably require being able to query the actual EndPoint in some way from the server to be able to pass it, as what is under a specific path might\u0027ve changed in the meantime. Whether this can then be checked where current host matching happens in a portable way I don\u0027t know.\r\n",
        "createdAt": "2023-06-02T06:59:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48571#issuecomment-1573249225"
      },
      {
        "id": "IC_kwDOAQzde85dxjMX",
        "parentId": null,
        "author": "davidfowl",
        "content": "This component works by looking at data from the incoming HttpContext. When you specify RequireHost it looks at the host header. There is no binding information about the endpoint today that flows on the HttpContext. It seems like this feature is trying to filter based on what the listener accepted the connection and subsequently requests (or I\u0027m missing something). IF that is the case, then we should split this into two issues.\r\n\r\n1. Syntax sugar on top of RequireHost (RequireLocalPort).\r\n2. A new feature that requires flowing the binding information into the request so that route matching and filtering can be done on it.\r\n",
        "createdAt": "2023-06-02T07:17:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48571#issuecomment-1573270295"
      },
      {
        "id": "IC_kwDOAQzde85dxszJ",
        "parentId": null,
        "author": "hacst",
        "content": "Sounds reasonable. I wasn\u0027t aware of the implementation complications here. I have no problem dropping/splitting out the binding part. I added it mostly for completion. Do I just remove that part from the proposal or keep it as is while discussing?",
        "createdAt": "2023-06-02T07:52:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48571#issuecomment-1573309641"
      },
      {
        "id": "IC_kwDOAQzde85dxt8p",
        "parentId": null,
        "author": "davidfowl",
        "content": "Lets wait for @Tratcher and others to chime in. I just took a look at what we would need to do to make this possible but I think it requires adding quite a more API than proposed.",
        "createdAt": "2023-06-02T07:56:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48571#issuecomment-1573314345"
      },
      {
        "id": "IC_kwDOAQzde85d0DzI",
        "parentId": null,
        "author": "Tratcher",
        "content": "You don\u0027t need the binding information, HttpContext.Connection.LocalIPAddress/Port should be enough.",
        "createdAt": "2023-06-02T15:28:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48571#issuecomment-1573928136"
      },
      {
        "id": "IC_kwDOAQzde85d0rQn",
        "parentId": null,
        "author": "davidfowl",
        "content": "Is that currently set for unix domain sockets? Is the assumption that we are filtering on the Listen endpoint or the connection endpoint (they aren\u0027t the same right?)",
        "createdAt": "2023-06-02T17:38:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48571#issuecomment-1574089767"
      },
      {
        "id": "IC_kwDOAQzde85d0tOf",
        "parentId": null,
        "author": "Tratcher",
        "content": "No, I wouldn\u0027t expect this to apply to UDS. These would filter out all UDS connections because they lack the required fields.\r\n\r\nThe port will be the same for a binding and a connection and I think that\u0027s the predominant request here. \r\n\r\nIPs are a little fuzzier. You can bind to * and connect to any of the local IPs. You can bind to localhost and connect to IPv4 or 6 loopback. But if you really wanted to filter a route by a specific IP, there\u0027s no reason you couldn\u0027t, I just expect it to be less common than filtering by port.",
        "createdAt": "2023-06-02T17:45:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48571#issuecomment-1574097823"
      },
      {
        "id": "IC_kwDOAQzde85d2Prt",
        "parentId": null,
        "author": "davidfowl",
        "content": "@Tratcher I\u0027m not sure I understand. I think this works for the host name, I don\u0027t see how it works for IP or for any arbitrary transport kestrel could plug in (UDS, Memory, etc). \r\n\r\nThe idea I had was that we would expose another field that describes the **listen endpoint** for the current request and then this could be built on top of that. It also enables scenarios that are hard to make work today (have endpoints that only work for unix domain sockets vs not).",
        "createdAt": "2023-06-03T00:52:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48571#issuecomment-1574501101"
      },
      {
        "id": "IC_kwDOAQzde85proTa",
        "parentId": null,
        "author": "Tratcher",
        "content": "Here\u0027s another health check implementation that could benefit from this:\r\nhttps://github.com/dotnet/aspnetcore/blob/ff789e353981d1e4f812c754d1e1cd05a3da9724/src/Middleware/HealthChecks/src/Builder/HealthCheckApplicationBuilderExtensions.cs#L210-L229",
        "createdAt": "2023-10-20T16:30:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48571#issuecomment-1773044954"
      },
      {
        "id": "IC_kwDOAQzde856Z9HI",
        "parentId": null,
        "author": "hacst",
        "content": "Any way I can help to advance this?",
        "createdAt": "2024-04-13T11:52:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48571#issuecomment-2053624264"
      },
      {
        "id": "IC_kwDOAQzde86De8Sq",
        "parentId": null,
        "author": "schmitch",
        "content": "it would be great if \u0060AddEndpointFilter\u0060 would be able to say, skip this middleware instead of only allowing to short-ciruit the endpoint, than this feature could be emulated via AddEndpointFilter.",
        "createdAt": "2024-07-03T12:09:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48571#issuecomment-2205926570"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85oxU-o",
    "title": "Update API remarks for RoutingEndpointConventionBuilderExtensions.RequireHost to warn about host spoofing",
    "url": "https://github.com/dotnet/aspnetcore/issues/48818",
    "createdAt": "2023-06-14T22:46:39Z",
    "lastUpdated": "2024-02-13T01:33:15Z",
    "body": "AspNetCore.Docs was recently updated to include a warning about port spoofing when using \u0060RoutingEndpointConventionBuilderExtensions.RequireHost\u003CTBuilder\u003E\u0060.\r\n\r\nIssue: https://github.com/dotnet/AspNetCore.Docs/issues/29399\r\nPR: https://github.com/dotnet/AspNetCore.Docs/pull/29463\r\n\r\nIt would be beneficial for a remark with this warning to be added to the XML docs for \u0060RoutingEndpointConventionBuilderExtensions.RequireHost\u003CTBuilder\u003E\u0060 so it appears in the API documentation.",
    "upvotes": 0,
    "labels": [
      "Docs",
      "feature-routing",
      "area-minimal",
      "net8_docathon"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85qO2dJ",
    "title": "Results / TypedResults ignore null values",
    "url": "https://github.com/dotnet/aspnetcore/issues/49107",
    "createdAt": "2023-06-30T10:16:06Z",
    "lastUpdated": "2024-09-19T07:39:02Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen using Minimal APIs with nullable annotations enabled, it is possible to make a delegate that returns a null value for a nullable-annotated type, e.g.\r\n\u0060\u0060\u0060csharp\r\n// Responds 200: \u0022null\u0022\r\napp.MapGet(\u0022/nullable\u0022, T? () =\u003E null);\r\n\u0060\u0060\u0060\r\n\r\nIf the same value is instead wrapped in a \u0060Results\u0060 or \u0060TypedResults\u0060 container, the response body will be empty, e.g.\r\n\u0060\u0060\u0060csharp\r\n// Responds 200: \u0022\u0022\r\napp.MapGet(\u0022/iresult\u0022, IResult () =\u003E Results.Ok\u003CT?\u003E(null));\r\napp.MapGet(\u0022/typed_result\u0022, Ok\u003CT?\u003E () =\u003E TypedResults.Ok\u003CT?\u003E(null));\r\n\u0060\u0060\u0060\r\n\r\nThis means changing an endpoint delegate to use these result wrappers causes a breakage in the API.\r\n\r\n\u0060T\u0060 can be both a value or reference type, the problem still occurs.\r\n\r\n### Expected Behavior\r\n\r\nWrapping a return value in Results / TypedResults of the same status should respond with the exact same body as the value by itself.\r\n\r\nExplicitly setting the status code in an idiomatic way should not cause a breaking change in the API.\r\n\r\n\u0060\u0060\u0060csharp\r\n// Responds 200: \u0022null\u0022\r\napp.MapGet(\u0022/nullable\u0022, T? () =\u003E null);\r\napp.MapGet(\u0022/iresult\u0022, IResult () =\u003E Results.Ok\u003CT?\u003E(null));\r\napp.MapGet(\u0022/typed_result\u0022, Ok\u003CT?\u003E () =\u003E TypedResults.Ok\u003CT?\u003E(null));\r\n\u0060\u0060\u0060\r\n\r\nCurrent behavior is acceptable in case \u0060null\u0060 is an invalid value for the type.\r\n\u0060\u0060\u0060csharp\r\n// Programmer error, T is not nullable. Nasal demons may occur.\r\napp.MapGet(\u0022/\u0022, Ok\u003CT\u003E () =\u003E TypedResults.Ok\u003CT\u003E(null!));\r\n\u0060\u0060\u0060\r\n\r\n### Steps To Reproduce\r\n\r\n\u0060\u0060\u0060csharp\r\nusing Microsoft.AspNetCore.Http.HttpResults;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build();\r\napp.MapGet(\u0022/nullable\u0022, Data? () =\u003E Data.NullInstance);\r\napp.MapGet(\u0022/iresult\u0022, IResult () =\u003E Results.Ok\u003CData?\u003E(Data.NullInstance));\r\napp.MapGet(\u0022/typed_result\u0022, Ok\u003CData?\u003E () =\u003E TypedResults.Ok\u003CData?\u003E(Data.NullInstance));\r\n// Semantically adjacent endpoints, for the sake of discussion\r\napp.MapGet(\u0022/void\u0022, void () =\u003E {});\r\napp.MapGet(\u0022/string\u0022, string () =\u003E \u0022null\u0022);\r\nawait app.StartAsync();\r\n\r\nvar client = new HttpClient { BaseAddress = new Uri(app.Urls.First()), };\r\nvar endpoints = new[] { \u0022/nullable\u0022, \u0022/iresult\u0022, \u0022/typed_result\u0022, \u0022/void\u0022, \u0022/string\u0022, };\r\nforeach (var e in endpoints)\r\n{\r\n    var r = await client.GetAsync(e);\r\n    var s = r.StatusCode;\r\n    var c = await r.Content.ReadAsStringAsync();\r\n    var contentType = r.Content.Headers.ContentType;\r\n    Console.WriteLine($\u0022{e} -\u003E {s} ({contentType}): \u0060{c}\u0060\u0022);\r\n}\r\n\r\nawait app.StopAsync();\r\n\r\npublic record Data\r\n{\r\n    public static Data? NullInstance =\u003E null;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nPrints:\r\n\u0060\u0060\u0060\r\n/nullable -\u003E OK (application/json; charset=utf-8): \u0060null\u0060\r\n/iresult -\u003E OK (): \u0060\u0060\r\n/typed_result -\u003E OK (): \u0060\u0060\r\n/void -\u003E OK (): \u0060\u0060\r\n/string -\u003E OK (text/plain; charset=utf-8): \u0060null\u0060\r\n\u0060\u0060\u0060\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.203\r\n\r\n### Anything else?\r\n\r\n\u0060\u0060\u0060\r\n.NET SDK:\r\n Version:   7.0.203\r\n Commit:    5b005c19f5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22621\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.203\\\r\n\r\nHost:\r\n  Version:      8.0.0-preview.5.23280.8\r\n  Architecture: x64\r\n  Commit:       bc78804f5d\r\n\r\n.NET SDKs installed:\r\n  6.0.410 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.107 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.203 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.100-preview.5.23303.2 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0-preview.5.23302.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0-preview.5.23280.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0-preview.5.23302.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  C:\\Users\\ThomasGravgaardHanse\\RiderProjects\\ProofOfConcept\\global.json\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85gZbx-",
        "parentId": null,
        "author": "mitchdenny",
        "content": "Thanks for reporting this @Dryvnt \r\n\r\nI\u0027ve been able to reproduce this based on your repro. This is where the behavior occurs:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/9da617793b3b387fd16bbc3e0ec06337569ca6ac/src/Http/Http.Results/src/HttpResultsHelper.cs#L33",
        "createdAt": "2023-07-03T04:35:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49107#issuecomment-1617280126"
      },
      {
        "id": "IC_kwDOAQzde85hIfwR",
        "parentId": null,
        "author": "captainsafia",
        "content": "I\u0027m inclined to think that the buggy behavior is in the handling of the non-Results case here. My inclination is that the right modification to make is to update it so that returning null produces a 204 response, as it does for a controller action.\r\n\r\nReturning the string literal \u0022null\u0022 for a null return type feels like incorrect behavior here.\r\n ",
        "createdAt": "2023-07-10T19:40:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49107#issuecomment-1629617169"
      },
      {
        "id": "IC_kwDOAQzde85hJrRR",
        "parentId": null,
        "author": "Dryvnt",
        "content": "May be. I\u0027m not personally _against_ a 204 response for a null \u0060T?\u0060, so long as it\u0027s consistent. I just want to be able to write my APIs in a simple way and then trust they won\u0027t mysteriously break when I extend them a bit.\r\n\r\nMy only objection is that it means I can\u0027t use \u0060HttpClient.GetFromJson\u003CT?\u003E\u0060 et. al. by default, since the default json deserializer throws an exception when given an empty body. You can configure your way out of it, but it\u0027s not trivial.\r\n\r\n\u0022It returns a \u0060T?\u0060 so why is this \u0060Get\u003CT?\u003E\u0060 failing?\u0022 is very bad dev-ex in my opinion. Assuming it was my fault, I nearly ripped my hair out trying to answer that question, which lead me to make this issue.\r\n\r\nIf the decision is made, I would suggest extending the default configuration to interpret an empty body as a null value for a nullable type. I\u0027m happy to create a feature suggestion at the time, should it be necessary.",
        "createdAt": "2023-07-11T00:43:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49107#issuecomment-1629926481"
      },
      {
        "id": "IC_kwDOAQzde85hk1YZ",
        "parentId": null,
        "author": "Dryvnt",
        "content": "Upon further research I am now personally strongly opposed to returning 204 for null values in the base case as it, by my reading, would violate the HTTP semantics spec.  I\u0027m not part of the .NET team so the decision is out of my hands, but I will at least try to make my case as best I can:\r\n\r\n200 and 204 are different in the same way that \u0060string? Foo() =\u003E null\u0060 and \u0060void Foo() {}\u0060 are different.\r\n\r\nWhen making a GET request for a resource, the appropriate response is a 200 with the body containing the requested resource in an appropriate representation. For a common HTTP API case (and especially if I set an \u0060Accept: application/json\u0060 header in my request), that would be \u0060application/json\u0060. The single json token \u0060null\u0060 is perfectly valid json representation for a resource that exists whose value is \u0060null\u0060. The empty string is not valid json. And \u0022204: your request has been fulfilled\u0022 is nonsense.\r\n\r\nI consider the fact that controller actions do things in an incorrect way an example of the kind of legacy cruft that makes me want to stay away from using them. I was hoping Minimal APIs would be better.\r\n\r\nI have revised the example in the issue description to include the Content-Type headers of the response, as well as some more examples for adjacent cases.\r\n\r\nThe HTTP Semantics spec, for reference: https://www.rfc-editor.org/rfc/rfc9110#section-15.3",
        "createdAt": "2023-07-16T10:21:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49107#issuecomment-1637045785"
      },
      {
        "id": "IC_kwDOAQzde85h0tAF",
        "parentId": null,
        "author": "captainsafia",
        "content": "@Dryvnt Thanks for sharing your thoughts here! Even though your not a member of the team, you\u0027re still a user who has run into this issue so your perspective is important. Raising this concern is totally valid too since we shouldn\u0027t assume MVC\u0027s behavior is necessarily semantically correct. for everything.\r\n\r\nGiven the research you\u0027ve done in the area, would you be interested in submitting a PR for the desired behavior here?\r\n\r\n\r\n\r\n",
        "createdAt": "2023-07-19T00:43:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49107#issuecomment-1641205765"
      },
      {
        "id": "IC_kwDOAQzde85iGi-T",
        "parentId": null,
        "author": "Dryvnt",
        "content": "Sure, I can take a look over the weekend.",
        "createdAt": "2023-07-21T16:15:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49107#issuecomment-1645883283"
      },
      {
        "id": "IC_kwDOAQzde85x3Jt7",
        "parentId": null,
        "author": "jded76",
        "content": "Any news on this?\r\nWe have the same problem trying to convert an owin web api to minimal api, and we are facing this behavior difference.\r\n\r\nP.S. Thank you @Dryvnt for your time.\r\n",
        "createdAt": "2024-01-25T14:04:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49107#issuecomment-1910283131"
      },
      {
        "id": "IC_kwDOAQzde85x4Gdj",
        "parentId": null,
        "author": "Dryvnt",
        "content": "Thanks for the reminder and motivation to look at this again, @jded76 :)\r\n\r\nI\u0027ve tried to implement some of the required changes myself, as seen in the draft PR (#49588). It was quite easy to make \u0060TypedResults\u0060 respect null values. I did some additional work today in an attempt to make it ready for non-draft, but I\u0027ve hit a problem.\r\n\r\nUnfortunately, a few of the \u0060Results\u0060 methods have their optional value parameter as the last of a few other optional parameters. From my understanding, there\u0027s no way to make those work without breaking the API heavily. e.g. putting the value parameter first, or making all the other parameters non-optional.\r\n\r\nAssuming I did not miss any, the problematic methods in question are\r\n  - \u0060Results.CreatedAtRoute\u0060\r\n  - \u0060Results.Accepted\u0060\r\n  - \u0060Results.AcceptedAtRoute\u0060\r\n\r\nI\u0027m not sure how to proceed, so I have left them alone in my draft PR. The PR can still serve as a starting point for a discussion. If some C# wizard can figure out a way to make it work that I missed, that would be fantastic.\r\n\r\nWe could break the API for those methods, whatever that ends up looking like. but I imagine that is a hard sell.\r\n\r\nA compromise solution is to accept that \u0060Results\u0060 has a gotcha and thus define that null is always considered no-value for \u0060Results\u0060 regardless of the underlying type, and then I remove all changes related to \u0060Results\u0060 and we proceed with the PR. I can accept that \u0022you did not care about your exact return type, so the framework did not either\u0022 is a lesser evil than \u0022specifying your return code breaks your API.\u0022 And the workaround is simple: If it matters in your use case, use \u0060TypedResults\u0060 instead of \u0060Results\u0060.\r\n\r\nFinally, we could accept current behavior, \u0060WONTFIX\u0060 this issue, and move on. Obviously, I would not personally consider this option acceptable.\r\n\r\nWhatever the decision, making it is above my pay grade. I officially throw the ball back to the development team.",
        "createdAt": "2024-01-25T16:15:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49107#issuecomment-1910531939"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85sp3IA",
    "title": "Review if UseRouting should still be explicitly called in the project templates",
    "url": "https://github.com/dotnet/aspnetcore/issues/49655",
    "createdAt": "2023-07-26T18:06:35Z",
    "lastUpdated": "2024-02-13T01:29:14Z",
    "body": "Is the explicit call to \u0060UseRouting\u0060 in the ASP.NET Core project templates still required? It looks like it was [originally introduced](https://github.com/dotnet/aspnetcore/pull/34016#issuecomment-875150665) to workaround #34146 which has since been resolved.\r\n\r\n@DamianEdwards @davidfowl \r\n",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85jBUYJ",
        "parentId": null,
        "author": "DamianEdwards",
        "content": "My understanding is it\u0027s not required, it\u0027s just more explicit. I\u0027m supportive of removing it unless we have compelling reasons not to.",
        "createdAt": "2023-08-02T00:37:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49655#issuecomment-1661289993"
      },
      {
        "id": "IC_kwDOAQzde85sLDPS",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-11-16T16:49:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49655#issuecomment-1814836178"
      },
      {
        "id": "IC_kwDOAQzde85sLDkv",
        "parentId": null,
        "author": "captainsafia",
        "content": "We learned the hard way this release that having \u0060UseRouting\u0060 explicitly in the template is a helpful indicator for figuring out what middlewares should go before endpoint routing vs. after. Given that, I think it\u0027s helpful to keep it in the template as a line of delineation where users know to put additional customizations.",
        "createdAt": "2023-11-16T16:49:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49655#issuecomment-1814837551"
      },
      {
        "id": "IC_kwDOAQzde85sTo44",
        "parentId": null,
        "author": "danroth27",
        "content": "\u003E We learned the hard way this release that having \u0060UseRouting\u0060 explicitly in the template is a helpful indicator for figuring out what middlewares should go before endpoint routing vs. after. Given that, I think it\u0027s helpful to keep it in the template as a line of delineation where users know to put additional customizations.\r\n\r\n@captainsafia Which middleware need to go before endpoint routing? And do we have that documented anywhere? It just seems strange that we set up the routing middleware in the host builder by default, but then we\u0027ve decided that you really actually need to explicitly set it up.",
        "createdAt": "2023-11-17T20:48:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49655#issuecomment-1817087544"
      },
      {
        "id": "IC_kwDOAQzde85srAof",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Which middleware need to go before endpoint routing? \r\n\r\nStatic file serving, HTTPS redirect, status code pages are the first ones that come to mind. That\u0027s documented [here](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-8.0#middleware-order).\r\n\r\n\u003E It just seems strange that we set up the routing middleware in the host builder by default, but then we\u0027ve decided that you really actually need to explicitly set it up.\r\n\r\nYes, it is strange. This decision is in reaction to the bug reports we\u0027ve gotten over the past year that relate to the implicitly-on behavior. There are some scenarios where it sends users into a bit of failure and we opted to avoid removing the explicit addition from the template until we figured those out.",
        "createdAt": "2023-11-22T17:41:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49655#issuecomment-1823214111"
      },
      {
        "id": "IC_kwDOAQzde85ssNrV",
        "parentId": null,
        "author": "danroth27",
        "content": "Adding @mkArtakMSFT and @javiercn.\r\n\r\n@captainsafia Is the conclusion here then that we should add an explicit call to \u0060UseRouting\u0060 to the Blazor templates as well?\r\n",
        "createdAt": "2023-11-22T21:24:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49655#issuecomment-1823529685"
      },
      {
        "id": "IC_kwDOAQzde85tBxoQ",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E @captainsafia Is the conclusion here then that we should add an explicit call to UseRouting to the Blazor templates as well?\r\n\r\nI\u0027m biased towards leaving the Blazor templates as-is. Hopefully, we\u0027ll resolve the implicit middleware issue once and for-all for .NET 9. If not, we can revisit unifying the way the minimal host is setup for all templates later.",
        "createdAt": "2023-11-28T06:11:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49655#issuecomment-1829181968"
      },
      {
        "id": "IC_kwDOAQzde85vjf03",
        "parentId": null,
        "author": "Varorbc",
        "content": "Can you explain this in the documentation. because now I feel very strange.",
        "createdAt": "2023-12-28T22:29:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49655#issuecomment-1871576375"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85s8WoO",
    "title": "RDF throws exception for handler with struct parameter and filters",
    "url": "https://github.com/dotnet/aspnetcore/issues/49730",
    "createdAt": "2023-07-30T01:56:00Z",
    "lastUpdated": "2024-02-13T01:28:53Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nRDF generates buggy code for endpoints with a:\r\n\r\n- struct parameter type\r\n- endpoint filter\r\n- null value for the parameter\r\n\r\n\u0060\u0060\u0060\r\nSystem.NullReferenceException\r\nObject reference not set to an instance of an object.\r\n   at lambda_method111(Closure, Object, HttpContext, Object[])\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.\u003C\u003Ec__DisplayClass99_0.\u003C\u003CHandleRequestBodyAndCompileRequestDelegate\u003Eb__0\u003Ed.MoveNext() in /Users/captainsafia/repos/2-aspnetcore/src/Http/Http.Extensions/src/RequestDelegateFactory.cs:line 1198\r\n\u0060\u0060\u0060\n\n### Expected Behavior\n\nInvoking request delegate should not produce an exception.\n\n### Steps To Reproduce\n\n\u0060\u0060\u0060\r\nvar app = WebApplication.Create();\r\n\r\napp.MapGet(\u0022/struct-with-filter\u0022, (BindableStructWithNullReturn param) =\u003E \u0022Hello world!\u0022)\r\n    .AddEndpointFilter((c, n) =\u003E n(c));\r\n\r\napp.Run();\r\n\r\npublic struct BindableStructWithNullReturn\r\n{\r\n    public static async ValueTask\u003CBindableStructWithNullReturn?\u003E BindAsync(HttpContext httpContext, ParameterInfo parameter)\r\n    {\r\n        await Task.CompletedTask;\r\n        return null;\r\n    }\r\n}\r\n\u0060\u0060\u0060\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.100-preview.7.23360.1\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-minimal",
      "feature-rdf"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85iw70K",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-07-30T01:56:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49730#issuecomment-1656995082"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85wC1o8",
    "title": "Add support for streaming text IAsyncEnumerable\u003Cstring\u003E results",
    "url": "https://github.com/dotnet/aspnetcore/issues/50501",
    "createdAt": "2023-09-04T08:38:54Z",
    "lastUpdated": "2024-02-07T15:39:36Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI am trying to return a streaming \u0060IAsyncEnumerable\u003Cstring\u003E\u0060 SematicKernel chat completion from \u0060GetStreamingChatCompletionsAsync\u0060, \u0060GetStreamingChatMessageAsync\u0060 methods.\r\n\r\nCurrently simply returning \u0060IAsyncEnumerable\u003Cstring\u003E\u0060 produces a streaming JSON array of strings result. The desired behavior is simple streaming text strings result.\r\n\r\nThis would effectively produce a streaming ChatGTP-like completion response generated by the method as the results become available from the OpenAI endpoints.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\n\u0060\u0060\u0060csharp\r\npublic class AsyncEnumerableStringsResult : IResult, IContentTypeHttpResult, IStatusCodeHttpResult\r\n{\r\n    protected readonly IAsyncEnumerable\u003Cstring\u003E chunks;\r\n\r\n    public string? ContentType =\u003E \u0022text/plain; charset=utf-8\u0022;\r\n\r\n    public int StatusCode =\u003E StatusCodes.Status200OK;\r\n\r\n    int? IStatusCodeHttpResult.StatusCode =\u003E StatusCode;\r\n\r\n    public AsyncEnumerableStringsResult(IAsyncEnumerable\u003Cstring\u003E chunks) =\u003E this.chunks = chunks ?? throw new ArgumentNullException(nameof(chunks));\r\n\r\n    public async Task ExecuteAsync(HttpContext httpContext)\r\n    {\r\n        if (httpContext == null)\r\n            throw new ArgumentNullException(nameof(httpContext));\r\n\r\n        httpContext.Response.ContentType = this.ContentType;\r\n        httpContext.Response.StatusCode = this.StatusCode;\r\n\r\n        await foreach (var chunk in this.chunks)\r\n            if (!string.IsNullOrEmpty(chunk))\r\n                await httpContext.Response.WriteAsync(chunk, cancellationToken: httpContext.RequestAborted);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nUsage example:\r\n\u0060\u0060\u0060csharp\r\napp.MapPost(\u0022/ChatAsyncStream\u0022, ([FromBody] ChatRequest chatRequest, ChatPlugin plugin, ILogger logger, CancellationToken cancellationToken) =\u003E\r\n    {\r\n        if (string.IsNullOrWhiteSpace(chatRequest.Question))\r\n            throw new ArgumentNullException(nameof(chatRequest.Question));\r\n\r\n        var result = plugin.ChatAsyncStream(\r\n            question: chatRequest.Question,\r\n            chatHistory: chatRequest.ChatHistory,\r\n            logger: logger,\r\n            cancellationToken: cancellationToken\r\n        );\r\n\r\n        return new AsyncEnumerableStringsResult(result);\r\n    })\r\n    .WithName(\u0022ChatAsyncStream\u0022)\r\n    .WithOpenApi()\r\n    .Produces\u003CIAsyncEnumerable\u003Cstring\u003E\u003E();\r\n\u0060\u0060\u0060\r\n\r\n### Additional context\r\n\r\n_No response_",
    "upvotes": 1,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85lqn4L",
        "parentId": null,
        "author": "davidfowl",
        "content": "How is the client consuming this response? Do you have an example?",
        "createdAt": "2023-09-04T20:17:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50501#issuecomment-1705672203"
      },
      {
        "id": "IC_kwDOAQzde85lukQH",
        "parentId": null,
        "author": "alexminza",
        "content": "@davidfowl here\u0027s a simple example built by me, based on the great tutorial from Streamlit https://docs.streamlit.io/knowledge-base/tutorials/build-conversational-apps#write-the-app\r\n\r\n**Streamlit ChatBot app**\r\n\r\n\u0060\u0060\u0060python\r\n#!/usr/bin/env python3\r\n\r\nimport os, logging\r\nimport streamlit as st\r\nfrom azureapi import AzureAPI\r\n\r\nfrom dotenv import load_dotenv, find_dotenv\r\n_ = load_dotenv(find_dotenv()) # read local .env file\r\n\r\nazure_api_endpoint = os.getenv(\u0027AZUREAPI_ENDPOINT\u0027)\r\nazure_api = AzureAPI(endpoint=azure_api_endpoint)\r\n\r\n#https://docs.streamlit.io/knowledge-base/tutorials/build-conversational-apps\r\nst.set_page_config(\r\n    page_title=\u0022ChatBot\u0022,\r\n    page_icon=\u0022:robot:\u0022\r\n)\r\n\r\nst.title(\u0022ChatBot\u0022)\r\n\r\n# Initialize chat history\r\nif \u0022messages\u0022 not in st.session_state:\r\n    st.session_state.messages = []\r\nif \u0022chat_history\u0022 not in st.session_state:\r\n    st.session_state.chat_history = \u0022\u0022\r\n\r\n# Display chat messages from history on app rerun\r\nfor message in st.session_state.messages:\r\n    with st.chat_message(message[\u0022role\u0022]):\r\n        st.markdown(message[\u0022content\u0022])\r\n\r\n# React to user input\r\nif prompt := st.chat_input(\u0022Enter message here\u0022):\r\n    # Add user message to chat history\r\n    st.session_state.messages.append({\u0022role\u0022: \u0022user\u0022, \u0022content\u0022: prompt})\r\n\r\n    # Display user message in chat message container\r\n    with st.chat_message(\u0022user\u0022):\r\n        st.markdown(prompt)\r\n\r\n    with st.spinner(text=\u0022In progress...\u0022):\r\n        with st.chat_message(\u0022assistant\u0022):\r\n            message_placeholder = st.empty()\r\n            response_text = \u0027\u0027\r\n\r\n            response_stream = azure_api.ChatStream(question=prompt, chatHistory=st.session_state.chat_history)\r\n            for response_chunk in response_stream:\r\n                if response_chunk:\r\n                    response_text \u002B= response_chunk\r\n                    message_placeholder.markdown(response_text \u002B \u0022\u258C\u0022)\r\n\r\n            message_placeholder.markdown(response_text)\r\n\r\n    # Display assistant response in chat message container\r\n    if response_text:\r\n        # Add assistant response to chat history\r\n        st.session_state.messages.append({\u0022role\u0022: \u0022assistant\u0022, \u0022content\u0022: response_text})\r\n    else:\r\n        st.error(\u0022ERROR\u0022)\r\n\u0060\u0060\u0060\r\n\r\n**API Client**\r\n\r\n\u0060\u0060\u0060python\r\nclass AzureAPI:\r\n    SESSION = requests.Session()\r\n    DEFAULT_TIMEOUT = 180\r\n    API_ENDPOINT = None\r\n\r\n    def __init__(self, endpoint: str) -\u003E None:\r\n        self.API_ENDPOINT = endpoint\r\n\r\n    def ChatStream(self, question: str, chatHistory: str = None):\r\n        url = f\u0027{self.API_ENDPOINT}/ChatAsyncStream\u0027\r\n        json = {\r\n            \u0022question\u0022: question,\r\n            \u0022chatHistory\u0022: chatHistory\r\n        }\r\n\r\n        with AzureAPI.SESSION.request(method=\u0027POST\u0027, url=url, json=json, stream=True, timeout=AzureAPI.DEFAULT_TIMEOUT) as response:\r\n            yield from response.iter_content(chunk_size=None, decode_unicode=True)\r\n\u0060\u0060\u0060",
        "createdAt": "2023-09-05T14:13:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50501#issuecomment-1706705927"
      },
      {
        "id": "IC_kwDOAQzde85uNn_d",
        "parentId": null,
        "author": "flq",
        "content": "A more generic solution might be to have a Server-Sent-Events result object that accepts an IAsyncEnumerable\u003CT\u003E - a client can then consume it via javascript\u0027s EventSource class.",
        "createdAt": "2023-12-10T19:55:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50501#issuecomment-1849065437"
      },
      {
        "id": "IC_kwDOAQzde85zEKQT",
        "parentId": null,
        "author": "dotnet-policy-service",
        "content": "Looks like this PR hasn\u0027t been active for some time and the codebase could have been changed in the meantime.\nTo make sure no conflicting changes have occurred, please rerun validation before merging. You can do this by leaving an \u0060/azp run\u0060 comment here (requires commit rights), or by simply closing and reopening.\n\u003C!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003E",
        "createdAt": "2024-02-06T17:53:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50501#issuecomment-1930470419"
      },
      {
        "id": "IC_kwDOAQzde85zEoPs",
        "parentId": null,
        "author": "dotnet-policy-service",
        "content": "Looks like this PR hasn\u0027t been active for some time and the codebase could have been changed in the meantime.\nTo make sure no conflicting changes have occurred, please rerun validation before merging. You can do this by leaving an \u0060/azp run\u0060 comment here (requires commit rights), or by simply closing and reopening.\n\u003C!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003E",
        "createdAt": "2024-02-06T19:13:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50501#issuecomment-1930593260"
      },
      {
        "id": "IC_kwDOAQzde85zLMJv",
        "parentId": null,
        "author": "davidfowl",
        "content": "Related to https://github.com/dotnet/runtime/issues/98105",
        "createdAt": "2024-02-07T15:39:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50501#issuecomment-1932313199"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85w4VVF",
    "title": "BindAsync Surrogate Method in Minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/50672",
    "createdAt": "2023-09-13T06:13:14Z",
    "lastUpdated": "2024-02-13T01:24:31Z",
    "body": "## Background and Motivation\r\n\r\n_Minimal APIs_ currently support a number of mechanisms for [parameter binding](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/parameter-binding), but are limited to a static \u0060TryParse\u0060 or \u0060BindAsync\u0060 method for custom binding.\r\n\r\nSome types of parameter binding, such as _features_, cannot be achieved without resorting to \u0060IHttpContextAccessor\u0060. This is both clunky and a forceful hand by platform extenders for consuming developers. \u0060TryParse\u0060 is insufficient because the process can be more involved than simple parsing and \u0060BindAsync\u0060 is impractical for types that do not have affinity to HTTP and cannot implement \u0060IBindableFromHttpContext\u003CTSelf\u003E\u0060.\r\n\r\nConsider the following scenario for a _Minimal API_ in ASP.NET API Versioning:\r\n\r\n\u0060\u0060\u0060c#\r\nvar app = builder.Build();\r\nvar orders = app.NewVersionedApi();\r\nvar v1 = orders.MapGroup(\u0022/orders\u0022).HasApiVersion(1.0);\r\n\r\nvar.MapGet(\u0022/{id:int}\u0022, (int id, ApiVersion version) =\u003E new Order() { Id = id, Version = version.ToString() });\r\n\u0060\u0060\u0060\r\n\r\nFor the \u0060ApiVersion\u0060 parameter to be bound (currently), the following DI workaround is required:\r\n\r\n\u0060\u0060\u0060c#\r\nbuilder.Services.AddHttpContextAccessor();\r\nbuilder.Services.AddTransient(sp =\u003E sp.GetRequiredService\u003CIHttpContextAccessor\u003E().HttpContext?.GetRequestedApiVersion()!);\r\n\u0060\u0060\u0060\r\n\r\nWhile this is just one scenario, there are many others like it. This is particularly true for edge cases that continue to crop up in the ever expanding items outlined in the internal [EndpointParameterSource](../blob/main/src/Http/Http.Extensions/gen/StaticRouteHandlerModel/EndpointParameterSource.cs) enumeration.\r\n\r\n## Proposed API\r\n\r\nThe proposed API would expand upon the capabilities of the \u0060BindAsync\u0060 conventions and rules by allowing a surrogate method. These surrogates would be defined and consumed through _Options_. A surrogate \u0060BindAsync\u0060 method would have the following rules:\r\n\r\n- Must be a \u0060static\u0060 method (to avoid closure issues)\r\n- Must use the same supported signatures as the \u0060BindAsync\u0060 convention\r\n- Must use the same supported \u0060IBindableFromHttpContext\u003CTSelf\u003E.BindAsync\u0060 signature\r\n- May allow an alternate to an existing \u0060BindAsync\u0060 implementation\r\n\r\nThe options might be defined as follows:\r\n\r\n\u0060\u0060\u0060c#\r\npublic sealed class BindAsyncOptions : IReadOnlyDictionary\u003CType, MethodInfo\u003E\r\n{\r\n    private Dictionary\u003CType, MethodInfo\u003E? map;\r\n\r\n    public void Add\u003CT\u003E(Func\u003CHttpContext, ValueTask\u003CT?\u003E\u003E bindAsync) =\u003E\r\n        Add(typeof(T), bindAsync.Method);\r\n\r\n    public void Add\u003CT\u003E(Func\u003CHttpContext, ParameterInfo, ValueTask\u003CT?\u003E\u003E bindAsync) =\u003E\r\n        Add(typeof(T), bindAsync.Method);\r\n\r\n    private void Add(Type type, MethodInfo method)\r\n    {\r\n        if (!method.IsStatic)\r\n        {\r\n            throw new ArgumentException(\u0022The specified method must be static.\u0022);\r\n        }\r\n\r\n        map ??= new();\r\n        map.Add(type, method);\r\n    }\r\n\r\n    MethodInfo IReadOnlyDictionary\u003CType, MethodInfo\u003E.this[Type key] =\u003E\r\n        map is null ? throw new KeyNotFoundException() : map[key];\r\n\r\n    IEnumerable\u003CType\u003E IReadOnlyDictionary\u003CType, MethodInfo\u003E.Keys =\u003E\r\n        map is null ? Enumerable.Empty\u003CType\u003E() : map.Keys;\r\n\r\n    IEnumerable\u003CMethodInfo\u003E IReadOnlyDictionary\u003CType, MethodInfo\u003E.Values =\u003E\r\n        map is null ? Enumerable.Empty\u003CMethodInfo\u003E() : map.Values;\r\n\r\n    public int Count =\u003E map is null ? 0 : map.Count;\r\n\r\n    public bool ContainsKey(Type key) =\u003E map is not null \u0026\u0026 map.ContainsKey(key);\r\n\r\n    IEnumerator\u003CKeyValuePair\u003CType, MethodInfo\u003E\u003E IEnumerable\u003CKeyValuePair\u003CType, MethodInfo\u003E\u003E.GetEnumerator() =\u003E\r\n        map is null ? Enumerable.Empty\u003CKeyValuePair\u003CType, MethodInfo\u003E\u003E().GetEnumerator() : map.GetEnumerator();\r\n\r\n    public bool TryGetValue(Type key, [MaybeNullWhen(false)] out MethodInfo value)\r\n    {\r\n        if (map is null)\r\n        {\r\n            value = default;\r\n            return false;\r\n        }\r\n\r\n        return map.TryGetValue(key, out value);\r\n    }\r\n\r\n    IEnumerator System.Collections.IEnumerable.GetEnumerator() =\u003E\r\n        map is null ? Enumerable.Empty\u003CKeyValuePair\u003CType, MethodInfo\u003E\u003E().GetEnumerator() : map.GetEnumerator();\r\n}\r\n\u0060\u0060\u0060\r\n\r\nTo leverage the configuration, the internal \u0060ParameterBindingMethodCache\u0060 would have to be changed. This class is source-shared across multiple libraries so the change _should_ only use types known to all implementations (which may otherwise look _strange_).\r\n\r\n\u0060HasBindAsyncMethod\u0060 needs a new overload that can resolve the surrogate mapping dictionary:\r\n\r\n\u0060\u0060\u0060diff\r\n\u002B    [RequiresUnreferencedCode(\u0022Performs reflection on type hierarchy. This cannot be statically analyzed.\u0022)]\r\n\u002B    [RequiresDynamicCode(\u0022Performs reflection on type hierarchy. This cannot be statically analyzed.\u0022)]\r\n\u002B    public bool HasBindAsyncMethod(\r\n\u002B        ParameterInfo parameter,\r\n\u002B        IServiceProvider serviceProvider,\r\n\u002B        Func\u003CIServiceProvider, IReadOnlyDictionary\u003CType, MethodInfo\u003E?\u003E resolve) =\u003E\r\n\u002B        FindBindAsyncMethod(parameter, serviceProvider, resolve).Expression is not null;\r\n\u0060\u0060\u0060\r\n\r\nA new \u0060GetIBindableSurrogate\u0060 method would be added to allow resolving \u0060BindAsync\u0060 mapped to a specific type.\r\n\r\n\u0060\u0060\u0060diff\r\n\u002B    private static MethodInfo? GetIBindableSurrogate(\r\n\u002B        Type type,\r\n\u002B        IServiceProvider? serviceProvider,\r\n\u002B        Func\u003CIServiceProvider, IReadOnlyDictionary\u003CType, MethodInfo\u003E?\u003E? resolve)\r\n\u002B    {\r\n\u002B        if (serviceProvider is not null \u0026\u0026\r\n\u002B            resolve is not null \u0026\u0026\r\n\u002B            resolve(serviceProvider) is { } map \u0026\u0026\r\n\u002B            map.TryGetValue(type, out var method))\r\n\u002B        {\r\n\u002B            return method;\r\n\u002B        }\r\n\u002B\r\n\u002B        return null;\r\n\u002B    }\r\n\u0060\u0060\u0060\r\n\r\nThe \u0060FindBindAsyncMethod\u0060\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/28b2bfd3ac67f07a5985550f1bec2e659af02aea/src/Shared/ParameterBindingMethodCache.cs#L215\r\n\r\nwould be updated to allow:\r\n\r\n\u0060\u0060\u0060diff\r\n\u002B    var methodInfo = GetIBindableSurrogate(nonNullableParameterType, serviceProvider, resolve) ??\r\n\u002B                     GetIBindableFromHttpContextMethod(nonNullableParameterType);\r\n\u0060\u0060\u0060\r\n\r\nThe remaining rules and processing for \u0060BindAsync\u0060 would remain unchanged and _just work_.\r\n\r\n\u0060RequestDelegateFactory\u0060 would subsequently be updated as follows:\r\n\r\n\u0060\u0060\u0060diff\r\n\u002B    private static IReadOnlyDictionary\u003CType, MethodInfo\u003E ResolveBindAsyncSurrogates(IServiceProvider serviceProvider) =\u003E\r\n\u002B        serviceProvider.GetService\u003CIOptions\u003CBindAsyncOptions\u003E\u003E()?.Value);\r\n\u0060\u0060\u0060\r\n\r\nand then:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/28b2bfd3ac67f07a5985550f1bec2e659af02aea/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L831\r\n\r\nbecomes:\r\n\r\n\u0060\u0060\u0060diff\r\nelse if (ParameterBindingMethodCache.HasBindAsyncMethod(\r\n         parameter,\r\n\u002B        factoryContext.ServiceProvider,\r\n\u002B        ResolveBindAsyncSurrogates))\r\n\u0060\u0060\u0060\r\n\r\nand:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/28b2bfd3ac67f07a5985550f1bec2e659af02aea/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L1916\r\n\r\nbecomes:\r\n\r\n\u0060\u0060\u0060diff\r\n    var bindAsyncMethod = ParameterBindingMethodCache.FindBindAsyncMethod(\r\n            parameter,\r\n\u002B           factoryContext.ServiceProvider,\r\n\u002B           ResolveBindAsyncSurrogates);\r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\nThis will now allow developers and platform extenders to define arbitrary \u0060BindAsync\u0060 methods mapped to a specific type.\r\n\r\nIn the original example, instead of using \u0060IHttpContextAccessor\u0060, API Versioning could now register:\r\n\r\n\u0060\u0060\u0060c#\r\nprivate static ValueTask\u003CApiVersion?\u003E BindApiVersionAsync(HttpContext context) =\u003E\r\n    context.ApiVersioningFeature().RequestedApiVersion;\r\n\r\nservices.Configure((BindAsyncOptions options) =\u003E options.Add(BindApiVersionAsync));\r\n\u0060\u0060\u0060\r\n\r\nThis approach would work for any other _feature_, type, and so on that doesn\u0027t have \u0060TryParse\u0060 (or is unsuitable) and cannot implement  \u0060IBindableFromHttpContext\u003CTSelf\u003E\u0060. Consumers of such mappings are none the wiser and do not implicitly have to take a dependency on \u0060IHttpContextAccessor\u0060 (which _should_ be avoided).\r\n\r\n## Alternative Designs\r\n\r\n- \u0060BindAsyncOptions\u0060 does not _have_ to be \u0060IReadOnlyDictionary\u003CType, MethodInfo\u003E\u0060; however,\r\n   - most of the capabilities are _dictionary-like_\r\n   - the instance would likely to need to expose or project into another dictionary instance\r\n- \u0060BindAsyncOptions\u0060 does not have to supersede existing implementations\r\n- The surrogate method **must** be \u0060static\u0060, which means it must be a static function or local function\r\n   - \u0060static\u0060 lambdas are not guaranteed to be static functions by the compiler\r\n   - It might be worth changing or loosening the rules to allow something like \u0060static (context) =\u003E ValueTask.FromResult(context.ApiVersioningFeature().RequestedApiVersion)\u0060\r\n\r\n## Open Questions\r\n\r\n- Should \u0060BindAsyncOptions.Add\u0060 replace an existing registration or are multiple registrations an error?\r\n- Is source generation still possible for surrogate methods?\r\n- It is not entirely clear how \u0060IServiceProvider\u0060 is resolved from \u0060RequestDelegateFactoryOptions\u0060\r\n\r\nAssuming it ties to the root container, resolving the options just works and the following unit test passes:\r\n\r\n\u0060\u0060\u0060c#\r\n[Fact]\r\npublic async Task CanExecuteRequestDelegateWithBindAsyncSurrogate()\r\n{\r\n    // Arrange\r\n    IResult actionWithBindAsyncSurrogate(FeatureValue value) =\u003E Results.Extensions.TestResult(value.IsTest.ToString());\r\n\r\n    var httpContext = CreateHttpContext();\r\n    var responseBodyStream = new MemoryStream();\r\n\r\n    httpContext.Response.Body = responseBodyStream;\r\n    httpContext.Features.Set(new TestFeature(new() { IsTest = true }));\r\n\r\n    var services = new ServiceCollection();\r\n\r\n    services.Configure((BindAsyncOptions options) =\u003E options.Add(BindAsync));\r\n\r\n    var factoryResult = RequestDelegateFactory.Create(\r\n        actionWithBindAsyncSurrogate,\r\n        new RequestDelegateFactoryOptions() { ServiceProvider = services.BuildServiceProvider() });\r\n\r\n    var requestDelegate = factoryResult.RequestDelegate;\r\n\r\n    // Act\r\n    await requestDelegate(httpContext);\r\n\r\n    // Assert\r\n    Assert.Equal(200, httpContext.Response.StatusCode);\r\n    Assert.Equal(@\u0022\u0022\u0022Hello True. This is from an extension method.\u0022\u0022\u0022, Encoding.UTF8.GetString(responseBodyStream.ToArray()));\r\n\r\n    static ValueTask\u003CFeatureValue?\u003E BindAsync(HttpContext h, ParameterInfo c) =\u003E\r\n        ValueTask.FromResult(h.Features.Get\u003CTestFeature\u003E()?.Value);\r\n}\r\n\u0060\u0060\u0060\r\n\r\n## Risks\r\n\r\n- \u0060BindAsync\u0060 implementations might collide (but there can still only be one)\r\n- \u0060BindAsync\u0060 processing might be unclear\r\n",
    "upvotes": 1,
    "labels": [
      "api-suggestion",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85mv_pO",
        "parentId": null,
        "author": "commonsensesoftware",
        "content": "This is duplicate request of:\r\n\r\n- #45525 \r\n- #35489\r\n\r\nA key difference is this implementation variant could potentially address the Source Generation limitation.",
        "createdAt": "2023-09-18T16:23:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50672#issuecomment-1723857486"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85w-li2",
    "title": "Minimal ASP.NET Core AoT Publish through Visual Studio Creates Broken EXE- Failed to load assembly \u0027Microsoft.AspNetCore\u0027",
    "url": "https://github.com/dotnet/aspnetcore/issues/50694",
    "createdAt": "2023-09-14T01:00:29Z",
    "lastUpdated": "2024-10-29T22:36:13Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen using Visual Studio (Microsoft Visual Studio Enterprise 2022 (64-bit) - Preview\r\nVersion 17.8.0 Preview 1.0)\u0027s \u0022Publish\u0022 feature, I can\u0027t find a way to resolve a specific publish error--and resulting broken executable--regarding Microsoft.AspNetCore.\r\n\r\nThe exact error (the project is called AspAot):\r\n\u0060\u0060\u0060\r\nILC: Method \u0027[AspAot]Program.\u003CMain\u003E$(string[])\u0027 will always throw because: Failed to load assembly \u0027Microsoft.AspNetCore\u0027\r\n\u0060\u0060\u0060\n\n### Expected Behavior\n\nNo compiler warnings during publish and a working executable.\n\n### Steps To Reproduce\n\nCode:\r\n\u0060\u0060\u0060C#\r\nWebApplication.CreateSlimBuilder(); // Not a useful app but is all that\u0027s needed to get the error.\r\n\u0060\u0060\u0060\r\n\r\nProject:\r\n\u0060\u0060\u0060XML\r\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk.Web\u0022\u003E\r\n  \u003CPropertyGroup\u003E\r\n    \u003CTargetFramework\u003Enet8.0\u003C/TargetFramework\u003E\r\n    \u003CNullable\u003Eenable\u003C/Nullable\u003E\r\n    \u003CImplicitUsings\u003Eenable\u003C/ImplicitUsings\u003E\r\n    \u003CInvariantGlobalization\u003Etrue\u003C/InvariantGlobalization\u003E\r\n    \u003CPublishAot\u003Etrue\u003C/PublishAot\u003E\r\n  \u003C/PropertyGroup\u003E\r\n\u003C/Project\u003E\r\n\u0060\u0060\u0060\n\n### Exceptions (if any)\n\n\u0060\u0060\u0060\r\nILC: Method \u0027[AspAot]Program.\u003CMain\u003E$(string[])\u0027 will always throw because: Failed to load assembly \u0027Microsoft.AspNetCore\u0027\r\n\u0060\u0060\u0060\n\n### .NET Version\n\n8.0.100-preview.7.23376.3\n\n### Anything else?\n\nThe command-line tools do not have this issue: \u0060dotnet publish -r win-x64\u0060 creates a working executable.",
    "upvotes": 8,
    "labels": [
      "bug",
      "NativeAOT",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85oaTUx",
        "parentId": null,
        "author": "christiannagel",
        "content": "I have the same issue with dotnet publish in the WSL, without using Visual Studio:\r\n.NET version: 8.0.100-rc.1.23455.8\r\n\r\nStart WSL - 2 (I\u0027m using Ubuntu 22.04.2)\r\n\r\n1. dotnet new webapiaot -o test1\r\n2. Adding this to the csproj file\r\n\r\n\u0060\u0060\u0060xml\r\n \u003CPropertyGroup\u003E\r\n    \u003CContainerRepository\u003Etest1\u003C/ContainerRepository\u003E\r\n    \u003CContainerImageTags\u003E4.4.4;latest\u003C/ContainerImageTags\u003E\r\n  \u003C/PropertyGroup\u003E\r\n\u0060\u0060\u0060\r\n3. dotnet publish test1.csproj --os linux --arch x64 /t:PublishContainer -c Release\r\n\r\nThis results in this output:\r\n\r\nMSBuild version 17.8.0-preview-23418-03\u002B0125fc9fb for .NET\r\n  Determining projects to restore...\r\n  Restored /mnt/c/temp/test1/test1.csproj (in 1.17 sec).\r\n/usr/share/dotnet/sdk/8.0.100-rc.1.23455.8/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(311,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [/mnt/c/temp/test1/test1.csproj]\r\n  test1 -\u003E /mnt/c/temp/aot3/bin/Release/net8.0/linux-x64/test1.dll\r\n  Generating native code\r\n  ILC: Method \u0027[test1]Program.\u003CMain\u003E$(string[])\u0027 will always throw because: Failed to load assembly \u0027Microsoft.AspNetCore\u0027\r\n  test1 -\u003E /mnt/c/temp/test1/bin/Release/net8.0/linux-x64/publish/\r\n  Building image \u0027test1\u0027 with tags 4.4.4,latest on top of base image mcr.microsoft.com/dotnet/aspnet:8.0.0-rc.1\r\n  Pushed image \u0027test1:4.4.4\u0027 to local registry\r\n  Pushed image \u0027test1:latest\u0027 to local registry\r\n\r\nRunning the generated images results in:\r\n\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not find file \u0027Microsoft.AspNetCore\u0027.\r\nFile name: \u0027Microsoft.AspNetCore\u0027\r\n   at Internal.Runtime.TypeLoaderExceptionHelper.CreateFileNotFoundException(ExceptionStringID, String) \u002B 0x4a\r\n   at Internal.Runtime.CompilerHelpers.ThrowHelpers.ThrowFileNotFoundException(ExceptionStringID, String) \u002B 0x6\r\n   at Program.\u003CMain\u003E$(String[] args) \u002B 0x12\r\n   at test1!\u003CBaseAddress\u003E\u002B0x1d4c8c\r\n",
        "createdAt": "2023-10-07T14:23:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50694#issuecomment-1751725361"
      },
      {
        "id": "IC_kwDOAQzde85qsMz4",
        "parentId": null,
        "author": "Bunseijiang",
        "content": "me too, using rider.\r\n\r\n.net version: 8.0.100-rc.2.23502.2\r\n\r\nCode:\r\n\u0060\u0060\u0060\r\nusing System.Text.Json.Serialization;\r\n\r\nvar builder = WebApplication.CreateSlimBuilder(args);\r\n\r\nbuilder.Services.ConfigureHttpJsonOptions(options =\u003E\r\n{\r\n    options.SerializerOptions.TypeInfoResolverChain.Insert(0, AppJsonSerializerContext.Default);\r\n});\r\n\r\nvar app = builder.Build();\r\n\r\nvar sampleTodos = new Todo[]\r\n{\r\n    new(1, \u0022Walk the dog\u0022),\r\n    new(2, \u0022Do the dishes\u0022, DateOnly.FromDateTime(DateTime.Now)),\r\n    new(3, \u0022Do the laundry\u0022, DateOnly.FromDateTime(DateTime.Now.AddDays(1))),\r\n    new(4, \u0022Clean the bathroom\u0022),\r\n    new(5, \u0022Clean the car\u0022, DateOnly.FromDateTime(DateTime.Now.AddDays(2)))\r\n};\r\nvar todosApi = app.MapGroup(\u0022/todos\u0022);\r\ntodosApi.MapGet(\u0022/\u0022, () =\u003E sampleTodos);\r\ntodosApi.MapGet(\u0022/{id}\u0022, (int id) =\u003E\r\n    sampleTodos.FirstOrDefault(a =\u003E a.Id == id) is { } todo\r\n        ? Results.Ok(todo)\r\n        : Results.NotFound());\r\n\r\napp.Run();\r\n\r\npublic record Todo(int Id, string? Title, DateOnly? DueBy = null, bool IsComplete = false);\r\n\r\n[JsonSerializable(typeof(Todo[]))]\r\ninternal partial class AppJsonSerializerContext : JsonSerializerContext\r\n{\r\n}\r\n\u0060\u0060\u0060\r\n\r\nProject:\r\n\u0060\u0060\u0060\r\n\u003CPropertyGroup\u003E\r\n        \u003CTargetFramework\u003Enet8.0\u003C/TargetFramework\u003E\r\n        \u003CNullable\u003Eenable\u003C/Nullable\u003E\r\n        \u003CImplicitUsings\u003Eenable\u003C/ImplicitUsings\u003E\r\n        \u003CInvariantGlobalization\u003Etrue\u003C/InvariantGlobalization\u003E\r\n        \u003CPublishAot\u003Etrue\u003C/PublishAot\u003E\r\n        \u003CDockerDefaultTargetOS\u003ELinux\u003C/DockerDefaultTargetOS\u003E\r\n    \u003C/PropertyGroup\u003E\r\n\u0060\u0060\u0060",
        "createdAt": "2023-11-02T02:39:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50694#issuecomment-1789971704"
      },
      {
        "id": "IC_kwDOAQzde85sHGT_",
        "parentId": null,
        "author": "axzxs2001",
        "content": "### Project:\r\n\r\n\u0060\u003CProject Sdk=\u0022Microsoft.NET.Sdk.Web\u0022\u003E\r\n  \u003CPropertyGroup\u003E\r\n    \u003CTargetFramework\u003Enet8.0\u003C/TargetFramework\u003E\r\n    \u003CNullable\u003Eenable\u003C/Nullable\u003E\r\n    \u003CImplicitUsings\u003Eenable\u003C/ImplicitUsings\u003E\r\n    \u003CInvariantGlobalization\u003Etrue\u003C/InvariantGlobalization\u003E\r\n    \u003CPublishAot\u003Etrue\u003C/PublishAot\u003E\r\n  \u003C/PropertyGroup\u003E\r\n\u003C/Project\u003E\u0060\r\nProgram.cs\r\n\u0060using System.Text.Json.Serialization;\r\nvar builder = WebApplication.CreateSlimBuilder(args);\r\nbuilder.Services.ConfigureHttpJsonOptions(options =\u003E\r\n{\r\n    options.SerializerOptions.TypeInfoResolverChain.Insert(0, AppJsonSerializerContext.Default);\r\n});\r\nvar app = builder.Build();\r\nvar sampleTodos = new Todo[] {\r\n    new(1, \u0022Walk the dog\u0022),\r\n    new(2, \u0022Do the dishes\u0022, DateOnly.FromDateTime(DateTime.Now)),\r\n    new(3, \u0022Do the laundry\u0022, DateOnly.FromDateTime(DateTime.Now.AddDays(1))),\r\n    new(4, \u0022Clean the bathroom\u0022),\r\n    new(5, \u0022Clean the car\u0022, DateOnly.FromDateTime(DateTime.Now.AddDays(2)))\r\n};\r\nvar todosApi = app.MapGroup(\u0022/todos\u0022);\r\ntodosApi.MapGet(\u0022/\u0022, () =\u003E sampleTodos);\r\ntodosApi.MapGet(\u0022/{id}\u0022, (int id) =\u003E\r\n    sampleTodos.FirstOrDefault(a =\u003E a.Id == id) is { } todo\r\n        ? Results.Ok(todo)\r\n        : Results.NotFound());\r\n\r\napp.Run();\r\npublic record Todo(int Id, string? Title, DateOnly? DueBy = null, bool IsComplete = false);\r\n[JsonSerializable(typeof(Todo[]))]\r\ninternal partial class AppJsonSerializerContext : JsonSerializerContext\r\n{\r\n}\u0060\r\n### VisualStudio :\r\n\r\nMicrosoft Visual Studio Enterprise 2022 (64 \u4F4D) - Preview\r\n\u7248\u672C 17.9.0 Preview 1.0\r\n\r\n### error message:\r\n\u751F\u6210\u5F00\u59CB\u4E8E 14:10...\r\n1\u003E------ \u5DF2\u542F\u52A8\u751F\u6210: \u9879\u76EE: WebApplication16, \u914D\u7F6E: Release Any CPU ------\r\n\u5DF2\u8FD8\u539F C:\\Users\\axzxs\\source\\repos\\WebApplication16\\WebApplication16\\WebApplication16.csproj (\u7528\u65F6 552 \u6BEB\u79D2)\u3002\r\n1\u003EWebApplication16 -\u003E C:\\Users\\axzxs\\source\\repos\\WebApplication16\\WebApplication16\\bin\\Release\\net8.0\\WebApplication16.dll\r\n2\u003E------ \u5DF2\u542F\u52A8\u53D1\u5E03: \u9879\u76EE: WebApplication16, \u914D\u7F6E: Release Any CPU ------\r\n\u6B63\u5728\u8FDE\u63A5\u5230 C:\\Users\\axzxs\\source\\repos\\WebApplication16\\WebApplication16\\bin\\Release\\net8.0\\publish\\...\r\n\u6B63\u5728\u786E\u5B9A\u8981\u8FD8\u539F\u7684\u9879\u76EE\u2026\r\n\u6240\u6709\u9879\u76EE\u5747\u662F\u6700\u65B0\u7684\uFF0C\u65E0\u6CD5\u8FD8\u539F\u3002\r\nWebApplication16 -\u003E C:\\Users\\axzxs\\source\\repos\\WebApplication16\\WebApplication16\\bin\\Release\\net8.0\\win-x64\\WebApplication16.dll\r\n\u0022C:\\Users\\axzxs\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\8.0.0\\build\\findvcvarsall.bat\u0022 x64\r\nGenerating native code\r\n\u0022C:\\Users\\axzxs\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\8.0.0\\tools\\\\ilc\u0022 @\u0022obj\\Release\\net8.0\\win-x64\\native\\WebApplication16.ilc.rsp\u0022\r\n\r\nILC: Method \u0027[WebApplication16]Program.\u003CMain\u003E$(string[])\u0027 will always throw because: Failed to load assembly \u0027Microsoft.AspNetCore\u0027\r\n\r\n\r\n\u0022C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\VC\\Tools\\MSVC\\14.36.32532\\bin\\Hostx64\\x64\\link.exe\u0022 @\u0022obj\\Release\\net8.0\\win-x64\\native\\link.rsp\u0022\r\nWebApplication16 -\u003E C:\\Users\\axzxs\\source\\repos\\WebApplication16\\WebApplication16\\obj\\Release\\net8.0\\win-x64\\PubTmp\\Out\\\r\nWeb \u5E94\u7528\u5DF2\u6210\u529F\u53D1\u5E03 file:///C:/Users/axzxs/source/repos/WebApplication16/WebApplication16/bin/Release/net8.0/publish/\r\n\r\n### dotnet cli is success:\r\ndotnet publish -r win-x64\r\n\r\n\r\n",
        "createdAt": "2023-11-16T05:11:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50694#issuecomment-1813800191"
      },
      {
        "id": "IC_kwDOAQzde85sfzhG",
        "parentId": null,
        "author": "EdiWang",
        "content": "This is still happening after .NET 8 RTM. Even with a pure default empty project. Just a new project with \u0022ASP.NET Core Web API(native AOT)\u0022, change nothing, publish directly (win-64), you will see the error.\r\n\r\n![eac3f30c70b78cd9f40e92dc7b8b89a](https://github.com/dotnet/aspnetcore/assets/3304703/d4ea2924-3e97-4fe1-b5f2-690eabd39d97)\r\n\r\n![303115ea552cf3d6c4674aecfac5a89](https://github.com/dotnet/aspnetcore/assets/3304703/de33cf24-d755-4a7b-bc2a-d2eee0c53f2a)\r\n",
        "createdAt": "2023-11-21T05:42:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50694#issuecomment-1820276806"
      },
      {
        "id": "IC_kwDOAQzde85sf506",
        "parentId": null,
        "author": "vipwan",
        "content": "\u003E ine tools do not have this issue: \u0060dotnet publish -r win-x64\u0060 creates a working executab\r\n\r\n\u0060\u0060\u0060bash\r\n--self-contained\r\n\u0060\u0060\u0060",
        "createdAt": "2023-11-21T06:14:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50694#issuecomment-1820302650"
      },
      {
        "id": "IC_kwDOAQzde85ss4kr",
        "parentId": null,
        "author": "eerhardt",
        "content": "\u003E This is still happening after .NET 8 RTM. Even with a pure default empty project. Just a new project with \u0022ASP.NET Core Web API(native AOT)\u0022, change nothing, publish directly (win-64), you will see the error.\r\n\u003E \r\n\u003E \r\n\u003E ![303115ea552cf3d6c4674aecfac5a89](https://user-images.githubusercontent.com/3304703/284473688-de33cf24-d755-4a7b-bc2a-d2eee0c53f2a.png)\r\n\r\nTry executing the application in the \u0060bin\\Release\\net8.0\\win-x64\\publish\u0060 folder. (Note the \u0060win-x64\u0060 addition to the folder you are using.",
        "createdAt": "2023-11-23T00:54:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50694#issuecomment-1823705387"
      },
      {
        "id": "IC_kwDOAQzde85zwJNB",
        "parentId": null,
        "author": "ZenMaxe",
        "content": "I Found The Issue!\r\nthe problem is Visual Studio  (and Rider)\r\n![image](https://github.com/dotnet/aspnetcore/assets/57589298/3f620f1d-fd52-45df-82db-27135f67b2f8)\r\n\r\nVisual Studio 2022 Preview Output:\r\n\u003E PingTest -\u003E C:\\Users\\hosei\\source\\repos\\PingTest\\bin\\Release\\net8.0\\win-x64\\PingTest.dll\r\n\u003E \u0022C:\\Users\\hosei\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\8.0.0\\build\\findvcvarsall.bat\u0022 x64\r\n\u003E Generating native code\r\n\u003E \u0022C:\\Users\\hosei\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\8.0.0\\tools\\\\ilc\u0022 @\u0022obj\\Release\\net8.0\\win-x64\\native\\PingTest.ilc.rsp\u0022\r\n\u003E ILC: Method \u0027[PingTest]Program.Main(string[])\u0027 will always throw because: Failed to load assembly \u0027Microsoft.AspNetCore\u0027\r\n\u003E \u0022C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\VC\\Tools\\MSVC\\14.39.33321\\bin\\Hostx64\\x64\\link.exe\u0022 @\u0022obj\\Release\\net8.0\\win-x64\\native\\link.rsp\u0022\r\n\u003E PingTest -\u003E C:\\Users\\hosei\\source\\repos\\PingTest\\obj\\Release\\net8.0\\win-x64\\PubTmp\\Out\\\r\n\u003E Web App was published successfully file:///C:/Users/hosei/source/repos/PingTest/bin/Release/net8.0/publish/\r\n\r\n\r\nCmd Output:\r\n\r\n\u003E C:\\Users\\hosei\\source\\repos\\PingTest\u003Edotnet publish\r\n\u003E MSBuild version 17.8.3\u002B195e7f5a3 for .NET\r\n\u003E   Determining projects to restore...\r\n\u003E   Restored C:\\Users\\hosei\\source\\repos\\PingTest\\PingTest.csproj (in 745 ms).\r\n\u003E   PingTest -\u003E C:\\Users\\hosei\\source\\repos\\PingTest\\bin\\Release\\net8.0\\win-x64\\PingTest.dll\r\n\u003E   Generating native code\r\n\u003E   PingTest -\u003E C:\\Users\\hosei\\source\\repos\\PingTest\\bin\\Release\\net8.0\\win-x64\\publish\\\r\n\r\nwith dotnet cli it\u0027s okay beacuse project will publish on target-runetime\r\nand it\u0027s worked!\r\n",
        "createdAt": "2024-02-13T16:54:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50694#issuecomment-1942000449"
      },
      {
        "id": "IC_kwDOAQzde853UycU",
        "parentId": null,
        "author": "AlexStormwood",
        "content": "Can confirm, a freshly-made project using the Minimal Web API (AOT) template has this issue for me. Latest versions of all things on the regular public tracks, no insider/preview/beta/etc stuff installed.\r\n\r\nAnd as ZenMaxe notes above, running \u0060dotnet publish Projectname.csproj\u0060 works just fine. There\u0027s something in Visual Studio or the VS publishing profile system that is different to \u0060dotnet\u0060 CLI\u0027s way of doing things.\r\n\r\nPublishing via the CLI also leads to an output file almost 3x the size of Visual Studio\u0027s publishing output (3MB vs 8.7MB), so something regarding the trimming/stripping may be at play?",
        "createdAt": "2024-03-16T10:12:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50694#issuecomment-2001938196"
      },
      {
        "id": "IC_kwDOAQzde85_CRaL",
        "parentId": null,
        "author": "ammfx",
        "content": "Changing in \u0060Publish\u0060 - \u0060Show all settings\u0060 dialog - \u0060Deployment mode\u0060  to \u0060Self-contained\u0060 fixes the issue (no build error and correct 9mb exe generated)",
        "createdAt": "2024-05-25T14:56:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50694#issuecomment-2131302027"
      },
      {
        "id": "IC_kwDOAQzde86HnXez",
        "parentId": null,
        "author": "chuchu",
        "content": "I think @ammfx is right. This worked also for me using the webapiaot project. You can also add this to your csproj file instead.\r\n\r\n\u0060\u0060\u0060xml\r\n\u003CSelfContained\u003ETrue\u003C/SelfContained\u003E\r\n\u0060\u0060\u0060\r\n\r\nIt is a bit strange that the dotnet publish command magically adds this, but Visual Studio does not.\r\n\r\nI have a bigger project which I converted from ASP.NET MVC to simple Web API with AOT. I have not configured any publish profile in VS but got the \u0022Microsoft.AspNetCore\u0022 error after publishing on the command line. Adding the SelfContained settings to the csproj fixed the issue.\r\n\r\nMaybe it makes sense to update the [AOT Docu](https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/?tabs=net8plus%2Cwindows) and mention the SelfContained settings there. Or at least explain when it is necessary and when not.",
        "createdAt": "2024-08-08T08:26:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50694#issuecomment-2275243955"
      },
      {
        "id": "IC_kwDOAQzde86Hp_Vp",
        "parentId": null,
        "author": "eerhardt",
        "content": "@vijayrkn - is Visual Studio doing something special here? When setting \u0060PublishAot=true\u0060, SelfContained is supposed to be defaulted to true.\r\n\r\nSee\r\n\r\nhttps://github.com/dotnet/sdk/blob/196789faffa0e93c86061e44bb9d1852f10d09bc/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.RuntimeIdentifierInference.targets#L67-L85\r\n\r\nIs Visual Studio explicitly setting \u0060SelfContained=false\u0060?\r\n\r\nIs it pointing to the wrong publish output folder?  (In this case \u0060bin\\Release\\net8.0\\publish\u0060 should be \u0060bin\\Release\\net8.0\\win-x64\\publish\u0060.",
        "createdAt": "2024-08-08T14:10:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50694#issuecomment-2275931497"
      },
      {
        "id": "IC_kwDOAQzde86RwpyI",
        "parentId": null,
        "author": "ZenMaxe",
        "content": "\u003E [@vijayrkn](https://github.com/vijayrkn) - is Visual Studio doing something special here? When setting \u0060PublishAot=true\u0060, SelfContained is supposed to be defaulted to true.\n\u003E \n\u003E See\n\u003E \n\u003E https://github.com/dotnet/sdk/blob/196789faffa0e93c86061e44bb9d1852f10d09bc/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.RuntimeIdentifierInference.targets#L67-L85\n\u003E \n\u003E Is Visual Studio explicitly setting \u0060SelfContained=false\u0060?\n\u003E \n\u003E Is it pointing to the wrong publish output folder? (In this case \u0060bin\\Release\\net8.0\\publish\u0060 should be \u0060bin\\Release\\net8.0\\win-x64\\publish\u0060.\n\nThe problem relates to the target runtime.\n\nAs noted in [my previous comment](https://github.com/dotnet/aspnetcore/issues/50694#issuecomment-1942000449), using the default publish option, Visual Studio publishes it as \u0022Any CPU.\u0022 However, if you specify \u0022Self-Contained\u0022 or set a specific CPU architecture, the issue is resolved.\n\nI believe this happens because, with AOT, the CPU architecture must be specified during publishing, which Visual Studio doesn\u2019t automatically handle, causing the problem.\n\n\u0060Native AOT does have limited support for cross-architecture compilation\u0060 ([Microsoft](https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/cross-compile#:~:text=Native%20AOT%20does%20have%20limited%20support%20for%20cross%2Darchitecture%20compilation)).",
        "createdAt": "2024-10-29T22:35:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50694#issuecomment-2445450376"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85xKDkV",
    "title": "Should we disable asp0014 when using \u0060WebApplication.CreateEmptyBuilder()\u0060",
    "url": "https://github.com/dotnet/aspnetcore/issues/50732",
    "createdAt": "2023-09-15T13:42:07Z",
    "lastUpdated": "2024-02-13T01:24:11Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nSince the empty WebAplicationBuilder would not register routing, maybe we could disable the \u0060ASP0014\u0060 using top-level route registrations diagnostic?\r\n\r\nWe may use the code like below, currently we would get \u0060ASP0014\u0060 warning\r\n![image](https://github.com/dotnet/aspnetcore/assets/7604648/43c77567-5609-4531-aa98-95d9ee910e53)\r\n\r\n\u0060\u0060\u0060 c#\r\nvar builder = WebApplication.CreateEmptyBuilder(new WebApplicationOptions());\r\nbuilder.Services.AddRoutingCore();\r\nbuilder.WebHost.UseKestrelCore();\r\nbuilder.Logging.AddConsole();\r\n\r\nvar app = builder.Build();\r\n\r\napp.UseRouting();\r\napp.UseEndpoints(endpoints =\u003E \r\n{\r\n    endpoints.MapGet(\u0022/\u0022, () =\u003E \u0022Hello World\u0022);\r\n});\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\n\r\n- https://github.com/dotnet/aspnetcore/pull/49246\r\n- https://learn.microsoft.com/en-us/aspnet/core/diagnostics/asp0014\n\n### Describe the solution you\u0027d like\n\nIgnore it when using the empty \u0060WebApplicationBuilder\u0060 since no default global routing\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85moAH-",
        "parentId": null,
        "author": "captainsafia",
        "content": "Thanks for the bug report, @WeihanLi! Yes, we should avoid emitting this diagnostic for web apps not configured with the routing middleware.\r\n\r\nLet me see how easy this is to fix on the analyzer side...",
        "createdAt": "2023-09-15T19:48:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50732#issuecomment-1721762302"
      },
      {
        "id": "IC_kwDOAQzde85nPs3Q",
        "parentId": null,
        "author": "david-acker",
        "content": "I just took a quick look, but it seems like this would be relatively straight forward. Right now we\u0027re emitting the diagnostic for any method on \u0060WebApplication\u0060.\r\n\r\nMaybe we could pass an array of excluded method symbols  to the \u0060IsDisallowedMethod\u0060 method in \u0060WebApplicationBuilderAnalyzer\u0060? That way we could check that the method we\u0027re analyzing isn\u0027t one we want to exclude, after we check the method\u0027s containing type [here](https://github.com/dotnet/aspnetcore/blob/0126698158fcdf06596e36899424403d0a45847f/src/Framework/AspNetCoreAnalyzers/src/Analyzers/WebApplicationBuilder/WebApplicationBuilderAnalyzer.cs#L352C17-L352C94). \r\n\r\nEdit: I took a closer look into this, and it\u0027s definitely not as straightforward as I originally thought, as discussed below.",
        "createdAt": "2023-09-23T01:21:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50732#issuecomment-1732169168"
      },
      {
        "id": "IC_kwDOAQzde85nQw7a",
        "parentId": null,
        "author": "WeihanLi",
        "content": "Seemed we\u0027re emitting the \u0060ASP0014\u0060 diagnostic for \u0060UseEndpoints\u0060 method only, we may need to distinguish whether the \u0060WebApplication\u0060 is an empty web application, if it is, we may need to exclude it, while it seems there\u0027s no property or something indicates if it\u0027s empty for now",
        "createdAt": "2023-09-24T01:12:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50732#issuecomment-1732447962"
      },
      {
        "id": "IC_kwDOAQzde85nXMBZ",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Seemed we\u0027re emitting the ASP0014 diagnostic for UseEndpoints method only, we may need to distinguish whether the WebApplication is an empty web application, if it is, we may need to exclude it, while it seems there\u0027s no property or something indicates if it\u0027s empty for now\r\n\r\nYep! The challenge here is that we want to continue emitting the warning about \u0060UseEndpoints\u0060 for non-empty \u0060WebApplicationBuilder\u0060s. There\u0027s not a straightforward way for us to determine if a given builder is empty or not unless we do some flow analysis to determine if it was constructed via \u0060CreateEmptyBuilder.\u0060",
        "createdAt": "2023-09-25T16:55:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50732#issuecomment-1734131801"
      },
      {
        "id": "IC_kwDOAQzde85whPp2",
        "parentId": null,
        "author": "captainsafia",
        "content": "Backlogging this for now. Was hopping I\u0027d be able to tackle this for 9.0-preview1 but that turned out to not be the case.\r\n\r\nPRs welcome on this though!",
        "createdAt": "2024-01-11T18:49:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50732#issuecomment-1887763062"
      },
      {
        "id": "IC_kwDOAQzde85whPuH",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2024-01-11T18:50:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50732#issuecomment-1887763335"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85xzR6A",
    "title": "ASP0001 warning (UseAuthorization should appear between UseRouting and UseEndpoints is incorrectly reported when middleware is nested in app.Map",
    "url": "https://github.com/dotnet/aspnetcore/issues/50880",
    "createdAt": "2023-09-22T17:19:43Z",
    "lastUpdated": "2024-02-13T01:23:32Z",
    "body": "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/ASP0001-warning-UseAuthorization-should/10468655)._\n\n---\nThe warning \u201CThe call to UseAuthorization should appear between app. UseRouting and app. UseEndpoints(\u2026) for authorization to be correctly use\u201D. is incorrectly reported in the below scenario:\n\n\u0060\u0060\u0060  \n        app. Map(\u0022/api\u0022, api =\u003E\n        {\n            api. UseRouting();\n            api. UseAuthentication();\n            api. UseAuthorization();\n            api. UseEndpoints(endpoints =\u003E\n            {\n                endpoints. MapControllers()\n               . RequireAuthorization();\n            });\n        });\n\n\u0060\u0060\u0060\nThis code does not evoke the warning if placed outside the \u0060Map\u0060 block\n\n---\n### Original Comments\n\n#### Feedback Bot on 9/18/2023, 08:18 PM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)",
    "upvotes": 0,
    "labels": [
      "bug",
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85vj_J8",
        "parentId": null,
        "author": "captainsafia",
        "content": "I wasn\u0027t able to repro this issue on the following code sample:\r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddAuthorization();\r\n\r\nvar app = builder.Build();\r\n\r\napp.Map(\u0022/api\u0022, api =\u003E\r\n{\r\n    api.UseRouting();\r\n    api.UseAuthentication();\r\n    api.UseAuthorization();\r\n    api.UseEndpoints(endpoints =\u003E\r\n    {\r\n        endpoints.MapControllers().RequireAuthorization();\r\n    });\r\n});\r\n\r\n\r\napp.Run();\r\n\r\n\u0060\u0060\u0060\r\n\r\nIs there a chance there are other middlewares configured in this application?",
        "createdAt": "2023-12-29T03:38:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50880#issuecomment-1871704700"
      },
      {
        "id": "IC_kwDOAQzde85vj_LV",
        "parentId": null,
        "author": "??",
        "content": "Hi @vsfeedback. We have added the \u0022Needs: Author Feedback\u0022 label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
        "createdAt": "2023-12-29T03:39:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50880#issuecomment-1871704789"
      },
      {
        "id": "IC_kwDOAQzde85vk4vB",
        "parentId": null,
        "author": "k290",
        "content": "Apologies, it appears when there are other mappings included below. Here is the corrected example:\r\n\r\n\u0060\u0060\u0060\r\n app.Map(\u0022/api\u0022, api =\u003E\r\n {\r\n     api.UseRouting();\r\n     api.UseAuthentication();\r\n     api.UseAuthorization();\r\n     api.UseEndpoints(endpoints =\u003E\r\n     {\r\n         endpoints.MapControllers()\r\n        .RequireAuthorization();\r\n     });\r\n });\r\n\r\n app.Map(\u0022\u0022, api =\u003E\r\n {\r\n     api.UseRouting();\r\n     api.UseEndpoints(ep =\u003E\r\n     {\r\n         ep.MapFallbackToFile(\u0022index.html\u0022);\r\n     });\r\n });\r\n \u0060\u0060\u0060",
        "createdAt": "2023-12-29T10:43:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50880#issuecomment-1871940545"
      },
      {
        "id": "IC_kwDOAQzde85vsSwm",
        "parentId": null,
        "author": "??",
        "content": "This issue has been automatically marked as stale because it has been marked as requiring author feedback but has not had any activity for **4 days**. It will be closed if no further activity occurs **within 3 days of this comment**. If it *is* closed, feel free to comment when you are able to provide the additional information and we will re-investigate.\n\nSee [our Issue Management Policies](https://aka.ms/aspnet/issue-policies) for more information.",
        "createdAt": "2024-01-02T11:00:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50880#issuecomment-1873882150"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85yNMa9",
    "title": "MinimalApi MapMethods with muti methods use WithOpenApi() throw Error!",
    "url": "https://github.com/dotnet/aspnetcore/issues/50965",
    "createdAt": "2023-09-27T17:55:32Z",
    "lastUpdated": "2024-09-10T20:04:47Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\n![image](https://github.com/dotnet/aspnetcore/assets/13956765/a3a16896-c2e0-4929-bbe1-24ada485959d)\r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/13956765/932dc927-f1a4-498f-b91b-c40c1cec4849)\r\n\r\nboth .net7 \u0026 .net8 error \r\n\r\n\r\nSystem.Linq.ThrowHelper.ThrowMoreThanOneElementException()\r\nSystem.Linq.Enumerable.TryGetSingle\u003CTSource\u003E(IEnumerable\u003CTSource\u003E source, out bool found)\r\nSystem.Linq.Enumerable.SingleOrDefault\u003CTSource\u003E(IEnumerable\u003CTSource\u003E source)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiGenerator.GetOpenApiOperation(MethodInfo methodInfo, EndpointMetadataCollection metadata, RoutePattern pattern)\r\nMicrosoft.AspNetCore.Builder.OpenApiEndpointConventionBuilderExtensions.AddAndConfigureOperationForEndpoint(EndpointBuilder endpointBuilder, Func\u003COpenApiOperation, OpenApiOperation\u003E configure)\r\nMicrosoft.AspNetCore.Builder.OpenApiEndpointConventionBuilderExtensions\u002B\u003C\u003Ec__DisplayClass1_0\u003CTBuilder\u003E.\u003CWithOpenApi\u003Eb__0(EndpointBuilder endpointBuilder)\r\nMicrosoft.AspNetCore.Routing.RouteEndpointDataSource.CreateRouteEndpointBuilder(RouteEntry entry, RoutePattern groupPrefix, IReadOnlyList\u003CAction\u003CEndpointBuilder\u003E\u003E groupConventions, IReadOnlyList\u003CAction\u003CEndpointBuilder\u003E\u003E groupFinallyConventions)\r\nMicrosoft.AspNetCore.Routing.RouteEndpointDataSource.get_Endpoints()\r\nMicrosoft.AspNetCore.Routing.CompositeEndpointDataSource.CreateEndpointsUnsynchronized()\r\nMicrosoft.AspNetCore.Routing.CompositeEndpointDataSource.EnsureEndpointsInitialized()\r\nMicrosoft.AspNetCore.Routing.DataSourceDependentCache\u003CT\u003E.Initialize()\r\nSystem.Threading.LazyInitializer.EnsureInitializedCore\u003CT\u003E(ref T target, ref bool initialized, ref object syncLock, Func\u003CT\u003E valueFactory)\r\nMicrosoft.AspNetCore.Routing.Matching.DataSourceDependentMatcher..ctor(EndpointDataSource dataSource, Lifetime lifetime, Func\u003CMatcherBuilder\u003E matcherBuilderFactory)\r\nMicrosoft.AspNetCore.Routing.Matching.DfaMatcherFactory.CreateMatcher(EndpointDataSource dataSource)\r\nMicrosoft.AspNetCore.Routing.EndpointRoutingMiddleware.InitializeCoreAsync()\r\nMicrosoft.AspNetCore.Routing.EndpointRoutingMiddleware.\u003CInvoke\u003Eg__AwaitMatcher|8_0(EndpointRoutingMiddleware middleware, HttpContext httpContext, Task\u003CMatcher\u003E matcherTask)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.11\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85nlt-e",
        "parentId": null,
        "author": "captainsafia",
        "content": "@vipwan Thanks for reporting this issue!\r\n\r\nYes, unfortunately, this is a known limitation of the current design. We only support emitting one OpenApiOperation per endpoint so multiple HTTP methods are not supported since they require multiple OpenApiOperations per endpoint definition.\r\n\r\nIf it\u0027s possible for you, I\u0027d recommend using a combination of route groups and local methods to get the desired behavior.\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapMethods(\u0022/hello\u0022, new[] { \u0022GET\u0022, \u0022POST\u0022 }, () =\u003E Results.Ok()).WithOpenApi();\r\n// becomes\r\nvar hello = app.MapGroup(\u0022/hello\u0022).WithOpenApi();\r\nIResult GetHello() =\u003E Results.Ok();\r\nhello.MapGet(\u0022\u0022, GetHello);\r\nhello.MapPost(\u0022\u0022, GetHello);\r\n\u0060\u0060\u0060",
        "createdAt": "2023-09-27T19:12:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50965#issuecomment-1737940894"
      },
      {
        "id": "IC_kwDOAQzde85nluPV",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 9 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-09-27T19:13:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50965#issuecomment-1737941973"
      },
      {
        "id": "IC_kwDOAQzde85nl1hi",
        "parentId": null,
        "author": "vipwan",
        "content": "\u003E @vipwan Thanks for reporting this issue!\r\n\u003E \r\n\u003E \u662F\u7684\uFF0C\u4E0D\u5E78\u7684\u662F\uFF0C\u8FD9\u662F\u5F53\u524D\u8BBE\u8BA1\u7684\u5DF2\u77E5\u9650\u5236\u3002\u6211\u4EEC\u4EC5\u652F\u6301\u4E3A\u6BCF\u4E2A\u7AEF\u70B9\u53D1\u51FA\u4E00\u4E2A OpenApiOperation\uFF0C\u56E0\u6B64\u4E0D\u652F\u6301\u591A\u4E2A HTTP \u65B9\u6CD5\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u9700\u8981\u6BCF\u4E2A\u7AEF\u70B9\u5B9A\u4E49\u591A\u4E2A OpenApiOperations\u3002\r\n\u003E \r\n\u003E \u5982\u679C\u53EF\u80FD\u7684\u8BDD\uFF0C\u6211\u5EFA\u8BAE\u7ED3\u5408\u4F7F\u7528\u8DEF\u7531\u7EC4\u548C\u672C\u5730\u65B9\u6CD5\u6765\u83B7\u5F97\u6240\u9700\u7684\u884C\u4E3A\u3002\r\n\u003E \r\n\u003E \u0060\u0060\u0060cs\r\n\u003E app.MapMethods(\u0022/hello\u0022, new[] { \u0022GET\u0022, \u0022POST\u0022 }, () =\u003E Results.Ok()).WithOpenApi();\r\n\u003E // becomes\r\n\u003E var hello = app.MapGroup(\u0022/hello\u0022).WithOpenApi();\r\n\u003E IResult GetHello() =\u003E Results.Ok();\r\n\u003E hello.MapGet(\u0022\u0022, GetHello);\r\n\u003E hello.MapPost(\u0022\u0022, GetHello);\r\n\u003E \u0060\u0060\u0060\r\n\r\nIt solves the problem, but this writing is really verbose, and I still hope to add relevant features in the future \uD83D\uDE04 ",
        "createdAt": "2023-09-27T19:39:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50965#issuecomment-1737971810"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85yamqf",
    "title": "Installing just ASP.Net Core Runtime Windows Hosting Bundle has different behavior than Dotnet SDK",
    "url": "https://github.com/dotnet/aspnetcore/issues/51023",
    "createdAt": "2023-09-29T16:25:43Z",
    "lastUpdated": "2024-02-13T01:22:44Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nRelated issue on Dotnet SDK: [sdk/issues/35691](https://github.com/dotnet/sdk/issues/35691)\r\n\r\nIn windows VM, I have installed Hosting Bundle(7.0.11) and the path component of a web api address is ignored when making web api calls, and I found a work around which is using SubdirectoryHandler like in this article: [Calling gRPC services hosted in a sub-directory](https://learn.microsoft.com/en-us/aspnet/core/grpc/troubleshoot?view=aspnetcore-7.0#calling-grpc-services-hosted-in-a-sub-directory)\r\n\r\n### Expected Behavior\r\nIt should behave same which not loosing the sub-directory on Hosting Bundle.\r\n\r\n\r\n### Steps To Reproduce\r\n\r\n1. Install only ASP.Net Core Runtime Windows Hosting Bundle((7.0.11),\r\n\r\nI have reproduce it on test server with just Hosting Bundle installed.\r\nAlso on my computer where I had already installed dotnet sdk(7.0.401) and I installed Hosting Bundle over it.\r\n\r\n2. From an asp.net core application hosted in local IIS, create a HttpClient with base address using sub-directory ex. https://xxxx/api. When you want to call api, you will lose sub-directory from the request URL.\r\n3. If on dev computer uninstall the Hosting Bundle with only dotnet sdk installed, everything comes back to normal\r\n\r\n### Exceptions (if any)\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.401\r\n\r\n### Anything else?\r\n\r\n.NET SDKs installed:\r\n5.0.416 [C:\\Program Files\\dotnet\\sdk]\r\n6.0.317 [C:\\Program Files\\dotnet\\sdk]\r\n7.0.304 [C:\\Program Files\\dotnet\\sdk]\r\n7.0.308 [C:\\Program Files\\dotnet\\sdk]\r\n7.0.401 [C:\\Program Files\\dotnet\\sdk]\r\n8.0.100-preview.5.23303.2 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\nMicrosoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 6.0.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 8.0.0-preview.5.23302.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 6.0.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 8.0.0-preview.5.23280.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\nMicrosoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\nMicrosoft.WindowsDesktop.App 6.0.22 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\nMicrosoft.WindowsDesktop.App 7.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\nMicrosoft.WindowsDesktop.App 7.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\nMicrosoft.WindowsDesktop.App 8.0.0-preview.5.23302.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\nx86 [C:\\Program Files (x86)\\dotnet]\r\nregistered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\nNot set\r\n\r\nglobal.json file:\r\nNot found\r\n\r\nLearn more:\r\nhttps://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\nhttps://aka.ms/dotnet/download\r\n\r\nMicrosoft Visual Studio Enterprise 2022 (64-bit) - Current Version 17.7.4\r\n\r\nEdition Windows 11 Enterprise\r\nVersion 22H2\r\nInstalled on \u200E27/\u200E09/\u200E2022\r\nOS build 22621.2283\r\nSerial number PF33B3FE\r\nExperience Windows Feature Experience Pack 1000.22662.1000.0\r\n\r\nInternet Information Services (Version 10.0,22621,1)",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85zNLVX",
    "title": "Automatically create OpenApiParameters when using BindAsync in Minimal API",
    "url": "https://github.com/dotnet/aspnetcore/issues/51218",
    "createdAt": "2023-10-09T11:14:09Z",
    "lastUpdated": "2024-10-03T09:38:55Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI\u0027m trying to migrate my controllers-based project to .NET 7 minimal API.\r\nIn the old project, I have multiple custom value providers (FromClaim, FromHeaderPart, etc).\r\n\r\nIn minimal API we can have custom model binding using [BindAsync](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/parameter-binding?view=aspnetcore-7.0#bindasync), but when using this approach we don\u0027t get any params in SwaggerUI.\r\n\r\nTo display parameters we must add this code:\r\n\u0060\u0060\u0060C#\r\n.WithOpenApi(operation =\u003E\r\n{\r\n    operation.Parameters.Add(new OpenApiParameter\r\n    {\r\n        Name = \u0022sortBy\u0022,\r\n        Schema = new OpenApiSchema\r\n        {\r\n            Type = \u0022string\u0022,\r\n            Default = new OpenApiString(\u0022\u0022)\r\n        },\r\n        Description = \u0022Sort by\u0022,\r\n        Required = false,\r\n        In = ParameterLocation.Query\r\n    });\r\n\r\n    operation.Parameters.Add(new OpenApiParameter\r\n    {\r\n        Name = \u0022sortDir\u0022,\r\n        Schema = new OpenApiSchema\r\n        {\r\n            Type = \u0022string\u0022,\r\n            Default = new OpenApiString(\u0022asc\u0022),\r\n            Enum = new List\u003CIOpenApiAny\u003E\r\n            {\r\n                new OpenApiString(\u0022asc\u0022),\r\n                new OpenApiString(\u0022desc\u0022)\r\n            }\r\n        },\r\n        Description = \u0022Sort direction\u0022,\r\n        Required = true,\r\n        In = ParameterLocation.Query\r\n    });\r\n\r\n    operation.Parameters.Add(new OpenApiParameter\r\n    {\r\n        Name = \u0022page\u0022,\r\n        Schema = new OpenApiSchema\r\n        {\r\n            Type = \u0022integer\u0022,\r\n            Default = new OpenApiInteger(1)\r\n        },\r\n        Description = \u0022Page number\u0022,\r\n        Required = true,\r\n        In = ParameterLocation.Query\r\n    });\r\n\r\n    return operation;\r\n\r\n});\r\n\u0060\u0060\u0060\r\n\r\nIdeally, this should be done automatically based on attributes\n\n### Describe the solution you\u0027d like\n\nIdeally, we should be able to annotate properties that are binding from known places with attributes.\r\nSo the above \u0060WithOpenApi\u0060 could be omitted and a valid list of parameters would be created automatically.\r\nWe could use attributes from \u0060Microsoft.AspNetCore.Mvc\u0060 or create new ones if needed.\r\n \r\n\u0060\u0060\u0060C#\r\npublic class MyCustomParameters\r\n{\r\n    [FromQuery]\r\n    public string? SortBy { get; init; }\r\n\r\n    [FromQuery]\r\n    [Required]\r\n    public SortDirection Sort { get; init; }\r\n\r\n    [FromQuery]\r\n    [Required]\r\n    public int CurrentPage { get; init; } = 1;\r\n\r\n    public static ValueTask\u003CMyCustomParameters?\u003E BindAsync(HttpContext context, ParameterInfo parameter)\r\n    {\r\n        const string sortByKey = \u0022sortBy\u0022;\r\n        const string sortDirectionKey = \u0022sortDir\u0022;\r\n        const string currentPageKey = \u0022page\u0022;\r\n\r\n        Enum.TryParse\u003CSortDirection\u003E(context.Request.Query[sortDirectionKey],ignoreCase: true, out var sortDirection);\r\n        int.TryParse(context.Request.Query[currentPageKey], out var page);\r\n        page = page == 0 ? 1 : page;\r\n\r\n        var result = new MyCustomParameters\r\n        {\r\n            SortBy = context.Request.Query[sortByKey],\r\n            Sort = sortDirection,\r\n            CurrentPage = page\r\n        };\r\n\r\n        return ValueTask.FromResult\u003CMyCustomParameters?\u003E(result);\r\n    }\r\n\r\n    public enum SortDirection\r\n    {\r\n        Asc,\r\n        Desc\r\n    }\r\n}\r\n\u0060\u0060\u0060\n\n### Additional context\n\nMy main idea is to remove repetitive code that must be added for each endpoint that is using custom binding.",
    "upvotes": 1,
    "labels": [
      "feature-openapi",
      "feature-minimal-actions",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85oexSi",
        "parentId": null,
        "author": "Misiu",
        "content": "My current approach involves a custom OperationFilter which supports \u0060FromQuery\u0060 params and has major limitations, but maybe it will help someone having a similar problem.\r\n\r\n\u0060\u0060\u0060C#\r\npublic class BindAsyncOperationFilter : IOperationFilter\r\n{\r\n    public void Apply(OpenApiOperation operation, OperationFilterContext context)\r\n    {\r\n        var models = context.MethodInfo.GetParameters()\r\n            .Where(p =\u003E p.ParameterType.IsClass)\r\n            .ToList();\r\n\r\n        if (models.Count != 1)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var model = models.First();\r\n\r\n        //check if the model has a public static BindAsync method\r\n        var bindAsyncMethod = model.ParameterType.GetMethod(\u0022BindAsync\u0022, BindingFlags.Public | BindingFlags.Static);\r\n        if (bindAsyncMethod == null)\r\n        {\r\n            return;\r\n        }\r\n\r\n        //get all public properties from the model that have \u0060FromQuery\u0060 attribute\r\n        var fromQueryProperties = model.ParameterType.GetProperties(BindingFlags.Public | BindingFlags.Instance)\r\n            .Where(p =\u003E p.GetCustomAttribute\u003CFromQueryAttribute\u003E() != null)\r\n            .ToList();\r\n\r\n        foreach (var property in fromQueryProperties)\r\n        {\r\n            //get property type\r\n            var propertyType = property.PropertyType;\r\n            //check if the property is nullable\r\n            if (propertyType.IsGenericType \u0026\u0026 propertyType.GetGenericTypeDefinition() == typeof(Nullable\u003C\u003E))\r\n            {\r\n                propertyType = propertyType.GetGenericArguments()[0];\r\n            }\r\n\r\n            var schema = new OpenApiSchema\r\n            {\r\n                Type = propertyType == typeof(int) ? \u0022integer\u0022 : \u0022string\u0022,\r\n            };\r\n\r\n            if (propertyType.IsEnum)\r\n            {\r\n                var enumValues = Enum.GetValues(propertyType)\r\n                    .Cast\u003Cobject\u003E()\r\n                    .Select(v =\u003E v.ToString()?.ToLowerInvariant())\r\n                    .ToList();\r\n\r\n                schema.Enum = new List\u003CIOpenApiAny\u003E(enumValues.Select(v =\u003E new OpenApiString(v)));\r\n            }\r\n\r\n            var name = property.Name;\r\n            //check if the property has JsonPropertyName attribute\r\n            var jsonPropertyName = property.GetCustomAttribute\u003CJsonPropertyNameAttribute\u003E();\r\n            if (jsonPropertyName != null)\r\n            {\r\n                name = jsonPropertyName.Name;\r\n            }\r\n\r\n            //check if the property has Required attribute\r\n            var isRequired = property.GetCustomAttribute\u003CRequiredAttribute\u003E() != null;\r\n\r\n            operation.Parameters.Add(new OpenApiParameter\r\n            {\r\n                Name = name,\r\n                Schema = schema,\r\n                Required = isRequired,\r\n                In = ParameterLocation.Query\r\n            });\r\n        }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nIf there are better ways of doing this, or maybe something built in, please let me know.",
        "createdAt": "2023-10-09T12:14:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51218#issuecomment-1752896674"
      },
      {
        "id": "IC_kwDOAQzde85orAZh",
        "parentId": null,
        "author": "captainsafia",
        "content": "@Misiu Thanks for reporting this issue and brainstorming some solutions!\r\n\r\nAs you mentioned, it\u0027s challenging to provide OpenAPI annotations for \u0060BindAsync\u0060 types because, unlike other types, they are a block box to the framework with regard to where they source values from.\r\n\r\nThe proposed solutions works, but when I squint at it, it\u0027s difficult to tell the difference between using the source attributes in a \u0060BindAsync\u0060 type or using \u0060AsParameters\u0060 to create a surrogate parameter. I worry about blurring the boundary between the two by adding support for this feature.\r\n\r\nAnother solution might be to provide a way for a BindAsync type to describe its annotations to OpenAPI.",
        "createdAt": "2023-10-10T19:35:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51218#issuecomment-1756104289"
      },
      {
        "id": "IC_kwDOAQzde85ouyVi",
        "parentId": null,
        "author": "Misiu",
        "content": "@captainsafia Thank you for the reply.\r\nThe model that I added in my initial post was just am example. In the app that I\u0027m rewriting, I read values from multiple places - query, body, headers, and claims principal. I parse values (for example I pass two IDs separated by a comma in the header).\r\n\u0060AsParameters\u0060 is great for simple types, but when you need something more complex the only option, for now, is \u0060BindAsync\u0060.\r\n\r\nThe provided filter was just an example, but I\u0027m already working on adding support for other attributes, so when my command is taking values from standard places I want SwaggerUI to show those parameters.\r\n\r\n\r\nThe next missing thing in \u0060BindAsync\u0060 approach is no way to return info about invalid parameters, For now, we can return \u0060ValueTask.FromResult\u003CPagingData?\u003E(result)\u0060 or \u0060return ValueTask.FromResult\u003CPagingData?\u003E(null);\u0060, when doing the second we get this error:\r\n\r\n\r\n\u003E Microsoft.AspNetCore.Http.BadHttpRequestException: Required parameter \u0022PagingData model\u0022 was not provided from PagingData.BindAsync(HttpContext).\r\n\r\nIdeally, we should be able to return custom errors per property and finally return 400 or 422.\r\nMaybe there is some built-in way, if yes, then please let me know.",
        "createdAt": "2023-10-11T08:17:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51218#issuecomment-1757095266"
      },
      {
        "id": "IC_kwDOAQzde85oyzLY",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E In the app that I\u0027m rewriting, I read values from multiple places - query, body, headers, and claims principal.\r\n\r\nIndeed. Some of these sources map to concepts that exist in OpenAPI (query, body) but a claims principal doesn\u0027t have a source in the same sense.\r\n\r\n\u003E The provided filter was just an example, but I\u0027m already working on adding support for other attributes, so when my command is taking values from standard places I want SwaggerUI to show those parameters.\r\n\r\nCan you provide examples of these other attributes?\r\n\r\nAll in all, I\u0027m incline to think that the solution might be providing a syntax on BindAsync for a type to be able to declare where it\u0027s parameters are sourced from.\r\n\r\n\u003E The next missing thing in BindAsync approach is no way to return info about invalid parameters, For now, we can return ValueTask.FromResult\u003CPagingData?\u003E(result) or return ValueTask.FromResult\u003CPagingData?\u003E(null);, when doing the second we get this error:\r\n\r\nInteresting -- can you file a new issue for this?",
        "createdAt": "2023-10-11T17:20:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51218#issuecomment-1758147288"
      },
      {
        "id": "IC_kwDOAQzde85o2sMM",
        "parentId": null,
        "author": "Misiu",
        "content": "\u003E Can you provide examples of these other attributes?\r\n\r\nI was thinking about standard \u0060From*\u0060 attributes, ref: https://learn.microsoft.com/en-us/aspnet/core/mvc/models/model-binding?view=aspnetcore-7.0#sources\r\nThe idea is to add those attributes to properties that are retrieved from the standard places (places that can be added as OpenApiParameter).\r\n\r\nThis is a simple model I have in my old app:\r\n\u0060\u0060\u0060\r\npublic sealed class PasswordSignIn : ICommand\u003CSignInResultDto\u003E\r\n{\r\n    [FromHeader(Name = \u0022TenantId\u0022)]\r\n    [NotDefault]\r\n    [Required]\r\n    public Guid TenantId { get; init; }\r\n\r\n    [Required]\r\n    [Email]\r\n    public string UserName { get; init; } = null!;\r\n    \r\n    [Required]\r\n    public string Password { get; init; } = null!;\r\n\r\n    public string? FcmToken { get; init; }\r\n\r\n    [FromHeader(Name = \u0022DeviceId\u0022)]\r\n    [NotDefault]\r\n    [Required]\r\n    public Guid DeviceId { get; init; }\r\n\r\n    [FromZoneIdHeader(ZoneIdHeaderParts.ZoneId)]\r\n    [NotDefault]\r\n    [Required]\r\n    public Guid ZoneId { get; init; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThis shows well in Swagger (in old all), but when using the minimal API  with the \u0060BindAsync\u0060 approach I\u0027m unable to generate a valid Swagger (without adding extra code as shown in my initial message), so the endpoint can\u0027t be called via SwaggerUI.\r\n\r\nI need to use \u0060BindAsync\u0060, because I mix body (UserName, Password, FcmToken), with header (TenantId, DeviceId, ZoneId) and sometimes read values from claims.\r\n\r\n\u003E Interesting -- can you file a new issue for this?\r\n\r\n\uD83D\uDE42 https://github.com/dotnet/aspnetcore/issues/51318\r\n\r\n",
        "createdAt": "2023-10-12T08:29:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51218#issuecomment-1759167244"
      },
      {
        "id": "IC_kwDOAQzde85tBhB5",
        "parentId": null,
        "author": "captainsafia",
        "content": "@Misiu Sorry for taking a while to get back to you here!\r\n\r\nI\u0027m warming up to the idea of using \u0060[FromX]\u0060 attributes to define the source of properties in a \u0060BindAsync\u0060-able type. My previous stance on this was a little too puritan, I believe that the attributes should only be applied on properties/parameters where the binding was handled by the framework. I didn\u0027t feel comfortable extending these to be generic markers to identifying the source of an attribute, particularly because they have a legacy in MVC.\r\n\r\nI think I\u0027m more comfortable with treating them as marker attributes now but want to explore the scenario further.\r\n\r\nBut admittedly, this feature would probably rank pretty low on the priority scale, unfortunately. At the moment, the operation filter does seem like the most capable approach.\r\n\r\nI\u0027m backlogging this but we can revisit as we plan out the OpenAPI area some more.",
        "createdAt": "2023-11-28T05:05:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51218#issuecomment-1829113977"
      },
      {
        "id": "IC_kwDOAQzde85tBhFc",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-11-28T05:06:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51218#issuecomment-1829114204"
      },
      {
        "id": "IC_kwDOAQzde86Kxcay",
        "parentId": null,
        "author": "Misiu",
        "content": "@captainsafia maybe this can be added to .NET 10 Planning Milestone?",
        "createdAt": "2024-09-04T08:19:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51218#issuecomment-2328217266"
      },
      {
        "id": "IC_kwDOAQzde86OgzvK",
        "parentId": null,
        "author": "Talento90",
        "content": "\u003E My current approach involves a custom OperationFilter which supports \u0060FromQuery\u0060 params and has major limitations, but maybe it will help someone having a similar problem.\r\n\u003E \r\n\u003E \u0060\u0060\u0060cs\r\n\u003E public class BindAsyncOperationFilter : IOperationFilter\r\n\u003E {\r\n\u003E     public void Apply(OpenApiOperation operation, OperationFilterContext context)\r\n\u003E     {\r\n\u003E         var models = context.MethodInfo.GetParameters()\r\n\u003E             .Where(p =\u003E p.ParameterType.IsClass)\r\n\u003E             .ToList();\r\n\u003E \r\n\u003E         if (models.Count != 1)\r\n\u003E         {\r\n\u003E             return;\r\n\u003E         }\r\n\u003E \r\n\u003E         var model = models.First();\r\n\u003E \r\n\u003E         //check if the model has a public static BindAsync method\r\n\u003E         var bindAsyncMethod = model.ParameterType.GetMethod(\u0022BindAsync\u0022, BindingFlags.Public | BindingFlags.Static);\r\n\u003E         if (bindAsyncMethod == null)\r\n\u003E         {\r\n\u003E             return;\r\n\u003E         }\r\n\u003E \r\n\u003E         //get all public properties from the model that have \u0060FromQuery\u0060 attribute\r\n\u003E         var fromQueryProperties = model.ParameterType.GetProperties(BindingFlags.Public | BindingFlags.Instance)\r\n\u003E             .Where(p =\u003E p.GetCustomAttribute\u003CFromQueryAttribute\u003E() != null)\r\n\u003E             .ToList();\r\n\u003E \r\n\u003E         foreach (var property in fromQueryProperties)\r\n\u003E         {\r\n\u003E             //get property type\r\n\u003E             var propertyType = property.PropertyType;\r\n\u003E             //check if the property is nullable\r\n\u003E             if (propertyType.IsGenericType \u0026\u0026 propertyType.GetGenericTypeDefinition() == typeof(Nullable\u003C\u003E))\r\n\u003E             {\r\n\u003E                 propertyType = propertyType.GetGenericArguments()[0];\r\n\u003E             }\r\n\u003E \r\n\u003E             var schema = new OpenApiSchema\r\n\u003E             {\r\n\u003E                 Type = propertyType == typeof(int) ? \u0022integer\u0022 : \u0022string\u0022,\r\n\u003E             };\r\n\u003E \r\n\u003E             if (propertyType.IsEnum)\r\n\u003E             {\r\n\u003E                 var enumValues = Enum.GetValues(propertyType)\r\n\u003E                     .Cast\u003Cobject\u003E()\r\n\u003E                     .Select(v =\u003E v.ToString()?.ToLowerInvariant())\r\n\u003E                     .ToList();\r\n\u003E \r\n\u003E                 schema.Enum = new List\u003CIOpenApiAny\u003E(enumValues.Select(v =\u003E new OpenApiString(v)));\r\n\u003E             }\r\n\u003E \r\n\u003E             var name = property.Name;\r\n\u003E             //check if the property has JsonPropertyName attribute\r\n\u003E             var jsonPropertyName = property.GetCustomAttribute\u003CJsonPropertyNameAttribute\u003E();\r\n\u003E             if (jsonPropertyName != null)\r\n\u003E             {\r\n\u003E                 name = jsonPropertyName.Name;\r\n\u003E             }\r\n\u003E \r\n\u003E             //check if the property has Required attribute\r\n\u003E             var isRequired = property.GetCustomAttribute\u003CRequiredAttribute\u003E() != null;\r\n\u003E \r\n\u003E             operation.Parameters.Add(new OpenApiParameter\r\n\u003E             {\r\n\u003E                 Name = name,\r\n\u003E                 Schema = schema,\r\n\u003E                 Required = isRequired,\r\n\u003E                 In = ParameterLocation.Query\r\n\u003E             });\r\n\u003E         }\r\n\u003E     }\r\n\u003E }\r\n\u003E \u0060\u0060\u0060\r\n\u003E \r\n\u003E If there are better ways of doing this, or maybe something built in, please let me know.\r\n\r\nThank you this is quite handy \uD83D\uDC4D  ",
        "createdAt": "2024-10-03T09:38:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51218#issuecomment-2390965194"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85z07w1",
    "title": "[FromForm] in minimal API results in null when the class is using primary constructor and default constructor",
    "url": "https://github.com/dotnet/aspnetcore/issues/51379",
    "createdAt": "2023-10-14T13:13:27Z",
    "lastUpdated": "2024-02-13T01:21:11Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nThe following code works fine when using with [FromForm] model binding\r\n\r\n\u0060\u0060\u0060 csharp\r\npublic class BlogPostInput(string? title, string body)\r\n{\r\n    public string? Title { get; set; } = title;\r\n    public string Body { get; set; } = body;\r\n}\r\n\u0060\u0060\u0060\r\nbut the following class definition will make the binding produce \u0060null\u0060.\r\n\u0060\u0060\u0060 csharp\r\npublic class BlogPostInput(string? title, string body)\r\n{\r\n    public string? Title { get; set; } = title;\r\n    public string Body { get; set; } = body;\r\n\r\n    public BlogPostInput() : this(null, string.Empty)\r\n    {\r\n\r\n    }\r\n}\r\n\u0060\u0060\u0060\n\n### Expected Behavior\n\nIt should just work the same\n\n### Steps To Reproduce\n\n\u0060\u0060\u0060csharp\r\n\r\nusing Microsoft.AspNetCore.Antiforgery;\r\nusing Microsoft.AspNetCore.Mvc;\r\n\r\nvar builder = WebApplication.CreateBuilder();\r\nbuilder.Services.AddAntiforgery();\r\nvar app = builder.Build();\r\napp.UseAntiforgery();\r\napp.MapGet(\u0022/\u0022, (HttpContext context, IAntiforgery antiforgery) =\u003E\r\n{\r\n    var token = antiforgery.GetAndStoreTokens(context);\r\n    return Results.Content(Template($$\u0022\u0022\u0022\r\n            \u003Cdiv class=\u0022row\u0022\u003E\r\n                \u003Cdiv class=\u0022col-md-6\u0022\u003E\r\n                    \u003Cform method=\u0022POST\u0022 action=\u0022/\u0022\u003E\r\n                        \u003Cinput name=\u0022{{token.FormFieldName}}\u0022 type=\u0022hidden\u0022 value=\u0022{{token.RequestToken}}\u0022 /\u003E\r\n                        \u003Cdiv class=\u0022mb-3\u0022\u003E\r\n                            \u003Clabel for=\u0022Title\u0022 class=\u0022form-label\u0022\u003ETitle\u003C/label\u003E\r\n                            \u003Cinput type=\u0022text\u0022 class=\u0022form-control\u0022 id=\u0022Title\u0022 name=\u0022Title\u0022\u003E\r\n                        \u003C/div\u003E\r\n                        \u003Cdiv class=\u0022mb-3\u0022\u003E\r\n                            \u003Clabel for=\u0022Body\u0022 class=\u0022form-label\u0022\u003EBody\u003C/label\u003E\r\n                            \u003Ctextarea class=\u0022form-control\u0022 id=\u0022Body\u0022 name=\u0022Body\u0022 rows=\u00223\u0022\u003E\u003C/textarea\u003E\r\n                        \u003C/div\u003E\r\n                        \u003Cbutton type=\u0022submit\u0022 class=\u0022btn btn-primary\u0022\u003ESubmit\u003C/button\u003E\r\n                    \u003C/form\u003E\r\n                \u003C/div\u003E\r\n            \u003C/div\u003E\r\n    \u0022\u0022\u0022), \u0022text/html\u0022);\r\n});\r\n\r\napp.MapPost(\u0022/\u0022, async ([FromForm] BlogPostInput input, HttpContext context, IAntiforgery antiforgery) =\u003E\r\n{\r\n    try\r\n    {\r\n        await antiforgery.ValidateRequestAsync(context);\r\n        return Results.Content(Template($$\u0022\u0022\u0022\r\n        \u003Cdiv class=\u0022row\u0022\u003E\r\n            \u003Cdiv class=\u0022col-md-6\u0022\u003E\r\n                Title : {{input.Title}}\u003Cbr/\u003E\r\n                Body : {{input.Body}}\r\n            \u003C/div\u003E\r\n        \u003C/div\u003E\r\n\u0022\u0022\u0022), \u0022text/html\u0022);\r\n    }\r\n    catch (AntiforgeryValidationException)\r\n    {\r\n        return TypedResults.BadRequest(\u0022Invalid anti-forgery token\u0022);\r\n    }\r\n});\r\n\r\n\r\napp.Run();\r\n\r\nstatic string Template(string body)\r\n{\r\n    return $$\u0022\u0022\u0022\r\n    \u003Chtml\u003E\r\n    \u003Chead\u003E\r\n      \u003Ctitle\u003EForm Model Binding\u003C/title\u003E\r\n      \u003Clink href=\u0022https://fastly.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\u0022 rel=\u0022stylesheet\u0022 integrity=\u0022sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM\u0022 crossorigin=\u0022anonymous\u0022\u003E\r\n    \u003C/head\u003E\r\n    \u003Cbody\u003E\r\n        \u003Cdiv class=\u0022container\u0022\u003E\r\n            \u003Ch1\u003EForm Model Binding\u003C/h1\u003E\r\n            {{body}}\r\n        \u003C/div\u003E\r\n    \u003C/body\u003E\r\n    \u003C/html\u003E\r\n    \u0022\u0022\u0022;\r\n}\r\n\r\npublic class BlogPostInput(string? title, string body)\r\n{\r\n    public string? Title { get; set; } = title;\r\n    public string Body { get; set; } = body;\r\n\r\n    public BlogPostInput() : this(null, string.Empty)\r\n    {\r\n\r\n    }\r\n}\r\n\u0060\u0060\u0060\n\n### Exceptions (if any)\n\n\u0060\u0060\u0060\r\nfail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \u00220HMUCMJP38BUA\u0022, Request id \u00220HMUCMJP38BUA:00000006\u0022: An unhandled exception was thrown by the application.\r\n      System.NullReferenceException: Object reference not set to an instance of an object.\r\n         at Program.\u003C\u003Ec.\u003C\u003C\u003CMain\u003E$\u003Eb__0_1\u003Ed.MoveNext()\r\n      --- End of stack trace from previous location ---\r\n         at Microsoft.AspNetCore.Http.RequestDelegateFactory.ExecuteTaskResult[T](Task\u00601 task, HttpContext httpContext)\r\n         at Microsoft.AspNetCore.Http.RequestDelegateFactory.\u003C\u003Ec__DisplayClass104_2.\u003C\u003CHandleRequestBodyAndCompileRequestDelegateForForm\u003Eb__2\u003Ed.MoveNext()\r\n      --- End of stack trace from previous location ---\r\n         at Microsoft.AspNetCore.Routing.EndpointMiddleware.\u003CInvoke\u003Eg__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n         at Microsoft.AspNetCore.Antiforgery.Internal.AntiforgeryMiddleware.InvokeAwaited(HttpContext context)\r\n         at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication\u00601 application)\r\n\u0060\u0060\u0060\n\n### .NET Version\n\n8.0.100-rc.2.23502.2\n\n### Anything else?\n\nIt used to work in RC1",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85pOwtg",
        "parentId": null,
        "author": "captainsafia",
        "content": "@dodyg Thanks for reporting this issue!\r\n\r\nI believe this was a regression that was introduced via https://github.com/dotnet/aspnetcore/pull/50431. Prior to this change, the implementation supported setting properties directly via their setters if there was more than one constructor defined. \r\n\r\n@javiercn Is my assessment here correct? I missed this in my original review but was there a reason we made this behavior change?",
        "createdAt": "2023-10-17T00:38:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51379#issuecomment-1765477216"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde850S5Gu",
    "title": "WebApplicationFactory with no \u003CT\u003E auto uses Program.cs in a minimal api",
    "url": "https://github.com/dotnet/aspnetcore/issues/51484",
    "createdAt": "2023-10-19T03:08:35Z",
    "lastUpdated": "2024-04-26T01:43:51Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI\u0027m trying to create a custom WebApplicationFactory\u003CT\u003E class for my file-\u003Enew-\u003Eminimal webapi:\r\n\r\n\u0060\u0060\u0060\r\npublic class CustomWebApplicationFactory : WebApplicationFactory\u003CProgram\u003E\r\n{\r\n}\r\n\u0060\u0060\u0060\r\n\r\nProblem is .. it cannot \u0022find\u0022 \u0060Program\u0060 because it feels like it\u0027s all hidden away with the new minimal api magic \uD83E\uDDD9\uD83C\uDFFB\u200D\u2640\uFE0F \n\n### Describe the solution you\u0027d like\n\nSo a common \u0027work around\u0027 is to add the following, to the \u0060Program.cs\u0060 file (down the bottom)\r\n\r\n\u0060\u0060\u0060\r\npublic partial class Program { }\r\n\u0060\u0060\u0060\r\n\r\nOk - so it\u0027s compiling again. \r\n\r\nFEATURE REQUEST:\r\n\r\nWould be lovely not to require adding the partial class to get the \u0060WebApplicationFactory\u0060 to work \u0022easily\u0022 with minimal api\u0027s. So we could do something like this:\r\n\r\n\u0060\u0060\u0060\r\npublic class CustomWebApplicationFactory : WebApplicationFactory\r\n{\r\n}\r\n\u0060\u0060\u0060\r\n\r\nand because we didn\u0027t provide a \u0060\u003CT\u003E\u0060 type, it might be smart enough to just do the \u0027hidden away\u0027 \u0060Program\u0060.\n\n### Additional context\n\nSide Note: sorta, loosly might be related to #47255 (which talks about generally improving WAF)",
    "upvotes": 1,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85phrUy",
        "parentId": null,
        "author": "marinasundstrom",
        "content": "This is related to the fact that the generated \u0060\u0060Program\u0060\u0060 class is hidden when using top-level statements.\r\n\r\nI don\u0027t see this as do:able since you need to pass a type argument to \u0060\u0060WebApplicationFactory\u003CT\u003E\u0060\u0060, and what you suggest something that affects the language, and the compiler. It is pretty much beyond what ASP.NET Core can control.\r\n\r\nIn my own opinion this is not a big problem. It\u0027s just a fact that it works like this.\r\n\r\nBut perhaps there are other ways to make the experience better.",
        "createdAt": "2023-10-19T09:35:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51484#issuecomment-1770435890"
      },
      {
        "id": "IC_kwDOAQzde85phvvU",
        "parentId": null,
        "author": "PureKrome",
        "content": "Hi @marinasundstrom and thank you very much for reading my issue.\r\n\r\n\u003E But perhaps there are other ways to make the experience better.\r\n\r\n\uD83D\uDCAF I think this is the key here. I\u0027m not skilled enough to suggest many ways for this - I gave it a go with suggesting dropping the \u0060\u003CT\u003E\u0060 which then auto \u0027finds\u0027 the hidden class .. but I think you\u0027ve prooved that, that idea is not feasible.\r\n\r\nSo yeah - happy to see any other way which makes the experience better. \uD83C\uDF70 ",
        "createdAt": "2023-10-19T09:45:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51484#issuecomment-1770453972"
      },
      {
        "id": "IC_kwDOAQzde8574vtv",
        "parentId": null,
        "author": "captainsafia",
        "content": "@marinasundstrom\u0027s assessment is spot on here.\r\n\r\nWRT to resolutions, I\u0027ve taken a proposal to C# LDM about changing the visibility of the generated \u0060Program\u0060 class from \u0060internal\u0060 to \u0060public\u0060. There was mixed reception about the proposal and it was ultimately rejected at the moment.\r\n\r\nAn alternative solution is to ship a change in the web SDK that will automatically generated some code to change the visibility of the class when MvcTesting is included in a referenced project.\r\n\r\nWe haven\u0027t prioritized this yet, but I\u0027ll place this in the backlog while we gauge interest.\r\n\r\nIt\u0027s a medium-sized changed but I\u0027m open to collaborating with someone on the fix if interested.\r\n",
        "createdAt": "2024-04-26T01:31:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51484#issuecomment-2078473071"
      },
      {
        "id": "IC_kwDOAQzde8574xy0",
        "parentId": null,
        "author": "PureKrome",
        "content": "@captainsafia You\u0027re awesome! Thanks heaps for the status update on this topic. Any convo/news is most appreciated.\r\n\r\nLove the idea about the alternative solution. Anything is a win - so again, thank you!\r\n\r\n\u2764\uFE0F ",
        "createdAt": "2024-04-26T01:43:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51484#issuecomment-2078481588"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde8526p9s",
    "title": "JsonSerializerContext not working with minimalApi",
    "url": "https://github.com/dotnet/aspnetcore/issues/52088",
    "createdAt": "2023-11-15T16:09:58Z",
    "lastUpdated": "2025-01-13T03:27:40Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nAfter configure Web API service to use generated version of \u0060JsonSerializerContext\u0060 for serializing JSON, still using default serialization\n\n### Expected Behavior\n\nObject returned by endpoint should be serialized using configured class derived from \u0060JsonSerializerContext\u0060 with his configuration. \n\n### Steps To Reproduce\n\n\u0060\u0060\u0060C#\r\nusing System.Text.Json;\r\nusing System.Text.Json.Serialization;\r\n\r\nvar builder = WebApplication.CreateSlimBuilder(args);\r\n\r\nbuilder.Services.ConfigureHttpJsonOptions(options =\u003E\r\n    options.SerializerOptions.TypeInfoResolverChain.Insert(0, AppJsonSerializerContext.Default));\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022/json\u0022, () =\u003E new Person(\u0022Alex\u0022));\r\napp.MapGet(\u0022/string\u0022, () =\u003E JsonSerializer.Serialize(new Person(\u0022Alex\u0022),AppJsonSerializerContext.Default.Person));\r\n\r\napp.Run();\r\n\r\nrecord Person(string FirstName)\r\n{\r\n}\r\n\r\n[JsonSerializable(typeof(Person))]\r\n[JsonSourceGenerationOptions(PropertyNamingPolicy = JsonKnownNamingPolicy.KebabCaseUpper)]\r\ninternal partial class AppJsonSerializerContext : JsonSerializerContext\r\n{\r\n\r\n}\r\n\u0060\u0060\u0060\r\n\r\nendpoint \u0060/string\u0060 (manually using  AppJsonSerializerContext) returns:\r\n\u0060\u0060\u0060JSON\r\n{\u0022FIRST-NAME\u0022:\u0022Alex\u0022}\r\n\u0060\u0060\u0060\r\n\r\nbut endpoint \u0060/json\u0060 returns default serialized JSON, without \u0060AppJsonSerializerContext\u0060:\r\n\u0060\u0060\u0060JSON\r\n{\r\n  \u0022firstName\u0022: \u0022Alex\u0022\r\n}\r\n\u0060\u0060\u0060\r\n\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.100\n\n### Anything else?\n\nProject configuration .csproj\r\n\u0060\u0060\u0060XML\r\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk.Web\u0022\u003E\r\n    \u003CPropertyGroup\u003E\r\n        \u003CTargetFramework\u003Enet8.0\u003C/TargetFramework\u003E\r\n        \u003CNullable\u003Eenable\u003C/Nullable\u003E\r\n        \u003CImplicitUsings\u003Eenable\u003C/ImplicitUsings\u003E\r\n        \u003CInvariantGlobalization\u003Etrue\u003C/InvariantGlobalization\u003E\r\n    \u003C/PropertyGroup\u003E\r\n\u003C/Project\u003E\r\n\u0060\u0060\u0060\r\n\r\n\r\nI\u0027ve tried debugging generated code, endpoint \u0060/string\u0060 goes into generated implementation, but \u0060/json\u0060 not",
    "upvotes": 3,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85sUNL0",
        "parentId": null,
        "author": "ChaosEngine",
        "content": "I am seeing the same when NOT providing any \u0060PropertyNamingPolicy\u0060 attribute and default json generation (in MVC and minimal API) is misbehaving giving different results. Only proper when explicitly providing \u0060JsonSerializer.Serialize(new MyType() MyTypeContext.Default.MyType)\u0060\r\n\r\nSame repro as above except commented out\r\n\u0060//[JsonSourceGenerationOptions(PropertyNamingPolicy = JsonKnownNamingPolicy.KebabCaseUpper)]\u0060\r\n\r\n\u0060\u0060\u0060cs\r\nusing System.Text.Json;\r\nusing System.Text.Json.Serialization;\r\n\r\nvar builder = WebApplication.CreateSlimBuilder(args);\r\n\r\nbuilder.Services.ConfigureHttpJsonOptions(options =\u003E\r\n\toptions.SerializerOptions.TypeInfoResolverChain.Insert(0, AppJsonSerializerContext.Default));\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022/json\u0022, () =\u003E new Person(\u0022Alex\u0022));\r\napp.MapGet(\u0022/string\u0022, () =\u003E JsonSerializer.Serialize(new Person(\u0022Alex\u0022), AppJsonSerializerContext.Default.Person));\r\n\r\napp.Run();\r\n\r\nrecord Person(string FirstName)\r\n{\r\n}\r\n\r\n[JsonSerializable(typeof(Person))]\r\n//[JsonSourceGenerationOptions(PropertyNamingPolicy = JsonKnownNamingPolicy.KebabCaseUpper)]\r\ninternal partial class AppJsonSerializerContext : JsonSerializerContext\r\n{\r\n\r\n}\r\n\u0060\u0060\u0060\r\n\r\nexpecteed output would be  \u0060{\u0022FirstName\u0022:\u0022Alex\u0022}\u0060\r\nwhile it is \u0060{\u0022firstName\u0022:\u0022Alex\u0022}\u0060\r\n(**camelCase** instead **PascalCase**)\r\n\r\n\r\n\r\n\r\nLong story short: keeping previous code with many methods reading:\r\n\u0060\u0060\u0060cs\r\n[Route(@\u0022/getPosts/{blogId}\u0022)]\r\npublic async Task\u003CActionResult\u003E GetPosts(int blogId)\r\n{\r\n\tvar lst = await _repo.GetPostsFromBlogAsync(blogId);\r\n\r\n\treturn Json(lst);\r\n}\r\n\u0060\u0060\u0060\r\nwould not work with added \u0060TypeInfoResolverChain.Insert(0, MyTypeContext.Default));\u0060\r\nonly chanign those metods to\r\n\u0060\u0060\u0060cs\r\n[Route(@\u0022/getPosts/{blogId}\u0022)]\r\npublic async Task\u003CActionResult\u003E GetPosts(int blogId)\r\n{\r\n\tvar lst = await _repo.GetPostsFromBlogAsync(blogId);\r\n\r\n\treturn Json(lst, ListPost_Context.Default.Options);\r\n}\r\n\u0060\u0060\u0060\r\nwould bring behavior to old behavior but defeats the purpose of having single defined place for generated serialization contexts",
        "createdAt": "2023-11-17T23:14:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52088#issuecomment-1817236212"
      },
      {
        "id": "IC_kwDOAQzde85sVJZz",
        "parentId": null,
        "author": "dany28",
        "content": "Yes, setting PropertyNamingPolicy is not necessary to how JsonSerializerContext is NOT working for minimalApi and MVC (different code for setting)",
        "createdAt": "2023-11-18T11:26:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52088#issuecomment-1817482867"
      },
      {
        "id": "IC_kwDOAQzde85uCiDI",
        "parentId": null,
        "author": "Kumima",
        "content": "Same here, when using parameter-binding if you provide the JsonSerializerContext, it will also cause binding fail, which means it does not even use the \u0060JsonSourceGenerationOptions\u0060.\r\nThis is really serious, why is there no official feedback?",
        "createdAt": "2023-12-07T21:44:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52088#issuecomment-1846157512"
      },
      {
        "id": "IC_kwDOAQzde85uPlpn",
        "parentId": null,
        "author": "eiriktsarpalis",
        "content": "The \u0060JsonSourceGenerationOptions\u0060 attribute maps configuration to the \u0060AppJsonSerializerContext .Default\u0060 property added by the source generator. The configuration code in the repro is only copying the \u0060TypeInfoResolver\u0060 component of the serialization configuration,  in order to also get the desired behavior you would need to write something like\r\n\u0060\u0060\u0060c#\r\nbuilder.Services.ConfigureHttpJsonOptions(options\r\n{\r\n    options.SerializerOptions.TypeInfoResolverChain.Insert(0, AppJsonSerializerContext.Default);\r\n    options.SerializerOptions.PropertyNamingPolicy = AppJsonSerializerContext.Default.Options.PropertyNamingPolicy;\r\n});\r\n\u0060\u0060\u0060\r\nI discussed this with @captainsafia and it seems to me that an accelerator method that copies _all_ configuration from a generated \u0060JsonSerializerContext\u0060 to a \u0060JsonOptions\u0060 might be warranted (although, N.B. this could create conflicts in applications where more than one generated \u0060JsonSerializerContext\u0060 is being consumed).",
        "createdAt": "2023-12-11T08:53:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52088#issuecomment-1849580135"
      },
      {
        "id": "IC_kwDOAQzde85uQ_3Y",
        "parentId": null,
        "author": "Kumima",
        "content": "@eiriktsarpalis So if we have different \u0060PropertyNamingPolicy\u0060 for different \u0060JsonSerializerContext\u0060, is there a way to apply multiple Naming Policies automatically based on Type. It will be more convenient, since we\u0027ve defined the \u0060Policy\u0060 through the context.",
        "createdAt": "2023-12-11T12:07:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52088#issuecomment-1849949656"
      },
      {
        "id": "IC_kwDOAQzde85uRF9a",
        "parentId": null,
        "author": "eiriktsarpalis",
        "content": "\u0060PropertyNamingPolicy\u0060 is a global setting. If you\u0027re looking to apply naming policy that is scoped to a particular type or property you should consider using the \u0060JsonPropertyName\u0060 attribute instead.",
        "createdAt": "2023-12-11T12:23:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52088#issuecomment-1849974618"
      },
      {
        "id": "IC_kwDOAQzde85uRPoT",
        "parentId": null,
        "author": "Kumima",
        "content": "@eiriktsarpalis\r\n\u0060\u0060\u0060csharp\r\nJsonSerializer.Serialize(new Person(\u0022Alex\u0022), AppJsonSerializerContext.Default.Person)\r\n\u0060\u0060\u0060\r\nCode like above will automaticly resolve the \u0060JsonSourceGenerationOptions\u0060 defined through context.\r\nCan we have a way to resolve the \u0060JsonSerializerOptions\u0060 automatically for type? It\u0027s just weird that we must configure a global \u0060Options\u0060 although we\u0027ve defined that through context.\r\n\u0060JsonSourceGenerationOptions\u0060 becomes useless for this scenorio. Some time we don\u0027t want a global, and \u0060JsonPropertyNameAttribute\u0060 is more verbose than \u0060JsonSourceGenerationOptions\u0060.",
        "createdAt": "2023-12-11T12:48:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52088#issuecomment-1850014227"
      },
      {
        "id": "IC_kwDOAQzde85uRXB_",
        "parentId": null,
        "author": "eiriktsarpalis",
        "content": "\u003E Can we have a way to resolve the JsonSerializerOptions automatically for type? It\u0027s just weird that we must configure a global Options although we\u0027ve defined that through context.\r\n\r\nBut wouldn\u0027t you still need to pass a particular context to aspnetcore somehow? These are not tied to the type definition and are not necessarily unique for each type. There\u0027s been proposals for type-directed serialization contracts (see https://github.com/dotnet/runtime/issues/90787) but this is more of a long-term vision.",
        "createdAt": "2023-12-11T13:05:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52088#issuecomment-1850044543"
      },
      {
        "id": "IC_kwDOAQzde85uRlq5",
        "parentId": null,
        "author": "Kumima",
        "content": "The purpose to provide \u0060JsonSourceGenerationOptions\u0060 to context is to set options for group-related objects. They can be grouped by library, functionality, or other purpose. Groups may differ, and global is not appropriate. Adjustment for individual type works, but group configuration brings convenient.\r\nI\u0027m not totally sure why we may separate the \u0060JsonSerializerContext\u0060, isn\u0027t it that we need to group related objects?\r\nConfiguration like \u0060[JsonSourceGenerationOptions(UseStringEnumConverter = true)]\u0060 configures the enum policy for group.\r\n\r\nSo, I don\u0027t think it\u0027s totally related to type-directed serialization. And passing a particular context to aspnetcore is like we pass the group configuration, neither global nor individual type.\r\n\r\nAnyway, thanks for your @eiriktsarpalis explanation, I can understand the work around for now. I just think if \u0060JsonSourceGenerationOptions\u0060 works as I expect, it will be more convenient.",
        "createdAt": "2023-12-11T13:42:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52088#issuecomment-1850104505"
      },
      {
        "id": "IC_kwDOAQzde85uSDiK",
        "parentId": null,
        "author": "Kumima",
        "content": "@eiriktsarpalis I just remember my main purpose for this issue. The overload method like \u0060httpClient.PostAsJsonAsync(\u0022uri\u0022, requestObject, AppJsonSerializerContext.Default.RequestObject)\u0060 will apply the \u0060JsonSourceGenerationOptions\u0060 while asp.net core does not. This brings a huge inconsistency.",
        "createdAt": "2023-12-11T14:47:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52088#issuecomment-1850226826"
      },
      {
        "id": "IC_kwDOAQzde85uSMbd",
        "parentId": null,
        "author": "eiriktsarpalis",
        "content": "Fundamentally the issue stems from the fact that minimal APIs can\u0027t accept \u0060JsonTypeInfo\u0060 parameters on a per-response basis. Instead this needs to be configured centrally. It is conceivable that this could be worked around with a \u0060JsonResult\u0060-like wrapper, e.g.\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/json\u0022, () =\u003E JsonResult.Create(new Person(\u0022Alex\u0022), AppJsonSerializerContext.Default.Person));\r\n\u0060\u0060\u0060\r\n\r\nAssuming we had an \u0060IJsonSerializable\u003CT\u003E\u0060 interface with a static abstract factory returning a \u0060JsonTypeInfo\u003CT\u003E\u0060 then the second argument could be elided:\r\n\r\n\u0060\u0060\u0060C#\r\napp.MapGet(\u0022/json\u0022, () =\u003E JsonResult.Create(new Person(\u0022Alex\u0022)));\r\n\u0060\u0060\u0060",
        "createdAt": "2023-12-11T15:05:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52088#issuecomment-1850263261"
      },
      {
        "id": "IC_kwDOAQzde85uW7Vd",
        "parentId": null,
        "author": "Kumima",
        "content": "@eiriktsarpalis \r\nIt\u0027s not quite inconvenient for response, since there are overload methods as you mentioned.\r\nFor auto parameter binding, I have to do things like this:\r\n\u0060\u0060\u0060csharp\r\n//Must read from request to apply JsonSourceGenerationOptions from JsonSerializerContext\r\napp.MapPost(\u0022/json\u0022, () =\u003E \r\n{\r\n    request = await context.Request.ReadFromJsonAsync(AppJsonSerializerContext.Default.Request);\r\n    //manually handle bad request. e.g., return TypedResults.BadRequest() when deserializing failed\u0060 \r\n}\r\n\r\n//expected: auto apply JsonSourceGenerationOptions from JsonSerializerContext\r\n//asp.net core take over the BadRequest task during binding as default behavior\r\n//for now, asp.net core always provide BadRequest since it does not use JsonSourceGenerationOptions. The binding failed.\r\napp.MapPost(\u0022/json\u0022, ([FromBody] Request request)) =\u003E Handle(request))\r\n\r\n//Another work around: Implement this for Object, but this introduces verbose.\r\npublic static ValueTask\u003CT?\u003E BindAsync(HttpContext context);\r\n\u0060\u0060\u0060",
        "createdAt": "2023-12-12T08:18:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52088#issuecomment-1851503965"
      },
      {
        "id": "IC_kwDOAQzde86LXZrZ",
        "parentId": null,
        "author": "Kumima",
        "content": "https://github.com/dotnet/runtime/issues/107535\r\nThis one provides an explanation for this.",
        "createdAt": "2024-09-09T13:43:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52088#issuecomment-2338167513"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde854EQOn",
    "title": "ProblemHttpResult doesn\u0027t show in generated OpenApi document",
    "url": "https://github.com/dotnet/aspnetcore/issues/52424",
    "createdAt": "2023-11-28T12:56:52Z",
    "lastUpdated": "2024-06-17T08:48:26Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nIt seems that \u0060ProblemHttpResult\u0060 doesn\u0027t implement the \u0060IEndpointMetadataProvider\u0060 interface hence, a method like the following:\r\n\r\n\u0060\u0060\u0060csharp\r\nendpoints.MapGet(\u0022/\u0022, async Task\u003CResults\u003COk\u003CGetClientsResponse\u003E, ProblemHttpResult\u003E\u003E([FromServices] IRequiredActor\u003CGetClientsActor\u003E actor) =\u003E\r\n{\r\n    var response = await /* Get clients from somewhere somehow.. Response is a poor man union type of IEnumerable\u003CClient\u003E | Error*/\r\n      \r\n    return response.Map\u003CResults\u003COk\u003CGetClientsResponse\u003E, ProblemHttpResult\u003E\u003E(\r\n        clients =\u003E TypedResults.Ok(clients),\r\n        error =\u003E TypedResults.Problem(detail: error.Reason, instance: error.Code, statusCode: StatusCodes.Status400BadRequest)\r\n    );\r\n});\r\n\u0060\u0060\u0060\r\nDoesn\u0027t produce the expected OpenApi response types, only the 200 response ends up in the responses section of the document.\r\n\r\nIf I\u0027m not reading the [documentation ](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/openapi?view=aspnetcore-8.0#set-responses-for-problemdetails) wrong, I\u0027d expect the code above to produce 2 responses, a 200 and a 400. am I wrong?\r\n\n\n### Expected Behavior\n\nThe problem details get\u0027s correctly added on the endpoint metadata when using \u0060Result\u003CSomething, ProblemHttpResult\u003E\u0060 and it shows up in the swagger UI\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\nnet8.0\n\n### Anything else?\n\n_No response_",
    "upvotes": 6,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85tOW4T",
        "parentId": null,
        "author": "captainsafia",
        "content": "@ilmax Thanks for reporting this issue! As I recall, at the moment this is an intentional pattern. Unlike \u0060ValidationProblemDetails\u0060, which can default to a \u0060400\u0060 status code. \u0060ProblemDetails\u0060 does not have the same sane default. It could be \u0060500\u0060, but it could also be \u0060401\u0060 or \u0060505\u0060 or \u0060429\u0060.\r\n\r\nIn the past, we rejected an API proposal that attempted to solve this by introducing specific overloads for each status code (https://github.com/dotnet/aspnetcore/issues/47705) which is not ideal. The proposal indicates that there is a class of users interested in non-500 status codes.\r\n\r\nI\u0027m open to changing this given we get strong feedback that \u0060500\u0060 is the correct default and won\u0027t cause surprises. I\u0027ll put this is the backlog and see if more folks upvote this.",
        "createdAt": "2023-11-29T18:30:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52424#issuecomment-1832480275"
      },
      {
        "id": "IC_kwDOAQzde85tOW-F",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-11-29T18:30:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52424#issuecomment-1832480645"
      },
      {
        "id": "IC_kwDOAQzde85tyPX6",
        "parentId": null,
        "author": "marinasundstrom",
        "content": "I was surprised by this yesterday. Had to add .ProducesProblem(StatusCode\u2026) for it to show up.\r\n\r\nIt makes sense since ASP.NET Core can\u2019t know what status code it is. Hence why you annotate.\r\n\r\nBut at least there could be a generated default for 500 if you have enabled problem details for unhandled exceptions etc.",
        "createdAt": "2023-12-06T00:41:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52424#issuecomment-1841886714"
      },
      {
        "id": "IC_kwDOAQzde86BgQhE",
        "parentId": null,
        "author": "linde12",
        "content": "This is very confusing as a relatively green .NET developer. There are so many ways of doing the same thing. With builder pattern (.Produces), with annotations (ASP.NET MVC style?) and with generic return types (TypedResults).\n\nI really liked the \u0060TypedResults\u0060 concept where i could type whatever i return as generic arguments, e.g. \u0060Results\u003COk\u003CUserResponse\u003E, BadRequest\u003CErrorResponse\u003E\u003E\u0060 but when switching to \u0060ProblemHttpResult\u0060 i now have to revert to the \u0022old\u0022 and less cohesive (in my case, where each endpoint is a static method) way of annotating a response by imperatively adding \u0060.ProducesProblem(...)\u0060 where i register the route (which is very easy to forget)\n\nI expected the ProblemHttpResult to take a generic argument, just like e.g. BadRequest does for the body shape, but it does not. I mean like this:\n\n\u0060\u0060\u0060csharp\npublic static Results\u003COk\u003CUserCreatedResponse\u003E, ProblemHttpResult\u003CBadRequest\u003E\u003E CreateUser(...)\n\u0060\u0060\u0060\n\nAgain, new to C# and .NET world so i\u0027m not sure if it is possible to have const generics in C#, but being able to do \u0060ProblemHttpResult\u003C400\u003E\u0060 (or using a const integer instead of hardcoded 400) would be really nice.\n\nIt is not the end of the world, having to add \u0060.ProducesProblem(400)\u0060, but as i mentioned above some cohesion is lost and it is really easy to forget since it is not required/doesn\u0027t cause any errors if you forget to add it.\n\nWhile we\u0027re at it, i\u0027m also curious how we would type multiple kinds of errors (e.g. 400, 401, 500) using \u0060TypedResults\u0060 - \u0060Results\u0060 only takes 2 generic arguments (one for success and one for error) so how would i type a endpoint that returns 200, 400 and 402 with different bodies? Is the builder pattern or annotations the only escape hatch?",
        "createdAt": "2024-06-17T08:48:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52424#issuecomment-2172717124"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde854Wxwg",
    "title": "Harden nullability checks in \u0060Endpoint.SignatureEquals\u0060",
    "url": "https://github.com/dotnet/aspnetcore/issues/52492",
    "createdAt": "2023-11-30T18:08:34Z",
    "lastUpdated": "2024-09-10T18:46:22Z",
    "body": "Logs indicate that unhandled NREs are thrown from the \u0060Endpoint.SignatureEquals\u0060 from the \u0060RequestDelegateGenerator\u0060 under certain and rare occasions. Although we\u0027ve not be able to identify what the impacted syntax is, we should try to harden the nullability checks here to avoid situations where they do happen.",
    "upvotes": 0,
    "labels": [
      "feature-rdg",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85tZsqx",
        "parentId": null,
        "author": "david-acker",
        "content": "Out of curiosity, are there any examples of these logs available?",
        "createdAt": "2023-12-01T04:48:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52492#issuecomment-1835453105"
      },
      {
        "id": "IC_kwDOAQzde85tence",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Out of curiosity, are there any examples of these logs available?\r\n\r\nUnfortunately not. \uD83D\uDE05 \r\n\r\nThe logs don\u0027t provide insight into what kind of syntax triggered the NRE, just that it happens repeatedly on every generator run. I haven\u0027t been able to reproduce it outside the context of the logs.",
        "createdAt": "2023-12-01T20:35:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52492#issuecomment-1836742430"
      },
      {
        "id": "IC_kwDOAQzde86Lk8g6",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "@captainsafia Is this still an issue?",
        "createdAt": "2024-09-10T18:24:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52492#issuecomment-2341718074"
      },
      {
        "id": "IC_kwDOAQzde86LlExz",
        "parentId": null,
        "author": "captainsafia",
        "content": "@adityamandaleeka Yes, it\u0027s still an issue, but I would stick it in the backlog for now.",
        "createdAt": "2024-09-10T18:42:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52492#issuecomment-2341751923"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde854ZG33",
    "title": "\u0060RequestDelegateGenerator\u0060 should use case-insensitive parsing for enum route parameters",
    "url": "https://github.com/dotnet/aspnetcore/issues/52497",
    "createdAt": "2023-12-01T01:16:26Z",
    "lastUpdated": "2024-02-13T01:13:32Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\n\u0060RequestDelegateGenerator\u0060 should use case-insensitive parsing for enum route parameters.\r\n\r\nThis has been brought up before, most recently by @aradalvand in #48346, but those previous issues were treated as opportunities for future extensibility, whereas I would like to make the case that this is a ~~bug with user-facing impact~~ well-documented pinch point that should be easy to patch in a post-RDG world.\r\n\r\n\u003E _My tinfoil hat thesis is that this is one of those long-lingering, little frictions that causes far more grief than ever gets reported because it\u0027s easy enough to work around, but enums are a first-class primitive and they __deserve__ better support out-of-the-box, __especially__ with the advent of RDG for minimal APIs._\r\n\r\n## Argument 1: prior art from other primitives with lenient default parsing rules\r\n\r\nEnums (unfortunately) didn\u0027t receive the same \u0060IParsable\u003CT\u003E\u0060 treatment for \u0060net8.0\u0060 as other first-class primitives, which means that RDG has to make a choice about which overload of \u0060Enum.TryParse(...)\u0060 to call, as opposed to delegating to \u0060IParsable\u003CT\u003E.TryParse(...)\u0060.\r\n\r\nBut if we look around at how \u0060IParsable\u003CT\u003E\u0060 was implemented/delegated for other primitives, we can find examples erring on the side of more lenient parsing rules by default.\r\n\r\nFor example, here are the first few lines of [the implementation for \u0060IParsable\u003Cbool\u003E.TryParse(...)\u0060]((https://github.com/dotnet/runtime/blob/a6e4834d53ac591a4b3d4a213a8928ad685f7ad8/src/libraries/System.Private.CoreLib/src/System/Boolean.cs#L246-L295)):\r\n\r\n\u003E \u0060\u0060\u0060csharp\r\n\u003E public static bool TryParse(ReadOnlySpan\u003Cchar\u003E value, out bool result)\r\n\u003E {\r\n\u003E     // Boolean.{Try}Parse allows for optional whitespace/null values before and\r\n\u003E     // after the case-insensitive \u0022true\u0022/\u0022false\u0022, but we don\u0027t expect those to\r\n\u003E     // be the common case. We check for \u0022true\u0022/\u0022false\u0022 case-insensitive in the\r\n\u003E     // fast, inlined call path, and then only if neither match do we fall back\r\n\u003E     // to trimming and making a second post-trimming attempt at matching those\r\n\u003E     // same strings.\r\n\u003E \u0060\u0060\u0060\r\n\r\nWhile there\u0027s nothing to stop anyone from chaotically defining enum members that differ only in casing, it\u0027s a broadly respected convention (backed on Roslyn analyzers) for .NET enums to have members whose names differ by more than case.\r\n\r\nFurther, .NET enums broadly follow the same conventions as other .NET types, meaning the gross majority of (normal) enums in the wild are defined in PascalCase. This means that any use of an enum in a RDG-generated handler will suffer from the unexpected case-sensitivity demonstrated below in [Argument 3]().\r\n\r\n_(I anticipate and respect the quibble that this __shouldn\u0027t__ be unexpected, since its well-documented, but if minimal APIs are about making .NET easy to work with out-of-the-box, then it\u0027s still a problem worth solving.)_\r\n\r\n## Argument 2: RDG has enough context to decide when case-sensitivity makes sense\r\n\r\n~~The web is case-insensitive.~~\r\n~~The web should be case-insensitive.~~\r\nThe web was, is, and always shall be a place of chaos, but we still deserve sensible happy-path defaults.\r\n\r\nIt makes sense to use case-sensitive enum parsing by default for things like query strings, request bodies, etc. However, it makes much less sense to do the same in places like path segments, headers, etc.\r\n\r\nRDG should have enough context available to generate case-insensitive parsing for path parameters without _having_ to do so for non-path parameters.\r\n\r\n## Argument 3: the rest of the routing stack treats path segments as case-insensitive \r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateSlimBuilder(args);\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022hello/{enum}/world\u0022, static (SomeEnum @enum) =\u003E Results.Ok());\r\n\r\napp.Run();\r\n\r\nenum SomeEnum\r\n{\r\n    None,\r\n    Some\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060console\r\n$ curl -i http://localhost:5000/hello/None/world\r\nHTTP/1.1 200 OK\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060console\r\n$ curl -i http://localhost:5000/HELLO/None/world\r\nHTTP/1.1 200 OK\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060console\r\n$ curl -i http://localhost:5000/HELLO/None/WORLD\r\nHTTP/1.1 200 OK\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060console\r\n$ curl -i http://localhost:5000/hello/none/world\r\nHTTP/1.1 400 Bad Request\r\n\u0060\u0060\u0060\r\n\r\nThe real-world question I received today was: _\u0022why is only part of this URL case-sensitive?\u0022_\r\n\r\nThe answer was immediately obvious, because I already knew better than to use raw enums in route templates, but I still managed to walk right into it for the umpteenth time. _(...and again, I have a sneaking suspicion that I can\u0027t be the only one repeatedly stubbing their toes on this.)_\r\n\r\n## Culprit\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/b28c8a3aac6db546489dd519f4706c20c8ad2265/src/Http/Http.Extensions/gen/StaticRouteHandlerModel/EndpointParameter.cs#L323-L335\r\n\r\n## Related\r\n\r\n- #45590\r\n- #35489\r\n- #48346\r\n\r\n### Expected Behavior\r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateSlimBuilder(args);\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022hello/{enum}/world\u0022, static (SomeEnum @enum) =\u003E Results.Ok());\r\n\r\napp.Run();\r\n\r\nenum SomeEnum\r\n{\r\n    None,\r\n    Some\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060console\r\n$ curl -i http://localhost:5000/hello/none/world\r\nHTTP/1.1 200 OK\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060console\r\n$ curl -i http://localhost:5000/HELLO/NONE/WORLD\r\nHTTP/1.1 200 OK\r\n\u0060\u0060\u0060\r\n\r\n\r\n### Steps To Reproduce\r\n\r\n- https://github.com/austindrenski/request-delegate-generator-enum-parsing-case-sensitive\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.100\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 3,
    "labels": [
      "feature-rdg",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85vAGNA",
        "parentId": null,
        "author": "captainsafia",
        "content": "@austindrenski Thanks for this write-up! It was a good read.\r\n\r\nIn particular, the argument you\u0027ve laid out have caused me to reframe this as an issue with the implicit parsing of enums in particular, as opposed to a problem related to parameter binding customization in general.\r\n\r\nI think we can safely modify the codegen for enum parsing to assume case-insensitivity by default. It\u0027ll be a breaking behavioral change in the (I think, rare) case that people are relying on the current behavior to prevent invalid inputs.\r\n\r\nI\u0027ll try to see how difficult this is to do...\r\n\r\n",
        "createdAt": "2023-12-19T08:08:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52497#issuecomment-1862296384"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde856A0-_",
    "title": "Request model binding with \u0060FromQuery\u0060 properties \u0060AsParameters\u0060 results in all properties being required.",
    "url": "https://github.com/dotnet/aspnetcore/issues/52881",
    "createdAt": "2023-12-18T16:36:29Z",
    "lastUpdated": "2024-06-19T12:23:38Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nBinding a model exclusively using \u0060FromQuery\u0060 properties \u0060AsParameters\u0060 results in all properties being treated as if required.\r\n\r\nAn endpoint binding a POCO model as parameters treats each and every property in the \u0060MyReq\u0060 model as required.\r\n\u0060\u0060\u0060csharp\r\n[AsParameters] MyReq request\r\n\u0060\u0060\u0060\r\n\r\nProperties in the model which are not required should not be required in the search string.\r\nThe definition below illustrates the expectation, but not the current implementation, because currently each one of these properties is required, even those with default values.\r\n\u0060\u0060\u0060csharp\r\npublic sealed record MyReq \r\n{\r\n    [FromQuery()]\r\n    public string Prop1{ get; init; } = \u0022*\u0022; // not required\r\n\t[FromQuery()]\r\n    public decimal? Prop2 { get; init; } // not required\r\n\t[FromQuery()]\r\n    public string? Prop3 { get; init; } // not required\r\n\t[FromQuery()]\r\n    public required string Prop4 {get; init; } // required\r\n\t[FromQuery(), Required]\r\n\tpublic string Prop5 { get; init; } = \u0022\u0022; // required\r\n\t[FromQuery()]\r\n\tpublic int Prop6 { get; init; } // not required\r\n\t[FromQuery()]\r\n\tpublic string Prop7 { get; init; } // not required (has compiler warning)\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Expected Behavior\r\n\r\nGiven a request model, properties with default values and without the \u0060required\u0060 modifier or annotation, must not be recognized as required parameters.\r\n\r\n### Steps To Reproduce\r\n\r\nModel:\r\n\u0060\u0060\u0060csharp\r\npublic sealed record ProfitRequest\r\n{\r\n    [FromQuery(Name = \u0022gem_name\u0022)]\r\n    public string GemNameWindcard { get; init; } = \u0022*\u0022;\r\n    [FromQuery(Name = \u0022min_sell_price_chaos\u0022)]\r\n    public decimal? MinSellPriceChaos { get; init; } = null;\r\n    [FromQuery(Name = \u0022max_buy_price_chaos\u0022)]\r\n    public decimal? MaxBuyPriceChaos { get; init; } = null;\r\n    [FromQuery(Name = \u0022min_experience_delta\u0022)]\r\n    public decimal? MinExperienceDelta { get; init; } = null;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nBuilder:\r\n\u0060\u0060\u0060csharp\r\nvar app = builder.Build();\r\n\r\napp\r\n    .MapGet(\u0022gem-profit\u0022, async (\r\n        [FromServices] ProfitService profitService,\r\n        [AsParameters] ProfitRequest request,\r\n        CancellationToken cancellationToken = default\r\n    ) =\u003E\r\n    {\r\n        var data = await profitService.GetProfitAsync(request, cancellationToken).ConfigureAwait(false);\r\n        return data;\r\n    });\r\n\u0060\u0060\u0060\r\n\r\nFailed request: \r\n\u0060\u0060\u0060http\r\nGET http://127.0.0.1:5000/gem-profit?min_experience_delta=65000000\r\n\u0060\u0060\u0060\r\n\r\nSuccessful request:\r\n\u0060\u0060\u0060http\r\nGET http://127.0.0.1:5000/gem-profit?gem_name=*\u0026min_sell_price_chaos=0\u0026max_buy_price_chaos=0\u0026min_experience_delta=65000000\u0026items_offset=0\u0026items_count=10\r\n\u0060\u0060\u0060\r\n\r\n### Exceptions (if any)\r\n\r\nMicrosoft.AspNetCore.Http.BadHttpRequestException: Required parameter \u0022string GemNameWindcard\u0022 was not provided from query string.\r\n   at lambda_method933(Closure, Object, HttpContext)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.Invoke(HttpContext httpContext)\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\r\n\r\n### .NET Version\r\n\r\n8.0.100\r\n\r\n### Anything else?\r\n\r\n.NET SDK:\r\n Version:           8.0.100   \r\n Commit:            57efcf1350\r\n Workload version:  8.0.100-manifests.6a1e483a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.100\\\r\n\r\n.NET workloads installed:\r\n Workload version: 8.0.100-manifests.6a1e483a\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      8.0.0\r\n  Architecture: x64\r\n  Commit:       5535e31a71\r\n\r\n.NET SDKs installed:\r\n  3.1.426 [C:\\Program Files\\dotnet\\sdk]     \r\n  6.0.417 [C:\\Program Files\\dotnet\\sdk]     \r\n  7.0.404 [C:\\Program Files\\dotnet\\sdk]     \r\n  8.0.100 [C:\\Program Files\\dotnet\\sdk]     \r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n",
    "upvotes": 5,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85u8ZGh",
        "parentId": null,
        "author": "ProphetLamb",
        "content": "@gfoidl This is also reproducible with a \u0060Controller\u0060 style API.\r\nI used a minimal API for the sample.",
        "createdAt": "2023-12-18T18:50:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52881#issuecomment-1861325217"
      },
      {
        "id": "IC_kwDOAQzde85u99RP",
        "parentId": null,
        "author": "captainsafia",
        "content": "@ProphetLamb Thanks for reporting this issue!\r\n\r\nI was able to repro it in the minimal API sample. Do you might sharing the Controller-style API in which you were able to repro this? The \u0060AsParameters\u0060 attribute isn\u0027t supported in the model-binding context of Controller-style APIs so I am surprised to see it working there.\r\n\r\nWith that in mind, the reason this happens is because of the current implementation of \u0060HasDefaultValue\u0060 handling in the [PropertyAsParameterInfo](https://source.dot.net/#Microsoft.AspNetCore.Http.Extensions/src/Shared/PropertyAsParameterInfo.cs,46). It currently only respects default values if they are provided in the _constructor_ of the type, not assigned to the property itself. I think we might be able to address this issue.\r\n\r\n",
        "createdAt": "2023-12-18T21:46:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52881#issuecomment-1861735503"
      },
      {
        "id": "IC_kwDOAQzde85vKtzh",
        "parentId": null,
        "author": "kikaragyozov",
        "content": "It seems if a type has no constructor defined, it will never honor default values on parameters specified as well. I don\u0027t think this is an intended behavior? Actually, a parameterless constructor won\u0027t do the trick. You\u0027ll need to pass in everything through parameters.\r\n\r\nEven explicitly setting the properties in a parameterless constructor yields no positive result.",
        "createdAt": "2023-12-20T20:18:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52881#issuecomment-1865080033"
      },
      {
        "id": "IC_kwDOAQzde85vK1O-",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E It seems if a type has no constructor defined, it will never honor default values on parameters specified as well. I don\u0027t think this is an intended behavior? \r\n\r\nCorrect. This is the bug I was explaining in my comment earlier with:\r\n\r\n\u003E It currently only respects default values if they are provided in the constructor of the type, not assigned to the property itself.\r\n\r\n\u003E Even explicitly setting the properties in a parameterless constructor yields no positive result.\r\n\r\nYes, I wouldn\u0027t expect this to work either. When you have a parameterless constructor defined, there\u0027s no way to inject the bound values into the constructor. Instead, we construct the object using the initializer.\r\n\r\nI didn\u0027t clarify how I think we should fix this in my previous comment but it should be straightforward to support reading the default value in the property, if it is set.\r\n",
        "createdAt": "2023-12-20T20:40:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52881#issuecomment-1865110462"
      },
      {
        "id": "IC_kwDOAQzde85vWNG7",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E I didn\u0027t clarify how I think we should fix this in my previous comment but it should be straightforward to support reading the default value in the property, if it is set.\r\n\r\nI take this back \uD83D\uDE05 \r\n\r\nDetermining the \u0022default value\u0022 from the property isn\u0027t as straightforward at all, because it\u0027s _not_ a default value in the same way that default values are defined for parameters. Default parameter values have certain constraints on their values (constraint expression, default of value type) that initialized properties do not.\r\n\r\nAs a result, it\u0027s not possible to statically determine the initialized value for RDG (the compile-time minimal APIs generator) and tricky to resolve it at compile-time without some more complicated code-gen.\r\n\r\nAn alternative that we can consider here is supporting the \u0060[DefaultValue(\u0022foo\u0022)]\u0060 attribute on properties which provides us with a more straightforward avenue for reading the default values set, although the syntax is not as appealing.\r\n\r\nThoughts?",
        "createdAt": "2023-12-22T21:51:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52881#issuecomment-1868091835"
      },
      {
        "id": "IC_kwDOAQzde85vXN-S",
        "parentId": null,
        "author": "ProphetLamb",
        "content": "\u003E \u003E I didn\u0027t clarify how I think we should fix this in my previous comment but it should be straightforward to support reading the default value in the property, if it is set.\n\u003E \n\u003E I take this back \uD83D\uDE05 \n\u003E \n\u003E Determining the \u0022default value\u0022 from the property isn\u0027t as straightforward at all, because it\u0027s _not_ a default value in the same way that default values are defined for parameters. Default parameter values have certain constraints on their values (constraint expression, default of value type) that initialized properties do not.\n\u003E \n\u003E As a result, it\u0027s not possible to statically determine the initialized value for RDG (the compile-time minimal APIs generator) and tricky to resolve it at compile-time without some more complicated code-gen.\n\u003E \n\u003E An alternative that we can consider here is supporting the \u0060[DefaultValue(\u0022foo\u0022)]\u0060 attribute on properties which provides us with a more straightforward avenue for reading the default values set, although the syntax is not as appealing.\n\u003E \n\u003E Thoughts?\n\n.NET treats properties as optional by default. I am familiar with the behaviour from the class system itself, \u0060System.Text.Json\u0060 and therefore ASP.NET request bodies as well.\nThe exception to that being the \u0060required\u0060 modifier \u0026 attribute. \n\nInstead of diverging from the expected behaviour \u0060[AsParameters]\u0060 should behave the same.\nWhat is the benefit of going into the opposite direction at this time?\n\nEspecially since we already have nullability warnings for uninitialised class-typed properties.",
        "createdAt": "2023-12-23T19:36:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52881#issuecomment-1868357522"
      },
      {
        "id": "IC_kwDOAQzde85vjCpJ",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Instead of diverging from the expected behaviour [AsParameters] should behave the same.\r\nWhat is the benefit of going into the opposite direction at this time?\r\n\r\nThe \u0060[AsParameters]\u0060 attribute is meant to make properties act more like surrogates for parameters in a function handler than pure properties. IMO, the comparison to request bodies doesn\u0027t align precisely because \u0060[AsParameters]\u0060 arguments are not meant to be treated as request bodies, but as parameter surrogates. To that end, we opted to follow the rules for requiredness that we enforce for route handler parameters:\r\n\r\n- Unannotated parameters in a nullable context are required\r\n- Annotated parameters or parameters with default values in a nullable context are optional\r\n- All parameters without a nullability context are optional\r\n\r\nI do hear your point that the difference in behavior is confusing, but I think there is some justification here given that the serialization process of request bodies is different from the parameter binding process.\r\n\r\nWe could change the \u0060AsParameters\u0060 binding rules to make all properties optional, but that would be a breaking behavioral change at this point.",
        "createdAt": "2023-12-28T20:04:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52881#issuecomment-1871456841"
      },
      {
        "id": "IC_kwDOAQzde85whO25",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2024-01-11T18:47:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52881#issuecomment-1887759801"
      },
      {
        "id": "IC_kwDOAQzde86B2l7E",
        "parentId": null,
        "author": "abratv",
        "content": "Bitten by this today\r\n\r\nThis will do right\r\n\u0060\u0060\u0060\r\n[FromQuery(Name=\u0022test\u0022,DefaultValue=\u0022abc\u0022)]\r\n\u0060\u0060\u0060",
        "createdAt": "2024-06-19T12:23:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52881#issuecomment-2178571972"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde857Sl80",
    "title": "Complete [Typed]Results Json AOT/trimmer-safe overloads",
    "url": "https://github.com/dotnet/aspnetcore/issues/53189",
    "createdAt": "2024-01-06T08:34:34Z",
    "lastUpdated": "2024-08-22T02:08:20Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nRelated #46252\r\nFor now only \u0060TypedResults.JsonHttpResult\u0060 and \u0060Results.Json\u0060 has such overloads.\r\nBut methods like \u0060TypedResults.Created\u003CTValue\u003E\u0060and \u0060TypedResults.Accepted\u003CTValue\u003E\u0060 also do serialization.\r\nThose methods should have the correspond overloads, which will provide help such as setting the default the HTTP Status Code.\n\n### Describe the solution you\u0027d like\n\nAll methods those do serialization should have AOT/trimmer-safe overloads.\n\n### Additional context\n\n_No response_",
    "upvotes": 3,
    "labels": [
      "NativeAOT",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86JFS0j",
        "parentId": null,
        "author": "captainsafia",
        "content": "@Kumima Thanks for filing this issue! Apologies for the delay as I work through the triage backlog. \uD83D\uDE05 \r\n\r\nI\u0027m not opposed to this proposal on principal, although we will have to file a formal API proposal issue given that it changes API shape.\r\n\r\n@halter73 Do you recall if there was a specific reason we didn\u0027t modify the other result types as part of the original API proposal?",
        "createdAt": "2024-08-20T22:27:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53189#issuecomment-2299866403"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde857S1jg",
    "title": "[MinimalAPI] Resolve JsonSourceGenerationOptions for build-in parameter binding and response",
    "url": "https://github.com/dotnet/aspnetcore/issues/53191",
    "createdAt": "2024-01-06T11:02:54Z",
    "lastUpdated": "2024-09-09T13:41:39Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nRelated issues: \r\n- #52088\r\n- #52642\r\n- #53189\r\n\r\nThere has been discussion in the above-mentioned issue. But it seems like we haven\u0027t reached a conclusion.\r\nFor now we can only add the \u0060TypeInfoResolver\u0060 into \u0060TypeInfoResolverChain\u0060. \r\nAnd the \u0060SerializerOptions\u0060 can only be set globally. \r\nWhat if we want to specify the \u0060SerializerOptions\u0060 based on \u0060Type\u0060 or \u0060JsonSerializerContext\u0060 as a group configuration?\r\nThere should be the flexibility that different \u0060Type\u0060s can be [de]serialized with different options.\r\n\r\nAlso, from first impression, the following code should apply the \u0060JsonSourceGenerationOptions\u0060 for all related part.\r\n\u0060\u0060\u0060csharp\r\nbuilder.Services.ConfigureHttpJsonOptions(\r\n    options =\u003E { options.SerializerOptions.TypeInfoResolverChain.Insert(0, AppJsonSerializerContext.Default); });\r\n\u0060\u0060\u0060\r\n\r\n### Parameter Binding\r\nThe \u0060JsonSourceGenerationOptions\u0060 is not resolved when build-in parameter binding which will result in binding failure:\r\n\u0060\u0060\u0060csharp\r\n//request json object uses options same as JsonSourceGenerationOptions\r\n//for now, asp.net core always provide BadRequest since it does not use JsonSourceGenerationOptions. The binding failed.\r\napp.MapPost(\u0022/todos\u0022, ([FromBody] Todo todo)) =\u003E Handle(todo))\r\n\u0060\u0060\u0060\r\nThere are solutions, but they introduce verbose:\r\n\u0060\u0060\u0060csharp\r\n//Manually parse from request\r\napp.MapPost(\u0022/todos\u0022, (HttpRequest httpRequest) =\u003E \r\n{\r\n    request = await httpRequest.ReadFromJsonAsync(AppJsonSerializerContext.Default.Todo);\r\n    //manually handle bad request. e.g., return TypedResults.BadRequest() when deserializing failed\u0060 \r\n}\r\n\r\n//Implement custom binding\r\npublic record Todo(int Id, Color Color, string? Title, DateOnly? DueBy = null, bool IsComplete = false)\r\n{\r\n    public static async ValueTask\u003CTodo?\u003E BindAsync(HttpContext context)\r\n    =\u003E await context.Request.ReadFromJsonAsync(AppJsonSerializerContext.Default.Todo);\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Response\r\nThe response also does not apply the \u0060JsonSourceGenerationOptions\u0060:\r\nThe output json just uses global \u0060SerializerOptions\u0060. If we want to apply the \u0060JsonSourceGenerationOptions\u0060 we have to use overloads manually which introduces verbose.\r\n\u0060\u0060\u0060csharp\r\n//issue 53189 reports that not all necessary methods have overloads like this\r\napp.MapGet(\u0022/\u0022, () =\u003E TypedResults.Json(todo, AppJsonSerializerContext.Default.Todo))\r\n\u0060\u0060\u0060\r\n\r\n### Code Snippet\r\n\u0060\u0060\u0060csharp\r\npublic record Todo(int Id, Color Color, string? Title, DateOnly? DueBy = null, bool IsComplete = false);\r\n\r\npublic enum Color\r\n{\r\n    Red,\r\n    Blue,\r\n    Orange\r\n}\r\n\r\n[JsonSourceGenerationOptions(\r\n    PropertyNamingPolicy = JsonKnownNamingPolicy.SnakeCaseLower,\r\n    Converters =\r\n    [\r\n        typeof(CamelCaseJsonStringEnumConverter\u003CColor\u003E)\r\n    ])]\r\n[JsonSerializable(typeof(Color))]\r\n[JsonSerializable(typeof(Todo[]))]\r\ninternal partial class AppJsonSerializerContext : JsonSerializerContext;\r\n\r\npublic class CamelCaseJsonStringEnumConverter\u003CTEnum\u003E() : JsonStringEnumConverter\u003CTEnum\u003E(JsonNamingPolicy.CamelCase)\r\n    where TEnum : struct, Enum;\r\n\u0060\u0060\u0060\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nWhen we configured like:\r\n\u0060\u0060\u0060csharp\r\nbuilder.Services.ConfigureHttpJsonOptions(\r\n    options =\u003E { options.SerializerOptions.TypeInfoResolverChain.Insert(0, AppJsonSerializerContext.Default); });\r\n\u0060\u0060\u0060\r\n\u0060JsonSourceGenerationOptions\u0060 should be build-in resolved, and we can avoid above mentioned verbose. \r\n\r\nIf that\u0027s not enough, add a centralized place to configure the \u0060SerializerOptions\u0060 based on \u0060Type\u0060 | \u0060JsonSerializerContext\u0060 | Group of \u0060Type\u0060s.\r\n\r\n### Additional context\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86LXYgX",
        "parentId": null,
        "author": "Kumima",
        "content": "https://github.com/dotnet/runtime/issues/107535\r\nThis one provides the explanation for this. Seems not too much related to ASP.NET.  \r\nTo finish #53189 will help this.  Feel free to close this if there is nothing else to improve.\r\n",
        "createdAt": "2024-09-09T13:41:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53191#issuecomment-2338162711"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde857cn65",
    "title": "Epic: Eventing Framework in .NET 9",
    "url": "https://github.com/dotnet/aspnetcore/issues/53219",
    "createdAt": "2024-01-08T19:36:48Z",
    "lastUpdated": "2025-01-18T02:25:32Z",
    "body": "This issue captures issues related to the \u0022eventing framework\u0022 work area in .NET 9. Issues and categorizations are subject to change as design and prototyping is underway. \r\n\r\nThis eventing framework will allow developers to write applications that support processing messages from various queue providers in their application.\r\n\r\nMajor categories of work include:\r\n\r\n- Exposing APIs for registering event providers for various queue implementations, including a supported default set\r\n- Exposing APIs for registering event handlers and implementing a routing implementation to dispatch events to the appropriate handler\r\n- Expose APIs for serializing and deserializing messages resolved from providers\r\n- Exposing APIs for exposing framework primitives like middlewares, filters, DI support, etc.\r\n- Add support for managing the application host and pipeline\r\n- Add support for relevant metrics/tracing in eventing framework\r\n\r\n\r\nMore details here:\r\n\r\nhttps://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1921960530",
    "upvotes": 244,
    "labels": [
      "Epic",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85x8qc9",
        "parentId": null,
        "author": "Blackclaws",
        "content": "I\u0027d like to chime in here a bit because I think a couple of points might be relevant to consider.\r\n\r\nRight now there exist a couple of message handler frameworks. Some that come to mind are:\r\n- https://github.com/jbogard/MediatR\r\n- https://github.com/martinothamar/Mediator\r\n- https://github.com/MassTransit/MassTransit\r\n- https://github.com/JasperFx/wolverine\r\n\r\nAnd many more exist.\r\n\r\nGiven that this is supposed to become a first party implementation of similar capabilities, is there going to be a call for usage scenarios so we can give feedback on which capabilities are used and how or is this going to be handled entirely internally?\r\n\r\nI expect that this implementation will at least in part leverage source generation similar to how https://github.com/martinothamar/Mediator and https://github.com/JasperFx/wolverine do it. Albeit the difference between those two is that Wolverine does runtime source generation vs. Mediator using Roslyn source generators.\r\n\r\nIf it does use source generation I\u0027d like to point out that special care should be taken looking at the integration with existing other source generators. Specifically because there still is no way to chain them together. It would be great if the capability to create MessageHandlers on the fly using Source generation would still allow them to be _used_ from within whatever you\u0027re going to build. I\u0027d love for the aspnetcore team to champion changes in Roslyn that lead to us being able to chain Source Generators :wink: . Given that the Razor generator already presents similar issues. Runtime code generation will likely not work that well together with AOT unless you do a two-pass system similar to how Wolverine handles it.\r\n\r\nAll in all I think having a first party implementation as something people can fall back on or that other libraries can expand on is a good thing. I\u0027d just like it to be as usable as possible in the end :)",
        "createdAt": "2024-01-26T09:21:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1911727933"
      },
      {
        "id": "IC_kwDOAQzde85x92rr",
        "parentId": null,
        "author": "rogeralsing",
        "content": "Isn\u00B4t this exactly what you already tried with WCF when it came out?\r\nA unified platform for uni and bidirectional communication.\r\n\r\nWhat will you do differently this time around to prevent the mess that WCF was for, especially for one-way messaging?",
        "createdAt": "2024-01-26T13:05:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1912040171"
      },
      {
        "id": "IC_kwDOAQzde85x-32D",
        "parentId": null,
        "author": "codymullins",
        "content": "I would request and highly recommend that in building this you introduce a common abstraction layer that can be used by third party tools, much like the \u0060ILogger\u0060 abstraction introduced in previous versions of .NET. ",
        "createdAt": "2024-01-26T16:05:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1912307075"
      },
      {
        "id": "IC_kwDOAQzde85x_YIu",
        "parentId": null,
        "author": "Badabum",
        "content": "Why not support existing OSS tools like Wolverine or MediatR or smth else instead of building smth from scratch in-house?",
        "createdAt": "2024-01-26T17:42:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1912439342"
      },
      {
        "id": "IC_kwDOAQzde85x_qGP",
        "parentId": null,
        "author": "smstuebe",
        "content": "One question pops into my mind: How are schema registries covered?\r\n\r\nIs **\u0022Expose APIs for serializing and deserializing messages resolved from providers\u0022** meant to support schema registries out of the box, or is is meant to provide an interface to integrate a schema registry on your own?",
        "createdAt": "2024-01-26T18:35:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1912512911"
      },
      {
        "id": "IC_kwDOAQzde85x_3Dz",
        "parentId": null,
        "author": "oluatte",
        "content": "This is interesting. Some thoughts from experience with existing libraries in the space.\r\n\r\n- It would be great to be able to specify the \u0022shape\u0022 of the handlers / destination e.g.  route to methods on this interface. A big barrier to adoption of existing libraries is that they force you to change all your existing handlers to their custom interface \u0026 all change all your pocos to inherit from some base class.  It can mean changing a lot of code. A more lightweight approach would be wonderful.\r\n\r\n- Please support (or don\u0027t somehow exclude) databases as event sources. Many applications  would be just fine with a database backed queue (hello SKIP LOCKED in postgres). And using the database has other advantages including a natural outbox implementation, dead simple local development experience and more. It\u0027s a great place to start as long as one can switch to a proper queue down the road.",
        "createdAt": "2024-01-26T19:17:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1912566003"
      },
      {
        "id": "IC_kwDOAQzde85yC4G5",
        "parentId": null,
        "author": "voroninp",
        "content": "With outbox feature, please.",
        "createdAt": "2024-01-27T22:43:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1913356729"
      },
      {
        "id": "IC_kwDOAQzde85yPumB",
        "parentId": null,
        "author": "eglauko",
        "content": "\u003E Why not support existing OSS tools like Wolverine or MediatR or smth else instead of building smth from scratch in-house?\r\n\r\nOne man library. The tools are designed to promote their creators. The design and functionality depend on the owner. When someone is dissatisfied, they create another very similar tool to fulfil their needs.\r\n\r\nCreate APIs and Layers to standardise these tools seems much better to me.",
        "createdAt": "2024-01-30T12:20:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1916725633"
      },
      {
        "id": "IC_kwDOAQzde85yXscQ",
        "parentId": null,
        "author": "Badabum",
        "content": "\u003E \u003E Why not support existing OSS tools like Wolverine or MediatR or smth else instead of building smth from scratch in-house?\r\n\u003E \r\n\u003E One man library. The tools are designed to promote their creators. The design and functionality depend on the owner. When someone is dissatisfied, they create another very similar tool to fulfil their needs.\r\n\u003E \r\n\u003E Create APIs and Layers to standardise these tools seems much better to me.\r\n\r\nImo, that\u0027s exactly against the spirit and nature of OSS. Tools are not designed to promote developers(while this might be a good side effect). Those tools are built to solve problems, and people collaborate together to solve them. Now, MS looks at the existing ecosystem selects popular areas, and develops tools that essentially replace existing OSS alternatives. So what happens next? Use of those tools will obviously drop, and eventually, they will disappear. Why maintain some OSS tool when you can just sit, wait, and hope MS will be kind enough to develop the thing that solves your problem? This is not OSS.",
        "createdAt": "2024-01-31T10:24:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1918813968"
      },
      {
        "id": "IC_kwDOAQzde85yZkVU",
        "parentId": null,
        "author": "jbogard",
        "content": "Just as a point of clarification, MediatR is NOT comparable to this feature set, nor would plug in to a common event bus interface.\n\nMediatR is strictly in-process and in-memory. Not for durable async message queues.\n\nAnd also evidently MediatR exists solely to promote myself.\n\nI like this idea though. It should be easier to adopt event-driven architectures. It would be nice if it were like DI, logging, even EF Core where there is some default implementation but you can add your own 3rd party implementation.",
        "createdAt": "2024-01-31T15:13:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1919305044"
      },
      {
        "id": "IC_kwDOAQzde85yZ2mS",
        "parentId": null,
        "author": "kijanawoodard",
        "content": "The risk is that, similar to what happened with DI, the \u0022common interface\u0022 effectively defines the implementation and stifles innovation. There was a great thread many moons ago where the author of Simple Injector was trying to explain why the DI interface was hostile to the fundamental premise of Simple Injector. IIRC the conclusion was ~\u0022this is a solved problem that doesn\u0027t need innovation\u0022 which was off base considering Simple Injector was a reasonably popular project that was taking a different tack that wasn\u0027t achievable with the \u0022common interface\u0022.\r\n\r\nNot sure how that all finally resolved in the end. \r\n\r\nMy desire would be to _always_ be able to opt out and also to be able to rebuild whatever is given from smaller bits of the framework. ",
        "createdAt": "2024-01-31T15:47:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1919379858"
      },
      {
        "id": "IC_kwDOAQzde85yZ8xx",
        "parentId": null,
        "author": "jeremydmiller",
        "content": "\r\n\u003E One man library. The tools are designed to promote their creators. The design and functionality depend on the owner. When someone is dissatisfied, they create another very similar tool to fulfil their needs.\r\n\r\nFWIW, there\u0027s a company behind Wolverine ([JasperFx](https://jasperfx.net)), with similar commercial support offerings behind NServiceBus, MassTransit, and Rebus to name a few others. That argument doesn\u0027t really fly. Even Wolverine as the newest kid on the block has technical roots going back a decade. NServiceBus and MassTransit are ~15 years old at least. ",
        "createdAt": "2024-01-31T16:00:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1919405169"
      },
      {
        "id": "IC_kwDOAQzde85yZ_Cm",
        "parentId": null,
        "author": "iancooper",
        "content": "Worth noting if you find this exciting, that we already offer all the features described in Brighter (and more @voroninp we have your outbox and inbox already):\r\n\r\nhttps://github.com/BrighterCommand/Brighter \r\n\r\nSo if you are looking to work with a mature messaging framework, battle-tested at scale, (that also supports .NET Framework) feel free to check us out and start using events today instead of waiting.\r\n\r\nWe have been doing this for 10\u002B years, so our offering comes with a wealth of experience.",
        "createdAt": "2024-01-31T16:04:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1919414438"
      },
      {
        "id": "IC_kwDOAQzde85yaEkP",
        "parentId": null,
        "author": "iancooper",
        "content": "But to the larger point. The .NET space is perhaps more richly served than any other ecosystem with messaging tools, both commercial, commercial support and solely OSS. Competition amongst those projects has created a strength in offerings that other languages don\u0027t have.\n\nWhen MS enters the space that diversity and competition will be crushed, leading to less innovation and choice.\n\nThere is no argument that MS needed to enter this space, .NET developers were more richly served than any other ecosystem.\n\nInstead this is just the usual MS playbook - crush successful OSS - own all the things.\n\nWhen I spoke about a .NET Renaissance many years ago I was clear that MS had a duty of care as the 500lbs gorilla in the room not to do this.\n\nBut whilst previous flattening of .NET OSS could be seen as ignorance or lack of care, they know well enough by now, that this can only be seen as malice.",
        "createdAt": "2024-01-31T16:15:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1919437071"
      },
      {
        "id": "IC_kwDOAQzde85ydPp6",
        "parentId": null,
        "author": "jeremydmiller",
        "content": "FWIW, I\u0027m voting hard against any set of common abstractions for the entry point to messaging, and even more so to any kind of standardized interface signature for message handlers. That\u0027s a recipe for a mediocre developer experience that won\u0027t make .NET \u0022the best platform for cloud native applications\u0022. This isn\u0027t a place for a \u0022Conforming Container\u0022 kind of approach.",
        "createdAt": "2024-02-01T00:50:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1920268922"
      },
      {
        "id": "IC_kwDOAQzde85yd5ue",
        "parentId": null,
        "author": "to11mtm",
        "content": "Please, No.\r\n\r\nWe are thankfully blessed with a lot of good libraries at various layers for event-ish type stuff:\r\n\r\n - MagicOnion\r\n - GRPC\r\n - NATS\r\n - Orleans (if you look at it right and/or with the right level of violence)\r\n - Akka.Net (if you look at it right and/or with the right level of violence)\r\n - MessagePipe (if it\u0027s still around, I loved it though)\r\n - MediatR\r\n - RX and RX.Net\r\n   - Also cysharp\u0027s R3\r\n - MassTransit\r\n - All the rabbit-MQ stuff\r\n - Lots of other great things I don\u0027t know about.\r\n\r\nAgain, all of the above are extremely useful in the context of eventing or event driven systems.\r\n\r\nI don\u0027t see how one could make a sane abstraction however, since many of them are context dependent yet cannot be easily simplified. They mostly have enough different but unique semantics to where a common abstraction could easily be either of little utility or just dangerous.\r\n\r\nMy apologies for any firmness here, I have concerns that another \u0027conforming container\u0027 across all of these paradigms would risk turning the story of event driven systems in .NET into a cautionary tale about good intentions stifling innovation and flexibility, potentially at the benefit of specific vendors despite the unique opportunities each of the above mentioned cases would handle.\r\n\r\nI hope the community does not decide to add a \u0027conforming container, but for events\u0027, especially if it happens to conform best to a brand new system without clear benefit compared to existing ones aside from \u0027being first party\u0027 or \u0027well you need it anyway because ASPNETCORE\u0027.\r\n\r\nIf we wanted to fix eventing at a better level, I would suggest:\r\n\r\n - Working to provide wrapping invokers for events that allow for easy use of \u0060Task\u0060/\u0060ValueTask\u0060 with various semantics and minimizing allocation.\r\n - Providing a first party abstraction to get as close to \u0060I want everything directly written in this async method to execute on a dedicated thread (or within a limited priority pool)\u0060 as possible.\r\n - Providing FLEXIBLE (i.e. easy but able to get unsafe-ish) \u0060Option\u0060 and \u0060Either\u0060 ValueTypes.\r\n   - One can worry about CLR opt later, I just hate juggling namespaces in FP codebases \uD83D\uDE05 \r\n\r\nPoints One and Three, I think are fairly easy, it\u0027s just a matter of putting them where people can get to them.\r\n\r\nThat middle point, It actually solves a lot of other problems in the .NET space...\r\n\r\nMore Importantly, It helps the authors of all of the above things give better results to the community, as they have done for so long.\r\n\r\nIf you -do- choose to go down the route of a common abstraction, I would hope that it is a public process and you involve the above mentioned parties as well as others.",
        "createdAt": "2024-02-01T03:33:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1920441246"
      },
      {
        "id": "IC_kwDOAQzde85yeAtQ",
        "parentId": null,
        "author": "niemyjski",
        "content": "Just keeping an eye on this as a maintainer / co-creator of https://github.com/FoundatioFx/Foundatio. I just hope this doesn\u0027t follow the path of IDistributedCacheClient that I\u0027ve seen used by very few. Please engage early and often with leaders who have been in this space a long time.",
        "createdAt": "2024-02-01T04:10:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1920469840"
      },
      {
        "id": "IC_kwDOAQzde85yfCb5",
        "parentId": null,
        "author": "iancooper",
        "content": "\u003E Providing a first party abstraction to get as close to I want everything directly written in this async method to execute on a dedicated thread (or within a limited priority pool) as possible.\n\nThat is definitely an interesting one. Brighter uses a reactor/proactive model (depending on whether you use async) and has a single threaded message pump to preserve ordering (which you scale out). This also means we don\u0027t run into problems with thread pool exhaustion, or blocking on semaphores trying to limit work in flight at high scale. We use a custom SerializationContext based on an article by Stephen Toub to have async callbacks use that thread. But is a little gnarly and a framework solution to that problem would have re-usable value.",
        "createdAt": "2024-02-01T08:14:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1920739065"
      },
      {
        "id": "IC_kwDOAQzde85ygcBS",
        "parentId": null,
        "author": "TeddyAlbina",
        "content": "\u003E Just keeping an eye on this as a maintainer / co-creator of https://github.com/FoundatioFx/Foundatio. I just hope this doesn\u0027t follow the path of IDistributedCacheClient that I\u0027ve seen used by very few. Please engage early and often with leaders who have been in this space a long time.\n\nI love foundatio \u2764\uFE0F\u2764\uFE0F\u2764\uFE0F",
        "createdAt": "2024-02-01T11:27:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1921106002"
      },
      {
        "id": "IC_kwDOAQzde85yhkYN",
        "parentId": null,
        "author": "chrisfcarroll",
        "content": "Maybe one could compare the amount of money \u0026 effort that would be needed to develop a de novo fit-for-use eventing platform against the money \u0026 effort needed to create a set of template projects?\r\n\r\nFor Event Driven Architectures, having the right set of templates may be 80% of the developer win.",
        "createdAt": "2024-02-01T14:03:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1921402381"
      },
      {
        "id": "IC_kwDOAQzde85yh0do",
        "parentId": null,
        "author": "StephenCleary",
        "content": "If this does move forward, please also add:\r\n\r\n- Exposing APIs for managing dead-letter queues.\r\n\r\nWith some solutions, it can be hard to even figure out what the DLQ is named...",
        "createdAt": "2024-02-01T14:30:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1921468264"
      },
      {
        "id": "IC_kwDOAQzde85yiDaT",
        "parentId": null,
        "author": "niemyjski",
        "content": "Also, Kafka should be considered as it greatly impacts design. ",
        "createdAt": "2024-02-01T14:59:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1921529491"
      },
      {
        "id": "IC_kwDOAQzde85yiW9l",
        "parentId": null,
        "author": "jbogard",
        "content": "\u003E Also, Kafka should be considered as it greatly impacts design. \n\nThis proposal is about message queues. Kafka is not a queue, I don\u0027t think it should be considered.",
        "createdAt": "2024-02-01T15:36:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1921609573"
      },
      {
        "id": "IC_kwDOAQzde85yicjn",
        "parentId": null,
        "author": "voroninp",
        "content": "Good article about Kafka and message buses:  https://particular.net/blog/lets-talk-about-kafka",
        "createdAt": "2024-02-01T15:48:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1921632487"
      },
      {
        "id": "IC_kwDOAQzde85yifsb",
        "parentId": null,
        "author": "iancooper",
        "content": "Queues vs Streams: https://youtu.be/RVmDU1QJmAs?si=zNA2EJslnvX23-mg",
        "createdAt": "2024-02-01T15:54:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1921645339"
      },
      {
        "id": "IC_kwDOAQzde85yiy2K",
        "parentId": null,
        "author": "niemyjski",
        "content": "This more just comes down to messaging.. and I\u0027m leaving this here https://x.com/BdKozlovski/status/1735344274655592685?s=20\n\n\u003E Wanna use Kafka as a simple Queue?\n\n\u003E With the new KIP-932: Queues for Kafka, you soon may be able to!",
        "createdAt": "2024-02-01T16:30:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1921723786"
      },
      {
        "id": "IC_kwDOAQzde85yjspS",
        "parentId": null,
        "author": "davidfowl",
        "content": "First, apologies for the confusion and concern we caused with this issue. \r\n\r\nThe idea was to focus on small subset of event handling, effectively \u0022WebJobs v2\u0022 (https://github.com/Azure/azure-webjobs-sdk), principally for the Azure Functions folks but generic enough for everyone (like WebJobs is today). The goal is to align the Functions programming model with ASP.NET Core Minimal APIs so the developer experience is consistent. We have no plans to implement the application-level patterns which the rich ecosystem of .NET messaging frameworks and libraries already implement, such as sagas, outbox, persistence, or DTC integration. Your feedback here is important to us, and we will do better to reduce ambiguity up-front in the future.\r\n\r\nHere are some more details:\r\n\r\n- We\u0027re building on top of CloudEvents (https://cloudevents.io/) as the core event-type primitive in this system to provide a good integration story with existing systems and to build on established standards for cloud native applications.\r\n\r\n- We want to build a framework that follows the same paradigms and style as ASP.NET Core. This means building on top Microsoft.Extensions.*, and adding concepts like middleware, filters, and minimal APIs for events.  \r\n\r\nI want to be clear that this is not a work area that\u0027s been approached with malice towards or ignorance of the various libraries that exist in the ecosystem. Figuring out when we should integrate with/recommend/use/etc. an existing package when we\u0027re exploring a particular problem area is always complex, and we don\u0027t take that responsibility lightly. Our overarching goal here is always to be responsible towards our users and our community.\r\n\r\nWe\u0027re still prototyping and figuring out details, but this is what we sketched out:\r\n\r\n\u0060\u0060\u0060C#\r\nvar builder = Host.CreateApplicationBuilder();\r\n\r\nbuilder.AddAzureQueueService(\u0022orders\u0022);\r\n\r\nbuilder.Services\r\n  .AddEvents()\r\n  .AddAzureStorageQueueEventProvider(\u0022orders\u0022)\r\n  .AddTimerEventProvider(\u0022cron\u0022, \u0022*/5 * * * *\u0022);  \r\n\r\nvar app = builder.Build();\r\n\r\napp.UseRouting();\r\napp.UseExceptionHandler();\r\n\r\nvar orders = app.WithProvider(\u0022orders\u0022);\r\nvar cron = app.WithProvider(\u0022cron\u0022);\r\n\r\norders.MapEvent(\u0022order-received\u0022, (Order order, ILogger\u003CProgram\u003E logger) =\u003E\r\n{\r\n  // Handler logic here\r\n});\r\n\r\ncron.MapEvent((TimerInfo timer) =\u003E\r\n{\r\n  // Handler logic here\r\n});\r\n\r\napp.Run();\r\n\u0060\u0060\u0060",
        "createdAt": "2024-02-01T18:29:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1921960530"
      },
      {
        "id": "IC_kwDOAQzde85ykDIt",
        "parentId": null,
        "author": "iancooper",
        "content": "Thanks for the feedback @davidfowl it is helpful",
        "createdAt": "2024-02-01T19:17:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1922052653"
      },
      {
        "id": "IC_kwDOAQzde85ykIL1",
        "parentId": null,
        "author": "iancooper",
        "content": "@davidfowl Would I be right in thinking then that you perceive this as closer in scope to Celery than a messaging framework? https://docs.celeryq.dev/en/stable/getting-started/introduction.html\r\n",
        "createdAt": "2024-02-01T19:28:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1922073333"
      },
      {
        "id": "IC_kwDOAQzde85ykhxu",
        "parentId": null,
        "author": "mmisztal1980",
        "content": "Why are you calling it eventing, when it\u0027s clearly about messaging? Think about the confusion you\u0027ll introduce with the DDD crowd",
        "createdAt": "2024-02-01T20:26:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1922178158"
      },
      {
        "id": "IC_kwDOAQzde85ykydU",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E @davidfowl Would I be right in thinking then that you perceive this as closer in scope to Celery than a messaging framework? https://docs.celeryq.dev/en/stable/getting-started/introduction.html\r\n\r\nI don\u0027t think so but I don\u0027t know celery deeply (though I am aware of it). The framework design is intended to be much like ASP.NET Core but for non-http events. Here\u0027s the mental model we\u0027re using:\r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/95136/b924bbe4-fa04-4612-a5a6-86bb1157e001)\r\n\r\n\u003E Why are you calling it eventing, when it\u0027s clearly about messaging? Think about the confusion you\u0027ll introduce with the DDD crowd\r\n\r\nThat\u0027s good feedback. We\u0027re leaning into cloud events since that\u0027s the primitive everything is built on. Maybe \u0022cloud event framework\u0022 \uD83D\uDE04. If you look at the code sample there are also timer events. Nothing is set in stone yet but event from a .NET POV felt like the most generic thing (raise an event in response to this message from the network).\r\n\r\n",
        "createdAt": "2024-02-01T21:06:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1922246484"
      },
      {
        "id": "IC_kwDOAQzde85yk08Z",
        "parentId": null,
        "author": "captainsafia",
        "content": "To add onto @davidfowl\u0027s diagram above, \u0060*I*EventProvider\u0060 is an interface that can be implemented to support resolving events from a variety of sources. An application might contain multiple event providers, like the sample above which includes timer-based and Azure Storage Queue-based event providers.",
        "createdAt": "2024-02-01T21:14:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1922256665"
      },
      {
        "id": "IC_kwDOAQzde85yk4e4",
        "parentId": null,
        "author": "jeremydmiller",
        "content": "@davidfowl Thank you for the clarification, and I respect that you\u0027re trying to defuse the obvious concerns that some of us will have with this effort. All the same though, this is absolutely a messaging framework -- if a minimal one -- and will absolutely overlap and take away support from existing community and 3rd party tooling that already exists in .NET today.\r\n\r\nThat aside, I\u0027m a little curious if y\u0027all can share anything about your intended middleware strategy? And offhand, I\u0027d question that approach in terms of the testabillity right off the bat. A decent team can certainly take steps to detangle much of their code from the framework for testability, but you\u0027re dependent on developer discipline and practices for that rather than the tool promoting testability. Do y\u0027all have some existing ideas about how you\u0027re going to deal with that? Guidance, or maybe an integration testing harness of some sort?  ",
        "createdAt": "2024-02-01T21:23:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1922271160"
      },
      {
        "id": "IC_kwDOAQzde85yk6T-",
        "parentId": null,
        "author": "to11mtm",
        "content": "\u003E First, apologies for the confusion and concern we caused with this issue.\r\n\u003E \r\n\u003E The idea was to focus on small subset of event handling, effectively \u0022WebJobs v2\u0022 (https://github.com/Azure/azure-webjobs-sdk), principally for the Azure Functions folks but generic enough for everyone (like WebJobs is today). The goal is to align the Functions programming model with ASP.NET Core Minimal APIs so the developer experience is consistent. We have no plans to implement the application-level patterns which the rich ecosystem of .NET messaging frameworks and libraries already implement, such as sagas, outbox, persistence, or DTC integration. Your feedback here is important to us, and we will do better to reduce ambiguity up-front in the future.\r\n\r\nNo confusion from the .NET folks that have been around enough and knew this was about \u0060Microsoft.Extensions.IConformingAbstractionThatWillMapGreatToAzure\u0060 from the get-go...\r\n\r\n\u003E I want to be clear that this is not a work area that\u0027s been approached with malice towards or ignorance of the various libraries that exist in the ecosystem. Figuring out when we should integrate with/recommend/use/etc. an existing package when we\u0027re exploring a particular problem area is always complex, and we don\u0027t take that responsibility lightly. Our overarching goal here is always to be responsible towards our users and our community.\r\n\r\nI\u0027m already getting that Microsoft.Extensions.DependencyInjection vibe, hope that won\u0027t be the case...\r\n\r\n",
        "createdAt": "2024-02-01T21:29:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1922278654"
      },
      {
        "id": "IC_kwDOAQzde85ylQnM",
        "parentId": null,
        "author": "Aaronontheweb",
        "content": "ASP.NET is an HTTP and WebSocket programming framework - why does it need to have generic handling for \u0022cloud events\u0022? I\u0027m not questioning the _market need_ for having this, I\u0027m questioning _why does this need to be added to a web framework_?",
        "createdAt": "2024-02-01T22:22:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1922369996"
      },
      {
        "id": "IC_kwDOAQzde85ylWEi",
        "parentId": null,
        "author": "davidfowl",
        "content": "@jeremydmiller \r\n\r\n\u003E That aside, I\u0027m a little curious if y\u0027all can share anything about your intended middleware strategy? And offhand, I\u0027d question that approach in terms of the testabillity right off the bat. \r\n\r\nJust like ASP.NET Core, where you can fake the HttpContext, you can also fake the EventContext (which is just a CloudEvent and an IFeatureCollection).\r\n\r\n\u003E A decent team can certainly take steps to detangle much of their code from the framework for testability, but you\u0027re dependent on developer discipline and practices for that rather than the tool promoting testability. Do y\u0027all have some existing ideas about how you\u0027re going to deal with that? Guidance, or maybe an integration testing harness of some sort?\r\n\r\nInitial thoughts were around in memory model we have AKA WebApplicationFactory (though with a less bad API \uD83D\uDE04). TBH we haven\u0027t gotten that far yet. Like I said, the mental model is map to the primitives we\u0027ve defined in ASP.NET Core and change it when it doesn\u0027t work.\r\n\r\nPS: Some really early ideas on this looked at reusing ASP.NET Core itself and sending cloud events over HTTP (similar to how dapr works but in proc).",
        "createdAt": "2024-02-01T22:31:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1922392354"
      },
      {
        "id": "IC_kwDOAQzde85ylarX",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E ASP.NET is an HTTP and WebSocket programming framework - why does it need to have generic handling for \u0022cloud events\u0022? I\u0027m not questioning the market need for having this, I\u0027m questioning why does this need to be added to a web framework?\r\n\r\nI\u0027m not sure it\u0027s part of ASP.NET Core, though the issue is on this repository, it\u0027s not clear that this framework is going to be a fundamental part of ASP.NET Core. We\u0027re not sure where it\u0027ll live in the overall architecture diagram yet.",
        "createdAt": "2024-02-01T22:41:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1922411223"
      },
      {
        "id": "IC_kwDOAQzde85ynL8h",
        "parentId": null,
        "author": "jscarle",
        "content": "\u003E The risk is that, similar to what happened with DI, the \u0022common interface\u0022 effectively defines the implementation and stifles innovation. There was a great thread many moons ago where the author of Simple Injector was trying to explain why the DI interface was hostile to the fundamental premise of Simple Injector. IIRC the conclusion was ~\u0022this is a solved problem that doesn\u0027t need innovation\u0022 which was off base considering Simple Injector was a reasonably popular project that was taking a different tack that wasn\u0027t achievable with the \u0022common interface\u0022.\r\n\u003E \r\n\u003E Not sure how that all finally resolved in the end.\r\n\u003E \r\n\u003E My desire would be to _always_ be able to opt out and also to be able to rebuild whatever is given from smaller bits of the framework.\r\n\r\n.NET is very much an opt-in model. Most of us simply prefer to use the out-of-the-box model because, as a whole, .NET\u0027s defaults bring a lot of value. But you can go the full IKEA route with things like [CreateEmptyBuilder](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplication.createemptybuilder?view=aspnetcore-8.0).",
        "createdAt": "2024-02-02T05:44:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1922875169"
      },
      {
        "id": "IC_kwDOAQzde85ynOSj",
        "parentId": null,
        "author": "jscarle",
        "content": "\u003E ASP.NET is an HTTP and WebSocket programming framework - why does it need to have generic handling for \u0022cloud events\u0022? I\u0027m not questioning the _market need_ for having this, I\u0027m questioning _why does this need to be added to a web framework_?\r\n\r\nI\u0027d argue that some things are hard to get right. Rate limiting is a good example of one of those things that was recently added to the SDK.\r\n\r\nI\u0027ll take something that\u0027s built into the framework and battle tested by millions of developers over a roll my own implementation any day of the week.",
        "createdAt": "2024-02-02T05:51:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1922884771"
      },
      {
        "id": "IC_kwDOAQzde85ypLQ4",
        "parentId": null,
        "author": "ilmax",
        "content": "I was thinking that the ability to expose an http endpoint is missing in the webjob sdk and it would be appreciated here to expose the health checks over http rather than using a more convoluted approach.",
        "createdAt": "2024-02-02T09:21:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1923396664"
      },
      {
        "id": "IC_kwDOAQzde85ypTK0",
        "parentId": null,
        "author": "damianh",
        "content": "\u003E Why are you calling it eventing, when it\u0027s clearly about messaging? Think about the confusion you\u0027ll introduce with the DDD crowd\r\n\r\n\uD83D\uDC4E\uD83C\uDFFB For \u0022events\u0022\r\n\uD83D\uDC4D\uD83C\uDFFB To \u0022messages\u0022 (of which \u0022events\u0022 are a subset).\r\n\r\n",
        "createdAt": "2024-02-02T09:37:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1923429044"
      },
      {
        "id": "IC_kwDOAQzde85yrbVk",
        "parentId": null,
        "author": "Aaronontheweb",
        "content": "\u003E I\u0027d argue that some things are hard to get right. Rate limiting is a good example of one of those things that was recently added to the SDK.\r\n\r\n... But that\u0027s actually an argument _for_ using MassTransit / NServiceBus / whatever? It has the tens of millions of users already.",
        "createdAt": "2024-02-02T14:21:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1923986788"
      },
      {
        "id": "IC_kwDOAQzde85yrvao",
        "parentId": null,
        "author": "jscarle",
        "content": "\u003E \u003E I\u0027d argue that some things are hard to get right. Rate limiting is a good example of one of those things that was recently added to the SDK.\r\n\u003E \r\n\u003E ... But that\u0027s actually an argument _for_ using MassTransit / NServiceBus / whatever? It has the tens of millions of users already.\r\n\r\nI agree with you, however I see this feature in a different light. I prefer to look at it in the same way I view the [rate limiting](https://learn.microsoft.com/en-us/aspnet/core/performance/rate-limit?view=aspnetcore-8.0) that was added in .NET 7.0:\r\n- It\u0027s available, you\u0027re not obliged to use it. Usage is opt-in, not opt-out.\r\n- It\u0027s not meant to replace more advanced, complex, or important use cases.\r\n- In some organizations, due to governance, things like MassTransit are not available, this could give those organizations an alternative.\r\n- Not every project needs a large scale distributed event system which requires a high level of complexity. Perhaps this could allow more developers to start doing events/messages earlier in their project\u0027s lifetime.\r\n- It could be a great way to onboard developers that are new to the .NET ecosystem. I also see the use case that this could be great for quick proofs of concept.",
        "createdAt": "2024-02-02T15:08:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924069032"
      },
      {
        "id": "IC_kwDOAQzde85yr4Lc",
        "parentId": null,
        "author": "to11mtm",
        "content": "\u003E And also evidently MediatR exists solely to promote myself.\r\n\u003E \r\n\r\nNGL @jbogard  I always assumed it was mandated community service for AutoMapper.\r\n\r\n-----\r\n\r\n\u003E The risk is that, similar to what happened with DI, the \u0022common interface\u0022 effectively defines the implementation and stifles innovation. There was a great thread many moons ago where the author of Simple Injector was trying to explain why the DI interface was hostile to the fundamental premise of Simple Injector. IIRC the conclusion was ~\u0022this is a solved problem that doesn\u0027t need innovation\u0022 which was off base considering Simple Injector was a reasonably popular project that was taking a different tack that wasn\u0027t achievable with the \u0022common interface\u0022.\r\n\u003E \r\n\u003E Not sure how that all finally resolved in the end.\r\n\u003E \r\n\r\nWell the guy who wrote the book on .NET DI also came in, unfortunately it didn\u0027t help and sometimes new pain gets dropped but folks have given up on trying to reason. (personally speaking, finally gave up after Keyed services)\r\n\r\n-----\r\n\r\n\u003E .NET is very much an opt-in model. Most of us simply prefer to use the out-of-the-box model because, as a whole, .NET\u0027s defaults bring a lot of value. But you can go the full IKEA route with things like [CreateEmptyBuilder](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplication.createemptybuilder?view=aspnetcore-8.0).\r\n\r\nBut the way MSDI works, especially with ASPNETCORE, it\u0027s very painful to actually use it as an \u0027opt in\u0027 model. I actually did a work app with SI and the MS DI Extensions, SignalR\u002BAkka.NET\u002BASPNETCore and frankly it was a lot more violence to get around the conforming container\u0027s quirks in a correct way, compared to how things worked when we got to bring our own DI and had sane provider abstractions for ASPNET and framework.\r\n\r\n-----\r\n\u003E I agree with you, however I see this feature in a different light. I prefer to look at it in the same way I view the [rate limiting](https://learn.microsoft.com/en-us/aspnet/core/performance/rate-limit?view=aspnetcore-8.0) that was added in .NET 7.0:\r\n\u003E \r\n\u003E     * It\u0027s available, you\u0027re not obliged to use it. Usage is opt-in, not opt-out.\r\n\r\nNot sure if this argument is serious, \u00271st party opt in\u0027 typically becomes \u0027lock in\u0027 in MSFT space pretty easily.\r\n\r\n\u003E \r\n\u003E     * It\u0027s not meant to replace more advanced, complex, or important use cases.\r\n\r\nProbably my fear; perhaps at least I can look forward to seeing some amusing attempts of advanced, complex, or important use cases.\r\n\r\n\u003E \r\n\u003E     * In some organizations, due to governance, things like MassTransit are not available, this could give those organizations an alternative.\r\n\r\nSounds like a governance issue, shouldn\u0027t be papered over like this. There are plenty of great tools out there that a sane org shouldn\u0027t have a problem with.\r\n\r\n\u003E \r\n\u003E     * Not every project needs a large scale distributed event system which requires a high level of complexity. Perhaps this could allow more developers to start doing events/messages earlier in their project\u0027s lifetime.\r\n\r\nSee above comment; my fear is we wind up in a situation like EFCore where I\u0027m amazed at how many engineers can\u0027t do complex SQL without EF.\r\n\r\n\u003E \r\n\u003E     * It could be a great way to onboard developers that are new to the .NET ecosystem. I also see the use case that this could be great for quick proofs of concept.\r\n\r\nDepends on how tightly it\u0027s tied to what Azure does....",
        "createdAt": "2024-02-02T15:30:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924104924"
      },
      {
        "id": "IC_kwDOAQzde85yr42j",
        "parentId": null,
        "author": "jeremydmiller",
        "content": "\u003E It\u0027s available, you\u0027re not obliged to use it. Usage is opt-in, not opt-out.\r\n\r\nIts very existence will stop .NET developers from even researching or considering other options\r\n\r\n\u003E It\u0027s not meant to replace more advanced, complex, or important use cases.\r\n\r\nYou know full well that users will demand more use cases and it will grow over time to meet a larger subset of the functionality in existing tooling\r\n\r\n\u003E Not every project needs a large scale distributed event system which requires a high level of complexity. Perhaps this could allow more developers to start doing events/messages earlier in their project\u0027s lifetime.\r\n\r\nYou\u0027re making an assumption that non-MS tools are all difficult to get started with, and I think I\u0027m rejecting the premise of that basic assumption. I also think that you\u0027re making a massive leap of faith that a Microsoft team with no experience of building or using tools like this will automatically make something that\u0027s easier to use than the range of existing tooling\r\n",
        "createdAt": "2024-02-02T15:31:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924107683"
      },
      {
        "id": "IC_kwDOAQzde85yr8ma",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Its very existence will stop .NET developers from even researching or considering other options\r\n\r\nWebJobs and Azure functions already exist and are open source. Do you consider those messaging frameworks? If this was part of that effort would you feel the same way? (improving the programming model for something that already exists in what I mean).",
        "createdAt": "2024-02-02T15:40:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924123034"
      },
      {
        "id": "IC_kwDOAQzde85ysE_u",
        "parentId": null,
        "author": "jbogard",
        "content": "\u003E \u003E Its very existence will stop .NET developers from even researching or considering other options\n\u003E \n\u003E \n\u003E \n\u003E WebJobs and Azure functions already exist and are open source. Do you consider those messaging frameworks? If this was part of that effort would you feel the same way? (improving the programming model for something that already exists in what I mean).\n\nNo, I don\u0027t. Just because something can consume a message from a queue does not make it a messaging framework.\n\nConsider Spring Integration, which supports the patterns in Enterprise Integration Patterns. Those are the primitives a messaging framework lives in.",
        "createdAt": "2024-02-02T15:56:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924157422"
      },
      {
        "id": "IC_kwDOAQzde85ysg_v",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E No, I don\u0027t. Just because something can consume a message from a queue does not make it a messaging framework.\r\n\r\nCan others chime in? What are the elements above that make this a messaging framework and azure functions *not* one? I\u0027m trying to better understand the nuance.",
        "createdAt": "2024-02-02T16:57:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924272111"
      },
      {
        "id": "IC_kwDOAQzde85yszVv",
        "parentId": null,
        "author": "jscarle",
        "content": "\u003E Not sure if this argument is serious, \u00271st party opt in\u0027 typically becomes \u0027lock in\u0027 in MSFT space pretty easily.\r\n\r\nThe fact that a developer chooses to opt-in to the huge amount of value the default implementation of ASP.NET brings does not in itself consitute lock in. Like I mentioned, you *can* create an empty builder and make your own defaults. Or use the slim builder. Or heck, forget the builder and just write your own HTTP server. Nothing in .NET is lock-in. I could write my own implementation of various things that are brought in by the defaults, but *why would I want to?* \r\n\r\n\u003E my fear is we wind up in a situation like EFCore where I\u0027m amazed at how many engineers can\u0027t do complex SQL without EF\r\n\r\nThese are the same type of arguments that were originally made against top-level statements. In my personal opinion, the Program class *was* just a bunch of useless ceremony that I\u0027m glad they removed. There is a whole new generation of younger developers that simply do not understand the concept of, or even the words, _Dynamic-Link Library Entry-Point Function_.\r\n\r\nThere are discussions going on right now between developers wondering if we\u0027ll reach a point in the future where AI will become sufficiently proficient to the level that human language will be the next level of abstraction in software development.\r\n\r\nMaking the developer experience easier and simpler for developers does not in itself dilute our talent. Educating yourself to learn more advanced techniques is a personal choice to which everyone has different abilities and comfort levels. If you want to play life on hard mode, write assembler. For some developers, .NET is their hard mode. I chose to learn to write source generators and quite enjoy it, for others its their hard mode.\r\n\r\nMaking the conscious choice to learn how to write complex SQL queries is what differentiates a senior developer from a junior one.\r\n\r\n\u003E I also think that you\u0027re making a massive leap of faith that a Microsoft team with no experience of building or using tools like this will automatically make something that\u0027s easier to use than the range of existing tooling\r\n\r\nThat\u0027s a just a general blanket statement that completely dismisses the experience and skill of a massive pool of incredibly talented engineers who have collectively as a whole brought a lot of great things into the SDK over the years.\r\n\r\n",
        "createdAt": "2024-02-02T17:24:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924347247"
      },
      {
        "id": "IC_kwDOAQzde85ytFoN",
        "parentId": null,
        "author": "codymullins",
        "content": "\u003E I also think that you\u0027re making a massive leap of faith that a Microsoft team with no experience of building or using tools like this will automatically make something that\u0027s easier to use than the range of existing tooling\r\n\r\nThis is a bizarre statement and pure nonsense. I don\u0027t see the need here to attack the capabilities \u0026 skills of the dev team. You could just as easily push for this to live outside the core repositories or help shape how this features looks. \r\n\r\nBesides, if you think what they\u0027ll provide isn\u0027t going to be easier than existing tooling, why do you care? This seems to be a very basic use case, which let\u0027s be honest, most apps would benefit from having less options and complexity.",
        "createdAt": "2024-02-02T18:04:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924422157"
      },
      {
        "id": "IC_kwDOAQzde85yte14",
        "parentId": null,
        "author": "ScottArbeit",
        "content": "What\u0027s in a messaging framework?\n\n- Publish messages\n- Subscribe to messages\n- Client library includes Polly / retry logic so I don\u0027t have to do it myself\n- Supports multiple transports (like Dapr does Pub/Sub over lots of providers)\n- (stretch goal) Can chain messaging pipelines; i.e. can configure a subscriber to automatically forward as a publisher\n\nEverything else is a matter of taste, right?\n\nExample: I love Azure Service Bus and all of the structured and unstructured metadata it has on each message, but when you consume it through Dapr, you lose that in a lowest-common-denominator implementation of messaging. That\u0027s what I expect here. And, hey, that\u0027s fine, I just include a Metadata dictionary in my payload data and get on with my life, and I get the benefit of runtime-pluggable pub/sub providers. If I really want the advanced stuff, I can write directly against the Service Bus SDK and not go through Dapr.\n\nI\u0027m guessing we\u0027re looking at something similar in this epic, and it\u0027ll be good enough for most use cases.",
        "createdAt": "2024-02-02T19:17:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924525432"
      },
      {
        "id": "IC_kwDOAQzde85ytm8n",
        "parentId": null,
        "author": "jeremydmiller",
        "content": "@codymullins \r\n\r\n\u003E Besides, if you think what they\u0027ll provide isn\u0027t going to be easier than existing tooling, why do you care?\r\n\r\nBecause it\u0027s not remotely a fair playing field between Microsoft tools and tools originating from outside of Microsoft in the .NET ecosystem regardless of the actual ease of use or developer experience for the various tools. If there\u0027s an official Microsoft offering here that\u0027s remotely competent, many shops will never consider any other options. If nothing else, a Microsoft tool makes it very hard to even gain any attention or visibility for non-Microsoft options. \r\n\r\nI\u0027ve got a decade plus of effort into Wolverine and a new company partially wrapped around that, so I\u0027ve admittedly got some serious skin in the game here. \r\n\r\nBut I do apologize for questioning the abilities of the MS teams involved. ",
        "createdAt": "2024-02-02T19:36:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924558631"
      },
      {
        "id": "IC_kwDOAQzde85yuCq5",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Because it\u0027s not remotely a fair playing field between Microsoft tools and tools originating from outside of Microsoft in the .NET ecosystem regardless of the actual ease of use or developer experience for the various tools. If there\u0027s an official Microsoft offering here that\u0027s remotely competent, many shops will never consider any other options. If nothing else, a Microsoft tool makes it very hard to even gain any attention or visibility for non-Microsoft options.\r\n\r\nThis was my point about webjobs and azure functions. Microsoft already has an offering in this space. We want to align the programming models so that it looks more like ASP.NET Core and minimal APIs.",
        "createdAt": "2024-02-02T20:44:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924672185"
      },
      {
        "id": "IC_kwDOAQzde85yuE-s",
        "parentId": null,
        "author": "iancooper",
        "content": "Let\u0027s look at the historical record here. The emergence of an MS .NET Framework kills other frameworks even if those frameworks are more feature rich. \n\nThere is now no alternative in package management, heavyweight ORM, MVC framework, HTTP API, DI. As MS entered each of those spaces, they displaced the incumbents. Even where the MS .NET product did not satisfy all the use cases it covered enough of the majority of .NET developers needs to starve those projects of oxygen and kill them. Those that persisted were often killed by later releases. It\u0027s not news.\n\nWhy?\n\nThe .NET community has a tendency towards monoculture, a tendency to privilege MS offerings over all others. This is unfortunate for MS as well as indie developers. It means MS has to weigh their actions against the evidence of that (as seen by the casualties of prior incursions). That is probably as frustrating to MS devs who feel they could do an awesome job as indie devs who know they would be crushed whether it was or not. It\u0027s not a level playing field.\n\nThe line here is probably between an MS monoculture - and a confirmation to . NET\u0027s critics that there is no creative MS community, just what comes from MS - which will forever blight . NET and stop it winning new converts.\n\nIf you want an MS monoculture for .NET, I get why you would ask for this.\n\nBut please appreciate that those of us that believe that .NET\u0027s only future is as a diverse ecosystem which engages and participates in the wider world of software development don\u0027t want to see that monoculture.\n\nMonoculture meant that . NET fell behind in the innovation stakes for years, with only grass roots OSS pushing it to react and engage. \n\nLet me ask different questions:\n\n * Do existing OSS \u0026 COTS projects meet or aspire to these goals? I know many have exactly the goals of this epic (I work on one).\n* Are .NET developers held back from using messaging in Cloud Native environments? No, they have richer options than any other language.\n* What happens if MS does nothing? . NET developers continue to enjoy a rich diversity of mature frameworks for messaging in cloud environments.\n* What happens if MS does something? .NET developers choice is reduced as indie projects cease and innovation slows (the ASP.NET team is only so large).\n* Could MS help these projects instead as they did with Polly, if they feel there are better approaches to onboard new developers? Very possibly as they are OSS. I suspect MS helping indie projects has less monoculture impact if the indie projects retain control. (An issue here is that the Foundation - I suspect due to lack of funding - is no PSF or CNCF to help create the space for such collaboration).\n\nWe are at a tipping point. The indie developers are clustered around one of the few spaces they don\u0027t compete with MS. You have a choice. Take the hill, or leave them in peace. Which will it be? Because once they are gone, they won\u0027t come back.",
        "createdAt": "2024-02-02T20:52:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924681644"
      },
      {
        "id": "IC_kwDOAQzde85yuHh9",
        "parentId": null,
        "author": "davidfowl",
        "content": "I don\u0027t want to dismiss any of what @jeremydmiller and @iancooper are expressing (we\u0027ve all lived this more than once), but I want to focus on web jobs and azure functions. These are not new libraries, Microsoft and .NET are not non-existent in this space as there are already libraries there (albeit possibly less well known).\r\n\r\n\u003Cimg width=\u0022719\u0022 alt=\u0022image\u0022 src=\u0022https://github.com/dotnet/aspnetcore/assets/95136/0908a157-0663-4b3b-9111-abd2414516d7\u0022\u003E\r\n\r\nThe azure web jobs sdk has ~300M downloads so it exists today. I don\u0027t want you to focus on the epic\u0027s original details, but instead the fact that this is webjobs vnext. \r\n\r\nHow does that change the discussion? Does making it align with ASP.NET Core\u0027s programming model fundamentally change the fact that it already exists in this space?",
        "createdAt": "2024-02-02T21:02:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924692093"
      },
      {
        "id": "IC_kwDOAQzde85yuHy-",
        "parentId": null,
        "author": "onionhammer",
        "content": "If MS picks a \u0022side\u0022, like they did with Polly, they are just utilizing the defacto standard anyways. There is no \u0027defacto standard\u0027 in this instance. I\u0027ve seen maintainers in this thread complaining this will kill their offering while they only have 1k stars on their decade old project anyways.. You\u0027ll still get a low rate of adoption whether Microsoft has an offering here or not.\r\n\r\nPerhaps if this was \u0022Azure SDK\u0022 scoped and not \u0022.NET\u0022 scoped, there would be less uproar?",
        "createdAt": "2024-02-02T21:03:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924693182"
      },
      {
        "id": "IC_kwDOAQzde85yuJJx",
        "parentId": null,
        "author": "iancooper",
        "content": "Or the point I think that @jeremydmiller was trying to make. \n\nWe would love to compete against the ASP.NET team in the messaging field trading our experience against their smarts and enthusiasm. It would be a glorious battle and you would all gain from how it spurred it us all on.\n\nBut that battle will never happen, because on past evidence the .NET community will crown the ASP.NET team victors before anyone steps into the ring. ",
        "createdAt": "2024-02-02T21:07:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924698737"
      },
      {
        "id": "IC_kwDOAQzde85yuOKp",
        "parentId": null,
        "author": "oluatte",
        "content": "\u003E But that battle will never happen, because on past evidence the .NET community will crown the ASP.NET team victors before anyone steps into the ring.\r\n\r\n@iancooper  Why do you think the .NET community did this in the past and will do it again? I am genuinely curious here as to what your take is. \r\n\r\nAlso curious what other non-maintainer members of the community think.   ",
        "createdAt": "2024-02-02T21:23:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924719273"
      },
      {
        "id": "IC_kwDOAQzde85yuOoC",
        "parentId": null,
        "author": "onionhammer",
        "content": "I think folks being a bit dramatic/hyperbolic.. if a project hasn\u0027t taken off and been embraced by a large community PRIOR to this, what makes you think it would have ever been regardless of this new project (which appears to have a fairly narrow aim, as @davidfowl has been at pains to point out)\r\n\r\nThere are areas where Microsoft appears to have gone to great lengths NOT to step on OSS developers toes, and those areas are now woefully bad: Swashbuckle/NSwag I\u0027m looking squarely at you - now Node frameworks are eating .NETs lunch WRT to end-to-end type safety, but we have nothing nearly as good for ASP.NET Core \u003C-\u003E TypeScript",
        "createdAt": "2024-02-02T21:24:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924721154"
      },
      {
        "id": "IC_kwDOAQzde85yuX7y",
        "parentId": null,
        "author": "iancooper",
        "content": "@onionhammer History is littered with .NET projects that had large followings prior to the MS team entering the space. They were arguably better than early MS releases. They died anyway.\n\nAll of us working in OSS .NET find it hard to get attention. As a European I have to pay my way to most US .NET focused conferences. That makes it hard for Brighter to get traction in the US which remains the most influential market for .NET OSS.\n\nCry me a river. That is not your problem. But the idea that we could compete on the merits of our ideas with MS. That just won\u0027t happen.\n\nLet me ask you the question: what will you be able to do tomorrow if the ASP.NET team works on this that you could not do today?\n\nThe problem with NSwag speaks far more to the need for a robust Foundation that can work to ensure continuity by finding new maintainers.\n\nBut, this is probably why .NET is a monoculture because we lack the community to solve the problems around  our OSS offerings and fall back to \u0022this is why MS should fix this\u0022.",
        "createdAt": "2024-02-02T21:54:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924759282"
      },
      {
        "id": "IC_kwDOAQzde85yubNu",
        "parentId": null,
        "author": "to11mtm",
        "content": "\u003E I\u0027ve seen maintainers in this thread complaining this will kill their offering while they only have 1k stars on their decade old project anyways.. You\u0027ll still get a low rate of adoption whether Microsoft has an offering here or not.\r\n\u003E\r\n\r\nSheer rudeness to try and belittle people who care about .NET OSS and a reminder why it\u0027s such a dumpster fire _aside_,\r\n1k stars IMO shows a noticeable rate of adoption. Is it huge? No. But certainly indicative of a group of people who appreciate what the thing does, even if it may be slightly niche.\r\n \r\n\u003E Perhaps if this was \u0022Azure SDK\u0022 scoped and not \u0022.NET\u0022 scoped, there would be less uproar?\r\n\r\nProbably, because then it would be an azure package, and we wouldn\u0027t be worried about a conforming container style API that hamstrings anything other than the initial implementation..",
        "createdAt": "2024-02-02T22:06:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924772718"
      },
      {
        "id": "IC_kwDOAQzde85yuiiw",
        "parentId": null,
        "author": "iancooper",
        "content": "@onionhammer \n\n\u003E I\u0027ve seen maintainers in this thread complaining this will kill their offering while they only have 1k stars on their decade old project anyways.. You\u0027ll still get a low rate of adoption whether Microsoft has an offering here or not.\n\nIf you think stars measure quality over visibility and that visibility has a dependency on anything other than your capacity to access a given market, you are wrong. \n\nThere are truly great OSS projects with 5 stars and truly awful ones with 100K\u002B.\n\nPerhaps look at some of those projects, assess what they offer, talk about them if they do seem to offer something instead of assuming that stars are anything but exposure.\n\nBrighter used Polly long before anyone else knew what it was, especially the ASP. NET team. It barely had a star. We picked it because we recognised its value (though \n even Polly needed US \u0022ownership\u0022 to gain traction). If we picked on stars over value we would never have touched it.\n\nBrighter provided the same functionality that Mediatr does two years earlier. But taking about that in the U.K. wasn\u0027t going to pull in US developer eyeballs.\n\nBut this is the heart of the problem... Everyone becomes the equivalent ofa UK developer trying to be heard in a market dominated by US community voices when MS is in the room.\n\nI don\u0027t make a living off Brighter. If MS replaced it and it won\u0027t change my life (although I may be frustrated at the technology of the dominant player). But I don\u0027t want to see a .NET monoculture. ",
        "createdAt": "2024-02-02T22:29:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924802736"
      },
      {
        "id": "IC_kwDOAQzde85yulnX",
        "parentId": null,
        "author": "davidfowl",
        "content": "I think this discussion is centered MS \u0022entering the space\u0022 yet we are already in the space... ",
        "createdAt": "2024-02-02T22:37:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924815319"
      },
      {
        "id": "IC_kwDOAQzde85yuyXX",
        "parentId": null,
        "author": "schnerring",
        "content": "\u003E There are areas where Microsoft appears to have gone to great lengths NOT to step on OSS developers toes, and those areas are now woefully bad: Swashbuckle/NSwag\r\n\r\n\u003E The problem with NSwag speaks far more to the need for a robust Foundation that can work to ensure continuity by finding new maintainers.\r\n\r\nSorry for the offtopic question, but what\u0027s the issue with NSwag? It\u0027s maintaned and even [used by the Microsoft\u0027s OpenAPI dotnet tool](https://learn.microsoft.com/en-us/aspnet/core/web-api/microsoft.dotnet-openapi?view=aspnetcore-8.0#options).\r\n\r\nIs the project\u0027s sustainability an issue? (I think it\u0027s mostly a one man show)\r\n\r\n[![dependency](https://github.com/dotnet/aspnetcore/assets/3743342/c527b551-96a0-4bec-895e-9f7d9df1a4a4)](https://xkcd.com/2347/)\r\n",
        "createdAt": "2024-02-02T22:53:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1924867543"
      },
      {
        "id": "IC_kwDOAQzde85yvTCS",
        "parentId": null,
        "author": "iancooper",
        "content": "\u003E I think this discussion is centered MS \u0022entering the space\u0022 yet we are already in the space... \n\nWebJobs, Dapr etc. are different ecosystems. Yes they compete with messaging frameworks but as they are different ecosystems which do not suffer from the 500lbs gorilla problem. They don\u0027t compete any more or less than AWS Lambda does.\n\nThe discussion is about a monoculture in the .NET ecosystem. The goals outlined in this epic where for MS to have a product all major libs and frameworks required for a container app; when placed alongside EF, DI, NuGet then the there is no .NET ecosystem just a monoculture.\n\nAgain, ask the question as to what happens if you do not write software. The answer is that .NET developers remain able to write container apps that use queues and streams.\n\n",
        "createdAt": "2024-02-03T01:33:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925001362"
      },
      {
        "id": "IC_kwDOAQzde85yvUl0",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E WebJobs, Dapr etc. are different ecosystems. Yes they compete with messaging frameworks but as they are different ecosystems which do not suffer from the 500lbs gorilla problem. They don\u0027t compete any more or less than AWS Lambda does.\r\n\r\nRight so this is the path we\u0027re headed down. Making WebJobs, a thing that *already exists*, align with the programing model we built in ASP.NET Core (btw we\u0027re already been doing this and that\u0027s why it supports the host builder and generic host/ILogger etc).\r\n\r\n\u003E The discussion is about a monoculture in the .NET ecosystem. The goals outlined in this epic where for MS to have a product all major libs and frameworks required for a container app; when placed alongside EF, DI, NuGet then the there is no .NET ecosystem just a monoculture.\r\n\r\nWhile that\u0027s a fair discussion to have, it feels inappropriate to ignore the fact that we\u0027re also talking about something concrete, webjobs vnext programming model alignment.\r\n\r\n\u003E Again, ask the question as to what happens if you do not write software. The answer is that .NET developers remain able to write container apps that use queues and streams.\r\n\r\nWe already have the software and many are using it today, we just want to make the API paradigms align.\r\n",
        "createdAt": "2024-02-03T01:40:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925007732"
      },
      {
        "id": "IC_kwDOAQzde85yvaGF",
        "parentId": null,
        "author": "niemyjski",
        "content": "Let me prefix this by saying more than half of the conversation here should be happening at the dotnet foundation or someplace other than here. While there are really valid concerns, if you build a great product, you should have nothing to worry about.  If Microsoft wants to build a message abstraction than by all means, please go ahead (I just think they should list out some alternatives). It will only make the ecosystem better and increase awareness. I\u0027ve been on the receiving end when Microsoft created t4 hurting our entire private non funded business overnight and for the next decade. I\u0027ve also been an open-source maintainer working on basic (compared to NServiceBus or MassTransit) .NET distributed components for a decade now (and have insane respect for people (and projects) behind projects like NServiceBus and MassTransit). We\u0027ve gotten a total of ZERO donations to the project in that time and I\u0027ve gotten a single coffee via donation in over a decade (and I\u0027m grateful for the one I got). I do it because I enjoy it and I feel like the community can prosper and I can learn from it. I don\u0027t like how the community can be toxic (as I experienced and was banned by someone in this thread...), we should be helping the community by providing each other constructive feedback.\r\n\r\n@davidfowl and @captainsafia, having used both azure sdks for webjobs (for https://github.com/exceptionless/Exceptionless jobs before we moved to k8s) and aws lambdas. I would love for you to build something that is pluggable and can be used with either of these (not just azure focused) as well as community easily (which sounds like that path you are taking). It\u0027s always been way too hard for others to have a generic queue job be invoked from say an http request, lambda or other and scale/move between them. This led us to build queue jobs here / job hosting built on .NET core https://github.com/FoundatioFx/Foundatio/blob/master/README.md#jobs . Even with this, it would be a pain to support everything web jobs sdk does today.",
        "createdAt": "2024-02-03T02:45:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925030277"
      },
      {
        "id": "IC_kwDOAQzde85yvdzd",
        "parentId": null,
        "author": "jscarle",
        "content": "The very first line of code I ever wrote on a PC was written in the free version of QBASIC that came with MS-DOS back in the early nineties.\r\n\r\nThat only happened because Microsoft made the choice to include it for free, out of the box, as part of their paid product. I was a teenager. I wasn\u0027t in a position to pay for fancy developer tools. That tool, that Microsoft tool, is what unlocked a path as a Visual Basic developer, which later unlocked a path as a Classic ASP VBScript developer, and eventually brought me to .NET Framework 1.0, and I never looked back.\r\n\r\nMicrosoft unlocked an entire life\u0027s worth of knowledge and experience that has allowed me to build a large variety of things that never would have been possible without them.\r\n\r\nYou know who never helped me along the way? Developers. So many developers are so incredibly hostile, protective, territorial, and defensive, its amazing that Microsoft ever voluntarily chose to embrace open source as much as it has knowing how toxic so many of you can be.\r\n\r\nLike seriously, are any of you even able to take an honest step back and actually appreciate how much hard work has been put into the .NET SDK and how much value it brings as a whole? The amount of productivity that we get out of the box is absolutely insane.\r\n\r\nNone of the decisions are going to be perfect. Sometimes they\u0027re outright horrible and the trauma will last for decades (.NET Standard \uD83D\uDE44). But as a whole, .NET is amazing (.NET Aspire, for free \uD83E\uDD2F).\r\n\r\nThere have been moments where some of those decisions have caused huge waves within the .NET ecosystem. The day everyone found out that System.Text.Json was going to be a thing, people came at Microsoft hard, the Newtonsoft.Json advocates tried to fight it, it was a mess for a while, and now everyone\u0027s forgotten and moved on because as a whole, its better this way.\r\n\r\nThis whole argument that Microsoft is this giant that comes out to extinguish others whenever they touch something is simply false. Developers use what\u0027s better for their reality no matter who makes it. JetBrains Rider literally stole a huge chunk of the Visual Studio market share by simply being a better developer experience for the realities of those that have chosen to change their IDEs.\r\n\r\nUntil this very week, when I attended the conferences at NDC London, I had never been in a position to be able to attend a developer conference. This conference, this experience, was incredible fulfilling. I learned some great new things and talked to a lot of interesting people. But it also left me with some genuine disappointment and sadness.\r\n\r\nWhat I witnessed is a conference center filled with developers with varying degrees of experience arriving with a genuine desire to want to learn from the presenters and watched as those same developers were too afraid to ask questions. I myself felt flat out dismissed by some big names whom I had a high amount of respect for and was excited to have an opportunity to meet.\r\n\r\nI truly wish people would retrieve their heads from where they\u0027ve put them and make the effort to actually have meaningful conversations. And maybe, just maybe, we could live in a reality where developers would prefer talking to other developers instead of living in one where developers are so affraid of the hostility that they\u0027d rather ask their questions to a machine.",
        "createdAt": "2024-02-03T03:42:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925045469"
      },
      {
        "id": "IC_kwDOAQzde85ywuRJ",
        "parentId": null,
        "author": "Pinox",
        "content": "Must say when I read this thread there will always be people/authors impacted by disruptive change. Unfortunately change is part of the world. If you have something unique you better make sure you capitalize quickly on your investment as the nature of the world is to commoditize those things that works well and adds value.\r\n\r\nFirstly, thanks to all those authors taking the risk to invest their time in new ideas and products that adds value to the community, you are they guys pushing the boundaries of innovation for the rest of the world to enjoy.\r\n\r\nNow MS like all other tech companies have caused a lot of disruptive change in certain parts of the software world. I myself got burned seriously by MS on Windows Forms and UWP.\r\nAlso, the MS of yesterday did not have a proper business model that was sustainable into the future, but thanks the cloud services that totally changed.  \r\n\r\nMicrosoft is starting to make more money from cloud services than any other product and therefor for the first time their software interest is \u0022better\u0022 aligned to the interest of the software community. This is not just about .NET anymore but all software as all software is used in the cloud. No longer do they have to charge money for every piece of software as they ultimately support a model to make money on cloud services.\r\n\r\nThere is another incentive on supporting .NET particularly as MS had historically based many of their products on similar tech.  Every 10% increase in performance (speed/ reliability/ security / memory) directly results in massive saving on the bottom line of MS. So it\u0027s becoming a win-win situation between developers (on average) and MS and that is a good thing.\r\n\r\nAt the same token I can list an exhaustive list of libraries that I have used in the past that eventually fell out of favor for various reasons that also ended up costing me time and effort to replace.\r\n\r\nLet\u0027s use an example like MvvmLight, I used and loved this lib while it existed. At the end of the lifespan of MvvmLight it was not actively developed anymore as it \u0022just worked\u0022.  Then someone like Sergio recreated a MS version of this library (with I think the help of Laurent Bugnion) that is now called Communitytoolkit.Mvvm.  If you followed the journey of Communitytoolkit.Mvvm then you know this is a library that was now in a different stratosphere.  Super performant, almost zero memory allocation and incorporating source code generators.  The final product that MS created here was superior in every possible metric you can use.\r\n\r\nThe reality is MS employs some of the best engineers in the world and it shows in products like .NET , Blazor , EF etc.  New innovation like minimal api\u0027s , incorporating identity management in the latest .NET 8 is epic and makes life just so much easier as a developer.  The fact that \u0022performance\u0022 is now a feature across the whole stack is resulting in amazing tech.\r\n\r\nThe reality is all these products are open source and everyone can contribute. .NET still needs a lot of innovation and unification between the historical separate product lines. What I want is a unified .NET where there is the least amount of fragmentation in the community. \r\n\r\nThere is no need to have 5 different libraries that is essentially doing the same thing when you can have one that is super easy to use and incorporate all the best metrics out of the box.  \r\n\r\nConsolidation is good and should be embraced as it results in less fragmentation in the .NET community with more resources available for new innovation.\r\n\r\nSo, I say to MS and many prominent MS engineers on this thread. You have the credentials and track record of creating amazing new tech and if your track record is anything like the past few years I would say just go and do it because you have treated us with really amazing products !!",
        "createdAt": "2024-02-03T16:28:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925375049"
      },
      {
        "id": "IC_kwDOAQzde85yw3hc",
        "parentId": null,
        "author": "to11mtm",
        "content": "\u003E \u003E WebJobs, Dapr etc. are different ecosystems. Yes they compete with messaging frameworks but as they are different ecosystems which do not suffer from the 500lbs gorilla problem. They don\u0027t compete any more or less than AWS Lambda does.\r\n\u003E \r\n\u003E Right so this is the path we\u0027re headed down. Making WebJobs, a thing that _already exists_, align with the programing model we built in ASP.NET Core (btw we\u0027re already been doing this and that\u0027s why it supports the host builder and generic host/ILogger etc).\r\n\r\nThen why do you need \u0027more\u0027 integration than that? I suppose I\u0027m confused because while I\u0027ve not done WebJobs, I\u0027ve worked with a few other event driven and messaging frameworks that either plugged into Hostbuilder/etc to provide a good API and/or in general were low enough ceremony as-is.\r\n\r\nBesides, that way if WebJobs Vwhatever on Azure changes, it can just get forgotten and ignored like DotNetty rather than being a forced refactor. Decoupling, yay!\r\n\r\n\u003E \r\n\u003E \u003E The discussion is about a monoculture in the .NET ecosystem. The goals outlined in this epic where for MS to have a product all major libs and frameworks required for a container app; when placed alongside EF, DI, NuGet then the there is no .NET ecosystem just a monoculture.\r\n\u003E \r\n\u003E While that\u0027s a fair discussion to have, \r\n\r\nWe\u0027ve been talking about going to group therapy for over half a decade now... Is it going to happen?\r\n\r\n\u003E it feels inappropriate to ignore the fact that we\u0027re also talking about something concrete, webjobs vnext programming model alignment.\r\n\u003E \r\n\u003E \u003E Again, ask the question as to what happens if you do not write software. The answer is that .NET developers remain able to write container apps that use queues and streams.\r\n\u003E \r\n\u003E We already have the software and many are using it today, we just want to make the API paradigms align.\r\n\r\nWill restate some prior feedback; if the title was \u0027WebJobs Framework\u0027 or \u0027WebJobs in ASPNETCORE\u0027 and the initial post didn\u0027t have a bunch of stuff that was too vague to make it clear this was about WebJobs, you might not have to keep trying to ask folks to talk about Rampart.  \r\n\r\nThat aside, Here\u0027s why the other part of that discussion *is* important to OSS, that at least some of us are probably forgetting (I know I privately discussed with some OSS folks, and their response is about what I expected from the experienced ones...) yet has been part of my core point here... Given the already poor messaging around this enhancement, How many projects are going to wind up fielding a bunch of requests to shoehorn things into this model whether it\u0027s a good fit or not?\r\n\r\nAnd *that\u0027s* why the other conversation is good to have, because the communication is just not there and still one sided... maybe that\u0027s why people in this thread are *already* wary from the get go?",
        "createdAt": "2024-02-03T17:50:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925412956"
      },
      {
        "id": "IC_kwDOAQzde85yw6U8",
        "parentId": null,
        "author": "iancooper",
        "content": "\u003Ewe just want to make the API paradigms align.\r\nNow ASP.NET has minimal API, then I expect that adoption will push many of us that have \u0022familiarity to ASP.NET devs\u0022 as a design goal. It is explicitly one that the Brighter team thinks about and we had targeted it for v10 but prioritized work around our Kafka support instead. It\u0027s still on our roadmap.\r\n\r\nI can understand that you feel showcasing .NET\u0027s strengths would benefit from being able to show a consistent API for these use cases.\r\n\r\nI also know that the folks who want to deploy cloud native apps at scale would not tend to look at the interfaces that exist today and consider them a problem. Spring Boot messaging or Go micro are the yardsticks for comparison not ASP.NET. But at the cost of the existing OSS community in this space? That feels like local optima over systems thinking to me.\r\n",
        "createdAt": "2024-02-03T18:36:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925424444"
      },
      {
        "id": "IC_kwDOAQzde85yw6o-",
        "parentId": null,
        "author": "to11mtm",
        "content": "Additional Thought:\r\n\r\nI think if Microsoft wants to make WebJobs vNext a \u0027first class citizen\u0027 in .NET, I\u0027d strongly suggest \u0027dogfooding\u0027 the process the way OSS contribs have to do it, because OSS Projects should be able to be treated as first class citizens as well.",
        "createdAt": "2024-02-03T18:42:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925425726"
      },
      {
        "id": "IC_kwDOAQzde85yw7ze",
        "parentId": null,
        "author": "davidfowl",
        "content": "@to11mtm \r\n\r\n\u003E Then why do you need \u0027more\u0027 integration than that? I suppose I\u0027m confused because while I\u0027ve not done WebJobs, I\u0027ve worked with a few other event driven and messaging frameworks that either plugged into Hostbuilder/etc to provide a good API and/or in general were low enough ceremony as-is.\r\n\r\nBecause we **agonize** over API design and programming models and evolve them over time. WebJobs has come a long way! We added support host builder, and now we\u0027re going to make it support IHostApplicationBuilder, make sure it works well with top level statements, make sure it has a pipeline that is similar to ASP.NET Core, and make sure it builds on cloud events (this feels like the logical thing to do). \r\n\r\n\u003E Will restate some prior feedback; if the title was \u0027WebJobs Framework\u0027 or \u0027WebJobs in ASPNETCORE\u0027 and the initial post didn\u0027t have a bunch of stuff that was too vague to make it clear this was about WebJobs, you might not have to keep trying to ask folks to talk about Rampart.\r\n\r\nI agree, which is why I tried to clarify with the initial comment. The original issue was focused on the work (and principles), but the motivation came from wanting to unify the programming models between functions/webjobs and modern .NET. The .NET team has been working on programming models with the functions team for years, this really is about taking that next step to try to unify the model more explicitly.\r\n\r\n\r\nPS: Fun fact about Webjobs, it was created by the ASP.NET Team circa 10\u002B years ago. The original impetus was MVC but for non-HTTP stuff. The eventually evolved into the core of what drives the azure functions host. We\u0027re bringing things back full circle.",
        "createdAt": "2024-02-03T19:03:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925430494"
      },
      {
        "id": "IC_kwDOAQzde85yw8RA",
        "parentId": null,
        "author": "davidfowl",
        "content": "@iancooper \r\n\r\n\u003E I also know that the folks who want to deploy cloud native apps at scale would not tend to look at the interfaces that exist today and consider them a problem. Spring Boot messaging or Go micro are the yardsticks for comparison not ASP.NET. But at the cost of the existing OSS community in this space? That feels like local optima over systems thinking to me.\r\n\r\nHow do you rationalize with the fact that webjobs already exist and we want to make it better? Is it because it\u0027s obscured under the azure org that makes it less of a problem right now? Or is there something else that I\u0027m missing?",
        "createdAt": "2024-02-03T19:11:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925432384"
      },
      {
        "id": "IC_kwDOAQzde85yw8Vl",
        "parentId": null,
        "author": "davidfowl",
        "content": "@to11mtm \r\n\r\n\u003E I think if Microsoft wants to make WebJobs vNext a \u0027first class citizen\u0027 in .NET, I\u0027d strongly suggest \u0027dogfooding\u0027 the process the way OSS contribs have to do it, because OSS Projects should be able to be treated as first class citizens as well.\r\n\r\nCan you clarify what you mean? Do you mean we should use the framework in some way to build apps? Luckily webjobs and azure functions have a huge customer base (internally and externally), so I think we are OK there.",
        "createdAt": "2024-02-03T19:13:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925432677"
      },
      {
        "id": "IC_kwDOAQzde85yw961",
        "parentId": null,
        "author": "iancooper",
        "content": "\u003EHow do you rationalize with the fact that webjobs already exist and we want to make it better? Is it because it\u0027s obscured under the azure org that makes it less of a problem right now? Or is there something else that I\u0027m missing?\r\n\r\nAzure WebJobs targets only Azure Service Bus and Azure Storage. It is not a generic messaging framework. Is that your goal? Is your goal just to support ASB and Azure Storage?\r\n\r\nBecause the epic refers to other transports such as RMQ, SQS etc. That change shifts your market and thus changes the shadow that you cast. At that point it\u0027s not about a consistent interface for an existing product, it\u0027s about extending the capabilities and a change to the audience for the tool. \r\n\r\nIn addition, the improvements that you are offering: middleware pipelines, model binding etc. all extend the capabilities that you are offering and thus increase the competition with fuller featured frameworks.\r\n\r\nAgain, what happens if you don\u0027t build this? Folks will use OSS/COTS frameworks for those use cases. What happens if you do build this? Folks will stop using OSS/COTS frameworks for these use cases. It is not a question of quality. History clearly shows us what will happen. \r\n\r\nI get that this might feel very unfair. Because other ecosystems have multiple players and you improving the ones you own would just be part of healthy competition. So I think the response should be to recognize that as the problem, and ask what can we do to get to the point that you deciding to extend the tools you build this way doesn\u0027t require you to first figure out the impact.\r\n\r\nBut the ASP.NET team has feature set by feature set killed the plurality of .NET OSS community framework efforts. In some cases we don\u0027t have the equivalent functionality to that which we lost. There is not much left. \r\n\r\n ",
        "createdAt": "2024-02-03T19:44:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925439157"
      },
      {
        "id": "IC_kwDOAQzde85yxAGU",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Azure WebJobs targets only Azure Service Bus and Azure Storage. It is not a generic messaging framework. Is that your goal? Is your goal just to support ASB and Azure Storage?\r\n\r\nThe poorly named Azure.WebJobs.Sdk has an extensibility model and supports other event sources things, e.g:\r\n\r\nhttps://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.RabbitMQ\r\n\r\n\u003E In addition, the improvements that you are offering: middleware pipelines, model binding etc. all extend the capabilities that you are offering and thus increase the competition with fuller featured frameworks.\r\n\r\nWebJobs already supports this (filters and model binding).\r\n\r\n\u003E I get that this might feel very unfair. Because other ecosystems have multiple players and you improving the ones you own would just be part of healthy competition. So I think the response should be to recognize that as the problem, and ask what can we do to get to the point that you deciding to extend the tools you build this way doesn\u0027t require you to first figure out the impact.\r\n\r\nI think you have to help us here. How do we get to a place where it is fine to improve the already existing programming models of webjobs?\r\n\r\nSide bar:\r\n\r\nIt would be unfair to force requirements on the OSS library authors who built a specific programming model and made explicit design decisions because of their diverse backgrounds and experience. There are lots of requirements listed in the original issue that I would hope many of the messaging OSS libraries support or would be supporting. We also go out of our way to contribute to these libraries to make sure that they are using the latest and greatest advances (or at least make sure people are aware of them).\r\n\r\n- Support for cloud events. Don\u0027t need a custom message envelope anymore, it took us to until 2024 but now [we have a standard](https://www.cncf.io/announcements/2024/01/25/cloud-native-computing-foundation-announces-the-graduation-of-cloudevents/)\r\n- Deep integration with the Microsoft.Extensions.* ecosystem (ILogger, ServiceCollection etc).\r\n- Deep telemetry integration ILogger, Meter, and Activity (OTEL support)\r\n- Potential to be AOT friendly if not already AOT friendly (no runtime assembly scanning and excessive use of reflection)\r\n     - This probably means use of source generators (including JSON)\r\n- First class Aspire support (whatever that means \uD83D\uDE04)\r\n\r\nThe above list is a subset of the features we\u0027re looking for. This list isn\u0027t exhaustive, but I wanted to illustrate some of the requirements we set out while looking into this.\r\n\r\nThe one thing I think will always be problematic is the fact that we want to ship a programming model in line with what looks like ASP.NET Core. This is where strong opinions exist and why people create different libraries. e.g. it\u0027s why [FastEndPoints](https://fast-endpoints.com/) spun up after minimal APIs was created, and that is fine \uD83D\uDE04.",
        "createdAt": "2024-02-03T20:30:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925448084"
      },
      {
        "id": "IC_kwDOAQzde85yxCBM",
        "parentId": null,
        "author": "iancooper",
        "content": "\u003ESupport for cloud events. Don\u0027t need a custom message envelope anymore\r\n\r\nCareful, Cloud Events is an eventing header specification, not a messaging header specification, by design. It is useful to agree well-understood header names, even within messaging and we use it for that, but you need other headers to support messaging and they are not part of the standard.",
        "createdAt": "2024-02-03T21:09:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925455948"
      },
      {
        "id": "IC_kwDOAQzde85yxCYc",
        "parentId": null,
        "author": "iancooper",
        "content": "\u003EDeep integration with the Microsoft.Extensions.* ecosystem (ILogger, ServiceCollection etc).\r\n\u003EDeep telemetry integration ILogger, Meter, and Activity (OTEL support)\r\n\u003EPotential to be AOT friendly if not already AOT friendly (no runtime assembly scanning and excessive use of reflection)\r\n\u003E First class Aspire support (whatever that means \uD83D\uDE04)\r\n\r\nSure, I and I suspect we are all aware of those table stakes, and already have (we have had the first two for some time) or are working on (the third, although I don\u0027t think the ecosystem is AOT ready yet) and the last requirement is fairly new for us all to catch up with already, and from our experience a lower priority for most of the deployment environments we know of.\r\n\r\nBut I\u0027m not sure what your argument is here? That the community does not support this feature set and therefore you must?\r\n",
        "createdAt": "2024-02-03T21:17:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925457436"
      },
      {
        "id": "IC_kwDOAQzde85yxCe_",
        "parentId": null,
        "author": "iancooper",
        "content": "\u003EI think you have to help us here. How do we get to a place where it is fine to improve the already existing programming models of webjobs?\r\n\r\nThe reality is that we both know where this goes, regardless if you pull in WebJobs as \u0022historical precedent\u0022. Is that outcome, killing the messaging/eventing .NET community what you want. Because it will be the consequence.",
        "createdAt": "2024-02-03T21:18:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925457855"
      },
      {
        "id": "IC_kwDOAQzde85yxDDJ",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E But I\u0027m not sure what your argument is here? That the community does not support this feature set and therefore you must?\r\n\r\nI was making the point about comments around \u201Cjust use of contribute to another library\u201D. I needed to make it clear that we do that and we also design programming models. It\u2019s never as simple as it seems on the surface and may put unwanted requirements that go against the principles of the original design. ",
        "createdAt": "2024-02-03T21:30:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925460169"
      },
      {
        "id": "IC_kwDOAQzde85yxDIC",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E The reality is that we both know where this goes, regardless if you pull in WebJobs as \u0022historical precedent\u0022. Is that outcome, killing the messaging/eventing .NET community what you want. Because it will be the consequence.\r\n\r\nSo to make this point crisp. The conclusion is that making something that already exists better will kill all of the other libraries.\r\n\r\nThis isn\u2019t really about Microsoft \u201Centering the space\u201D, it\u2019s the fact that webjobs isn\u2019t as front and center as asp.net core and if we do that it\u2019ll dramatically reduce the usage of other frameworks. (That may be evidence given how many aren\u2019t aware it isn\u2019t tied to azure)\r\n\r\n",
        "createdAt": "2024-02-03T21:32:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925460482"
      },
      {
        "id": "IC_kwDOAQzde85yxE0c",
        "parentId": null,
        "author": "iancooper",
        "content": "\u003E This isn\u2019t really about Microsoft \u201Centering the space\u201D, it\u2019s the fact that webjobs isn\u2019t as front and center as asp.net core\n\nIt is about what will happen if the ASP.NET enter the space. Even if it\u0027s meant as a WebJobs replacement it will have second-order impacts because the ASP.NET team entering the space means folks will tend to stop comparing on merits.",
        "createdAt": "2024-02-03T22:06:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925467420"
      },
      {
        "id": "IC_kwDOAQzde85yxFdo",
        "parentId": null,
        "author": "davidfowl",
        "content": "I\u2019m ignoring the many insults that impact the talented team I work with. I\u2019ll just say that we should try be civil and \u201Cabove the belt\u201D in these discussions. You\u2019re not talking to a corporation, you\u2019re talking to people. No need to attack us.",
        "createdAt": "2024-02-03T22:19:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925470056"
      },
      {
        "id": "IC_kwDOAQzde85yxFiH",
        "parentId": null,
        "author": "davidfowl",
        "content": "Is recommending the improved webjobs sdk alongside the many alternatives on the docs a reasonable solution? \r\n\r\nI\u2019m looking for solutions that aren\u2019t just \u201Cyou can\u2019t do this\u201D. Where does it cross the line of no return? Is it the programming model? Is it the templates? The blogs? \r\n\r\nIf the webjobs sdk was improved in-place and un azure branding. Would that be a middle ground?",
        "createdAt": "2024-02-03T22:21:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925470343"
      },
      {
        "id": "IC_kwDOAQzde85yxGqy",
        "parentId": null,
        "author": "jscarle",
        "content": "@davidfowl Personally, I have not had the opportunity to work with WebJobs, but it seems to be quite similar to [Hangfire](https://www.hangfire.io/).\r\n\r\nGoing back to the [original API sketch](https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1921960530) that you presented. I\u0027m sort of confused on the intent.\r\n\r\nIt seems like the API is meant to add support for events, which then leads me to question if this is intended to add a default implementation of a background service to handle in-process events. Could I use this to replace a background service that acts as a queue to process published INotifications from MediatR?\r\n\r\nAssuming I add a provider, could I send to this provider? Would I simply inject the provider and call a method on it to send a message? Would this be something similar to MassTransit and be an alternative API I could use with Azure Service Buss or would this rather be something that MassTransit would be able to build upon?\r\n\r\n",
        "createdAt": "2024-02-03T22:43:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925474994"
      },
      {
        "id": "IC_kwDOAQzde85yxHVh",
        "parentId": null,
        "author": "Aaronontheweb",
        "content": "\u003E Consolidation is good and should be embraced as it results in less fragmentation in the .NET community with more resources available for new innovation.\n\nThis is as breathtakingly short-sighted as it is historically wrong. \n\nNo, consolidation is not good if you actually care about consistently delivering great software over the  course of your career. What you call \u0022fragmentation\u0022 is what I call \u0022having options.\u0022\n\nIf you\u0027re optimizing for minimizing responsibility for your own technology and implementation choices - substituting your  critical thinking with faith in Microsoft to make the best possible tooling and infrastructure decisions on your behalf is a popular way to do it. If that\u0027s what you desire, then cheering for the destruction of third options, which is what you\u0027re doing in your comment, makes sense.\n\n_Supplier diversification is good_, not killing it off to spare babied, overpaid, and uncritical software engineers and architects from having to choose. Choice is good. Competition is good. \n\nWere you around for the absolute clown show that .NET was in 2010-2016? In 2010/2011 I watched forlornly from the sidelines while Rails, Node.JS could quickly deliver productivity and access new technologies like WebSockets while we had to sit around and wait for Windows Server maintenance packages before we could even try. In 2013/14 I had to create my own socket libraries, NoSQL database drivers, and an actor model implementation. That\u0027s what \u0022consolidated\u0022 .NET under Microsoft looked like - an intellectual and productive ghetto. I documented how bad it was contemporaneously here: https://aaronstannard.com/the-profound-weakness-of-the-net-oss-ecosystem/\n\nYou wrote about change being inevitable, so here are the changes that saved .NET from obsolescence:\n\n1. Decoupling from Windows \n2. No longer charge money for tooling\n3. Make .NET bigger than Microsoft - open source\n\nThe reason this issue is even being discussed is item 3 - decision making being done in the open _with other stakeholders_ weighing in. Many of the innovations users are praising in the comments were either copied / inspired from third party work, directly contributed by third party contributors, or done in close collaboration with them. Belittle, discount, or discourage those third parties at your own peril.\n\n.NET will be a poorer and worse platform without third party innovation and creators. This should be self-evident.\n\nAs for this issue itself:\n\n1. I don\u0027t think Microsoft\u0027s efforts here are going to kill off MassTransit / Wolverine / whatever here because it will inevitably cater to the lowest common denominator because it has to. The focus around CloudEvents assures this. \n2. The issue, really, isn\u0027t whatever technology Microsoft ships or doesn\u0027t - it\u0027s a market problem. \n\nMany . NET developers like the one I\u0027m responding to think this way: \u0022Don\u0027t make me think; give me something that works and has the Microsoft(TM) logo on it.\u0022 Maintainers of successful third party solutions are worried that Microsoft entering this space is going to bigfoot their projects out and there is some historical precedent for that.\n\nAfter chewing on it, I don\u0027t think  third parties have much to worry about - people who would throw away years of MassTransit / whatever experience to adopt whatever MSFT ships just because Microsoft shipped it probably haven\u0027t adopted it in the first place. On the Venn diagram of .NET developers, the ones who automatically put MSFT solutions on a pedestal without considering alternatives don\u0027t overlap with the ones who\u0027d be serious production users of any third party technology in .NET. I think they\u0027re simply different cohorts within the big .NET tent - Microsoft giving those users what they\u0027re asking for doesn\u0027t change much for everyone else.",
        "createdAt": "2024-02-03T22:55:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925477729"
      },
      {
        "id": "IC_kwDOAQzde85yxJRg",
        "parentId": null,
        "author": "to11mtm",
        "content": "\u003E I\u2019m ignoring the many insults that impact the talented team I work with. I\u2019ll just say that we should try be civil and \u201Cabove the belt\u201D in these discussions. You\u2019re not talking to a corporation, you\u2019re talking to people. No need to attack us.\r\n\r\n@davidfowl I want to be clear that I have a helluva lotta faith in MSFT engineers, have at various shops worked with some current ones and former interns, and they are indeed \u0027world class\u0027 colleagues. I know great things can be done in this space.\r\n\r\nMy goals here are offering my views as someone passionate in the space of eventing, while also being foolish enough to speak up as as I do not have a direct vested interest in the various solutions that already exist.\r\n\r\nI don\u0027t question the talent, I question the alignment of goals between your benefactors and the community [0]. That said if there is opportunity for me to grow please feel free to provide feedback, this thread is certainly a great study case for OSS Community interactions.\r\n\r\n\u003E @to11mtm\r\n\u003E \r\n\u003E \u003E I think if Microsoft wants to make WebJobs vNext a \u0027first class citizen\u0027 in .NET, I\u0027d strongly suggest \u0027dogfooding\u0027 the process the way OSS contribs have to do it, because OSS Projects should be able to be treated as first class citizens as well.\r\n\u003E \r\n\u003E Can you clarify what you mean? Do you mean we should use the framework in some way to build apps? Luckily webjobs and azure functions have a huge customer base (internally and externally), so I think we are OK there. \r\n\r\nWell that also goes back to the vagaries here, you did provide some helpful concept-sketch code and pipeline overviews which helps in explaining specific concerns (It\u0027s... *been a week*). But if we are going to be defining a standard abstraction around these things, the community should collab on what that means!\r\n\r\nSpeaking both from my contributions privately/publicly in .NET event driven space as well as experience with Shops fearful stepping out of the cathedral in daylight will burn their skin (you\u0027d think they\u0027d reflect on that...)\r\n\r\nWill start with stating @iancooper \u0027s comment resonated with me:\r\n\r\n\u003E Careful, Cloud Events is an eventing header specification, not a messaging header specification, by design. It is useful to agree well-understood header names, even within messaging and we use it for that, but you need other headers to support messaging and they are not part of the standard.\r\n\r\nI will happily admit I have spent a lot of time in what might be considered \u0027niche\u0027 jobs where I get to use .NET. Lots of things where you need to be able to slim things down and be able to easily \u0027start from scratch\u0027 to make sure you are always only including what you need.\r\n\r\nCloudEvents as a header specification itself, is a smell to include as a base requirement. It would be better to have the option of some form of \u0060HeaderParser\u003CTInMsgWithHeaders,TOutParsed\u003E\u0060 and interfaces and/or base[1] constraint(s) depending on how tightly glued things are[2]\r\n\r\nLet\u0027s think about a few use cases involving various tooling, ranging between \u0027real and base case\u0027 and \u0027reasonable but I have not seen\u0027 in sample that are worth considering:\r\n\r\n1. A simple Request-response handler that may require additional subject/topic filtering stages past the initial definition. (or, per above, just general impl-agnostic header parsing)\r\n2. The clear ability to define a \u0027context\u0027 for a message to handle things like ack/nack/err for other consumers (unless there\u0027s some magical implicit \u0060Option\u0060or\u0060Eff\u0060 type that you\u0027re gonna add, because quite frankly if you slam this model in but give us unified \u0060Option\u0060/Try\u0060/\u0060Either\u0060/\u0060TryOption\u0060 types at a BCL or first party, or \u0060Eff\u0060, level MSFT can slam Azure patterns down everyone\u0027s throat for all I care[3])\r\n i. I can provide some trash examples if needed but (and this is worth restating) I\u0027m sure MSFT can make a good set of abstractions *as long as they collaborate with the community*.\r\n3. Per my initial comments hoping for the best with this issue, having better ways to queue work onto dedicated workers that can be in their own pool to ensure fast dequeue but can \u0027sanely\u0027 execute other code on threadpool. The second best way I can describe is a \u0060Channel\u003CT\u003E.ReadAllAsynce()\u0060 loop where the read ready is dispatched in a dedicated pool [4] of threads, the \u0027main work\u0027 is queued to threadpool via the sort of semantics that ensure you only have the same footguns that are elsewhere in .NET Async, and after that the \u0027end\u0027 continuation from the work item is (result-processed and/or otherwise) handled within the pooled threads. [5]\r\n4. Other various inject-able \u0027slots\u0027 for things, TBF MagicOnion has an interesting model to consider here as it has a pipeline similar to ASPNETCORE but is (perhaps?) in some ways lower level. \r\n\r\nThese are just a few of my \u0027sloppy mechanics\u0027 use cases I\u0027ve seen that, even if I don\u0027t have skin in the game,\r\n\r\n(beside prior alluded to \u0027why do so many Senior .NET engineers in my travels still gravitate towards one or more things one of my former shops collectively \u0027banned\u0027 a decade ago because despite the MSFT blessing, it was a productivity and/or server killer to use)  \r\n\r\n*should* be discussed with the community to ensure there\u0027s a good API model.\r\n\r\nTrying to ram it through on a poorly worded with the \u0027eventing\u0027 stuff, and the, again, pardon repeated meme reference but \u0027can we talk about Rampart\u0027 thing highlights other things in this post where MSFT\u0027s habit of preferring political capital of internal personalities to accepted common sense in OSS and the community, completely misses the point of good OSS.\r\n\r\n\u003E So to make this point crisp. The conclusion is that making something that already exists better will kill all of the other libraries.\r\n\r\nEveryone commenting in this thread knows it\u0027s not a \u0027crisp\u0027 point, and it may not kill all the other libraries but you\u0027re gonna trigger a post-thanksgiving friday walmart trample on them if your API doesn\u0027t align, and if it is too constraining to others.\r\n\r\nAlso, NLP/Loaded language is not a good way to enforce one\u0027s argument, but we\u0027ve already gotten way off topic.[6]\r\n\r\n\r\n[0] - I get that an initiative to improve the story around this Azure feature is an OKR or PKI but the attempts at diversion on the point aside from \u0027appeal to authority\u0027 are not a convincing argument to try and jump from \u0027eventing framework issue\u0027 to \u0027standardize webjobs vnext as some sort of eventing framework\u0027\r\n\r\n[1] - PGO is a godsend but sometimes you still need to do your best to avoid that extra indirection.\r\n\r\n[2] - Refer to use cases above.\r\n\r\n[3] - Something folks might not get, is the problem of trying to get people stuck in 2013 to something \u0027new and good\u0027 and the pain where two different amazing libraries that work even greater together, but both have had to implement their own \u0060Try\u0060/\u0060Option\u0060 and all sorts of pain and confusion for consumers..\r\n\r\n[4] - Could be a pool of 1, that\u0027s fine, biggest point is being able to have better ability to decide priority of things via well known APIs rather than various voodoo that is hard to optimize. \r\n\r\n[5] - Is it \u0027doable\u0027? Sure, but as it stands I know of more than one OSS Toolkit/Framework/ClientLib where having such things \u0027out of the box\u0027 would be of immense value versus copypasting solutions between them [7] \r\n\r\n[6] - By this I refer to the general attempt at messaging around many things in .NET/OSS and how it\u0027s a sort of accepted thing, but...\r\n\r\n[7] - I believe MSFT has had to borrow from at least one such thing *in this category* from an OSS Project for a while, again, code ported from CLR CPP by folks much smarter than me.",
        "createdAt": "2024-02-03T23:32:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925485664"
      },
      {
        "id": "IC_kwDOAQzde85yxKHC",
        "parentId": null,
        "author": "dustinmoris",
        "content": "If this is about \u0060Microsoft.Azure.WebJobs\u0060 then why is it being discussed in the .NET or ASP.NET repos? Just make that NuGet package better and be done with it.\r\n\r\nThe fact that ASP.NET Core or something inside \u0060Microsoft.Extensions....\u0060 gets specifically moulded around some random Azure service makes you wonder...\r\n\r\n\u003Cimg width=\u0022488\u0022 alt=\u0022image\u0022 src=\u0022https://github.com/dotnet/aspnetcore/assets/4580714/bba5b493-be76-4987-b502-d51513130d39\u0022\u003E",
        "createdAt": "2024-02-03T23:49:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925489090"
      },
      {
        "id": "IC_kwDOAQzde85yxKU5",
        "parentId": null,
        "author": "to11mtm",
        "content": "\u003E  Could I use this to replace a background service that acts as a queue to process published INotifications from MediatR?\r\n\r\nAnother point I didn\u0027t catch (above reply took a while to compose) but this is a theoretical use case that is important in some ways; from personal observations, MediatR is a \u0027stepping stool\u0027 for many in the .NET world to more complex event driven systems.\r\n\r\nEnsuring something like MediatR (or MessagePipe)[0]  is usable with the given interface with the same level of ceremony  for a similar workload (even if it\u0027s in-proc!) would be a good litmus test for \u0027goodness\u0027 of the API. (If it\u0027s distributed, again there\u0027s great examples in Messagepipe\u0027s distributed bits or the NATS API for a good example of useful features)\r\n\r\n[0] Neither of which I actually have used, but have been able to learn from for productive in-house eventing systems.",
        "createdAt": "2024-02-03T23:53:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925489977"
      },
      {
        "id": "IC_kwDOAQzde85yxKae",
        "parentId": null,
        "author": "davidfowl",
        "content": "@dustinmoris I\u2019m happy to answer any question you might have about the discussion with respect to webjobs and why it\u2019s interesting to us (and where it can from).\r\n\r\nSome of my early comments share the idea and why webjobs (poorly named and not tied to azure) is attractive.",
        "createdAt": "2024-02-03T23:55:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925490334"
      },
      {
        "id": "IC_kwDOAQzde85yxMgM",
        "parentId": null,
        "author": "iancooper",
        "content": "\u003E I\u2019m looking for solutions that aren\u2019t just \u201Cyou can\u2019t do this\u201D. Where does it cross the line of no return?\n\nYeah. I get that. And your team has so much to offer, the second order problem sucks because it would be fantastic if we could make this work so that it just increased the vibrancy of this space for .NET.\n\nGoing to have to ponder for a day or two.\n\nBut I think I get your position better.",
        "createdAt": "2024-02-04T00:21:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925498892"
      },
      {
        "id": "IC_kwDOAQzde85yxMmR",
        "parentId": null,
        "author": "Danthar",
        "content": "\u003E\r\n\u003E So to make this point crisp. The conclusion is that making something that already exists better will kill all of the other libraries.\r\n\u003E \r\n\r\nNot **better.** There are plenty of examples of MS \u0027entering\u0027 a space instead of amplifying 3th party offerings, and releasing something thats years away from the quality that these 3th party offerings already deliver. The main issue is marketing reach. \r\nThe MS marketing department completely overshadows any OSS or Commercial 3th party offering that exists. Offerings which often already exists for years and offer way higher quality then whatever MS initially offers in a certain space.\r\n\r\nIf MS keeps going down this route of wanting to do everything themselves, it will only lead to ecosystem destruction. And while this topic might not have that intention (of building a directly competing product) since at this time there is nothing concrete yet.\r\n\r\nIt certainly has that flavour. \r\n\r\n",
        "createdAt": "2024-02-04T00:22:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925499281"
      },
      {
        "id": "IC_kwDOAQzde85yxM9L",
        "parentId": null,
        "author": "to11mtm",
        "content": "\u003E @dustinmoris !! You might be missing context since you joined late but I\u2019m happy to answer any question you might have about the discussion with respect to webjobs and why it\u2019s interesting to us (and where it can from).\r\n\u003E \r\n\u003E Some of my early comments share the idea and why webjobs (poorly named and not tied to azure) is attractive!\r\n\r\nConsider a close-\u003Ereflie then with better wording? If nothing else it would potentially put out the tire fire?",
        "createdAt": "2024-02-04T00:28:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925500747"
      },
      {
        "id": "IC_kwDOAQzde85yxNAg",
        "parentId": null,
        "author": "davidfowl",
        "content": "@Danthar\r\n\r\n\u003E Not better. There are plenty of examples of MS \u0027entering\u0027 a space instead of amplifying 3th party offerings, and releasing something thats years away from the quality that these 3th party offerings already deliver. \r\n\r\nThere are examples of the opposite as well right? \r\n\r\n\u003E If MS keeps going down this route of wanting to do everything themselves, it will only lead to ecosystem destruction. And while this topic might not have that intention (of building a directly competing product) since at this time there is nothing concrete yet.\r\n\r\nI can\u0027t say enough that Microsoft already have offerings in this space...",
        "createdAt": "2024-02-04T00:29:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925500960"
      },
      {
        "id": "IC_kwDOAQzde85yxNRc",
        "parentId": null,
        "author": "jscarle",
        "content": "@to11mtm I would be interested in seeing statistics on distributed messaging. [This is not aimed at anyone, I\u0027m genuinely curious.]\r\n\r\nI feel like a lot of the focus when it comes to distributed messaging is solely towards large scale unicorn SaaS sized behemoths. A lot of us architect software for much smaller companies with various constraints (whether they\u0027d be financial, mandated, or otherwise) which puts us in positions where a SDK native solution would be greatly appreciated.\r\n\r\nRecently I worked with a team where we were imposed by management the requirement to design our architecture as a group of microservices (yes, I know). \r\n\r\nThose microservices could be written using the .NET SDK and free commercial usage compatible NuGet packages only. The infrastructure was hosted on Google Cloud Platform and therefore we were only permitted to implement any reasonably cost effective GCP product into ours.\r\n\r\nBecause of our particular reality, we ended up writing our own background service to process a message queue for domain events in process (as IDomainEvent, based off MediatR INotification), we wrote another background service to process inter-domain events (ironically as our custom ICloudEvent, using GCP PubSub). We wanted to implement inter-service messaging, but MassTransit doesn\u0027t support GCP PubSub. After 4 months of deliberation, the team still hasn\u0027t received the approval to use Azure Service Bus so that we could implement MassTransit.\r\n\r\nThings aren\u0027t always ideal.",
        "createdAt": "2024-02-04T00:34:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925502044"
      },
      {
        "id": "IC_kwDOAQzde85yxOqI",
        "parentId": null,
        "author": "to11mtm",
        "content": "\u003E @Danthar\r\n\u003E \r\n\u003E \u003E Not better. There are plenty of examples of MS \u0027entering\u0027 a space instead of amplifying 3th party offerings, and releasing something thats years away from the quality that these 3th party offerings already deliver.\r\n\u003E \r\n\u003E There are examples of the opposite as well right?\r\n\u003E \r\n\u003E \u003E If MS keeps going down this route of wanting to do everything themselves, it will only lead to ecosystem destruction. And while this topic might not have that intention (of building a directly competing product) since at this time there is nothing concrete yet.\r\n\u003E \r\n\u003E I can\u0027t say enough that Microsoft already have offerings in this space...\r\n\r\nEdit: My original comment was over-flared. But in general it was an expression of frustration that it feels like there was a lot of less than thought out communication on many sides here.\r\n\r\n-----\r\n\r\nMicrosoft needs to make a decision if it would rather go back into the dark ages or if they really want to do that, at least have the common decency of \u0022If you want to talk about Rampart then make the topic about Rampart\u0022.\r\n\r\nAs it currently stands, *nothing* in this thread has given my any confidence that this is anything but job security in ensuring coding boot camp folks understand that \u0027event driven systems\u0027 are different than the model that WebJobs interprets whatever it does as (and, per above,\r\n\r\n\u003E I can\u0027t say enough that Microsoft already have offerings in this space...\r\n\r\nGiven at least one example of microsoft practically out of their way to *not* give mention to significant OSS contributions in a space in favor or over-gushing about ways it can map to Azure (e.x.)[https://learn.microsoft.com/en-us/dotnet/orleans/streaming/?pivots=orleans-7-0][0], maybe there\u0027s a better way to suggest it as standard than an \u0027eventing\u0027 filed issue that gets malformed into what we have here?\r\n\r\nAnd, the bigger question... even if we can\u0027t get originator to rename/reword this issue about \u0027WebJob integration\u0027, Why hasn\u0027t even a *placeholder* been filed in lieu of the continued attempt to tell us that \u0027Eventing Framework in .NET 9\u0027 to MSFT means \u0027WebJobs vNext as First Party ASPNETCORE citizen\u0027?\r\n\r\nOne can only suspend disbelief to a certain point before credibility is broken.\r\n\r\nThe community has a lot of trust fractures and while some are patched the root cause has not been corrected. The messaging around this and the \u0027doubling down\u0027 (Familiar theme to those in the .NET OSS Space at this point, but I\u0027m sick of watching the self sabotage or general neglect driving folks away from the platform.) \r\n\r\n[0] - And since there was previously an attempt to possibly pivot to reframe other comments into attacks, I want to be clear that Orleans is a super awesome thing! But if you\u0027re not gonna provide a good DSL for your streaming impl, perhaps at least point people to some good examples?",
        "createdAt": "2024-02-04T01:04:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925507720"
      },
      {
        "id": "IC_kwDOAQzde85yxY9y",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E NLP is rude, especially when potentially targeted towards neurodivergent people that get triggered by potentially manipulative phrasing. Please reconsider your verbiage more carefully between detailed technical diagrams and short bursts that could be interpreted as a PR or OKR driven line.\r\n\r\nI didn\u0027t know what NLP was but I looked it up. I\u0027m sorry if the comments come off that way. As an engineer and architect on the team, my PR and OKR driven ability to comment is limited by my nature \uD83D\uDE04 (I\u0027d much rather talk about the technical details).\r\n\r\n\u003E maybe there\u0027s a better way to suggest it as standard than an \u0027eventing\u0027 filed issue that gets malformed into what we have here?\r\n\r\nThis issue was never about making an eventing standard but that doesn\u0027t mean it couldn\u0027t become one. The issue was filed to track items as part of planning for .NET 9. There\u0027s no background, it\u0027s a 12-line description so I wouldn\u0027t jump to conclusions about an attempt to \u0022change the narrative\u0022. We posted no detail, no background information, no discussions that were had outside of GitHub. There were attempts to provide more context on what long conversations has been spanning multiple years. One of the overarching goals of this was to design something that could replace webjobs that functions could use at its core (taking advantage of all of the performance optimizations and the performance muscle the team had built up over the last 7 years)\r\n\r\n\u003E And, the bigger question... even if we can\u0027t get originator to rename/reword this issue about \u0027WebJob integration\u0027, Why hasn\u0027t even a placeholder been filed in lieu of the continued attempt to tell us that \u0027Eventing Framework in .NET 9\u0027 to MSFT means \u0027WebJobs vNext as First Party ASPNETCORE citizen\u0027?\r\n\r\nBecause the team is still busy investigating it, its still *very* early. Placeholder issues without enough information can cause lots of negative speculation. When there\u0027s a clearer understanding of what that would look like, then we will provide more details (we also need to think about what a migration plan would look like for existing customers).\r\n\r\n\u003E [0] - And since there was previously an attempt to possibly pivot to reframe other comments into attacks, I want to be clear that Orleans is a super awesome thing! \r\n\r\nThe Orleans engineering team is part of ASP.NET Core team.\r\n\r\nPS: I\u0027m taking a break from this thread. I promise I\u0027m not ignoring anyone.",
        "createdAt": "2024-02-04T01:57:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925549938"
      },
      {
        "id": "IC_kwDOAQzde85yxaMc",
        "parentId": null,
        "author": "iancooper",
        "content": "\u003E We wanted to implement inter-service messaging, but MassTransit doesn\u0027t support GCP PubSub.\n\nCan be worth pinging a project\u0027s maintainers and asking by raising an issue. Lots of OSS projects might add a GCP Pub-Sub transport if they knew you would use it, raise bug reports etc. At Brighter we would if we had someone with the time. We have a high preference for only having transports that we know our being actively used by folks in our ecosystem.",
        "createdAt": "2024-02-04T02:25:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925554972"
      },
      {
        "id": "IC_kwDOAQzde85yxakQ",
        "parentId": null,
        "author": "to11mtm",
        "content": "\u003E @to11mtm I would be interested in seeing statistics on distributed messaging. [This is not aimed at anyone, I\u0027m genuinely curious.]\r\n\u003E \r\n\r\n@jscarle feel free to reach out to me on twitter (drewthedev1) or other form of DM, happy to elaborate in as much detail as you\u0027d like (or as little as I can manage).\r\n\r\n------\r\n\r\nI\u0027ve let my passions and field experiences get the better of me and I apologize for poor wording of statements without full context.\r\n\r\nIn the process of hoping folks saw the forest vs the trees, one can look too far into an abyss and you become what you do not want.\r\n\r\n@davidfowl I apologize for any consternation caused and per above am going to stay out of this thread henceforth as a penance and sign of trust.",
        "createdAt": "2024-02-04T02:33:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53219#issuecomment-1925556496"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde858Dqw7",
    "title": "Exception raised from \u0060Factory.CreateClient()\u0060 when type provided to \u0060WebApplicationFactory\u003CTEntryPoint\u003E\u0060 is a subclass of \u0060Program\u0060",
    "url": "https://github.com/dotnet/aspnetcore/issues/53370",
    "createdAt": "2024-01-15T06:27:43Z",
    "lastUpdated": "2024-08-22T16:25:37Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nAn exception is raised from \u0060Factory.CreateClient()\u0060 when a subclass of \u0060Program\u0060, added to Program.cs as described in [Basic tests with the default WebApplicationFactory](https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-8.0#basic-tests-with-the-default-webapplicationfactory), is used as the type provided to \u0060WebApplicationFactory\u003CTEntryPoint\u003E\u0060.\r\n\r\nIn my Program.cs I have:\r\n\r\n\u0060\u0060\u0060c#\r\n// the usual ASP.NET configuration code\r\n\r\npublic partial class Program { }\r\n// end of file\r\n\u0060\u0060\u0060\r\n\r\nIn my test suite I have:\r\n\r\n\u0060\u0060\u0060c#\r\npublic class TestExamplesProgram : Program { }\r\n\r\npublic class TestExamples : IClassFixture\u003CWebApplicationFactory\u003CTestExamplesProgram\u003E\u003E\r\n{\r\n\r\n    private WebApplicationFactory\u003CTestExamplesProgram\u003E Factory { get; }\r\n\r\n    public TestExamples(WebApplicationFactory\u003CTestExamplesProgram\u003E factory)\r\n    {\r\n        Factory = factory;\r\n    }\r\n\r\n    [Fact]\r\n    public async Task ExampleTestWithException()\r\n    {\r\n        try\r\n        {\r\n            var client = Factory.CreateClient(); // exception raised here\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            throw;\r\n        }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\r\n### Expected Behavior\r\n\r\nThe reason I create a subclass of \u0060Program\u0060, is so that I can add a \u0060ConfigureDatabase()\u0060 method which then gets overridden in the \u0060TestExamplesProgram\u0060 subclass.\r\n\r\nI thought I could do this instead of removing and reconfiguring as described in [Customize WebApplicationFactory](https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-8.0#customize-webapplicationfactory).\r\n\r\nI thought the approach of removing configured services could lead to unexpected behaviors in my test suite, so better to override the configuration.\r\n\r\n\r\n\r\n### Steps To Reproduce\r\n\r\nRun the only test found in the ASP.NET MVC project found at https://github.com/br3nt/WebApplicationFactoryException\r\n\r\n### Exceptions (if any)\r\n\r\nThe exception is \u0060System.InvalidOperationException\u0060 with message \u0022The entry point exited without ever building an IHost.\u0022.\r\n\r\nThe stack trace is:\r\n\r\n\u003Cpre\u003E\r\n   at Microsoft.Extensions.Hosting.HostFactoryResolver.HostingListener.CreateHost()\r\n   at Microsoft.Extensions.Hosting.HostFactoryResolver.\u003C\u003Ec__DisplayClass10_0.\u003CResolveHostFactory\u003Eb__0(String[] args)\r\n   at Microsoft.AspNetCore.Mvc.Testing.DeferredHostBuilder.Build()\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory\u00601.CreateHost(IHostBuilder builder)\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory\u00601.ConfigureHostBuilder(IHostBuilder hostBuilder)\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory\u00601.EnsureServer()\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory\u00601.CreateDefaultClient(DelegatingHandler[] handlers)\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory\u00601.CreateDefaultClient(Uri baseAddress, DelegatingHandler[] handlers)\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory\u00601.CreateClient(WebApplicationFactoryClientOptions options)\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory\u00601.CreateClient()\r\n   at Tests.TestExamples.\u003CGet_EndpointsReturnSuccessAndCorrectContentType\u003Ed__4.MoveNext() in C:\\PathToSolution\\Tests\\TestExamples.cs:line 51\r\n\u003C/pre\u003E\r\n\r\nThere is no inner exception.\r\n\r\n### .NET Version\r\n\r\n8.0.100\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85wvLPE",
        "parentId": null,
        "author": "br3nt",
        "content": "I think I\u0027ve misunderstood what \u0060TEntrypoint\u0060 is.  From what I can gather, its any type in an assembly under test.  So, I am not providing a class to use for configuration, but rather to point to a project.\r\n\r\nThis is a little frustrating as now I am back to square one with finding a nice way override the configuration from my MVC app.\r\n\r\nI suppose I could move my configuration into a Startup class.  I didn\u0027t really want to do that though.",
        "createdAt": "2024-01-15T06:51:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53370#issuecomment-1891414980"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde858QL6Y",
    "title": "When Serialize using source generation the JsonOptions of the Source generator are ignored",
    "url": "https://github.com/dotnet/aspnetcore/issues/53417",
    "createdAt": "2024-01-16T18:59:11Z",
    "lastUpdated": "2024-08-22T16:06:28Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIn .net 8 when configuring Json the JsonSerializer options of the attribute JsonSourceGenerationOptions are being ignored.\r\n\r\nI cannot change the default SerializerOptions to the one that is being generated, because the property JsonSerializerOptions is get only.\r\n\r\nA very simple scenario could be seen in this image:\r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/6615999/5e19a4fc-253d-4bce-bb3c-d5f51364214c)\r\n\r\nAlso is good to mention that I put a breakpoint on the Analyzer System.Text.Json, in the handler logic ( that seems OK). But the breakpoint does never get hit.\r\n\r\nIf the field DefaultSerializerOptions was a protected one the application could extend the class JsonOptions to insert the JsonSerializerOptions that the application needs. Another way could be to select every option on the JsonSerializerOptions to be the one that MyContext has\r\n\r\n\r\n\r\n\r\n### Expected Behavior\r\n\r\nI expect the lastName not to be serialized\r\n\r\n### Steps To Reproduce\r\n\r\nusing System.Text.Json.Serialization;\r\n\r\nvar builder = WebApplication.CreateSlimBuilder(args);\r\n\r\nbuilder.Services.ConfigureHttpJsonOptions(opt =\u003E opt.SerializerOptions.TypeInfoResolverChain.Insert(0, MyContext.Default));\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022/\u0022, () =\u003E \u0022Hello World!\u0022);\r\n\r\napp.MapGet(\u0022/{name}\u0022, (string name) =\u003E $\u0022Hello {name}\u0022);\r\n\r\napp.MapGet(\u0022/Customer/{name}\u0022, (string name, string? lastName) =\u003E new Customer(name, lastName));\r\n\r\n\r\n\r\napp.Run();\r\n\r\ninternal record Customer(string Name, string? LastName);\r\n\r\n[JsonSourceGenerationOptions(DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull, PropertyNamingPolicy = JsonKnownNamingPolicy.CamelCase)]\r\n[JsonSerializable(typeof(Customer))]\r\ninternal partial class MyContext : JsonSerializerContext\r\n{\r\n\r\n}\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.101\r\n\r\n### Anything else?\r\n\r\nVS 17.8.4\r",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde858XBOb",
    "title": "In consistency in ProblemDetails and ValidationProblemDetails implementation",
    "url": "https://github.com/dotnet/aspnetcore/issues/53439",
    "createdAt": "2024-01-17T15:15:57Z",
    "lastUpdated": "2024-02-13T01:04:19Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nHi,\r\n\r\nPlease have a look at below responses after enabling problems details middle-wear in .NET 7.\r\n\r\n- For validation error (Was already existing in .NET previous versions too)\r\n\u0060\u0060\u0060json\r\n{\r\n  \u0022type\u0022: \u0022https://tools.ietf.org/html/rfc9110#section-15.5.1\u0022,\r\n  \u0022title\u0022: \u0022One or more validation errors occurred.\u0022,\r\n  \u0022status\u0022: 400,\r\n  \u0022errors\u0022: {\r\n    \u0022weatherForecast\u0022: [\r\n      \u0022The weatherForecast field is required.\u0022\r\n    ],\r\n    \u0022$.date\u0022: [\r\n      \u0022The JSON value could not be converted to System.DateOnly. Path: $.date | LineNumber: 1 | BytePositionInLine: 11.\u0022\r\n    ]\r\n  },\r\n  \u0022traceId\u0022: \u002200-bbafef192204f0c436a41ca4eb806680-d41fefd8ce30a3a6-00\u0022\r\n}\r\n\u0060\u0060\u0060\r\n\r\n- For internal server error. Added in .NET 7\r\n\u0060\u0060\u0060json\r\n{\r\n  \u0022type\u0022: \u0022https://tools.ietf.org/html/rfc9110#section-15.6.1\u0022,\r\n  \u0022title\u0022: \u0022System.Exception\u0022,\r\n  \u0022status\u0022: 500,\r\n  \u0022detail\u0022: \u0022The number is less than or equal to 0!\u0022,\r\n  \u0022traceId\u0022: \u002200-f3ecb67ebaea65f7d2c72f4fc6e1f1ea-47290b0b93b842b4-00\u0022,\r\n  \u0022exception\u0022: {\r\n    \u0022details\u0022: \u0022System.Exception: The number is less than or equal to 0!\\r\\n   at ........\u0022,\r\n    \u0022headers\u0022: {\r\n      \u0022Accept\u0022: [\r\n        \u0022*/*\u0022\r\n      ],\r\n      \u0022Connection\u0022: [\r\n        \u0022keep-alive\u0022\r\n      ]\r\n    },\r\n    \u0022path\u0022: \u0022/WeatherForecast\u0022,\r\n    \u0022endpoint\u0022: \u0022Handling.Controllers.WeatherForecastController.GetXY (Handling)\u0022,\r\n    \u0022routeValues\u0022: {\r\n      \u0022action\u0022: \u0022Get\u0022,\r\n      \u0022controller\u0022: \u0022WeatherForecast\u0022\r\n    }\r\n  }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nhttps://datatracker.ietf.org/doc/html/rfc7807\r\n\r\n- Based on this \u0060specification page\u0060, what I understood I can say that \u0060details\u0060 property is \u0060optional\u0060.\r\n- In that sense as a consumer I should mostly relay on the \u0060title\u0060 property to pick error message for users.\r\n- But see the \u0060title\u0060 in second response \u0060System.Exception\u0060. I can\u0027t show that for the users right. It could have been more human readable format like \u0022Internal error has occurred.\u0022 or \u0022Something went wrong. Please contact administrator.\u0022 etc.\r\n\r\n\r\n1. Now I can look at property **errors** and **exceptions** as \u0060extensions\u0060 according to the \u0060specification\u0060 defines though for both details property can be used. Still, I all ok with this setup.\r\n2. But now as a API consumer I will have details in one response and other does not have so I will pick title to so it for users and log rest of it. But with this \u0022System.Exception\u0022 as title it does not look great from user\u0027s side. Can this be fixed to make the consumers life a bit easier so that they can stick to \u0060title\u0060 as go to error message.\r\n3. Can we have just details without these extensions to also make API consumers life easier to parse the json to class objects? I can raise a different idea chat if needed. But wanted to know if even this is possible.\r\n\r\n### Expected Behavior\r\n\r\n1. Atleast the title property should have content in \u0022non-tech human\u0022 understandable format.\r\n2. Using details instead of extensions, please decide if its easy to implement.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde859XTLo",
    "title": "IConfiguration binding throws or returns erroneous data when configuration models have constructors",
    "url": "https://github.com/dotnet/aspnetcore/issues/53659",
    "createdAt": "2024-01-27T06:14:30Z",
    "lastUpdated": "2024-06-04T11:29:28Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nUsing .NET 8.0 and WebApplicationFactory, I am encountering some really unexpected results when trying to pull data back from the IConfiguration, like so:\r\n\r\n\u0060\u0060\u0060\r\nvar myGarden = builder.Configuration\r\n    .GetSection(\u0022MyGarden\u0022)\r\n    .Get\u003CGardenSettings\u003E();\r\n\u0060\u0060\u0060\r\n\r\nDepending on the keys I use in my \u0060appsettings.Test.json\u0060 file, I either:\r\n\r\n- Encounter an exception during application startup as I attempt to bind a variable to some information in my configuration, using a C# class as a data model.\r\n- Do not encounter an exception, the application starts up fine, but the data assigned to my variable is erroneous and does not reflect what is in any of my \u0060appsettings.json\u0060 files.\r\n\r\n### Expected Behavior\r\n\r\nI would expect the information in the \u0060appsettings.Test.json\u0060 file to be bound without exception.\r\n\r\nI would also expect the information coming from my \u0060appsettings.json\u0060 to be bound correctly and faithfully, without erroneous data.\r\n\r\n### Steps To Reproduce\r\n\r\nhttps://github.com/Jack-Edwards/IConfigurationBoogaloo\r\n\r\nThe solution contains a single unit test.  Running the unit test without modification will elicit the first scenario, where an exception is thrown during application startup.\r\n\r\nRename the \u0060MyGarden\u0060 key in \u0060appsettings.Test.json\u0060 to elicit the second scenario.  It appears configuration information is now sourced from \u0060appsettings.json\u0060, but unfaithfully.  The list assigned  to \u0060myGarden\u0060 on line 5 of \u0060Program.cs\u0060 contains duplicate entries instead of the two unique entries contained in the json file.\r\n\r\n### Exceptions (if any)\r\n\r\nSystem.ArgumentException: Object of type \u0027System.String\u0027 cannot be converted to type \u0027System.Collections.Generic.List\u00601[WebApplication1.Flower]\u0027.\r\n   at System.RuntimeType.CheckValue(Object\u0026 value, Binder binder, CultureInfo culture, BindingFlags invokeAttr)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Reflection.ConstructorInfo.Invoke(Object[] parameters)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.CreateInstance(Type type, IConfiguration config, BinderOptions options)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.BindInstance(Type type, BindingPoint bindingPoint, IConfiguration config, BinderOptions options, Boolean isParentCollection)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.Get(IConfiguration configuration, Type type, Action\u00601 configureOptions)\r\n   at Microsoft.Extensions.Configuration.ConfigurationBinder.Get[T](IConfiguration configuration, Action\u00601 configureOptions)\r\n   at Program.\u003CMain\u003E$(String[] args) in C:\\Users\\Jack\\source\\repos\\WebApplication1\\WebApplication1\\Program.cs:line 5\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span\u00601 copyOfArgs, BindingFlags invokeAttr)\r\n\r\n### .NET Version\r\n\r\n8.0.100\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85yCq-z",
        "parentId": null,
        "author": "Jack-Edwards",
        "content": "Removing the constructors from my configuration data models resolves both issues.\r\n\r\nBefore (broken):\r\n\u0060\u0060\u0060\r\npublic class GardenSettings\r\n{\r\n    public short Staff { get; init; }\r\n    public List\u003CFlower\u003E Flowers { get; init; }\r\n\r\n    public GardenSettings(short staff, List\u003CFlower\u003E flowers)\r\n    {\r\n        Staff = staff;\r\n        Flowers = flowers;\r\n    }\r\n}\r\n\r\npublic class Flower\r\n{\r\n    public bool Perennial { get; init; }\r\n    public string Color { get; init; }\r\n\r\n    public Flower(bool perennial, string color)\r\n    {\r\n        Perennial = perennial;\r\n        Color = color;\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\r\nAfter (fixed):\r\n\u0060\u0060\u0060\r\npublic class GardenSettings\r\n{\r\n    public short Staff { get; init; }\r\n    public List\u003CFlower\u003E Flowers { get; init; }\r\n}\r\n\r\npublic class Flower\r\n{\r\n    public bool Perennial { get; init; }\r\n    public string Color { get; init; }\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2024-01-27T19:24:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53659#issuecomment-1913302963"
      },
      {
        "id": "IC_kwDOAQzde85yIEiY",
        "parentId": null,
        "author": "MariovanZeist",
        "content": "Hi @Jack-Edwards \r\nI suspect this is a bug in the framework. I tried several things and got some funky results.\r\n\r\n@javiercn I think this should be transferred to Dotnet/Runtime as it seems to be an issue with \u0060\u0060IOptions\u0060\u0060\r\n\r\nIt should work with the constructors you have (it used to only work with parameterless constructors but that changed in \u0060\u0060net7.0\u0060\u0060)\r\n\r\n\u0060\u0060\u0060cs\r\npublic class GardenSettings\r\n{\r\n    public int Staff { get; init; }\r\n    public List\u003CFlower\u003E Flowers { get; init; }\r\n}\r\n\r\npublic class Flower\r\n{\r\n    public bool Perennial { get; init; }\r\n    public string Color { get; init; }\r\n}\r\n\u0060\u0060\u0060\r\nThis results in the correct data.\r\n\r\nBut the following\r\n\u0060\u0060\u0060cs\r\npublic class GardenSettings\r\n{\r\n    public int Staff { get; init; }\r\n    public List\u003CFlower\u003E Flowers { get; init; }\r\n  \r\n    public GardenSettings(int staff, List\u003CFlower\u003E flowers)\r\n    {\r\n      Staff = staff;\r\n      Flowers = flowers;\r\n    }\r\n}\r\n\r\npublic class Flower\r\n{\r\n    public bool Perennial { get; init; }\r\n    public string Color { get; init; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThis will result in 4 flowers\r\n\r\nIt seems that after creating the initial GardenSettings through its constructor, it still tries to bind to \u0060\u0060 List\u003CFlower\u003E Flowers\u0060\u0060  again\r\n[Here](https://github.com/dotnet/runtime/blob/0f70e9aa5f08847680162a6dc712e069f0334b52/src/libraries/Microsoft.Extensions.Configuration.Binder/src/ConfigurationBinder.cs#L421)\r\n\r\nThis results in looping through its children twice so you end up with double data.\r\n\r\n\r\n",
        "createdAt": "2024-01-29T13:40:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53659#issuecomment-1914718360"
      },
      {
        "id": "IC_kwDOAQzde85-l4yn",
        "parentId": null,
        "author": "Yawnder",
        "content": "I might be wrong, but I think the issue has two parts. (This post only addresses one of them: The problem when there is a \r\n constructor on the \u0060Flower\u0060 class.)\r\n \r\nIf you remove the constructor for the list and only leave the constructor for the \u0060Flower\u0060 class, you end up with a list with only one flower. The reason is because there is a typo in the configuration file for the 2nd flower (Perenniel vs Perennial) and it doesn\u0027t match the constructor of \u0060Flower\u0060.\r\nAn exception is thrown (\u0060System.InvalidOperationException: \u0027Cannot create instance of type \u0027WebApplication1.Flower\u0027 because parameter \u0027perennial\u0027 has no matching config.\u0060) but it doesn\u0027t surface since \u0060.Get\u003CGardenSettings\u003E()\u0060 isn\u0027t passing the option to \r\nSince \u0060WebApplication.CreateBuilder(args);\u0060 adds the configuration files with the option \u0060ErrorOnUnknownConfiguration == true\u0060)\r\nI\u0027d think that behavior is by design.",
        "createdAt": "2024-05-22T04:50:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53659#issuecomment-2123861159"
      },
      {
        "id": "IC_kwDOAQzde85-p4TK",
        "parentId": null,
        "author": "Jack-Edwards",
        "content": "Resolved the typo in the example repo.  Good catch.\r\n\r\nHowever, I\u0027m still getting the same exception as before whenever: 1) the configuration key in \u0060appsettings.Test.json\u0060 is \u0060MyGarden\u0060 and 2) the \u0060GardenSettings\u0060 class has a constructor.  The exception does not occur when I rename the \u0060appsettings.Test.json\u0060 key to \u0060NotMyGarden\u0060 and the settings are therefore sourced from \u0060appsettings.json\u0060.\r\n\r\nAnd I\u0027m still getting _duplicate_ Flowers added to the list whenever the settings are pulled from \u0060appsettings.json\u0060 and \u0060GardenSettings\u0060 has it\u0027s constructor.\r\n\r\nI actually never noticed the \u0022single flower\u0022 scenario you discovered.\r\n",
        "createdAt": "2024-05-22T14:12:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53659#issuecomment-2124907722"
      },
      {
        "id": "IC_kwDOAQzde85__SxE",
        "parentId": null,
        "author": "MariovanZeist",
        "content": "Might be a duplicate of https://github.com/dotnet/runtime/issues/83803\r\n",
        "createdAt": "2024-06-04T11:29:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53659#issuecomment-2147298372"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde859bJq9",
    "title": "Improve Error Message and/or Docs around InvariantGlobalization true by default",
    "url": "https://github.com/dotnet/aspnetcore/issues/53678",
    "createdAt": "2024-01-28T17:33:13Z",
    "lastUpdated": "2024-05-01T21:11:46Z",
    "body": "I\u0027d like to share some experience here. I just created a new webapi project and then added EF Core support. I didn\u0027t pay **super** close attention to the template\u0027s csproj file, as I assumed it would basically work as it has in the past. If I noticed the existence of this property it didn\u0027t jump out at me:\r\n\r\n\u0060\u0060\u0060xml\r\n\u003CInvariantGlobalization\u003Etrue\u003C/InvariantGlobalization\u003E\r\n\u0060\u0060\u0060\r\n\r\nSo, it came as a surprise to me when I had finished adding EF Core DbContext support and was using the CLI to create migrations, as I\u0027ve done 100s of times in the past, and when I tried to update my localdb SQL Server I got this:\r\n\r\n\u0060\u0060\u0060\r\nSystem.Globalization.CultureNotFoundException: Only the invariant culture is supported in globalization-invariant mode. See https://aka.ms/GlobalizationInvariantMode for more information. (Parameter \u0027name\u0027)\r\nen-us is an invalid culture identifier.\r\n   at System.Globalization.CultureInfo.GetCultureInfo(String name)\r\n   at Microsoft.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource\u00601 retry, SqlConnectionOverrides overrides)\r\n   at Microsoft.Data.SqlClient.SqlConnection.Open(SqlConnectionOverrides overrides)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerConnection.OpenDbConnection(Boolean errorsExpected)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternal(Boolean errorsExpected)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Open(Boolean errorsExpected)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.\u003C\u003Ec__DisplayClass18_0.\u003CExists\u003Eb__0(DateTime giveUp)\r\n   at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.\u003C\u003Ec__DisplayClass12_0\u00602.\u003CExecute\u003Eb__0(DbContext _, TState s)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func\u00603 operation, Func\u00603 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute[TState,TResult](IExecutionStrategy strategy, TState state, Func\u00602 operation, Func\u00602 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.Exists(Boolean retryOnNotExists)\r\n   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.Exists()\r\n   at Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.Exists()\r\n   at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(String targetMigration)\r\n   at Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations.UpdateDatabase(String targetMigration, String connectionString, String contextType)\r\n   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.UpdateDatabaseImpl(String targetMigration, String connectionString, String contextType)\r\n   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.UpdateDatabase.\u003C\u003Ec__DisplayClass0_0.\u003C.ctor\u003Eb__0()\r\n   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.Execute(Action action)\r\nOnly the invariant culture is supported in globalization-invariant mode. See https://aka.ms/GlobalizationInvariantMode for more information. (Parameter \u0027name\u0027)\r\nen-us is an invalid culture identifier.\r\n\u0060\u0060\u0060\r\n\r\nNow, knowing I\u0027d just created this project I was 100% sure I hadn\u0027t specified \u0022en-us\u0022 anywhere in my code to configure and set up my DbContext. There\u0027s nothing in this that suggests I should look at my Web API project. The stack trace only includes EF Core types. Fortunately, my search led me to the \u003CInvariantCulture\u003E setting and issues like this one:\r\n\r\nhttps://github.com/dotnet/SqlClient/issues/2239\r\n\r\n(and probably this issue\u0027s existence will help others as well)\r\n\r\n## Proposal\r\n\r\nImprove the error message shown above to suggest checking the application\u0027s project file to see if \u0060\u003CInvariantCulture\u003E\u0060 has been set and, if so, to remove that setting (or set it to false).\r\n\r\nAlternately, figure out a way to make local SQLServer development work with invariant culture.\r\n\r\n",
    "upvotes": 2,
    "labels": [
      "design-proposal",
      "NativeAOT",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde858UlEg",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E  I just created a new webapi project\r\n\r\nI believe we only set InvariantGlobalization=true when you use the AoT-enabled Web API template. Can you verify if this is the case?\r\n\r\nAssuming so, @eerhardt do we document the fact that this is set for AoT templates anywhere?",
        "createdAt": "2024-04-30T15:59:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53678#issuecomment-2085769504"
      },
      {
        "id": "IC_kwDOAQzde858giAW",
        "parentId": null,
        "author": "eerhardt",
        "content": "\u003E I believe we only set InvariantGlobalization=true when you use the AoT-enabled Web API template. Can you verify if this is the case?\r\n\r\nThere was a time (8.0.0 - 8.0.1) where we were setting it in the webapi template regardless if you used AOT or not. This was fixed in 8.0.2 with https://github.com/dotnet/aspnetcore/pull/52461. If you are using the latest patches, this is now fixed.\r\n\r\n\u003E do we document the fact that this is set for AoT templates anywhere?\r\n\r\nI\u0027m not sure and I don\u0027t know where that would be documented (maybe it should be on https://learn.microsoft.com/aspnet/core/fundamentals/native-aot?). This is basically a performance optimization. Since you are using AOT, we figured it makes sense to default to this mode. See https://github.com/dotnet/aspnetcore/issues/47029.",
        "createdAt": "2024-05-01T18:39:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53678#issuecomment-2088902678"
      },
      {
        "id": "IC_kwDOAQzde858hdrJ",
        "parentId": null,
        "author": "ardalis",
        "content": "I wasn\u0027t using an AOT template (must\u0027ve been 8.0.0-8.0.1). Sounds like this can probably be closed if it\u0027s resolved in the template (though I\u0027d make sure the docs for AOT templates are clear about this).",
        "createdAt": "2024-05-01T21:11:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53678#issuecomment-2089147081"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85-ph0b",
    "title": "[MinimalAPI] WithOpenApi is called twice",
    "url": "https://github.com/dotnet/aspnetcore/issues/53890",
    "createdAt": "2024-02-08T10:26:07Z",
    "lastUpdated": "2024-02-12T20:24:10Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI have added the following to the default project template:\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/weatherforecast\u0022, () =\u003E\r\n{\r\n    // ...\r\n})\r\n.WithOpenApi(operation =\u003E\r\n{\r\n    operation.Description = \u0022Get the weather forecast\u0022;\r\n    return operation;\r\n});\r\n\u0060\u0060\u0060\r\n\r\nThen, I have set a breakpoint inside the \u0060WithOpenApi\u0060 method. When running the application, I notice that the breakpoint is hit twice.\n\n### Expected Behavior\n\nThe \u0060WithOpenApi\u0060 method should be called only once.\n\n### Steps To Reproduce\n\nMinimal repro here: https://github.com/marcominerva/WithOpenApiIssue\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.101\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85-x9Hi",
    "title": "launchSettings.json ASPNETCORE_ENVIRONMENT should not be overridden by environment variable",
    "url": "https://github.com/dotnet/aspnetcore/issues/53916",
    "createdAt": "2024-02-09T12:18:47Z",
    "lastUpdated": "2024-05-04T13:01:35Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIf ASPNETCORE_ENVIRONMENT or DOTNET_ENVIRONMENT are set on the development machine as environment variables, they override the ASPNETCORE_ENVIRONMENT in launchSettings.json\r\n\r\n\u003E The environment for local machine development can be set in the Properties\\launchSettings.json file of the project. Environment values set in launchSettings.json override values set in the system environment.\r\n\r\nhttps://learn.microsoft.com/en-us/aspnet/core/fundamentals/environments?view=aspnetcore-8.0\r\n\r\n### Expected Behavior\r\n\r\nThe setting in launchSettings.json should take priority.\r\n\r\n### Steps To Reproduce\r\n\r\n\u0060\u0060\u0060c#\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build();\r\napp.MapGet(\u0022/\u0022, () =\u003E builder.Environment.EnvironmentName);\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060json\r\n{\r\n  \u0022$schema\u0022: \u0022http://json.schemastore.org/launchsettings.json\u0022,\r\n  \u0022profiles\u0022: {\r\n    \u0022https\u0022: {\r\n      \u0022commandName\u0022: \u0022Project\u0022,\r\n      \u0022dotnetRunMessages\u0022: true,\r\n      \u0022launchBrowser\u0022: true,\r\n      \u0022applicationUrl\u0022: \u0022https://localhost:7034\u0022,\r\n      \u0022environmentVariables\u0022: {\r\n        \u0022ASPNETCORE_ENVIRONMENT\u0022: \u0022I should see this text\u0022\r\n      }\r\n    }\r\n  }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n1. Run the app and see the correct value.\r\n2. Set either \u0060ASPNETCORE_ENVIRONMENT\u0060 or \u0060DOTNET_ENVIRONMENT\u0060 on your machine\u0027s Environment variables\r\n3. (Might need VS restart)\r\n4. Run again and see the incorrect value\r\n\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.200-preview.23624.5\r\n\r\n### Anything else?\r\n\r\n.NET SDK:\r\n Version:           8.0.200-preview.23624.5\r\n Commit:            8065b9770c\r\n Workload version:  8.0.200-manifests.66f5ce51\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22621\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.200-preview.23624.5\\\r\n\r\n.NET workloads installed:\r\n Workload version: 8.0.200-manifests.66f5ce51\r\n [maui-windows]\r\n   Installation Source: VS 17.8.34525.116, VS 17.9.34526.213\r\n   Manifest Version:    8.0.3/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maui\\8.0.3\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [maccatalyst]\r\n   Installation Source: VS 17.8.34525.116, VS 17.9.34526.213\r\n   Manifest Version:    17.2.8004/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maccatalyst\\17.2.8004\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [ios]\r\n   Installation Source: VS 17.8.34525.116, VS 17.9.34526.213\r\n   Manifest Version:    17.2.8004/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.ios\\17.2.8004\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [android]\r\n   Installation Source: VS 17.8.34525.116, VS 17.9.34526.213\r\n   Manifest Version:    34.0.52/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.android\\34.0.52\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [wasm-tools-net6]\r\n   Installation Source: VS 17.8.34525.116, VS 17.9.34526.213\r\n   Manifest Version:    8.0.1/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.workload.mono.toolchain.net6\\8.0.1\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [wasm-tools-net7]\r\n   Installation Source: VS 17.8.34525.116, VS 17.9.34526.213\r\n   Manifest Version:    8.0.1/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.workload.mono.toolchain.net7\\8.0.1\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [wasm-tools]\r\n   Installation Source: VS 17.8.34525.116, VS 17.9.34526.213\r\n   Manifest Version:    8.0.1/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.workload.mono.toolchain.current\\8.0.1\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n [aspire]\r\n   Installation Source: VS 17.9.34526.213\r\n   Manifest Version:    8.0.0-preview.1.23557.2/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.aspire\\8.0.0-preview.1.23557.2\\WorkloadManifest.json\r\n   Install Type:              Msi\r\n\r\n\r\nHost:\r\n  Version:      8.0.1\r\n  Architecture: x64\r\n  Commit:       bf5e279d92\r\n\r\n.NET SDKs installed:\r\n  5.0.408 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.203 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.101 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.200-preview.23624.5 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0-rc.2.23480.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.30 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0-rc.2.23479.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0-rc.2.23479.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download",
    "upvotes": 2,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85zZVmv",
        "parentId": null,
        "author": "jscarle",
        "content": "Although I agree with you that this is confusing, \u202AI believe you\u0027ll have a hard time getting that to change due to the dependencies across different core elements of .NET. This type of change could have unintended \u202Cconsequences depending on which part of the execution chain is reponsible for this behavior.\r\n\r\n\u202AlaunchSettings.json is actually parsed by \u0022[dotnet run](https://github.com/dotnet/sdk/blob/1b5807894dccf30e107a88534cb9e3372a3c2e90/src/Cli/dotnet/commands/dotnet-run/RunCommand.cs)\u0022 (which is [part of the SDK](https://github.com/dotnet/sdk/blob/1b5807894dccf30e107a88534cb9e3372a3c2e90/src/Cli/Microsoft.DotNet.Cli.Utils/Command.cs)). The environment variables are then parsed and fed into a .NET Process to launch the application (which is [part of the runtime](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs)).\u202C\r\n\r\n\u202AIts only then that the [WebApplicationBuilder](https://github.com/dotnet/aspnetcore/blob/4deb60bb65b090c50a0595452266ad73d4dcc68b/src/DefaultBuilder/src/WebApplicationBuilder.cs) will kick in and start going through its configuration process.\u202C\r\n\r\n\u202ASo any one of those steps could be responsible for ordering of the environment variables.\u202C\r\n\r\nPerhaps a change similar to what was done for prioritizing ASPNETCORE_URLS could be done, but I\u0027m unsure of how effective that would be.",
        "createdAt": "2024-02-09T14:21:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53916#issuecomment-1936021935"
      },
      {
        "id": "IC_kwDOAQzde85zZsD5",
        "parentId": null,
        "author": "mrpmorris",
        "content": "\u003E Perhaps a change similar to what was done for prioritizing ASPNETCORE_URLS could be done, but I\u0027m unsure of how effective that would be.\r\n\r\nCould change the template of launchSettings.json to pass in the environment name in the \u0060commandLineArgs\u0060 if not possible to make the behaviour match the docs.",
        "createdAt": "2024-02-09T15:18:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53916#issuecomment-1936113913"
      },
      {
        "id": "IC_kwDOAQzde8580kOL",
        "parentId": null,
        "author": "gay003",
        "content": "I agree that the default launchSettings.json template should be modified to include the necessary, expected environment variables. In my case, adding **\u0022DOTNET_ENVIRONMENT\u0022: \u0022Development\u0022** to the \u0022environmentVariables\u0022 section of profiles appropriately overrides the DOTNET_ENVIRONMENT variable set on my computer and allows the default, sample project to run without any further modifications. I suggest adding that environment variable to the default launch profiles.\r\n\r\nAs someone who is new to Blazor (or for anyone on an affected framework), it\u0027s off-putting when the sample project that Microsoft/VisualStudio provides as a learning tool is unable to run out-of-the-box, because it then puts new users in a situation where they have to attempt to investigate an issue involving a technology they don\u0027t understand. Combined with how obscure this issue is (the error message isn\u0027t clear and googling the error doesn\u0027t return results containing the relevant solution), I didn\u0027t find this GitHub issue until after I happened to identify and resolve the problem on my own after successfully testing the sample project on a separate, personal computer and comparing Visual Studio installation and project differences. If I hadn\u0027t been the one to setup the environment variable on my machine (as opposed to someone else like my organization\u0027s system administrators) and thus noticed/remembered the name mentioned in the console window it would\u0027ve taken much, much longer to resolve the issue.",
        "createdAt": "2024-05-04T12:58:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53916#issuecomment-2094154635"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85_zGRs",
    "title": "Inconsistent Form model-binding behaviour whether an \u0060IFormFileCollection\u0060 property exists or not.",
    "url": "https://github.com/dotnet/aspnetcore/issues/54130",
    "createdAt": "2024-02-20T10:56:17Z",
    "lastUpdated": "2024-03-01T22:18:58Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nCalling an endpoint with a model _without_ an \u0060IFormFileCollection\u0060 without providing any valid fields causes the handler to receive a \u0060null\u0060 value:\r\n\r\n\u0060\u0060\u0060sh\r\ncurl --location --request POST \u0027https://localhost:7173/withForm\u0027 \\\r\n--header \u0027Content-Type: application/x-www-form-urlencoded\u0027\r\n\u0060\u0060\u0060\r\n\r\nCalling an endpoint with a model _with_ an \u0060IFormFileCollection\u0060 without providing any valid fields correctly validates the model and promptly throws a \u0060FormDataMappingException\u0060 (\u0060Missing required value for property \u0027Name\u0027\u0060)\r\n\r\n\u0060\u0060\u0060sh\r\ncurl --location --request POST \u0027https://localhost:7173/withoutForm\u0027 \\\r\n--header \u0027Content-Type: application/x-www-form-urlencoded\u0027\r\n\u0060\u0060\u0060\r\n\r\nIf, however, I pass in a single valid field (even with an empty value), then all works as expected:\r\n\r\n\u0060\u0060\u0060sh\r\ncurl --location \u0027https://localhost:7173/withFileEnumerable\u0027 \\\r\n--header \u0027Content-Type: application/x-www-form-urlencoded\u0027 \\\r\n--data-urlencode \u0027name=\u0027\r\n\u0060\u0060\u0060\r\n\r\nNote: This is specifically for \u0060IFormFileCollection\u0060; \u0060IEnumerable\u003CIFormFile\u003E\u0060, \u0060List\u003CIFormFile\u003E\u0060 (and presumably other collection interfaces) behaves similarly to not having one (i.e. \u0060null\u0060 value being passed). \u0060application/x-www-urlencoded\u0060 and \u0060multipart/form-data\u0060 behaves identically.\r\n\r\n\r\n\r\n### Expected Behavior\r\n\r\nCalling an endpoint - with or without an \u0060IFormFileCollection\u0060 - without providing any valid fields correctly validates the model and promptly throws a \u0060FormDataMappingException\u0060.\r\n\r\nAlternatively (same meaning, different wording): Calling an endpoint without a single valid field should work (In terms of model binding) identically to calling an endpoint with one or more valid fields\r\n\r\n### Steps To Reproduce\r\n\r\n\u0060\u0060\u0060c#\r\nusing Microsoft.AspNetCore.Mvc;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapPost(\u0022withoutFiles\u0022, ( [FromForm] WithoutFiles request) =\u003E\r\n{\r\n    return request switch\r\n    {\r\n        null =\u003E Results.BadRequest(), // This can happen for some reason.\r\n        _ =\u003E Results.Ok()\r\n    };\r\n}).DisableAntiforgery();\r\n\r\napp.MapPost(\u0022withFileCollection\u0022, ( [FromForm] WithFileCollection request) =\u003E\r\n{\r\n    return request switch\r\n    {\r\n        null =\u003E Results.BadRequest(), // This can never happen (as expected).\r\n        _ =\u003E Results.Ok()\r\n    };\r\n}).DisableAntiforgery();\r\n\r\napp.MapPost(\u0022withFileList\u0022, ( [FromForm] WithFileList request) =\u003E\r\n{\r\n    return request switch\r\n    {\r\n        null =\u003E Results.BadRequest(), // This can happen for some reason.\r\n        _ =\u003E Results.Ok()\r\n    };\r\n}).DisableAntiforgery();\r\n\r\napp.MapPost(\u0022withFileEnumerable\u0022, ( [FromForm] WithFileEnumerable request) =\u003E\r\n{\r\n    return request switch\r\n    {\r\n        null =\u003E Results.BadRequest(), // This can happen for some reason.\r\n        _ =\u003E Results.Ok()\r\n    };\r\n}).DisableAntiforgery();\r\n\r\napp.Run();\r\n\r\npublic class WithoutFiles\r\n{\r\n    public required string Name { get; init; }\r\n    public required string Description { get; init; }\r\n}\r\n\r\npublic class WithFileCollection\r\n{\r\n    public required string Name { get; init; }\r\n    public required string Description { get; init; }\r\n\r\n    public IFormFileCollection Attachments { get; init; } = default!;\r\n}\r\n\r\npublic class WithFileEnumerable\r\n{\r\n    public required string Name { get; init; }\r\n    public required string Description { get; init; }\r\n\r\n    public IEnumerable\u003CIFormFile\u003E Attachments { get; init; } = default!;\r\n}\r\n\r\npublic class WithFileList\r\n{\r\n    public required string Name { get; init; }\r\n    public required string Description { get; init; }\r\n\r\n    public List\u003CIFormFile\u003E Attachments { get; init; } = default!;\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Exceptions (if any)\r\n\r\nThis is the exception I get in the \u0060IFormFileCollection\u0060 case - the one I\u0027m expecting in all cases.\r\n\r\n\u0060\u0060\u0060\r\nMicrosoft.AspNetCore.Http.BadHttpRequestException: Missing required value for property \u0027Name\u0027.\r\n ---\u003E Microsoft.AspNetCore.Components.Endpoints.FormMapping.FormDataMappingException: An error occurred while trying to map a value from form data. For more details, see the \u0027Error\u0027 property and the \u0027InnerException\u0027 property.\r\n   at Microsoft.AspNetCore.Components.Endpoints.FormMapping.FormDataReader.AddMappingError(Exception exception, String attemptedValue)\r\n   at Microsoft.AspNetCore.Components.Endpoints.FormMapping.CompiledComplexTypeConverter\u00601.TryRead(FormDataReader\u0026 context, Type type, FormDataMapperOptions options, T\u0026 result, Boolean\u0026 found)\r\n   at Microsoft.AspNetCore.Components.Endpoints.FormMapping.FormDataMapper.Map[T](FormDataReader reader, FormDataMapperOptions options)\r\n   at lambda_method1(Closure, Object, HttpContext, Object)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.Log.FormDataMappingFailed(HttpContext httpContext, String parameterTypeName, String parameterName, FormDataMappingException exception, Boolean shouldThrow)\r\n   at lambda_method1(Closure, Object, HttpContext, Object)\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.\u003C\u003Ec__DisplayClass104_2.\u003C\u003CHandleRequestBodyAndCompileRequestDelegateForForm\u003Eb__2\u003Ed.MoveNext()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\r\n\u0060\u0060\u0060\r\n\r\n### .NET Version\r\n\r\n\u00608.0.201\u0060 (but was also broke in \u00608.0.102\u0060 and possibly earlier)\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 4,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde851qQZF",
        "parentId": null,
        "author": "captainsafia",
        "content": "@javiercn Do you see similar behavior in Blazor? I assume so given the shared code. It seems a little sus to me that binding resolves differently when you provide the same input but a different model to bind to. Any thoughts on you having an \u0060IFormFileCollection\u0060 property in the model throws things off?",
        "createdAt": "2024-03-01T22:18:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54130#issuecomment-1974011461"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86AitPB",
    "title": "WebApplicationFactory does not support common output path.",
    "url": "https://github.com/dotnet/aspnetcore/issues/54243",
    "createdAt": "2024-02-27T13:21:29Z",
    "lastUpdated": "2024-03-04T23:40:35Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen using the \u0060UseCommonOutputDirectory\u0060 project property or the \u0060OutputPath\u0060 MSBuild flag, \u0060WebApplicationFactory\u0060 randomly fails to initialize, throwing an \u0060InvalidOperationException\u0060.\r\n\r\nThis happens because the \u0060MvcTestingAppManifest.json\u0060 does not have a namespace, so the parallel project builds will override each others file, thereby creating a race condition that only succeeds when the correct manifest is written last.\r\n\r\n### Expected Behavior\r\n\r\nThe tests should not randomly fail when using a common output path. There are numerous ways to achieve this, but here are a few suggestions (obviously not all of these may be viable):\r\n- The \u0060MvcTestingAppManifest.json\u0060 should be namespaced to avoid the issue entirely.\r\n- The \u0060WebApplicationFactoryContentRoot\u0060 attribute should be used if the manifest doesn\u0027t contain a valid path, not only when the manifest doesn\u0027t exist.\r\n- The \u0060WebApplicationFactory.SetContentRoot\u0060 method could be \u0060protected virtual\u0060 to allow replacing the behavior. Alternatively, it should not be called before any of the configuration methods run, which would allow applying the \u0060TEST_CONTENTROOT_*\u0060 setting before the exception is thrown.\r\n- The \u0060builder is null\u0060 branch of \u0060WebApplicationFactory.EnsureServer\u0060 should have some overridable method to configure the deferred host before the content root is set.\r\n\r\n### Steps To Reproduce\r\n\r\n- Checkout the official [WebApplicationFactory example](https://github.com/dotnet/AspNetCore.Docs.Samples/tree/main/test/integration-tests/8.x/IntegrationTestsSample).\r\n- Add a new project with some random test class and reference it from the test project.\r\n- Set \u0060UseCommonOutputDirectory\u0060 to \u0060true\u0060 for all projects.\r\n- Build the original project, then the new project. Observe how the \u0060MvcTestingAppManifest.json\u0060 is now missing the entry for the original project.\r\n- Run the tests without building. Observe how the tests throw an exception when the manifest is wrong.\r\n\r\n### Exceptions (if any)\r\n\r\nSystem.InvalidOperationException : Solution root could not be located using application root\r\n\r\n### .NET Version\r\n\r\n8.0.100\r\n\r\n### Anything else?\r\n\r\nNET SDK:\r\n Version:           8.0.100\r\n Commit:            57efcf1350\r\n Workload version:  8.0.100-manifests.8d38d0cc\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.22631\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.100\\\r\n\r\nInstallierte .NET-Workloads:\r\n Workload version: 8.0.100-manifests.8d38d0cc\r\n [maui-windows]\r\n   Installationsquelle: VS 17.8.34330.188\r\n   Manifestversion:    8.0.3/8.0.100\r\n   Manifestpfad:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maui\\8.0.3\\WorkloadManifest.json\r\n   Installationstyp:              Msi\r\n\r\n [maccatalyst]\r\n   Installationsquelle: VS 17.8.34330.188\r\n   Manifestversion:    17.0.8478/8.0.100\r\n   Manifestpfad:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.maccatalyst\\17.0.8478\\WorkloadManifest.json\r\n   Installationstyp:              Msi\r\n\r\n [ios]\r\n   Installationsquelle: VS 17.8.34330.188\r\n   Manifestversion:    17.0.8478/8.0.100\r\n   Manifestpfad:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.ios\\17.0.8478\\WorkloadManifest.json\r\n   Installationstyp:              Msi\r\n\r\n [android]\r\n   Installationsquelle: VS 17.8.34330.188\r\n   Manifestversion:    34.0.43/8.0.100\r\n   Manifestpfad:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.android\\34.0.43\\WorkloadManifest.json\r\n   Installationstyp:              Msi\r\n\r\n\r\nHost:\r\n  Version:      8.0.0\r\n  Architecture: x64\r\n  Commit:       5535e31a71\r\n\r\n.NET SDKs installed:\r\n  8.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde8514K93",
        "parentId": null,
        "author": "captainsafia",
        "content": "@DJ4ddi Thanks for filing this issue. Namespacing seems like the best approach here. Is this something that would need to be done from MSBuild? I\u0027d be happy to take a look at a PR for this.",
        "createdAt": "2024-03-04T23:40:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54243#issuecomment-1977659255"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86A3yBa",
    "title": "RequestDelegateGenerator requires the object to implement \u0060IParsable\u003CT\u003E\u0060 or otherwise have a \u0060TryParse\u0060 method.",
    "url": "https://github.com/dotnet/aspnetcore/issues/54277",
    "createdAt": "2024-02-29T21:07:57Z",
    "lastUpdated": "2024-03-04T22:19:46Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWith the \u0060RequestDelegateGenerator\u0060 enabled (\u0060PublishAoT\u0060 or \u0060EnableRequestDelegateGenerator\u0060 to \u0060true\u0060), minimal api endpoints with \u0060[FromForm]\u0060 on a model without a custom-made \u0060TryParse\u0060 method will not compile correctly.\r\n\r\n\u0060[FromBody]\u0060 - which I imagine would work more-or-less the same in this regard - does not have this issue.\r\n\r\nNote: I have not tested whether these actually _work_ for \u0060[FromBody]\u0060 (or any of the other ones, for that matter), but the generated code _compiles_ for all but the two non-\u0060TryParsable\u0060 \u0060[FromForm]\u0060-based endpoints.\r\n\r\n### Expected Behavior\r\n\r\n\u0060[FromForm]\u0060 and \u0060[FromBody]\u0060 should work identically, and should not require the developer to create their own \u0060TryParse\u0060 method.\r\n\r\n### Steps To Reproduce\r\n\r\nhttps://github.com/KennethHoff/Repros/tree/66a2d8c3b53fd64dfc5f3880cb2db8d9cac6550a/AspNetCoreRequestDelegateGenerator\r\n\r\n### Exceptions (if any)\r\n\r\n#### On .Net 8 (All compiler versions mentioned below):\r\n\r\n\u0060\u0060\u0060\r\n0\u003EGeneratedRouteBuilderExtensions.g.cs(520,59): Error CS0029 : Cannot implicitly convert type \u0027string\u0027 to \u0027NotParsableForm\u0027\r\n0\u003EGeneratedRouteBuilderExtensions.g.cs(551,59): Error CS0029 : Cannot implicitly convert type \u0027string\u0027 to \u0027NotParsableForm\u0027\r\n0\u003EGeneratedRouteBuilderExtensions.g.cs(637,67): Error CS0029 : Cannot implicitly convert type \u0027string\u0027 to \u0027ImplicitlyParseOnlyForm\u0027\r\n0\u003EGeneratedRouteBuilderExtensions.g.cs(668,67): Error CS0029 : Cannot implicitly convert type \u0027string\u0027 to \u0027ImplicitlyParseOnlyForm\u0027\r\n\u0060\u0060\u0060\r\n\r\n#### On .Net 9 (With \u00609.0.100-preview.1.24101.2\u0060):\r\n\r\n\u0060\u0060\u0060\r\n0\u003EGeneratedRouteBuilderExtensions.g.cs(526,59): Error CS0029 : Cannot implicitly convert type \u0027string\u0027 to \u0027NotParsableForm\u0027\r\n0\u003EGeneratedRouteBuilderExtensions.g.cs(557,59): Error CS0029 : Cannot implicitly convert type \u0027string\u0027 to \u0027NotParsableForm\u0027\r\n0\u003EGeneratedRouteBuilderExtensions.g.cs(645,67): Error CS0029 : Cannot implicitly convert type \u0027string\u0027 to \u0027ImplicitlyParseOnlyForm\u0027\r\n0\u003EGeneratedRouteBuilderExtensions.g.cs(676,67): Error CS0029 : Cannot implicitly convert type \u0027string\u0027 to \u0027ImplicitlyParseOnlyForm\u0027\r\n\u0060\u0060\u0060\r\n\r\n\r\n### .NET Version\r\n\r\nTested with all the following versions:\r\n\u00608.0.100\u0060, \u00608.0.201\u0060, \u00609.0.100-preview.1.24101.2\u0060\r\n\r\n### Anything else?\r\n\r\nThis was tested on Linux, but I have also experienced the general premise (\u0060cannot implicitly convert type \u0027string\u0027 to \u0027\u003CmodelType\u003E\u0027\u0060 with \u0060[FromForm]\u0060 on Windows.\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "NativeAOT",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde851qL5F",
        "parentId": null,
        "author": "captainsafia",
        "content": "@KennethHoff The error that you\u0027re running into is a result of the difference in behavior when trying to bind _complex_ types from a form. A history of the behavior here:\r\n\r\n- In. NET 7, we didn\u0027t support the source generator and attempting to bind complex types from from a form. We assumed that everything you applied \u0060[FromForm]\u0060 on would be parsable. If it wasn\u0027t, you ran into the exception you saw here.\r\n- In .NET 8, we attend support for binding complex type but _only_ for non-AoT/RDG scenarios. You\u0027\u0027ll get the same exception when running with RDG on.\r\n\r\nIf you\u0027d like complex form binding support, I\u0027d recommend you turn off RDG. If you require native AoT support for your scenario, let us know.\r\n\r\nThe error message could be better here but we don\u0027t do anything to capture the exception throw and provide a more detailed log.\r\n\r\nDoes disabling RDG work for supporting this particular case?",
        "createdAt": "2024-03-01T22:07:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54277#issuecomment-1973993029"
      },
      {
        "id": "IC_kwDOAQzde851qRDu",
        "parentId": null,
        "author": "KennethHoff",
        "content": "@captainsafia I only enabled RDG because I figured it would just be a better performing, easier-to-debug/step-through variant of the RDF.\n\n.Net 8 added support for \u0060[FromForm]\u0060 in Minimal APIs as well as support for RDG, so I simply put two and two together and figured we could use \u0060[FromForm]\u0060 with the RDG.\n\nThe error message being so terrible is what made me assume that this was a bug rather than a feature.\n\nI have no real need for it, but I _want to_ use it! \uD83D\uDE05. I also don\u0027t really see a major reason (read: other than the standard \u0022hasn\u0027t been done yet\u0022) why this wouldn\u0027t be a supported scenario.\n\nIs it something on your radar? Could it conceivably be fixed in Asp.Net Core 9?",
        "createdAt": "2024-03-01T22:22:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54277#issuecomment-1974014190"
      },
      {
        "id": "IC_kwDOAQzde851qT2A",
        "parentId": null,
        "author": "KennethHoff",
        "content": "At the very least, I believe an improved error message is in order, as it\u0027s gives off very \u0022broken functionality\u0022 vibes \uD83E\uDEE0",
        "createdAt": "2024-03-01T22:34:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54277#issuecomment-1974025600"
      },
      {
        "id": "IC_kwDOAQzde851qlDR",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Is it something on your radar? Could it conceivably be fixed in Asp.Net Core 9?\r\n\r\nYep, it\u0027s on our radar. For context, we integrated complex form binding support in minimal APIs by doing code sharing with the form binding that was supported in Blazor. We did this to have consistency between the two stacks and to reduce the implementation cost. However, the code we source-share with Blazor for this makes heavy use of dynamic code-gen and reflection. For us to resolve this issue, we\u0027d need to update the shared source which is a bit of an undertaking.\r\n\r\nBut yes, agree that the error message could definitely be better here \uD83D\uDE05 ",
        "createdAt": "2024-03-01T23:53:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54277#issuecomment-1974096081"
      },
      {
        "id": "IC_kwDOAQzde851s4BA",
        "parentId": null,
        "author": "KennethHoff",
        "content": "So, what I\u0027m hearing here is that in order for Blazor to support AoT, this has to be fixed, and I\u0027m guessing that\u0027s near the top of your priorities \uD83E\uDD1E\uD83C\uDFFB",
        "createdAt": "2024-03-02T08:02:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54277#issuecomment-1974698048"
      },
      {
        "id": "IC_kwDOAQzde8512knR",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E So, what I\u0027m hearing here is that in order for Blazor to support AoT, this has to be fixed, and I\u0027m guessing that\u0027s near the top of your priorities \uD83E\uDD1E\uD83C\uDFFB\r\n\r\nFull disclosure: It\u0027s likely not happening for .NET 9 based on the Blazor roadmap (https://github.com/dotnet/aspnetcore/issues/51834). \uD83D\uDE05 \r\n\r\nNot to mention there\u0027s some work that needs to be done in Roslyn to support source generator ordering so that we can have a base generator for emitting common code and then Blazor and minimal-API specific generates for consuming the common code.\r\n",
        "createdAt": "2024-03-04T18:49:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54277#issuecomment-1977240017"
      },
      {
        "id": "IC_kwDOAQzde8512rQ_",
        "parentId": null,
        "author": "KennethHoff",
        "content": "\u003EFull disclosure: It\u0027s likely not happening for .NET 9 based on the Blazor roadmap (https://github.com/dotnet/aspnetcore/issues/51834). \uD83D\uDE05\r\n\r\nNo worries. As previously mentioned; This does not block anything on my end :)",
        "createdAt": "2024-03-04T19:04:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54277#issuecomment-1977267263"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86BJ_aJ",
    "title": "TestHost keep the test running infinitely",
    "url": "https://github.com/dotnet/aspnetcore/issues/54347",
    "createdAt": "2024-03-04T13:41:50Z",
    "lastUpdated": "2024-08-22T16:21:00Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nThe test keeps running when some exception is thrown on the scope log creation (and the test never ends).\r\n\r\n\u003E I have used a library that because of its bad behavior/configuration some exceptions is thrown \u0060ILogger.BeginScope\u0060 and as the test keeps running, it makes diagnosing the problem more complex\r\n\r\n### Expected Behavior\r\n\r\nThe HttpClient should return \u0060InternalServerError\u0060.\r\n\r\n### Steps To Reproduce\r\n\r\nOn \u0060Program.cs\u0060:\r\n\u0060\u0060\u0060csharp\r\nvar app = WebApplication.CreateBuilder(args).Build();\r\napp.MapGet(\u0022/hello-world\u0022, ([FromServices] ILogger\u003CProgram\u003E logger) =\u003E\r\n{\r\n    logger.LogInformation(\u0022Starting...\u0022);\r\n    return \u0022Hi\u0022;\r\n});\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\nOn TestClass:\r\n\u0060\u0060\u0060csharp\r\n[Fact]\r\npublic async Task Test1()\r\n{\r\n    // Arrange\r\n    var client = new CustomWebApplicationFactory()\r\n        .CreateClient();\r\n\r\n    // Act\r\n    var result = await client.GetAsync(\u0022/hello-world\u0022);\r\n\r\n    // Assert\r\n    Assert.Equal(HttpStatusCode.InternalServerError, result.StatusCode);\r\n}\r\ninternal class CustomWebApplicationFactory : WebApplicationFactory\u003CProgram\u003E\r\n{\r\n    protected override void ConfigureWebHost(IWebHostBuilder builder) =\u003E builder\r\n        .ConfigureTestServices(services =\u003E\r\n            services.AddLogging(options =\u003E\r\n            {\r\n                options.ClearProviders();\r\n                options.AddProvider(new MyLoggerProvider());\r\n            })\r\n        );\r\n}\r\ninternal class MyLoggerProvider : ILoggerProvider\r\n{\r\n    public ILogger CreateLogger(string categoryName) =\u003E new MyLogger();\r\n    public void Dispose() { }\r\n}\r\ninternal class MyLogger : ILogger\r\n{\r\n    public IDisposable? BeginScope\u003CTState\u003E(TState state) where TState : notnull =\u003E throw new Exception(\u0022\uD83D\uDCA3\uD83D\uDCA3\uD83D\uDCA3\u0022);\r\n    public bool IsEnabled(LogLevel logLevel) =\u003E true;\r\n    public void Log\u003CTState\u003E(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func\u003CTState, Exception?, string\u003E formatter) { }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.200\r\n\r\n### Anything else?\r\n\r\nMicrosoft Visual Studio Professional 2022 (64-bit) - Preview\r\nVersion 17.10.0 Preview 1.0\r\n\r\n\u0060\u0060\u0060bash\r\n.NET SDK:\r\n Version:           8.0.200\r\n Commit:            438cab6a9d\r\n Workload version:  8.0.200-manifests.5638171e\r\n\r\nAmbiente de runtime:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.200\\\r\n\r\nCargas de trabalho do .NET instaladas:\r\nN\u00E3o h\u00E1 cargas de trabalho instaladas para exibir.\r\n\r\nHost:\r\n  Version:      8.0.2\r\n  Architecture: x64\r\n  Commit:       1381d5ebd2\r\n\r\n.NET SDKs installed:\r\n  7.0.313 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.406 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.200 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde8513PXP",
        "parentId": null,
        "author": "amcasey",
        "content": "Note to repro\u0027ers: per [StackOverflow](https://stackoverflow.com/questions/69991983/deps-file-missing-for-dotnet-6-integration-tests), you\u0027ll need to add \u0060public partial class Program {}\u0060 at the end of Program.cs, otherwise the reference in \u0060TestClass\u0060 will bind to an unrelated type and the test won\u0027t run properly.\r\n\r\nAlso, to make the problem a little more explicit, the exception thrown by \u0060BeginScope\u0060 is the difference between the test failing and waiting indefinitely.  The relevant callstack is\r\n\u0060\u0060\u0060\r\n\u003E\tTestProject1.UnitTest1.MyLogger.BeginScope\u003CMicrosoft.AspNetCore.Hosting.HostingApplicationDiagnostics.Log.HostingLogScope\u003E(Microsoft.AspNetCore.Hosting.HostingApplicationDiagnostics.Log.HostingLogScope) Line 48\tC#\r\n \tMicrosoft.AspNetCore.Hosting.HostingApplicationDiagnostics.BeginRequest(Microsoft.AspNetCore.Http.HttpContext, Microsoft.AspNetCore.Hosting.HostingApplication.Context) Line 116\tC#\r\n \tMicrosoft.AspNetCore.Hosting.HostingApplication.CreateContext(Microsoft.AspNetCore.Http.Features.IFeatureCollection) Line 83\tC#\r\n \tMicrosoft.AspNetCore.TestHost.ApplicationWrapper\u003CMicrosoft.AspNetCore.Hosting.HostingApplication.Context\u003E.Microsoft.AspNetCore.Hosting.Server.IHttpApplication\u003CMicrosoft.AspNetCore.Hosting.HostingApplication.Context\u003E.CreateContext(Microsoft.AspNetCore.Http.Features.IFeatureCollection) Line 36\tC#\r\n \tMicrosoft.AspNetCore.TestHost.ApplicationWrapper\u003CMicrosoft.AspNetCore.Hosting.HostingApplication.Context\u003E.CreateContext(Microsoft.AspNetCore.Http.Features.IFeatureCollection) Line 31\tC#\r\n \tMicrosoft.AspNetCore.TestHost.HttpContextBuilder.SendAsync.__RunRequestAsync|0() Line 101\tC#\r\n \tMicrosoft.AspNetCore.TestHost.HttpContextBuilder.SendAsync.AnonymousMethod__1(object) Line 163\tC#\r\n \tSystem.Threading.ThreadPoolWorkQueue.Dispatch() Line 918\tC#\r\n \tSystem.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart() Line 102\tC#\r\n\u0060\u0060\u0060",
        "createdAt": "2024-03-04T20:39:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54347#issuecomment-1977415119"
      },
      {
        "id": "IC_kwDOAQzde8513Qo0",
        "parentId": null,
        "author": "amcasey",
        "content": "At a guess, I would say that exceptions thrown by [this line](https://github.com/dotnet/aspnetcore/blob/2c0ee4c870556d823ea5a0b35a8ba1b8ae81142c/src/Hosting/TestHost/src/HttpContextBuilder.cs#L101) require some of the same cleanup as code in the immediately following try block.",
        "createdAt": "2024-03-04T20:43:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54347#issuecomment-1977420340"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86Bz8QL",
    "title": ".NET 8 FromKeyedServices does not apply registered IConfigureOptions\u003CT\u003E with a key to IOptions\u003CT\u003E",
    "url": "https://github.com/dotnet/aspnetcore/issues/54476",
    "createdAt": "2024-03-10T19:47:35Z",
    "lastUpdated": "2024-08-22T16:28:32Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIn .NET 8, when using the new **FromKeyedServices** attribute to inject **IOptions\u003CT\u003E** with specific configurations based on a key, it appears that **IConfigureOptions\u003CT\u003E** services registered with the same key are not being correctly applied. This behavior is unexpected as the purpose of **FromKeyedServices** is to allow keyed service injection, and one would expect that keyed configurations would be applied accordingly.\r\n\r\nActual Behavior:\r\nThe injected **IOptions\u003CMyOptions\u003E** instance does not reflect the configurations applied by the keyed **IConfigureOptions\u003CMyOptions\u003E** registration. Instead, it seems to fall back to default or non-keyed configurations, suggesting that the **FromKeyedServices** attribute does not correctly resolve keyed **IConfigureOptions\u003CT\u003E** services.\r\n\r\n### Expected Behavior\r\n\r\nWhen using **[FromKeyedServices(\u0022test\u0022)]** to inject **IOptions\u003CMyOptions\u003E**, the instance of **IOptions\u003CMyOptions\u003E** should reflect the configurations applied by any **IConfigureOptions\u003CMyOptions\u003E** registered with the key \u0022test\u0022. This would allow for dynamic configuration scenarios where different settings can be applied based on the key specified at injection time.\r\n\r\n### Steps To Reproduce\r\n\r\n1. Register a configuration class **MyOptions** and its **IConfigureOptions\u003CMyOptions\u003E** implementation with a specific key (e.g., \u0022test\u0022) in the DI container.\r\n2. Use the **[FromKeyedServices(\u0022test\u0022)]** attribute to inject **IOptions\u003CMyOptions\u003E** into a service or controller.\r\n3. Observe that the **IOptions\u003CMyOptions\u003E** instance does not reflect the configurations applied by the keyed **IConfigureOptions\u003CMyOptions\u003E** registration.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8\r\n\r\n### Anything else?\r\n\r\n.NET version: .NET 8\r\nOperating system: Windows 11\r\nIDE: VS 2022",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86CRQTf",
    "title": "Cannot bind StringValues for HTTP request header with Minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/54536",
    "createdAt": "2024-03-14T06:49:51Z",
    "lastUpdated": "2024-04-26T01:45:50Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nusing \u0060FromHeader\u0060 attribute on minimal API parameter with type \u0060StringValues\u0060 type produce error on build and analyze\r\n\r\n\u0060\u0060\u0060\r\nProgram.cs(7,18,7,70): error ASP0020: Parameter \u0027ifMatch\u0027 of type StringValues should define a bool TryParse(string, IFormatProvider, out StringValues) method, or implement IParsable\u003CStringValues\u003E (https://aka.ms/aspnet/analyzers)\r\n\u0060\u0060\u0060\r\n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\nbuild this code:\r\n\u0060\u0060\u0060csharp\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.Extensions.Primitives;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022/\u0022, ([FromHeader(Name = \u0022If-Match\u0022)] StringValues ifMatch) =\u003E ifMatch);\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.202\n\n### Anything else?\n\nthere is an issue (#40752) that address same bug in previous versions. It seems it\u0027s returned again",
    "upvotes": 0,
    "labels": [
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde8574yIc",
        "parentId": null,
        "author": "captainsafia",
        "content": "@GihanSoft I believe this issue is likely in the analyzers that produce the \u0060ASP0020\u0060 warning. The actual parameter binding implementation in minimal APIs does support binding correctly to StringValues from the header (as indicated by the original issue).\r\n\r\nFor now, you should be safe to disable this warning around the impacted source.\r\n\r\n\u0060\u0060\u0060\r\n#pragma warning disable ASP0020 // Complex types referenced by route parameters must be parsable\r\napp.MapGet(\u0022/\u0022, ([FromHeader(Name = \u0022If-Match\u0022)] StringValues ifMatch) =\u003E ifMatch);\r\n#pragma warning restore ASP0020 // Complex types referenced by route parameters must be parsable\r\n\u0060\u0060\u0060\r\n\r\nI\u0027ll leave this issue open in the backlog for tracking.",
        "createdAt": "2024-04-26T01:45:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54536#issuecomment-2078482972"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86CfE3g",
    "title": "webapi template uses HttpsRedirection and .http files redirect silently",
    "url": "https://github.com/dotnet/aspnetcore/issues/54562",
    "createdAt": "2024-03-15T17:53:56Z",
    "lastUpdated": "2024-11-14T17:12:30Z",
    "body": "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/webapi-template-uses-HttpsRedirection-an/10576429)._\n\n---\nThe default \u0060dotnet new webapi\u0060 template includes the UseHttpsRedirection middleware which will redirect requests from http to https.\n\nIt also includes an \u0060https\u0060 launch profile that includes both an http and an https endpoint on different ports.\n\nIt also includes a .http file which assigns:\n@ProjectName_HostAddress = http://localhost:5149\n\nGiven the above, if someone add bearer token security to their web api, they will encounter behavior as described here:\nhttps://ardalis.com/http-file-not-sending-auth-header/\n\nSpecifically, the Authorization header will not be passed to the application and a 401 will be encountered on every request. Looking at the Request tab in the .http file it will be clear the Authorization header is missing but, crucially, not **why**.\n\nThe reason is described here: https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclienthandler.allowautoredirect?view=net-8.0 which also notes:\n\n\u003E In practice, this means that an application can\u0027t put custom authentication information into the Authorization header if it is possible to encounter redirection. \n\nThere are several ways in which this problem might be addressed:\n\n1) Don\u0027t include HttpsRedirection in the default webapi project template\n2) Don\u0027t include both http and https in the launch profile for https in the webapi project template\n3) Make the default host address in the .http file be HTTPS.\n4) Don\u0027t automatically follow redirects from .http files\n5) Continue automatically following redirects but pass along Authorization headers\n6) Continue automatically following redirects but include a LARGE NOTE in the results pane stating that a redirect was encountered and, therefore, any Authorization header was dropped.\n\nI hope you\u0027ll consider adopting one or more of the above mitigations/fixes.\n\nThanks!\nSteve\n\n\n\n---\n### Original Comments\n\n#### Feedback Bot on 2/1/2024, 04:54 PM: \n\n(private comment, text removed)\n#### Feedback Bot on 2/2/2024, 00:51 AM: \n\n(private comment, text removed)\n#### Steve Smith on 2/2/2024, 06:42 AM: \n\n(private comment, text removed)\n#### Garry McGlennon [MSFT] on 2/27/2024, 07:05 PM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)",
    "upvotes": 5,
    "labels": [
      "enhancement",
      "Author: Migration Bot :robot:",
      "feature-templates",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85_a8qQ",
        "parentId": null,
        "author": "blowdart",
        "content": "In discussions with Damian this should go further.\n\nThe http to https middleware should be removed from api projects and https enforced as a requirement with no listener on http.\n\nAdditionally, in all environments, api endpoints that require auth should reject authenticated requests indicating that auth tokens have been sent over http and should now be considered compromised. 421 seems to be the right status code for that.",
        "createdAt": "2024-05-29T16:04:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54562#issuecomment-2137770640"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86E1pEs",
    "title": "Minimal APIs and controllers treat header arrays differently",
    "url": "https://github.com/dotnet/aspnetcore/issues/54978",
    "createdAt": "2024-04-05T19:05:30Z",
    "lastUpdated": "2024-10-09T10:59:31Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nPassing  comma-separated list of values to the header is treated differently by controller action and Minimal API endpoint during binding to array. For controller action they are parsed as separate values while for Minimal APIs - as single one:\r\nController action:\r\n![image](https://github.com/dotnet/aspnetcore/assets/6535969/f10ff6f8-3a97-4982-a4cf-4f8a1a1b5261)\r\n\r\nMinimal API:\r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/6535969/880f0dba-6faf-4a86-b780-96e7a5644b2c)\r\n\n\n### Expected Behavior\n\nShould behave the same way.\n\n### Steps To Reproduce\n\nCreate controller with action:\r\n\r\n    [HttpGet]\r\n    public IActionResult Get([FromHeader] string[] hs) =\u003E Ok(new { Test = hs});\r\n\r\nAnd minimal API endpoint:\r\n\u0060\u0060\u0060\r\napp.MapGet(\u0022/test_h\u0022, ([FromHeader] string[] hs) =\u003E new {Test = hs});\r\n\u0060\u0060\u0060\r\n\r\nAnd pass request header \u0060hs: 1,2,3\u0060\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.100\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "help wanted",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde858XJXU",
        "parentId": null,
        "author": "captainsafia",
        "content": "@gurustron Thanks for reporting this issue!\r\n\r\nMinimal API\u0027s binding logic processes all arguments that are annotated with \u0060[FromHeader]\u0060 as string values (see [here](https://github.com/dotnet/aspnetcore/blob/207bc7d00c00bf454dc83789d6824609b1d8b02a/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L719)).\r\n\r\nOn the other hand, MVC\u0027s \u0060HeaderModelBinder\u0060 has some custom handling for enumerable types:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/207bc7d00c00bf454dc83789d6824609b1d8b02a/src/Mvc/Mvc.Core/src/ModelBinding/Binders/HeaderModelBinder.cs#L109-L118\r\n\r\nI\u0027d classify this as a bug in minimal APIs. I don\u0027t see any reason that we shouldn\u0027t handle enumerable types correctly, particularly because so many headers pass their values as a comma-seperated string.\r\n\r\nI\u0027m going to mark this as help wanted in the backlog. It\u0027s not high priority but I\u0027d be happy to review or provide guidance on a PR.",
        "createdAt": "2024-04-30T18:26:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54978#issuecomment-2086442452"
      },
      {
        "id": "IC_kwDOAQzde859LCak",
        "parentId": null,
        "author": "tongsean9807",
        "content": "Hi,\r\nI am interested in resolving this issue. But, I am new to the process.\r\n\r\nI am able to setup the environment and replicate the problem. \r\nI have look into the code, it seems to process string first. \r\n\r\nHowever, I am looking for a document or steps to debug aspnetcore repo.\r\nDo I build the code at src/Http after changes?\r\nAnd how can I see the logs?\r\n\r\nFor example, if I just print \u0022hello world\u0022 within aspnetcore repo, where will it appear? \r\n\r\nThank you\r\nRegards,\r\nSean\r\n\r\n",
        "createdAt": "2024-05-08T08:31:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54978#issuecomment-2100045476"
      },
      {
        "id": "IC_kwDOAQzde859LOBn",
        "parentId": null,
        "author": "martincostello",
        "content": "@tongsean9807 Documentation for building the code can be found here: [Build the ASP.NET Core repo](https://github.com/dotnet/aspnetcore/blob/main/docs/BuildFromSource.md)\r\n\r\nIf the instructions for debugging aren\u0027t clear from that, then maybe some improvements/clarifications can be made.\r\n\r\nMy flow on my Windows laptop is typically:\r\n\r\n1. Sync my local repo with the latest code in \u0060main\u0060;\r\n2. Create a new branch;\r\n3. Run \u0060restore.cmd\u0060;\r\n4. Run \u0060. ./activate.ps1\u0060;\r\n5. Change the directory to where I want to change (e.g. \u0060/src/MVC\u0060);\r\n6. Run \u0060startvs.cmd\u0060;\r\n7. Work on the code in Visual Studio like I would any other .NET solution to edit, run unit tests and debug via any of the sample projects in the solution that contain the things I\u0027ve changed.\r\n",
        "createdAt": "2024-05-08T08:56:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54978#issuecomment-2100093031"
      },
      {
        "id": "IC_kwDOAQzde85-Unqv",
        "parentId": null,
        "author": "danirzv",
        "content": "it will be a breaking change so, what\u0027s the right approach here? should we change how array inputs work in minimal-api?!",
        "createdAt": "2024-05-19T19:19:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54978#issuecomment-2119334575"
      },
      {
        "id": "IC_kwDOAQzde86PK6Xz",
        "parentId": null,
        "author": "mikekistler",
        "content": "Here\u0027s the relevant section of the HTTP RFC\n\nhttps://www.rfc-editor.org/rfc/rfc9110.html#section-5.2\n\nwhich clearly designates comma as the character for separating values in a header.",
        "createdAt": "2024-10-09T10:59:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54978#issuecomment-2402002419"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86E5ooZ",
    "title": "Inconsistent model binding between \u0060IFormFileCollection\u0060, \u0060IReadOnlyList\u003CIFormFile\u003E\u0060 and other collection types in Minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/54999",
    "createdAt": "2024-04-07T10:40:13Z",
    "lastUpdated": "2024-04-30T00:13:39Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nMinimal API form binding works differently based on which interface types you choose to use:\r\n\r\n* \u0060IFormFileCollection\u0060 binds every file regardless of their name.\r\n\t* Prior to noticing this issue I always used this type if I wanted to get a collection of files, as it seemed like the obvious one based on the name.\r\n* \u0060IReadOnlyList\u003CIFormFile\u003E\u0060 binds all the ones with the corresponding names.\r\n\t* This is what I thought \u0060IFormFileCollection\u0060 did.\r\n* All the other collection interfaces (\u0060IEnumerable\u003CIFormFile\u003E\u0060, \u0060IReadOnlyCollection\u003CIFormFile\u003E\u0060, \u0060IList\u003CIFormFile\u003E\u0060, and \u0060ICollection\u003CIFormFile\u003E\u0060) and their implementations (\u0060List\u003CIFormFile\u003E\u0060, \u0060IFormFile[]\u0060, \u0060Collection\u003CIFormFile\u003E\u0060, and \u0060ReadOnlyCollection\u003CIFormFile\u003E\u0060) do not work at all.\r\n\t* This is fine for my use-case, just wanted to mention it for completeness sake.\r\n\r\n\r\n### Expected Behavior\r\n\r\n\u0060IFormFileCollection\u0060 respects the name of the property.\r\n\r\n### Steps To Reproduce\r\n\r\nhttps://github.com/KennethHoff/Repros/tree/master/AspNetCoreMinimalApiInconsistentFormFileCollectionModelBinding\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.202\r\n\r\n### Anything else?\r\n\r\nI realize this is a (huge?) breaking change and this issue will therefore probably never be dealt with, but if nothing else I hope I\u0027ll save another developer some time in the future.\r\n\r\nThe only \u0022documentation\u0022 I found of this behaviour is [this comment thread on a Pull Request from last year](https://github.com/dotnet/aspnetcore/pull/50537#discussion_r1319709546).",
    "upvotes": 0,
    "labels": [
      "Docs",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde856VQYw",
        "parentId": null,
        "author": "KennethHoff",
        "content": "I believe this issue is labeled wrong; I think it should be \u0060area-minimal\u0060 or similar.",
        "createdAt": "2024-04-12T19:17:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54999#issuecomment-2052392496"
      },
      {
        "id": "IC_kwDOAQzde858Netj",
        "parentId": null,
        "author": "captainsafia",
        "content": "@KennethHoff Thanks for reporting this issue and apologies for the delay in response as I work through the triage backlog. \uD83D\uDE05 \r\n\r\nThe behavior that you are seeing for \u0060IFormFileCollection\u0060 matches the binding rules that minimal APIs uses. Namely, a parameter of the \u0060IFormFileCollection\u0060 type will bind directly to the \u0060HttpRequest.Form.Files\u0060 property on the HttpContext. Parameter types like \u0060IFormFileCollection\u0060 are handled by the parameter binding layer that is exclusive to minimal APIs and defined in [the RequestDelegateFactory code gen layer](https://source.dot.net/#Microsoft.AspNetCore.Http.Extensions/RequestDelegateFactory.cs,832).\r\n\r\nThe behavior that you are seeing for \u0060IReadOnlyList\u003CIFormFile\u003E\u0060 comes from the form mapping logic that minimal APIs shares with Blazor. Under the hood, it functions by calling the \u0060GetFiles\u0060 method implemented on \u0060IFormFileCollection\u0060 (see [here](https://source.dot.net/#Microsoft.AspNetCore.Http.Features/IFormFileCollection.cs,38)).\r\n\r\nThe fact that other collection-based variants of \u0060IFormFiles\u0060 aren\u0027t supported is because it\u0027s handled by either minimal API\u0027s binding layer or the shared form mapping. We could definitely add support for this but the primary reason it\u0027s not supported is because the binding layer currently takes a literal representation of \u0060IFormFileCollection\u0060 and its matching APIs.\r\n\r\nOverall, I\u0027m a fan of the utility that \u0060IFormFileCollection\u0060 returning the entire collection provides for being able to query things. If we didn\u0027t provide it, users would have to either bind from \u0060HttpContext.Request\u0060 or \u0060HttpContext.Request.Form\u0060 if they wanted to interact with multiple files at once. Of course, there\u0027s also the option of consuming multiple parameters in your handler.\r\n\r\nYour notes about documentation for this behavior are valid though.\r\n\r\n@Rick-Anderson @tdykstra Would we be able to add content to [this page](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/parameter-binding?view=aspnetcore-8.0) to cover the parameter binding behavior for \u0060IFormFileCollection\u0060 and \u0060IReadOnlyList\u003CIFormFile\u003E\u0060 as described above? I think [this header](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/parameter-binding?view=aspnetcore-8.0#binding-to-forms-with-iformcollection-iformfile-and-iformfilecollection) is the right place to put it.\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2024-04-30T00:13:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54999#issuecomment-2083908451"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86E_Xsf",
    "title": "Consider binding to \u0060IUtf8SpanParsable\u003CT\u003E\u0060/\u0060ISpanParsable\u003CT\u003E\u0060 over \u0060IParsable\u003CT\u003E\u0060 if a type implements it",
    "url": "https://github.com/dotnet/aspnetcore/issues/55016",
    "createdAt": "2024-04-08T13:17:50Z",
    "lastUpdated": "2024-04-09T20:17:19Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nCurrently, if a particular type does not have \u0060BindAsync\u0060 specified, which is often the case for libraries that cannot assume \u0060Sdk.Web\u0060 project dependency, ASP.NET Core will try to bind parameters of such types to \u0060IParsable\u003CT\u003E\u0060 interface implementation.\r\n\r\nHowever, if the type is representable in or parsable from UTF-8, ASP.NET Core may be able to feed the \u0060ReadOnlySpan\u003Cbyte\u003E\u0060 observing the input buffer directly, bypassing string allocation and/or transcoding.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nGiven an example scenario:\r\n\u0060\u0060\u0060cs\r\nvar app = WebApplication\r\n    .CreateSlimBuilder(args)\r\n    .Build();\r\n    \r\napp.MapGet(\u0022/echo/{name}\u0022, (U8String name) =\u003E\r\n    TypedResults.Bytes(u8($\u0022Hello, {name}!\u0022), contentType: \u0022text/plain\u0022));\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\nThe type \u0060U8String\u0060 implements \u0060IParsable\u003CT\u003E\u0060, \u0060ISpanParsable\u003CT\u003E\u0060 and \u0060IUtf8SpanParsable\u003CT\u003E\u0060. Currently, only \u0060IParsable\u003CT\u003E\u0060 participates in binding method resolution. Both \u0060ISpanParsable\u003CT\u003E\u0060 and \u0060IUtf8SpanParsable\u003CT\u003E\u0060 could participate in the process, allowing for more efficient binding for types that do not need either \u0060string\u0060 itself or UTF-16. \r\n\r\n### Additional context\r\n\r\nFor backwards compatibility with pre-.NET 8 targets, the binding can be duck-typed similar to the way it works for \u0060TryParse\u0060 itself.",
    "upvotes": 1,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde8558q9H",
        "parentId": null,
        "author": "halter73",
        "content": "\u0060ISpanParsable\u003CT\u003E\u0060 was in preview when I added the \u0060IParsable\u003CT\u003E\u0060 support to minimal route handlers, and \u0060IUtf8SpanParsable\u003CT\u003E\u0060 got added even later, so that\u0027s the main reason we didn\u0027t use it. However, I don\u0027t really see the benefit to adding support for \u0060ISpanParsable\u003CT\u003E\u0060 or \u0060IUtf8SpanParsable\u003CT\u003E\u0060 now.\r\n\r\nAll of the binding sources that support \u0060IParsable\u003CT\u003E\u0060 expose a \u0060string\u0060. Neither route values, query string values, nor header values are exposed anywhere as UTF-8 encoded \u0060ReadOnlySpan\u003Cbyte\u003E\u0060, so they would need to be reencoded hurting performance. The conversion from \u0060string\u0060 to \u0060ReadOnlySpan\u003Cchar\u003E\u0060 is far less expensive, but still unnecessary since we\u0027re starting with a \u0060string\u0060.\r\n\r\nI would prioritize adding support in Kestrel and IIS that gives direct access to the raw UTF-8 encoded \u0060ReadOnlySpan\u003Cbyte\u003E\u0060 from the HTTP request via a new feature before adding support for \u0060IUtf8SpanParsable\u003CT\u003E\u0060 in particular since otherwise using it would be a performance trap. At first, I wasn\u0027t sure if such a thing would be possible with IIS, but it seems we\u0027re already using [pRawUrl](https://github.com/dotnet/aspnetcore/blob/79ef5e329b1e31c3775a1977798253cc8f7da6cc/src/Shared/HttpSys/RequestProcessing/NativeRequestContext.cs#L278) and [UTF-8 decoding it](https://github.com/dotnet/aspnetcore/blob/79ef5e329b1e31c3775a1977798253cc8f7da6cc/src/Shared/HttpSys/RequestProcessing/RequestUriBuilder.cs#L41).\r\n\r\nWe\u0027d probably also need to update routing and query string parsing to work on UTF-8 encoded \u0060ReadOnlySpan\u003Cbyte\u003E\u0060 in order to take full advantage of this change. Even if we avoid the reencoding back to UTF-8, using the original \u0060ReadOnlySpan\u003Cbyte\u003E\u0060 over a \u0060string\u0060 for parsing isn\u0027t that helpful if other parts of the request pipelines still require the same UTF-16 encoded \u0060string\u0060 elsewhere.\r\n\r\n@brunolins16 also added \u0060IParsable\u003CT\u003E\u0060 support to MVC model binding. Any change we do here, we should probably replicate with the \u0060TryParseModelBinder\u0060.",
        "createdAt": "2024-04-09T19:52:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55016#issuecomment-2045947719"
      },
      {
        "id": "IC_kwDOAQzde8558xKV",
        "parentId": null,
        "author": "neon-sunset",
        "content": "\u003E All of the binding sources that support IParsable\u003CT\u003E expose a string. Neither route values, query string values, nor header values are exposed anywhere as UTF-8 encoded ReadOnlySpan\u003Cbyte\u003E, so they would need to be reencoded hurting performance. The conversion from string to ReadOnlySpan\u003Cchar\u003E is far less expensive, but still unnecessary since we\u0027re starting with a string.\r\n\r\nThis was my suspicion when looking into C# emitted by RDG for writing this proposal. In the end, as a user, I did not have enough information whether direct access to sliced input buffer was readily available or not, therefore the issue was submitted from the user\u0027s point of view.\r\n\r\nWith that said, I think it might be an area with quite a few throughput wins for ASP.NET Core via zero-copy binding as CoreLib exposes a lot of APIs to consume UTF-8 \u0060ReadOnlySpan\u003Cbyte\u003E\u0060\u0027s directly (e.g. \u0060int.Parse\u0060, \u0060JsonSerializer.Deserialize\u0060, etc,).\r\n\r\n\u003E We\u0027d probably also need to update routing and query string parsing to work on UTF-8 encoded ReadOnlySpan\u003Cbyte\u003E in order to take full advantage of this change. Even if we avoid the reencoding back to UTF-8, using the original ReadOnlySpan\u003Cbyte\u003E over a string for parsing isn\u0027t that helpful if other parts of the request pipelines still require the same UTF-16 encoded string elsewhere.\r\n\r\nThis does indeed look like quite an invasive change. My another assumption was \u0022given direct access to, for example, \u0060ConnectionContext\u0060\u0027s \u0060IDuplexPipe\u0060, is there any heavy lifting that ASP.NET Core and/or Kestrel could do here?\u0022. But if not, that\u0027s a shame.\r\n\r\nNonetheless, are there any steps I can take to help with the progress on this one as an interested party?\r\n\r\nThanks!",
        "createdAt": "2024-04-09T20:11:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55016#issuecomment-2045973141"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86Fn4tn",
    "title": "Support custom task types in Minimal API endpoints",
    "url": "https://github.com/dotnet/aspnetcore/issues/55118",
    "createdAt": "2024-04-13T23:57:41Z",
    "lastUpdated": "2024-04-30T22:51:05Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to map a minimal API endpoint as follows:\r\n\r\n\u0060\u0060\u0060csharp\r\n  ArgApp.MapPost(\u0022/api/create-account\u0022, CreateAccount.HandleHttpAsync);\r\n\u0060\u0060\u0060\r\n\r\n...the endpoint itself is defined with this signature:\r\n\r\n\u0060\u0060\u0060csharp\r\n public static async AwaitOnceTask\u003CResponse\u003E HandleHttpAsync(HttpRequest ArgRequest, IServiceProvider ArgServices) { }\r\n\u0060\u0060\u0060\r\n\r\nWhen I try to run my app, I get the following exception message and stack trace:\r\n\r\n\u0060\u0060\u0060text\r\nSystem.NotSupportedException: Unsupported return type: AwaitOnceTask\u003CCreateAccount.Response\u003E\r\n         at Microsoft.AspNetCore.Http.RequestDelegateFactory.PopulateBuiltInResponseTypeMetadata(Type returnType, EndpointBuilder builder)\r\n         at Microsoft.AspNetCore.Http.RequestDelegateFactory.CreateArgumentsAndInferMetadata(MethodInfo methodInfo, RequestDelegateFactoryContext factoryContext)\r\n         at Microsoft.AspNetCore.Http.RequestDelegateFactory.InferMetadata(MethodInfo methodInfo, RequestDelegateFactoryOptions options)\r\n         at Microsoft.AspNetCore.Routing.RouteEndpointDataSource.CreateRouteEndpointBuilder(RouteEntry entry, RoutePattern groupPrefix, IReadOnlyList\u00601 groupConventions, IReadOnlyList\u00601 groupFinallyConventions)\r\n         at Microsoft.AspNetCore.Routing.RouteEndpointDataSource.get_Endpoints()\r\n\u0060\u0060\u0060\r\n\r\nThe problem seems to be the return type \u0060AwaitOnceTask\u003CCreateAccount.Response\u003E\u0060 which uses a custom task type I have created called \u0060AwaitOnceTask\u003CT\u003E\u0060.\n\n### Describe the solution you\u0027d like\n\nThe docs [currently say](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/responses?view=aspnetcore-8.0) that:\r\n\r\n\u003E Minimal endpoints support the following types of return values:\r\n\u003E 1. string - This includes \u0060Task\u003Cstring\u003E\u0060 and \u0060ValueTask\u003Cstring\u003E\u0060.\r\n\u003E 1. T (Any other type) - This includes \u0060Task\u003CT\u003E\u0060 and \u0060ValueTask\u003CT\u003E\u0060.\r\n\u003E 1. IResult based - This includes \u0060Task\u003CIResult\u003E\u0060 and \u0060ValueTask\u003CIResult\u003E\u0060.\r\n\r\n...this means support for async endpoints is already included but seems to be hardcoded to just \u0060Task\u003CT\u003E\u0060 or \u0060ValueTask\u003CT\u003E\u0060 . It would be great if the logic in \u0060Microsoft.AspNetCore.Http.RequestDelegateFactory\u0060 was written to support any [task type that can be defined in C#](https://github.com/dotnet/roslyn/blob/main/docs/features/task-types.md), not just the native \u0060Task\u003CT\u003E\u0060 or \u0060ValueTask\u003CT\u003E\u0060.\n\n### Additional context\n\n_No response_",
    "upvotes": 1,
    "labels": [
      "feature-rdg",
      "area-minimal",
      "feature-rdf"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde858Dale",
        "parentId": null,
        "author": "ericmutta",
        "content": "CC: @danmoseley ...I just started using Minimal APIs which have come a very long way in .NET 8 (which also happens to be the first .NET that contains code I had the pleasure of contributing \uD83D\uDE03)...this issue may be one of the remaining edge cases to address in coming releases of .NET \uD83D\uDC4D",
        "createdAt": "2024-04-28T00:56:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55118#issuecomment-2081270110"
      },
      {
        "id": "IC_kwDOAQzde858WxQ-",
        "parentId": null,
        "author": "captainsafia",
        "content": "@ericmutta Thanks for reporting this!\r\n\r\nIt\u0027s a compelling feature but there\u0027s definitely a hefty testing/design requirement for this one. I\u0027ll stick this in the backlog for now to track interest in it. When we do approach this issue, we should think about:\r\n\r\n- How this intersects with endpoints filters on an application\r\n- How this intersects with ApiExplorer/OpenAPI tooling\r\n- How to make sure this is compatible with the static code generation story for minimal APIs via Request Delegate Generator\r\n",
        "createdAt": "2024-04-30T18:08:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55118#issuecomment-2086343742"
      },
      {
        "id": "IC_kwDOAQzde858byWC",
        "parentId": null,
        "author": "ericmutta",
        "content": "Many thanks @captainsafia for following up \uD83D\uDC4D ",
        "createdAt": "2024-04-30T22:51:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55118#issuecomment-2087658882"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86GDayb",
    "title": "Pass an object as a parameter to a minimal API endpoint",
    "url": "https://github.com/dotnet/aspnetcore/issues/55184",
    "createdAt": "2024-04-17T19:04:51Z",
    "lastUpdated": "2024-05-16T03:48:34Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI would like to pass an object (instead of primitive type) as a parameter to my minimal API as part of a get request.\r\nBasically, I have a Bazlor component that runs on the client (using InteractiveWebassembly render mode) which invokes a minimal api end point on the server in the following way:\r\n\r\n\u0060GetFromJsonAsync\u0060\r\n\r\nExample:\r\n\r\nI have the following minimal API code:\r\n\r\n\u0060builder.MapGet(\u0022/api/counties\u0022, GetCounties2);\u0060\r\n\r\n\u0060Task\u003CIList\u003CCodeType\u003E\u003E GetCounties2(string keywords, [FromQuery] AutoCompleteParameters parameters,\r\n\t\t\tICountiesService countiesService, HttpContext context)\u0060\r\n\r\nInvocation from the WebAssembly component:\r\n\r\n\u0060 public async Task\u003CIList\u003CCodeType\u003E\u003E GetCountiesAsync(string keywords, AutoCompleteParameters parameters)\r\n{\r\n\r\n\tvar qs = $\u0022?keywords={keywords}\u0022;\r\n\tqs = parameters.AppendToQuery(qs);\r\n\tConsole.WriteLine(qs);\r\n\r\n\tvar coll = await _http.GetFromJsonAsync\u003CCodeType[]\u003E($\u0022/api/counties/{qs}\u0022) ?? [];\r\n\treturn coll;\r\n} \u0060\r\n\r\nThe AppendToQuery() method is (which just appends key/value pair to query string for each public field that is set by the user):\r\n\r\n\u0060var buff = new StringBuilder(queryString);\r\nvar fields = this.GetType().GetFields();\r\nforeach (var field in fields)\r\n{\r\n\tvar value = field.GetValue(this);\r\n\tif (value != null)\r\n\t{\r\n\t\tbuff.Append($\u0022\u0026{field.Name}={value}\u0022);\r\n\t}\r\n}\r\nreturn buff.ToString();\u0060\r\n\r\n\r\nI have followed instructions at (https://learn.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/parameter-binding-in-aspnet-web-api) and tried the first 2 examples, using FromQuery and Type Converters, and both examples did not work. I haven\u0027t tried the 3rd example using a \u0022Model Binder\u0022 example since I don\u0027t know if that will work either.\r\n\r\nWhen using the FromQuery attribute I got an exception that my type did not have TryParse() method. After adding TryParse() method, it was never called by the run time.\r\n\r\nAs for the type converter, I added it to my type and it was completely ignored.  I keep getting null for the parameter on the server for my object, the type converter is not used and my TryParse is not being invoked.\r\n\r\n\u0060[TypeConverter(typeof(AutoCompleteParametersConverter))]\r\npublic class AutoCompleteParameters\u0060\r\n\r\n\r\nImplementation of my type converter is:\r\n\r\n\u0060internal class AutoCompleteParametersConverter : TypeConverter\r\n{\r\n\tpublic override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)\r\n\t{\r\n\t\tif (sourceType == typeof(string))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn base.CanConvertFrom(context, sourceType);\r\n\t}\r\n\r\n\tpublic override object ConvertFrom(ITypeDescriptorContext context,\r\n\t\tCultureInfo culture, object value)\r\n\t{\r\n\t\tif (value is string)\r\n\t\t{\r\n\t\t\tAutoCompleteParameters p;\r\n\t\t\tif (AutoCompleteParameters.TryParse((string)value, out p))\r\n\t\t\t{\r\n\t\t\t\treturn p;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn base.ConvertFrom(context, culture, value);\r\n\t}\r\n}\u0060\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nSee original problem description.\r\n\r\n### Additional context\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "Needs: Attention :wave:",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85680zS",
        "parentId": null,
        "author": "htmlsplash",
        "content": "As a work around, I have hacked it this way, but I wish this would work automatically out of the box:\r\n\r\n\u0060static Task\u003CIList\u003CCodeType\u003E\u003E GetCounties2(string keywords, ICountiesService countiesService, HttpContext context)\r\n{\r\n\tAutoCompleteParameters.TryParse(context.Request.QueryString.ToString(), out var parameters);\r\n\treturn countiesService.GetCountiesAsync(keywords, parameters);\r\n}\u0060",
        "createdAt": "2024-04-18T00:19:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55184#issuecomment-2062765266"
      },
      {
        "id": "IC_kwDOAQzde8574dfm",
        "parentId": null,
        "author": "captainsafia",
        "content": "@htmlsplash It looks like you\u0027re using minimal APIs. If so, \u0060TypeConverters\u0060 won\u0027t work in this case because they are only support in MVC.\r\n\r\nFor minimal APIs, you might consider implementing a custom \u0060BindAsync\u0060 method for your type. The [docs](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/parameter-binding?view=aspnetcore-8.0#custom-binding) are a good start for this.",
        "createdAt": "2024-04-26T00:41:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55184#issuecomment-2078398438"
      },
      {
        "id": "IC_kwDOAQzde8574tqi",
        "parentId": null,
        "author": "htmlsplash",
        "content": "Thanks for the link and your answer. Will give it a try!",
        "createdAt": "2024-04-26T01:21:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55184#issuecomment-2078464674"
      },
      {
        "id": "IC_kwDOAQzde858X2lB",
        "parentId": null,
        "author": "htmlsplash",
        "content": "@captainsafia \r\nI cannot use the BindAsync solution (but I trust it works) because the AutoCompleteParameters type/class that is serialized to Query String lives in BlazorComponents.Client assembly and there\u0027s NO http context which is required by BindAsync implementation.\r\n\r\nHowever, I was looking at the other option,  using a static TryParse method, which I tried, but did not work for me. In other words, the TryParse() method was never invoked on my type (AutoCompleteParameters) when the call was made on the server. My method signature of the api endpoint (GetCounties) is a bit different from the example (I have more parameters in it), and I am NOT passing parameters as comma delimited values (in query string) but instead as key value pairs. Which assumption am I violating with my example below?\r\n\r\nMy code:\r\n\r\nAutoCompleteParameters  type here\u0027s the method signature for try parse:\r\n\r\n\u0060public static bool TryParse(string s, IFormatProvider provider, out AutoCompleteParameters result)\u0060\r\n\r\nMethod signature on the server for the api endpoint:\r\n\r\n\u0060builder.MapGet(\u0022/api/counties\u0022, GetCounties);\u0060\r\n\r\n\u0060static async Task\u003CIResult\u003E GetCounties(string keywords, AutoCompleteParameters parameters,\r\n\tICountiesService countiesService, HttpContext context)\u0060\r\n\r\n\r\nAnd here\u0027s the request made, specifically, the QueryString looks something like this:\r\n\r\n\u0060?keywords=a\u0026EntityName=County\u0026SearchField=Description\u0026DisplayFields=Code%2C\u002BDescription\u0060",
        "createdAt": "2024-04-30T19:00:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55184#issuecomment-2086627649"
      },
      {
        "id": "IC_kwDOAQzde858Z5fK",
        "parentId": null,
        "author": "captainsafia",
        "content": "@htmlsplash Can you try annotation your \u0060AutoCompleteParameters\u0060 argument with the \u0060[FromQuery]\u0060 attribute like so?\r\n\r\n\u0060\u0060\u0060csharp\r\nstatic async Task\u003CIResult\u003E GetCounties(\r\n\tstring keywords,\r\n\t[FromQuery] AutoCompleteParameters parameters,\r\n\tICountiesService countiesService,\r\n\tHttpContext context)\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2024-04-30T20:36:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55184#issuecomment-2087163850"
      },
      {
        "id": "IC_kwDOAQzde858cH8V",
        "parentId": null,
        "author": "htmlsplash",
        "content": "@captainsafia I tried it both ways, same result.\r\nAfter reading the documentation more carefully, it appears to me that the Binder has no way to hookup my AutoCompleteParameters type (named \u0022parameters\u0022 in the route handler) to the Query string (QS) values, because such identifier doesn\u0027t exist anywhere in the QS. In the point Example, the QS contained \u0022point\u0022 identifier that matched the route handler\u0027s parameter name.\r\n\r\nI bet if I rewrite my QS as such:\r\n\r\n\u0060?keywords=a\u0026parameters=County,Description,Code%2C\u002BDescription\u0060\r\n\r\nThen the Binder will see and match parameters identifier in QS to the parameters name in the route handler. I will try this tomorrow.\r\nOn a side note than, instead of using positional parsing (as demonstrated in the \u0022Point\u0022 example) would there be a possibility to have support for key/value pair binding. So the QS could looks like this instead:\r\n\r\n\u0060?keywords=a\u0026parameters=EntityName:County,SearchField:Description,DisplayFields:Code%2C\u002BDescription\u0060\r\n\r\nDuring binding, the binder would hydrate my AutoCompleteParameters type identified by parameters name in the route handler using key/value pairs in QS.\r\n\r\n**UPDATE:**\r\nI corrected my QS as indicated above (by adding \u0022parameters\u0022 identifier) and it worked, my TryParse method is now being invoked. \r\n\r\n**UPDATE 2**\r\nIn addition, got it to work using \u0022AsParameters\u0022 attribute. The \u0022keywords\u0022 parameter is extracted from QS and the \u0022parameters\u0022 parameter is extracted from the route\u0027s segments.\r\n\r\nThe request URI looks like this (where \u0022qs\u0022 is the query string):\r\n\r\n\u0060$\u0022/api/counties/{parameters.EntityName}/{parameters.SearchField}/{parameters.DisplayFields}/{qs}\u0022\u0060\r\n\r\nAnd the Route handler is mapped as follows:\r\n\r\n\u0060builder.MapGet(\u0022/api/counties/{EntityName}/{SearchField}/{DisplayFields}\u0022, GetCounties3);\u0060\r\n\r\n\u0060GetCounties3([FromQuery] string keywords, [AsParameters] AutoCompleteParameters parameters, \r\n\t\t\tICountiesService countiesService, HttpContext context)\u0060\r\n\r\nThe only very minor criticism is that for larger objects (with many properties), you have to be very careful that the fields in the api call must match the order you map them in the route handler. Since this code is in 2 different places, you might make a mistake and not realize it. \r\n\r\nTo my pleasant surprise the \u0022AsParameters\u0022 attribute will even work if you have 2, or 3 separate/distinct objects in the route handler that need to be hydrated from a single route segment. As long as there\u0027s no field name collisions (ie. the different objects use unique field names) it just works.  This example should be in the docs, because it is super useful feature and might be a common scenario.\r\n\r\nAnyway, I have many options to chose from, I\u0027ll probably stick with using \u0022AsParameters\u0022 binding.",
        "createdAt": "2024-05-01T00:07:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55184#issuecomment-2087747349"
      },
      {
        "id": "IC_kwDOAQzde85-AIl3",
        "parentId": null,
        "author": "infofromca",
        "content": "@htmlsplash  do not use minimal api which is not mature. and following this post just make me headaches.\r\ninstead, use mvc https://github.com/dotnet/aspnetcore/issues/55719",
        "createdAt": "2024-05-16T03:35:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55184#issuecomment-2113964407"
      },
      {
        "id": "IC_kwDOAQzde85-AJUc",
        "parentId": null,
        "author": "htmlsplash",
        "content": "@infofromca Actually, our application requirements for generating some data from the server are very low end. Minimal api is perfect for this. Ex: AutoComplete list control, I don\u0027t need full blown MVC for this. As a matter of fact, MVC is great, but it is overkill for what we want to do; The current features of minimal apis are sufficient albeit it sometimes requires some extra work arounds.",
        "createdAt": "2024-05-16T03:40:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55184#issuecomment-2113967388"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86GLghR",
    "title": "Minimal API : Converting empty string to Nullable (ex: int?) with [FromForm] binding",
    "url": "https://github.com/dotnet/aspnetcore/issues/55202",
    "createdAt": "2024-04-18T17:01:25Z",
    "lastUpdated": "2025-01-22T09:27:08Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nFrom a Minimal API project\r\n\r\nWith the HTML form\r\n\u0060\u0060\u0060\r\n\u003Cform method=\u0022post\u0022 action=\u0022/SomeUrl\u0022\u003E\r\n\u003Cinput type=\u0022text\u0022 name=\u0022someProp\u0022 /\u003E\r\n\u003Cbutton type=\u0022submit\u0022\u003EOK\u003C/button\u003E\r\n\u003C/form\u003E\r\n\u0060\u0060\u0060\r\n\r\nAnd Mapping\r\n\u0060app.MapPost(\u0022/SomeUrl\u0022, ([FromForm] SomeModel theInputModel) =\u003E Results.Ok());\u0060\r\n \r\nAnd Model\r\n\u0060\u0060\u0060\r\npublic class SomeModel\r\n{\r\n    public int? SomeProp { get; set; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nIf I enter a number in \u0022SomeProp\u0022 input field, it works ok.\r\nBut if I leave \u0022SomeProp\u0022 input field empty and the submit the form, I get the exception:\r\n\r\n \u0060\u0060\u0060\r\n Microsoft.AspNetCore.Http.BadHttpRequestException: The value \u0027\u0027 is not valid for \u0027SomeProp\u0027.\r\n\r\n  ---\u003E Microsoft.AspNetCore.Components.Endpoints.FormMapping.FormDataMappingException: An error occurred while trying to map a value from form data. For more details, see the \u0027Error\u0027 property and the \u0027InnerException\u0027 property.\r\n\r\n         at Microsoft.AspNetCore.Components.Endpoints.FormMapping.FormDataReader.AddMappingError(Exception exception, String attemptedValue)\r\n\r\n         at Microsoft.AspNetCore.Components.Endpoints.FormMapping.CompiledComplexTypeConverter\u00601.TryRead(FormDataReader\u0026 context, Type type, FormDataMapperOptions options, T\u0026 result, Boolean\u0026 found)\r\n\r\n         at Microsoft.AspNetCore.Components.Endpoints.FormMapping.FormDataMapper.Map[T](FormDataReader reader, FormDataMapperOptions options)\r\n\r\n         at lambda_method280(Closure, Object, HttpContext, Object)\r\n\r\n         --- End of inner exception stack trace ---\r\n\r\n         at Microsoft.AspNetCore.Http.RequestDelegateFactory.Log.FormDataMappingFailed(HttpContext httpContext, String parameterTypeName, String parameterName, FormDataMappingException exception, Boolean shouldThrow)\r\n\r\n         at lambda_method280(Closure, Object, HttpContext, Object)\r\n\r\n         at Microsoft.AspNetCore.Http.RequestDelegateFactory.\u003C\u003Ec__DisplayClass104_2.\u003C\u003CHandleRequestBodyAndCompileRequestDelegateForForm\u003Eb__2\u003Ed.MoveNext()\r\n\r\n      --- End of stack trace from previous location ---\r\n\u0060\u0060\u0060\r\n\r\nThat is because the request sent to the server when posting the form is a POST with content :\r\n\u0060someProp=\u0060\r\n\r\nThe only workaroung I found is using a string instead of int? and then convert string to int? by myself which is not the best solution.\r\n\r\n\n\n### Describe the solution you\u0027d like\n\nWhen binding [FromForm], I beleive that Minimal API should convert empty string to null when converting to a Nullable type (ex int?).\r\nOr at least give any option to do so.\n\n### Additional context\n\n_No response_",
    "upvotes": 9,
    "labels": [
      "area-blazor",
      "Priority:2",
      "feature-blazor-form-validation",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde857ExZu",
        "parentId": null,
        "author": "KennethHoff",
        "content": "I\u0027ve also experienced this issue. I \u0022fixed\u0022 it by updating my frontend to delete all empty fields before sending it to the backend.",
        "createdAt": "2024-04-18T18:25:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55202#issuecomment-2064848494"
      },
      {
        "id": "IC_kwDOAQzde8574cm0",
        "parentId": null,
        "author": "captainsafia",
        "content": "The form binding behavior that minimal APIs uses is shared with Blazor. I\u0027m open to changing this behavior to be more inline with how empty strings are handled elsewhere in minimal APIs (and in forms in MVC).\r\n\r\n@javiercn Any objections to modifying the form binding behavior for empty strings here?",
        "createdAt": "2024-04-26T00:35:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55202#issuecomment-2078394804"
      },
      {
        "id": "IC_kwDOAQzde86HbiZt",
        "parentId": null,
        "author": "dimenus",
        "content": "@captainsafia I have this same issue with \u0060[FromQuery]\u0060 as well with e.g. \u0060Nullable\u003Clong\u003E\u0060. It works just fine when the parameter is omitted, but if the clients sends the query parameter with an empty value, the validation fails.\r\n\r\n\u0060curl \u0027http://localhost:5209/proui/field?uiCodeTypeId=\u0027\u0060\r\n\r\n\u0060\u0060\u0060\r\nMicrosoft.AspNetCore.Http.BadHttpRequestException: Failed to bind parameter \u0022Nullable\u003Clong\u003E uiCodeTypeId\u0022 from \u0022\u0022.\r\n   at lambda_method34(Closure, Object, HttpContext)\r\n   at Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\r\n\u0060\u0060\u0060",
        "createdAt": "2024-08-06T20:59:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55202#issuecomment-2272142957"
      },
      {
        "id": "IC_kwDOAQzde86HbmPF",
        "parentId": null,
        "author": "dcernach",
        "content": "@captainsafia I\u0027m also experiencing issues with [AsParameters] and all Nullable primitive types. This is causing significant problems. As a workaround, I\u0027ve implemented an Axios interceptor to remove empty, null, and undefined values, but some of our customers are unhappy with this solution. I\u0027ve tried other approaches, including custom JSON converters, without success. Is there a plan to improve Minimal API model binding to match the behavior of MVC Model Binder?\r\n\r\nIf anyone\u0027s interested, here\u0027s my Axios interceptor:\r\n\r\n\u0060\u0060\u0060js\r\nconst $http = axios.create({\r\n    baseURL: \u0027/your-endpoint\u0027\r\n}); \r\n\r\nfunction cleanObject(obj) {\r\n    for (let propName in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, propName)) {\r\n            if (obj[propName] === null || obj[propName] === undefined || obj[propName] === \u0027\u0027) {\r\n                delete obj[propName];\r\n            }\r\n        }\r\n    }\r\n    return obj;\r\n}\r\n\r\n$http.interceptors.request.use((req) =\u003E {\r\n    if (req.data) req.data = cleanObject(req.data);\r\n    if (req.params) req.params = cleanObject(req.params);\r\n    return req;\r\n});\r\n\u0060\u0060\u0060",
        "createdAt": "2024-08-06T21:10:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55202#issuecomment-2272158661"
      },
      {
        "id": "IC_kwDOAQzde86Hbmo0",
        "parentId": null,
        "author": "dcernach",
        "content": "\u003E The form binding behavior that minimal APIs uses is shared with Blazor. I\u0027m open to changing this behavior to be more inline with how empty strings are handled elsewhere in minimal APIs (and in forms in MVC).\r\n\u003E \r\n\u003E @javiercn Any objections to modifying the form binding behavior for empty strings here?\r\n\r\nPlease do it :)",
        "createdAt": "2024-08-06T21:11:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55202#issuecomment-2272160308"
      },
      {
        "id": "IC_kwDOAQzde86NsHhh",
        "parentId": null,
        "author": "SebastianToet",
        "content": "This is still a big issue in Blazor SSR in the current .NET 9 preview: When a [SupplyParameterFromForm] model contains a nullable int (or double, etc.), an empty input value results in a form-binding validation error (and not in a null value without an error, as you would expect).",
        "createdAt": "2024-09-26T14:33:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55202#issuecomment-2377152609"
      },
      {
        "id": "IC_kwDOAQzde86Wf6UF",
        "parentId": null,
        "author": "xxnickles",
        "content": "Unfortunatelly it seems few people are using minimal api and form binding as this issue is not getting traction. I just found out this behavior also impacts nullable enumeration bidding, which fails with the same error. I will assume the workaround is going to be not include the fields from the front end, but the behavior should match other areas of aspnet, in concrete I am talking about SupplyParameterFromForm from Blazor SSR, which this scenario works fine (at least with enumerations)",
        "createdAt": "2024-12-07T05:36:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55202#issuecomment-2524947717"
      },
      {
        "id": "IC_kwDOAQzde86aSQls",
        "parentId": null,
        "author": "jamie-nzfunds",
        "content": "Just ran into this issue too.  It would be great to have a fix for this.",
        "createdAt": "2025-01-13T23:58:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55202#issuecomment-2588477804"
      },
      {
        "id": "IC_kwDOAQzde86aSSCD",
        "parentId": null,
        "author": "captainsafia",
        "content": "There\u0027s been some recent action on a PR to fix this over at https://github.com/dotnet/aspnetcore/pull/52499.",
        "createdAt": "2025-01-14T00:12:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55202#issuecomment-2588483715"
      },
      {
        "id": "IC_kwDOAQzde86bXxR4",
        "parentId": null,
        "author": "ndjonbor",
        "content": "@captainsafia The PR you referenced seems to be specific to binding from forms. Are there any plans on the similar issue when binding from queries? I\u0027m facing the same problem as mentioned by dimenus:\n\n\u003E [@captainsafia](https://github.com/captainsafia) I have this same issue with \u0060[FromQuery]\u0060 as well with e.g. \u0060Nullable\u003Clong\u003E\u0060. It works just fine when the parameter is omitted, but if the clients sends the query parameter with an empty value, the validation fails.\n\u003E \n\u003E \u0060curl \u0027http://localhost:5209/proui/field?uiCodeTypeId=\u0027\u0060\n\u003E \n\u003E \u0060\u0060\u0060\n\u003E Microsoft.AspNetCore.Http.BadHttpRequestException: Failed to bind parameter \u0022Nullable\u003Clong\u003E uiCodeTypeId\u0022 from \u0022\u0022.\n\u003E    at lambda_method34(Closure, Object, HttpContext)\n\u003E    at Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware.Invoke(HttpContext context)\n\u003E    at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\n\u003E    at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\n\u003E    at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\n\u003E    at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\n\u003E    at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\n\u003E \u0060\u0060\u0060\n\nIn my case the parameter is a strongly typed ID which implements IParsable, and the parameter is nullable. I\u0027ve had no luck with handling this particular scenario\n",
        "createdAt": "2025-01-22T09:23:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55202#issuecomment-2606699640"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86HFtYm",
    "title": "System.InvalidOperationException: This request does not have a Content-Type header. Forms are available from requests with bodies like POSTs and a form Content-Type of either application/x-www-form-urlencoded or multipart/form-data",
    "url": "https://github.com/dotnet/aspnetcore/issues/55387",
    "createdAt": "2024-04-26T19:55:24Z",
    "lastUpdated": "2024-08-01T15:35:30Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nA minimal API post endpoint, that awaits form data generates 500 if the client sends a request to it with no form data\n\n### Expected Behavior\n\nAPI should return 400?\n\n### Steps To Reproduce\n\nhttps://github.com/BusHero/BugWithMinimalApi\n\n### Exceptions (if any)\n\n\u0060\u0060\u0060\r\nSystem.InvalidOperationException: This request does not have a Content-Type header. Forms are available from requests with bodies like POSTs and a form Content-Type of either application/x-www-form-urlencoded or multipart/form-data.\r\n         at Microsoft.AspNetCore.Http.Features.FormFeature.ReadForm()\r\n         at lambda_method1(Closure, Object, HttpContext, Object)\r\n         at Microsoft.AspNetCore.Http.RequestDelegateFactory.\u003C\u003Ec__DisplayClass104_2.\u003C\u003CHandleRequestBodyAndCompileRequestDelegateForForm\u003Eb__2\u003Ed.MoveNext()\r\n      --- End of stack trace from previous location ---\r\n         at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\r\n\u0060\u0060\u0060\n\n### .NET Version\n\n8.0\n\n### Anything else?\n\n\u0060\u0060\u0060\r\n\u003E dotnet --info\r\n.NET SDK:\r\n Version:           8.0.204\r\n Commit:            c338c7548c\r\n Workload version:  8.0.200-manifests.9f663350\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22635\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.204\\\r\n\r\n.NET workloads installed:\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      8.0.4\r\n  Architecture: x64\r\n  Commit:       2d7eea2529\r\n\r\n.NET SDKs installed:\r\n  8.0.204 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 8.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.29 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.29 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n\u0060\u0060\u0060",
    "upvotes": 1,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde858VgrH",
        "parentId": null,
        "author": "captainsafia",
        "content": "@BusHero Thanks for reporting this issue!\r\n\r\nThe exception that you\u0027re seeing comes from lower in the ASP.NET Core stack in the \u0060FormFeature\u0060 when we eagerly attempt to read from the form body if we encounter a parameter that should bind from it.\r\n\r\nWe\u0027ve made some changes to the form binding behavior in .NET 9 and I\u0027m not able to repro the issue there. Can yo confirm the same using a 9.0-preview?\r\n\r\nI\u0027ll put this in the backlog to gather signal on whether this is worth backporting.",
        "createdAt": "2024-04-30T17:03:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55387#issuecomment-2086013639"
      },
      {
        "id": "IC_kwDOAQzde858WGny",
        "parentId": null,
        "author": "BusHero",
        "content": "Hi @captainsafia. I can confirm that the issue is not reproducible using 9.0-preview. ",
        "createdAt": "2024-04-30T17:34:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55387#issuecomment-2086169074"
      },
      {
        "id": "IC_kwDOAQzde86GPmPd",
        "parentId": null,
        "author": "Ganesh-Ponipireddy",
        "content": "Hi @captainsafia \r\nIs there a fix planned to provided in the dotnet 8.x version as well?",
        "createdAt": "2024-07-26T08:28:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55387#issuecomment-2252235741"
      },
      {
        "id": "IC_kwDOAQzde86Gzheo",
        "parentId": null,
        "author": "captainsafia",
        "content": "@Ganesh-Ponipireddy We don\u0027t plan on backporting this to 8.x at the moment. Are you running into this issue currently? If so, I can share a workaround that might help.",
        "createdAt": "2024-07-31T23:28:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55387#issuecomment-2261653416"
      },
      {
        "id": "IC_kwDOAQzde86G3Y3A",
        "parentId": null,
        "author": "Ganesh-Ponipireddy",
        "content": "\u003E @Ganesh-Ponipireddy We don\u0027t plan on backporting this to 8.x at the moment. Are you running into this issue currently? If so, I can share a workaround that might help.\r\n\r\n@captainsafia Thanks for your reply. Yes, I\u0027m facing this issue in my environment. Please provide the workaround and that will help us.",
        "createdAt": "2024-08-01T10:11:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55387#issuecomment-2262666688"
      },
      {
        "id": "IC_kwDOAQzde86G6FY2",
        "parentId": null,
        "author": "captainsafia",
        "content": "@Ganesh-Ponipireddy Here\u0027s an example of an approach you can use by taking advantage of the fact that the content-type check that throws the exception is skipped if the \u0060Form\u0060 is explicitly set. You\u0027ll want to apply the workaround only for the request paths that bind from a form and don\u0027t have any content.\r\n\r\n\u0060\u0060\u0060csharp\r\nusing Microsoft.AspNetCore.Mvc;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nvar app = builder.Build();\r\n\r\napp.Use((context, next) =\u003E\r\n{\r\n    // Only apply workarounds to routes that take form arguments.\r\n    if (context.Request.Path == \u0022/\u0022 \u0026\u0026 context.Request.ContentLength == 0)\r\n    {\r\n        context.Request.Form = new FormCollection(new());\r\n    }\r\n    return next(context);\r\n});\r\n\r\napp.MapPost(\u0022/\u0022, ([FromForm] string id) =\u003E Results.Ok(id))\r\n    .DisableAntiforgery();\r\n\r\napp.Run();\r\n\u0060\u0060\u0060",
        "createdAt": "2024-08-01T15:35:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55387#issuecomment-2263373366"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86H3d2O",
    "title": "Introduce generic \u0060JsonResult\u003CT\u003E\u0060",
    "url": "https://github.com/dotnet/aspnetcore/issues/55535",
    "createdAt": "2024-05-05T10:47:37Z",
    "lastUpdated": "2024-08-22T16:21:01Z",
    "body": "## Background and Motivation\r\n\r\nCurrently in \u0060System.Text.Json\u0060 we have \u0060JsonSerializer.Serialize\u003CT\u003E(...)\u0060 that serializes an object \u0022as T\u0022. Which means, if we cast an object to some base class, or to an interface - the serializer will use _that_ exact casted type\u0027s properties etc..\r\n\r\nHOWEVER the AspNetCore \u0060JsonResult\u0060 works differently. When it serializes an object, it always takes the object\u0027s hard type. See the source here: https://source.dot.net/#Microsoft.AspNetCore.Mvc.Core/Infrastructure/SystemTextJsonResultExecutor.cs,61 which means that even if we cast the object to something - nah, it does not care, it just uses the actual type.\r\n\r\nAs a workaround, people either use \u0060JsonSerializer.Serialize\u003CT\u003E\u0060 to serialize to intermediate string and then return content (not optimal since it buffers everything into a huge string before sending to the client). Or - people write their own \u0060JsonResult\u003CT\u003E\u0060 that handles this (tat\u0027s what I did)\r\n\r\n## Proposed API\r\n\r\nDisclaimer: this is just the code I use as a workaround, it\u0027s very simple, and misses stuff, but just to give the idea...\r\n\r\n\u0060\u0060\u0060c#\r\n/// \u003Csummary\u003E\r\n/// Serializes to output stream\r\n/// Almost same as .NET built-in json result but allows specifying a type\r\n/// \u003C/summary\u003E\r\npublic class JsonResult\u003CT\u003E : IActionResult\r\n{\r\n\tprivate readonly T _value;\r\n\tprivate readonly JsonSerializerOptions _options;\r\n\r\n\tpublic JsonResult(T value, JsonSerializerOptions options)\r\n\t{\r\n\t\t_value = value;\r\n\t\t_options = options;\r\n\t}\r\n\r\n\tpublic async Task ExecuteResultAsync(ActionContext context)\r\n\t{\r\n\t\tvar response = context.HttpContext.Response;\r\n\t\tresponse.ContentType = \u0022application/json\u0022;\r\n\r\n\t\tawait JsonSerializer.SerializeAsync\u003CT\u003E(response.Body, _value, _options); //serialize to response stream\r\n\t\tawait response.Body.FlushAsync();\r\n\t}\r\n}\r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\n\u0060\u0060\u0060csharp\r\npublic IActionResult Get()\r\n{\r\n\treturn new JsonResult\u003CT\u003E(someData, _someSerializerOptionsField);\r\n}\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\n\r\nAnother option would e to somehow pass the \u0060type\u0060 to existing \u0060JsonResult\u0060\r\n\r\n\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "api-suggestion",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85825rT",
        "parentId": null,
        "author": "martincostello",
        "content": "Given that MVC supports \u0060IResult\u0060 now (#40639), would using the existing [\u0060TypedResults.Json\u003CT\u003E()\u0060](https://github.com/dotnet/aspnetcore/blob/b0578d0e0e4c69d2f3bc2e441e3c2b284f7e014d/src/Http/Http.Results/src/TypedResults.cs#L199) method solve this use case without introducing any new APIs?",
        "createdAt": "2024-05-05T11:24:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55535#issuecomment-2094766803"
      },
      {
        "id": "IC_kwDOAQzde8583KGr",
        "parentId": null,
        "author": "alex-jitbit",
        "content": "@martincostello wow, at first glance this looks exactly like a solution. Thanks. This is planned for .NET 9 correct?",
        "createdAt": "2024-05-05T14:36:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55535#issuecomment-2094834091"
      },
      {
        "id": "IC_kwDOAQzde8583KxU",
        "parentId": null,
        "author": "martincostello",
        "content": "It was added in .NET 7.",
        "createdAt": "2024-05-05T14:44:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55535#issuecomment-2094836820"
      },
      {
        "id": "IC_kwDOAQzde8583Nch",
        "parentId": null,
        "author": "alex-jitbit",
        "content": "@martincostello unfortunately \u0060TypedResults.Json\u0060 suffers from the same problem - it does not care about casting. It just uses \u0060GetType()\u0060. See here https://source.dot.net/#Microsoft.AspNetCore.Http.Results/HttpResultsHelper.cs,41\r\n\r\nFor example if I pass \u0060myCollection.Cast\u003CILightWeightInterfaceThatHidesSomeProperties\u003E\u0060 to it - it just takes the underlying type, ignoreing the \u0060Cast\u0060",
        "createdAt": "2024-05-05T15:17:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55535#issuecomment-2094847777"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86I4Gec",
    "title": "minimal api-- FromQuery problem for complex object",
    "url": "https://github.com/dotnet/aspnetcore/issues/55719",
    "createdAt": "2024-05-14T21:00:43Z",
    "lastUpdated": "2024-05-16T11:41:45Z",
    "body": "## Background and Motivation\r\nwhen i use web api (mvc) \r\n\u0060\u0060\u0060\r\npublic class ShoppingCartController : Controller\r\n{    \r\n    [HttpGet]\r\n    [Route(\u0022estimate/{sku}/{shoppingCartId?}\u0022)]\r\n    public async Task\u003CActionResult\u003CShoppingCartLineViewModelVM\u003E\u003E EstimateProductAsync(\r\n            string sku,\r\n            string? shoppingCartId,\r\n            [FromQuery] Address? shipping,\r\n            [FromQuery] Address? billing\r\n        )\r\n        )\r\n\u0060\u0060\u0060\r\neverything is working as expected.\r\n=========\r\n\r\nbut when i use minimal api, got exception \r\n\u0060\u0060\u0060\r\n  public static IEndpointRouteBuilder AddEstimateProductAsyncEndpoint(this \u0060\u0060\u0060\r\nIEndpointRouteBuilder builder)\r\n    {\r\n        builder.MapGet(\u0022api/ShoppingCart/EstimateProduct/{sku}/{shoppingCartId}\u0022, EstimateProductAsync)\r\n            .AllowAnonymous()\r\n            .DisableAntiforgery();\r\n        return builder;\r\n    }   \r\n    private static async Task\u003CIResult\u003E EstimateProductAsync(\r\n        string sku,\r\n        string? shoppingCartId,\r\n        [FromQuery] Address? shipping,\r\n        [FromQuery] Address? billing     \r\n        )\r\n\u0060\u0060\u0060\r\n    which indicated both  [FromQuery] Address? shipping,\r\n        [FromQuery] Address? billing   are UNKNOWN AND SHOULD HAVE TryParce method\r\n## Proposed API\r\nminimal api should be better than mvc api , at least the same\r\n\r\n\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "Needs: Attention :wave:",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde8595u_-",
        "parentId": null,
        "author": "gfoidl",
        "content": "@infofromca please give a minimal repro sample.\r\nOr at least show what exception you get, and how \u0060Address\u0060 is defined. Otherwise this issue isn\u0027t actionable, we know too little of the problem.",
        "createdAt": "2024-05-15T11:32:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55719#issuecomment-2112286718"
      },
      {
        "id": "IC_kwDOAQzde859_9KM",
        "parentId": null,
        "author": "infofromca",
        "content": "![\u5C4F\u5E55\u622A\u56FE 2024-05-15 223935](https://github.com/dotnet/aspnetcore/assets/297675/76efa391-ce32-4428-b4a2-dcfaf69d8551)\r\n![\u5C4F\u5E55\u622A\u56FE 2024-05-15 224116](https://github.com/dotnet/aspnetcore/assets/297675/d071cff1-1c80-48b4-b8d3-7573115cbfdb)\r\n\u0060\u0060\u0060\r\n public static IEndpointRouteBuilder AddEstimateProductAsyncEndpoint(this IEndpointRouteBuilder builder)\r\n {\r\n     builder.MapGet(\u0022api/ShoppingCart/Address/{sku}/{shoppingCartId}\u0022, EstimateAsync)\r\n         .AllowAnonymous()\r\n         .DisableAntiforgery();\r\n\r\n     return builder;\r\n }\r\n\r\n [Microsoft.AspNetCore.Authorization.Authorize(AuthenticationSchemes = \u0022Api\u0022)]\r\n private static async Task\u003CIResult\u003E EstimateAsync(\r\n     string sku,\r\n     string? shoppingCartId,\r\n     [FromQuery] Address? shipping,\r\n     [FromQuery] Address? billing,\r\n     IAuthorizationService authorizationService,\r\n     HttpContext httpContext,\r\n     IShoppingCartHelpers shoppingCartHelpers\r\n     )\r\n {\r\n\u0060\u0060\u0060\r\n\u0060\u0060\u0060\r\npublic class Address\r\n{\r\n    private string DebuggerDisplay =\u003E $\u0022{Name}, {StreetAddress1}, {City}\u0022;\r\n\r\n    public string Name { get; set; }\r\n\r\n    public string Department { get; set; }\r\n\r\n    public string Company { get; set; }\r\n\r\n    public string StreetAddress1 { get; set; }\r\n\r\n    public string StreetAddress2 { get; set; }\r\n\r\n    public string City { get; set; }\r\n\r\n    public string Province { get; set; }\r\n\r\n    public string PostalCode { get; set; }\r\n\r\n    public string Region { get; set; }\r\n\r\n    /// \u003Csummary\u003E\r\n    /// Gets a collection of name metadata. Some typical keys can be found in \u003Csee cref=\u0022CommonNameParts\u0022/\u003E.\r\n    /// \u003C/summary\u003E\r\n    public IDictionary\u003Cstring, string\u003E NameParts { get; } = new Dictionary\u003Cstring, string\u003E();\r\n\r\n    /// \u003Csummary\u003E\r\n    /// Gets a collection of other address metadata not related to names.\r\n    /// \u003C/summary\u003E\r\n    public IDictionary\u003Cstring, string\u003E AdditionalFields { get; } = new Dictionary\u003Cstring, string\u003E();\r\n}\r\n\u0060\u0060\u0060\r\nplease be notified that the exception did not happen at calling the API, it happened when run the site at the beginning (home page) , I do not think it matters with Address , it matters with any complex class with FromQuery, which do not have : shipping must have a valid TryParse method to support converting from a string , this is also shown on your document. but here Address is just for passing data. **it is very very very strange for Address to implement TryParse method!!!**\r\nMy guess why you need TryParse is because you use System.Text.Json internally. but could you implement a default stuff to deal with this TryParse in at least common situation?  you can see the above Address is not very complex actually.  Finally, Remember Address is just for data transfer on internet.",
        "createdAt": "2024-05-16T02:51:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55719#issuecomment-2113917580"
      },
      {
        "id": "IC_kwDOAQzde85-CUmG",
        "parentId": null,
        "author": "gfoidl",
        "content": "\u003E it is very very very strange for Address to implement TryParse method!!!\r\n\r\nWhen you try to get \u0060Address\u0060 from the query, that method is needed and totally makes sense.\r\nSuch an object like \u0060Address\u0060 is typically passed in the body as JSON -- there no TryParse method is needed as the default JSON de-serialization kicks in.\r\n\r\nWhy do you need to have \u0060Address\u0060 from the query?\r\nAlso keep in mind that the query may get very long, and may expose private data, which is better suited to the request body.",
        "createdAt": "2024-05-16T08:46:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55719#issuecomment-2114537862"
      },
      {
        "id": "IC_kwDOAQzde85-D8al",
        "parentId": null,
        "author": "infofromca",
        "content": "\u003E When you try to get \u0060Address\u0060 from the query, that method is needed and totally makes sense. Such an object like \u0060Address\u0060 is typically passed in the body as JSON -- there no TryParse method is needed as the default JSON de-serialization kicks in.\r\n\u003E \r\nwhy i do not need anything you said on mvc (web api), and it is concise:\r\npublic class ShoppingCartController : Controller\r\n{    \r\n    [HttpGet]\r\n    [Route(\u0022estimate/{sku}/{shoppingCartId?}\u0022)]\r\n    public async Task\u003CActionResult\u003CShoppingCartLineViewModelVM\u003E\u003E EstimateProductAsync(\r\n            string sku,\r\n            string? shoppingCartId,\r\n            [FromQuery] Address? shipping,\r\n            [FromQuery] Address? billing\r\n        )\r\n        )\r\npay attention there is no  TryParse method  in Address. and it is the same logic",
        "createdAt": "2024-05-16T11:22:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55719#issuecomment-2114963109"
      },
      {
        "id": "IC_kwDOAQzde85-D-TM",
        "parentId": null,
        "author": "infofromca",
        "content": "\u003E Why do you need to have \u0060Address\u0060 from the query? Also keep in mind that the query may get very long, and may expose \u003Eprivate data, which is better suited to the request body.\r\n\u003E\r\nThis is another topic, i think.\r\nfor  keep in mind that the query may get very long, can you implement  something like mvc first by default , then let dev to decide if they need tryParse to make it short\r\n\r\n\r\n",
        "createdAt": "2024-05-16T11:26:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55719#issuecomment-2114970828"
      },
      {
        "id": "IC_kwDOAQzde85-D_KN",
        "parentId": null,
        "author": "martincostello",
        "content": "MVC has lots more built-in behaviour for binding that Minimal APIs intentionally tries to omit, as they often use reflection and aren\u0027t AoT friendly. 1-to-1 feature parity between the two frameworks isn\u0027t a goal.\r\n",
        "createdAt": "2024-05-16T11:28:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55719#issuecomment-2114974349"
      },
      {
        "id": "IC_kwDOAQzde85-EB4P",
        "parentId": null,
        "author": "infofromca",
        "content": "\u003E MVC has lots more built-in behaviour for binding that Minimal APIs intentionally tries to omit, as they often use reflection and aren\u0027t AoT friendly. 1-to-1 feature parity between the two frameworks isn\u0027t a goal.\r\n\r\nso , why microsoft do not want to make progress, but regress. \r\nand i guess here it is not reflection directly, it is STJ, even if reflection  is  a problem, you should think other way.....",
        "createdAt": "2024-05-16T11:34:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55719#issuecomment-2114985487"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86JGyvA",
    "title": "Expose a \u0060TypedResults\u0060 method to push a partial response",
    "url": "https://github.com/dotnet/aspnetcore/issues/55753",
    "createdAt": "2024-05-16T12:22:57Z",
    "lastUpdated": "2024-09-30T19:53:58Z",
    "body": "## Background and Motivation\r\n\r\nIn a project I am developing I have the need to accept ranged requests and provide the client with partial responses (206).\r\nThe data for these responses is managed in a chunk-based store which is somewhat awkward to wrap in a \u0060Stream\u0060.\r\nFor full responses, the \u0060PushStreamHttpResult\u0060 is ideal, but it currently does not support partial requests.\r\nIt is quite straightforward to implement an \u0060IResult\u0060 that does what I need, but it looks like I would need to re-implement \u0060HttpResultsHelper.WriteResultAsFileCore\u0060 as it is an \u0060internal\u0060 method.\r\n\r\n## Proposed API\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.Http;\r\n\r\npublic static class TypedResults\r\n{\r\n\u002B    /// \u003Csummary\u003E\r\n\u002B    /// Allows writing directly to the response body.\r\n\u002B    /// \u003Cpara\u003E\r\n\u002B    /// This supports range requests (\u003Csee cref=\u0022StatusCodes.Status206PartialContent\u0022/\u003E or\r\n\u002B    /// \u003Csee cref=\u0022StatusCodes.Status416RangeNotSatisfiable\u0022/\u003E if the range is not satisfiable).\r\n\u002B    /// \u003C/para\u003E\r\n\u002B    /// \u003C/summary\u003E\r\n\u002B    /// \u003Cparam name=\u0022callback\u0022\u003EThe callback that allows users to write directly to the HTTP response.\u003C/param\u003E\r\n\u002B    /// \u003Cparam name=\u0022fileLength\u0022\u003EThe total length of the file.\u003C/param\u003E\r\n\u002B    /// \u003Cparam name=\u0022contentType\u0022\u003EThe \u003Cc\u003EContent-Type\u003C/c\u003E of the response. Defaults to \u003Cc\u003Eapplication/octet-stream\u003C/c\u003E.\u003C/param\u003E\r\n\u002B    /// \u003Cparam name=\u0022fileDownloadName\u0022\u003EThe the file name to be used in the \u003Cc\u003EContent-Disposition\u003C/c\u003E header.\u003C/param\u003E\r\n\u002B    /// \u003Cparam name=\u0022lastModified\u0022\u003EThe \u003Csee cref=\u0022DateTimeOffset\u0022/\u003E of when the file was last modified.\r\n\u002B    /// Used to configure the \u003Cc\u003ELast-Modified\u003C/c\u003E response header and perform conditional range requests.\u003C/param\u003E\r\n\u002B    /// \u003Cparam name=\u0022entityTag\u0022\u003EThe \u003Csee cref=\u0022EntityTagHeaderValue\u0022/\u003E to be configure the \u003Cc\u003EETag\u003C/c\u003E response header\r\n\u002B    /// and perform conditional requests.\u003C/param\u003E\r\n\u002B    /// \u003Cparam name=\u0022enableRangeProcessing\u0022\u003ESet to \u003Cc\u003Etrue\u003C/c\u003E to enable range requests processing.\u003C/param\u003E\r\n\u002B    /// \u003Creturns\u003EThe created \u003Csee cref=\u0022PushStreamHttpResult\u0022/\u003E for the response.\u003C/returns\u003E\r\n\u002B    public static PushStreamHttpResult Stream(\r\n\u002B        Func\u003CRangeItemHeaderValue?, HttpContext, Task\u003E callback,\r\n\u002B        long? fileLength = null,\r\n\u002B        string? contentType = null,\r\n\u002B        string? fileDownloadName = null,\r\n\u002B        DateTimeOffset? lastModified = null,\r\n\u002B        EntityTagHeaderValue? entityTag = null,\r\n\u002B        bool enableRangeProcessing = false);\r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\n\u0060\u0060\u0060csharp\r\n// respond with a stream representing the selected part of a resource\r\n// this avoids moving around any useless data\r\napp.MapGet(\u0022/example1/{key}\u0022, async (string key, IStore store) =\u003E\r\n    TypedResults.Stream(\r\n        async (range, httpContext) =\u003E {\r\n            using var stream = range is null\r\n                ? await store.GetContent(key)\r\n                : await store.GetPartialContent(key, range);\r\n\r\n            await StreamCopyOperation.CopyToAsync(stream, httpContext.Response.Body, count: null, bufferSize: 64 * 1024, cancel: httpContext.RequestAborted);\r\n        },\r\n        fileLength: await store.GetSize(key)\r\n    );\r\n\r\n// respond with chunks representing the selected part of a resource\r\n// the chunks might be \u0022wasting\u0022 (in this case they have a fixed size),\r\n// but they might come from a local memory cache\r\napp.MapGet(\u0022/example2/{key}\u0022, async (string key, IChunkStore store) =\u003E {\r\n    var size = await store.GetSize(key);\r\n    return TypedResults.Stream(\r\n        async (range, httpContext) =\u003E\r\n        {\r\n            var chunkSize = store.GetChunkSize();\r\n            var to = (range?.To \u002B 1) ?? size;\r\n            var start = range?.From ?? (size - to);\r\n            var end = range?.From is null ? size : to;\r\n\r\n            while (start \u003C end)\r\n            {\r\n                var chunk = await store.GetChunk(start / chunkSize);\r\n                var slice = chunk.AsMemory().Slice(\r\n                    (int)(start % chunkSize),\r\n                    (int)Math.Min(chunkSize, end - start)\r\n                );\r\n                await httpContext.Response.Body.WriteAsync(slice);\r\n                start \u002B= slice.Length;\r\n            }\r\n        },\r\n        fileLength: size,\r\n    )\r\n});\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\n\r\nThe proposed API exposes the range information as \u0060RangeItemHeaderValue?\u0060.\r\nThere are several alternatives to represent the range; this type was proposed based on what is used internally/emitted by \u0060HttpResultsHelper.WriteResultAsFileCore\u0060.\r\n\r\nThe proposed API returns a \u0060PushStreamHttpResult\u0060, under the assumption that the same class can be used for both methods implementing responses-pushing-to-body.\r\nThis would involve changes to \u0060PushStreamHttpResult\u0060; another approach would be to write a separate \u0060IResult\u0060 implementation in \u0060Microsoft.AspNetCore.Http.HttpResults\u0060.\r\n\r\nAs mentioned in the background, it is possible to develop an independent \u0060IResult\u0060 implementation; this requires duplicating the functionality implemented in \u0060HttpResultsHelper.WriteResultAsFileCore\u0060.\r\n\r\nAnother option is to wrap this as a \u0060Stream\u0060 and use the \u0060TypedResults.Stream(Stream stream, ...)\u0060 overload, but this is inconvenient for two reasons:\r\n - this makes push-based operations harder to express (which I believe is the reason for the existence of \u0060TypedResults.Stream(Func\u003CStream, Task\u003E stream, ...)\u0060)\r\n - the async creation \r\n\r\nSee https://gist.github.com/ranma42/a528555972f16c17ed1b840bfe7fbf5c for an example of the stream hack.\r\n\r\n## Risks\r\n\r\nThe API should be an extension of the existing API and AFAICT involves no breaking change.\r\n\r\nI have experimented locally with an implementation that extends \u0060PushStreamHttpResult\u0060; in order to reuse the same class, some minor changes are needed that should not result in performance regressions.\r\nA straightforward implementation would simply replace the callback with a \u0060Func\u003CRangeItemHeaderValue?, HttpContext, Task\u003E\u0060 and wrap the \u0060Func\u003CStream, Task\u003E streamWriterCallback\u0060 as \u0060(range, httpContext) =\u003E streamWriterCallback(httpContext.Response.Body)\u0060.\r\n",
    "upvotes": 0,
    "labels": [
      "api-needs-work",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85-R9Yu",
        "parentId": null,
        "author": "ranma42",
        "content": "I pushed my experiment as https://github.com/ranma42/aspnetcore/tree/partial-push-stream",
        "createdAt": "2024-05-18T04:38:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55753#issuecomment-2118637102"
      },
      {
        "id": "IC_kwDOAQzde86Ae7eu",
        "parentId": null,
        "author": "ranma42",
        "content": "I see that the range has probably been intentionally omitted. https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1020858817 mentions that it could be implemented manually, but I did not find any straightforward way to do that (without re-implementing the whole range computation machinery). Maybe it would be an interesting example to add in the docs.",
        "createdAt": "2024-06-07T21:35:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55753#issuecomment-2155591598"
      },
      {
        "id": "IC_kwDOAQzde86CYs20",
        "parentId": null,
        "author": "dotnet-policy-service",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.\n\u003C!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003E",
        "createdAt": "2024-06-24T22:25:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55753#issuecomment-2187513268"
      },
      {
        "id": "IC_kwDOAQzde86L6UYa",
        "parentId": null,
        "author": "halter73",
        "content": "Is there a particular reason you specified \u0060HttpContext\u0060 instead of \u0060Stream\u0060 as a parameter for the function? If you really need something else from the \u0060HttpContext\u0060, you\u0027re free to add it as a parameter to your handler. I think a \u0060Stream\u0060 parameter makes more sense considering the other overload.\r\n\r\nIf we do this, we\u0027d want to add the same overload to the untyped \u0060Results\u0060 class too. However, once you start dealing with something as complex as manually interpreting the \u0060RangeItemHeaderValue\u0060, I wonder if you\u0027re better off operating on the \u0060HttpContext\u0060 directly rather than returning an \u0060IResult\u0060. You should be able to get the \u0060RangeItemHeaderValue\u0060 yourself pretty easily using [RangeHeaderValue.TryParse](https://learn.microsoft.com/en-us/dotnet/api/microsoft.net.http.headers.rangeheadervalue.tryparse?view=aspnetcore-8.0).\r\n\r\nAnother concern is overloading based on \u0060Func\u0060 arity. If we add this, it would be the only overload of \u0060TypeResults.Stream\u0060 that can take a \u0060Func\u0060 of two arguments as the first parameter without making a source breaking change. It wouldn\u0027t matter if the \u0060Func\u0060 argument types are different because the types are often inferred for lambdas.",
        "createdAt": "2024-09-12T22:00:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55753#issuecomment-2347320858"
      },
      {
        "id": "IC_kwDOAQzde86L9go3",
        "parentId": null,
        "author": "ranma42",
        "content": "\u003E Is there a particular reason you specified \u0060HttpContext\u0060 instead of \u0060Stream\u0060 as a parameter for the function? If you really need something else from the \u0060HttpContext\u0060, you\u0027re free to add it as a parameter to your handler. I think a \u0060Stream\u0060 parameter makes more sense considering the other overload.\r\n\r\nI agree, the body \u0060Stream\u0060 would work just fine as parameter; should I update the proposal above?\r\n\r\n\u003E If we do this, we\u0027d want to add the same overload to the untyped \u0060Results\u0060 class too.\r\n\r\nYup, I did that in the experiment I mentioned here https://github.com/dotnet/aspnetcore/issues/55753#issuecomment-2118637102\r\nIf desired, I can add it to the proposal (it is basically going to have the very same signature, except for the return type... which I just noticed I forgot to set to \u0060IResult\u0060 in my experiment \uD83D\uDE05 ).\r\n\r\n\u003E However, once you start dealing with something as complex as manually interpreting the \u0060RangeItemHeaderValue\u0060, I wonder if you\u0027re better off operating on the \u0060HttpContext\u0060 directly rather than returning an \u0060IResult\u0060. You should be able to get the \u0060RangeItemHeaderValue\u0060 yourself pretty easily using [RangeHeaderValue.TryParse](https://learn.microsoft.com/en-us/dotnet/api/system.net.http.headers.rangeheadervalue.tryparse?view=net-8.0).\r\n\r\nThe non-trivial part that this (and other \u0060IResult\u0060 implementations) takes care of is actually the \u0060HttpResultsHelper.WriteResultAsFileCore\u0060 part, which is currently not exposed and performs a non-trivial amount of work around the response headers (including shortcuts to 304 (NotModified), 412 (PreconditionFailed), processing of \u0060If-Range\u0060 and range normalization).\r\nEven discounting that, a manual implementation would most likely have to at least re-implement the logic in \u0060Microsoft.AspNetCore.Internal.RangeHelper\u0060, which is internal.\r\n\r\n\u003E Another concern is overloading based on \u0060Func\u0060 arity. If we add this, it would be the only overload of \u0060TypeResults.Stream\u0060 that can take a \u0060Func\u0060 of two arguments as the first parameter without making a source breaking change. It wouldn\u0027t matter if the \u0060Func\u0060 argument types are different because the types are often inferred for lambdas.\r\n\r\nI am not sure I understand the concern. IIUC this is not going to be a breaking change and the function arity difference should avoid issues with type inference \uD83E\uDD14 \r\nDo you think it would be better to name the method differently (example: \u0060PartialStream\u0060, \u0060RangeStream\u0060, ...) to completely avoid adding this as an overload?",
        "createdAt": "2024-09-13T06:46:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55753#issuecomment-2348157495"
      },
      {
        "id": "IC_kwDOAQzde86OGW66",
        "parentId": null,
        "author": "halter73",
        "content": "API Review Notes:\r\n\r\n- \u003E Do you think it would be better to name the method differently (example: \u0060PartialStream\u0060, \u0060RangeStream\u0060, ...) to completely avoid adding this as an overload?\r\n  - We\u0027re weary about adding new \u0060Stream\u0060 overloads. Too many overloads can create unnecessary confusion for the common case in order to support a niche use case. So far, we\u0027ve only seen one person asking for this feature.\r\n  - Renaming to \u0060PartialStream\u0060 or \u0060RangeStream\u0060 would help. It would make it a little clearer that everything written to the \u0060Stream\u0060 would be used and there wouldn\u0027t be any built-in logic to skip over any data written that isn\u0027t part of the range unlike the current \u0060Stream\u0060 overload that takes a seekable Stream directly.\r\n  - However, even with a different name, we aren\u0027t sure if this use case is common enough to warrant a method on \u0060Results\u0060/\u0060TypedResults\u0060.\r\n\r\n- \u0060enableRangeProcessing = false\u0060 doesn\u0027t make much sense. Shouldn\u0027t \u0060enableRangeProcessing\u0060 always be true if the func takes a \u0060RangeItemHeaderValue\u0060?\r\n\r\n- \u0060PipeWriter\u0060 would probably be more efficient than \u0060Stream\u0060 as an argument, but we\u0027ve avoided overloads for both to [avoid ambiguity](https://github.com/dotnet/aspnetcore/issues/39383#issuecomment-1020858817). Do we want to make this problem worse by introducing event more \u0060Results\u0060 methods that take a func with a \u0060Stream\u0060 parameter?\r\n  - The original proposal that takes an \u0060HttpContext\u0060 sidesteps this issue, but it\u0027s less consistent with the other \u0060Results\u0060 methods.\r\n\r\n- \u003E The non-trivial part that this (and other \u0060IResult\u0060 implementations) takes care of is actually the \u0060HttpResultsHelper.WriteResultAsFileCore\u0060 part, which is currently not exposed and performs a non-trivial amount of work around the response headers (including shortcuts to 304 (NotModified), 412 (PreconditionFailed), processing of \u0060If-Range\u0060 and range normalization).\r\n  - This does explain why \u0060Request.GetTypedHeaders().Range?.Ranges\u0060 is insufficient, but not why an API similar to \u0060WriteResultAsFileCore\u0060 would be insufficient. For such an advanced use case, we would rather have a static API similar to \u0060WriteResultAsFileCore\u0060 that takes an \u0060HttpContext\u0060 as a parameter, set the appropriate response headers, and returns the normalized \u0060RangeItemHeaderValue\u0060 if it\u0027s valid.\r\n  - It\u0027s not clear where it would go (\u0060PushStreamHttpResult\u0060?) or what we would call it (\u0060SetFileHeaders\u0060?).\r\n  - In the meantime (while we agree this isn\u0027t clean), your \u0060LazyStream\u0060 workaround that reads the \u0060ContentRange\u0060 response header to create a fake seekable stream seems fine. Ideally, it would verify the reader of the \u0060LazyStream\u0060 actually does seek to the beginning of the \u0060ContentRage\u0060, but I cannot imagine why it wouldn\u0027t.\r\n\r\ntl;dr: We don\u0027t like a new \u0060Results\u0060/\u0060TypedResults\u0060 method for this, because we don\u0027t think it\u0027s a common enough scenario. If there were more people asking for this, we might reconsider. In the meantime, we would consider a sufficiently out-of-the-way static helper method if we could figure out where to put it and what to call it.",
        "createdAt": "2024-09-30T19:52:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55753#issuecomment-2384031418"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86K2-aM",
    "title": "[9.0-preview.5] Confusing need to include parameters in custom JSON serializer for native AoT support with OpenAPI",
    "url": "https://github.com/dotnet/aspnetcore/issues/56021",
    "createdAt": "2024-06-02T13:49:50Z",
    "lastUpdated": "2025-01-20T12:42:46Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI was playing around with the native AoT support for the new OpenAPI feature in the .NET 9 preview.5 nightly builds (\u00609.0.100-preview.5.24281.15\u0060 specifically), and on rendering the document when debugging I got the following error:\r\n\r\n\u0060\u0060\u0060\r\nNotSupportedException: JsonTypeInfo metadata for type \u0027System.Nullable\u00601[System.Boolean]\u0027 was not provided by TypeInfoResolver of type \u0027[Microsoft.AspNetCore.OpenApi.OpenApiJsonSchemaContext, MartinCostello.Api.ApplicationJsonSerializerContext]\u0027. If using source generation, ensure that all root types passed to the serializer have been annotated with \u0027JsonSerializableAttribute\u0027, along with any types that might be serialized polymorphically.\r\n\r\nSystem.Text.Json.ThrowHelper.ThrowNotSupportedException_NoMetadataForType(Type type, IJsonTypeInfoResolver resolver)\r\nSystem.Text.Json.JsonSerializerOptions.GetTypeInfoInternal(Type type, bool ensureConfigured, Nullable\u003Cbool\u003E ensureNotNull, bool resolveIfMutable, bool fallBackToNearestAncestorType)\r\nSystem.Text.Json.JsonSerializerOptions.GetTypeInfo(Type type)\r\nJsonSchemaMapper.JsonSchemaMapper.GetJsonSchema(JsonSerializerOptions options, ParameterInfo parameterInfo, JsonSchemaMapperConfiguration configuration)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiComponentService.CreateSchema(ValueTuple\u003CType, ParameterInfo\u003E key)\r\nSystem.Collections.Concurrent.ConcurrentDictionary\u003CTKey, TValue\u003E.GetOrAdd(TKey key, Func\u003CTKey, TValue\u003E valueFactory)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiComponentService.GetOrCreateSchema(Type type, ApiParameterDescription parameterDescription)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiDocumentService.GetParameters(ApiDescription description)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOperation(ApiDescription description, HashSet\u003COpenApiTag\u003E capturedTags)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOperations(IGrouping\u003Cstring, ApiDescription\u003E descriptions, HashSet\u003COpenApiTag\u003E capturedTags)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOpenApiPaths(HashSet\u003COpenApiTag\u003E capturedTags)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOpenApiDocumentAsync(CancellationToken cancellationToken)\r\nMicrosoft.AspNetCore.Builder.OpenApiEndpointRouteBuilderExtensions\u002B\u003C\u003Ec__DisplayClass0_0\u002B\u003C\u003CMapOpenApi\u003Eb__0\u003Ed.MoveNext()\r\nMicrosoft.AspNetCore.Http.Generated.\u003CGeneratedRouteBuilderExtensions_g\u003EF56B68D2B55B5B7B373BA2E4796D897848BC0F04A969B1AF6260183E8B9E0BAF2__GeneratedRouteBuilderExtensionsCore\u002B\u003C\u003Ec__DisplayClass2_0\u002B\u003C\u003CMapGet0\u003Eg__RequestHandler|5\u003Ed.MoveNext()\r\nMicrosoft.AspNetCore.ResponseCompression.ResponseCompressionMiddleware.InvokeCore(HttpContext context)\r\nMicrosoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.Invoke(HttpContext context)\r\nMartinCostello.Api.Middleware.CustomHttpHeadersMiddleware.Invoke(HttpContext context) in CustomHttpHeadersMiddleware.cs\r\n\u0060\u0060\u0060\r\n\r\nNone of my API models use \u0060bool?\u0060, so I was a bit confused as to what was causing the problem.\r\n\r\nDoing a find in Visual Studio for \u0060bool?\u0060 lead me to an optional query string parameter on one of my endpoints: [code](https://github.com/martincostello/api/blob/aa691000a84f23ee18f06420fd3b3ee1ad616968/src/API/ApiModule.cs#L152)\r\n\r\nI\u0027m not sure what, if anything, can be done here, but the local developer experience digging through as to what needs to be added to my custom \u0060JsonSerializerContext\u0060 (in this case adding \u0060[JsonSerializable(typeof(bool?))]\u0060) for things to render isn\u0027t great, and I imagine could be quite frustrating in a larger application.\r\n\r\nIt\u0027s also a bit confusing at first, as when I think of custom JSON serialization for AoT I think of custom types, not built-in primitive parameters. It\u0027s not needed for Request Delegate Generator to work for the actual API endpoints, for example.\r\n\n\n### Expected Behavior\n\nEither:\r\n\r\n- things \u0022just work\u0022 (generate a custom \u0060JsonSerializerContext\u0060 with a source generator for all the types known to be part of the API surface?)\r\n- an analyser to help identify the things you need to add to your serialization context?\r\n- ...?\r\n\n\n### Steps To Reproduce\n\n- Clone https://github.com/martincostello/api/pull/1504/commits/aa691000a84f23ee18f06420fd3b3ee1ad616968\r\n- Open the solution in Visual Studio and start the debugger\r\n- Perform an HTTP request to the \u0060/openapi/api.json\u0060 endpoint\r\n\n\n### Exceptions (if any)\n\n\u0060\u0060\u0060\r\nNotSupportedException: JsonTypeInfo metadata for type \u0027System.Nullable\u00601[System.Boolean]\u0027 was not provided by TypeInfoResolver of type \u0027[Microsoft.AspNetCore.OpenApi.OpenApiJsonSchemaContext, MartinCostello.Api.ApplicationJsonSerializerContext]\u0027. If using source generation, ensure that all root types passed to the serializer have been annotated with \u0027JsonSerializableAttribute\u0027, along with any types that might be serialized polymorphically.\r\n\r\nSystem.Text.Json.ThrowHelper.ThrowNotSupportedException_NoMetadataForType(Type type, IJsonTypeInfoResolver resolver)\r\nSystem.Text.Json.JsonSerializerOptions.GetTypeInfoInternal(Type type, bool ensureConfigured, Nullable\u003Cbool\u003E ensureNotNull, bool resolveIfMutable, bool fallBackToNearestAncestorType)\r\nSystem.Text.Json.JsonSerializerOptions.GetTypeInfo(Type type)\r\nJsonSchemaMapper.JsonSchemaMapper.GetJsonSchema(JsonSerializerOptions options, ParameterInfo parameterInfo, JsonSchemaMapperConfiguration configuration)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiComponentService.CreateSchema(ValueTuple\u003CType, ParameterInfo\u003E key)\r\nSystem.Collections.Concurrent.ConcurrentDictionary\u003CTKey, TValue\u003E.GetOrAdd(TKey key, Func\u003CTKey, TValue\u003E valueFactory)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiComponentService.GetOrCreateSchema(Type type, ApiParameterDescription parameterDescription)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiDocumentService.GetParameters(ApiDescription description)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOperation(ApiDescription description, HashSet\u003COpenApiTag\u003E capturedTags)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOperations(IGrouping\u003Cstring, ApiDescription\u003E descriptions, HashSet\u003COpenApiTag\u003E capturedTags)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOpenApiPaths(HashSet\u003COpenApiTag\u003E capturedTags)\r\nMicrosoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOpenApiDocumentAsync(CancellationToken cancellationToken)\r\nMicrosoft.AspNetCore.Builder.OpenApiEndpointRouteBuilderExtensions\u002B\u003C\u003Ec__DisplayClass0_0\u002B\u003C\u003CMapOpenApi\u003Eb__0\u003Ed.MoveNext()\r\nMicrosoft.AspNetCore.Http.Generated.\u003CGeneratedRouteBuilderExtensions_g\u003EF56B68D2B55B5B7B373BA2E4796D897848BC0F04A969B1AF6260183E8B9E0BAF2__GeneratedRouteBuilderExtensionsCore\u002B\u003C\u003Ec__DisplayClass2_0\u002B\u003C\u003CMapGet0\u003Eg__RequestHandler|5\u003Ed.MoveNext()\r\nMicrosoft.AspNetCore.ResponseCompression.ResponseCompressionMiddleware.InvokeCore(HttpContext context)\r\nMicrosoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.Invoke(HttpContext context)\r\nMartinCostello.Api.Middleware.CustomHttpHeadersMiddleware.Invoke(HttpContext context) in CustomHttpHeadersMiddleware.cs\r\n\u0060\u0060\u0060\n\n### .NET Version\n\n9.0.100-preview.5.24281.15\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "NativeAOT",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86AL_51",
        "parentId": null,
        "author": "captainsafia",
        "content": "@martincostello Thanks for filling this issue!\r\n\r\nI think this ties into a larger conversation around the friction that\u0027s involved when properly moving to Native AoT with System.Text.Json.\r\n\r\nWe had some discussions around solving this last year and I did some explorations into the second bullet you mentioned here:\r\n\r\n\u003E an analyser to help identify the things you need to add to your serialization context?\r\n\r\nWhere we would ship an analyzer out-of-the-box in the shared framework that would provide codefixers that would annotate your \u0060JsonSerializerContext\u0060 properly with attributes for the types exposed by your endpoints. The prototyping was promising but we haven\u0027t pursued formalizing this into an official framework feature at the moment.\r\n\r\nThis issue is popping up in more places though so it might be worth making a concerted effort to ship something here.\r\n\r\nI\u0027ll stick this issue in the backlog for now. I\u0027m interested in solving this problem but I think I\u0027ll have to finish building my time machine before I get around to that. \uD83D\uDE05 \r\n",
        "createdAt": "2024-06-05T17:51:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56021#issuecomment-2150628981"
      },
      {
        "id": "IC_kwDOAQzde86AMBhW",
        "parentId": null,
        "author": "martincostello",
        "content": "Sure, that\u0027s fine \uD83D\uDC4D - it was mainly notable/confusing for me as I\u0027ve not had to annotate a type of an _argument_ before, typically it\u0027s just been the types for things I\u0027m explicitly serializing myself or for values returned from methods.",
        "createdAt": "2024-06-05T17:56:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56021#issuecomment-2150635606"
      },
      {
        "id": "IC_kwDOAQzde86AME1q",
        "parentId": null,
        "author": "captainsafia",
        "content": "@martincostello Ah, good note.\r\n\r\nFor posterity (and others reading this thread), the big difference in the OpenAPI scenario is that we\u0027re leaning into System.Text.Json to resolve JSON schemas for _all_ arguments. Prior to this, System.Text.Json was only coming into play for the (de)serialization of complex types in minimal APIs. Simple types were bound independently by the generated request delegate generated code. That\u0027s not longer the case.\r\n\r\nThis is indeed surprising behavior if you\u0027re not familiar with the details of the implementation and provides a bit more ammo for pursuing the codefixer approach that I mentioned earlier for these kinds of things.",
        "createdAt": "2024-06-05T18:03:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56021#issuecomment-2150649194"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86K-eVs",
    "title": "[NativeAOT] Incorrect source generator types when Minimal API endpoint delegate return type is inferred",
    "url": "https://github.com/dotnet/aspnetcore/issues/56048",
    "createdAt": "2024-06-03T16:56:57Z",
    "lastUpdated": "2024-06-03T16:58:30Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen using an inferred type in the delegate passed to a Minimal API endpoint, the source generator does not generate the correct code.\r\n\r\n### Expected Behavior\r\n\r\nThe source generator should infer the types and generate correct code.\r\n\r\nThis issue does not occur if the type is explicitly declared.\r\n\r\n\u0060\u0060\u0060csharp\r\n        return httpClient.GetFromJsonAsync\u003CResponse\u003E(\u0022https://ipinfo.io/\u0022, AppJsonSerializerContext.Default.Response);\r\n\u0060\u0060\u0060\r\n\r\n### Steps To Reproduce\r\n\r\nhttps://github.com/qin-guan/dotnet-minimalapi-source-generator-httpclient-repro\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n9.0.100-preview.4.24267.66\r\n\r\n### Anything else?\r\n\r\nThis also occurs with .NET 8\r\n\r\nPlease see lines 85 and 102\r\n\r\n\u003Cimg width=\u00221349\u0022 alt=\u0022image\u0022 src=\u0022https://github.com/dotnet/aspnetcore/assets/10321883/83bc895d-bb20-4b9b-b857-d984b999c83d\u0022\u003E\r\n",
    "upvotes": 0,
    "labels": [
      "NativeAOT",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86Ldiqo",
    "title": "Descriptive Error for Improper Use of [AsParameters] with IFormFileCollection in .NET 8 Minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/56114",
    "createdAt": "2024-06-07T07:24:13Z",
    "lastUpdated": "2024-09-30T15:42:21Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\n### Problem Description\r\n\r\nIn .NET 8 minimal APIs, when using the \u0060[AsParameters]\u0060 attribute on an \u0060IFormFileCollection\u0060 parameter, the resulting error message is extremely long and non-descriptive. This can make it difficult for developers to diagnose the issue.\r\n\r\n#### Example Code\r\n\r\nThe following endpoint works correctly:\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapPost(\u0022/correct\u0022, (IFormFileCollection files) =\u003E TypedResults.Ok());\r\n\u0060\u0060\u0060\r\n\r\nHowever, if a developer mistakenly uses \u0060[AsParameters]\u0060 like this:\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapPost(\u0022/incorrect\u0022, ([AsParameters] IFormFileCollection files) =\u003E TypedResults.Ok());\r\napp.MapPost(\u0022/incorrect\u0022, ([AsParameters] List\u003CIFormFile\u003E files) =\u003E TypedResults.Ok());\r\n\u0060\u0060\u0060\r\n\r\nThe error message returned by ASP.NET Core is long and unclear.\r\n\r\n**Actual Error Message**\r\nIt is too long so I cannot copy paste it here but I left extract from it in the exception message place.\n\n### Expected Behavior\n\nASP.NET Core should provide a more descriptive and concise error message that clearly indicates the misuse of \u0060[AsParameters]\u0060 with \u0060IFormFileCollection\u0060. For example, it should state that \u0060[AsParameters]\u0060 is not supported with \u0060IFormFileCollection\u0060.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n**Actual Error Message**\r\n\u0060\u0060\u0060vbnet\r\nSystem.OperationCanceledException: The operation was canceled.\r\n   at System.Threading.PeriodicTimer.State.Signal(Boolean stopping, CancellationToken cancellationToken)\r\n   at System.Threading.CancellationTokenSource.Invoke(Delegate d, Object state, CancellationTokenSource source)\r\n   at System.Threading.CancellationTokenSource.ExecuteCallbackHandlers(Boolean throwOnFirstException)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.\u003CDisposeAsync\u003Eg__Await|26_0(Int32 i, ValueTask vt, List\u00601 toDispose)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task\u00601.TrySetResult(TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.SetExistingTaskResult(Task\u00601 task, TResult result)\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.SetResult()\r\n   at MassTransit.MassTransitHostedService.DisposeAsync() in /_/src/MassTransit/MassTransitHostedService.cs:line 40\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.TrySetResult()\r\n   at System.Threading.Tasks.Task.WhenAllPromise.Invoke(Task completedTask)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task\u00601.TrySetResult(TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.SetExistingTaskResult(Task\u00601 task, TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at MassTransit.MassTransitBus.StopAsync(CancellationToken cancellationToken) in /_/src/MassTransit/MassTransitBus.cs:line 268\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task\u00601.TrySetResult(TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.SetExistingTaskResult(Task\u00601 task, TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at MassTransit.MassTransitBus.Handle.StopAsync(CancellationToken cancellationToken) in /_/src/MassTransit/MassTransitBus.cs:line 411\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task\u00601.TrySetResult(TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.SetExistingTaskResult(Task\u00601 task, TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at MassTransit.Transports.BaseHost.Stop(CancellationToken cancellationToken) in /_/src/MassTransit/Transports/BaseHost.cs:line 160\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task\u00601.TrySetResult(TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.SetExistingTaskResult(Task\u00601 task, TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at MassTransit.Middleware.Agent.Stop(StopContext context) in /_/src/MassTransit.Abstractions/Middleware/Middleware/Agent.cs:line 93\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task\u00601.TrySetResult(TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.SetExistingTaskResult(Task\u00601 task, TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at MassTransit.Transports.TransportPipeContextSupervisor\u00601.StopSupervisor(StopSupervisorContext context) in /_/src/MassTransit/Transports/TransportPipeContextSupervisor.cs:line 46\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task\u00601.TrySetResult(TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.SetExistingTaskResult(Task\u00601 task, TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at MassTransit.Agents.PipeContextSupervisor\u00601.StopSupervisor(StopSupervisorContext context) in /_/src/MassTransit/Agents/PipeContextSupervisor.cs:line 90\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecuteFromThreadPool(Thread threadPoolThread)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.PeriodicTimer.State.System.Threading.Tasks.Sources.IValueTaskSource\u003CSystem.Boolean\u003E.GetResult(Int16 token)\r\n   at MassTransit.PostgresOutbox.Jobs.InboxMessageRemovalService\u00601.ExecuteAsync(CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Hosting.Internal.Host.TryExecuteBackgroundServiceAsync(BackgroundService backgroundService)\r\n[11:06:56 FTL] The HostOptions.BackgroundServiceExceptionBehavior is configured to StopHost. A BackgroundService has thrown an unhandled exception, and the IHost instance is stopping. To avoid this behavior, configure this to Ignore; however the BackgroundService will not be restarted.\r\nSystem.OperationCanceledException: The operation was canceled.\r\n   at System.Threading.PeriodicTimer.State.Signal(Boolean stopping, CancellationToken cancellationToken)\r\n   at System.Threading.CancellationTokenSource.Invoke(Delegate d, Object state, CancellationTokenSource source)\r\n   at System.Threading.CancellationTokenSource.ExecuteCallbackHandlers(Boolean throwOnFirstException)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.\u003CDisposeAsync\u003Eg__Await|26_0(Int32 i, ValueTask vt, List\u00601 toDispose)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task\u00601.TrySetResult(TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.SetExistingTaskResult(Task\u00601 task, TResult result)\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.SetResult()\r\n   at MassTransit.MassTransitHostedService.DisposeAsync() in /_/src/MassTransit/MassTransitHostedService.cs:line 40\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.TrySetResult()\r\n   at System.Threading.Tasks.Task.WhenAllPromise.Invoke(Task completedTask)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task\u00601.TrySetResult(TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.SetExistingTaskResult(Task\u00601 task, TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at MassTransit.MassTransitBus.StopAsync(CancellationToken cancellationToken) in /_/src/MassTransit/MassTransitBus.cs:line 268\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task\u00601.TrySetResult(TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.SetExistingTaskResult(Task\u00601 task, TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at MassTransit.MassTransitBus.Handle.StopAsync(CancellationToken cancellationToken) in /_/src/MassTransit/MassTransitBus.cs:line 411\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task\u00601.TrySetResult(TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.SetExistingTaskResult(Task\u00601 task, TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at MassTransit.Transports.BaseHost.Stop(CancellationToken cancellationToken) in /_/src/MassTransit/Transports/BaseHost.cs:line 160\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task\u00601.TrySetResult(TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.SetExistingTaskResult(Task\u00601 task, TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at MassTransit.Middleware.Agent.Stop(StopContext context) in /_/src/MassTransit.Abstractions/Middleware/Middleware/Agent.cs:line 93\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task\u00601.TrySetResult(TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.SetExistingTaskResult(Task\u00601 task, TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at MassTransit.Transports.TransportPipeContextSupervisor\u00601.StopSupervisor(StopSupervisorContext context) in /_/src/MassTransit/Transports/TransportPipeContextSupervisor.cs:line 46\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task\u00601.TrySetResult(TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.SetExistingTaskResult(Task\u00601 task, TResult result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult()\r\n   at MassTransit.Agents.PipeContextSupervisor\u00601.StopSupervisor(StopSupervisorContext context) in /_/src/MassTransit/Agents/PipeContextSupervisor.cs:line 90\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601.AsyncStateMachineBox\u00601.ExecuteFromThreadPool(Thread threadPoolThread)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.PeriodicTimer.State.System.Threading.Tasks.Sources.IValueTaskSource\u003CSystem.Boolean\u003E.GetResult(Int16 token)\r\n   at MassTransit.PostgresOutbox.Jobs.InboxMessageRemovalService\u00601.ExecuteAsync(CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Hosting.Internal.Host.TryExecuteBackgroundServiceAsync(BackgroundService backgroundService)\r\n[11:06:56 INF] Application is shutting down...\r\n[11:06:56 ERR] BackgroundService failed\r\n\u0060\u0060\u0060\n\n### .NET Version\n\n8.0.2\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "help wanted",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86AaCXz",
        "parentId": null,
        "author": "martincostello",
        "content": "The stack trace here doesn\u0027t seem to be anything to do with Minimal APIs - it\u0027s to do with MassTransit. What exception do you get if you temporarily remove your background service? It could be that one problem is causing another, but then that problem masks the original error, meaning it _looks_ like you get a terrible error message.",
        "createdAt": "2024-06-07T08:03:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56114#issuecomment-2154309107"
      },
      {
        "id": "IC_kwDOAQzde86Aa3ky",
        "parentId": null,
        "author": "HaikAsatryan",
        "content": "To clarify, the error message is indeed a result of using the [AsParameters] attribute incorrectly. The issue isn\u0027t related to MassTransit or other dependencies, as we encountered this problem in a nearly empty project as well.\r\n\r\nThe error message generated is over 300K characters, making it impractical to post in full here. It encompasses details from various components of our project, including MassTransit, Hangfire, MediatR, etc., leading to a convoluted stack trace. \r\n\r\nHere\u2019s an example in a minimal setup:\r\n\r\n**Reproducible Example:**\r\n\u0060\u0060\u0060csharp\r\napp.MapPost(\u0022err\u0022, ([AsParameters]List\u003CIFormFile\u003E files) =\u003E \u0022OK\u0022);\r\n\u0060\u0060\u0060\r\n\r\n**Resulting Error:**\r\n\u0060\u0060\u0060vbnet\r\ncrit: Microsoft.AspNetCore.Hosting.Diagnostics[6]\r\n      Application startup exception\r\n      System.InvalidProgramException: Common Language Runtime detected an invalid program.\r\n         at System.Reflection.Emit.DynamicMethod.CreateDelegate(Type delegateType, Object target)\r\n         at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\r\n         at System.Linq.Expressions.Expression\u00601.Compile()\r\n         at Microsoft.AspNetCore.Http.RequestDelegateFactory.HandleRequestBodyAndCompileRequestDelegateForForm(Expression responseWritingMethodCall, RequestDelegateFactoryContext factoryContext)\r\n         at Microsoft.AspNetCore.Http.RequestDelegateFactory.Create(Delegate handler, RequestDelegateFactoryOptions options, RequestDelegateMetadataResult metadataResult)\r\n         at Microsoft.AspNetCore.Routing.RouteEndpointDataSource.CreateRouteEndpointBuilder(RouteEntry entry, RoutePattern groupPrefix, IReadOnlyList\u00601 groupConventions, IReadOnlyList\u00601 groupFinallyConventions)\r\n         at Microsoft.AspNetCore.Routing.RouteEndpointDataSource.get_Endpoints()\r\n         at Microsoft.AspNetCore.Routing.CompositeEndpointDataSource.CreateEndpointsUnsynchronized()\r\n         at Microsoft.AspNetCore.Routing.CompositeEndpointDataSource.EnsureEndpointsInitialized()\r\n         at Microsoft.AspNetCore.Routing.CompositeEndpointDataSource.get_Endpoints()\r\n         at Microsoft.AspNetCore.Routing.DataSourceDependentCache\u00601.Initialize()\r\n         at System.Threading.LazyInitializer.EnsureInitializedCore[T](T\u0026 target, Boolean\u0026 initialized, Object\u0026 syncLock, Func\u00601 valueFactory)\r\n         at Microsoft.AspNetCore.Routing.DataSourceDependentCache\u00601.EnsureInitialized()\r\n         at Microsoft.AspNetCore.Authorization.Policy.AuthorizationPolicyCache..ctor(EndpointDataSource dataSource)\r\n         at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n         at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span\u00601 copyOfArgs, BindingFlags invokeAttr)\r\n         at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n         at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor\u00602.VisitCallSiteMain(ServiceCallSite callSite, TArgument argument)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache(ServiceCallSite callSite, RuntimeResolverContext context)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor\u00602.VisitCallSite(ServiceCallSite callSite, TArgument argument)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.Resolve(ServiceCallSite callSite, ServiceProviderEngineScope scope)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.CreateServiceAccessor(ServiceIdentifier serviceIdentifier)\r\n         at System.Collections.Concurrent.ConcurrentDictionary\u00602.GetOrAdd(TKey key, Func\u00602 valueFactory)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(ServiceIdentifier serviceIdentifier, ServiceProviderEngineScope serviceProviderEngineScope)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.GetService(Type serviceType)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[T](IServiceProvider provider)\r\n         at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware..ctor(RequestDelegate next, IAuthorizationPolicyProvider policyProvider, IServiceProvider services)\r\n         at Microsoft.AspNetCore.Authorization.AuthorizationMiddlewareInternal..ctor(RequestDelegate next, IServiceProvider services, IAuthorizationPolicyProvider policyProvider, ILogger\u00601 logger)\r\n         at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n         at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span\u00601 copyOfArgs, BindingFlags invokeAttr)\r\n         at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n         at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n         at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)\r\n         at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)\r\n         at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.ReflectionMiddlewareBinder.CreateMiddleware(RequestDelegate next)\r\n         at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()\r\n         at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)\r\nfail: Microsoft.Extensions.Hosting.Internal.Host[11]\r\n      Hosting failed to start\r\n      System.InvalidProgramException: Common Language Runtime detected an invalid program.\r\n         at System.Reflection.Emit.DynamicMethod.CreateDelegate(Type delegateType, Object target)\r\n         at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\r\n         at System.Linq.Expressions.Expression\u00601.Compile()\r\n         at Microsoft.AspNetCore.Http.RequestDelegateFactory.HandleRequestBodyAndCompileRequestDelegateForForm(Expression responseWritingMethodCall, RequestDelegateFactoryContext factoryContext)\r\n         at Microsoft.AspNetCore.Http.RequestDelegateFactory.Create(Delegate handler, RequestDelegateFactoryOptions options, RequestDelegateMetadataResult metadataResult)\r\n         at Microsoft.AspNetCore.Routing.RouteEndpointDataSource.CreateRouteEndpointBuilder(RouteEntry entry, RoutePattern groupPrefix, IReadOnlyList\u00601 groupConventions, IReadOnlyList\u00601 groupFinallyConventions)\r\n         at Microsoft.AspNetCore.Routing.RouteEndpointDataSource.get_Endpoints()\r\n         at Microsoft.AspNetCore.Routing.CompositeEndpointDataSource.CreateEndpointsUnsynchronized()\r\n         at Microsoft.AspNetCore.Routing.CompositeEndpointDataSource.EnsureEndpointsInitialized()\r\n         at Microsoft.AspNetCore.Routing.CompositeEndpointDataSource.get_Endpoints()\r\n         at Microsoft.AspNetCore.Routing.DataSourceDependentCache\u00601.Initialize()\r\n         at System.Threading.LazyInitializer.EnsureInitializedCore[T](T\u0026 target, Boolean\u0026 initialized, Object\u0026 syncLock, Func\u00601 valueFactory)\r\n         at Microsoft.AspNetCore.Routing.DataSourceDependentCache\u00601.EnsureInitialized()\r\n         at Microsoft.AspNetCore.Authorization.Policy.AuthorizationPolicyCache..ctor(EndpointDataSource dataSource)\r\n         at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n         at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span\u00601 copyOfArgs, BindingFlags invokeAttr)\r\n         at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n         at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor\u00602.VisitCallSiteMain(ServiceCallSite callSite, TArgument argument)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache(ServiceCallSite callSite, RuntimeResolverContext context)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor\u00602.VisitCallSite(ServiceCallSite callSite, TArgument argument)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.Resolve(ServiceCallSite callSite, ServiceProviderEngineScope scope)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.CreateServiceAccessor(ServiceIdentifier serviceIdentifier)\r\n         at System.Collections.Concurrent.ConcurrentDictionary\u00602.GetOrAdd(TKey key, Func\u00602 valueFactory)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(ServiceIdentifier serviceIdentifier, ServiceProviderEngineScope serviceProviderEngineScope)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.GetService(Type serviceType)\r\n         at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[T](IServiceProvider provider)\r\n         at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware..ctor(RequestDelegate next, IAuthorizationPolicyProvider policyProvider, IServiceProvider services)\r\n         at Microsoft.AspNetCore.Authorization.AuthorizationMiddlewareInternal..ctor(RequestDelegate next, IServiceProvider services, IAuthorizationPolicyProvider policyProvider, ILogger\u00601 logger)\r\n         at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n         at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span\u00601 copyOfArgs, BindingFlags invokeAttr)\r\n         at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n         at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n         at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)\r\n         at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)\r\n         at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.ReflectionMiddlewareBinder.CreateMiddleware(RequestDelegate next)\r\n         at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()\r\n         at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)\r\n         at Microsoft.Extensions.Hosting.Internal.Host.\u003CStartAsync\u003Eb__15_1(IHostedService service, CancellationToken token)\r\n         at Microsoft.Extensions.Hosting.Internal.Host.ForeachService[T](IEnumerable\u00601 services, CancellationToken token, Boolean concurrent, Boolean abortOnFirstException, List\u00601 exceptions, Func\u00603 operation)\r\nUnhandled exception. System.InvalidProgramException: Common Language Runtime detected an invalid program.\r\n   at System.Reflection.Emit.DynamicMethod.CreateDelegate(Type delegateType, Object target)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\r\n   at System.Linq.Expressions.Expression\u00601.Compile()\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.HandleRequestBodyAndCompileRequestDelegateForForm(Expression responseWritingMethodCall, RequestDelegateFactoryContext factoryContext)\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.Create(Delegate handler, RequestDelegateFactoryOptions options, RequestDelegateMetadataResult metadataResult)\r\n   at Microsoft.AspNetCore.Routing.RouteEndpointDataSource.CreateRouteEndpointBuilder(RouteEntry entry, RoutePattern groupPrefix, IReadOnlyList\u00601 groupConventions, IReadOnlyList\u00601 groupFinallyConventions)\r\n   at Microsoft.AspNetCore.Routing.RouteEndpointDataSource.get_Endpoints()\r\n   at Microsoft.AspNetCore.Routing.CompositeEndpointDataSource.CreateEndpointsUnsynchronized()\r\n   at Microsoft.AspNetCore.Routing.CompositeEndpointDataSource.EnsureEndpointsInitialized()\r\n   at Microsoft.AspNetCore.Routing.CompositeEndpointDataSource.get_Endpoints()\r\n   at Microsoft.AspNetCore.Routing.DataSourceDependentCache\u00601.Initialize()\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T\u0026 target, Boolean\u0026 initialized, Object\u0026 syncLock, Func\u00601 valueFactory)\r\n   at Microsoft.AspNetCore.Routing.DataSourceDependentCache\u00601.EnsureInitialized()\r\n   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationPolicyCache..ctor(EndpointDataSource dataSource)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span\u00601 copyOfArgs, BindingFlags invokeAttr)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor\u00602.VisitCallSiteMain(ServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache(ServiceCallSite callSite, RuntimeResolverContext context)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor\u00602.VisitCallSite(ServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.Resolve(ServiceCallSite callSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.CreateServiceAccessor(ServiceIdentifier serviceIdentifier)\r\n   at System.Collections.Concurrent.ConcurrentDictionary\u00602.GetOrAdd(TKey key, Func\u00602 valueFactory)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(ServiceIdentifier serviceIdentifier, ServiceProviderEngineScope serviceProviderEngineScope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[T](IServiceProvider provider)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware..ctor(RequestDelegate next, IAuthorizationPolicyProvider policyProvider, IServiceProvider services)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddlewareInternal..ctor(RequestDelegate next, IServiceProvider services, IAuthorizationPolicyProvider policyProvider, ILogger\u00601 logger)\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span\u00601 copyOfArgs, BindingFlags invokeAttr)\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)\r\n   at Microsoft.Extensions.Internal.ActivatorUtilities.CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters)\r\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.ReflectionMiddlewareBinder.CreateMiddleware(RequestDelegate next)\r\n   at Microsoft.AspNetCore.Builder.ApplicationBuilder.Build()\r\n   at Microsoft.AspNetCore.Hosting.GenericWebHostService.StartAsync(CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Hosting.Internal.Host.\u003CStartAsync\u003Eb__15_1(IHostedService service, CancellationToken token)\r\n   at Microsoft.Extensions.Hosting.Internal.Host.ForeachService[T](IEnumerable\u00601 services, CancellationToken token, Boolean concurrent, Boolean abortOnFirstException, List\u00601 exceptions, Func\u00603 operation)\r\n   at Microsoft.Extensions.Hosting.Internal.Host.StartAsync(CancellationToken cancellationToken)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.RunAsync(IHost host, CancellationToken token)\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)\r\n   at Program.\u003CMain\u003E$(String[] args) in C:\\Users\\HIDEDPATH\\Program.cs:line 35\r\n   \u0060\u0060\u0060\r\n\r\nWe have spent more than an hour until we have found the error in our case.\r\n",
        "createdAt": "2024-06-07T10:10:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56114#issuecomment-2154527026"
      },
      {
        "id": "IC_kwDOAQzde86Aa46_",
        "parentId": null,
        "author": "martincostello",
        "content": "Thanks - that looks like it contains enough information now for someone to look into.",
        "createdAt": "2024-06-07T10:13:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56114#issuecomment-2154532543"
      },
      {
        "id": "IC_kwDOAQzde86JTVLr",
        "parentId": null,
        "author": "captainsafia",
        "content": "I believe the root cause of the issue in both of these cases is the fact that parameter annotated with the \u0060AsParameters\u0060 attribute consists of an interface type that we can\u0027t instantiate when we bind to the complex type.\r\n\r\nI see two different strategies for solving this:\r\n\r\n- Provide an analyzer to warn about this pattern.\r\n- Add a set of runtime checks as we construct the parameter binding logic if we encounter \u0060[AsParameters]\u0060 in an unsupported type.\r\n\r\nThe first approach has the benefit of \u0022shifting left\u0022 the error and alerting users earlier in the dev loop that their handler is invalid. The second approach won\u0027t warn users until they send the first request to the app but is easier to roll out.\r\n\r\nI\u0027m putting this in the backlog for now although I\u0027m happy to review a PR or provide pointers as to how we can go about fixing it.",
        "createdAt": "2024-08-22T02:15:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56114#issuecomment-2303546091"
      },
      {
        "id": "IC_kwDOAQzde86JWACJ",
        "parentId": null,
        "author": "jnzhsh",
        "content": "Hi,\r\nI am interested in resolving this issue. But, I am new to the process.\r\n\r\nI am able to setup the environment and replicate the problem.\r\nl want to add some code to RequestDelegateFactory.cs on Line 1612\r\n\u0060\u0060\u0060csharp\r\n  for (var i = 0; i \u003C properties.Length; i\u002B\u002B)\r\n  {\r\n      // For parameterless ctor we will init only writable properties.\r\n      if (properties[i].CanWrite \u0026\u0026 properties[i].GetSetMethod(nonPublic: false) != null)\r\n      {\r\n          //new code begin\r\n          // if properties cant be construct \uFF0Cthrow error\r\n          if (properties[i].PropertyType.IsInterface)\r\n          {\r\n              throw new NotSupportedException($\u0022 {nameof(AsParametersAttribute)} is not supported for complex or recursive model binding\u0022);\r\n          }\r\n          //end\r\n          var parameterInfo = new PropertyAsParameterInfo(properties[i], factoryContext.NullabilityContext);\r\n          Debug.Assert(parameterInfo.Name != null, \u0022Parameter name must be set for parameters resolved from properties.\u0022);\r\n          bindings.Add(Expression.Bind(properties[i], CreateArgument(parameterInfo, factoryContext, out var hasTryParse, out var hasBindAsync, out var _)));\r\n          factoryContext.Parameters.Add(parameterInfo);\r\n          factoryContext.EndpointBuilder.Metadata.Add(new ParameterBindingMetadata(parameterInfo.Name, parameterInfo, hasTryParse: hasTryParse, hasBindAsync: hasBindAsync, isOptional: parameterInfo.IsOptional));\r\n      }\r\n  }\r\n\u0060\u0060\u0060\r\nHave I missed anything or should I place the check elsewhere?",
        "createdAt": "2024-08-22T09:50:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56114#issuecomment-2304245897"
      },
      {
        "id": "IC_kwDOAQzde86JYhj-",
        "parentId": null,
        "author": "captainsafia",
        "content": "@jnzhsh I think the check should happen [somewhere here](https://source.dot.net/#Microsoft.AspNetCore.Http.Extensions/RequestDelegateFactory.cs,824) and should be done on the parameter type instead of the properties.",
        "createdAt": "2024-08-22T15:03:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56114#issuecomment-2304907518"
      },
      {
        "id": "IC_kwDOAQzde86JeAaZ",
        "parentId": null,
        "author": "jnzhsh",
        "content": "thanks\r\nI found that in addition to \u0060List\u003C\u003E\u0060,\u0060Dictionary\u003C,\u003E\u0060 also raises the above error, which is a better way to check?\r\npreventing all \u0060IEnumerable\u003C\u003E\u0060 or just preventing \u0060List\u003C\u003E\u0060,\u0060Dictionary\u003C,\u003E\u0060 or maybe I\u0027m focusing on the wrong thing\r\n\u0060\u0060\u0060c#\r\nelse if (parameterCustomAttributes.OfType\u003CAsParametersAttribute\u003E().Any())\r\n{\r\n    isAsParameters = true;\r\n    if (parameter is PropertyAsParameterInfo)\r\n    {\r\n        throw new NotSupportedException(\r\n            $\u0022Nested {nameof(AsParametersAttribute)} is not supported and should be used only for handler parameters.\u0022);\r\n    }\r\n\r\n    if(parameter.ParameterType.GetInterfaces().Any(x =\u003E x.IsGenericType\u0026\u0026 x.GetGenericTypeDefinition() == typeof(IEnumerable\u003C\u003E)))\r\n    // Or one of the following judgments\r\n    // only check List\u003C\u003E and Dictionary\u003C\u003E\r\n    //if (parameter.ParameterType.IsConstructedGenericType \u0026\u0026 (parameter.ParameterType.GetGenericTypeDefinition() == typeof(List\u003C\u003E)|| parameter.ParameterType.GetGenericTypeDefinition() == typeof(Dictionary\u003C,\u003E)))\r\n    {\r\n        throw new NotSupportedException(\r\n           $\u0022 {nameof(AsParametersAttribute)} is not supported to  complex model binding (eg IEnumerable\u003C\u003E) \u0022);\r\n    }\r\n       \r\n    \r\n    return BindParameterFromProperties(parameter, factoryContext);\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2024-08-23T05:54:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56114#issuecomment-2306344601"
      },
      {
        "id": "IC_kwDOAQzde86OEiK3",
        "parentId": null,
        "author": "smnsht",
        "content": "I\u0027ve tried to reproduce this issue for framework 8.0\r\n\r\nHere is a simple Minimal API project here: [https://github.com/smnsht/56114](https://github.com/smnsht/56114) used for testing.\r\n\r\nLines 37-40 in Program.cs are commented out. In order to view problems, \r\nI am uncommenting one of each line (single line each time), starting the project, and trying to access \u0022/weatherforecast\u0022 endpoint.\r\n\r\nHere is what I found:\r\n\r\n\u0060app.MapPost(\u0022/form-file-collection\u0022, ([AsParameters] IFormFileCollection files) =\u003E Results.Ok(files));\u0060\r\n**Bug not reproduces.** I got a clear error message at the top of the stack trace: \r\n\u0060System.InvalidOperationException: The abstract type \u0027IFormFileCollection\u0027 is not supported.\u0060\r\n\r\n![image](https://github.com/user-attachments/assets/b358568a-ac3c-43aa-ae04-ec9bef903751)\r\n\r\n\r\n\r\n\u0060app.MapPost(\u0022/list-form-file\u0022, ([AsParameters] List\u003CIFormFile\u003E files) =\u003E \u0022OK\u0022);\u0060\r\n\r\n**Bug reproduces?** Getting a short stack trace with the message \r\n\u0060\u0022System.InvalidProgramException: Common Language Runtime detected an invalid program.\u0022\u0060\r\n\r\n\r\n\u0060\u0060\u0060\r\napp.MapPost(\u0022/arr-form-file\u0022, ([AsParameters] IFormFile[] files) =\u003E \u0022OK\u0022);\r\napp.MapGet(\u0022/arr-int\u0022, ([AsParameters] int[] numbers) =\u003E \u0022OK\u0022);\r\n\r\n\u0060\u0060\u0060\r\n\r\n**Bug reproduces?** Getting a short stack trace with message \r\n\u0060\u0022System.ArgumentNullException: Value cannot be null. (Parameter \u0027obj\u0027)\u0022\u0060\r\n\r\n\r\n\r\nLooks like the problem exists for List\u003C\u003E, arrays, and probably for Dictionary.\r\n\r\n\r\n\r\n",
        "createdAt": "2024-09-30T15:40:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56114#issuecomment-2383553207"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86Lh6ex",
    "title": "improve .net documentation",
    "url": "https://github.com/dotnet/aspnetcore/issues/56121",
    "createdAt": "2024-06-07T17:58:33Z",
    "lastUpdated": "2024-06-10T15:58:46Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nHello .net team, my writing is a suggestion to improve the .net documentation, the reason is that it does not explain the code well, and then one gets lost within the documentation, for example in the Api Controller section, they do not explain IActionResult , dependency injection, what each one is for, the data annotation, for example see the documentation of Angular, Laravel or React or Vue, it goes step by step explaining each section in a simple way is the way I see it, in question it is a suggestion of whether The .net documentation can be improved, I look forward to your response.\r\n\r\n\n\n### Describe the solution you\u0027d like\n\nimprove the documentation .net\n\n### Additional context\n\nIm wait your answer",
    "upvotes": 0,
    "labels": [
      "Docs",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86LvTIy",
    "title": "Add support for emitting ServerSentEvents from minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/56172",
    "createdAt": "2024-06-10T17:09:18Z",
    "lastUpdated": "2025-01-22T17:14:10Z",
    "body": "As of https://github.com/dotnet/runtime/pull/102238 and https://github.com/dotnet/runtime/issues/98105, .NET exposes a set of types for working with server-sent events. We want to extend on these APIs in minimal APIs by provide \u0060IResult\u0060 implementations for emitting SSEs to the response.\r\n",
    "upvotes": 3,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86Aterp",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "FYI; SSE in firefox has had a long standing bug where EventSource in Javascript doesn\u0027t fire the Open event until the server has started sending data.\r\nSee https://source.dot.net/#Microsoft.AspNetCore.Http.Connections/Internal/Transports/ServerSentEventsServerTransport.cs,45 for what we do in SignalR. It might not be relevant to Minimal since when we return the SSE IResult we\u0027ll be writing SSE frames at that point? Unless we want bi-directional SSE in which case we\u0027d somehow need to send a comment frame when app code wants to read SSE data.\r\n\r\nWe can also steal (share) the writing side of SSE from SignalR https://source.dot.net/#Microsoft.AspNetCore.Http.Connections/ServerSentEventsMessageFormatter.cs,c4a21cef091f2b21",
        "createdAt": "2024-06-10T22:21:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56172#issuecomment-2159405801"
      },
      {
        "id": "IC_kwDOAQzde86bb_qY",
        "parentId": null,
        "author": "eiriktsarpalis",
        "content": "Given that System.Net.ServerSentEvents is only exposed an OOB NuGet package, does it create any challenges when it comes to adding it as a dependency in the aspnetcore shared framework?\n\ncc @halter73 @stephentoub ",
        "createdAt": "2025-01-22T17:11:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56172#issuecomment-2607807128"
      },
      {
        "id": "IC_kwDOAQzde86bcBRa",
        "parentId": null,
        "author": "stephentoub",
        "content": "\u003E Given that System.Net.ServerSentEvents is only exposed an OOB NuGet package, does it create any challenges when it comes to adding it as a dependency in the aspnetcore shared framework?\n\u003E \n\u003E cc [@halter73](https://github.com/halter73) [@stephentoub](https://github.com/stephentoub)\n\nIt would end up being pulled into the aspnetcore shared framework. That happens with several other runtime packages.",
        "createdAt": "2025-01-22T17:14:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56172#issuecomment-2607813722"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86Lwidj",
    "title": "Aggregate multiple \u0060Produces\u0060 for same status code but different content-types",
    "url": "https://github.com/dotnet/aspnetcore/issues/56177",
    "createdAt": "2024-06-10T20:20:39Z",
    "lastUpdated": "2024-06-12T22:41:54Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nOpenApi v3.0 and later can describe multiple response \u0022contents\u0022 for a single status code differentiated by the response content-type. Each \u0022contents\u0022 definition can have its own schema. A common case may be:\r\n\u0060\u0060\u0060yaml\r\nresponses:\r\n  \u0027200\u0027:\r\n    description: OK\r\n    content:\r\n      application/json:\r\n        schema:\r\n          type: object\r\n          properties:\r\n            id:\r\n              type: integer\r\n              format: int32\r\n            title:\r\n              type: string\r\n            content:\r\n              type: string\r\n      text/html:\r\n        schema:\r\n          type: string\r\n\u0060\u0060\u0060\r\n\r\nCurrently this response description can\u0027t be created just using \u0060Produces\u0060 because each produces can specify only one response type (schema), so two \u0060Produces\u0060 are needed for the case above, but the second \u0060Produces\u0060 for a given status code overrides the information of the first, even if it is for a distinct content type.\n\n### Describe the solution you\u0027d like\n\nI think the most straightforward and user-friendly solution is to only override a prior \u0060Produces\u0060 when it was for the same content type, and otherwise accumulate the response metadata by content-type.\n\n### Additional context\n\n_No response_",
    "upvotes": 17,
    "labels": [
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86L2dLH",
    "title": "Make HttpContext available to OpenAPI transformers",
    "url": "https://github.com/dotnet/aspnetcore/issues/56189",
    "createdAt": "2024-06-11T12:31:40Z",
    "lastUpdated": "2024-06-13T19:35:55Z",
    "body": "## Background and Motivation\r\n\r\nI was looking at how to wire up the \u0060servers\u0060 property based on the current HttpContext [like NSwag does](https://github.com/RicoSuter/NSwag/blob/6b49eefa4048cecfd41ba0d7484bd1f25543d22d/src/NSwag.AspNetCore/Middlewares/OpenApiDocumentMiddleware.cs#L144-L147) after opening #56188, and noticed that the \u0060HttpContext\u0060 isn\u0027t immediately available to any OpenAPI transformers.\r\n\r\nIt can be easily be made available via \u0060IHttpContextAccessor\u0060, but that\u0027s often frowned upon from a performance perspective, so I figured it would be worth raising the possibility of making it available from the request pipeline to avoid the need to do that.\r\n\r\nThe \u0060HttpContext\u0060 could be passed through into \u0060OpenApiDocumentService.GetOpenApiDocumentAsync()\u0060 here:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/2b5d2b36a04f3a4a9bb20bbca38617d1cd6a3a1a/src/OpenApi/src/Extensions/OpenApiEndpointRouteBuilderExtensions.cs#L46\r\n\r\nThen it can be directly assigned into the various context objects passed to any transformers, as well as being available to the document service itself.\r\n\r\n## Proposed API\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.OpenApi;\r\n\r\npublic sealed partial class OpenApiDocumentTransformerContext\r\n{\r\n\u002B   /// \u003Csummary\u003E\r\n\u002B   /// Gets the HTTP context associated with the current HTTP request.\r\n\u002B   /// \u003C/summary\u003E\r\n\u002B   public required HttpContext { get; init }\r\n}\r\n\r\npublic sealed partial class OpenApiOperationTransformerContext\r\n{\r\n\u002B   /// \u003Csummary\u003E\r\n\u002B   /// Gets the HTTP context associated with the current HTTP request.\r\n\u002B   /// \u003C/summary\u003E\r\n\u002B   public required HttpContext { get; init }\r\n}\r\n\r\npublic sealed partial class OpenApiSchemaTransformerContext\r\n{\r\n\u002B   /// \u003Csummary\u003E\r\n\u002B   /// Gets the HTTP context associated with the current HTTP request.\r\n\u002B   /// \u003C/summary\u003E\r\n\u002B   public required HttpContext { get; init }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\n\u0060\u0060\u0060csharp\r\ninternal sealed class AddServersTransformer : IOpenApiDocumentTransformer\r\n{\r\n    /// \u003Cinheritdoc/\u003E\r\n    public Task TransformAsync(\r\n        OpenApiDocument document,\r\n        OpenApiDocumentTransformerContext context,\r\n        CancellationToken cancellationToken)\r\n    {\r\n        document.Servers = [new() { Url = GetServerUrl(context) }];\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n    private static string GetServerUrl(OpenApiDocumentTransformerContext context)\r\n    {\r\n        var request = context.HttpContext.Request;\r\n\r\n        var scheme = TryGetFirstHeader(\u0022X-Forwarded-Proto\u0022) ?? request.Scheme;\r\n        var host = TryGetFirstHeader(\u0022X-Forwarded-Host\u0022) ?? request.Host.ToString();\r\n\r\n        return new Uri($\u0022{scheme}://{host}\u0022).ToString().TrimEnd(\u0027/\u0027);\r\n\r\n        string? TryGetFirstHeader(string name)\r\n            =\u003E request.Headers.TryGetValue(name, out var values) ? values.FirstOrDefault() : null;\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\n\r\nNone.\r\n\r\n## Risks\r\n\r\nNone?\r\n",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "api-suggestion",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86A14Zp",
        "parentId": null,
        "author": "captainsafia",
        "content": "I intentionally avoided introducing the \u0060HttpContext\u0060 into the context object provided to transformers because the OpenAPI document isn\u0027t always guaranteed to be constructed in the  context of an HTTP request. For example, when we plug into the document service via the \u0060IDocumentProvider\u0060 interface at build-time, there\u0027s no \u0060HttpContext\u0060 for the pipeline to plug into.\r\n\r\nIn this way, I like that having to access \u0060IHttpContextAccessor\u0060 from DI (perf-ramifications aside) encourages users to be more cognizant of what they are doing when they take a dependency on the HTTP context in a transformer.\r\n\r\nAs far as usefulness, the \u0060servers\u0060 scenario that you mentioned is definitely a big one. One of the reasons that I was motivated to use an \u0060IServer\u0060-based approach for resolving the addresses locally is because it avoids having to take a dependency on the request pipeline for document construction.\r\n\r\nIt\u0027s a bit of a puritan take to not want to intermingle the two concepts (request pipeline and document construction) so closely and I\u0027m open to having my mind changed if more compelling scenarios arise.\r\n\r\nThoughts?",
        "createdAt": "2024-06-11T21:13:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56189#issuecomment-2161608297"
      },
      {
        "id": "IC_kwDOAQzde86A2GvI",
        "parentId": null,
        "author": "martincostello",
        "content": "I think that\u0027s a fair point to have on it.\r\n\r\nAt first, I did what you\u0027d alluded to in the epic, and used \u0060IServer\u0060, but then I got the HTTP and HTTPS addresses locally and thought to myself whether that would be correct when deployed (localhost vs. knowing what domain it\u0027s hosted on), so looked into what NSwag does which lead me to needing the \u0060HttpContext\u0060 and then opening this.\r\n\r\nOpenAPI isn\u0027t as perf-critical as general request serving, and I didn\u0027t consider the tooling aspect,  so it\u0027s not the end of the world to go down the \u0060IHttpContextAccessor\u0060 route (which is what I\u0027ve done for now anyway) if this isn\u0027t something that you want to expose on the accessors.\r\n\r\nI guess a semi-middleground could be to adjust the API suggestion to make the properties nullable and not required, but I imagine that would proliferate a lot of \u0060!\u0060s over deep thought over the context where the generator runs.",
        "createdAt": "2024-06-11T21:57:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56189#issuecomment-2161667016"
      },
      {
        "id": "IC_kwDOAQzde86A2Qq2",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E At first, I did what you\u0027d alluded to in the epic, and used IServer, but then I got the HTTP and HTTPS addresses locally and thought to myself whether that would be correct when deployed (localhost vs. knowing what domain it\u0027s hosted on)\r\n\r\nYep, this is the gotcha I ran into as well (I\u0027ll post more notes related to this in the issue you linked).\r\n\r\nFor now, I\u0027d be curious to see what other scenarios exist that would merit making \u0060HttpContext\u0060 more of a first-class element in the transformer context. \uD83E\uDD14 ",
        "createdAt": "2024-06-11T22:29:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56189#issuecomment-2161707702"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86MSl8O",
    "title": "Missing required value for constructor parameter",
    "url": "https://github.com/dotnet/aspnetcore/issues/56234",
    "createdAt": "2024-06-14T16:11:21Z",
    "lastUpdated": "2024-06-27T06:48:24Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nHow difficult can this be\r\n\r\nCheckbox in html form when its not true, simply not to submit the value in the property\r\n\r\n\u0060\u0060\u0060\r\n public record PostParameter([Required][EmailAddress] string Email, [Required][MinLength(8)] string Password, string? RememberMe = \u0022unchecked\u0022);\r\n\r\n internal static async Task\u003CResults\u003CRedirectHttpResult, BadRequest\u003E\u003E Post(HttpContext httpContext, [FromForm] PostParameter parameter)\r\n\u0060\u0060\u0060\r\n\r\nPostParameter has optional parameter but that optional parameter is not respected\r\n\r\n\u0060\u0060\u0060\r\nBadHttpRequestException: Missing required value for constructor parameter \u0027RememberMe\u0027.\r\n\r\nMicrosoft.AspNetCore.Http.RequestDelegateFactory\u002BLog.FormDataMappingFailed(HttpContext httpContext, string parameterTypeName, string parameterName, FormDataMappingException exception, bool shouldThrow)\r\n\u0060\u0060\u0060\n\n### Expected Behavior\n\nshould simply accept (no exception) when client not sending \u0022RememberMe\u0022 in the payload\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\nFormDataMappingException \n\n### .NET Version\n\n8\n\n### Anything else?\n\n_No response_",
    "upvotes": 1,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86BPmZj",
        "parentId": null,
        "author": "andrew-vdb",
        "content": "Workaround, dont use record\r\n\u0060\u0060\u0060\r\ninternal static async Task\u003CResults\u003CRedirectHttpResult, BadRequest\u003E\u003E Post(HttpContext httpContext, [FromForm][Required][EmailAddress] string Email, [FromForm][Required][MinLength(8)] string Password, [FromForm] string? RememberMe = \u0022unchecked\u0022)\r\n\u0060\u0060\u0060",
        "createdAt": "2024-06-14T16:16:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56234#issuecomment-2168350307"
      },
      {
        "id": "IC_kwDOAQzde86BPpmE",
        "parentId": null,
        "author": "andrew-vdb",
        "content": "It should work without [FromForm] too\r\nIt should just work....",
        "createdAt": "2024-06-14T16:25:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56234#issuecomment-2168363396"
      },
      {
        "id": "IC_kwDOAQzde86BPq6i",
        "parentId": null,
        "author": "andrew-vdb",
        "content": "The drama supporting \u0022form\u0022 in minimal api\r\nhttps://github.com/dotnet/aspnetcore/issues/39430",
        "createdAt": "2024-06-14T16:29:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56234#issuecomment-2168368802"
      },
      {
        "id": "IC_kwDOAQzde86B5-7C",
        "parentId": null,
        "author": "captainsafia",
        "content": "@andrew-vdb Thanks for opening this issue! I hope I can clarify some of the confusion here.\r\n\r\nThere are currently two different form-binding strategies in minimal APIs:\r\n\r\n-  A simplified form-binding strategy that has existed since .NET 7 that comes into play when you have \u0060[FromForm]\u0060 on \u0060TryParsable\u0060 types (like \u0060string\u0060, \u0060DateTime\u0060, etc.)\r\n- A complex form-binding strategy that was introduced in .NET 8 that comes into play when you have \u0060[FromForm]\u0060 on a complex type (like your \u0060PostParameter\u0060 record above). This form-binding strategy is shared with Blazor.\r\n\r\n\r\n\u003E Workaround, dont use record\r\n\u003E \r\n\u003E \u0060\u0060\u0060\r\n\u003E internal static async Task\u003CResults\u003CRedirectHttpResult, BadRequest\u003E\u003E Post(HttpContext httpContext, [FromForm][Required][EmailAddress] string Email, [FromForm][Required][MinLength(8)] string Password, [FromForm] string? RememberMe = \u0022unchecked\u0022)\r\n\u003E \u0060\u0060\u0060\r\n\r\nThe reason the workaround that you describe here works is minimal APIs treats _all_ parameters with a default value as optional. That same convention doesn\u0027t apply to the complex form-binding strategy shared with Blazor.\r\n\r\nIt looks like the reason this bug is happening is because the complex form-binding support _always_ sets constructor parameters as required:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/0da8ea72b5434cbe8e1207d802f2270ca2f8ad4c/src/Components/Endpoints/src/FormMapping/Metadata/FormDataParameterMetadata.cs#L13\r\n\r\nI\u0027ll see if I can update the complex form-binding implementation here so it handles constructor parameters in records with default values correctly (and nullable constructor parameters).",
        "createdAt": "2024-06-19T21:11:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56234#issuecomment-2179460802"
      },
      {
        "id": "IC_kwDOAQzde86CxKsU",
        "parentId": null,
        "author": "andrew-vdb",
        "content": "@captainsafia got bitten with different issue, basically with POCO object with minimal api, the default value in the property also not applied, this was simply work with controller\r\n\r\nso the question is, is the workaround above, not using poco object is the way to go for minimal api? is this real recommendation? if true then can we have it somewhere it documentation?",
        "createdAt": "2024-06-27T06:48:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56234#issuecomment-2193926932"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86MxSGh",
    "title": "Microsoft.AspNetCore.OpenApi: Support API versioning (required for Swashbuckle feature parity) ",
    "url": "https://github.com/dotnet/aspnetcore/issues/56314",
    "createdAt": "2024-06-19T08:32:16Z",
    "lastUpdated": "2025-01-25T16:32:57Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWe currently use .NET 8.0/AspNetCore with **Swashbuckle.AspNetCore** in many APIs in our product ecosystem.\r\nThe current OpenApi documentations are very good with multiple API versions, good descriptions/comments, security defs/refs etc.\r\n\r\n**Swashbuckle.AspNetCore** integrates with the package **Asp.Versioning.Mvc.ApiExplorer** to enable and simplify API versioning.\r\nIt augments SwashBuckle\u0027s capabilities (that we currently depend upon):\r\n* Tagging with **Controllers**/**Action Methods** with \u0060[ApiVersion(\u0022version\u0022)]\u0060 attributes. \r\nThese attributes add metadata describing in which version(s) the Controllers/ActonMethods are included. \r\n* Using special \u0060{version:apiVersion}\u0060 route parameters that maps/has constraints to the tagged versions for Controller/ActionMethod.\r\n\r\nSwashbuckle parses this metadata to enable splitting into multiple OpenApi documents - one JSON file per version.\r\n\r\nI think the currently way of managing API versioning is simple and it works very well, and I hope the goal for **Microsoft.AspNetCore.OpenApi** is to get close to feature parity with **Swashbuckle.AspNetCore** and to make migration as easy as possible.\n\n### Describe the solution you\u0027d like\n\nThis is a feature request to support API versioning, hopefully a similar way.\r\nI don\u0027t know if you plan to integrate with **Asp.Versioning.Mvc.ApiExplorer**, but hope you can use similar concepts.\r\n\r\nCan you ellaborate about the current plans to support API versioning?\n\n### Additional context\n\n_No response_",
    "upvotes": 3,
    "labels": [
      "Needs: Author Feedback",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86B6hFn",
        "parentId": null,
        "author": "captainsafia",
        "content": "@josundt Thanks for filling this issue!\r\n\r\nThings actually work the other way around with respect to API versioning \u002B OpenAPI in ASP.NET Core.\r\n\r\nThe \u0060Asp.Versioning.Mvc.ApiExplorer\u0060 package that you referenced above integrates with ASP.NET Core\u0027s API explorer implementation. API explorer allows frameworks to expose an implementation of \u0060IApiDescriptionProvider\u0060 that consumers can inspect to generate OpenAPI documentation.\r\n\r\nAll OpenAPI implementations in the ASP.NET ecosystem depend on API Explorer (NSwag, Swashbuckle, and our own Microsoft.AspNetCore.OpenApi) and can pick up the additional metadata that Asp.Versioning adds to the ApiExplorer interfaces in order to access versioning information.\r\n\r\nWith regard to how the new \u0060Microsoft.AspNetCore.OpenApi\u0060 package integrates with Asp.Versioning, check out [this PR on the eShop repo](https://github.com/dotnet/eShop/pull/360) for an example of what the delta between the two implementations is.\r\n\r\nHave you tried using \u0060Microsoft.AspNetCore.OpenApi\u0060 in a project alongside \u0060Asp.Versioning\u0060 and ran into issues?\r\n",
        "createdAt": "2024-06-20T00:16:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2179600743"
      },
      {
        "id": "IC_kwDOAQzde86CQvW6",
        "parentId": null,
        "author": "captainsafia",
        "content": "Removing the \u0060No Recent Acitivity\u0060 label to give @josundt a chance to comment on the question below before the bot auto-closes.\r\n\r\n\u003E Have you tried using Microsoft.AspNetCore.OpenApi in a project alongside Asp.Versioning and ran into issues?\r\n\r\n",
        "createdAt": "2024-06-24T01:33:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2185426362"
      },
      {
        "id": "IC_kwDOAQzde86CSYvH",
        "parentId": null,
        "author": "josundt",
        "content": "@captainsafia I\u0027ll try to perform a test migration of one of one of our APIs by looking at eShop repo today or tomorrow. I\u0027ll get back to you \uD83D\uDC4D",
        "createdAt": "2024-06-24T07:59:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2185857991"
      },
      {
        "id": "IC_kwDOAQzde86CqNmr",
        "parentId": null,
        "author": "josundt",
        "content": "@captainsafia  \r\nI have eventually been able to do a PoC of a .NET 9.0 (preview) API using the following NuGet packages:\r\n* \u0060Microsoft.AspNetCore.OpenApi\u0060\r\n* \u0060Asp.Versioning.Mvc.ApiExplorer\u0060\r\n* \u0060Microsoft.Extensions.ApiDescription.Server\u0060\r\n\r\nAfter studying the eShop repo PR you mentioned, I managed to get a simple API running with **two API versions** (separate OpenAPI documents per version) and build-time OpenAPI documents generation.\r\n\r\nYou can see my small sample project [here](https://github.com/josundt/aspnetcore-sampleopenapi.git).\r\n\r\n## Findings/feedback: ##\r\n\r\n1. **Schema duplication**  \r\n    SwashBuckle added all complex type (and enum) schemas as **single instance** JSON objects in\r\n    the OpenAPI document under \u0060#/components/schemas\u0060.  \r\n    HTTP operations that referred to the schemas through request parameters, requestBody or responses used [JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901) \u0060$ref\u0060 references.\r\n    \u0060Microsoft.AspNetCore.OpenApi\u0060 currently serializes the same schema multiple times, thereby \r\n    increasing the size of the OpenAPI document drastically. Even if the schema \u0022multiplication\u0022 is\r\n    not directly wrong logically speaking, the relationships between the shared\r\n    Schemas and the different HTTP operations are no longer expressed. This is crucial for the various tools that\r\n    generate code from OpenAPI documents. I hope there\u0027s a plan to support this on your roadmap.\r\n  \r\n2. **ProblemDetails Content-Type**   \r\n    AspNetCore makes sure that non-success \u0060ProblemDetails\u0060 responses at runtime get the \r\n    response \u0060Content-Type\u0060 header set to **\u0060\u0022application/problem\u002Bjson\u0022\u0060**.   \r\n    (You can test this through my sample api\u0027s \u0060ErrorDemoController\u0060 using the \r\n    \u0060AspNetCore.SampleOpenApi.http\u0060 file).\r\n\r\n    But: The swagger document reports **\u0060\u0022application/json\u0022\u0060** for such responses still, so there\u0027s\r\n    inconsistency between OpenAPI documentation and the actual API behavior.  \r\n\r\n    FYI: This problem was the same with SwashBuckle, so with that package I needed to make a\r\n    _\u0022OperationFilter\u0022_ class to get the documentation right. I was able to do the same thing\r\n    using an \u0060OperationTransformer\u0060 in \u0060Microsoft.AspNetCore.OpenApi\u0060, but this should ideally be\r\n    handled by the package out-of-the-box.  \r\n\r\n4. **Inclusion of XML comments for extended descriptions in OpenAPI documents**\r\n    SwashBuckle capabilities included extraction of XML comments from Controller action methods \r\n    with parameters and returns and add this information to the OpenAPI documents. I can not see\r\n    that this is a built-in feature of \u0060Microsoft.AspNetCore.OpenApi\u0060 yet.\r\n\r\n5. **Removing redundant response content-types**  \r\n    In a standard AspNetCore API, OpenAPI documents\u0027 response status content will have 3 content-types;\r\n    \u0060\u0022text/plain\u0022\u0060, \u0060\u0022application/json\u0022\u0060 and \u0060\u0022text/json\u0022\u0060.\r\n    In a well-designed JSON API, only \u0060\u0022application/json\u0022\u0060 is desirable/required.\r\n    I have added code to my repository to remove the redundant output formatters and media types\r\n    [here](https://github.com/josundt/aspnetcore-sampleopenapi/blob/master/src/ServiceCollectionExtensions.cs#L90-L106).\r\n    I think this is typically what people want in their APIs, and I suggest that something similar\r\n    is added to your [documentation](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/aspnetcore-openapi?view=aspnetcore-9.0\u0026tabs=visual-studio). \r\n\r\n6. **Complexity of using OpenAPI with API versioning**  \r\n    The code in my \u0060OpenApiOptionsExtensions.cs\u0060 is more or less an exact copy of what I found in\r\n    the eShop PR.  This code is in my opinion quite low-level and it will probably be hard to get\r\n    this right for consumers/customers. I spent quite some time myself before finding those magical \r\n    lines that glues it all together. This needs be simplified somehow; what about including\r\n    code in the package and calling the extension method\r\n    \u0060UseDefaultVersioning(this OpenApiOptions options, ...)\u0060 or similar?   \r\n\r\n7. **Documentation for API versioning**   \r\n    The integration between \u0060Microsoft.AspNetCore.OpenApi\u0060 and \u0060Asp.Versioning.Mvc.ApiExplorer\u0060\r\n    needs better documentation on your [documentation page](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/aspnetcore-openapi?view=aspnetcore-9.0\u0026tabs=visual-studio)\r\n    before the package is made generally available for the .NET 9.0 release. ",
        "createdAt": "2024-06-26T16:19:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2192103851"
      },
      {
        "id": "IC_kwDOAQzde86DdkR8",
        "parentId": null,
        "author": "josundt",
        "content": "@captainsafia I have not received any feedback on this.\r\nIn the comment above I have described the currently missing features \u0060Microsoft.AspNetCore.OpenApi\u0060 preventing a complete migration from SwashBuckle in our products.\r\nCould you please share some information on whether or not each of these features are on the roadmap for the final .NET 9.0 release?",
        "createdAt": "2024-07-03T09:31:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2205566076"
      },
      {
        "id": "IC_kwDOAQzde86Ddmrh",
        "parentId": null,
        "author": "martincostello",
        "content": "\u003E Schema duplication\r\n\r\nThis was implemented by #56175 and initial support will be in preview 6, with further changes in preview 7.\r\n\r\nOther things you\u0027ve mentioned such as XML documentation support and versioning are in the OpenAPI epic: #54598\r\n",
        "createdAt": "2024-07-03T09:36:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2205575905"
      },
      {
        "id": "IC_kwDOAQzde86ESLyO",
        "parentId": null,
        "author": "captainsafia",
        "content": "@josundt Apologies for the delay here! My focus has been on dev-related work over the past few weeks as we barrel closer to RC1. \uD83D\uDE04\r\n\r\n\u003E Schema duplication\r\n\r\nI think @martincostello provided a great answer here. This space has been evolving in reaction to customer feedback. I\u0027d recommend trying the latest nightly bits of the package to see where things currently are and sharing your feedback there.\r\n\r\n\u003E ProblemDetails Content-Type\r\n\r\nThe issue that you\u0027re describing here is a limitation of the way that \u0060ProblemDetails\u0060 responses are modeled in the ApiExplorer metadata. By default, if you are returning a \u0060ProblemDetails\u0060-type result from an API (either controller-based or minimal APIs), we will not add any metadata to the ApiExplorer that describes what that result would be.\r\n\r\nThis is primarily because we don\u0027t have a good way of inferring the HTTP status code that your error result is associated with, which is the primary key for response schemas in both ApiExplorer and OpenAPI. To fix this, you need to clue the famework in on what type of response your ProblemDetails is assocaited with by adding the metadata yourself (either via \u0060ProducesResponseType\u0060 attributes or via a \u0060ProducesProblem\u0060 method call on a minimal API).\r\n\r\nAs a converse to this, you\u0027ll observe that the ValidationProblem type in TypedResults _does_ provide the correct metadata by default. That\u0027s because there, we can make an inference that your status code is 4xx based on the semantics of the platform.\r\n\r\nTL;DR: The lack of specificity \u0060ProblemDetails\u0060 here is intentional and is a deficiency in the underlying ApiExplorer layer and our ability to make automatic inferences about result types. \r\n\r\nhttps://github.com/dotnet/aspnetcore/issues/52424 is another bug report around this in case you\u0027d like to thumbs that up or chime in there.\r\n\r\n\u003E Inclusion of XML comments for extended descriptions in OpenAPI documents\r\n\r\nYep, XML support isn\u0027t in yet. I\u0027ve been playing around in this space though and hope to post an update on this issue (https://github.com/dotnet/aspnetcore/issues/39927) for it soon.\r\n\r\n\u003E Removing redundant response content-types\r\n\r\nI think the scenario that you are describing here is specific to controller-based APIs in MVC, where users have more flexibility to configure output formatters than they do in minimal APIs. In minimal APIs, the only content-types we\u0027ll automatically infer are \u0060application/json\u0060 and \u0060text/plain\u0060. \r\n\r\nIn this case, ApiExplorer is doing its best to present an accurate representation of what outputs your API _might_ return based on MVC\u0027s default output formatting configuration (which supports writing to multiple response content-types by default).\r\n\r\nIn this case, the action that you\u0027ve taken is one way to clue in the system that you want to restrict the types of response content-types that are supported. Explicitly setting the \u0060Produces\u0060 attribute on your handler is another way to do this.\r\n\r\nWith respect to documenting this officially, we do cover it in [this section of the docs](https://learn.microsoft.com/en-us/aspnet/core/web-api/advanced/formatting?view=aspnetcore-8.0#content-negotiation-2). I\u0027m a little hesitant to include it in the top-level OpenAPI-docs given it is (a) MVC-specific and (b) more relevant to output formatting/content negotation than it is OpenAPI.\r\n\r\n\u003E This needs be simplified somehow; what about including\r\ncode in the package and calling the extension method\r\nUseDefaultVersioning(this OpenApiOptions options, ...) or similar?\r\n\r\nYep, this is a good observation. You might\u0027ve noticed that the same transformation code is applied in the Asp.Versioning samples for both Swashbuckle and Microsoft.AspNetCore.OpenApi. I agree with you that it probably makes sense for the Asp.Versioning package to provide these as first-class APIs for both implementations so that users don\u0027t have to copy them into application code. Would you be able to file an issue on the Asp.Versioning repo for this?",
        "createdAt": "2024-07-10T02:22:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2219359374"
      },
      {
        "id": "IC_kwDOAQzde86IaoZP",
        "parentId": null,
        "author": "josundt",
        "content": "Hello. I have just updated .NET and Microsoft.AspNetCore.OpenApi to 9.0 preview 7, and I see more improvements.\r\nI have some new feedback related to the original findings/feedback comments (see list above):\r\n\r\n1. (Schema duplication)\r\n    It looks like this is mostly sorted out now; schemas are defined under \u0060/#/components/schemas\u0060 and all references under \u0060/#/paths\u0060 are JSON pointer references to the definitions. \r\n\r\n    **Remarks:** I noticed that .NET collection types (that end up as OpenAPI array types) are \r\n    added as individual Schema definitions under \u0060/#/components/schemas\u0060. \r\n    \r\n    [Link to schema in generated SampleAPI document](https://github.com/josundt/aspnetcore-sampleopenapi/blob/master/src/AspNetCore.SampleOpenApi_v2.0.json#L193-L198)\r\n    \r\n    I don\u0027t think it is desirable to have OpenAPI array types as individually defined schemas under \u0060/#/components/schemas\u0060.\r\n    \r\n    SwashBuckle did not add separate schema definitions for \u0060IEnumerable\u003CT\u003E\u0060 (or \u0060IEnumerable\u0060) types, but did it for all \r\n    other generic .NET types.\r\n\r\n2. (ProblemDetails Content-Type)\r\n    I understood that my request to set the correct response content-type for \u0060ProblemDetails\u0060 responses is not possible\r\n    due to...\r\n    \u003E [...] a limitation of the way that ProblemDetails responses are modeled in the ApiExplorer metadata.\r\n    \r\n    In my Sample API I have therefore added an \u0060IOperationTransformer\u0060 that fixes this problem.\r\n\r\n    [Link to SampleAPI transformer](https://github.com/josundt/aspnetcore-sampleopenapi/blob/master/src/Transformers/ProblemDetailsOperationTransformer.cs)\r\n    \r\n    FYI: I have earlier made a similar fix for SwashBuckle using their \u0060IOperationFilter API\u0060.\r\n    \r\n    **Remarks:** With the SwashBuckle \u0022filters\u0022 API it was easy to find an OpenApiSchema\u0027s  correlated .NET (CLR) type. \r\n    With the \u0060Microsoft.AspNetCore.OpenApi\u0060 \u0022transformers\u0022 API I could not figure out a way to get the correlated .NET type.\r\n    \r\n    When writing code to detect responses that uses ProblemDetails in the content schema, I could with SwashBuckle simply \r\n    check whether the response content schema\u0027s correlated .NET type \u0060is ProblemDetails\u0060.\r\n    With Microsoft.AspNetCore.OpenApi, I need to check the OpenApiSchema\u0027s \u0022shape\u0022 - check whether \u0060type == \u0022object\u0022\u0060\r\n    and whether the properties has the expected property names/types (as you can see in the code).\r\n    This is less precise, less performant and more complicated than with SwashBuckle.\r\n    \r\n    Would it be possible to add a \u0060CorrelatedType\u0060 property (or similar) to the \u0060OpenApiSchema\u0060 class to get the \r\n    .NET CLR \u0060Type\u0060?\r\n    Or is there already an existing way to get this correlated CLR type - it is just me not knowing how to get it?\r\n\r\n    And: I think you should consider to include a transformer similar to the one I wrote with the NuGet package \r\n    including an easy way of toggling it on/off. I believe most people would prefer if \u0060ProblemDetails\u0060 responses had \r\n    the correct content-type.\r\n\r\n3. (Inclusion of XML comments for extended descriptions in OpenAPI documents)\r\n   Still waiting for this - required before I can migrate from SwashBuckle, \r\n   \r\nBTW: I have no new feedback for 4., 5. and 6.\r\n    ",
        "createdAt": "2024-08-14T13:02:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2288682575"
      },
      {
        "id": "IC_kwDOAQzde86Ia17I",
        "parentId": null,
        "author": "martincostello",
        "content": "\u003E Or is there already an existing way to get this correlated CLR type - it is just me not knowing how to get it?\r\n\r\nIn a schema transformer you access the \u0060OpenApiSchemaTransformerContext.JsonTypeInfo\u0060 property. [Here\u0027s an example](https://github.com/martincostello/openapi-extensions/blob/6b5b0a4b85cc5135fcc00377ce4d4d2f0f55470c/src/OpenApi.Extensions/Transformers/AddXmlDocumentationTransformer.cs#L31).\r\n",
        "createdAt": "2024-08-14T13:24:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2288737992"
      },
      {
        "id": "IC_kwDOAQzde86IccuH",
        "parentId": null,
        "author": "josundt",
        "content": "@martincostello The example you sent me is from a _schema_ transformer, not from an _operation_ transformer.\r\n\r\nI\u0027m trying to *change the content-type for an operation response**; that can only be done through _operation_ or _document_ transformers, correct?",
        "createdAt": "2024-08-14T15:49:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2289159047"
      },
      {
        "id": "IC_kwDOAQzde86IclS1",
        "parentId": null,
        "author": "martincostello",
        "content": "[Here\u0027s an operation transformer from the same repo](https://github.com/martincostello/openapi-extensions/blob/b4a89c9f0fba87bc3af7b05875b3ac7eead1374c/src/OpenApi.Extensions/Transformers/AddExamplesTransformer.cs#L35) - the information you\u0027re looking for can be found via \u0060OpenApiOperationTransformerContext.Description\u0060 to get the \u0060ApiDescription\u0060 instance, which will have lots of information in it. If you take a look at the repo you\u0027ll see I\u0027m doing lots of type-based transforms.",
        "createdAt": "2024-08-14T15:59:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2289194165"
      },
      {
        "id": "IC_kwDOAQzde86JnnGo",
        "parentId": null,
        "author": "josundt",
        "content": "@martincostello I finally had time to have another look and this time figured it out. Thanks for guiding me in the right direction!\uD83D\uDC4D\r\n\r\n_PS! I hope the way I map items in \u0060OpenApiOperationTransformerContext.Description.SupportedResponseTypes\u0060 to responses in \u0060OpenApiOperation.Responses\u0060 is correct [link](https://github.com/josundt/aspnetcore-sampleopenapi/blob/master/src/Transformers/ProblemDetailsOperationTransformer.cs?plain=1#L24-L28)._\r\n\r\nOn another note; I\u0027m awaiting feedback to my comment about the current behavior where individual schema definitions are created for collection types:\r\n\u003E I don\u0027t think it is desirable to have OpenAPI array types as individually defined schemas under /#/components/schemas.\r\n\u003E SwashBuckle did not add separate schema definitions for IEnumerable\u003CT\u003E (or IEnumerable) types, but did it for all\r\n\u003E other generic .NET types.\r\n\r\nI assume there\u0027s a plan to do change this, right?",
        "createdAt": "2024-08-25T14:03:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2308862376"
      },
      {
        "id": "IC_kwDOAQzde86JnqZf",
        "parentId": null,
        "author": "martincostello",
        "content": "From what I\u0027ve seen, arrays seem to be inlined if the elements aren\u0027t re-used anywhere else, but if there\u0027s commonality they\u0027re extracted out into their own schema reference so it goes from _schema that is an array of items_ to _array of schema reference_.\r\n",
        "createdAt": "2024-08-25T14:34:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2308875871"
      },
      {
        "id": "IC_kwDOAQzde86J6x_b",
        "parentId": null,
        "author": "josundt",
        "content": "@martincostello I think we are talking about two different things here, I am not talking about the array **items**, but the array itself.\r\nIn my test project, a schema called \u0060ArrayOfWeatherForecast\u0060 is extracted as a schema definition (see this [link](https://github.com/josundt/aspnetcore-sampleopenapi/blob/master/src/AspNetCore.SampleOpenApi_v2.0.json#L193-L198)). \r\n\r\nArray schemas (the arrays, not the items) should in my opinion always be inlined even if there\u0027s \u0022commonality\u0022.\r\nAny .NET generic collection type (derived from \u0060IEnumerable\u003C\u003E\u0060) for the \u0060WeatherForecast\u0060 class, I expect \u0060WeatherForecast\u0060 to be extracted to \u0060/#/components/schemas\u0060, but the array schema for the IEnumerable\u003C\u003E should be inlined. \r\nThis is how it works with SwashBuckle.\r\n\r\nPS! For other .NET generic types; types not derived from \u0060IEnumerable\u003CT\u003E\u0060, I do expect them to be extracted as schema definitions though. Example: .NET \u0060QueryResult\u003CWeatherForecast\u003E\u0060 =\u003E OpenApi schema \u0060WeatherForecastQueryResult\u0060 etc.\r\n\r\nSwashbuckle consistently extracts the following .NET types as schema definitions regardless of \u0022commonality\u0022; -regardless of whether schemas are referenced single/multiple times:\r\n* Enums\r\n* Generic types not deriving from IEnumerable\u003C\u003E\r\n* Classes\r\n* Interfaces\r\n* (Potentially structs/records/similar constructs - have not tested/used it myself).  \r\n\r\nWhen considering which types should be \u0022extracted\u0022 to \u0060/#/components/schemas\u0060 and which should be inlined, the generated OpenAPI document becomes more well-structured, more optimized for human readability and document navigation when the decision is made by evaluating on the .NET type (see list above) rather than the references count (\u0022commonality\u0022). \r\n\r\nThis is also how it works with SwashBuckle.",
        "createdAt": "2024-08-28T01:07:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2313887707"
      },
      {
        "id": "IC_kwDOAQzde86J8tBW",
        "parentId": null,
        "author": "martincostello",
        "content": "I think we are talking about the same thing. Here are some examples of the scenarios I was referring to from my snapshot tests.\n\nA property which is an array of a schema: https://github.com/martincostello/aspnetcore-openapi/blob/365c761581473f47212d91bb85bfb51fc4993666/tests/TodoApp.Tests/OpenApiTests.Schema_Is_Correct_schemaUrl%3Dopenapi.verified.txt#L329-L335\n\nA schema that is an array itself, whose items are a schema reference: https://github.com/martincostello/openapi-extensions/blob/3331a70264b302e855c42278dc699f4c370473e6/tests/OpenApi.Extensions.Tests/IntegrationTests.Schema_Is_Correct_For_Classes.verified.txt#L117-L122\n\nA schema that is an array itself, whose items are defined inline and are not a reference: https://github.com/martincostello/openapi-extensions/blob/3331a70264b302e855c42278dc699f4c370473e6/tests/OpenApi.Extensions.Tests/IntegrationTests.Schema_Is_Correct_For_Records.verified.txt#L52-L73\n\nI believe the difference in how they are rendered depends on whether the \u0022shapes\u0022 are used more than once. When two identical schemas are found, they\u0027re extracted out to a common component for reference. You\u0027re right that it\u0027s different behaviour to Swashbuckle, as there as nothing it compared for equivalence with regard to the shape of the schemas - it\u0027s entirely driven by the runtime types used by the APIs implementation.\n\nMy understanding is that this is an intentional design decision, but the team can answer that.",
        "createdAt": "2024-08-28T06:06:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2314391638"
      },
      {
        "id": "IC_kwDOAQzde86J-Lta",
        "parentId": null,
        "author": "josundt",
        "content": "@martincostello So to round things up, whether a schema should be extracted to \u0060/#/components/schemas\u0060 is decided the following way:\r\n* \u0060Microsoft.AspNetCore.OpenApi\u0060: Whether the .NET type is referenced across more than one request param/body, response or other schema (latest .NET 9 preview release).  \r\n\r\n* \u0060SwashBuckle.AspNetCore\u0060: Certain .NET types are extracted: .NET enums and complex types excl. collections (single vs multiple references not regarded).\r\n\r\nI guess both solutions are technically correct, but while the Microsoft uses a traditional \u0022circular reference handling\u0022 approach, SwashBuckle\u0027s generated documents become **more deterministic** and **well-structured**, with **improved human readability** and **discoverability**.\r\n \r\nExample: I know that in a SwashBuckle generated document, the complete, alphabetically sorted list of complex type (\u002Benum) schemas is found under \u0060/#/components/schemas\u0060.\r\n\r\nThese document characteristics are important for developers when they review validity/quality of OpenAPI documents generated for the AspNetCore APIs that they\u0027re writing, but also when they inspect OpenAPI documents for other APIs consumed by software that they\u0027re writing.\r\n\r\nI hope you find my perspectives valuable and I\u0027m hoping you may reconsider the approach. \r\nI believe strongly that most developers will favor the structure of the documents created using SwashBuckle\u0027s approach.",
        "createdAt": "2024-08-28T09:15:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2314779482"
      },
      {
        "id": "IC_kwDOAQzde86J_FQK",
        "parentId": null,
        "author": "martincostello",
        "content": "\u003E I\u0027m hoping you may reconsider the approach\r\n\r\nThis isn\u0027t something to pitch to me - I\u0027m just a fellow member of the ASP.NET Core community and user-base.\r\n\r\n@captainsafia Thoughts on the above?",
        "createdAt": "2024-08-28T11:07:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2315015178"
      },
      {
        "id": "IC_kwDOAQzde86KWq4x",
        "parentId": null,
        "author": "josundt",
        "content": "@captainsafia Any feedback on my perspectives above?\r\n\r\n I\u0027d like to add one more argument: \u0022Extracted\u0022 schemas are **_named_** which provides additional valuable information compared to \u0022inlined\u0022 schemas. It makes it easier to correlate swagger schemas to their .NET complex/enum source types.  ",
        "createdAt": "2024-08-30T13:06:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2321198641"
      },
      {
        "id": "IC_kwDOAQzde86aabzc",
        "parentId": null,
        "author": "sgluca",
        "content": "I am migrating from \u0060Swashbuckle\u0060 to the \u0060Microsoft.AspNetCore.OpenAPI\u0060 package for generating API documentation.\n\nIn my project, I have an API structured with controllers, each assigned to a specific version using attributes. However, API versions are not explicitly defined in \u0060Program.cs\u0060. With Swashbuckle, the documentation for all versions was generated automatically at runtime.\n\nWhen using \u0060Microsoft.AspNetCore.OpenAPI\u0060, it seems that I need to explicitly specify each version in the \u0060AddOpenAPI()\u0060 method. Is there a way to configure the package to automatically detect and generate documentation for all versions in my project, without manually specifying them?\n\nThank you in advance for your support!",
        "createdAt": "2025-01-14T17:19:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2590620892"
      },
      {
        "id": "IC_kwDOAQzde86bzqMg",
        "parentId": null,
        "author": "mikekistler",
        "content": "@sgluca Are you using the Asp.Versioning package to implement API versioning? If so, then currently the answer to your question is no. There is no way (that I know of) for the built-in OpenAPI generation to detect the versions that are configured and generate the corresponding documents. I recently went through this process with the eShop demo app and I had to specify the API versions explicitly with separate calls to AddOpenApi.\n\nIt\u0027s possible this could change in the future but for right now that is the only solution available.",
        "createdAt": "2025-01-25T15:54:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2614010656"
      },
      {
        "id": "IC_kwDOAQzde86bztLN",
        "parentId": null,
        "author": "mikekistler",
        "content": "@josundt Regarding the main subject of this issue, I think we have demonstrated with the eShop demo app that the .NET 9 OpenAPI generation does integrate with Asp.Versioning to support API versioning. Admittedly there as some aspects of this that could be improved but the basic functionality seems to be all there.\n\nThere were a number of other points raised here -- and thank you for all this feedback -- and most of these are either fixed before the 9.0 release (e.g. handling of collection schemas), will be fixed shortly (duplicate schemas), or tracked in other issues (content-types for problem details).\n\n- https://github.com/dotnet/aspnetcore/issues/59427\n- https://github.com/dotnet/aspnetcore/issues/58574\n\nI\u0027m going to mark this as \u0022Needs Author Feedback\u0022 to give you an opportunity to point out anything that you think is not covered.",
        "createdAt": "2025-01-25T16:32:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2614022861"
      },
      {
        "id": "IC_kwDOAQzde86bztNh",
        "parentId": null,
        "author": "dotnet-policy-service",
        "content": "Hi @josundt. We have added the \u0022Needs: Author Feedback\u0022 label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.\n\u003C!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003E",
        "createdAt": "2025-01-25T16:32:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56314#issuecomment-2614023009"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86NIbbs",
    "title": "In AoT/trimmed Web APIs, default values of primary constructor parameters inside [AsParameters] record structs are ignored",
    "url": "https://github.com/dotnet/aspnetcore/issues/56396",
    "createdAt": "2024-06-22T12:33:11Z",
    "lastUpdated": "2024-09-03T19:58:25Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nThe following short code sample shows several scenarios of using \u0060app.MapGet()\u0060 with default parameter values.\r\nPlease note the comments after each \u0060app.MapGet()\u0060.\r\n\r\n\u0060Program.cs\u0060\r\n\u0060\u0060\u0060csharp\r\nusing System.Text.Json.Serialization;\r\n\r\nvar builder = WebApplication.CreateSlimBuilder(args);\r\n\r\nbuilder.Services.ConfigureHttpJsonOptions(\r\n    options =\u003E options.SerializerOptions.TypeInfoResolverChain.Insert(0, AppJsonSerializerContext.Default));\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022/test1/{text}\u0022, (string text, int number = 1) =\u003E $\u0022{text} - {number}\u0022); // works\r\napp.MapGet(\u0022/test2/{text}\u0022, ([AsParameters] PrmsClass prms) =\u003E prms); // works\r\napp.MapGet(\u0022/test3/{text}\u0022, ([AsParameters] PrmsStruct prms) =\u003E prms); // throws when Number is not provided\r\n\r\napp.Run();\r\n\r\nsealed record PrmsClass(string Text, int Number = 1);\r\nreadonly record struct PrmsStruct(string Text, int Number = 1);\r\n\r\n[JsonSerializable(typeof(PrmsClass))]\r\n[JsonSerializable(typeof(PrmsStruct))]\r\npartial class AppJsonSerializerContext : JsonSerializerContext\r\n{\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u0060WebApiAot.csproj\u0060\r\n\u0060\u0060\u0060xml\r\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk.Web\u0022\u003E\r\n\r\n  \u003CPropertyGroup\u003E\r\n    \u003CTargetFramework\u003Enet8.0\u003C/TargetFramework\u003E\r\n    \u003CNullable\u003Eenable\u003C/Nullable\u003E\r\n    \u003CImplicitUsings\u003Eenable\u003C/ImplicitUsings\u003E\r\n    \u003CInvariantGlobalization\u003Etrue\u003C/InvariantGlobalization\u003E\r\n    \u003CPublishAot\u003Etrue\u003C/PublishAot\u003E\r\n  \u003C/PropertyGroup\u003E\r\n\r\n\u003C/Project\u003E\r\n\u0060\u0060\u0060\r\n\r\nBoth \u0060PrmsClass\u0060 and \u0060PrmsStruct\u0060 have a default value for the parameter \u0060Number\u0060 but according to \u0060GeneratedRouteBuilderExtensionsCore\u0060, in case of the class this parameter is considered optional whereas for \u0060PrmsStruct\u0060 it is mandatory.\r\n\r\nParsing logic for \u0060PrmsClass.Number\u0060:\r\n\u0060\u0060\u0060csharp\r\n// Endpoint Parameter: Number (Type = int, IsOptional = True, IsParsable = True, IsArray = False, Source = RouteOrQuery)\r\nvar Number_raw = Number_RouteOrQueryResolver(httpContext);\r\nvar Number_temp = Number_raw.Count \u003E 0 ? (string?)Number_raw : null;\r\nglobal::System.Int32 Number_parsed_temp = default;\r\nif (GeneratedRouteBuilderExtensionsCore.TryParseExplicit\u003Cint\u003E(Number_temp!, CultureInfo.InvariantCulture, out var Number_temp_parsed_non_nullable))\r\n{\r\n    Number_parsed_temp = Number_temp_parsed_non_nullable;\r\n}\r\nelse if (string.IsNullOrEmpty(Number_temp))\r\n{\r\n    Number_parsed_temp = 1;\r\n}\r\nelse\r\n{\r\n    wasParamCheckFailure = true;\r\n}\r\nint Number_local = Number_parsed_temp!;\r\n\r\nvar prms_local = new global::PrmsClass(Text_local, Number_local);\r\n\u0060\u0060\u0060\r\n\r\nParsing logic for \u0060PrmsStruct.Number\u0060:\r\n\u0060\u0060\u0060csharp\r\n// Endpoint Parameter: Number (Type = int, IsOptional = False, IsParsable = True, IsArray = False, Source = RouteOrQuery)\r\nvar Number_raw = Number_RouteOrQueryResolver(httpContext);\r\nif (Number_raw is StringValues { Count: 0 })\r\n{\r\n    wasParamCheckFailure = true;\r\n    logOrThrowExceptionHelper.RequiredParameterNotProvided(\u0022int\u0022, \u0022Number\u0022, \u0022route or query string\u0022); // throws here\r\n}\r\nvar Number_temp = (string?)Number_raw;\r\nif (!GeneratedRouteBuilderExtensionsCore.TryParseExplicit\u003Cint\u003E(Number_temp!, CultureInfo.InvariantCulture, out var Number_parsed_temp))\r\n{\r\n    if (!string.IsNullOrEmpty(Number_temp))\r\n    {\r\n        logOrThrowExceptionHelper.ParameterBindingFailed(\u0022int\u0022, \u0022Number\u0022, Number_temp);\r\n        wasParamCheckFailure = true;\r\n    }\r\n}\r\nint Number_local = Number_parsed_temp!;\r\n\r\nvar prms_local = new global::PrmsStruct { Text = Text_local, Number = Number_local };\r\n\u0060\u0060\u0060\r\n\r\n### Expected Behavior\r\n\r\nThe generated code accounts for the default value of \u0060PrmsStruct.Number\u0060 and treats it as an optional parameter.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.302\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "NativeAOT",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86KuCXi",
        "parentId": null,
        "author": "eerhardt",
        "content": "@captainsafia - is this a known issue?",
        "createdAt": "2024-09-03T19:58:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56396#issuecomment-2327324130"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86NMY_S",
    "title": "WebApplicationFactory should enable ValidateScopes and ValidateOnBuild by default regardless of environment",
    "url": "https://github.com/dotnet/aspnetcore/issues/56411",
    "createdAt": "2024-06-23T19:12:02Z",
    "lastUpdated": "2024-08-22T02:19:06Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nIn the context of \u0060WebApplicationFactory\u0060 which is intended for testing, the service provider options \u0060ValidateScopes\u0060 and \u0060ValidateOnBuild\u0060 are not specifically set, and instead rely on the environment to be Development.\r\n\r\n**API Code**: When run in dev mode this throws exception due to invalid DI setup.\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddSingleton\u003CSingletonService\u003E();\r\nbuilder.Services.AddScoped\u003CScopedService\u003E();\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\u0022/hello\u0022, () =\u003E \u0022world\u0022);\r\n\r\napp.Run();\r\n\r\npublic class SingletonService(ScopedService scoped) { }\r\npublic class ScopedService { }\r\npublic partial class Program { }\r\n\u0060\u0060\u0060\r\n\r\n**Test Code**: E2E tests pass\r\n\u0060\u0060\u0060csharp\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.AspNetCore.Mvc.Testing;\r\n\r\nnamespace TestProject;\r\n\r\npublic class UnitTest1\r\n{\r\n    [Fact]\r\n    public async Task Hello()\r\n    {\r\n        var api = new TestApi();\r\n        using var client = api.CreateClient();\r\n        var response = await client.GetAsync(\u0022/hello\u0022);\r\n        response.EnsureSuccessStatusCode();\r\n        var responseContent = await response.Content.ReadAsStringAsync();\r\n        Assert.Equal(\u0022world\u0022, responseContent);\r\n    }\r\n}\r\n\r\npublic class TestApi : WebApplicationFactory\u003CProgram\u003E\r\n{\r\n    protected override void ConfigureWebHost(IWebHostBuilder builder)\r\n    {\r\n        builder.UseEnvironment(\u0022test\u0022); // \u003C-- In E2E test mode I want a different environment\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nThe options \u0060ValidateScopes\u0060 and \u0060ValidateOnBuild\u0060 should be true by default when using \u0060WebApplicationFactory\u003CTEntryPoint\u003E\u0060 which is designed for testing.\r\n\r\n### Additional context\r\n\r\nThis can easily be done manually via the following code. It\u0027s just unexpected that this isn\u0027t the default.\r\n\u0060\u0060\u0060csharp\r\n    protected override void ConfigureWebHost(IWebHostBuilder builder)\r\n    {\r\n        builder.UseEnvironment(\u0022test\u0022);\r\n        builder.UseDefaultServiceProvider(options =\u003E\r\n        {\r\n            options.ValidateScopes = true;\r\n            options.ValidateOnBuild = true;\r\n        });\r\n    }\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "feature-mvc-testing",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86I9A9j",
        "parentId": null,
        "author": "captainsafia",
        "content": "@andrewjsaid Thanks for filing this issue! The default behavior that you see here is a result of logic that is included in the [WebApplicationBuilder\u0027s implemenetation](https://source.dot.net/#Microsoft.AspNetCore/WebApplicationBuilder.cs,229). As you observed, it\u0027s gated behind an \u0060IsDevelopment\u0060 check so modifying the environment name under test breaks this default behavior.\r\n\r\nWe\u0027re planning on doing a round of improvements for the integration testing area soon so I\u0027m marking this as something we could potentially look into as part of the workstream.\r\n\r\nFor now, I\u0027m sticking this in the backlog given there is a feasible workaround for the issue.",
        "createdAt": "2024-08-19T23:36:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56411#issuecomment-2297696099"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86NWExk",
    "title": "Investigate perf improvements for ProblemDetailsService interactions in ProblemHttpResult",
    "url": "https://github.com/dotnet/aspnetcore/issues/56439",
    "createdAt": "2024-06-25T00:46:53Z",
    "lastUpdated": "2024-06-27T16:24:17Z",
    "body": "Follow up to https://github.com/dotnet/aspnetcore/pull/51464#discussion_r1384382775.\r\n\r\nIn \u0060ValidationProblem\u0060 and \u0060ProblemHttpResult\u0060, we use the following to check if the \u0060ProblemDetailsService\u0060 is able to construct a \u0060ProblemDetails\u0060 object:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/7aa68a31f5a460c5dab3d134621e8bb9eed51b0b/src/Http/Http.Results/src/ProblemHttpResult.cs#L62-L64\r\n\r\nWe should investigate if it is possible to avoid allocating a context object and removing the additional overhead of the async calls from this codepath.\r\n\r\nPrior to that, we should do some profiling to measure what the additional impact here is.",
    "upvotes": 0,
    "labels": [
      "Perf",
      "feature-problem-details",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86N6aa9",
    "title": "Editor quick help link goes to generic landing page for error rather than the page for the error (Code analysis)",
    "url": "https://github.com/dotnet/aspnetcore/issues/56514",
    "createdAt": "2024-06-28T17:47:41Z",
    "lastUpdated": "2024-06-28T17:49:54Z",
    "body": "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Editor-quick-help-link-goes-to-generic-l/10687603)._\n\n---\n### Repo Steps\n\n1.  Open an aspire api project\n2.  Add a new route with a parameter (Note: This code is incomplete but that shouldn\u0027t impact the bug indeed the help documentation gives an example of what needs to be done to complete the code.)\n\n\u0060\u0060\u0060  \napp. MapGet(\u0022summary/{Id}\u0022, () =\u003E\n{\n    return summaryFactory.Get(Id);\n});\n  \n\u0060\u0060\u0060\n\n1.  Hover over the \\\u0060{Id}\u2019 for the quick help\n2.  Click on the help link\n\n![image.png](https://aka.ms/dc/image?name=Bba53243b32404047bf3f83760268f4ff638544764137049277_20240620-033332-image.png\u0026tid=ba53243b32404047bf3f83760268f4ff638544764137049277)\n\n### Expected\n\nOpen browser at the documentation for that error: [https://learn.microsoft.com/en-us/aspnet/core/diagnostics/asp0018?view=aspnetcore-8.0](https://learn.microsoft.com/en-us/aspnet/core/diagnostics/asp0018?view=aspnetcore-8.0).\n\n### Actual\n\nBrowser opens at the generic landing page [https://learn.microsoft.com/en-us/aspnet/core/diagnostics/code-analysis?view=aspnetcore-8.0](https://learn.microsoft.com/en-us/aspnet/core/diagnostics/code-analysis?view=aspnetcore-8.0).\n\n---\n### Original Comments\n\n#### Feedback Bot on 6/20/2024, 06:36 PM: \n\n(private comment, text removed)\n#### Feedback Bot on 6/24/2024, 02:54 AM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)",
    "upvotes": 0,
    "labels": [
      "bug",
      "analyzer",
      "Author: Migration Bot :robot:",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86Pv36A",
    "title": "Investigate and polish perf in OpenAPI pipeline",
    "url": "https://github.com/dotnet/aspnetcore/issues/56829",
    "createdAt": "2024-07-16T17:31:43Z",
    "lastUpdated": "2024-08-14T05:41:48Z",
    "body": "We introduced microbenchmarks to the new OpenAPI-generation implementation in preview4. Since then, we\u0027ve introduced a few more features to the implementation that have perf impacts (more transformers, $ref support, recursive schema transformers). This issue tracks doing a perf analysis on the implementation after all these changes are in to assess impact and trade-offs of making improvements here.\r\n\r\nHere\u0027s the baseline for numbers run against https://github.com/dotnet/aspnetcore/commit/28acf62c6f5d081fad40d7b0539bcf0b2cf81b17 for our current set of benchmarks.\r\n\r\n|           Method | EndpointCount |        Mean |     Error |    StdDev |     Op/s |    Gen 0 |   Gen 1 | Gen 2 | Allocated |\r\n|----------------- |-------------- |------------:|----------:|----------:|---------:|---------:|--------:|------:|----------:|\r\n| **GenerateDocument** |            **10** |    **366.4 \u03BCs** |   **5.36 \u03BCs** |   **5.74 \u03BCs** | **2,729.52** |   **3.9063** |       **-** |     **-** |    **694 KB** |\r\n| **GenerateDocument** |           **100** |  **3,365.4 \u03BCs** |  **29.89 \u03BCs** |  **27.96 \u03BCs** |   **297.14** |  **46.8750** | **15.6250** |     **-** |  **6,295 KB** |\r\n| **GenerateDocument** |          **1000** | **37,951.0 \u03BCs** | **228.55 \u03BCs** | **202.61 \u03BCs** |    **26.35** | **200.0000** |       **-** |     **-** | **62,314 KB** |\r\n\r\n|                    Method | ElementCount |     Mean |   Error |  StdDev |        Op/s | Gen 0 | Gen 1 | Gen 2 | Allocated |\r\n|-------------------------- |------------- |---------:|--------:|--------:|------------:|------:|------:|------:|----------:|\r\n| OpenApiSchema_GetHashCode |            1 | 260.1 ns | 2.38 ns | 2.11 ns | 3,844,780.4 |     - |     - |     - |         - |\r\n| OpenApiSchema_GetHashCode |           10 | 260.1 ns | 3.44 ns | 3.05 ns | 3,844,440.9 |     - |     - |     - |         - |\r\n| OpenApiSchema_GetHashCode |          100 | 262.2 ns | 0.95 ns | 0.84 ns | 3,813,767.2 |     - |     - |     - |         - |\r\n\r\n|                         Method | TransformerCount |       Mean |     Error |    StdDev |      Op/s |  Gen 0 |  Gen 1 | Gen 2 | Allocated |\r\n|------------------------------- |----------------- |-----------:|----------:|----------:|----------:|-------:|-------:|------:|----------:|\r\n|  **ActivatedOperationTransformer** |               **10** |   **2.466 \u03BCs** | **0.0377 \u03BCs** | **0.0477 \u03BCs** | **405,514.3** | **0.0534** | **0.0114** |     **-** |      **7 KB** |\r\n| OperationTransformerAsDelegate |               10 |   2.561 \u03BCs | 0.0195 \u03BCs | 0.0173 \u03BCs | 390,494.5 | 0.0496 | 0.0114 |     - |      6 KB |\r\n|   ActivatedDocumentTransformer |               10 |   2.462 \u03BCs | 0.0369 \u03BCs | 0.0288 \u03BCs | 406,209.9 | 0.0534 | 0.0114 |     - |      7 KB |\r\n|  DocumentTransformerAsDelegate |               10 |   2.399 \u03BCs | 0.0463 \u03BCs | 0.0455 \u03BCs | 416,841.0 | 0.0496 | 0.0114 |     - |      6 KB |\r\n|     ActivatedSchemaTransformer |               10 |  31.617 \u03BCs | 0.4569 \u03BCs | 0.4274 \u03BCs |  31,628.4 | 0.3662 |      - |     - |     56 KB |\r\n|    SchemaTransformerAsDelegate |               10 |  30.972 \u03BCs | 0.6155 \u03BCs | 0.6320 \u03BCs |  32,287.4 | 0.3662 |      - |     - |     55 KB |\r\n|  **ActivatedOperationTransformer** |              **100** |   **4.082 \u03BCs** | **0.0557 \u03BCs** | **0.0494 \u03BCs** | **244,954.8** | **0.0687** | **0.0153** |     **-** |      **9 KB** |\r\n| OperationTransformerAsDelegate |              100 |   3.250 \u03BCs | 0.0595 \u03BCs | 0.0497 \u03BCs | 307,655.7 | 0.0458 | 0.0076 |     - |      6 KB |\r\n|   ActivatedDocumentTransformer |              100 |   4.149 \u03BCs | 0.0428 \u03BCs | 0.0358 \u03BCs | 241,048.5 | 0.0687 | 0.0153 |     - |      9 KB |\r\n|  DocumentTransformerAsDelegate |              100 |   3.241 \u03BCs | 0.0258 \u03BCs | 0.0215 \u03BCs | 308,574.1 | 0.0496 | 0.0114 |     - |      6 KB |\r\n|     ActivatedSchemaTransformer |              100 |  38.633 \u03BCs | 0.2470 \u03BCs | 0.2190 \u03BCs |  25,884.8 | 0.4883 |      - |     - |     66 KB |\r\n|    SchemaTransformerAsDelegate |              100 |  35.940 \u03BCs | 0.4064 \u03BCs | 0.3802 \u03BCs |  27,824.2 | 0.4883 |      - |     - |     62 KB |\r\n|  **ActivatedOperationTransformer** |             **1000** |  **34.187 \u03BCs** | **0.4856 \u03BCs** | **0.4543 \u03BCs** |  **29,251.0** | **0.2441** |      **-** |     **-** |     **30 KB** |\r\n| OperationTransformerAsDelegate |             1000 |  11.128 \u03BCs | 0.0788 \u03BCs | 0.0658 \u03BCs |  89,863.8 | 0.0458 | 0.0153 |     - |      6 KB |\r\n|   ActivatedDocumentTransformer |             1000 |  36.648 \u03BCs | 0.6589 \u03BCs | 0.8332 \u03BCs |  27,286.5 | 0.2441 |      - |     - |     30 KB |\r\n|  DocumentTransformerAsDelegate |             1000 |  12.282 \u03BCs | 0.0807 \u03BCs | 0.0674 \u03BCs |  81,422.7 | 0.0458 | 0.0153 |     - |      6 KB |\r\n|     ActivatedSchemaTransformer |             1000 | 145.059 \u03BCs | 1.1951 \u03BCs | 0.9980 \u03BCs |   6,893.7 | 1.2207 | 0.2441 |     - |    164 KB |\r\n|    SchemaTransformerAsDelegate |             1000 |  72.551 \u03BCs | 0.4466 \u03BCs | 0.3959 \u03BCs |  13,783.4 | 0.7324 |      - |     - |    117 KB |",
    "upvotes": 1,
    "labels": [
      "Perf",
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86IXozP",
        "parentId": null,
        "author": "captainsafia",
        "content": "Parking this in .NET 10 planning since I anticipate any further perf optimizations will ship as part of that release.\r\n\r\nOne thing I am keen to do is examine whether we are allocating too many \u0060OpenApiSchema\u0060 objects as we construct the model ",
        "createdAt": "2024-08-14T05:41:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56829#issuecomment-2287897807"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86PwCPL",
    "title": "Warning AD0001 : Analyzer \u0027Microsoft.AspNetCore.Analyzers.RouteHandlers.RouteHandlerAnalyzer\u0027 NullReferenceException due to generics in minimal API",
    "url": "https://github.com/dotnet/aspnetcore/issues/56831",
    "createdAt": "2024-07-16T17:58:42Z",
    "lastUpdated": "2024-11-14T14:47:09Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nAspNetCore Analyzer throws warning due to usage of generics in minimal API:\r\n\r\n\u00601\u003ECSC: Warning AD0001 : Analyzer \u0027Microsoft.AspNetCore.Analyzers.RouteHandlers.Route HandlerAnalyzer\u0027 threw an exception of type \u0027System.NullReferenceException\u0027 with message \u0027Object reference not set to an instance of an object.\u0027.\u0060\r\n\n\n### Expected Behavior\n\nThis all works fine when running it, the analyzer is just not pleased with the usage of generics. Switching TEndpointInput to a concrete type such as DummyEndpointInput of course also make the warning disappear.\n\n### Steps To Reproduce\n\nhttps://github.com/madskonradsen/minimal-reproducibles/tree/main/dotnet-analyzer-warning-minimalapi-generics/MinimalAPIGenericsWarning\r\n\r\nOr simply:\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nvar app = builder.Build();\r\n\r\nstatic void UseEndpoint\u003CTEndpointInput\u003E(WebApplication app) where TEndpointInput : class\r\n{\r\n    app.MapPost(\u0022/test\u0022, (TEndpointInput data) =\u003E Results.Ok(data));\r\n}\r\n\r\nUseEndpoint\u003CDummyEndpointInput\u003E(app);\r\n\r\napp.Run();\r\n\r\npublic class DummyEndpointInput\r\n{\r\n}\r\n\u0060\u0060\u0060\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.303\n\n### Anything else?\n\n_No response_",
    "upvotes": 6,
    "labels": [
      "analyzer",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86HtxCB",
        "parentId": null,
        "author": "captainsafia",
        "content": "@madskonradsen  Thanks for reporting this issue! I resolved the stack trace for this and it looks like the \u0060DisallowNonParsableComplexTypesOnParameters\u0060 analyzer is throwing this particular error.\r\n\r\n\u0060\u0060\u0060\r\nat Microsoft.AspNetCore.Analyzers.RouteHandlers.RouteHandlerAnalyzer.\u003CDisallowNonParsableComplexTypesOnParameters\u003Eg__ResovleParameterTypeSymbol|8_2(IParameterSymbol parameterSymbol)\r\n\u0060\u0060\u0060\r\n\r\nI suspect the issue is in this chunk of code, which doesn\u0027t handle the fact that the type associated with \u0060TEndpointInput\u0060 might not have passed the \u0060INamedTypeSymbol\u0060 check.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/e31445e897e416b743f436b27cb81f3c87c56d27/src/Framework/AspNetCoreAnalyzers/src/Analyzers/RouteHandlers/DisallowNonParsableComplexTypesOnParameters.cs#L125-L131\r\n\r\nWould you be interested in opening a PR with a fix for this? I\u0027m happy to provide guidance on how to test/fix this.\r\n\r\n\r\n",
        "createdAt": "2024-08-09T00:06:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56831#issuecomment-2276921473"
      },
      {
        "id": "IC_kwDOAQzde86HutUT",
        "parentId": null,
        "author": "madskonradsen",
        "content": "Sure! Seems like a nice small task :)",
        "createdAt": "2024-08-09T05:16:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56831#issuecomment-2277168403"
      },
      {
        "id": "IC_kwDOAQzde86Hy8qM",
        "parentId": null,
        "author": "captainsafia",
        "content": "@madskonradsen Great! You can check out the [build from source document](https://github.com/dotnet/aspnetcore/blob/6276d612af5e0d1f4c8953525da9602545735c97/docs/BuildFromSource.md) for instructions on how to set up the repo for local development. You _might_ run into issues here since our repo does unique things (relies on a nightly build of the .NET SDK, builds IIS if you\u0027re on Windows, etc) but I can hopefully get it working with any issues that you run into here.\r\n\r\nAfter that, you can copy the code from your repro into a new test case [in this file](https://github.com/dotnet/aspnetcore/blob/6276d612af5e0d1f4c8953525da9602545735c97/src/Framework/AspNetCoreAnalyzers/test/RouteHandlers/DisallowNonParsableComplexTypesOnParametersTest.cs) and that should get you setup to be able to debug and apply a fix.",
        "createdAt": "2024-08-09T16:05:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56831#issuecomment-2278279820"
      },
      {
        "id": "IC_kwDOAQzde86IEdvv",
        "parentId": null,
        "author": "madskonradsen",
        "content": "@captainsafia Sooo getting the environment up and running was pretty breezy. Roslyn analyzers on the other hand. But they are still fun to work with :)\r\nI feel like I\u0027ve gone in the wrong direction: https://github.com/dotnet/aspnetcore/compare/main...madskonradsen:aspnetcore:mads/56831\r\n\r\nI would have expected methodSymbol.TypeParameters to not be empty, but seems like I\u0027m missing something. Any pointers? :)",
        "createdAt": "2024-08-11T19:57:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56831#issuecomment-2282871791"
      },
      {
        "id": "IC_kwDOAQzde86ILR8L",
        "parentId": null,
        "author": "captainsafia",
        "content": "@madskonradsen Yes, I believe the issue here is the fact that \u0060methodSymbol\u0060 actually refers to the lambda expression based as an argument to the \u0060MapPost\u0060 call (\u0060 (TEndpointInput data) =\u003E Results.Ok(data))\u0060 which has no type parameters itself but has a parameter that is a type parameter.\r\n\r\nI believe what you might actually want to do here is iterate through \u0060methodSymbol.Parameters\u0060 and check if the \u0060SymbolKind\u0060 associated with each parameters is a \u0060TypeParameter\u0060.\r\n\r\n",
        "createdAt": "2024-08-12T18:28:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56831#issuecomment-2284658443"
      },
      {
        "id": "IC_kwDOAQzde86ILaEi",
        "parentId": null,
        "author": "KennethHoff",
        "content": "This has annoyed me more-or-less ever since .Net 8 launched, but never understood what causes it to happen nor found any issues on it, so I just ignored the warning and went on with my life. Good to see it\u0027s not just me experiencing this. Generic handlers would be a logical denominator. Quite niche after all.",
        "createdAt": "2024-08-12T18:48:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56831#issuecomment-2284691746"
      },
      {
        "id": "IC_kwDOAQzde86IzU35",
        "parentId": null,
        "author": "madskonradsen",
        "content": "Take 2: https://github.com/dotnet/aspnetcore/compare/main...madskonradsen:aspnetcore:mads/56831-2\r\n\r\nThis is not finished, but it just feels like the wrong direction to go in, but based on the current API, I\u0027m having a hard time seeing other ways around it, and how I should be able to achieve it by just looking at the Parameters. The code above passes 2/3 tests so far. But I just can\u0027t shake the feeling that there must be a better way.\r\n\r\n@captainsafia ",
        "createdAt": "2024-08-18T07:13:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56831#issuecomment-2295156217"
      },
      {
        "id": "IC_kwDOAQzde86TmzEN",
        "parentId": null,
        "author": "jofford",
        "content": "Any progress on this? The warning still exists in dotnet cli 9.0.100. It doesn\u0027t seem to appear when building in Visual Studio 17.12 though.",
        "createdAt": "2024-11-14T13:57:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56831#issuecomment-2476421389"
      },
      {
        "id": "IC_kwDOAQzde86Tm0Sd",
        "parentId": null,
        "author": "madskonradsen",
        "content": "I haven\u0027t had much luck with the patch apart from the code above, and haven\u0027t heard any feedback from the dotnet team.",
        "createdAt": "2024-11-14T13:58:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56831#issuecomment-2476426397"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86RJ-UF",
    "title": "[FromBody] attribute with an empty body request should set the default value of nullable value types to null.",
    "url": "https://github.com/dotnet/aspnetcore/issues/57055",
    "createdAt": "2024-07-29T12:39:50Z",
    "lastUpdated": "2024-08-22T19:11:00Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nControlled-based API uses additional conditions to check the nullable value type \r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/2f1db20456007c9515068a35a65afdf99af70bc6/src/Mvc/Mvc.Core/src/Infrastructure/ParameterDefaultValues.cs#L40\r\nhttps://github.com/dotnet/runtime/blob/2aade6beb02ea367fd97c4070a4198802fe61c03/src/libraries/Common/src/Extensions/ParameterDefaultValue/ParameterDefaultValue.cs#L35,\r\n\r\nwhich doesn\u0027t exist in the minimal API approach\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/2f1db20456007c9515068a35a65afdf99af70bc6/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L1323\n\n### Expected Behavior\n\nThe default value of nullable value types should be null when the request body is empty.\n\n### Steps To Reproduce\n\n[This repo](https://github.com/opuzakov/web-api) contains two web API projects: controller-based and minimal. The controller-based approach sets the int? default value to null, and the minimal API to 0.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.303\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86Jam-J",
        "parentId": null,
        "author": "captainsafia",
        "content": "@opuzakov Thanks for opening this issue!\r\n\r\nI think that using the \u0060ParameterDefaultValue\u0060 APIs in RDF seems like a valid choice. We\u0027ll have to confirm that we get similar behavior in the scenario where request delegates are generated statically via RDG.\r\n\r\nPutting this in the backlog for now since I don\u0027t think it\u0027s particularly high-priority but I\u0027d be open to reviewing a PR if you\u0027re interested in opening one.",
        "createdAt": "2024-08-22T19:10:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57055#issuecomment-2305453961"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86SHggI",
    "title": "Empty form body with optional form file-based argument produces unexpected 408 in minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/57195",
    "createdAt": "2024-08-06T18:14:20Z",
    "lastUpdated": "2024-08-09T00:47:21Z",
    "body": "For a given endpoint:\r\n\r\n\u0060\u0060\u0060csharp\r\nvar app = WebApplication.Create();\r\n\r\napp.MapPost(\u0022/form-file\u0022, (IFormFileCollection formFiles) =\u003E Results.Ok(formFiles.Count));\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\nThe following request:\r\n\r\n\u0060\u0060\u0060\r\nPOST /forms/form-file HTTP/1.1\r\nContent-Length: 44\r\nContent-Type: application/xml\r\nHost: localhost:5051\r\nUser-Agent: HTTPie\r\n\r\n--PieBoundary123456789012345678901234567--\r\n\u0060\u0060\u0060\r\n\r\nwill timeout when emitted to a minimal API endpoint (compiled via either RDF or RDG):\r\n\r\n\u0060\u0060\u0060\r\nHTTP/1.1 408 Request Timeout\r\nConnection: close\r\nContent-Length: 0\r\nDate: Tue, 06 Aug 2024 18:08:16 GMT\r\nServer: Kestrel\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "bug",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86Svhfs",
    "title": "Add ILoggerFactory-injection to ApiDescriptionGroupCollectionProvider",
    "url": "https://github.com/dotnet/aspnetcore/issues/57295",
    "createdAt": "2024-08-12T21:32:44Z",
    "lastUpdated": "2024-09-26T22:52:50Z",
    "body": "## Background and Motivation\r\n\r\nTo improve the diagnosability of the OpenAPI layer, we\u0027d like to provide logs so that users can understand what components are contributing custom \u0060IApiDescriptionProvider\u0060 implementations to the \u0060ApiExplorer\u0060 layer. In order to support this scenario, we need to support injecting an \u0060ILoggerFactory\u0060 instance to the \u0060ApiDescriptionGroupCollectionProvider\u0060 class that invokes all the discovered \u0060IApiDescriptionProvider\u0060 instances.\r\n\r\n## Proposed API\r\n\r\n\u0060\u0060\u0060diff\r\n- public class ApiDescriptionGroupCollectionProvider : IApiDescriptionGroupCollectionProvider\r\n\u002B public partial class ApiDescriptionGroupCollectionProvider : IApiDescriptionGroupCollectionProvider\r\n{\r\n\u002B public ApiDescriptionGroupCollectionProvider(\r\n\u002B       IActionDescriptorCollectionProvider actionDescriptorCollectionProvider,\r\n\u002B       IEnumerable\u003CIApiDescriptionProvider\u003E apiDescriptionProviders,\r\n\u002B       ILoggerFactory loggerFactory)\r\n}\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\n\r\n- Add a new internal-only implementation of \u0060ApiDescriptionGroupCollectionProvider\u0060 and support \u0060ILoggerFactory\u0060 injection in its constructors.\r\n",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "api-approved",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86IMXnD",
        "parentId": null,
        "author": "dotnet-policy-service",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.\n\u003C!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003E",
        "createdAt": "2024-08-12T21:33:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57295#issuecomment-2284943811"
      },
      {
        "id": "IC_kwDOAQzde86IMgDe",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Couple comments:\r\n* Should we use \u0060ILogger\u003CApiDescriptionGroupCollectionProvider\u003E\u0060 instead of \u0060ILoggerFactory\u0060?\r\n* We could pass \u0060IServiceProvider\u0060 instead so any future additions wouldn\u0027t require API additions.\r\n* We could also make a new private implementation that adds the new ctor and is added to DI via our extension methods. This would require 0 new API",
        "createdAt": "2024-08-12T22:01:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57295#issuecomment-2284978398"
      },
      {
        "id": "IC_kwDOAQzde86IMpOW",
        "parentId": null,
        "author": "amcasey",
        "content": "I think I\u0027m probably missing something obvious (and it\u0027s probably too late anyway), but why is \u0060ApiDescriptionGroupCollectionProvider\u0060 public?  Relatedly, should it be sealed?",
        "createdAt": "2024-08-12T22:35:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57295#issuecomment-2285015958"
      },
      {
        "id": "IC_kwDOAQzde86IMq7I",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Should we use ILogger\u003CApiDescriptionGroupCollectionProvider\u003E instead of ILoggerFactory?\r\n\r\nGood point -- we seem to use \u0060ILoggerFactory\u0060 more frequently in the MVC codepath although I think that\u0027s an probably an MVC artifact.\r\n\r\n\u003E Should we use ILogger\u003CApiDescriptionGroupCollectionProvider\u003E instead of ILoggerFactory?\r\n\r\nThat\u0027s an option -- I dunno if we\u0027d need something more in the future and I prefer the straightforwardness of taking an ILogger.\r\n\r\n\u003E We could also make a new private implementation that adds the new ctor and is added to DI via our extension methods. This would require 0 new API\r\n\r\nYep, that\u0027s the alternative design that was proposed above. I\u0027m fine with this approach if we\u0027re feelin particularly prickly about introducing new API.\r\n\r\n\u003E I think I\u0027m probably missing something obvious (and it\u0027s probably too late anyway), but why is ApiDescriptionGroupCollectionProvider public? Relatedly, should it be sealed?\r\n\r\nIt\u0027s an old API that was never reviewed so I suspect that there isn\u0027t a ton of reason for this. From my knowledge of the area, I don\u0027t see a reason to have it be public or extendable (so we can seal it).",
        "createdAt": "2024-08-12T22:42:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57295#issuecomment-2285022920"
      },
      {
        "id": "IC_kwDOAQzde86IMww2",
        "parentId": null,
        "author": "halter73",
        "content": "One upside of \u0060ILoggerFactory\u0060 is that it\u0027s useful if we need to pass it to another subcomponent that logs to a different category. I\u0027m not a big fan of taking an \u0060IServiceProvider\u0060 parameter if we have a good idea of what specific services we need and we don\u0027t expect it to change much.\r\n\r\nI\u0027m in favor of either approving the API as proposed or making no changes and doing the internal service \u0022Impl\u0022 pattern as I like to call it. If this were new API, I think the service would be internal and sealed.\r\n\r\nOne thing to note about the \u0022Impl\u0022 pattern is that \u0060AddGrpcSwagger()\u0060 calls the constructor on the public implementation type from another assembly.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/02e27771656c06cef9cb9f5ae9ad392fc69bb660/src/Grpc/JsonTranscoding/src/Microsoft.AspNetCore.Grpc.Swagger/GrpcSwaggerServiceExtensions.cs#L36-L45\r\n\r\nAssuming we want to add logging in that case as well, we might have to add public constructor. I was going to suggest updating \u0060AddGrpcSwagger()\u0060 to call \u0060AddApiExplorer()\u0060, but I don\u0027t think we want \u0060AddGrpcSwagger()\u0060 to add MVC\u0027s \u0060DefaultApiDescriptionProvider\u0060.",
        "createdAt": "2024-08-12T23:07:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57295#issuecomment-2285046838"
      },
      {
        "id": "IC_kwDOAQzde86IM1kg",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Assuming we want to add logging in that case as well, we might have to add public constructor. I was going to suggest updating AddGrpcSwagger() to call AddApiExplorer(), but I don\u0027t think we want AddGrpcSwagger() to add MVC\u0027s DefaultApiDescriptionProvider.\r\n\r\nYep, I suspect this is the reason the gRPC implementation went the route of registering the ApiExplorer dependencies themselves. Given that this feature helps with diagnosability, I think we should make an effort to enable it for _all_ scenarios where \u0060ApiExplorer\u0060 might be used.\r\n\r\nWe can\u0027t take back the fact that we made this a public API but supporting log for both in-framework and out-of-framework consumes seems like goodness.",
        "createdAt": "2024-08-12T23:26:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57295#issuecomment-2285066528"
      },
      {
        "id": "IC_kwDOAQzde86ISpub",
        "parentId": null,
        "author": "captainsafia",
        "content": "I\u0027ve slept on this. I still think making the \u0060ILoggerFactory\u0060 change a public API is the right way to go but I\u0027d advocate for doing this as a .NET 10 change instead of for .NET 9 RC 1. We can ship the logging changes with an internal API for .NET 9 RC 1 and then introduce the public API after we branch.",
        "createdAt": "2024-08-13T15:54:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57295#issuecomment-2286590875"
      },
      {
        "id": "IC_kwDOAQzde86ITiAs",
        "parentId": null,
        "author": "amcasey",
        "content": "FWIW, none of my concerns about the API relate to the timing - it\u0027s a pragmatic compromise whether it\u0027s added in 9 or 10.",
        "createdAt": "2024-08-13T18:01:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57295#issuecomment-2286821420"
      },
      {
        "id": "IC_kwDOAQzde86Nvq2E",
        "parentId": null,
        "author": "halter73",
        "content": "API Review Notes:\r\n\r\n- Of \u0060ILogger\u003CApiDescriptionGroupCollectionProvider\u003E\u0060, \u0060ILoggerFactory\u0060 and \u0060IServiceProvider\u0060, we choose \u0060ILoggerFactory\u0060.\r\n\r\nAPI approved as propsed.\r\n\r\n\u0060\u0060\u0060diff\r\npublic class ApiDescriptionGroupCollectionProvider : IApiDescriptionGroupCollectionProvider\r\n{\r\n\u002B public ApiDescriptionGroupCollectionProvider(\r\n\u002B       IActionDescriptorCollectionProvider actionDescriptorCollectionProvider,\r\n\u002B       IEnumerable\u003CIApiDescriptionProvider\u003E apiDescriptionProviders,\r\n\u002B       ILoggerFactory loggerFactory)\r\n}\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2024-09-26T22:52:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57295#issuecomment-2378083716"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86S-Qvk",
    "title": "Server URLs in OpenAPI document are incorrect when application used with .NET Aspire",
    "url": "https://github.com/dotnet/aspnetcore/issues/57332",
    "createdAt": "2024-08-14T13:10:13Z",
    "lastUpdated": "2025-01-20T10:05:39Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen an OpenAPI document is being used as part of an application running with .NET Aspire, the \u0060servers\u0060 array of the OpenAPI document is populated with incorrect URLs.\r\n\r\nThis then causes operations using Swagger UI to fail:\r\n\r\n![image](https://github.com/user-attachments/assets/e492d32b-85cf-4b0d-9335-3c1b4fee6804)\r\n\r\nIn this case, the application is running on \u0060http://localhost:50000\u0060 and \u0060https://localhost:50001\u0060.\r\n\r\nI think the issue is that headers such as \u0060X-Forwarded-For\u0060 aren\u0027t being taken into account.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/08b60af1bca8cffff8ba0a72164fb7505ffe114d/src/OpenApi/src/Services/OpenApiDocumentService.cs#L190-L198\r\n\r\nIf I use [my own transformer](https://github.com/martincostello/openapi-extensions/blob/6b5b0a4b85cc5135fcc00377ce4d4d2f0f55470c/src/OpenApi.Extensions/Transformers/AddServersTransformer.cs) to always populate the server URLs, which uses the configured \u0060ForwardedHeadersOptions\u0060, then I get the correct host and port.\r\n\r\n\u0060\u0060\u0060json\r\n{\r\n  \u0022openapi\u0022: \u00223.0.1\u0022,\r\n  \u0022info\u0022: {\r\n    \u0022title\u0022: \u0022London Travel\u0022,\r\n    \u0022description\u0022: \u0022London Travel is an Amazon Alexa skill for checking the status for travel in London.\u0022,\r\n    \u0022termsOfService\u0022: \u0022https://londontravel.martincostello.com/terms-of-service/\u0022,\r\n    \u0022contact\u0022: {\r\n      \u0022name\u0022: \u0022Martin Costello\u0022,\r\n      \u0022url\u0022: \u0022https://github.com/martincostello/alexa-london-travel-site\u0022\r\n    },\r\n    \u0022license\u0022: {\r\n      \u0022name\u0022: \u0022Apache 2.0\u0022,\r\n      \u0022url\u0022: \u0022https://www.apache.org/licenses/LICENSE-2.0.html\u0022\r\n    },\r\n    \u0022version\u0022: \u0022\u0022\r\n  },\r\n  \u0022servers\u0022: [\r\n    {\r\n      \u0022url\u0022: \u0022https://localhost:50001\u0022\r\n    }\r\n  ]\r\n}\r\n\u0060\u0060\u0060\r\n\r\nIf this is disabled and the built-in development-time support is used, the wrong URLs are rendered.\r\n\r\n\u0060\u0060\u0060json\r\n{\r\n  \u0022openapi\u0022: \u00223.0.1\u0022,\r\n  \u0022info\u0022: {\r\n    \u0022title\u0022: \u0022London Travel\u0022,\r\n    \u0022description\u0022: \u0022London Travel is an Amazon Alexa skill for checking the status for travel in London.\u0022,\r\n    \u0022termsOfService\u0022: \u0022https://londontravel.martincostello.com/terms-of-service/\u0022,\r\n    \u0022contact\u0022: {\r\n      \u0022name\u0022: \u0022Martin Costello\u0022,\r\n      \u0022url\u0022: \u0022https://github.com/martincostello/alexa-london-travel-site\u0022\r\n    },\r\n    \u0022license\u0022: {\r\n      \u0022name\u0022: \u0022Apache 2.0\u0022,\r\n      \u0022url\u0022: \u0022https://www.apache.org/licenses/LICENSE-2.0.html\u0022\r\n    },\r\n    \u0022version\u0022: \u0022\u0022\r\n  },\r\n  \u0022servers\u0022: [\r\n    {\r\n      \u0022url\u0022: \u0022https://localhost:65076\u0022\r\n    },\r\n    {\r\n      \u0022url\u0022: \u0022http://localhost:65077\u0022\r\n    }\r\n  ]\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Expected Behavior\r\n\r\nThe correct URL(s) are included in the \u0060servers\u0060 array of the OpenAPI document taking into account any HTTP forwarded headers.\r\n\r\n\r\n### Steps To Reproduce\r\n\r\n1. Clone https://github.com/martincostello/alexa-london-travel-site/commit/23c2af944e9741ecbf192631261128af11db7258\r\n2. Open the solution in Visual Studio\r\n3. Launch the LondonTravel.Site.AppHost project\r\n4. Wait for the applications to load\r\n5. View the contents of the document at \u0060https://localhost:50001/openapi/api.json\u0060\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n9.0.100-preview.7.24407.12\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 3,
    "labels": [
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86JTTYg",
        "parentId": null,
        "author": "captainsafia",
        "content": "@martincostello The transformer strategy is a good way to solve this problem.\r\n\r\nA while back with modeled Swagger UI as an Aspire resource (https://github.com/davidfowl/AspireSwaggerUI/blob/146163aec403305770861098d3c16578a0d5dd99/SwaggerUi.Aspire.Hosting/SwaggerUiExtensions.cs) and configured forwarding for requests using Aspire\u0027s endpoint forwarding rules. In this approach, the Swagger UI is served outside the API resource instance and mimics a pattern similar to what we would do if we served an API testing UI in Aspire.\r\n\r\nI\u0027ll stick this in the backlog for now as we evaluate how first class OpenAPI docs become in Aspire/Aspire dashboard. In the short-term, we can doc why this issue happens and how to resolve.",
        "createdAt": "2024-08-22T02:06:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57332#issuecomment-2303538720"
      },
      {
        "id": "IC_kwDOAQzde86TXqxN",
        "parentId": null,
        "author": "ryuuc",
        "content": "The issue still exists in .NET 9.0.100 \n\n![Image](https://github.com/user-attachments/assets/382d4add-39b7-4e0a-9557-bb6177efec93)\n",
        "createdAt": "2024-11-13T05:51:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57332#issuecomment-2472455245"
      },
      {
        "id": "IC_kwDOAQzde86Tw-sc",
        "parentId": null,
        "author": "xetle",
        "content": "I get this error as well. I downloaded the latest VS 2022 today. If I create a new ASP.NET Core Web API project with .NET 9 and Enlist in .NET Aspire orchestration.\n\nIn the Aspire dashboard I see these endpoints\nhttps://localhost:7163 \u0026 http://localhost:5136\n\nbut https://localhost:7163/openapi/v1.json gives\n\u0022servers\u0022: [\n    {\n      \u0022url\u0022: \u0022https://localhost:49243\u0022\n    },\n    {\n      \u0022url\u0022: \u0022http://localhost:49244\u0022\n    }\n  ],\n\nThis causes issues with Scalar because I want to call the endpoint https://localhost:7163/scalar/v1 and the TestRequest for WeatherForecast will use 49243.\n  \nWhereas if I set the API project as my startup project I see this and https://localhost:7163/scalar/v1 works\n  \u0022servers\u0022: [\n    {\n      \u0022url\u0022: \u0022https://localhost:7163\u0022\n    },\n    {\n      \u0022url\u0022: \u0022http://localhost:5136\u0022\n    }\n  ],\n\n",
        "createdAt": "2024-11-15T15:03:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57332#issuecomment-2479090460"
      },
      {
        "id": "IC_kwDOAQzde86TxupH",
        "parentId": null,
        "author": "martincostello",
        "content": "As a workaround, you can fix this by using [my OpenAPI Extensions library](https://github.com/martincostello/openapi-extensions?tab=readme-ov-file#usage):\n\n\u0060\u0060\u0060csharp\nbuilder.Services.AddOpenApiExtensions(options =\u003E options.AddServerUrls = true);\n\u0060\u0060\u0060\n\nThis should take into account the forwarded headers and should map to the correct URLs - [code](https://github.com/martincostello/openapi-extensions/blob/98c10f06f0c118673d0b48ff9d909460ec59f285/src/OpenApi.Extensions/Transformers/AddServersTransformer.cs#L37-L61).",
        "createdAt": "2024-11-15T15:52:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57332#issuecomment-2479286855"
      },
      {
        "id": "IC_kwDOAQzde86T4COM",
        "parentId": null,
        "author": "boulc",
        "content": "As another workaround, the servers defined in the OpenAPI document can be overridden to an empty array:\n\n\u0060\u0060\u0060csharp\napp.MapScalarApiReference(_ =\u003E _.Servers = []);\n\u0060\u0060\u0060\n\n![Image](https://github.com/user-attachments/assets/e4a46d47-c943-424f-8aa0-4b59586972c2)\n",
        "createdAt": "2024-11-17T06:05:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57332#issuecomment-2480939916"
      },
      {
        "id": "IC_kwDOAQzde86T8uDA",
        "parentId": null,
        "author": "xetle",
        "content": "\u003E As another workaround, the servers defined in the OpenAPI document can be overridden to an empty array:\n\u003E \n\u003E app.MapScalarApiReference(_ =\u003E _.Servers = []);\n\nNice! - that worked - Thanks",
        "createdAt": "2024-11-18T07:40:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57332#issuecomment-2482168000"
      },
      {
        "id": "IC_kwDOAQzde86U2sAw",
        "parentId": null,
        "author": "skordesign",
        "content": "I deploy to docker and the server URL shown http://[::]:8080, what can I do to change it?\n![Image](https://github.com/user-attachments/assets/cdb6b643-82a2-4c6a-b272-72760ff50bec)\n",
        "createdAt": "2024-11-25T09:15:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57332#issuecomment-2497364016"
      },
      {
        "id": "IC_kwDOAQzde86VJriV",
        "parentId": null,
        "author": "raky291",
        "content": "I have the same issue, is there still no solution?\n\nI\u0027m using \u0060OpenAPI\u0060 \u002B \u0060Swashbuckle.AspNetCore.SwaggerUI\u0060",
        "createdAt": "2024-11-27T00:32:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57332#issuecomment-2502342805"
      },
      {
        "id": "IC_kwDOAQzde86VMMpO",
        "parentId": null,
        "author": "martincostello",
        "content": "@raky291 https://github.com/dotnet/aspnetcore/issues/57332#issuecomment-2479286855",
        "createdAt": "2024-11-27T06:20:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57332#issuecomment-2503002702"
      },
      {
        "id": "IC_kwDOAQzde86YShMy",
        "parentId": null,
        "author": "davidfowl",
        "content": "We\u2019re going to need to do something here to fix this. ",
        "createdAt": "2024-12-19T16:38:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57332#issuecomment-2554991410"
      },
      {
        "id": "IC_kwDOAQzde86abbm4",
        "parentId": null,
        "author": "cn-ml",
        "content": "\u003E app.MapScalarApiReference(_ =\u003E _.Servers = []);\n\nThis workaround from @boulc did the trick for me, but it shouldn\u0027t be that difficult. Especially in docker deployments the url is totally irrelevant and after reverse proxying I somehow expected this to work out of the box with Forwarded Headers configured.",
        "createdAt": "2025-01-14T18:58:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57332#issuecomment-2590882232"
      },
      {
        "id": "IC_kwDOAQzde86bFs7I",
        "parentId": null,
        "author": "Snailya",
        "content": "not worked now",
        "createdAt": "2025-01-20T10:05:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57332#issuecomment-2601963208"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86TBquI",
    "title": "[Question] Is there a way to properly emulate InvalidModelStateResponseFactory in minimal apis?",
    "url": "https://github.com/dotnet/aspnetcore/issues/57337",
    "createdAt": "2024-08-14T19:35:00Z",
    "lastUpdated": "2024-08-24T21:51:49Z",
    "body": "Hi.\r\n\r\nWhen trying to migrate some existing endpoints to minimal apis, I discovered that is not as easy as in controllers to change the behaviour of a binding error (and I wanted to return the same responses...).\r\n\r\nIn controllers you have the InvalidModelStateResponseFactory which you can use to modify the response to these invalid requests:\r\n\r\n![image](https://github.com/user-attachments/assets/df527c75-6bc8-4663-89b8-0f73c43c8061)\r\n\r\nWhen trying to do the same in minimal apis, I have found two ways, filter or middleware.\r\n\r\nWith a filter you get the arguments but you don\u0027t know why the binding failed (required parameter not provided vs. not parsable) and the arguments have default values (like 0 but you passed a string)\r\n\r\nWith a middleware you can catch the exception but you only get a message like \u0022Failed to bind parameter \u0022long id\u0022 from \u0022this has to be a long\u0022.\u0022\r\n\r\nSo the question is, is there another way so I can return the same response as before when using controllers but using minimal apis?\r\n\r\nThanks.",
    "upvotes": 4,
    "labels": [
      "Needs: Attention :wave:",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86JR89Z",
        "parentId": null,
        "author": "captainsafia",
        "content": "@michaeltg17 Thanks for filing this issue!\r\n\r\nUnfortunately not, there isn\u0027t a super great way to do this with minimal APIs at the moment. We\u0027ve been tracking this in the backlog via https://github.com/dotnet/aspnetcore/issues/35501.\r\n\r\nThe referenced issue recommends a workaround using middleware ([ref](https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-902072079)).\r\n\r\n\u003E With a middleware you can catch the exception but you only get a message like \u0022Failed to bind parameter \u0022long id\u0022 from \u0022this has to be a long\u0022.\u0022\r\n\r\nIs there additional information not in the exception message that you would like to have access to? Also, can you share an example of the \u0060ValidationProblemDetails\u0060 that you are currently returning?",
        "createdAt": "2024-08-21T22:33:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57337#issuecomment-2303184729"
      },
      {
        "id": "IC_kwDOAQzde86Jma6X",
        "parentId": null,
        "author": "michaeltg17",
        "content": "Hi, thanks for the reply.\r\n\r\nI\u0027m doing this test request:\r\n\r\n![image](https://github.com/user-attachments/assets/0dfa3aa1-37da-4baf-903d-c8876e203d39)\r\n\r\nTo controller endpoint:\r\n\r\n![image](https://github.com/user-attachments/assets/9481fafc-2fcb-48f8-b9ea-e673b8983cad)\r\n\r\nTo minimal api endpoint:\r\n\r\n![image](https://github.com/user-attachments/assets/4540d12b-c316-45f0-83c7-b9c0d86c924e)\r\n\r\nThis is the response from the controller:\r\n\r\n\u0060\u0060\u0060\r\n{\r\n    \u0022detail\u0022: \u0022Please check the errors property for additional details.\u0022,\r\n    \u0022errors\u0022: {\r\n        \u0022\u0022: [\r\n            \u0022A non-empty request body is required.\u0022\r\n        ],\r\n        \u0022date\u0022: [\r\n            \u0022The value \u0027b\u0027 is not valid.\u0022\r\n        ],\r\n        \u0022id\u0022: [\r\n            \u0022The value \u0027a\u0027 is not valid.\u0022\r\n        ],\r\n        \u0022request\u0022: [\r\n            \u0022The request field is required.\u0022\r\n        ]\r\n    },\r\n    \u0022instance\u0022: \u0022/TestController/Post/a\u0022,\r\n    \u0022status\u0022: 400,\r\n    \u0022title\u0022: \u0022ValidationException\u0022,\r\n    \u0022type\u0022: \u0022https://tools.ietf.org/html/rfc9110#section-15.5.1\u0022\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThe errors object in the response comes from the ModelState which is passed into the constructor of ValidationProblemDetails, so it builds that.\r\n\r\nWanted the same response in minimal api, but in the exception I only have this:\r\n\r\n![Capture](https://github.com/user-attachments/assets/800857ee-0572-42c9-b6f8-028384503b92)\r\n\r\nSo I guess this is hard to recreate as it happens during the binding... and the exception doesn\u0027t contain all the errors or all the parameters with their current values so that you can build something similar. I\u0027m not saying it should though.\r\n\r\nIn any case this was what I was trying to do, but I\u0027ll try to return a different response in case of minimal api if there is no other option.\r\n\r\nRegarding the workaround (https://github.com/dotnet/aspnetcore/issues/35501#issuecomment-902072079), I don\u0027t really understand how it could help.\r\n\r\nThanks!",
        "createdAt": "2024-08-24T21:49:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57337#issuecomment-2308550295"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86TFamf",
    "title": "[dotnet-sdk-9.0.100-rc.1.24409.1] No \u0022400 - bad\u0022 ErrorResponse shows in CleanArchitecture app",
    "url": "https://github.com/dotnet/aspnetcore/issues/57343",
    "createdAt": "2024-08-15T08:50:15Z",
    "lastUpdated": "2024-10-21T21:36:57Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen run the 3rd party application with the latest .NET 9 build, there is no 400 - bad request in /swagger/index.html.  it passed with dotnet-sdk-9.0.100-preview.7.24402.8 and fails with dotnet-sdk-9.0.100-rc.1.24409.1\r\n\r\n**Application Name**: CleanArchitecture1\r\n**OS**\uFF1A Windows 10 21H2\r\n**CPU**: X64\r\n**.NET Build Number**: dotnet-sdk-9.0.100-rc.1.24409.1\r\n**App \u0026 Source checking at:** https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2208398\r\n**Github Link**:https://github.com/ardalis/CleanArchitecture\r\n\r\n**Verify Scenarios:**\r\n1). Windows 10 21H2 AMD64 \u002B dotnet-sdk-8.0.400: Pass\r\n2). Windows 10 21H2 AMD64 \u002B dotnet-sdk-9.0.100-preview.7.24402.8: Pass\r\n3). Windows 10 21H2 AMD64 \u002B dotnet-sdk-9.0.100-rc.1.24409.1: Fail\n\n### Expected Behavior\n\n400-Bad Request show in Responses and there is ErrorResponse in schemas.\r\n![image](https://github.com/user-attachments/assets/80001bc2-371e-4a08-bcf5-48b294c91d95)\r\n\n\n### Steps To Reproduce\n\n**App Repro Steps**\r\n1. Copy the app to your local machine and change the CleanArchitecture1\\Clean.Architecture.Web.runtimeconfig.json to let the app run against with dotnet-sdk-9.0.100-rc.1.24409.1.\r\n\u0060\u0060\u0060\r\n    \u0022frameworks\u0022: [\r\n      {\r\n        \u0022name\u0022: \u0022Microsoft.NETCore.App\u0022,\r\n        \u0022version\u0022: \u00229.0.0-rc.1.24408.12\u0022\r\n      },\r\n      {\r\n        \u0022name\u0022: \u0022Microsoft.AspNetCore.App\u0022,\r\n        \u0022version\u0022: \u00229.0.0-rc.1.24407.10\u0022\r\n      }\r\n    ]\r\n\u0060\u0060\u0060\r\n2. Launch CleanArchitecture1\\Clean.Architecture.Web.exe.\r\n3. Open edge to http://localhost:5000/swagger/index.html.\r\n\r\n**Actual Result:**\r\n400-Bad Request was disappeared and there is no ErrorRseponse in schemas. \r\n![image](https://github.com/user-attachments/assets/69a16987-40c0-4555-a167-d644eec227c7)\r\n\r\n\r\n**Minimal Repro Steps (Demo attached):**\r\n1. Create a default8.0 asp web api.\r\n2. Install FastEndpoints.Swagger 5.28.0.5-beta.\r\n3. Copy the following code to replace code in Program.cs.\r\n\u0060\u0060\u0060\r\nusing FastEndpoints;\r\nusing FastEndpoints.Swagger;\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services.AddFastEndpoints().SwaggerDocument();\r\nvar app = builder.Build();\r\napp.UseFastEndpoints().UseSwaggerGen();\r\napp.Run();\r\n5. Create MyEndpoint.cs with below code.\r\nusing FastEndpoints;\r\nnamespace ApiDemo\r\n{\r\n    public class MyEndpoint : Endpoint\u003CMyRequest, MyResponse\u003E\r\n    {\r\n        public override void Configure()\r\n        {\r\n            Post(\u0022/Test\u0022);\r\n            Description(b =\u003E b.ProducesProblemDetails(400));\r\n        }\r\n        public override async Task HandleAsync(MyRequest r, CancellationToken c)\r\n        {\r\n            await SendAsync(new()\r\n            {\r\n                Name = \u0022Test\u0022\r\n            });\r\n        }\r\n    }\r\n    public class MyRequest\r\n    {\r\n        public int Id { get; set; }\r\n    }\r\n    public class MyResponse\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n6. Change the runtime.config file to let the app run against with dotnet-sdk-9.0.100-rc.1.24409.1.\r\n\u0060\u0060\u0060\r\n    \u0022frameworks\u0022: [\r\n      {\r\n        \u0022name\u0022: \u0022Microsoft.NETCore.App\u0022,\r\n        \u0022version\u0022: \u00229.0.0-rc.1.24408.12\u0022\r\n      },\r\n      {\r\n        \u0022name\u0022: \u0022Microsoft.AspNetCore.App\u0022,\r\n        \u0022version\u0022: \u00229.0.0-rc.1.24407.10\u0022\r\n      }\r\n    ]\r\n\u0060\u0060\u0060\r\n8. Launch the project.\r\n9. Go to \u0022http://localhost:5000/swagger/index.html\u0022. (If launch by vs, it will redirect to the page automatically.)\r\n\r\n**Expected Result:**\r\n400-Bad Request show in Responses and there are 4 items in schemas.\r\n![image](https://github.com/user-attachments/assets/fd391a4f-66e7-4a21-b99f-ddb43bbde4c2)\r\n\r\n**Actual Result:**\r\n400-Bad Request was disappeared and there are 2 items in schemas. \r\n![image](https://github.com/user-attachments/assets/a7ece98a-176c-4074-8bb1-5a4f8df9208c)\r\n\r\n\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100-rc.1.24409.1\n\n### Anything else?\n\n**Dotnet Info:**\r\n.NET SDK:\r\n Version:           9.0.100-rc.1.24409.1\r\n Commit:            43360291a5\r\n Workload version:  9.0.100-manifests.f198e26c\r\n MSBuild version:   17.12.0-preview-24407-03\u002B6bc91d5e2\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\9.0.100-rc.1.24409.1\\\r\n\r\nHost:\r\n  Version:      9.0.0-rc.1.24408.12\r\n  Architecture: x64\r\n  Commit:       static\r\n\r\n.NET SDKs installed:\r\n  9.0.100-rc.1.24409.1 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 9.0.0-rc.1.24407.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 9.0.0-rc.1.24408.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 9.0.0-rc.1.24408.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n@dotnet-actwx-bot @dotnet/compat",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86JALi1",
        "parentId": null,
        "author": "Junjun-zhao",
        "content": "@javiercn  Could you please take a look at and help triage this issue? Please help move the right area if this is not correct. Thanks very much.",
        "createdAt": "2024-08-20T10:31:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57343#issuecomment-2298525877"
      },
      {
        "id": "IC_kwDOAQzde86JFkqU",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "@captainsafia ",
        "createdAt": "2024-08-20T23:45:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57343#issuecomment-2299939476"
      },
      {
        "id": "IC_kwDOAQzde86JHBna",
        "parentId": null,
        "author": "captainsafia",
        "content": "Took a look at this.\r\n\r\nIt looks like FastEndpoint\u0027s Swagger/OpenAPI implementation takes a direct dependency on NSwag for generating Open API documents. So the new \u0060Microsoft.AspNetCore.OpenApi\u0060 implementation isn\u0027t coming into play here.\r\n\r\nFastEndpoints _does_ take a dependency on the \u0060EndpointMetadataApiDescriptionProvider\u0060 implementation in ApiExplorer that is used to create intermediary metadata for minimal APIs. My immediate suspicion is that the changes that we made in this class in 9.0-preview.7 to support native AoT might be causing an impact here.\r\n\r\nTargeting the 9.0-preview.6 runtime confirms this suspicion since this bug doesn\u0027t repro there.\r\n\r\nI\u0027ll have to take a closer look at why FastEndpoint\u0027s \u0060ProducesProblemDetails\u0060 implementation produces metadata that doesn\u0027t play nice with ApiExplorer given test coverage for [the \u0060ProducesProblem\u0060 extension method in minimal APIs](https://source.dot.net/#Microsoft.AspNetCore.Mvc.ApiExplorer.Test/EndpointMetadataApiDescriptionProviderTest.cs,830).",
        "createdAt": "2024-08-21T02:29:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57343#issuecomment-2300320218"
      },
      {
        "id": "IC_kwDOAQzde86JRpGS",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E I\u0027ll have to take a closer look at why FastEndpoint\u0027s ProducesProblemDetails implementation produces metadata that doesn\u0027t play nice with ApiExplorer given test coverage for [the ProducesProblem extension method in minimal APIs](https://source.dot.net/#Microsoft.AspNetCore.Mvc.ApiExplorer.Test/EndpointMetadataApiDescriptionProviderTest.cs,830).\r\n\r\nOK, I figured out what is going on. The issue is in this new bit of code:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/6b047bc57f9f9d3f015f348caad64f5d1bd3f0de/src/Mvc/Mvc.ApiExplorer/src/EndpointMetadataApiDescriptionProvider.cs#L335-L341\r\n\r\nIt happens that the \u0060ProducesProblemDetails\u0060 method that FastEndpoints calls adds \u0060ProducesResponseTypeMetadata\u0060 to a type that implements \u0060IResult\u0060:\r\n\r\nhttps://github.com/FastEndpoints/FastEndpoints/blob/422567a5a454e5cf103a052276ad2391acfbcf9b/Src/Library/DTOs/ProblemDetails.cs#L22-L23\r\n\r\nWe could fix this on our end by adding an exception to the check above that respects the response type if it implements \u0060IEndpointMetadataProvider\u0060.\r\n\r\nI\u0027ll take a look at fixing this although I don\u0027t think this merits taking a fix through tactics for RC1/RC2 since there are workarounds. We can see if this manifests after GA and backport the fix via servicing if so.",
        "createdAt": "2024-08-21T22:15:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57343#issuecomment-2303103378"
      },
      {
        "id": "IC_kwDOAQzde86JVECB",
        "parentId": null,
        "author": "Junjun-zhao",
        "content": "Thanks @captainsafia for looking into this issue. Could you please share the workarounds mentioned? \r\n\r\n\u003E I\u0027ll take a look at fixing this although I don\u0027t think this merits taking a fix through tactics for RC1/RC2 since there are workarounds. We can see if this manifests after GA and backport the fix via servicing if so.",
        "createdAt": "2024-08-22T07:44:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57343#issuecomment-2304000129"
      },
      {
        "id": "IC_kwDOAQzde86Ja9i0",
        "parentId": null,
        "author": "captainsafia",
        "content": "@Junjun-zhao You can try the following using the \u0060ProblemDetails\u0060 definition in MVC:\r\n\r\n\u0060\u0060\u0060\r\nusing FastEndpoints;\r\nusing FastEndpoints.Swagger;\r\nusing Microsoft.AspNetCore.Http.HttpResults;\r\nusing Microsoft.AspNetCore.Mvc.ApiExplorer;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// builder.Services.AddOpenApi();\r\n\r\nbuilder.Services.AddFastEndpoints().SwaggerDocument(o =\u003E o.ShortSchemaNames = true);\r\n\r\nvar app = builder.Build();\r\n\r\napp.UseFastEndpoints().UseSwaggerGen();\r\n\r\napp.Run();\r\n\r\nnamespace ApiDemo\r\n{\r\n    public class MyEndpoint : Endpoint\u003CMyRequest, MyResponse\u003E\r\n    {\r\n        public override void Configure()\r\n        {\r\n            Post(\u0022/Test\u0022);\r\n            Description(b =\u003E b.Produces\u003CMicrosoft.AspNetCore.Mvc.ProblemDetails\u003E(400));\r\n        }\r\n        public override async Task HandleAsync(MyRequest r, CancellationToken c)\r\n        {\r\n            await SendAsync(new()\r\n            {\r\n                Name = \u0022Test\u0022\r\n            });\r\n        }\r\n    }\r\n    public class MyRequest\r\n    {\r\n        public int Id { get; set; }\r\n    }\r\n    public class MyResponse\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nAlso, I\u0027m inclined to says that we should be perspective about supporting \u0060IResult\u0060 implementations that don\u0027t directly serialize themselves in the output but serialize a provided input, similar to the pattern used for [ProblemHttpResult](https://source.dot.net/#Microsoft.AspNetCore.Http.Results/ProblemHttpResult.cs,aa4ac8c33738bc63).",
        "createdAt": "2024-08-22T20:10:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57343#issuecomment-2305546420"
      },
      {
        "id": "IC_kwDOAQzde86OdD-W",
        "parentId": null,
        "author": "PriyaPurkayastha",
        "content": "@captainsafia is this is an intentional breaking change introduced in .NET 9 RC1? Wouldn\u0027t it be helpful to customers if you create a breaking change announcement for this or do you think that it is it easily diagnosable for developers to know why they are running into this issue and to apply the workaround that you have provided? Is this code pattern/usage not that common? cc @marklio ",
        "createdAt": "2024-10-02T23:38:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57343#issuecomment-2389983126"
      },
      {
        "id": "IC_kwDOAQzde86QtPXK",
        "parentId": null,
        "author": "captainsafia",
        "content": "@PriyaPurkayastha This is moreso a known issue than a breaking change. We can document the bug and the workaround for now. If after .NET 9 GA we see that many users are hitting this, we can evaluate back porting a fix.",
        "createdAt": "2024-10-21T21:36:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57343#issuecomment-2427778506"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86TV4Iz",
    "title": "OpenAPI: Range attribute causes FormatException",
    "url": "https://github.com/dotnet/aspnetcore/issues/57390",
    "createdAt": "2024-08-18T13:58:09Z",
    "lastUpdated": "2024-11-18T17:43:09Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nAdding the following attribute to a property of type long causes a FormatException when generating the OpenAPI document:\r\n\r\n\u0060\u0060\u0060\r\n[Range(0, 9223372036854775807)]\r\n\u0060\u0060\u0060\r\n\r\nAffected code: https://github.com/dotnet/aspnetcore/blob/48a07213d4d8df15c6dffccd161844842c196998/src/OpenApi/src/Extensions/JsonNodeSchemaExtensions.cs#L95\r\n\r\nException:\r\n\u0060\u0060\u0060\r\nSystem.FormatException: The input string \u00279.223372036854776E\u002B18\u0027 was not in a correct format.\r\n   at System.Number.ThrowFormatException[TChar](ReadOnlySpan\u00601 value)\r\n   at System.Number.ParseDecimal[TChar](ReadOnlySpan\u00601 value, NumberStyles styles, NumberFormatInfo info)\r\n   at System.Decimal.Parse(String s, IFormatProvider provider)\r\n   at Microsoft.AspNetCore.OpenApi.JsonNodeSchemaExtensions.ApplyValidationAttributes(JsonNode schema, IEnumerable\u00601 validationAttributes)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiSchemaService.\u003C\u003Ec__DisplayClass0_0.\u003C.ctor\u003Eb__2(JsonSchemaExporterContext context, JsonNode schema)\r\n   at System.Text.Json.Schema.JsonSchema.\u003CToJsonNode\u003Eg__CompleteSchema|104_0(JsonNode schema, \u003C\u003Ec__DisplayClass104_0\u0026)\r\n   at System.Text.Json.Schema.JsonSchema.ToJsonNode(JsonSchemaExporterOptions options)\r\n   at System.Text.Json.Schema.JsonSchema.ToJsonNode(JsonSchemaExporterOptions options)\r\n   at System.Text.Json.Schema.JsonSchema.ToJsonNode(JsonSchemaExporterOptions options)\r\n   at System.Text.Json.Schema.JsonSchema.ToJsonNode(JsonSchemaExporterOptions options)\r\n   at System.Text.Json.Schema.JsonSchemaExporter.GetJsonSchemaAsNode(JsonTypeInfo typeInfo, JsonSchemaExporterOptions exporterOptions)\r\n   at System.Text.Json.Schema.JsonSchemaExporter.GetJsonSchemaAsNode(JsonSerializerOptions options, Type type, JsonSchemaExporterOptions exporterOptions)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiSchemaService.CreateSchema(OpenApiSchemaKey key)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiSchemaStore.GetOrAdd(OpenApiSchemaKey key, Func\u00602 valueFactory)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiSchemaService.GetOrCreateSchemaAsync(Type type, ApiParameterDescription parameterDescription, Boolean captureSchemaByRef, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetJsonRequestBody(IList\u00601 supportedRequestFormats, ApiParameterDescription bodyParameter, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetRequestBodyAsync(ApiDescription description, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOperationAsync(ApiDescription description, HashSet\u00601 capturedTags, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOperationsAsync(IGrouping\u00602 descriptions, HashSet\u00601 capturedTags, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOpenApiPathsAsync(HashSet\u00601 capturedTags, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOpenApiDocumentAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Builder.OpenApiEndpointRouteBuilderExtensions.\u003C\u003Ec__DisplayClass0_0.\u003C\u003CMapOpenApi\u003Eb__0\u003Ed.MoveNext()\r\n\r\n\u0060\u0060\u0060\n\n### Expected Behavior\n\nNo exception.\n\n### Steps To Reproduce\n\nAdd \u0060[Range(0, 9223372036854775807)]\u0060 to a long property.\n\n### Exceptions (if any)\n\n\u0060\u0060\u0060\r\nSystem.FormatException: The input string \u00279.223372036854776E\u002B18\u0027 was not in a correct format.\r\n   at System.Number.ThrowFormatException[TChar](ReadOnlySpan\u00601 value)\r\n   at System.Number.ParseDecimal[TChar](ReadOnlySpan\u00601 value, NumberStyles styles, NumberFormatInfo info)\r\n   at System.Decimal.Parse(String s, IFormatProvider provider)\r\n   at Microsoft.AspNetCore.OpenApi.JsonNodeSchemaExtensions.ApplyValidationAttributes(JsonNode schema, IEnumerable\u00601 validationAttributes)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiSchemaService.\u003C\u003Ec__DisplayClass0_0.\u003C.ctor\u003Eb__2(JsonSchemaExporterContext context, JsonNode schema)\r\n   at System.Text.Json.Schema.JsonSchema.\u003CToJsonNode\u003Eg__CompleteSchema|104_0(JsonNode schema, \u003C\u003Ec__DisplayClass104_0\u0026)\r\n   at System.Text.Json.Schema.JsonSchema.ToJsonNode(JsonSchemaExporterOptions options)\r\n   at System.Text.Json.Schema.JsonSchema.ToJsonNode(JsonSchemaExporterOptions options)\r\n   at System.Text.Json.Schema.JsonSchema.ToJsonNode(JsonSchemaExporterOptions options)\r\n   at System.Text.Json.Schema.JsonSchema.ToJsonNode(JsonSchemaExporterOptions options)\r\n   at System.Text.Json.Schema.JsonSchemaExporter.GetJsonSchemaAsNode(JsonTypeInfo typeInfo, JsonSchemaExporterOptions exporterOptions)\r\n   at System.Text.Json.Schema.JsonSchemaExporter.GetJsonSchemaAsNode(JsonSerializerOptions options, Type type, JsonSchemaExporterOptions exporterOptions)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiSchemaService.CreateSchema(OpenApiSchemaKey key)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiSchemaStore.GetOrAdd(OpenApiSchemaKey key, Func\u00602 valueFactory)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiSchemaService.GetOrCreateSchemaAsync(Type type, ApiParameterDescription parameterDescription, Boolean captureSchemaByRef, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetJsonRequestBody(IList\u00601 supportedRequestFormats, ApiParameterDescription bodyParameter, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetRequestBodyAsync(ApiDescription description, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOperationAsync(ApiDescription description, HashSet\u00601 capturedTags, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOperationsAsync(IGrouping\u00602 descriptions, HashSet\u00601 capturedTags, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOpenApiPathsAsync(HashSet\u00601 capturedTags, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOpenApiDocumentAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Builder.OpenApiEndpointRouteBuilderExtensions.\u003C\u003Ec__DisplayClass0_0.\u003C\u003CMapOpenApi\u003Eb__0\u003Ed.MoveNext()\r\n\r\n\u0060\u0060\u0060\n\n### .NET Version\n\n9.0.100-preview.7.24407.12\n\n### Anything else?\n\n_No response_",
    "upvotes": 1,
    "labels": [
      "Docs",
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86Iz1LG",
        "parentId": null,
        "author": "martincostello",
        "content": "Looks like these two lines of code need updating to pass through at least [\u0060NumberStyles.AllowExponent\u0060](https://learn.microsoft.com/dotnet/api/system.globalization.numberstyles#fields) through:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/48a07213d4d8df15c6dffccd161844842c196998/src/OpenApi/src/Extensions/JsonNodeSchemaExtensions.cs#L94-L95\r\n",
        "createdAt": "2024-08-18T14:48:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57390#issuecomment-2295288518"
      },
      {
        "id": "IC_kwDOAQzde86Iz4el",
        "parentId": null,
        "author": "mus65",
        "content": "Couldn\u0027t this special case double and int to avoid ToString()/Parse completely? The RangeAttribute constructors only support double, int and string.\r\n\r\nstring would also fail currently, not sure if it can even be mapped to OpenAPI.\r\n\r\nsee: https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.rangeattribute?view=net-8.0",
        "createdAt": "2024-08-18T15:30:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57390#issuecomment-2295302053"
      },
      {
        "id": "IC_kwDOAQzde86JTHiE",
        "parentId": null,
        "author": "captainsafia",
        "content": "@mus65 Thanks for filing this issue!\r\n\r\nUnfortunately, we\u0027re having to deal with a constraint in the underlying \u0060OpenApiSchema\u0060 representation here. The [OpenApiSchema.Minimum](https://learn.microsoft.com/en-us/dotnet/api/microsoft.openapi.models.openapischema.minimum) and [OpenApiSchema.Maximum](https://learn.microsoft.com/en-us/dotnet/api/microsoft.openapi.models.openapischema.maximum) properties are \u0060decimal\u0060 types. Based on the JSON schema validation spec, they are intended to only validate numeric values (see [this section in the spec](https://json-schema.org/draft/2020-12/draft-bhutton-json-schema-validation-01#name-maximum)).\r\n\r\nSo, for the string case, the best approach would probably be to use a schema transformer to define an extension property on the spec to encode minimum and maximum-values for non-numeric types (like dates).\r\n\r\nI suspect that \u0060long\u0060 might have similar constraints given limitations on the maximum integer size supported in JavaScript/JSON? My recollection here is the recommendation is to transmit long values as strings when they need to be transmitted over the wire.\r\n\r\nI think the best thing to do here would be to catch the exception that is thrown here and provide a clearer message about the constraints of the minimum/maximum type.\r\n\r\nI\u0027ll mark this as something to doc for .NET 9 and try to fix the exception for .NET 10.\r\n",
        "createdAt": "2024-08-22T01:44:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57390#issuecomment-2303490180"
      },
      {
        "id": "IC_kwDOAQzde86POuMJ",
        "parentId": null,
        "author": "fdcastel",
        "content": "Just passing to say that I\u0027m having the same problem. \n\nThe following code (generated by NSWAG) causes the problem:\n\n\u0060\u0060\u0060csharp\n        [System.Text.Json.Serialization.JsonPropertyName(\u0022the_value\u0022)]\n        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]\n        public double The_value { get; set; } = default!;\n\u0060\u0060\u0060\n\nWhen commenting the \u0060Range\u0060 annotation, the problem doesn\u0027t occur:\n\u0060\u0060\u0060csharp\n        [System.Text.Json.Serialization.JsonPropertyName(\u0022the_value\u0022)]\n        //[System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]\n        public double The_value { get; set; } = default!;\n\u0060\u0060\u0060\n\n\n\n\n\n.NET Version: _9.0.100-rc.1.24452.12_",
        "createdAt": "2024-10-09T18:26:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57390#issuecomment-2403001097"
      },
      {
        "id": "IC_kwDOAQzde86UBOcN",
        "parentId": null,
        "author": "BieleckiLtd",
        "content": "Is there a way to ignore certain data annotations when generating OpenApiSchema?\n\nIn my case below code is causing similar exception.\n\n\u0060\u0060\u0060\n[Range(typeof(DateTime), \u00222000-01-01\u0022, \u00222100-12-31\u0022, ErrorMessage = \u0022MRD must be between {1} and {2}\u0022)]\npublic DateTime Mrd { get; set; }\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060\nSystem.FormatException: The input string \u00272000-01-01\u0027 was not in a correct format.\n   at System.Number.ThrowFormatException[TChar](ReadOnlySpan\u00601 value)\n   at System.Number.ParseDecimal[TChar](ReadOnlySpan\u00601 value, NumberStyles styles, NumberFormatInfo info)\n   at System.Decimal.Parse(String s, IFormatProvider provider)\n   at Microsoft.AspNetCore.OpenApi.JsonNodeSchemaExtensions.ApplyValidationAttributes(JsonNode schema, IEnumerable\u00601 validationAttributes)\n\u0060\u0060\u0060",
        "createdAt": "2024-11-18T15:17:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57390#issuecomment-2483349261"
      },
      {
        "id": "IC_kwDOAQzde86UCnX1",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Is there a way to ignore certain data annotations when generating OpenApiSchema?\n\nUnfortunately, not at the moment. I\u0027m hoping to get a fix for this out in .NET 10 Preview 1 and the first servicing release of .NET 9.\n\nIn the long-term, it doesn\u0027t appear that JSON Schema supports modeling ranges for non-integer values as part of its default validation vocabulary. There were proposals of a \u0060formatMinimum\u0060 and \u0060formatMaximum\u0060 property to support this that were proposed a while ago (see https://github.com/json-schema-org/json-schema-spec/issues/116) but those never panned out. It seems like the general recommended approach is to use regex patterns to specify constraints for dates which is...not ideal.\n",
        "createdAt": "2024-11-18T17:43:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57390#issuecomment-2483713525"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86UBVqu",
    "title": "Records, positional parameters, data annotations, model validation and OpenAPI inconsistency",
    "url": "https://github.com/dotnet/aspnetcore/issues/57486",
    "createdAt": "2024-08-23T15:24:07Z",
    "lastUpdated": "2024-08-25T20:45:22Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen creating a .NET 9 (Preview 7) WepAPI project through means of \u0060dotnet new webapi -controllers\u0060, the [new OpenAPI support](https://aka.ms/aspnet/openapi) is [added by default](https://github.com/CaringDev/PRDA/blob/main/Program.cs#L7).\r\n\r\nMany developers have come to love [DataAnnotations](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations) for increasing the likelihood incoming data matches their expectations.\r\n\r\nAfter adding a record such as \u0060public record NormalNoOpenApi([StringLength(2)] string Payload);\u0060 and a controller method e.g. \u0060public void Post(NormalNoOpenApi _)\u0060 the data is indeed validated. However, the relevant schema entry in the OpenAPI document is missing the length constraints \u0060\u0022maxLength\u0022: 2, \u0022minLength\u0022: 0,\u0060:\r\n\u0060\u0060\u0060json\r\n\u0022NormalNoOpenApi\u0022: {\r\n  \u0022required\u0022: [\u0022payload\u0022],\r\n  \u0022type\u0022: \u0022object\u0022,\r\n  \u0022properties\u0022: {\r\n    \u0022payload\u0022: { \u0022type\u0022: \u0022string\u0022 }\r\n  }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nOn the other hand, changing the record to \u0060public record NoValidation([property: StringLength(2)] string Payload);\u0060 will lead to the correct schema but throw at runtime:\r\n\r\n\u003E System.InvalidOperationException: Record type \u0027PRDA.NoValidation\u0027 has validation metadata defined on property \u0027Payload\u0027 that will be ignored.\r\n\u003E \u0027Payload\u0027 is a parameter in the record primary constructor and validation metadata must be associated with the constructor parameter.\r\n\r\nGoing the extra mile and changing the record again: \u0060public record NoGood([property: StringLength(2)][param: StringLength(2)] string Payload);\u0060 does not help: the schema is correct but we get the same exception.\r\n\r\nOnly changing to \u0027normal\u0027 properties helps:\r\n\r\n\u0060\u0060\u0060csharp\r\npublic record Good\r\n{\r\n    [StringLength(2)] public required string Payload { get; init; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Expected Behavior\r\n\r\nThe OpenAPI document should match the actual model validation behavior.\r\n\r\n### Steps To Reproduce\r\n\r\nsee https://github.com/CaringDev/PRDA for more context\r\n\r\n### Exceptions (if any)\r\n\r\n\u003E System.InvalidOperationException: Record type \u0027\u003CType\u003E\u0027 has validation metadata defined on property \u0027\u003CName\u003E\u0027 that will be ignored.\r\n\u003E \u0027\u003CName\u003E\u0027 is a parameter in the record primary constructor and validation metadata must be associated with the constructor parameter.\r\n\r\n### .NET Version\r\n\r\n9.0.100-preview.7.24407.12\r\n\r\n### Anything else?\r\n\r\nMicrosoft.AspNetCore.OpenApi = 9.0.0-preview.7.24406.2",
    "upvotes": 1,
    "labels": [
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86Jhx5-",
        "parentId": null,
        "author": "CaringDev",
        "content": "related: https://github.com/dotnet/aspnetcore/issues/39631 but now affecting the OpenAPI document generation",
        "createdAt": "2024-08-23T15:34:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57486#issuecomment-2307333758"
      },
      {
        "id": "IC_kwDOAQzde86JkMHR",
        "parentId": null,
        "author": "captainsafia",
        "content": "@CaringDev Thanks for filing this issue!\r\n\r\nAt the present moment, the \u0060ModelMetadata\u0060 APIs that are used by the \u0060ApiExplorer\u0060 to represent the parameter binding behaviors of type _do not_ expose the properties that can be used to map properties back to constructor parameters ([ref](https://github.com/dotnet/aspnetcore/blob/92097249f384278f5b0f5309757e5f7fff4eb917/src/Mvc/Mvc.Abstractions/src/ModelBinding/ModelMetadata.cs#L178)). This presents a cliff because there\u0027s no way to derive this information without explicitly reconstructing the mappings from properties to parameters yourself.\r\n\r\nConversely, as you\u0027ve mentioned, we don\u0027t respect validation attributes on properties in MVC\u0027s model binding layer. I\u0027m not sure why this constraint exists, other than perhaps there are stronger guarantees about the existence of a valid constructor for a given record type? cc: @javiercn for any insights as to why this is the case\r\n\r\nWe should evaluate what it would look like to make the currently internal APIs in ModelMetadata public so that implementors can consume the property -\u003E parameter mappings.",
        "createdAt": "2024-08-24T00:55:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57486#issuecomment-2307965393"
      },
      {
        "id": "IC_kwDOAQzde86Jk5wF",
        "parentId": null,
        "author": "Eirenarch",
        "content": "I\u0027d like to point out that this also affects other projects that build on top of the ApiExplorer like Swashbuckle so fixing this would be helpful for the greater ecosystem and not only the new OpenAPI support",
        "createdAt": "2024-08-24T06:33:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57486#issuecomment-2308152325"
      },
      {
        "id": "IC_kwDOAQzde86JluEN",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E I\u0027d like to point out that this also affects other projects that build on top of the ApiExplorer like Swashbuckle so fixing this would be helpful for the greater ecosystem and not only the new OpenAPI support\n\nYes -- making the existing parameter to property mappings public in ModelMetada is how this would be achieved.\n\nHowever, this would have to wait until .NET 10 at this point since it requires API review.",
        "createdAt": "2024-08-24T11:52:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57486#issuecomment-2308366605"
      },
      {
        "id": "IC_kwDOAQzde86JlwzW",
        "parentId": null,
        "author": "Eirenarch",
        "content": " \u003E Yes -- making the existing parameter to property mappings public in ModelMetada is how this would be achieved.\r\n\r\nI don\u0027t understand why you need to expose the parameter to property mapping. I admit I don\u0027t know how the API explorer works but I wrote my own Swashbuckle filter for that and it gets as an argument OpenApiSchema model which I assume comes from the API explorer it contains a list of properties (also of type OpenApiSchema) and I basically match the parameters that I get via reflection to the properties and set the attributes on the OpenApiSchema objects themselves. I assume there are more cases to consider but it seems to me that the first step should be to set things like Min/MaxLength and Pattern in the API explorer and return them. No ne APIs needed at least for that part. Or maybe I\u0027m mistaken and this OpenApiSchema that I get in a Swashbuckle filter does not come from the API explorer?",
        "createdAt": "2024-08-24T12:27:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57486#issuecomment-2308377814"
      },
      {
        "id": "IC_kwDOAQzde86JoFu3",
        "parentId": null,
        "author": "captainsafia",
        "content": "Exposing the property-to-parameter mapping effectively provides a shortcut for the parameter to property lookup that you\u0027re currently doing in your code. The benefit is that the property-to-parameter mapping provides richer metadata about the properties being bound.\n\nAs for \u0060OpenApiSchema\u0060, that\u0027s not a type exposed by ApiExplorer. It\u0027s part of the Microsoft.OpenApi package. OpenApi implementers like Swashbuckle and Microsoft.AspNetCore.OpenApi consume metadata from ApiExplorer and map it to OpenApiSchema.\n\nThe property-to-parameter mappings expose an API for accessing the validation attributes that can then be mapped to the validation keywords in the OpenApiSchema (in external components, not in ApiExplorer itself).",
        "createdAt": "2024-08-25T20:45:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57486#issuecomment-2308987831"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86VPmlR",
    "title": "Description on IBindableFromHttpContext parameter of route handler in Minimal API not generated in OpenAPI requestBody",
    "url": "https://github.com/dotnet/aspnetcore/issues/57685",
    "createdAt": "2024-09-03T22:12:58Z",
    "lastUpdated": "2024-09-05T16:39:32Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIn a Minimal API App, the [Description] on an _implicit_ body parameter is lost. In a controller-based app, the description will appear in the description property of the request body in the generated OpenAPI.\r\n\r\n\r\n### Expected Behavior\r\n\r\nIn a Minimal API app, the Description on an implicit body parameter should appear in the description property of the request body in the generated OpenAPI, just as it does for a controller-based app.\r\n\r\n### Steps To Reproduce\r\n\r\nAdd a Description to an implicit body parameter in a minimal API app which is configured to generate its OpenAPI document. Build the project and inspect the operation request body.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n9.0.100-preview.7.24407.12\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86KzOnE",
        "parentId": null,
        "author": "mikekistler",
        "content": "Sorry ... my original bug report was inaccurate. The problem is not with parameters that are explicitly \u0060FromBody\u0060 -- it is with _implicit_ \u0060FromBody\u0060 parameters. I will fix the title \u0026 description.\r\n\r\nAnd here is a project that reproduces the issue with preview 7:\r\n\r\nhttps://github.com/mikekistler/aspnet-openapi-samples\r\n\r\nSpecifically, the \u0060XmlBody\u0060 parameter for this route handler in \u0060\u0060:\r\n\u0060\u0060\u0060csharp\r\n    app.MapPost(\u0022/xml-body\u0022,\r\n    (\r\n        [Description(\u0022An Xml request body\u0022)] XmlBody body\r\n    ) =\u003E\r\n\u0060\u0060\u0060\r\n\r\nis rendered in the generated OpenAPI as:\r\n\u0060\u0060\u0060json\r\n    \u0022requestBody\u0022: {\r\n      \u0022content\u0022: {\r\n        \u0022application/xml\u0022: {\r\n          \u0022schema\u0022: {\r\n            \u0022$ref\u0022: \u0022#/components/schemas/XmlBody\u0022\r\n          }\r\n        }\r\n      },\r\n      \u0022required\u0022: true\r\n    },\r\n\u0060\u0060\u0060\r\n\r\nBy contrast, in the \u0060Controllers/RequestBodies/Controlers/RequestBodiesControllers.cs\u0060, this route handler:\r\n\u0060\u0060\u0060csharp\r\n    public ActionResult\u003CXmlBody\u003E Get(\r\n        [Description(\u0022An Xml request body\u0022)] XmlBody body  // Implicitly FromBody\r\n    )\r\n    {\r\n        // Return the body as an application/json response.\r\n        return Ok(body);\r\n    }\r\n\u0060\u0060\u0060 \r\n\r\nhas this request body in the generated OpenAPI:\r\n\u0060\u0060\u0060json\r\n    \u0022requestBody\u0022: {\r\n      \u0022description\u0022: \u0022An Xml request body\u0022,\r\n      \u0022content\u0022: {\r\n        \u0022application/xml\u0022: {\r\n          \u0022schema\u0022: {\r\n            \u0022$ref\u0022: \u0022#/components/schemas/XmlBody\u0022\r\n          }\r\n        },\r\n        \u0022application/*\u002Bxml\u0022: {\r\n          \u0022schema\u0022: {\r\n            \u0022$ref\u0022: \u0022#/components/schemas/XmlBody\u0022\r\n          }\r\n        }\r\n      },\r\n      \u0022required\u0022: true\r\n    },\r\n\u0060\u0060\u0060",
        "createdAt": "2024-09-04T11:29:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57685#issuecomment-2328684996"
      },
      {
        "id": "IC_kwDOAQzde86LAlpN",
        "parentId": null,
        "author": "captainsafia",
        "content": "So, this bug is specifically related to types that implement some sort of \u0060BindAsync\u0060 method. The \u0060EndpointMetadataApiDescriptionProvider\u0060 currently categorizes any parameters that implement \u0060BindAsync\u0060 as service type parameters:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/71f0a94042feed45b4fadb14d5193a08070cca61/src/Mvc/Mvc.ApiExplorer/src/EndpointMetadataApiDescriptionProvider.cs#L277-L287\r\n\r\nAnd doesn\u0027t emit \u0060ParameterInfo\u0060 descriptors into the \u0060ApiParameterDescription\u0060 for them. As a result, we don\u0027t have any \u0060ParameterInfo\u0060 to query for description attributes and so you don\u0027t get any.\r\n\r\nI think the right thing to do here is to use the \u0060ModelBinding\u0060 binding source to represent \u0060BindAsync\u0060 types although we\u0027d have to evaluate if anything funky happens if we overload the meaning of \u0060ModelBinding\u0060 meaning _MVC\u0027s_ model binding behavior. An alternative would be to define a new \u0060BindingSource\u0060 for \u0060BindAsync\u0060 types but I hesitate to go down this direction...\r\n\r\n",
        "createdAt": "2024-09-05T16:37:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57685#issuecomment-2332187213"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86Vfzgv",
    "title": "Bad request / validation errors by the framework should state field names according to RFC 9457",
    "url": "https://github.com/dotnet/aspnetcore/issues/57714",
    "createdAt": "2024-09-05T15:40:14Z",
    "lastUpdated": "2024-09-19T16:14:30Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWhen a MVC or minimal API request is missing required fields the returned Problem Detail is just a generic error, e.g.:\r\n\r\n\u0060\u0060\u0060\r\n{\r\n  \u0022type\u0022: \u0022https://tools.ietf.org/html/rfc9110#section-15.5.1\u0022,\r\n  \u0022title\u0022: \u0022One or more validation errors occurred.\u0022,\r\n  \u0022status\u0022: 400,\r\n  \u0022errors\u0022: {\r\n    \u0022$\u0022: [\r\n      \u0022The input was not valid.\u0022\r\n    ],\r\n    \u0022request\u0022: [\r\n      \u0022The request field is required.\u0022\r\n    ]\r\n  },\r\n  \u0022traceId\u0022: \u002200-03b1705be061cd08d86ed334c2f45eba-9e23a09ceaa7eb18-00\u0022\r\n}\r\n\u0060\u0060\u0060\r\n\r\nDespite that multiple fields have been missing in this request the message only says that \u0027request field\u0027 is required. There is no information what fields are missing. Additionally, the errors elements don\u0027t follow RFC 9457 recommendation to use details and pointer members.\n\n### Describe the solution you\u0027d like\n\nThe framework should return for example:\r\n\r\n\u0060\u0060\u0060\r\n{\r\n  \u0022type\u0022: \u0022https://tools.ietf.org/html/rfc9110#section-15.5.1\u0022,\r\n  \u0022title\u0022: \u0022One or more validation errors occurred.\u0022,\r\n  \u0022status\u0022: 400,\r\n  \u0022errors\u0022: {\r\n    \u0022detail\u0022: \u0022The field is required.\u0022,\r\n    \u0022pointer\u0022: \u0022#/name\u0022\r\n    },\r\n    {\r\n    \u0022detail\u0022: \u0022The field is required.\u0022,\r\n    \u0022pointer\u0022: \u0022#/address/street\u0022\r\n   },\r\n  \u0022traceId\u0022: \u002200-03b1705be061cd08d86ed334c2f45eba-9e23a09ceaa7eb18-00\u0022\r\n}\r\n\u0060\u0060\u0060\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "feature-problem-details",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86LAetY",
        "parentId": null,
        "author": "captainsafia",
        "content": "@KillerBoogie Thanks for filling this issue!\r\n\r\nFrom my understanding of the problem details specification, the \u0060error\u0060 field is an extension field and it is up to the implementation to dictate what the contents should be.\r\n\r\nOn possibility is using JSON pointers to identify the particular fields associated with each issue, things get interesting with baking this as default behavior in the framework because:\r\n\r\n- Until the recent introduction of JSON Schema support in .NET 9, we don\u0027t have robust mechanisms in the platform for generating JSON pointers out of fields.\r\n- We\u0027d have to reason how these pointers will work for non-JSON payloads. I believe there is still a story in the JSON pointer spec for this but am not familiar with it.\r\n\r\nIt should be visible for 3rd-parties to implement this behavior by extending the ProblemDetails infrastructure in ASP.NET Core. If you\u0027re interested in doing this, I can share some more details as to how it might be achieved. Otherwise, I don\u0027t think think its high priority to change the current behavior of error handling at the time.",
        "createdAt": "2024-09-05T16:22:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57714#issuecomment-2332158808"
      },
      {
        "id": "IC_kwDOAQzde86MteO8",
        "parentId": null,
        "author": "KillerBoogie",
        "content": "\u003E From my understanding of the problem details specification, the error field is an extension field and it is up to the implementation to dictate what the contents should be.\r\n\r\nThat is correct.\r\n\r\n\u003E On possibility is using JSON pointers to identify the particular fields associated with each issue, things get interesting with baking this as default behavior in the framework because:\r\n\r\nThe current error message is non descriptive. Neither human nor machine can understand what the exact problem is. There is no detailed information, because the problematic fields are not stated. There is no need to use JSON pointers they are just a good option and standard to describe the problematic field(s) for a nested JSON structure. You can use anything that is descriptive.\r\n\r\n\u003E It should be visible for 3rd-parties to implement this behavior by extending the ProblemDetails infrastructure in ASP.NET Core. If you\u0027re interested in doing this, I can share some more details as to how it might be achieved. Otherwise, I don\u0027t think think its high priority to change the current behavior of error handling at the time.\r\n\r\nIn general, I\u0027m interested in that information, but I\u0027m disappointed by.NET WEB API again. How can such a bad error message as stated in my example be approved by product quality management? \r\n",
        "createdAt": "2024-09-19T11:29:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57714#issuecomment-2360730556"
      },
      {
        "id": "IC_kwDOAQzde86MwNeW",
        "parentId": null,
        "author": "captainsafia",
        "content": "I\u0027d recommend checking out [the model validation docs](https://learn.microsoft.com/en-us/aspnet/core/mvc/models/validation?view=aspnetcore-8.0) for information on what customizations are available. The error message you see here is the default one but there are ways to customize it to your liking that are documented in this page.",
        "createdAt": "2024-09-19T16:14:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57714#issuecomment-2361448342"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86WMbkV",
    "title": "Fix \u0060ProducesResponseType\u0060 on \u0060IResult\u0060 handling in \u0060OpenApiGenerator\u0060 and \u0060ApiResponseTypeProvider\u0060",
    "url": "https://github.com/dotnet/aspnetcore/issues/57801",
    "createdAt": "2024-09-11T14:00:10Z",
    "lastUpdated": "2024-10-29T22:50:21Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIt looks like minimal apis adds a ProducesResponseTypeMetadata with status 200 automatically to some Map*(Get/Put/Post/...) configurations. From my testing it looks like it happens as long as the Map* is given a delegate which returns some data, including Task or Task_T. In some cases this might be what you want, but if the endpoint, for instance, only returns a 201 Created, then the endpoint metadata is reporting that it both return a 200 and 201(As long as you also adds the Produces(201) metadata), which it does not do. This became a problem for us further down the line, when we tried to generate the corresponding OpenApi document for the metadata information, which added the extra response code, and set the response type to an empty object.\r\n\r\nAs seen in the image, both endpoint which returns a Task, have the extra metadata, but the last one returning only void does not. I also tried returning a string, and then it added the 200, but that would be the correct behavior in that context. The 200 response was removed when returning an Result.NoContent() directly without having it in a Task. \r\n\r\n![image](https://github.com/user-attachments/assets/8063a446-a8a1-4ba9-bac6-685a28ec6bf1)\r\n\r\n\r\n### Expected Behavior\r\n\r\nEither that ProducesResponseTypeMetadata is never added automatically or that it is only automatically added if the endpoint is guaranteed to have a scenario which results in a 200 status code. Looks like the intention was that it gets the 200 if the endpoint returns a type, but it should not get the 200 if it returns void, IResult, Task, or Task_IResult but the last two was not included.\r\n\r\n### Steps To Reproduce\r\n\r\n1. Create a new asp.net core application with minimal apis\r\n2. Add the following endpoints:\r\n\u0060\u0060\u0060csharp\r\n        app.MapPost(\u0022/test\u0022, () =\u003E\r\n            {\r\n                return Task.CompletedTask;\r\n            });\r\n\r\n        app.MapPost(\u0022/test2\u0022, () =\u003E\r\n            {\r\n                return Task.FromResult(Results.NoContent);\r\n            })\r\n            .Produces(201);\r\n\r\n        app.MapPost(\u0022/test3\u0022, () =\u003E\r\n            {\r\n            });\r\n\u0060\u0060\u0060\r\n3. The first two will have the extra metadata added to them.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n9.0.100-rc.1.24452.12\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 2,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86LuJMr",
        "parentId": null,
        "author": "captainsafia",
        "content": "@nicro950 Thanks for filing this issue!\r\n\r\nSome thoughts on the scenarios that you have shared here.\r\n\r\n\u0060() =\u003E Task.CompletedTask\u0060 returning a 200 description _is_ expected behavior. By default, all void-returning methods will have \u0060200 OK\u0060 description associated with them because that matches the framework behavior here. You\u0027ll observe that your last \u0060test3\u0060 example works the same way.\r\n\r\n\u0060() =\u003E Task.FromResult(Results.NoContent)\u0060 is a bit of an interesting scenario. In this particularly case, you\u0027re not returning a \u0060NoContent\u0060 object, you\u0027re returning the _function_ that returns a \u0060NoContent\u0060 object. I think what you\u0027re probably trying to do here is something like \u0060() =\u003E Task.FromResult(TypedResults.Created(...))\u0060. \r\n\r\nLet me know if this response is helpful or if you\u0027re seeing other issues with this!\r\n",
        "createdAt": "2024-09-11T16:29:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2344129323"
      },
      {
        "id": "IC_kwDOAQzde86LuTtq",
        "parentId": null,
        "author": "nicro950",
        "content": "@captainsafia  I can agree with the Task automatically adding 200, but then, should not the 3. option also add the 200 ProducesResponseTypeMetadata, which returns void? \r\n\r\nThe code I wrote here was the simplest form of our problem, showing only the tings resulting in the extra ProducesResponseTypeMetadata being added to the metadata. Our problem is spesific for file upload which returns NoContent after the file is uploaded, and is more closely related to the following code:\r\n\r\n\u0060\u0060\u0060csharp\r\n        app.MapPost(\u0022/file\u0022, async (IFormFile file) =\u003E\r\n        {\r\n            await FileUpload(file);\r\n            return Results.NoContent;\r\n        })\r\n        .Produces(StatusCodes.Status204NoContent);\r\n\u0060\u0060\u0060\r\nwhere it gets both the 200 and 204, even if the endpoint can never return 200.\r\n\r\n![image](https://github.com/user-attachments/assets/c63c75f1-c93a-4525-a948-bfea34a1ddeb)\r\n",
        "createdAt": "2024-09-11T16:50:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2344172394"
      },
      {
        "id": "IC_kwDOAQzde86LuXqq",
        "parentId": null,
        "author": "martincostello",
        "content": "\u0060return Results.NoContent;\u0060 is still returning the function itself, not its result.\r\n\r\nTry:\r\n\r\n\u0060\u0060\u0060diff\r\n- return Results.NoContent;\r\n\u002B return Results.NoContent();\r\n\u0060\u0060\u0060",
        "createdAt": "2024-09-11T16:55:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2344188586"
      },
      {
        "id": "IC_kwDOAQzde86LuaDs",
        "parentId": null,
        "author": "nicro950",
        "content": "@martincostello Sorry about that, but it does not look like it is related to the problem even if you return the object result instead of, it still adds both of the statuses, since our original code do work the proper way, but by trying to remove the most, resulted in in dissaparing:\r\n![image](https://github.com/user-attachments/assets/3acfb950-2bdd-4233-99c4-7737dc2022d8)\r\n\r\n",
        "createdAt": "2024-09-11T16:57:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2344198380"
      },
      {
        "id": "IC_kwDOAQzde86LumLR",
        "parentId": null,
        "author": "nicro950",
        "content": "@martincostello @captainsafia here should be a proper example, showing all the types involved (so i can get them correct myself as well \uD83D\uDE05). As we can see, both the 200 and 204 are added to the metadata list. Sorry about the bad examples. \r\n\r\n![image](https://github.com/user-attachments/assets/cd474e17-4e92-48c2-93f1-55a1de20212e)\r\n",
        "createdAt": "2024-09-11T17:13:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2344248017"
      },
      {
        "id": "IC_kwDOAQzde86LwT1e",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E As we can see, both the 200 and 204 are added to the metadata list. Sorry about the bad examples.\r\n\r\nI think the problem that you are seeing here is related to the fact that you are using \u0060Results.NoContent\u0060 instead of \u0060TypedResults.NoContent\u0060. The \u0060Results.NoContent\u0060 type doesn\u0027t produce any metadata about what it produces to the API. In lieu of this, minimal APIs will make the same assumption that it makes about \u0060void\u0060-returning types: that they should return 200 OK.\r\n\r\nUpdating your API to use \u0060TypedResults.NoContent\u0060 should get you the right behavior here.",
        "createdAt": "2024-09-11T21:03:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2344697182"
      },
      {
        "id": "IC_kwDOAQzde86Ly5IJ",
        "parentId": null,
        "author": "nicro950",
        "content": "Using TypedResult, and it still adds the 200 return status:\r\n![image](https://github.com/user-attachments/assets/6b0e61cd-d5e5-4acd-bd02-a1d9099beede)\r\n\r\nThat logic would also break the moment you return multiple statuses if you have some not found check, or conflict check or something like that, and the function needs to fallback to using IResult as the common return type. ",
        "createdAt": "2024-09-12T06:26:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2345374217"
      },
      {
        "id": "IC_kwDOAQzde86L19w8",
        "parentId": null,
        "author": "chrisoverzero",
        "content": "\u003E That logic would also break the moment you return multiple statuses [\u2026]\r\n\r\nThis is what [the composite Results type][composite] is meant for when used as a return type.\r\n\r\n[composite]: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/responses?view=aspnetcore-8.0#resultstresult1-tresultn",
        "createdAt": "2024-09-12T12:42:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2346179644"
      },
      {
        "id": "IC_kwDOAQzde86L2W7u",
        "parentId": null,
        "author": "nicro950",
        "content": "@chrisoverzero Nice, did not now about that one, since we have mostly abstracted that layer away, but it still adds the 200 in that case \uD83D\uDE05 \r\n![image](https://github.com/user-attachments/assets/65ff27d5-da16-44e1-bd8b-193da1e67e05)\r\n\r\nPersonally, I just feel like if a IResult is returned (Either IResult or Task_IResult), then it should not make any assumption about what HTTP status is returned from the result, and it should be up to the user to add it to the metadata manually. ",
        "createdAt": "2024-09-12T13:26:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2346282734"
      },
      {
        "id": "IC_kwDOAQzde86L5D42",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E @chrisoverzero Nice, did not now about that one, since we have mostly abstracted that layer away, but it still adds the 200 in that case \uD83D\uDE05 ![image](https://private-user-images.githubusercontent.com/1964338/366892321-65ff27d5-da16-44e1-bd8b-193da1e67e05.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjYxNjYyMDgsIm5iZiI6MTcyNjE2NTkwOCwicGF0aCI6Ii8xOTY0MzM4LzM2Njg5MjMyMS02NWZmMjdkNS1kYTE2LTQ0ZTEtYmQ4Yi0xOTNkYTFlNjdlMDUucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDkxMiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDA5MTJUMTgzMTQ4WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZmNlODAyZWU0OWFmNzZlYmU4NDQ3MmFmZTM2MWZiN2Y0MGZkMTg4ODlkOWIxZDA5Zjc3MGZjN2E3OWZkODcyYiZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.ViCIyS4Vi7EuJbwU-Une6PX35AfUM7biDjyGL3Uw-cQ)\r\n\u003E \r\n\u003E Personally, I just feel like if a IResult is returned (Either IResult or Task_IResult), then it should not make any assumption about what HTTP status is returned from the result, and it should be up to the user to add it to the metadata manually.\r\n\r\nMinor nit: the typical pattern is to use the \u0060Results\u003C\u003E\u0060 type as the return for the method instead of casting the given case.\r\n\r\nThe \u0060ProducesResponseTypeMetadata\u0060 that gets added here is a result of the recent work that we\u0027ve done to support native AoT for minimal APIs \u002B OpenAPI. Essentially, we use that metadata as a replacement for dynamic reflection for resolving the return type from methods that return awaitable types (like yours).\r\n\r\nWhen this metadata is processed by the ApiExplorer layer, it gets filters out from the ApiResponse objects that are constructed. IMO, for realizing what response types are actually produced by an endpoint API explorer (and not endpoint metadata) should be the source of truth.\r\n\r\nThe original proposal for resolving this bug proposed using a new metadata type to capture await able unwrapping but we opted to use \u0060ProducesResponseType\u0060 since ti already exists. We can consider adding a property to indicate that it is auto-generated.\r\n\r\nIs there a particular library that is querying this metadata and running into issues?",
        "createdAt": "2024-09-12T18:40:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2346991158"
      },
      {
        "id": "IC_kwDOAQzde86L_JGi",
        "parentId": null,
        "author": "nicro950",
        "content": "\u003E Minor nit: the typical pattern is to use the Results\u003C\u003E type as the return for the method instead of casting the given case.\r\n\r\nYeah, I know, it was just the easiest way to force the return type resolution to chose the correct type, instead of having to create a separate function. \r\n\r\n\u003E The ProducesResponseTypeMetadata that gets added here is a result of the recent work that we\u0027ve done to support native AoT for minimal APIs \u002B OpenAPI. Essentially, we use that metadata as a replacement for dynamic reflection for resolving the return type from methods that return awaitable types (like yours).\r\n\r\nAha, that make sense, I went in to take a look at the code, and the code worked as i expected before it was changed in a pr which had something to do with Native AoT, which I have little knowledge about, so I trust that you do the right thing there.\r\n\r\nThe reason I made the bug in that way in the first place was that the metadata was the first place i looked when open api generator started generating 200 statuses with result type void, in the form of \u0060SwaggerResponse\u003Cvoid\u003E\u0060 which did not make sense at all. Then afterwards I manually removed the 200 from the endpoint metadata and the problem was resolved in our code.\r\n\r\nSo a little more context, we are using NSwag to generate both the OpenAPI document, as well as C# clients from the OpenAPI document afterwards. I went digging into the NSwag source code with stepthrough debugging and it looks like NSwag uses the \u0060Microsoft.OpenApi.Models.OpenApiOperation\u0060 added from \u0060.WithOpenApi()\u0060 with the \u0060Microsoft.AspNetCore.OpenApi\u0060 package with version \u00609.0.0-rc.1.24452.1\u0060.\r\n\r\nWhile inspecting the code it looks like it does not filter out the 200 status code:\r\n![image](https://github.com/user-attachments/assets/67166f11-b90c-45f9-95b1-6c5542e90620)\r\n\r\nWhich like you mentioned that ApiExplorer does:\r\n![image](https://github.com/user-attachments/assets/cff3185b-00e4-4784-9d7c-33bb50746ec8)\r\n\r\nNot quite sure if this issue should be edited and renamed, or moved somewhere else, or created again in another repo, or if there is an intention to change status code resolution of the \u0060.WithOpenApi()\u0060?\r\n\r\n\u003E The original proposal for resolving this bug proposed using a new metadata type to capture await able unwrapping but we opted to use ProducesResponseType since ti already exists. We can consider adding a property to indicate that it is auto-generated. \r\n\r\nI was at least confused by the automatically added status code, which i never added, and probably some other code out there which might depend on the minimal api metadata. But I think that you have a larger knowledge context on the matter, so would be hard for me to know about all the nuances with choosing one option or another here.",
        "createdAt": "2024-09-13T10:18:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2348585378"
      },
      {
        "id": "IC_kwDOAQzde86MIOfR",
        "parentId": null,
        "author": "dotnet-policy-service",
        "content": "This issue has been resolved and has not had any activity for **1 day**. It will be closed for housekeeping purposes.\n\nSee [our Issue Management Policies](https://aka.ms/aspnet/issue-policies) for more information.\n\u003C!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003E",
        "createdAt": "2024-09-14T12:02:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2350966737"
      },
      {
        "id": "IC_kwDOAQzde86MJOig",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E So a little more context, we are using NSwag to generate both the OpenAPI document, as well as C# clients from the OpenAPI document afterwards. I went digging into the NSwag source code with stepthrough debugging and it looks like NSwag uses the Microsoft.OpenApi.Models.OpenApiOperation added from .WithOpenApi() with the Microsoft.AspNetCore.OpenApi package with version 9.0.0-rc.1.24452.1.\r\n\r\nOh! It\u0027s rather surprising to me that NSwag is using the \u0060OpenApiOperation\u0060 in metadata that is generated by the \u0060WithOpenApi\u0060 extension method. I filed this issue in the NSwag repo (https://github.com/RicoSuter/NSwag/issues/4163) back when we first introduced the \u0060WithOpenApi\u0060 extension method in .NET 7. As of today, the issue appears to be open so I assumed that NSwag didn\u0027t support the \u0060WithOpenApi\u0060 strategy.\r\n\r\nCan you verify what version of NSwag you\u0027re running into this issue with?\r\n",
        "createdAt": "2024-09-14T23:54:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2351229088"
      },
      {
        "id": "IC_kwDOAQzde86ML9Pf",
        "parentId": null,
        "author": "dotnet-policy-service",
        "content": "This issue has been resolved and has not had any activity for **1 day**. It will be closed for housekeeping purposes.\n\nSee [our Issue Management Policies](https://aka.ms/aspnet/issue-policies) for more information.\n\u003C!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003E",
        "createdAt": "2024-09-16T02:59:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2351944671"
      },
      {
        "id": "IC_kwDOAQzde86MMyE8",
        "parentId": null,
        "author": "nicro950",
        "content": "Aha, interesting. We are using the latest version of nswag 14.1.0 in our project. I think this is the code that fetches the OpenApiOperation and uses that: https://github.com/RicoSuter/NSwag/blob/7d6df3af95081f3f0ed6dee04be8d27faa86f91a/src/NSwag.Generation.AspNetCore/AspNetCoreOpenApiDocumentGenerator.cs#L241, but not sure if it uses all of the functionality of the metadata or just the operations it produces.\r\n\r\nEdit:\r\nI am quite certain that it does not use all the metadata, since i just remembered that we have the following code:\r\n\r\n\u0060\u0060\u0060csharp\r\nvar openApiOperation = metadata\r\n    .OfType\u003CMicrosoft.OpenApi.Models.OpenApiOperation\u003E()\r\n    .FirstOrDefault();\r\n\r\nif (openApiOperation != null)\r\n{\r\n    context.OperationDescription.Operation.Description = openApiOperation.Description;\r\n}\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2024-09-16T07:10:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2352161084"
      },
      {
        "id": "IC_kwDOAQzde86MYnJm",
        "parentId": null,
        "author": "dotnet-policy-service",
        "content": "This issue has been resolved and has not had any activity for **1 day**. It will be closed for housekeeping purposes.\n\nSee [our Issue Management Policies](https://aka.ms/aspnet/issue-policies) for more information.\n\u003C!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003E",
        "createdAt": "2024-09-17T10:36:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2355262054"
      },
      {
        "id": "IC_kwDOAQzde86MZUf5",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Aha, interesting. We are using the latest version of nswag 14.1.0 in our project. I think this is the code that fetches the OpenApiOperation and uses that: https://github.com/RicoSuter/NSwag/blob/7d6df3af95081f3f0ed6dee04be8d27faa86f91a/src/NSwag.Generation.AspNetCore/AspNetCoreOpenApiDocumentGenerator.cs#L241, but not sure if it uses all of the functionality of the metadata or just the operations it produces.\r\n\r\nThanks for digging this up! I just took a look at the code and here\u0027s my interpretation of how it works. The fundamental issue here is the fact that unlike \u0060Microsoft.AspNetCore.OpenApi\u0060 and \u0060Swashbuckle\u0060 which both use the types in the [Microsoft.OpenApi package](https://www.nuget.org/packages/Microsoft.OpenApi) to describe an OpenAPI document, NSwag uses its own types to represent the OpenAPI document. So, NSwag pulls the \u0060OpenApiOperation\u0060 from metadata ([1](https://github.com/RicoSuter/NSwag/blob/7d6df3af95081f3f0ed6dee04be8d27faa86f91a/src/NSwag.Generation.AspNetCore/AspNetCoreOpenApiDocumentGenerator.cs#L238-L241)), resolves the serializer for that type from the \u0060Microsoft.OpenApi\u0060 library using private reflection ([2](https://github.com/RicoSuter/NSwag/blob/7d6df3af95081f3f0ed6dee04be8d27faa86f91a/src/NSwag.Generation.AspNetCore/AspNetCoreOpenApiDocumentGenerator.cs#L246)), uses the serializer to serialize that operation to a string ([3](https://github.com/RicoSuter/NSwag/blob/7d6df3af95081f3f0ed6dee04be8d27faa86f91a/src/NSwag.Generation.AspNetCore/AspNetCoreOpenApiDocumentGenerator.cs#L249-L250)), then deserializes that string using its _own_ serializer APIs to the its _own_ types ([4](https://github.com/RicoSuter/NSwag/blob/7d6df3af95081f3f0ed6dee04be8d27faa86f91a/src/NSwag.Generation.AspNetCore/AspNetCoreOpenApiDocumentGenerator.cs#L252)).\r\n\r\nTL;DR: it uses private reflection \u002B string-based round tripping to map between the types. There\u0027s a chance that there is a bug in this round-tripping logic that means some properties don\u0027t get fully round-tripped?\r\n\r\nI re-opened this issue because I thought there might be something here but I think the best thing to do in this case is to file a bug on NSwag about this issue.",
        "createdAt": "2024-09-17T11:37:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2355447801"
      },
      {
        "id": "IC_kwDOAQzde86MeIBf",
        "parentId": null,
        "author": "nicro950",
        "content": "@captainsafia Found that Swashbuckle version \u00606.7.3\u0060 exhibits the same behavior when using the WithOpenApi Endpoint metadata:\r\n\r\n![image](https://github.com/user-attachments/assets/37a0595b-2522-464a-8ded-67ca98142c97)\r\nAnd then without it:\r\n![image](https://github.com/user-attachments/assets/d3be0574-8d65-4766-9458-7dd4f6967578)\r\n\r\nSo it probably does that since the \u0060WithOpenApi\u0060 metadata from the \u0060Microsoft.AspNetCore.OpenApi\u0060 package, adds the \u0060OpenApiOperation\u0060 in the endpoint metadata which says that there are two statuses instead of one: \r\n![image](https://github.com/user-attachments/assets/6a7e0253-c00e-426b-904b-c7631c20b2d0)\r\n",
        "createdAt": "2024-09-17T19:16:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2356707423"
      },
      {
        "id": "IC_kwDOAQzde86MxBqx",
        "parentId": null,
        "author": "captainsafia",
        "content": "@nicro950 Good debugging! I realize that we need to update [the logic here as well](https://github.com/dotnet/aspnetcore/blob/542f2b9877da67e90cca6ce1b65aa9557fbb2aa8/src/OpenApi/src/Services/OpenApiGenerator.cs#L112-L133) \uD83E\uDD26\uD83C\uDFFD\u200D\u2640\uFE0F \r\n\r\nI\u0027ll reopen this issue and see if it is possible to get a fix out for .NET 9 GA.",
        "createdAt": "2024-09-19T16:59:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2361662129"
      },
      {
        "id": "IC_kwDOAQzde86NSVJy",
        "parentId": null,
        "author": "nicro950",
        "content": "@captainsafia No problem, happy to help, and sounds good :) ",
        "createdAt": "2024-09-24T07:17:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2370392690"
      },
      {
        "id": "IC_kwDOAQzde86RaQKv",
        "parentId": null,
        "author": "dj-nitehawk",
        "content": "@captainsafia \ni believe there\u0027s a bug/regression introduced in .net9.0\u0027s \u0060ApiResponseTypeProvider\u0060 which is possibly related to this issue.\nhere\u0027s the simplest repro:\n\u0060\u0060\u0060cs\nvar bld = WebApplication.CreateBuilder(args);\nbld.Services\n   .AddEndpointsApiExplorer()\n   .AddOpenApiDocument(); // both nswag and Microsoft.AspNetCore.OpenApi has same problem\n\nvar app = bld.Build();\n\napp.MapGet(\u0022test\u0022, () =\u003E new MyResponse { Content = \u0022hello!\u0022 })\n   .Produces\u003CMyResponse\u003E(200, \u0022application/json\u0022); //this is ignored if response type implements IResult\n\napp.UseOpenApi()\n   .UseSwaggerUi();\napp.Run();\n\npublic class MyResponse : IResult //commenting out IResult or switching to net8.0 sdk fixes it\n{\n    public required string Content { get; set; }\n\n    public Task ExecuteAsync(HttpContext httpContext) { ... }\n}\n\u0060\u0060\u0060\ncauses nswag to spit out an incorrect \u0060responses\u0060 section like this:\n![Image](https://github.com/user-attachments/assets/4d19c2b3-ccf3-4e7b-814c-761ffbf8851a)\n\nswitching the project sdk version to \u0060net8.0\u0060 or removing \u0060IResult\u0060 from the response class brings back the correct swagger spec:\n![Image](https://github.com/user-attachments/assets/94bc01d3-01ce-41e6-9f31-91d4413859cd)\n\nthe situation doesn\u0027t change even if the delegate is changed to this:\n\n\u0060\u0060\u0060cs\napp.MapGet(\u0022test\u0022, () =\u003E TypedResults.Ok(new MyResponse { Content = \u0022hello!\u0022 }))\n\u0060\u0060\u0060\n\nis ignoring custom \u0060ProducesResponseTypeMetadata\u0060 added to endpoints an intentional breaking change in .net 9?\n\nthanks! ",
        "createdAt": "2024-10-26T13:11:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2439578287"
      },
      {
        "id": "IC_kwDOAQzde86RazIH",
        "parentId": null,
        "author": "captainsafia",
        "content": "@dj-nitehawk This isn\u0027t an intentional breaking change as it is a known issue. I unfortunately didn\u0027t have the time to post a PR with a bug fix for this before our 9.0 GA so this will have to catch the 9.1 wave.\n\nAs you mentioned, this issue is specific to the use of \u0060IResult\u0060 as the \u0060Type\u0060 property in \u0060ProducesResponseTypeMetadata\u0060. In .NET 9, we made a chance to support native AoT that re-used \u0060ProducesResponseTypeMetadata\u0060. The bug is specifically a result of [this bit of code in the ApiResponseTypeProvider](https://source.dot.net/#Microsoft.AspNetCore.Mvc.ApiExplorer/ApiResponseTypeProvider.cs,233). That code was originally introduced to resolve https://github.com/dotnet/aspnetcore/issues/56975 so any fixes would have to make sure we don\u0027t regress that scenario.\n\nFor now, you can workaround this by using the \u0060ProducesAttribute\u0060 to inject the actual type. It doesn\u0027t implement the interface that the check above is susceptible to:\n\n\u0060\u0060\u0060csharp\nusing System.Reflection;\nusing Microsoft.AspNetCore.Http.Metadata;\nusing Microsoft.AspNetCore.Mvc;\n\nvar bld = WebApplication.CreateBuilder(args);\nbld.Services.AddOpenApi();\n\nvar app = bld.Build();\n\napp.MapGet(\u0022broken\u0022, () =\u003E new MyResponse { Content = \u0022hello!\u0022 })\n   .Produces\u003CMyResponse\u003E(200, \u0022application/json\u0022); \n\napp.MapGet(\u0022works\u0022, [Produces(typeof(MyResponse))] () =\u003E new MyResponse { Content = \u0022hello!\u0022 })\n   .Produces\u003CMyResponse\u003E(200, \u0022application/json\u0022); \n\napp.MapGet(\u0022also-works\u0022, () =\u003E new MyResponse2 { Content = \u0022hello!\u0022 })\n   .Produces\u003CMyResponse2\u003E(200, \u0022application/json\u0022); \n\n\n\napp.MapOpenApi();\n\napp.Run();\n\npublic class MyResponse2 : IResult, IEndpointMetadataProvider \n{\n    public required string Content { get; set; }\n\n    public static void PopulateMetadata(MethodInfo method, EndpointBuilder builder)\n    {\n        builder.Metadata.Add(new ProducesAttribute(typeof(MyResponse)));\n    }\n\n    public Task ExecuteAsync(HttpContext httpContext)\n    {\n        return Task.CompletedTask;\n    }\n}\n\npublic class MyResponse : IResult //commenting out IResult or switching to net8.0 sdk fixes it\n{\n    public required string Content { get; set; }\n\n    public Task ExecuteAsync(HttpContext httpContext)\n    {\n        return Task.CompletedTask;\n    }\n}\n\u0060\u0060\u0060",
        "createdAt": "2024-10-26T20:04:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2439721479"
      },
      {
        "id": "IC_kwDOAQzde86RbTRR",
        "parentId": null,
        "author": "dj-nitehawk",
        "content": "@captainsafia thanks for the fast response and workaround. however, consider the following scenario:\n\n\u0060\u0060\u0060cs\napp.MapGet(\u0022test\u0022, () =\u003E new MyResponse { Content = \u0022hello!\u0022 })\n   .Produces\u003CMyResponse\u003E(200, \u0022application/json\u0022)\n   .WithMetadata( new ProducesAttribute(typeof(ErrorResponse)) { ContentTypes = [\u0022application/problem\u002Bjson\u0022] });\n\u0060\u0060\u0060\n\nabove produces the following output with \u0060AspNetCore.OpenApi\u0060:\n\n\u0060\u0060\u0060json\n{\n  \u0022responses\u0022: {\n    \u0022200\u0022: {\n      \u0022content\u0022: {\n        \u0022application/json\u0022: {\n          \u0022schema\u0022: {\n            \u0022$ref\u0022: \u0022#/components/schemas/MyResponse\u0022\n          }\n        },\n        \u0022application/problem\u002Bjson\u0022: {\n          \u0022schema\u0022: {\n            \u0022$ref\u0022: \u0022#/components/schemas/MyResponse\u0022\n          }\n        }\n      }\n    }\n  }\n}\n\u0060\u0060\u0060\n\nfirst limitation is \u0060ProducesAttribute\u0060 can\u0027t represent anything other than a 200 status code, so it gets lumped in with the 200 responses, and the entry seems to be pointing to the wrong schema whereas it should $ref to \u0060ErrorResponse\u0060. also this approach has no effect in nswag. \u0060ProducesAttribute\u0060 metadata entry is totally ignored in nswag.",
        "createdAt": "2024-10-27T05:26:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2439853137"
      },
      {
        "id": "IC_kwDOAQzde86RnHvC",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E first limitation is ProducesAttribute can\u0027t represent anything other than a 200 status code, so it gets lumped in with the 200 responses, and the entry seems to be pointing to the wrong schema whereas it should $ref to ErrorResponse.\n\n@dj-nitehawk Assuming that \u0060ErrorResponse\u0060 is also a type that implements \u0060IResult\u0060 you can implement an \u0060IEndpointMetadataProvider\u0060 there but use the \u0060ProducesResponseTypeAttribute\u0060. I made [this gist](https://gist.github.com/captainsafia/ef8c957d410b76f4e8a17403964329fd) with the code I used and the output that I got.\n\n\u003E also this approach has no effect in nswag. ProducesAttribute metadata entry is totally ignored in nswag.\n\nI was able to repro this behavior. For the example above, both \u0060Microsoft.AspNetCore.OpenApi\u0060 and \u0060Swashbuckle.AspNetCore\u0060 produce similar and accurate documents but NSwag doesn\u0027t appear to respect the content-type on the \u0060ErrorResponse\u0060 at all. \uD83D\uDE1E \n\nThis one might require further investigation. NSwag\u0027s OpenAPI implementation is unique amongst the trio because it uses it\u0027s own Open API base types instead of [Microsoft.OpenApi](https://www.nuget.org/packages/Microsoft.OpenApi) and from prior investigations there\u0027s a more post-processing that NSwag does on ApiExplorer metadata than what Swashbuckle and Microsoft.AspNetCore.OpenApi do so the issue might be a result of one of those things (or something else entirely because...computers).\n",
        "createdAt": "2024-10-29T00:58:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2442951618"
      },
      {
        "id": "IC_kwDOAQzde86RnNCK",
        "parentId": null,
        "author": "dj-nitehawk",
        "content": "@captainsafia dang \uD83D\uDE22\nunfortunately for us over at fastendpoints, we\u0027re currently tied to nswag. will workaround this for the time being with more postprocessing i suppose. this comes in to play for us because our own [ProblemDetails](https://github.com/FastEndpoints/FastEndpoints/blob/main/Src/Library/DTOs/ProblemDetails.cs) class implements \u0060IResult\u0060. the library automatically adds the 400 produces metadata if there\u0027s a fluentvalidator attached to the endpoint.\n\ncheers!",
        "createdAt": "2024-10-29T01:21:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2442973322"
      },
      {
        "id": "IC_kwDOAQzde86Rwt2x",
        "parentId": null,
        "author": "captainsafia",
        "content": "@dj-nitehawk Took another look at this and it seems like the best option to address both issues here is adding the existing \u0060typeof(IResult)\u0060 check to \u0060OpenApiGenerator\u0060 and adding additional logic to only skip ASP.NET Core-owned \u0060IResult\u0060 implementations.\n\n\u0060\u0060\u0060csharp\nif (typeof(IResult).IsAssignableFrom(metadata.Type) \u0026\u0026\n  (typeof(Microsoft.AspNetCore.Http.HttpResults.Accepted).Assembly == metadata.Type.Assembly ||\n  typeof(IResult).Assembly == metadata.Type.Assembly))\n\u0060\u0060\u0060\n\nI noticed that your implementation uses \u0060IEndpointMetadataProvider\u0060 which is great! A lot of places in our code assume that \u0060Result\u0060 implementing types will indicate what metadata they should generate via the \u0060IEndpointMetadataProvider\u0060 interface, for example:\n\nhttps://github.com/dotnet/aspnetcore/blob/d7130a2c5a99147005744969aab7f837c82659d5/src/Http/Http.Extensions/src/RequestDelegateFactory.cs#L1039-L1040\n\nHowever, the gotcha here is that the \u0060ProducesResponseTypeMetadata\u0060 that you insert is itself an \u0060IResult\u0060-implementing type. The check above would exempt \u0060FastEndpoints\u0060s \u0060ProblemDetails\u0060 type from this check (and also everybody else\u0027s) from this behavior which should resolve the issue.\n\nI think this bug slipped through because of the assumption the framework makes above that \u0060Result\u0060 with no \u0060IEndpointMetadataProvider\u0060 means no metadata gets populated and that no implementations of \u0060IEndpointMetadataProvider\u0060 in ASP.NET Core themselves insert an IResult-based type into metadata.\n\nThe categories impacted here are:\n\n- IResult directly\n- Types in ASP.NET Core that implement IResult but not IEndpointMetadataProvider\n- Types in ASP.NET Core that implement IResult _and_IEndpointMetadataProvider\n- Types in other frameworks that implement IResult but not IEndpointMetadataProvider\n- Types in other frameworks that implement IResult _and_ IEndpointMetadataProvider\n- Types in other frameworks that implement IResult _and_ IEndpointMetadataProvider _that implements an IResults-implementing type_ (not covered in our tests)",
        "createdAt": "2024-10-29T22:50:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57801#issuecomment-2445467057"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86WdUXl",
    "title": "OpenApi ApiVersionAttribute.Deprecated not reflected in schema",
    "url": "https://github.com/dotnet/aspnetcore/issues/57853",
    "createdAt": "2024-09-13T08:52:22Z",
    "lastUpdated": "2024-09-16T14:46:11Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen adding an \u0060ApiVersionAttribute\u0060 with \u0060Deprecated = true\u0060 to a controller, the operation schema is not marked as \u0060\u0022deprecated\u0022: true\u0060\n\n### Expected Behavior\n\nWhen adding an \u0060ApiVersionAttribute\u0060 with \u0060Deprecated = true\u0060 to a controller, the operation schema should be marked with \u0060\u0022deprecated\u0022: true\u0060\n\n### Steps To Reproduce\n\nServices\r\n\u0060\u0060\u0060cs\r\nservices.AddRouting();\r\nservices.AddControllers();\r\n\r\nservices.AddApiVersioning();\r\nservices.AddVersionedApiExplorer(options =\u003E\r\n{\r\n  options.GroupNameFormat = \u0022\u0027v\u0027VVV\u0022;\r\n  options.SubstituteApiVersionInUrl = true;\r\n});\r\nservices.AddOpenApi(\u0022v1\u0022);\r\n\u0060\u0060\u0060\r\n\r\nController\r\n\u0060\u0060\u0060cs\r\n[ApiController]\r\n[Route(\u0022api/v{version:apiVersion}/[controller]\u0022)]\r\n[ApiVersion(\u00221\u0022, Deprecated = true)]\r\npublic class ExampleController : ControllerBase\r\n{\r\n  [HttpGet(\u0022{id}\u0022)]\r\n  public int Get(int id)\r\n  {\r\n    return id;\r\n  }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nResult\r\n\u0060\u0060\u0060json\r\n{\r\n  \u0022openapi\u0022: \u00223.0.1\u0022,\r\n  \u0022info\u0022: {\r\n    \u0022title\u0022: \u0022ExampleProject | v1\u0022,\r\n    \u0022version\u0022: \u00221.0.0\u0022\r\n  },\r\n  \u0022paths\u0022: {\r\n    \u0022/api/v1/Example/{id}\u0022: {\r\n      \u0022get\u0022: {\r\n        \u0022tags\u0022: [\r\n          \u0022Example\u0022\r\n        ],\r\n        \u0022parameters\u0022: [\r\n          {\r\n            \u0022name\u0022: \u0022id\u0022,\r\n            \u0022in\u0022: \u0022path\u0022,\r\n            \u0022required\u0022: true,\r\n            \u0022schema\u0022: {\r\n              \u0022type\u0022: \u0022integer\u0022,\r\n              \u0022format\u0022: \u0022int32\u0022\r\n            }\r\n          }\r\n        ],\r\n        \u0022responses\u0022: {\r\n          \u0022200\u0022: {\r\n            \u0022description\u0022: \u0022OK\u0022,\r\n            \u0022content\u0022: {\r\n              \u0022text/plain\u0022: {\r\n                \u0022schema\u0022: {\r\n                  \u0022type\u0022: \u0022integer\u0022,\r\n                  \u0022format\u0022: \u0022int32\u0022\r\n                }\r\n              },\r\n              \u0022application/json\u0022: {\r\n                \u0022schema\u0022: {\r\n                  \u0022type\u0022: \u0022integer\u0022,\r\n                  \u0022format\u0022: \u0022int32\u0022\r\n                }\r\n              },\r\n              \u0022text/json\u0022: {\r\n                \u0022schema\u0022: {\r\n                  \u0022type\u0022: \u0022integer\u0022,\r\n                  \u0022format\u0022: \u0022int32\u0022\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \u0022components\u0022: { },\r\n  \u0022tags\u0022: [\r\n    {\r\n      \u0022name\u0022: \u0022Example\u0022\r\n    }\r\n  ]\r\n}\r\n\u0060\u0060\u0060\r\n\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100-rc.1.24452.12\n\n### Anything else?\n\nAn \u0060IOpenApiOperationTransformer\u0060 like below could serve as a workaround, but I would prefer this functionality to be built in.\r\n\r\n\u0060\u0060\u0060cs\r\nclass ApiVersionDeprecatedTransformer : IOpenApiOperationTransformer\r\n{\r\n  public Task TransformAsync(\r\n    OpenApiOperation operation,\r\n    OpenApiOperationTransformerContext context,\r\n    CancellationToken cancellationToken)\r\n  {\r\n    if (context.Description.ActionDescriptor is ControllerActionDescriptor controllerActionDescriptor \u0026\u0026\r\n        context.Description.Properties.TryGetValue(typeof(ApiVersion), out var apiVersionObject) \u0026\u0026\r\n        apiVersionObject is ApiVersion apiVersion)\r\n    {\r\n      var versionAttributes = controllerActionDescriptor.ControllerTypeInfo.GetCustomAttributes\u003CApiVersionAttribute\u003E();\r\n      if (versionAttributes.Any(attribute =\u003E attribute.Deprecated \u0026\u0026 attribute.Versions.Single() == apiVersion))\r\n      {\r\n        operation.Deprecated = true;\r\n      }\r\n    }\r\n\r\n    return Task.CompletedTask;\r\n  }\r\n}\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86L-oeQ",
        "parentId": null,
        "author": "martincostello",
        "content": "This looks like a feature request for [dotnet/aspnet-api-versioning](https://github.com/dotnet/aspnet-api-versioning) - \u0060[ApiVersion]\u0060 isn\u0027t part of ASP.NET Core itself.\r\n",
        "createdAt": "2024-09-13T09:15:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57853#issuecomment-2348451728"
      },
      {
        "id": "IC_kwDOAQzde86L_EJL",
        "parentId": null,
        "author": "JTeeuwissen",
        "content": "might be related: https://github.com/dotnet/aspnet-api-versioning/issues/1044",
        "createdAt": "2024-09-13T10:07:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57853#issuecomment-2348565067"
      },
      {
        "id": "IC_kwDOAQzde86L_OUl",
        "parentId": null,
        "author": "martincostello",
        "content": "\u0060WithOpenApi()\u0060 on endpoints behaves differently to the new \u0060AddOpenApi()\u0060 functionality in .NET 9. \u0060WithOpenApi()\u0060 is for existing OpenAPI libraries, like Swashbuckle, to use, whereas the latter is the new functionality that generates the entire document.\r\n\r\nTransformers etc. are only used with \u0060AddOpenApi()\u0060, so API Versioning would still need to be updated to be able to use them to enrich the OpenAPI document with extra metadata related to its versioning attributes.",
        "createdAt": "2024-09-13T10:29:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57853#issuecomment-2348606757"
      },
      {
        "id": "IC_kwDOAQzde86MJTvu",
        "parentId": null,
        "author": "captainsafia",
        "content": "@JTeeuwissen Yes, as @martincostello mentioned, the \u0060[ApiVersion]\u0060 attribute comes from the Asp.Versioning library and we don\u0027t support it by-default in ASP.NET Core. As a result, the user has to use Swashbuckle filters/OpenAPI transformers in order to see the deprecation status in the document. The strategy for doing this with Swashbuckle is documented [in this sample in the aspnet-api-versioning repo](https://github.com/dotnet/aspnet-api-versioning/blob/3fc071913dcded23eeb5ebe55bca44f3828488bf/examples/AspNetCore/WebApi/MinimalOpenApiExample/ConfigureSwaggerOptions.cs). The strategy for doing this with M.A.OpenApi 9 is currently only documented [in the eShop repo here](https://github.com/dotnet/eShop/blob/1f0abc6d377173da1216bcfa28aab2184d61f3d6/src/eShop.ServiceDefaults/OpenApiOptionsExtensions.cs).\r\n\r\nAs to why this behavior isn\u0027t built in at the moment, there is actually an issue about adding support for an \u0060IsDeprecated\u0060 property to \u0060ApiDescription\u0060 over in https://github.com/dotnet/aspnetcore/issues/43493.\r\n\r\nIn the past, I\u0027ve been meh about adding a specific property for this in the \u0060ApiDescription\u0060 in favor of a more metadata-based approach. We could imagine a future where we expose \u0060IDeprecatedMetadata\u0060 as the source of truth for this state and the \u0060[ApiVersion]\u0060 attribute could implement it. Then, OpenAPI implementations like Swashbuckle and M.A.OpenApi can query endpoint metadata for implementations of \u0060IDeprecatedMetadata\u0060 and use it to influence the deprecation status of the given OpenAPI operation.\r\n\r\nThere admittedly hasn\u0027t been much traction on that issue since the defacto approach has long been \u0022use workarounds in the Open API implementation\u0022 to add this support. I\u0027ll leave this issue to track interest in supporting this feature. We\u0027ll definitely want to spend some time reasoning through whether a metadata-based approach or a new property on \u0060ApiDescription\u0060 is the better strategy.",
        "createdAt": "2024-09-15T00:35:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57853#issuecomment-2351250414"
      },
      {
        "id": "IC_kwDOAQzde86MKFjW",
        "parentId": null,
        "author": "JTeeuwissen",
        "content": "Thank you for the elaborate response. I\u0027m trying to migrate from nswag to m.a.openapi in dotnet 9, and nswag (afaik) supports api deprecation. I\u0027ll have a look at the eShop example, but I\u0027m somewhat surprised this relatively simple example does not work out of the box. ",
        "createdAt": "2024-09-15T08:10:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57853#issuecomment-2351454422"
      },
      {
        "id": "IC_kwDOAQzde86MQfyi",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E I\u0027ll have a look at the eShop example, but I\u0027m somewhat surprised this relatively simple example does not work out of the box.\r\n\r\nI feel you. \uD83D\uDE15  Unfortunately, this is one of those things that appears simple on the surface but has some implications to consider if we were to figure out the best way to address this issue in the framework itself. NSwag models its support for this using [an IOperationProcessor implementation](https://github.com/RicoSuter/NSwag/blob/7d6df3af95081f3f0ed6dee04be8d27faa86f91a/src/NSwag.Generation/Processors/ApiVersionProcessor.cs) that makes heavy use of private reflection to access types defined in Asp.Versioning. That means that NSwag doesn\u0027t have to solve any problems related to exposing a more stable public API for the information that is being accessed via private reflection or working through the limitation we have of not being able to reference external dependencies in the shared framework (where ApiExplorer lives).",
        "createdAt": "2024-09-16T14:46:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57853#issuecomment-2353134754"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86Wom0J",
    "title": "Newline handling different on linux x64 and linux aarch64",
    "url": "https://github.com/dotnet/aspnetcore/issues/57880",
    "createdAt": "2024-09-15T22:11:36Z",
    "lastUpdated": "2024-10-01T23:45:43Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\n\u0060\u0060\u0060\\r\u0060\u0060\u0060 Characters are stripped from aarch64 output.\r\n\r\nCreate a new API application for .NET Core, we are using 8.  Put the following code in.\r\n\r\n\u0060\u0060\u0060\r\nvar builder = WebApplication.CreateSlimBuilder(args);\r\n\r\nvar app = builder.Build();\r\n\r\nvar todosApi = app.MapGroup(\u0022/\u0022);\r\ntodosApi.MapGet(\u0022/\u0022, () =\u003E \u0022Text\\r\\nMore text multinewline\\r\\n1\\r\\n2\\r\\n3\u0022);\r\n\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\n1 .Build for x86 and for aarch64 from the linux CLI using a single file deployment.  \r\n2. Deploy to a x86 maching and an aarch64 machine.\r\n3. Run the API request from the command line by calling the appropriate URL when deployed.\r\n\r\non x86 you get \u0060\u0060\u0060Text\\r\\nMore text multinewline\\r\\n1\\r\\n2\\r\\n3\u0060\u0060\u0060 as the output\r\non aarch64 you get \u0060\u0060\u0060Text\\nMore text multinewline\\n1\\n2\\n3\u0060\u0060\u0060 as the output.\r\n\r\nAll \u0060\u0060\u0060\\r\u0060\u0060\u0060 characters are stripped from the output.\r\n\n\n### Expected Behavior\n\nx86 and aarch64 return the same unmodified string.\r\n\r\n\u0060\u0060\u0060Text\\r\\nMore text multinewline\\r\\n1\\r\\n2\\r\\n3\u0060\u0060\u0060 is the output.\n\n### Steps To Reproduce\n\nSee bug description.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.400\n\n### Anything else?\n\n.NET SDK:\r\n Version:           8.0.400\r\n Commit:            36fe6dda56\r\n Workload version:  8.0.400-manifests.b6724b7a\r\n MSBuild version:   17.11.3\u002B0c8610977\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  12\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/8.0.400/\r\n\r\n.NET workloads installed:\r\nConfigured to use loose manifests when installing new manifests.\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      8.0.8\r\n  Architecture: x64\r\n  Commit:       08338fcaa5\r\n\r\n.NET SDKs installed:\r\n  8.0.400 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 8.0.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 8.0.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download",
    "upvotes": 0,
    "labels": [
      "bug",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86OSula",
        "parentId": null,
        "author": "mr-russ",
        "content": "Is there any way to know if/when this might be able to be resolved?",
        "createdAt": "2024-10-01T23:45:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57880#issuecomment-2387274074"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86XMs7S",
    "title": "application/vnd.foo\u002Bjson disables problem details",
    "url": "https://github.com/dotnet/aspnetcore/issues/57965",
    "createdAt": "2024-09-19T15:25:37Z",
    "lastUpdated": "2024-10-01T16:41:41Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen you make a request using an \u0060Accept\u0060 header that uses the \u0060json\u0060 suffix, for example \u0060application/vnd.foo\u002Bjson\u0060, this disables problem details, despite the requested output format being json.\r\n\r\n### Expected Behavior\r\n\r\nProblem details should not be disabled\r\n\r\n### Steps To Reproduce\r\n\r\n1. Create a minimal API project with the following code:\r\n\u0060\u0060\u0060cs\r\nvar builder = WebApplication.CreateSlimBuilder(args);\r\nbuilder.Services.AddProblemDetails();\r\n\r\nvar app = builder.Build();\r\napp.UseStatusCodePages();\r\napp.MapPost(\u0022/hello\u0022, () =\u003E TypedResults.Ok());\r\napp.Run();\r\n\u0060\u0060\u0060\r\n2. Run \u0060curl http://localhost:5182/hello -H \u0022Accept: application/vnd.foo\u002Bjson\u0022\u0060\r\n3. Observe curl prints \u0060Status Code: 405; Method Not Allowed\u0060 instead of \u0060{\u0022type\u0022:\u0022https://tools.ietf.org/html/rfc9110#section-15.5.6\u0022,\u0022title\u0022:\u0022Method Not Allowed\u0022,\u0022status\u0022:405}\u0060\r\n\r\n### Exceptions (if any)\r\n\r\nN/A\r\n\r\n### .NET Version\r\n\r\n9.0.100-preview.7.24407.12\r\n\r\n### Anything else?\r\n\r\nASP.NET Core version: 8.0 I think? My TFM is \u0060net8.0\u0060\r\nIDE: VSCode 1.92.2\r\n\u0060\u0060\u0060\r\n\u003E dotnet --info   \r\n.NET SDK:\r\n Version:           9.0.100-preview.7.24407.12\r\n Commit:            d672b8a045\r\n Workload version:  9.0.100-manifests.baed1e37\r\n MSBuild version:   17.12.0-preview-24374-02\u002B48e81c6f1\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.26100\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\9.0.100-preview.7.24407.12\\\r\n\r\n.NET workloads installed:\r\nConfigured to use loose manifests when installing new manifests.\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      9.0.0-preview.7.24405.7\r\n  Architecture: x64\r\n  Commit:       static\r\n\r\n.NET SDKs installed:\r\n  9.0.100-preview.7.24407.12 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 9.0.0-preview.7.24406.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]       \r\n  Microsoft.NETCore.App 6.0.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 9.0.0-preview.7.24405.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.18 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 9.0.0-preview.7.24405.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n\u0060\u0060\u0060\r\n\r\nFor context, I am currently implementing https://github.com/swiftlang/swift-package-manager/blob/main/Documentation/PackageRegistry/Registry.md, which uses a custom \u0060Accept\u0060 header for API versioning, but requires problem details responses for any error.",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86XSIun",
    "title": "OpenApi Flags enum not handled correctly",
    "url": "https://github.com/dotnet/aspnetcore/issues/57980",
    "createdAt": "2024-09-20T07:41:25Z",
    "lastUpdated": "2024-10-03T05:27:38Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI have two operations that uses enums; one has [Flags] applied to it, the other does not. The one without flags is handled correctly, the one with the attribute is not.\r\n\r\n\u0060\u0060\u0060cs\r\n[Flags]\r\npublic enum EnumWithFlags\r\n{\r\n    None = 0,\r\n    Value2 = 1,\r\n    Value3 = 2,\r\n    Value4 = 4,\r\n    Value5 = 8,\r\n    Value6 = 16\r\n}\r\npublic enum EnumWithNoFlags\r\n{\r\n    None = 0,\r\n    Value2 = 1,\r\n    Value3 = 2,\r\n    Value4 = 4,\r\n    Value5 = 8,\r\n    Value6 = 16\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060json\r\n\u0022EnumWithFlags\u0022: {\r\n\t\u0022type\u0022: \u0022string\u0022\r\n},\r\n\u0022EnumWithNoFlags\u0022: {\r\n\t\u0022enum\u0022: [\r\n\t\t\u0022None\u0022,\r\n\t\t\u0022Value2\u0022,\r\n\t\t\u0022Value3\u0022,\r\n\t\t\u0022Value4\u0022,\r\n\t\t\u0022Value5\u0022,\r\n\t\t\u0022Value6\u0022\r\n\t]\r\n\r\n\u0060\u0060\u0060\r\n\n\n### Expected Behavior\n\nEnums with flags should be handled the same as without flags.\r\n\r\n[Flags] is a .NET specific thing and one could consider this an edge case since it doesn\u0027t have a counterpart in OpenApi. I work on a set of old apps that have been upgraded from asmx-\u003EWCF-\u003EWebApi. These use flag enums and we have .NET on both sides.\r\n\r\nThe STJ Enum converter has support for Flags\r\nhttps://github.com/dotnet/runtime/blob/f96898084d7e4fadd8679f280daef979d60e10cf/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/Converters/Value/EnumConverter.cs#L23\n\n### Steps To Reproduce\n\nhttps://github.com/dnv-kimbell/openapi-inlineschema\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0 RC1\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86M2rFP",
        "parentId": null,
        "author": "dnv-kimbell",
        "content": "One workaround for this is to create your own schema transformer. \r\nThis might be good enough for most scenarios.\r\n\r\n\u0060\u0060\u0060cs\r\npublic class EnumFlagsTransformer : IOpenApiSchemaTransformer\r\n{\r\n    public Task TransformAsync(OpenApiSchema schema, OpenApiSchemaTransformerContext context, CancellationToken cancellationToken)\r\n    {\r\n        var type = context.JsonTypeInfo.Type;\r\n        if (type.IsEnum)\r\n        {\r\n            var flags = type.GetCustomAttribute\u003CFlagsAttribute\u003E();\r\n            if (flags is not null)\r\n            {\r\n                var values = Enum.GetValues(type);\r\n\r\n                foreach (var e in values)\r\n                {\r\n                    schema.Enum.Add(new OpenApiString(e.ToString()));\r\n                }\r\n            }\r\n        }\r\n\r\n        return Task.CompletedTask;\r\n    }\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2024-09-20T08:17:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57980#issuecomment-2363142479"
      },
      {
        "id": "IC_kwDOAQzde86NFd3a",
        "parentId": null,
        "author": "captainsafia",
        "content": "@dnv-kimbell Thanks for reporting this issue!\r\n\r\nIt looks like this is intentional behavior of the JsonSchemaExporter API\u0027s given the implementation [defined here](https://github.com/dotnet/runtime/blob/f96898084d7e4fadd8679f280daef979d60e10cf/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/Converters/Value/EnumConverter.cs#L498-L521).\r\n\r\nI suspect that this is because bitwise enums don\u0027t have a definition that maps cleanly into JSON schema since there\u0027s no way to explicitly label the combined values of a bitwise combination. The representation that you\u0027re modeling via the schema transformer above totally works, but for the purposes of .NET \u003C-\u003E .NET intro, the fact that \u0060FlagsWithEnums\u0060 supports bitwise combination has been lost when reduced to this form.\r\n\r\nFor this particular case, I\u0027m inclined to say that we wouldn\u0027t modify the default behavior in the implementation to support actually emitting the enum values given the constraints of the schema.\r\n\r\nI\u0027ll poke around to see if there\u0027s any guidance at the schema level about the best way to model bitwise enums.\r\n",
        "createdAt": "2024-09-22T23:41:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57980#issuecomment-2367020506"
      },
      {
        "id": "IC_kwDOAQzde86NGQM_",
        "parentId": null,
        "author": "dnv-kimbell",
        "content": "System.Text..Json serializes bitwise enums as comma separated list of values. If the schema listed the possible values as it does with normal enums, wouldn\u0027t the use of bitwise become an implementation detail between client an server? Some consuming languages could potentially have limited support for bitwise values; only use it when you know the details of each end.",
        "createdAt": "2024-09-23T04:41:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57980#issuecomment-2367226687"
      },
      {
        "id": "IC_kwDOAQzde86NL826",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E System.Text..Json serializes bitwise enums as comma separated list of values.\r\n\r\nCan you clarify what you mean by this? Given the following sample code:\r\n\r\n\u0060\u0060\u0060csharp\r\nusing System;\r\nusing System.Text.Json;\r\nusing System.Text.Json.Serialization;\r\n\r\nJsonSerializerOptions options = new(JsonSerializerDefaults.Web) { Converters = { new JsonStringEnumConverter() } };\r\n\r\nConsole.WriteLine(JsonSerializer.Serialize(Role.Editor | Role.Author));\r\nConsole.WriteLine(JsonSerializer.Serialize(Role.Editor | Role.Author, options));\r\n\r\n[Flags]\r\npublic enum Role\r\n{\r\n    Admin = 0,\r\n    Editor = 1,\r\n    Author = 2,\r\n}\r\n\u0060\u0060\u0060\r\n\r\nYou\u0027ll get the following output:\r\n\r\n\u0060\u0060\u0060\r\n3\r\n\u0022Editor, Author\u0022\r\n\u0060\u0060\u0060\r\n\r\nBoth of these values are not in the set of supported enums that are generated in the schema, so by JSON schema\u0027s definition, they would fail validation:\r\n\r\n\u0060\u0060\u0060\r\n\u0022Role\u0022: {\r\n\t\u0022enum\u0022: [\r\n\t\t0,\r\n\t\t1,\r\n\t\t2\r\n\t]\r\n}\r\n// OR\r\n\u0022Role\u0022: {\r\n\t\u0022enum\u0022: [\r\n\t\t\u0022Admin\u0022,\r\n\t\t\u0022Editor\u0022,\r\n\t\t\u0022Author\u0022\r\n\t]\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u003E Some consuming languages could potentially have limited support for bitwise values; only use it when you know the details of each end.\r\n\r\nHow would any arbitrary client/server know that an enum actually supports bitwise combination given the information you\u0027re currently able to convey in the schema?\r\n\r\n\r\n",
        "createdAt": "2024-09-23T15:58:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57980#issuecomment-2368720314"
      },
      {
        "id": "IC_kwDOAQzde86NRsVS",
        "parentId": null,
        "author": "dnv-kimbell",
        "content": "As you have pointed out, bitwise combinations is not something OpenApi currently support. If you are building a public API consumable by anybody, bitwise is probably not an option. If you are developing an internal API where you have control over both ends, bitwise becomes an option.\r\n\r\nIf the default schema generation handled flag enums the same way as other enums, we would have enough information to generate an enum type in C# and let STJ handle the bitwise parsing.\r\n\r\nIs there a downside of having flag enums handled the same way as other enums? STJ handles flag enums and if you have started using them, you probably have made some assumptions. It would be nice if the schema generator handled these automatically, but since there seems to be simple workaround, not the most important thing to fix.",
        "createdAt": "2024-09-24T05:32:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57980#issuecomment-2370225490"
      },
      {
        "id": "IC_kwDOAQzde86OfIqP",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E Is there a downside of having flag enums handled the same way as other enums? STJ handles flag enums and if you have started using them, you probably have made some assumptions.\r\n\r\nThe biggest downside is STJ handles them using assumptions that aren\u0027t easy to encode in a schema (for example, the fact that bitwise enums are comma separated strings when \u0060JsonStringEnumConverter\u0060 is enabled). The most round-trippable way to convey this in the schema is to use a more flexible type like \u0022integer\u0022 or \u0022string\u0022.\r\n\r\nYour situation is unique because the round-tripping is between two .NET services, but that seems like a less common case compared to say client SDKs in any language and a backing .NET API.",
        "createdAt": "2024-10-03T05:06:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57980#issuecomment-2390526607"
      },
      {
        "id": "IC_kwDOAQzde86OfPYR",
        "parentId": null,
        "author": "dnv-kimbell",
        "content": "I agree that this case is unique compared to client SDKs that are consumed by any language. On the other hand, there are probably a bunch of legacy systems out there from the dawn of .NET (like ours) that are gradually modernizing their code. Big enterprises seem to favor packages from Microsoft, so when this is released people will start looking into it. \r\n\r\nThe workaround I posted seems to be a good enough workaround for most cases. This issue might be resolved just by posting a sample transformer as part of the documentation. If the system could generate a warning when it encounters a flags enum, it would give people something to investigate from. ",
        "createdAt": "2024-10-03T05:27:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57980#issuecomment-2390554129"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86XSRNI",
    "title": "OpenApi polymorphic types missing discriminators",
    "url": "https://github.com/dotnet/aspnetcore/issues/57982",
    "createdAt": "2024-09-20T07:58:16Z",
    "lastUpdated": "2024-11-20T11:54:18Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI have  some polymorphic types\r\n\r\n\u0060\u0060\u0060cs\r\n[JsonPolymorphic(TypeDiscriminatorPropertyName = \u0022$dis\u0022)]\r\n[JsonDerivedType(typeof(Cat), typeDiscriminator: \u0022cat\u0022)]\r\n[JsonDerivedType(typeof(Dog), typeDiscriminator: \u0022dog\u0022)]\r\npublic class Pet\r\n{\r\n    public string Name { get; set; } = default!;\r\n}\r\npublic class Dog : Pet\r\n{\r\n    public string? Breed { get; set; }\r\n}\r\n\r\npublic class Cat : Pet\r\n{\r\n    public int? Lives { get; set; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThis result in \r\n\u0060\u0060\u0060json\r\n\u0022Pet\u0022: {\r\n\t\u0022type\u0022: \u0022object\u0022,\r\n\t\u0022anyOf\u0022: [\r\n\t\t{\r\n\t\t\t\u0022$ref\u0022: \u0022#/components/schemas/PetCat\u0022\r\n\t\t},\r\n\t\t{\r\n\t\t\t\u0022$ref\u0022: \u0022#/components/schemas/PetDog\u0022\r\n\t\t},\r\n\t\t{\r\n\t\t\t\u0022$ref\u0022: \u0022#/components/schemas/PetBase\u0022\r\n\t\t}\r\n\t]\r\n},\r\n\u0022PetBase\u0022: {\r\n\t\u0022properties\u0022: {\r\n\t\t\u0022name\u0022: {\r\n\t\t\t\u0022type\u0022: \u0022string\u0022\r\n\t\t}\r\n\t}\r\n},\r\n\u0022PetDog\u0022: {\r\n\t\u0022required\u0022: [\r\n\t\t\u0022$dis\u0022\r\n\t],\r\n\t\u0022properties\u0022: {\r\n\t\t\u0022$dis\u0022: {\r\n\t\t\t\u0022enum\u0022: [\r\n\t\t\t\t\u0022dog\u0022\r\n\t\t\t],\r\n\t\t\t\u0022type\u0022: \u0022string\u0022\r\n\t\t},\r\n\t\t\u0022breed\u0022: {\r\n\t\t\t\u0022type\u0022: \u0022string\u0022,\r\n\t\t\t\u0022nullable\u0022: true\r\n\t\t},\r\n\t\t\u0022name\u0022: {\r\n\t\t\t\u0022type\u0022: \u0022string\u0022\r\n\t\t}\r\n\t}\r\n},\r\n\u0060\u0060\u0060\r\n\r\nThis is the equivalent generated by Swashbuckle\r\n\u0060\u0060\u0060json\r\n\u0022Pet\u0022: {\r\n  \u0022required\u0022: [\r\n    \u0022$dis\u0022\r\n  ],\r\n  \u0022type\u0022: \u0022object\u0022,\r\n  \u0022properties\u0022: {\r\n    \u0022$dis\u0022: {\r\n      \u0022type\u0022: \u0022string\u0022\r\n    },\r\n    \u0022name\u0022: {\r\n      \u0022type\u0022: \u0022string\u0022,\r\n      \u0022nullable\u0022: true\r\n    }\r\n  },\r\n  \u0022additionalProperties\u0022: false,\r\n  \u0022discriminator\u0022: {\r\n    \u0022propertyName\u0022: \u0022$dis\u0022,\r\n    \u0022mapping\u0022: {\r\n      \u0022dog\u0022: \u0022#/components/schemas/Dog\u0022,\r\n      \u0022cat\u0022: \u0022#/components/schemas/Cat\u0022\r\n    }\r\n  }\r\n},\r\n\u0022Dog\u0022: {\r\n  \u0022allOf\u0022: [\r\n    {\r\n      \u0022$ref\u0022: \u0022#/components/schemas/Pet\u0022\r\n    },\r\n    {\r\n      \u0022type\u0022: \u0022object\u0022,\r\n      \u0022properties\u0022: {\r\n        \u0022breed\u0022: {\r\n          \u0022type\u0022: \u0022string\u0022,\r\n          \u0022nullable\u0022: true\r\n        }\r\n      },\r\n      \u0022additionalProperties\u0022: false\r\n    }\r\n  ]\r\n},\r\n\u0060\u0060\u0060\r\n\r\n\n\n### Expected Behavior\n\nThe type Dog is renamed to PetDog; not expected.\r\n\r\nPet has the name property defined in code, but this shows up on PetBase and PetDoc in schema. I can\u0027t see how you can write code that operates on the Pet type and use the Name property.\r\n\r\nSwashbuckle adds a discriminator section that is completely missing. OpenApi seems to be quite flexible in some areas; is this just another way of representing things. Code generator will have to handle both?\n\n### Steps To Reproduce\n\nhttps://github.com/dnv-kimbell/openapi-inlineschema\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0 RC1\n\n### Anything else?\n\n_No response_",
    "upvotes": 3,
    "labels": [
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86NFjoA",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E The type Dog is renamed to PetDog; not expected.\r\n\r\nThis allows us to disambiguate between \u0060Dog\u0060 used in a polymorphic hierarchy (where a discriminator property must be defined) versus \u0060Dog\u0060 used on its own (which serializes directly without need for a discriminator).\r\n\r\n\u003E Pet has the name property defined in code, but this shows up on PetBase and PetDoc in schema. I can\u0027t see how you can write code that operates on the Pet type and use the Name property.\r\n\r\nHm....can you clarify what you mean by this? I assume you\u0027re referring to being able to use the \u0060PetBase.Name\u0060 property? As mentioned above, the distinction between \u0060Pet\u0060 and \u0060PetBase\u0060 is primarily around which one is part of the discriminated hierarchy and which type stands on its own.\r\n\r\n\u003E Swashbuckle adds a discriminator section that is completely missing. OpenApi seems to be quite flexible in some areas; is this just another way of representing things. Code generator will have to handle both?\r\n\r\nYour intuition is right here. The OpenAPI specification is a bit flexible in the way it defines support for discriminators in the spec. For our purposes, we\u0027ve decided to stick true to the definition of the spec. Specifically, the [this section of the specification](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#discriminator-object), which states:\r\n\r\n\u003E The expectation now is that a property with name petType MUST be present in the response payload, and the value will correspond to the name of a schema defined in the OAS document. Thus the response payload:\r\n\r\nIn sum, the spec requires that when you use the discriminator property _every_ subschema must define the discriminator property.\r\n\r\nIn the type:\r\n\r\n\u0060\u0060\u0060csharp\r\n[JsonPolymorphic(TypeDiscriminatorPropertyName = \u0022$dis\u0022)]\r\n[JsonDerivedType(typeof(Cat), typeDiscriminator: \u0022cat\u0022)]\r\n[JsonDerivedType(typeof(Dog), typeDiscriminator: \u0022dog\u0022)]\r\npublic class Pet\r\n{\r\n    public string Name { get; set; } = default!;\r\n}\r\npublic class Dog : Pet\r\n{\r\n    public string? Breed { get; set; }\r\n}\r\n\r\npublic class Cat : Pet\r\n{\r\n    public int? Lives { get; set; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThe \u0060Pet\u0060 type doesn\u0027t define a discriminator and in this case STJ will determine what to do based on the [JsonUnknownDerivedTypeHandling](https://learn.microsoft.com/en-us/dotnet/api/system.text.json.serialization.jsonunknownderivedtypehandling?view=net-8.0). To explicitly define the mapping, you can add a \u0060[JsonDerivedType(typeof(Pet), typeDiscriminator: \u0022pet\u0022)]\u0060 attribute so that the all possible subtypes are explicitly defined.\r\n\r\n",
        "createdAt": "2024-09-23T00:30:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57982#issuecomment-2367044096"
      },
      {
        "id": "IC_kwDOAQzde86NGWLe",
        "parentId": null,
        "author": "dnv-kimbell",
        "content": "I\u0027m still very confused.\r\n\r\nIn the spec you reference, Cat, Dog and Lizard are referenced using oneOf. In the generated schema, it\u0027s anyOf. \r\n\r\nThe Pet type gets defined as any of PetCat, BetDoc and PetBase. On the client, I may want to write code that operates on the PetBase type. How can I figure out that PetCat inherits from PetBase and not PetDog? Is something magically encoded into the name since it ends with Base? What if you have deeper inheritance hierarchies? \r\n\r\nLet\u0027s say you want to generate a .NET object model to handle these types; you want to specify the discriminator attribute. How can you figure out the name based on the generated schema? Is this again some magical naming based on properties that start with $? Different types may use different names for the discriminator. \r\n\r\nThe generated schema also uses a single valued enum for the discriminator; not seen this before.\r\n\r\nThe schema you currently generate may be technically correct, but very hard to read. With the Swashbuckle version, it\u0027s very clear what the subtypes of Pet are, and what the base type of Dog is.\r\n",
        "createdAt": "2024-09-23T05:11:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57982#issuecomment-2367251166"
      },
      {
        "id": "IC_kwDOAQzde86NMRb6",
        "parentId": null,
        "author": "captainsafia",
        "content": "\u003E In the spec you reference, Cat, Dog and Lizard are referenced using oneOf. In the generated schema, it\u0027s anyOf.\r\n\r\nThe discriminator property mappings are legal to use with any of the composite keywords:\r\n\r\n\u003E The discriminator object is legal only when using one of the composite keywords oneOf, anyOf, allOf.\r\n\r\n\u003E Is something magically encoded into the name since it ends with Base? What if you have deeper inheritance hierarchies?\r\n\r\nInheritance hierarchies are slightly different from polymorphic types. We don\u0027t do anything to model inheritance hierarchies in the implementation at the moment.\r\n\r\n\u003E The generated schema also uses a single valued enum for the discriminator; not seen this before.\r\n\r\nOpenAPI v3.0 doesn\u0027t provide support for communicating that a value is a constant. Single-valued enums are a strategy for defining constant values in the schema. In this case, it\u0027s used to indicate that for a given polymorphic \u0060PetDog\u0060 the discriminator property _must_ be \u0060dog\u0060.\r\n\r\n\u003E The schema you currently generate may be technically correct, but very hard to read. With the Swashbuckle version, it\u0027s very clear what the subtypes of Pet are, and what the base type of Dog is.\r\n\r\nYes, technically correct is what we are striving for here. It allows the implementation to evolve with the JSON schema and OpenAPI specifications. There will be some growing pains as we sort out scenarios where alternative implementations took more liberties with the schema generated but the goal of the implementation is maximum compatibility with the specification.\r\n\r\nAt times, this might mean that we discover gaps that the specification doesn\u0027t address nicely (for example, the bitwise enums scenario we were discussing in another thread). In those cases, our focus is on working to make improvements to the underlying spec so that it\u0027s more explicit instead of codifying non-specced behaviors in our implementation.\r\n\r\nOut of curiosity, it seems like you\u0027re trying to integrate the new tool into some existing set up. Is there a particular client generation tool that you\u0027re using that isn\u0027t playing nice with these scenarios or are you trying to implement something yourself?\r\n\r\n",
        "createdAt": "2024-09-23T16:36:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57982#issuecomment-2368804602"
      },
      {
        "id": "IC_kwDOAQzde86NSIMA",
        "parentId": null,
        "author": "dnv-kimbell",
        "content": "You would be correct in that we have an existing setup that we are looking at integrating this new functionality.\r\n\r\nI work on the platform team for an in-house set of applications; 150 repositories, around 250 applications (web \u002B windows services). Some of these have ancestry back to .NET 1.0 and ASMX. Around 60 of these applications expose api\u0027s consumed by other applications. We create nuget packages that wrap these api\u0027s making it easy for other applications to consume them. Most of our applications are now on .NET8  and we have started looking into .NET9; keeping things updated is important to us.\r\n\r\nOur developer pool spans from senior developers to juniors straight out of school. With the number of applications we have, reducing developer friction and standardizing the way things are done is something we put some thought into.  \r\n\r\nOn the server we have been using Swashbuckle and for the nuget packages, we have been using NSwag or manually coded. \r\n\r\nWhen Microsoft announced additional support for OpenApi, we decided to investigate it to see if we could reduce some of our dependencies. Our plan is to use MS as the default, and Swashbuckle as a backup for the cases that MS doesn\u0027t support.\r\n\r\nNSwag has existed for years; something that is reflected in the number of options available. For some things it seems to be most happy when using Newtonsoft and I\u0027m not too keen on the way it uses exceptions for non-200 status codes.\r\n\r\nWe decided to create our own code generation tool that sets things up the way that makes most sense for us. Our first pre-release is based on what Swashbuckle produces. The plan was to wait to see how well it plays with the MS stuff before we started pushing it out further. I\u0027m writing this tool, so all these details matter to me.\r\n\r\nOut of curiosity, I downloaded the latest version of NSwag studio and used the schema from my repro. The generated code is lacking information, so it doesn\u0027t look like well established tools can process the current generated schema. I\u0027ve removed some lines to make it more compact.\r\n\r\n\u0060\u0060\u0060cs\r\npublic partial class Pet\r\n{\r\n}\r\npublic partial class PetBase\r\n{\r\n\t[System.Text.Json.Serialization.JsonPropertyName(\u0022name\u0022)]\r\n\tpublic string Name { get; set; }\r\n}\r\npublic partial class PetCat\r\n{\r\n\t[System.Text.Json.Serialization.JsonPropertyName(\u0022$dis\u0022)]\r\n\t[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]\r\n\t[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]\r\n\tpublic PetCatDis Dis { get; set; }\r\n\r\n\t[System.Text.Json.Serialization.JsonPropertyName(\u0022lives\u0022)]\r\n\tpublic int? Lives { get; set; }\r\n\r\n\t[System.Text.Json.Serialization.JsonPropertyName(\u0022name\u0022)]\r\n\tpublic string Name { get; set; }\r\n}\r\npublic partial class PetDog\r\n{\r\n\t[System.Text.Json.Serialization.JsonPropertyName(\u0022$dis\u0022)]\r\n\t[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]\r\n\t[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]\r\n\tpublic PetDogDis Dis { get; set; }\r\n\r\n\t[System.Text.Json.Serialization.JsonPropertyName(\u0022breed\u0022)]\r\n\tpublic string Breed { get; set; }\r\n\r\n\t[System.Text.Json.Serialization.JsonPropertyName(\u0022name\u0022)]\r\n\tpublic string Name { get; set; }\r\n}\r\npublic partial class PolymorphicRequest\r\n{\r\n\t[System.Text.Json.Serialization.JsonPropertyName(\u0022animals\u0022)]\r\n\tpublic System.Collections.Generic.ICollection\u003CPet\u003E Animals { get; set; }\r\n}\r\npublic partial class PolymorphicResponse\r\n{\r\n\t[System.Text.Json.Serialization.JsonPropertyName(\u0022animals\u0022)]\r\n\tpublic System.Collections.Generic.ICollection\u003CPet\u003E Animals { get; set; }\r\n}\r\npublic enum PetCatDis\r\n{\r\n\t[System.Runtime.Serialization.EnumMember(Value = @\u0022cat\u0022)]\r\n\tCat = 0,\r\n}\r\npublic enum PetDogDis\r\n{\r\n\t[System.Runtime.Serialization.EnumMember(Value = @\u0022dog\u0022)]\r\n\tDog = 0,\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2024-09-24T06:50:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57982#issuecomment-2370339584"
      },
      {
        "id": "IC_kwDOAQzde86O0PqX",
        "parentId": null,
        "author": "dnv-kimbell",
        "content": "I\u0027m guessing nothing much will be happening on this before RTM in a month, so I\u0027ve started exploring workarounds using the transformer infrastructure. \r\n\r\nIn an \u0060IOpenApiSchemaTransformer\u0060 I can access polymorphic information, but they reference .NET types. The \u0060OpenApiSchemaStore\u0060 is internal, so there doesn\u0027t seem to be way of mapping a type to a schema id. \r\n\r\nIn the \u0060IOpenApiDocumentTransformer\u0060, the provided \u0060document.Components\u0060 is null. If that had values, the schema transformer could inject some internal reference syntax that we could then try to map correctly in the document transformer.\r\n\r\n",
        "createdAt": "2024-10-07T06:55:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57982#issuecomment-2396060311"
      },
      {
        "id": "IC_kwDOAQzde86RSH9n",
        "parentId": null,
        "author": "marinasundstrom",
        "content": "@dnv-kimbell I\u0027m moving from NSwag, and I noticed a lot of differences in how nullability and inheritance is being deal with. So I\u0027m also investigating making transformers to fill the gap. A kind of compatibility package. Generally, that is how I believe specific behavior should be added.\n\nEven if this doesn\u0027t lead anywhere I learn a lot about the API and its quirks. ",
        "createdAt": "2024-10-25T10:34:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57982#issuecomment-2437447527"
      },
      {
        "id": "IC_kwDOAQzde86RSL2p",
        "parentId": null,
        "author": "marinasundstrom",
        "content": "This is to highlight the difference between the new OpenAPI generator and NSwag.\n\nThis is what I get from inheritance as is:\n\n(YAML is generated with an extension by Martin Costello)\n\n\u0060\u0060\u0060yaml\ncomponents:\n  schemas:\n    Animal:\n      required:\n        - species\n      type: object\n      anyOf:\n        - $ref: \u0027#/components/schemas/AnimalDog\u0027\n        - $ref: \u0027#/components/schemas/AnimalCat\u0027\n      discriminator:\n        propertyName: species\n        mapping:\n          Dog: \u0027#/components/schemas/AnimalDog\u0027\n          Cat: \u0027#/components/schemas/AnimalCat\u0027\n    AnimalCat:\n      required:\n        - name\n      properties:\n        species:\n          enum:\n            - Cat\n          type: string\n        name:\n          type: string\n    AnimalDog:\n      required:\n        - foo\n      properties:\n        species:\n          enum:\n            - Dog\n          type: string\n        foo:\n          type: boolean\n\u0060\u0060\u0060\n\nThis is what NSwag would have [roughly] produced:\n\n(It is a reconstruction)\n\n\u0060\u0060\u0060yaml\ncomponents:\n  schemas:\n    Animal:\n      required:\n        - species\n      type: object\n      discriminator:\n        propertyName: species\n        mapping:\n          Dog: \u0022#/components/schemas/Dog\u0022\n          Cat: \u0022#/components/schemas/Cat\u0022\n      x-abstract: true\n    Cat:\n      allOf:\n        - $ref: \u0022#/components/schemas/Animal\u0022\n        - type: object\n          additionalProperties: false\n          properties:\n            name:\n              type: string\n    Dog:\n      allOf:\n        - $ref: \u0022#/components/schemas/Animal\u0022\n        - type: object\n          additionalProperties: false\n          properties:\n            foo:\n              type: boolean\n\u0060\u0060\u0060\n\nThe most notable thing here is the use of \u0060\u0060allOf\u0060\u0060 to indicate that a subtype inherits a schema.\n\nThis might be an opinionated approach. But this should be taken into account. Without it people won\u0027t move over to use this API.\n\nThere are also extension like \u0060\u0060x-abstract\u0060\u0060 that add some extra information for generators like NSwag.",
        "createdAt": "2024-10-25T10:43:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57982#issuecomment-2437463465"
      },
      {
        "id": "IC_kwDOAQzde86RW7XF",
        "parentId": null,
        "author": "marinasundstrom",
        "content": "Here is a prototype of transformer, some for inheritance the NSwag-style. There are limitations in the Open API API/infrastructure.\n\nhttps://github.com/marinasundstrom/NullabilityTransformersPrototype\n\nhttps://github.com/marinasundstrom/NullabilityTransformersPrototype/blob/f36b3a14df2030b836c1ce87da12805a87b7c6e5/WebApi/Extensions/Transformers.cs#L29\n\nAlso https://github.com/RicoSuter/NJsonSchema/issues/1739.",
        "createdAt": "2024-10-25T20:09:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57982#issuecomment-2438706629"
      },
      {
        "id": "IC_kwDOAQzde86ReUA_",
        "parentId": null,
        "author": "dnv-kimbell",
        "content": "@captainsafia this is additional information for your question in #58406 about missing information.\n\nLets say you want to generate code like this\n\n\u0060\u0060\u0060cs\n[JsonPolymorphic(TypeDiscriminatorPropertyName = \u0022$dis\u0022)]\n[JsonDerivedType(typeof(Cat), typeDiscriminator: \u0022cat\u0022)]\n[JsonDerivedType(typeof(Dog), typeDiscriminator: \u0022dog\u0022)]\npublic class Pet\n{\n    public string Name { get; set; } = default!;\n}\npublic class Dog : Pet\n{\n    public string? Breed { get; set; }\n}\n\npublic class Cat : Pet\n{\n    public int? Lives { get; set; }\n}\n\u0060\u0060\u0060\n\nBased on the information we get from Swashbuckle, \n\n\u0060\u0060\u0060json\n\u0022Pet\u0022: {\n  \u0022required\u0022: [\n    \u0022$dis\u0022\n  ],\n  \u0022type\u0022: \u0022object\u0022,\n  \u0022properties\u0022: {\n    \u0022$dis\u0022: {\n      \u0022type\u0022: \u0022string\u0022\n    },\n    \u0022name\u0022: {\n      \u0022type\u0022: \u0022string\u0022,\n      \u0022nullable\u0022: true\n    }\n  },\n  \u0022additionalProperties\u0022: false,\n  \u0022discriminator\u0022: {\n    \u0022propertyName\u0022: \u0022$dis\u0022,\n    \u0022mapping\u0022: {\n      \u0022dog\u0022: \u0022#/components/schemas/Dog\u0022,\n      \u0022cat\u0022: \u0022#/components/schemas/Cat\u0022\n    }\n  }\n},\n\n\u0060\u0060\u0060\nIt\u0027s very easy to generate the code since all the information is located in the same place. \nNow let\u0027s have a look at what the Microsoft implementation produces.\n\n\u0060\u0060\u0060json\n\u0022Pet\u0022: {\n\t\u0022type\u0022: \u0022object\u0022,\n\t\u0022anyOf\u0022: [\n\t\t{\n\t\t\t\u0022$ref\u0022: \u0022#/components/schemas/PetCat\u0022\n\t\t},\n\t\t{\n\t\t\t\u0022$ref\u0022: \u0022#/components/schemas/PetDog\u0022\n\t\t},\n\t\t{\n\t\t\t\u0022$ref\u0022: \u0022#/components/schemas/PetBase\u0022\n\t\t}\n\t]\n},\n\u0022PetBase\u0022: {\n\t\u0022properties\u0022: {\n\t\t\u0022name\u0022: {\n\t\t\t\u0022type\u0022: \u0022string\u0022\n\t\t}\n\t}\n},\n\u0022PetDog\u0022: {\n\t\u0022required\u0022: [\n\t\t\u0022$dis\u0022\n\t],\n\t\u0022properties\u0022: {\n\t\t\u0022$dis\u0022: {\n\t\t\t\u0022enum\u0022: [\n\t\t\t\t\u0022dog\u0022\n\t\t\t],\n\t\t\t\u0022type\u0022: \u0022string\u0022\n\t\t},\n\t\t\u0022breed\u0022: {\n\t\t\t\u0022type\u0022: \u0022string\u0022,\n\t\t\t\u0022nullable\u0022: true\n\t\t},\n\t\t\u0022name\u0022: {\n\t\t\t\u0022type\u0022: \u0022string\u0022\n\t\t}\n\t}\n},\n\u0060\u0060\u0060\nWhen I scan through the schemas, I come across one that contains multiple entries under anyOf. Does this mean that it will always be polymorphic? If anyOf can be used by other constructs, how does one identify polymorphic? I sure don\u0027t know OpenApi that well, so it becomes a crap shoot if we can handle all cases. \n\nHow does one determine the name of the discriminator? Do you look at all the schemas referenced from anyOf and see what property is common and starts with $? \n\nPetBase appears out of nowhere. How do we work around that? Find a type that ends with \u0027Base\u0027, then remove those properties from all types in anyOf that is not the base, then add them to the type that lists anyOf? \n\n\nLooking through our codebase, we have a limited number of services using polymorphism; for these we are sticking with Swashbuckle. \n\n",
        "createdAt": "2024-10-28T06:15:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57982#issuecomment-2440642623"
      },
      {
        "id": "IC_kwDOAQzde86UTjK1",
        "parentId": null,
        "author": "lvde0",
        "content": "Experiencing the same problem. The transition from Swashbuckle is causing a lot of friction because of the way polymorphism is handled:\n\n- \u0060discriminator\u0060 is missing in some scenarios (same problem as @dnv-kimbell)\n- The base class prefix needs to be configurable (see https://github.com/dotnet/aspnetcore/issues/58332)\n- It does not generate \u0060allof\u0060 on the derived types\n- Instead of \u0060Pet\u0060 it generates an extra \u0060PetBase\u0060, which is confusing and unnecessary in many cases\n\nThis is something that should be urgently looked at. Custom transformers can only do so much. The API should strive to be compatible with Swashbuckle as much as possible...\n\nCC: @captainsafia \n",
        "createdAt": "2024-11-20T10:10:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57982#issuecomment-2488152757"
      },
      {
        "id": "IC_kwDOAQzde86UUbIm",
        "parentId": null,
        "author": "marinasundstrom",
        "content": "@lvde0 I think it is written that polymorphism is this case is not the same as inheritance.\n\nI do agree with the sentiment as I have written here before. There needs to be compatibility with the other OpenAPI spec generators. Especially if it\u0027s going to replace them.\n\nWhat bogs me the most is that this polymorphism behavior is fixed and can\u0027t be influenced. APIs are not exposed. And probably for a good reason, the product is not finished. As I have also noted with how nullable is dealt with.\n\nIdeally, inheritance should be dealt with by open transformers, not internal ones. So you can swap out the behavior for the other if so wanted.",
        "createdAt": "2024-11-20T11:51:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57982#issuecomment-2488381990"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86YCswf",
    "title": "Empty catch-all routes not working as expected",
    "url": "https://github.com/dotnet/aspnetcore/issues/58093",
    "createdAt": "2024-09-26T14:54:41Z",
    "lastUpdated": "2024-09-26T14:59:22Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI have a route with a catch-all set up like this:\r\n\r\n\u0060\u0060\u0060\r\napp.MapGet(\u0022/filesystem/{**path}\u0022, async (string path) =\u003E { ... });\r\n\u0060\u0060\u0060\r\n\r\nWhen I make a request to a URL like \u0060/filesystem/blah\u0060, it works, and \u0060path == \u0022blah\u0022\u0060.\r\n\r\nIf I make a request to \u0060/filesystem/\u0060, I am expecting \u0060path == string.Empty\u0060, as per [the documentation](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/routing?view=aspnetcore-8.0) which states \u0022Catch-all parameters can also match the empty string.\u0022\r\n\r\nHowever, if I make a request to that URI, instead it throws an exception:\r\n\r\n\u0060\u0060\u0060\r\n% curl http://localhost:5023/filesystem/\r\nMicrosoft.AspNetCore.Http.BadHttpRequestException: Required parameter \u0022string path\u0022 was not provided from route.\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.Log.RequiredParameterNotProvided(HttpContext httpContext, String parameterTypeName, String parameterName, String source, Boolean shouldThrow)\r\n   at lambda_method2(Closure, Object, HttpContext)\r\n   at Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\r\n\u0060\u0060\u0060\n\n### Expected Behavior\n\nAn empty catch-all string should be supported as per the documentation, and my \u0060path\u0060 parameter should have a value of \u0060string.Empty\u0060. \n\n### Steps To Reproduce\n\nCreate a minimal-API ASP.NET Core web service app using .NET 8, and add a route to it like this:\r\n\r\n\u0060\u0060\u0060\r\napp.MapGet(\u0022/test/{**slug}\u0022, (string slug) =\u003E Results.Ok($\u0022Slug was {slug}\u0022));\r\n\u0060\u0060\u0060\r\n\r\nLaunch the service and then try calling the endpoint on \u0060http://localhost:\u003Cport\u003E/test/\u0060 - you should see the exception get thrown.\n\n### Exceptions (if any)\n\nMicrosoft.AspNetCore.Http.BadHttpRequestException: Required parameter \u0022string slug\u0022 was not provided from route.\r\n   at Microsoft.AspNetCore.Http.RequestDelegateFactory.Log.RequiredParameterNotProvided(HttpContext httpContext, String parameterTypeName, String parameterName, String source, Boolean shouldThrow)\r\n   at lambda_method2(Closure, Object, HttpContext)\r\n   at Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\n\n### .NET Version\n\n8.0.401\n\n### Anything else?\n\nCSProj includes package references:\r\n\u0060\u0060\u0060\r\n\u003CPackageReference Include=\u0022Microsoft.AspNetCore.OpenApi\u0022 Version=\u00228.0.8\u0022/\u003E\r\n\u003CPackageReference Include=\u0022Swashbuckle.AspNetCore\u0022 Version=\u00226.4.0\u0022/\u003E\r\n\u0060\u0060\u0060\r\n\r\n.NET SDK:\r\n Version:           8.0.401\r\n Commit:            811edcc344\r\n Workload version:  8.0.400-manifests.b6724b7a\r\n MSBuild version:   17.11.4\u002B37eb419ad\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  14.6\r\n OS Platform: Darwin\r\n RID:         osx-arm64\r\n Base Path:   /usr/local/share/dotnet/sdk/8.0.401/\r\n\r\n.NET workloads installed:\r\nConfigured to use loose manifests when installing new manifests.\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      8.0.8\r\n  Architecture: arm64\r\n  Commit:       08338fcaa5\r\n\r\n.NET SDKs installed:\r\n  6.0.410 [/usr/local/share/dotnet/sdk]\r\n  7.0.203 [/usr/local/share/dotnet/sdk]\r\n  8.0.204 [/usr/local/share/dotnet/sdk]\r\n  8.0.401 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.18 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.18 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.16 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.8 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nOther architectures found:\r\n  x64   [/usr/local/share/dotnet/x64]\r\n    registered at [/etc/dotnet/install_location_x64]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86YPMJl",
    "title": "MinimalAPI explicit IParsable.TryParse resolution fails on generic custom types",
    "url": "https://github.com/dotnet/aspnetcore/issues/58136",
    "createdAt": "2024-09-28T08:57:07Z",
    "lastUpdated": "2024-10-01T16:41:42Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIf a custom type is used as a route segment parameter, an ASP.NET Core web application will fail to start with the error\r\n\u0060\u0060\u0060\r\nAn unhandled exception has occurred while executing the request.\r\n      System.InvalidOperationException: TryParse method found on MyTypedId with incorrect format. Must be a static method with format\r\n      bool TryParse(string, IFormatProvider, out MyTypedId)\r\n      bool TryParse(string, out MyTypedId)\r\n      but found\r\n      static Boolean TryParse(System.String, System.IFormatProvider, MyTypedId ByRef)\r\n\u0060\u0060\u0060\r\n\r\nif the custom type is a generic type but implements \u0060System.IParsable\u003C\u003E\u0060 explicitely.\r\n\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/{myId}\u0022, ([FromRoute] MyTypedId myId) =\u003E $\u0022Called with {myId.Guid}\u0022);\r\n\r\n// ---\r\n\r\npublic interface ITypedGuid\u003CTTypedGuid\u003E : IParsable\u003CTTypedGuid\u003E\r\n    where TTypedGuid : struct, ITypedGuid\u003CTTypedGuid\u003E\r\n{\r\n    Guid Guid { get; }\r\n\r\n    static abstract implicit operator TTypedGuid(Guid guid);\r\n\r\n    /// \u003Cinheritdoc /\u003E\r\n    static TTypedGuid IParsable\u003CTTypedGuid\u003E.Parse(string s, IFormatProvider? provider) =\u003E Guid.Parse(s, provider);\r\n\r\n    /// \u003Cinheritdoc /\u003E\r\n    static bool IParsable\u003CTTypedGuid\u003E.TryParse([NotNullWhen(true)] string? s, IFormatProvider? provider, out TTypedGuid result)\r\n    {\r\n        if (Guid.TryParse(s, provider, out var guid))\r\n        {\r\n            result = guid;\r\n            return true;\r\n        }\r\n\r\n        result = default;\r\n        return false;\r\n    }\r\n}\r\n\r\npublic readonly struct MyTypedId : ITypedGuid\u003CMyTypedId\u003E\r\n{\r\n    private MyTypedId(Guid guid) =\u003E Guid = guid;\r\n\r\n    /// \u003Cinheritdoc /\u003E\r\n    public Guid Guid { get; }\r\n\r\n    /// \u003Cinheritdoc /\u003E\r\n    public static implicit operator MyTypedId(Guid guid) =\u003E new(guid);\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\r\n### Expected Behavior\r\n\r\nThe endpoint mapping will succeed because the type that is used as a route segment successfully implements \u0060System.IParsable\u003C\u003E\u0060.\r\n\r\nFIY: The analyzer works fine in all cases and recognizes the implementation.\r\n\r\n### Steps To Reproduce\r\n\r\nReproduction repo: https://github.com/rklfss/aspnetcore-rdf-tryparse-failure\r\n\r\nThere are three different endpoint mappings inside of which\r\n- one does not work if IParsable is implemented explicitely by the generic interface itself\r\n- one does not work if IParsable is implemented explicitely on a geneic type/class\r\n- one does work if IParsable is implemented implicitely on a generic type\r\n\r\nStart project with one of them in use.\r\n\r\n### Exceptions (if any)\r\n\r\nFor the non working endpoint mappings this is:\r\n\r\n\u0060\u0060\u0060\r\nAn unhandled exception has occurred while executing the request.\r\n      System.InvalidOperationException: TryParse method found on MyTypedId with incorrect format. Must be a static method with format\r\n      bool TryParse(string, IFormatProvider, out MyTypedId)\r\n      bool TryParse(string, out MyTypedId)\r\n      but found\r\n      static Boolean TryParse(System.String, System.IFormatProvider, MyTypedId ByRef)\r\n\u0060\u0060\u0060\r\n\r\n\r\n### .NET Version\r\n\r\n8.0.303\r\n\r\n### Anything else?\r\n\r\nCause of the error is the method that searches for the explicitely implemented TryParse method in ParameterBindingMethodCache:\r\n\r\n\u0060\u0060\u0060csharp\r\n    private static bool TryGetExplicitIParsableTryParseMethod(Type type, out MethodInfo methodInfo)\r\n    {\r\n        // Nested types by default use \u002B as the delimeter between the containing type and the\r\n        // inner type. However when doing a method search this \u0027\u002B\u0027 symbol needs to be a \u0027.\u0027 symbol.\r\n        var typeName = TypeNameHelper.GetTypeDisplayName(type, fullName: true, nestedTypeDelimiter: \u0027.\u0027);\r\n        var name = $\u0022System.IParsable\u003C{typeName}\u003E.TryParse\u0022;\r\n        methodInfo = type.GetMethod(name, BindingFlags.Static | BindingFlags.NonPublic)!;\r\n        return methodInfo is not null;\r\n    }\r\n\u0060\u0060\u0060\r\n\r\nas the name the method tries to search for is \u0060System.IParsable\u003CMyTypedId\u003E.TryParse\u0060 but if implemented in a generic type the name of the method is  \u0060System.IParsable\u003CTId\u003E.TryParse\u0060 with the type paramater name in place, not the actual type name.\r\n\r\nA possible solution would be to use the interface mapping to search for the implementation. This will not only take care of this but will find the correct implementation of IParsable\u003C\u003E.TryParse no matter whether the implementation is implicit or explicit.\r\n\r\n\u0060\u0060\u0060csharp\r\n    private static bool TryGetImplementedIParsableTryParseMethod(Type type, [MaybeNullWhen(false)] out MethodInfo methodInfo)\r\n    {\r\n        var desiredIParsableType = typeof(IParsable\u003C\u003E).MakeGenericType(type);\r\n\r\n        if (type.IsAssignableTo(desiredIParsableType))\r\n        {\r\n            var interfaceMapping = type.GetInterfaceMap(desiredIParsableType);\r\n            var index = Array.FindLastIndex(interfaceMapping.InterfaceMethods, m =\u003E m.Name == \u0022TryParse\u0022);\r\n            if (index != -1)\r\n            {\r\n                methodInfo = interfaceMapping.TargetMethods[index];\r\n                return true;\r\n            }\r\n        }\r\n\r\n        methodInfo = null;\r\n        return false;\r\n    }\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86YcNGY",
    "title": "Inferred response body for 4xx response in MinimalAPI app is \u0022TaskOfTodo\u0022",
    "url": "https://github.com/dotnet/aspnetcore/issues/58165",
    "createdAt": "2024-09-30T19:58:37Z",
    "lastUpdated": "2024-10-01T16:42:00Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nIn a minimal API app I have the following endpoint:\r\n\u0060\u0060\u0060csharp\r\napp.MapGet(\u0022/body-schema-inferred\u0022,\r\n    [ProducesResponseType(200)]\r\n    [ProducesResponseType(404)]\r\n    [ProducesResponseType(500)]\r\n    async Task\u003CTodo?\u003E (int id, TodoDb db) =\u003E\r\n        await db.Todos.FindAsync(id));\r\n\u0060\u0060\u0060\r\n\r\nIn the generated OpenAPI, the 200 response is rendered as expected:\r\n\u0060\u0060\u0060json\r\n  \u0022200\u0022: {\r\n    \u0022description\u0022: \u0022OK\u0022,\r\n    \u0022content\u0022: {\r\n      \u0022application/json\u0022: {\r\n        \u0022schema\u0022: {\r\n          \u0022$ref\u0022: \u0022#/components/schemas/Todo\u0022\r\n        }\r\n      }\r\n    }\r\n  },\r\n\u0060\u0060\u0060\r\n\r\nbut the 404 and 500 responses have a whacky schema \u0060TaskOfTodo\u0060\r\n\u0060\u0060\u0060json\r\n  \u0022404\u0022: {\r\n    \u0022description\u0022: \u0022Not Found\u0022,\r\n    \u0022content\u0022: {\r\n      \u0022application/json\u0022: {\r\n        \u0022schema\u0022: {\r\n          \u0022$ref\u0022: \u0022#/components/schemas/TaskOfTodo\u0022\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \u0022500\u0022: {\r\n    \u0022description\u0022: \u0022Internal Server Error\u0022,\r\n    \u0022content\u0022: {\r\n      \u0022application/json\u0022: {\r\n        \u0022schema\u0022: {\r\n          \u0022$ref\u0022: \u0022#/components/schemas/TaskOfTodo\u0022\r\n        }\r\n      }\r\n    }\r\n  }\r\n\u0060\u0060\u0060\r\n\r\nwhich is defined in the \u0060components.schemas\u0060 section as:\r\n\u0060\u0060\u0060json\r\n  \u0022TaskOfTodo\u0022: {\r\n    \u0022type\u0022: \u0022object\u0022,\r\n    \u0022properties\u0022: {\r\n      \u0022result\u0022: {\r\n        \u0022$ref\u0022: \u0022#/components/schemas/Todo2\u0022\r\n      },\r\n      \u0022id\u0022: {\r\n        \u0022type\u0022: \u0022integer\u0022,\r\n        \u0022format\u0022: \u0022int32\u0022\r\n      },\r\n      \u0022exception\u0022: {\r\n        \u0022$ref\u0022: \u0022#/components/schemas/AggregateException\u0022\r\n      },\r\n      \u0022status\u0022: {\r\n        \u0022$ref\u0022: \u0022#/components/schemas/TaskStatus\u0022\r\n      },\r\n      \u0022isCanceled\u0022: {\r\n        \u0022type\u0022: \u0022boolean\u0022\r\n      },\r\n      \u0022isCompleted\u0022: {\r\n        \u0022type\u0022: \u0022boolean\u0022\r\n      },\r\n      \u0022isCompletedSuccessfully\u0022: {\r\n        \u0022type\u0022: \u0022boolean\u0022\r\n      },\r\n      \u0022creationOptions\u0022: {\r\n        \u0022$ref\u0022: \u0022#/components/schemas/TaskCreationOptions\u0022\r\n      },\r\n      \u0022asyncState\u0022: { },\r\n      \u0022isFaulted\u0022: {\r\n        \u0022type\u0022: \u0022boolean\u0022\r\n      }\r\n    }\r\n  },\r\n\u0060\u0060\u0060\r\n\n\n### Expected Behavior\n\nIn a controller-based app, 4xx responses that are defined by ProducesResponseType get a default schema of ProblemDetails, and no schema is inferred for non-4xx status codes. I think this would be the most desirable resolution.\r\n\r\nA next best option would be to not default the schema of a non-2xx response -- leave it as unspecified.\n\n### Steps To Reproduce\n\nI can provide a repro if needed.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100-rc.1.24452.12\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86YcUlz",
    "title": "IApiRequestMetadataProvider not respected and still add application/*\u002Bjson content type.",
    "url": "https://github.com/dotnet/aspnetcore/issues/58166",
    "createdAt": "2024-09-30T20:17:31Z",
    "lastUpdated": "2024-10-01T16:41:42Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nIApiResponseMetadataProvider respect the provided content type in SetContentTypes.\r\nIApiRequestMetadataProvider always add application/*\u002Bjson content event if it\u0027s not provided in SetContentTypes.\n\n### Expected Behavior\n\n application/*\u002Bjson should not be added if it\u0027s not provided in IApiRequestMetadataProvider  SetContentTypes\n\n### Steps To Reproduce\n\nCreate an atttribute implementing IApiRequestMetadataProvider like this \r\n\u0060[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = false, Inherited = true)]\r\npublic class TestConsumesAttribute : Attribute, IApiRequestMetadataProvider\r\n{\r\n    private readonly MediaTypeCollection _contentTypes;\r\n\r\n    public TestConsumesAttribute(string contentType)\r\n    {\r\n        _contentTypes = new MediaTypeCollection { contentType };\r\n    }\r\n\r\n    void IApiRequestMetadataProvider.SetContentTypes(MediaTypeCollection contentTypes)\r\n    {\r\n        contentTypes.Clear();\r\n        foreach (var contentType in _contentTypes)\r\n        {\r\n            contentTypes.Add(contentType);\r\n        }\r\n    }\r\n}\u0060\r\n\r\nAdd swagger gen and put the attibute on a controller with  \u0022application/json\u0022 media type and an input model.\r\nYou can see that application/*\u002Bjson is always added.\r\n\r\nUsing the consume attribute application/*\u002Bjson will not be added.\r\nBe the interface itself should be enough to set the mediatype values.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86YlTbC",
    "title": "Microsoft.AspNetCore.OpenApi specifies non-nullable get-only properties as nullable",
    "url": "https://github.com/dotnet/aspnetcore/issues/58192",
    "createdAt": "2024-10-01T18:24:15Z",
    "lastUpdated": "2024-10-05T12:28:33Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nIf nullable reference types are enabled and a class has a \u0060get\u0060 only non-nullable property, Microsoft.AspNetCore.OpenApi will incorrectly specify the property as nullable.\r\n\r\nI looked at the source code and it seems like \u0060JsonNodeSchemaExtensions.ApplyNullabilityContextInfo(JsonNode, JsonPropertyInfo)\u0060 is the culprit. Specifically this part \u0060propertyInfo.IsGetNullable || propertyInfo.IsSetNullable\u0060.\r\n\r\nShould it even check for \u0060IsSetNullable\u0060 when the property does not have a setter?\r\n\r\nA temporary workaround for the library consumer would be to introduce an unused setter, eg\r\n\u0060\u0060\u0060csharp\r\npublic IEnumerable\u003Cstring\u003E Values\r\n{\r\n  get =\u003E [];\r\n  private set {}\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Expected Behavior\r\n\r\nMicrosoft.AspNetCore.OpenApi generates correct nullability information for schema properties.\r\n\r\n### Steps To Reproduce\r\n\r\nhttps://github.com/keenjus/OpenApiStuff/tree/2e83b32a316500018eb216be015c677933cfa73b\r\n\r\nLaunch the project and inspect the generated OpenApi document at \u0060/openapi/v1.json\u0060. The property \u0060values\u0060 is specified as nullable for \u0060EntityCompany\u0060/\u0060EntityPerson\u0060 schemas.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n9.0.100-rc.1.24452.12\r\n\r\n### Anything else?\r\n\r\nMicrosoft.AspNetCore.OpenApi 9.0.0-rc.1.24452.1",
    "upvotes": 0,
    "labels": [
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86OfULo",
        "parentId": null,
        "author": "captainsafia",
        "content": "@keenjus Thanks for filing this issue!\r\n\r\nThe \u0060ApplyNullabilityContextInfo\u0060 line that you\u0027ve identified attempts to match the behavior of the underlying JsonSchemaExporter ([ref](https://source.dot.net/#System.Text.Json/System/Text/Json/Serialization/Metadata/JsonPropertyInfoOfT.cs,114)).\r\n\r\nThe reason we do this is because OpenAPI\u0027s schemas are supersets of the official JSON schema specification. While JSON schema will permit you to use \u0060{ type: [\u0022array\u0022, \u0022null\u0022] }\u0060 to convey that a type is nullable array, OpenAPI schema requires that you represent that as \u0060{ type: \u0022array\u0022, nullable: true }\u0060.\r\n\r\nIn this particular case, \u0060IsSetNullable\u0060 and \u0060IsGetNullable\u0060 are derived based on whether the property type is nullable ([ref](https://source.dot.net/#System.Text.Json/System/Text/Json/Serialization/Metadata/JsonPropertyInfo.cs,383)).\r\n\r\nAs to why it gets represent this way, assuming you have the following type:\r\n\r\nAssuming the following type:\r\n\r\n\u0060\u0060\u0060csharp\r\npublic class Test\r\n{\r\n    public IEnumerable\u003Cstring\u003E Values { get; }\r\n    public IEnumerable\u003Cstring\u003E Values2 =\u003E [];\r\n    public IEnumerable\u003Cstring\u003E Values3 { get; private set; }\r\n}\r\n\u0060\u0060\u0060\r\nYou\u0027ll get the following result when you try to deserialize \u0060\u0022{}\u0022\u0060:\r\n\r\n\u0060\u0060\u0060json\r\n{\u0022values\u0022:null,\u0022values2\u0022:[],\u0022values3\u0022:null}\r\n\u0060\u0060\u0060\r\n\r\n\u0060values\u0060 and \u0060values3\u0060 do indeed serialize to \u0060null\u0060 values. \u0060values2\u0060 doesn\u0027t because of the default getter. This is an exception though because the schema generator doesn\u0027t factor this in when generating the schema.\r\n\r\nThere is a \u0060RespectsNullableAnnotation\u0060 ([ref](https://learn.microsoft.com/en-us/dotnet/api/system.text.json.jsonserializeroptions.respectnullableannotations?view=net-8.0)) option that allows you to modify this behavior, but it has a notable constraint that impacts your scenario:\r\n\r\n\u003E Due to restrictions in how nullable reference types are represented at run time, this setting only governs nullability annotations of non-generic properties, fields, and constructor parameters. It cannot be used to enforce nullability annotations of root-level types, collection elements, or generic parameters.\r\n\r\nAny general fix I can think of comes with a catch-22 WRT to breaking other things, the best things I can think of for your case are using [schema transformers](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/openapi/aspnetcore-openapi?view=aspnetcore-9.0\u0026tabs=visual-studio%2Cminimal-apis#use-schema-transformers).\r\n\r\nSidenote: I\u0027m a little surprised that your workaround works. My own debugging reveals that \u0060IsGetNullable = False\u0060 and \u0060IsSetNullable = True\u0060 for that scenario so there might be something more going on here.",
        "createdAt": "2024-10-03T05:46:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58192#issuecomment-2390573800"
      },
      {
        "id": "IC_kwDOAQzde86OoEHX",
        "parentId": null,
        "author": "ptffr",
        "content": "I did try a custom schema transformer already with some very crude overrides\r\n\r\n\u0060\u0060\u0060csharp\r\nforeach (var property in schema.Properties)\r\n{\r\n    var jsonProperty = context.JsonTypeInfo.Properties.FirstOrDefault(x =\u003E x.Name == property.Key);\r\n    if (jsonProperty == null) continue;\r\n    \r\n    // Only taking IsSetNullable into account if a setter actually exists\r\n    // Should probably do something similar with IsGetNullable?\r\n    property.Value.Nullable = jsonProperty.IsGetNullable ||\r\n                              jsonProperty is { Set: not null, IsSetNullable: true };\r\n\r\n    // Make the property readonly (as per OpenAPI v3 \u0022readOnly properties are included in responses but not in requests\u0022)\r\n    property.Value.ReadOnly = jsonProperty is { Get: not null, Set: null };\r\n\r\n    // Make the property required if it is not nullable and can only be used for responses.\r\n    // Otherwise the resulting TypeScript definition would make it optional eg. \u0060readonly values?: string[]\u0060\r\n    if (property.Value.ReadOnly \u0026\u0026 !property.Value.Nullable)\r\n    {\r\n        schema.Required.Add(property.Key);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nC# class\r\n\u0060\u0060\u0060csharp\r\npublic class Entity\r\n{\r\n  public IEnumerable\u003Cstring\u003E Values =\u003E [];\r\n}\r\n\u0060\u0060\u0060\r\n\r\nGenerated TypeScript definition using the \u0060openapi-typescript\u0060 npm package.\r\n\u0060\u0060\u0060typescript\r\nEntity: {\r\n    readonly values: string[];\r\n}\r\n\u0060\u0060\u0060\r\n\r\n@captainsafia \r\n\u003EAny general fix I can think of comes with a catch-22 WRT to breaking other things\r\n\r\nWhat would this kind of behavior change break in Microsoft.AspNetCore.OpenApi? Why is not logical to only check for \u0060IsSetNullable\u0060 if a setter actually exists?",
        "createdAt": "2024-10-04T05:44:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58192#issuecomment-2392867287"
      },
      {
        "id": "IC_kwDOAQzde86Ov962",
        "parentId": null,
        "author": "dotnet-policy-service",
        "content": "This issue has been resolved and has not had any activity for **1 day**. It will be closed for housekeeping purposes.\n\nSee [our Issue Management Policies](https://aka.ms/aspnet/issue-policies) for more information.\n\u003C!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003E",
        "createdAt": "2024-10-05T05:47:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58192#issuecomment-2394939062"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86Zmz3Y",
    "title": "OpenApi custom polymorphic type names",
    "url": "https://github.com/dotnet/aspnetcore/issues/58332",
    "createdAt": "2024-10-09T22:35:33Z",
    "lastUpdated": "2024-11-20T09:07:24Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWe\u0027re looking into migrating from Swashbuckle to Microsoft.AspNetCore.OpenApi. There are many benefits but polymorphic type naming is a larger issue for us as it makes generated type names hard to read. In our case we use the base type name as a suffix, e.g.\n\n\u0060\u0060\u0060csharp\nabstract class JobTemplate { ... }\nclass FooJobTemplate : JobTemplate { .. }\n\u0060\u0060\u0060\n\nGenerates a type called: \u0060JobTemplateFooJobTemplate\u0060.\n\n\n### Describe the solution you\u0027d like\n\nAny way to customize the generated schema name. In Swashbuckle we could configure a delegate that took a Type and returned a String. \n\n### Additional context\n\n#57982 and #58213 also mention this particular issue.",
    "upvotes": 3,
    "labels": [
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86PQ_wl",
        "parentId": null,
        "author": "captainsafia",
        "content": "@koenbeuk Thanks for filing this issue! The default implementation for generating polymorphic type names use the \u0060BaseType\u0060 as the prefix. We don\u0027t yet expose an API for customizing the polymorphic type name, although we can consider adding this in the future. The ship has sailed for introducing a new API in .NET 9.\n\nIn the meantime, if it is a feasible approach for you, you may consider removing the suffix in your type names and relying on the prefixing behavior that is built-in.",
        "createdAt": "2024-10-09T23:11:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58332#issuecomment-2403597349"
      },
      {
        "id": "IC_kwDOAQzde86RSIpk",
        "parentId": null,
        "author": "marinasundstrom",
        "content": "I want to move from NSwag and I also see this as a problem. They way polymorphism is done doesn\u0027t match either NSwag, or Swashbuckle. The OpenAPI specification being generated is incompatible.",
        "createdAt": "2024-10-25T10:36:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58332#issuecomment-2437450340"
      },
      {
        "id": "IC_kwDOAQzde86RW7nI",
        "parentId": null,
        "author": "marinasundstrom",
        "content": "My prototype, limited by the naming convention, and other things:\n\nhttps://github.com/marinasundstrom/NullabilityTransformersPrototype/tree/main/WebApi\n\nAlso https://github.com/RicoSuter/NJsonSchema/issues/1739",
        "createdAt": "2024-10-25T20:09:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58332#issuecomment-2438707656"
      },
      {
        "id": "IC_kwDOAQzde86US017",
        "parentId": null,
        "author": "lvde0",
        "content": "Experiencing the same problem. The transition from Swashbuckle is causing a lot of friction because of the way polymorphism is handled:\n\n- The base class prefix needs to be configurable.\n- It does not generate \u0060allof\u0060 on the derived types\n- Instead of \u0060Pet\u0060 it generates an extra \u0060PetBase\u0060, which is confusing too\n \nThese things needs to be figured out...",
        "createdAt": "2024-11-20T09:07:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58332#issuecomment-2487963003"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86Zujb_",
    "title": "Invalid openapi.json produced when having properties of the declaring type",
    "url": "https://github.com/dotnet/aspnetcore/issues/58340",
    "createdAt": "2024-10-10T14:57:31Z",
    "lastUpdated": "2024-10-11T08:36:57Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen building the project you will get an invalid openapi file:\n\nlook at \u0060WeatherForecast2\u0060\n\nI think it tries to generate the type definition twice which not may cause this issue directly.\n\n\u0060\u0060\u0060json\n{\n  \u0022openapi\u0022: \u00223.0.1\u0022,\n  \u0022info\u0022: {\n    \u0022title\u0022: \u0022OpenApiTest | v1\u0022,\n    \u0022version\u0022: \u00221.0.0\u0022\n  },\n  \u0022paths\u0022: {\n    \u0022/weatherforecast\u0022: {\n      \u0022get\u0022: {\n        \u0022tags\u0022: [\n          \u0022OpenApiTest\u0022\n        ],\n        \u0022responses\u0022: {\n          \u0022200\u0022: {\n            \u0022description\u0022: \u0022OK\u0022,\n            \u0022content\u0022: {\n              \u0022application/json\u0022: {\n                \u0022schema\u0022: {\n                  \u0022type\u0022: \u0022array\u0022,\n                  \u0022items\u0022: {\n                    \u0022$ref\u0022: \u0022#/components/schemas/WeatherForecast\u0022\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \u0022components\u0022: {\n    \u0022schemas\u0022: {\n      \u0022WeatherForecast\u0022: {\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022forecasts\u0022: {\n            \u0022type\u0022: \u0022array\u0022,\n            \u0022items\u0022: {\n              \u0022$ref\u0022: \u0022#/components/schemas/WeatherForecast2\u0022\n            }\n          }\n        }\n      },\n      \u0022WeatherForecast2\u0022: {\n        \u0022$ref\u0022: \u0022#/components/schemas/#/items\u0022\n      }\n    }\n  },\n  \u0022tags\u0022: [\n    {\n      \u0022name\u0022: \u0022OpenApiTest\u0022\n    }\n  ]\n}\n\u0060\u0060\u0060\n\n### Expected Behavior\n\nShould be this:\n\n\u0060\u0060\u0060json\n{\n  \u0022openapi\u0022: \u00223.0.1\u0022,\n  \u0022info\u0022: {\n    \u0022title\u0022: \u0022OpenApiTest | v1\u0022,\n    \u0022version\u0022: \u00221.0.0\u0022\n  },\n  \u0022paths\u0022: {\n    \u0022/weatherforecast\u0022: {\n      \u0022get\u0022: {\n        \u0022tags\u0022: [\n          \u0022OpenApiTest\u0022\n        ],\n        \u0022responses\u0022: {\n          \u0022200\u0022: {\n            \u0022description\u0022: \u0022OK\u0022,\n            \u0022content\u0022: {\n              \u0022application/json\u0022: {\n                \u0022schema\u0022: {\n                  \u0022type\u0022: \u0022array\u0022,\n                  \u0022items\u0022: {\n                    \u0022$ref\u0022: \u0022#/components/schemas/WeatherForecast\u0022\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \u0022components\u0022: {\n    \u0022schemas\u0022: {\n      \u0022WeatherForecast\u0022: {\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022forecasts\u0022: {\n            \u0022type\u0022: \u0022array\u0022,\n            \u0022items\u0022: {\n              \u0022$ref\u0022: \u0022#/components/schemas/WeatherForecast\u0022\n            }\n          }\n        }\n      }\n    }\n  },\n  \u0022tags\u0022: [\n    {\n      \u0022name\u0022: \u0022OpenApiTest\u0022\n    }\n  ]\n}\n\u0060\u0060\u0060\n\n### Steps To Reproduce\n\n\u0060\u0060\u0060cs\n// Program.cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddOpenApi();\n\nvar app = builder.Build();\napp.MapOpenApi();\napp.MapGet(\u0022/weatherforecast\u0022, () =\u003E\n{\n    return new []{new WeatherForecast()}; // this part seems important - when I\u0027m not returning an error its fine (implicit api description?)\n});\napp.Run();\n\npublic class WeatherForecast\n{\n    public IEnumerable\u003CWeatherForecast\u003E Forecasts { get; set; } = [];\n}\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060csproj\n\u003C!-- OpenApiTest.csproj --\u003E\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk.Web\u0022\u003E\n\n  \u003CPropertyGroup\u003E\n    \u003CTargetFramework\u003Enet9.0\u003C/TargetFramework\u003E\n    \u003CNullable\u003Eenable\u003C/Nullable\u003E\n    \u003CImplicitUsings\u003Eenable\u003C/ImplicitUsings\u003E\n    \u003COpenApiGenerateDocuments\u003Etrue\u003C/OpenApiGenerateDocuments\u003E\n    \u003COpenApiDocumentsDirectory\u003E$(MSBuildProjectDirectory)\u003C/OpenApiDocumentsDirectory\u003E\n  \u003C/PropertyGroup\u003E\n\n  \u003CItemGroup\u003E\n    \u003CPackageReference Include=\u0022Microsoft.AspNetCore.OpenApi\u0022 Version=\u00229.0.0-rc.2.24474.3\u0022 /\u003E\n    \u003CPackageReference Include=\u0022Microsoft.Extensions.ApiDescription.Server\u0022 Version=\u00229.0.0-rc.2.24474.3\u0022\u003E\n      \u003CPrivateAssets\u003Eall\u003C/PrivateAssets\u003E\n      \u003CIncludeAssets\u003Eruntime; build; native; contentfiles; analyzers; buildtransitive\u003C/IncludeAssets\u003E\n    \u003C/PackageReference\u003E\n  \u003C/ItemGroup\u003E\n\n\u003C/Project\u003E\n\u0060\u0060\u0060\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100-rc.2.24474.11\n\n### Anything else?\n\n_No response_",
    "upvotes": 1,
    "labels": [
      "Needs: Attention :wave:",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86PbCmq",
        "parentId": null,
        "author": "captainsafia",
        "content": "@MeikelLP Thanks for filling this issue!\n\nThis problem is happening as a result of some yucky intersection between the way we model \u0060$ref\u0060 in the OpenAPI schema and the way the underlying \u0060JsonSchemaExporter\u0060 from \u0060System.Text.Json\u0060. STJ uses the relative reference \u0060#/items\u0060 to indicate a self-referential schema type.\n\nWe try to map this to a reference ID that is relative to the OpenAPI document and things get mangled there. \n\nOut of curiosity, what do you mean by this in your repro:\n\n\u003E // this part seems important - when I\u0027m not returning an error its fine (implicit api description?)",
        "createdAt": "2024-10-10T23:39:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58340#issuecomment-2406230442"
      },
      {
        "id": "IC_kwDOAQzde86PdpbI",
        "parentId": null,
        "author": "MeikelLP",
        "content": "\u003E [@MeikelLP](https://github.com/MeikelLP) Thanks for filling this issue!\n\u003E \n\u003E This problem is happening as a result of some yucky intersection between the way we model \u0060$ref\u0060 in the OpenAPI schema and the way the underlying \u0060JsonSchemaExporter\u0060 from \u0060System.Text.Json\u0060. STJ uses the relative reference \u0060#/items\u0060 to indicate a self-referential schema type.\n\u003E \n\u003E We try to map this to a reference ID that is relative to the OpenAPI document and things get mangled there.\n\u003E \n\u003E Out of curiosity, what do you mean by this in your repro:\n\u003E \n\u003E \u003E // this part seems important - when I\u0027m not returning an error its fine (implicit api description?)\n\nIt only happens when I return an array. If I return a single object the openapi.json does not break.\n\nThis also happens in controller endpoints not only in minimal",
        "createdAt": "2024-10-11T08:36:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58340#issuecomment-2406913736"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86Zwt7N",
    "title": "Improve build-time OpenAPI document generation",
    "url": "https://github.com/dotnet/aspnetcore/issues/58353",
    "createdAt": "2024-10-10T19:40:24Z",
    "lastUpdated": "2024-12-17T22:11:45Z",
    "body": "This is a meta-issue to track a set of improvements that can be made to the tooling we currently provide for generating OpenAPI documents at build-time.\n\nBuild-time OpenAPI document generation issue currently supported by the [Microsoft.Extensions.ApiDescription.Server package](https://www.nuget.org/packages/Microsoft.Extensions.ApiDescription.Server) and was primarily implemented with the assumption that another package (like Swashbuckle or NSwag) would be installed alongside it. \n\nHere\u0027s a braindump of the current issues with the design and how we might improve them in the future:\n\n* The current implementation uses an internal executable that is called via MSBuild, so there\u0027s massaging that needs to be done when mapping the MSBuild arguments to arguments for the CLI tool. IMO, we should ship either a tool or stick to MSBuild targets. I don\u0027t think there\u0027s much value in providing half-baked support for both.\n* The current implementation is intended to work with tools like Swashbuckle, which support a wider set of target frameworks that we intend to. Moving to a different approach would allow us to remove code/packaging logic related to unsupported frameworks (netfx, netstandard).\n* I\u0027d like to standardize the configuration story for build-time document generation so there\u0027s an official schema exposed via options (similar to what you get with Aspire\u0027s config model) to improve the discoverability of these options.\n* The current implementation relies on private reflection-based contract exposed via the \u201CIDocumentProvider\u201D interface. This interface should be fleshed out and made public.\n* The current implementation will attempt to boot up the application\u0027s entry-point at build-time in oder to resolve the \u0060IDocumentProvider\u0060 instance from the DI container. This can present issues for applications that resolve configuration at startup that might not exist when it is launched  by the command line tool. Furthermore, it\u0027s difficult to detect when an application is being launched by the tool which makes it difficult to create conditional logic for this behavior.\n\nThis collection of issues and our overall investment in OpenAPI warrants another look here to see if we can establish something better and address something of these pain-points. The goals of this effort include:\n\n- Reducing the reliance on internal or undocumented APIs for the implementation\n- Streamline the process for configuring options for the command line tool\n- Make it easier to stub out unavailable startup dependences in the entry points",
    "upvotes": 10,
    "labels": [
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86TL_pn",
        "parentId": null,
        "author": "marinasundstrom",
        "content": "I\u0027m currently using NSwag. This API is currently limited compared to that.\n\nEspecially in how null is handled. And then inheritance.\n\nBut about null:\n\nNSwag uses \u0060\u0060oneOf\u0060\u0060 like this to represent nullable for referenced object schemas:\n\n\u0060\u0060\u0060yaml\nBag:\n        properties:\n          count:\n            type: integer\n            format: int32\n          item:\n            nullable: true\n            oneOf:\n            - $ref: \u0027#/components/schemas/Item\u0027\n\u0060\u0060\u0060\n\nOtherwise, if it\u0027s the requestBody, NSwag marks it as required.\n\nFor comparison:\n\nhttps://github.com/marinasundstrom/NullabilityTransformersPrototype/blob/main/Client/OpenAPIs/v1-nswag.yaml\n\nController:\nhttps://github.com/marinasundstrom/NullabilityTransformersPrototype/blob/main/WebApi/Controllers/TestController.cs",
        "createdAt": "2024-11-12T01:20:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58353#issuecomment-2469395047"
      },
      {
        "id": "IC_kwDOAQzde86ThtNM",
        "parentId": null,
        "author": "captainsafia",
        "content": "@marinasundstrom I think you might\u0027ve intended to post this comment on the issue tracking adoption of 3.1 support: https://github.com/dotnet/aspnetcore/issues/58619",
        "createdAt": "2024-11-14T00:17:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58353#issuecomment-2475086668"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86aTVD0",
    "title": "Antiforgery validation failure returns 400 Bad Request for Controllers and 500 Internal Server Error for minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/58441",
    "createdAt": "2024-10-15T13:17:22Z",
    "lastUpdated": "2024-10-15T13:24:55Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nThere\u0027s a difference in antiforgery prevention response between classic MVC and API controllers and minimal APIs.\n\n* Controller: 400 Bad Request\n* Minimal API: 500 Internal Server Error\n\n### Expected Behavior\n\nI expect the antiforgery validation failure response to be consistent between backend implementations so that I can write a frontend that is ignorant of the technology used in the backend.\n\n### Steps To Reproduce\n\n**Controller**\n\n\u0060\u0060\u0060csharp\n[ApiController]\n[Route(\u0022example-1\u0022)]\npublic class AntiforgeryExampleController : ControllerBase\n{\n    [HttpPost]\n    [RequireAntiforgeryToken]\n    public IActionResult Post(IFormFile file)\n    {\n        return Ok();\n    }\n}\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n{\n  \u0022type\u0022: \u0022https://tools.ietf.org/html/rfc9110#section-15.5.1\u0022,\n  \u0022title\u0022: \u0022Bad Request\u0022,\n  \u0022status\u0022: 400\n}\n\u0060\u0060\u0060\n\n**Minimal API**\n\n\u0060\u0060\u0060csharp\napp.MapPost(\u0022example-2\u0022, (IFormFile file) =\u003E Results.Ok());\n\u0060\u0060\u0060\n\u0060\u0060\u0060json\n{\n  \u0022type\u0022: \u0022https://tools.ietf.org/html/rfc9110#section-15.6.1\u0022,\n  \u0022title\u0022: \u0022An error occurred while processing your request.\u0022,\n  \u0022status\u0022: 500\n}\n\u0060\u0060\u0060\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.403\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86a3BsZ",
    "title": "[NativeAOT] Publishing with NativeAOT and trimming results in broken code",
    "url": "https://github.com/dotnet/aspnetcore/issues/58509",
    "createdAt": "2024-10-18T18:12:52Z",
    "lastUpdated": "2024-10-18T19:21:28Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nI have a source generator that builds some minimal api from controller classes. The source generator creates an extension method for \u0060WebApplication\u0060 which maps all methods from the controllers with the dependencies and parameters of the methods.\n\nWhen running under Debug, the app works fine and returns expected responses.\nWhen building my docker image and publishing the app with NativeAOT and trimming, on certain flows, the API calls return a serialization of the Task\u003CIResult\u003E object instead of the IResult result from the Task\u003CIResult\u003E\n\n### Expected Behavior\n\n\u0060\u0060\u0060C#\napp.MapPost(\u0022route\u0022, async (someparams) =\u003E \n{\n    return await someMethod();\n});\n\u0060\u0060\u0060\nshould return a json generated by \u0060someMethod()\u0060, not a json that looks like \n\u0060\u0060\u0060json\n{\n    \u0022result\u0022: {},\n    \u0022asyncState\u0022: null,\n    \u0022creationOptions\u0022: 0,\n    \u0022exception\u0022: null,\n    \u0022id\u0022: 2,\n    \u0022isCanceled\u0022: false,\n    \u0022isCompleted\u0022: true,\n    \u0022isCompletedSuccessfully\u0022: true,\n    \u0022isFaulted\u0022: false,\n    \u0022status\u0022: 5\n}\n\u0060\u0060\u0060\n\n### Steps To Reproduce\n\nHere\u0027s a link to the repo:\nhttps://github.com/AlexMacocian/Badge\nRun \u0060docker compose up\u0060 in \u0060Badge\u0060 subdirectory.\n\n- In \u0060Program.cs:\u0060 \n    - Uncomment \u0060.UseRoutes()\u0060 and comment out \u0060UseRoutes2(app)\u0060\n    - Build and run the docker image\n    - Do an empty POST request to \u0060http://localhost/api/oauth/token\u0060 or a GET request to \u0060http://localhost/api/oauth/.well-known/jwks.json\u0060\n    - Observe the serialized Task\u003CIResult\u003E response\n- Go back to \u0060Program.cs\u0060\n    - Comment \u0060.UseRoutes()\u0060 and uncomment \u0060UseRoutes2(app)\u0060\n    - Build and run the docker image\n    - Do an empty POST request to \u0060http://localhost/api/oauth/token\u0060 or a GET request to \u0060http://localhost/api/oauth/.well-known/jwks.json\u0060\n    - Observe the proper json responses\n\n- Finally, compare generated \u0060UseRoutes()\u0060 extension method with \u0060UseRoutes2()\u0060 method that is copied in \u0060Program.cs\u0060. \u0060UseRoutes2()\u0060 is a copy of \u0060UseRoutes()\u0060, just placed outside of the generated extension and not marked as an extension method. But otherwise, it contains the same code.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n.NET SDK:  Version:           8.0.403  Commit:            c64aa40a71  Workload version:  8.0.400-manifests.18f19b92  MSBuild version:   17.11.9\u002Ba69bbaaf5  Runtime Environment:  OS Name:     debian  OS Version:  12  OS Platform: Linux  RID:         linux-x64  Base Path:   /usr/share/dotnet/sdk/8.0.403/  .NET workloads installed: Configured to use loose manifests when installing new manifests. There are no installed workloads to display.  Host:   Version:      8.0.10   Architecture: x64   Commit:       81cabf2857  .NET SDKs installed:   8.0.403 [/usr/share/dotnet/sdk]  .NET runtimes installed:   Microsoft.AspNetCore.App 8.0.10 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]   Microsoft.NETCore.App 8.0.10 [/usr/share/dotnet/shared/Microsoft.NETCore.App]  Other architectures found:   None  Environment variables:   Not set  global.json file:   Not found  Learn more:   https://aka.ms/dotnet/info  Download .NET:   https://aka.ms/dotnet/download\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "NativeAOT",
      "feature-rdg",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86QbHWj",
        "parentId": null,
        "author": "AlexMacocian",
        "content": "Another thing to note, if I copy the generated code from \u0060UseRoutes()\u0060 inside \u0060Program.cs\u0060, call it \u0060UseRoutes2()\u0060 and call that one instead, I no longer have the issue described above.\n\nThis really looks like something that has to do with the generated code is compiled. But it makes no sense that the same code would result in different functionality, if copied inside the \u0060Program.cs\u0060",
        "createdAt": "2024-10-18T18:34:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58509#issuecomment-2423027107"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86bVeO0",
    "title": "Set content-type to \u0060application/problem\u002Bjson\u0060 for generic TypedResults with T=ProblemDetails",
    "url": "https://github.com/dotnet/aspnetcore/issues/58574",
    "createdAt": "2024-10-22T17:47:07Z",
    "lastUpdated": "2024-10-28T14:36:26Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nCurrently when an endpoint returns a generic TypedResults with T=ProblemDetails, such as \u0060NotFound\u003CProblemDetails\u003E\u0060,\nthe content-type is set to \u0060application/json\u0060 instead of \u0060application/problem\u002Bjson\u0060.\n\nThe endpoint _could_ set the content-type manually, but it would be nice if the framework could do this automatically.\n\nNote that the generated OpenAPI document currently shows the response as \u0060application/json\u0060, which is correct\nas long as the endpoint does not set the content-type manually.\n\n\n### Describe the solution you\u0027d like\n\nSet the content-type \u0060application/problem\u002Bjson\u0060 for TypedResults with T=ProblemDetails _and_ reflect this in the OpenAPI document.\n\n### Additional context\n\n_No response_",
    "upvotes": 1,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86Q1m6o",
        "parentId": null,
        "author": "mikekistler",
        "content": "Repro at https://github.com/mikekistler/aspnetcore-issue-repros/ProblemDetails.",
        "createdAt": "2024-10-22T18:30:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58574#issuecomment-2429972136"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86buyK7",
    "title": "Upgrade Microsoft.AspNetCore.OpenAPI and add support for OpenAPI v3.1",
    "url": "https://github.com/dotnet/aspnetcore/issues/58619",
    "createdAt": "2024-10-24T23:27:49Z",
    "lastUpdated": "2024-12-19T00:04:28Z",
    "body": "The \u0060Microsoft.OpenApi\u0060 team is gearing up to ship a new major version of the implementation that supports serializing OpenAPI documents to v3.1.\n\nThis issue tracks updating the OpenAPI implementation in \u0060Microsoft.AspNetCore.OpenApi\u0060 to consume the new version of this dependency and making the necessary changes to target their new \u0060OpenApiSchema\u0060 definition.\n\nThe new OpenAPI schema definition contains better built-ins for recursive references that we can consider depending on instead of our current \u0060$ref\u0060 based approach. The new approach also exposes JSON Schema\u0027s underlying \u0060$def\u0060s structure for denoting common schemas that we can consider using in lieu of the current mapping structure.",
    "upvotes": 20,
    "labels": [
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86b7E7a",
    "title": "[FromForm] with Custom Property Names Fails to Bind in .NET 8 Minimal API, Works in MVC Controllers",
    "url": "https://github.com/dotnet/aspnetcore/issues/58648",
    "createdAt": "2024-10-26T15:50:42Z",
    "lastUpdated": "2024-12-18T05:39:38Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen using .NET 8 Minimal API, form data binding with customized property names via \u0060[FromForm(Name = \u0022some name\u0022)]\u0060 and \u0060[JsonPropertyName(\u0022some name\u0022)]\u0060 fails to deserialize the request object, resulting in null. However, the same configuration works correctly in .NET 8 when using MVC controllers.\n\n### Expected Behavior\n\nThe form data should be correctly deserialized into the request object in a Minimal API project when using customized property names, just like it does in a traditional MVC controller project.\n\n### Steps To Reproduce\n\nA minimalistic project reproducing the issue is provided below:\n\n\u0060Minimal API Project\u0060\n\n\u0060\u0060\u0060c#\n\napp.MapPost(\u0022/submit\u0022, ([FromForm] UserInput input, HttpContext context) =\u003E\n{\n    return Results.Ok(new { Message = \u0022Form received\u0022, input });\n})\n.WithName(\u0022SubmitForm\u0022)\n.WithOpenApi()\n.DisableAntiforgery();\n\npublic class UserInput\n{\n    [JsonPropertyName(\u0022first_name\u0022)]\n    [FromForm(Name = \u0022first_name\u0022)]\n    public string FirstName { get; set; }\n\n    [JsonPropertyName(\u0022last_name\u0022)]\n    [FromForm(Name = \u0022last_name\u0022)]\n    public string LastName { get; set; }\n}\n\n\u0060\u0060\u0060\n\n![Image](https://github.com/user-attachments/assets/68130ad6-ba76-4219-ba2d-10969d53b4ed)\n\n![Image](https://github.com/user-attachments/assets/cc829b30-7a2f-4240-83ee-bd1ec6f863f4)\n\n\n\u0060Controller API Project\u0060\n\n\u0060\u0060\u0060c#\nusing Microsoft.AspNetCore.Mvc;\n\nusing System.Text.Json.Serialization;\n\nnamespace WebAPI.Controllers;\n[Route(\u0022api/[controller]\u0022)]\n[ApiController]\npublic class SubmitController : ControllerBase\n{\n    [HttpPost]\n    public IActionResult Post([FromForm] UserInput input)\n    {\n        return Ok(new { Message = \u0022Form received\u0022, input });\n    }\n}\npublic class UserInput\n{\n    [JsonPropertyName(\u0022first_name\u0022)]\n    [FromForm(Name = \u0022first_name\u0022)]\n    public string FirstName { get; set; }\n\n    [JsonPropertyName(\u0022last_name\u0022)]\n    [FromForm(Name = \u0022last_name\u0022)]\n    public string LastName { get; set; }\n}\n\u0060\u0060\u0060\n\n![Image](https://github.com/user-attachments/assets/2d12b245-0f5e-4e73-88a4-c214922b6304)\n\n![Image](https://github.com/user-attachments/assets/0aa50a11-c46b-4464-a081-09d569b6f2a0)\n\n\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.403\n\n### Anything else?\n\n\u0060dotnet --info\u0060\n\n**.NET SDK:**\n-  Version:           8.0.403\n-  Commit:            c64aa40a71\n-  Workload version:  8.0.400-manifests.e99c892e\n-  MSBuild version:   17.11.9\u002Ba69bbaaf5\n\n**Runtime Environment:**\n\n-  OS Name:     Windows\n-  OS Version:  10.0.19045\n-  OS Platform: Windows\n-  RID:         win-x64\n-  Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.403\\\n\n**.NET workloads installed:**\nConfigured to use loose manifests when installing new manifests.\n\n-  [aspire]\n-    Installation Source: VS 17.11.35327.3\n-    Manifest Version:    8.1.0/8.0.100\n-    Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.aspire\\8.1.0\\WorkloadManifest.json\n-    Install Type:        FileBased\n\n\n**Host:**\n\n-   Version:      8.0.10\n-   Architecture: x64\n-   Commit:       81cabf2857\n\n**.NET SDKs installed:**\n\n-   8.0.403 [C:\\Program Files\\dotnet\\sdk]\n\n**.NET runtimes installed:**\n\n-   Microsoft.AspNetCore.App 6.0.35 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n-   Microsoft.AspNetCore.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n-   Microsoft.AspNetCore.App 8.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n-   Microsoft.NETCore.App 6.0.35 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n-   Microsoft.NETCore.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n-   Microsoft.NETCore.App 8.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n-   Microsoft.WindowsDesktop.App 6.0.35 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n-   Microsoft.WindowsDesktop.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n-   Microsoft.WindowsDesktop.App 8.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n\n**Other architectures found:**\n\n-   x86   [C:\\Program Files (x86)\\dotnet] registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\n\n**Environment variables:**\n\n-   Not set\n\n**global.json file:**\n\n-   Not found\n\n**Learn more:**\n-  https://aka.ms/dotnet/info",
    "upvotes": 3,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86YA36j",
        "parentId": null,
        "author": "insanity13",
        "content": "Similar issue, it would be great if the FromForm property binder can be setup same way as HttpJsonOptions to be able to have one place to setup API naming\n![Image](https://github.com/user-attachments/assets/5a567eed-c939-4fc8-83a0-8321ef6e4192)\n\nInteresting observation: Swagger relies on PropertyNamingPolicy to name form properties\n![Image](https://github.com/user-attachments/assets/a9771db2-2311-40d4-b40b-e7319fdb6f33)",
        "createdAt": "2024-12-18T05:22:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58648#issuecomment-2550365859"
      },
      {
        "id": "IC_kwDOAQzde86YA9pX",
        "parentId": null,
        "author": "insanity13",
        "content": "I guess it\u0027s related to #47187",
        "createdAt": "2024-12-18T05:39:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58648#issuecomment-2550389335"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86cIT7k",
    "title": "Minimal does not set response type nullability",
    "url": "https://github.com/dotnet/aspnetcore/issues/58681",
    "createdAt": "2024-10-28T20:04:15Z",
    "lastUpdated": "2024-10-28T20:04:57Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nIf a minimal API app returns \u0060null\u0060 / sets the response body to \u0060null\u0060, the response body sent on the wire is \u0022null\u0022, but the generated OpenAPI does not indicate that the response body is nullable.\n\n\n### Expected Behavior\n\nThe response body type should specify \u0060nullable: true\u0060 if the response could be \u0022null\u0022.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100-rc.1.24452.12\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "bug",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86ce8p6",
    "title": "Include known error responses in OpenAPI metadata/generated OpenAPI doc",
    "url": "https://github.com/dotnet/aspnetcore/issues/58719",
    "createdAt": "2024-10-30T21:14:15Z",
    "lastUpdated": "2024-11-26T17:49:44Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nThere are some cases where the framework / middleware pipeline can generate error responses, such as when the endpoint defines a required parameter -- if the parameter is not present in the request, the framework generates a status code 400 response. And if the ProblemDetails service was added to the DI container, it is used to generate a ProblemDetails response body for this.\n\nHowever, these responses are not represented in the generated OpenAPI document.\n\n### Describe the solution you\u0027d like\n\nFor the case indicated, and perhaps others, these responses should be included in the generated OpenAPI document. However, I think we\u0027ll want to be careful about this -- for example I\u0027m not sure we should add 401 and 403 responses for operations that require authentication.\n\n### Additional context\n\n_No response_",
    "upvotes": 13,
    "labels": [
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86VGjMI",
        "parentId": null,
        "author": "sander1095",
        "content": "Hi Mike! \n\nAre you talking about OpenAPI\u0027s \u0060default\u0060 response here? For example, when I create a Minimal API endpoint that I set up to return a 200 OK with \u0060TodoItem\u0060 DTO\u0027s, would the document have an additional \u0060default\u0060 response pointing to the ProblemDetails schema in case an unknown/unhandled exception occurs in the endpoint?",
        "createdAt": "2024-11-26T17:21:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58719#issuecomment-2501522184"
      },
      {
        "id": "IC_kwDOAQzde86VGxmT",
        "parentId": null,
        "author": "mikekistler",
        "content": "I\u0027m not really referring to \u0022default\u0022. I\u0027m thinking of more specific cases like parameter validation that fails with a 400 response.\n\nI am not a fan of \u0022default\u0022 as I believe it is too broad -- it could cover 1xx or 3xx responses for example.",
        "createdAt": "2024-11-26T17:49:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58719#issuecomment-2501581203"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86cjbpJ",
    "title": "Enhance OpenAPI support in Minimal API with ProducesDefault for default responses",
    "url": "https://github.com/dotnet/aspnetcore/issues/58723",
    "createdAt": "2024-10-31T10:41:26Z",
    "lastUpdated": "2024-11-28T13:42:25Z",
    "body": "\u003C!--\nThis template is useful to build consensus about whether work should be done, and if so, the high-level shape of how it should be approached. Use this before fixating on a particular implementation.\n--\u003E\n\n## Summary\n\nAllow developers to set the \u0060default\u0060 response for OpenAPI operations with the \u0060Produces()\u0060 family of extensions methods from \u0060Microsoft.AspNetCore.OpenApi\u0060 to achieve parity with MVC\u0027s \u0060[ProducesResponseType]\u0060.\n\n## Motivation and goals\n\nBeing able to set the default response for an operation is useful as it demonstrates the default response for unexpected/undocumented operation responses. A common response type for \u0060default\u0060 is \u0060ProblemDetails\u0060, as this usually is the standard type for API errors.\n\nProper use of \u0060default\u0060 is also very important for API client generation, because API Client generators can then ensure that any other errors would always be typed to a specific type like \u0060ProblemDetails\u0060, which is a common pattern for error responses in REST APIs. I generate API clients quite often, and often run into issues where undocumented/unexpected error codes aren\u0027t deserialized into a correct type because of a missing \u0060default\u0060 response type.\n\nSetting \u0060default\u0060 is easy to do with the MVC approach:\n\n\u003Cdetails\u003E\n  \u003Csummary\u003E\u003Cstrong\u003EClick here to see the MVC approach\u003C/strong\u003E\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\n[HttpGet(\u0022{id:int:min(1)}\u0022)]\n[ProducesResponseType\u003CTalk\u003E(StatusCodes.Status200OK)]\n[ProducesResponseType(StatusCodes.Status403Forbidden)]\n[ProducesResponseType(StatusCodes.Status404NotFound)]\n[ProducesDefaultResponseType)]\npublic ActionResult\u003CTalk\u003E GetTalk(int id)\n{\n    // Code here\n}\n\u0060\u0060\u0060\n\nwhich could result in the following OpenAPI document (Parts like problem details and other irrelevant code has been removed for brevity):\n\n\u0060\u0060\u0060yaml\npaths:\n  /talks/{id}:\n    get:\n      operationId: \u0022GetTalk\u0022\n      parameters:\n        - name: \u0022id\u0022\n          in: \u0022path\u0022\n          required: true\n          schema:\n            type: \u0022integer\u0022\n      responses:\n        \u0027200\u0027:\n          content:\n            application/json:\n              schema:\n                $ref: \u0022#/components/schemas/Talk\u0022\n        \u0027403\u0027: # stuff\n        \u0027404\u0027: # stuff\n        \u0027default\u0027: # stuff\n\u0060\u0060\u0060\n\u003C/details\u003E\n\nYou can already use \u0060[ProducesDefaultResponseType]\u0060 with Minimal API\u0027s, but it\u0027s not as discoverable, nor as much as a first-class citizen, as the \u0060Produces\u0060 family of methods from the \u0060Microsoft.AspNetCore.OpenApi\u0060 package:\n\n**Attributes with Minimal API:**\n\u0060\u0060\u0060csharp\napp.MapGet(\u0022/todos/{id}\u0022,\n[ProducesResponseType\u003CTalk\u003E(StatusCodes.Status200OK)]\n[ProducesResponseType(StatusCodes.Status403Forbidden)]\n[ProducesResponseType(StatusCodes.Status404NotFound)]\n[ProducesDefaultResponseType]\nasync (TodoDb db, int id) =\u003E /* Code here */)\n\u0060\u0060\u0060\n\n**Extension methods with Minimal API and default:**\n\u0060\u0060\u0060csharp\napp.MapGet(\u0022/todos/{id}\u0022, async (TodoDb db, int id) =\u003E /* Code here */)\n  .Produces\u003CTodo\u003E(StatusCodes.Status200OK)\n  .ProducesProblem(StatusCodes.Status403Forbidden)\n  .ProducesProblem(StatusCodes.Status404NotFound)\n\u0060\u0060\u0060\n\nThere is no way to set the default response for an operation using extension methods. For this, you\u0027d need an Operation Filter or an attribute, which doesn\u0027t mix very well with the extension methods. Also, \u0060ProducesDefaultResponseType\u0060 is of the MVC namespace, which might be considered odd when using the Minimal API approach.\n\n**Extension methods with Minimal API and attribute for default:**\n\n\u0060\u0060\u0060csharp\napp.MapGet(\u0022/todos/{id}\u0022, \n  [ProducesDefaultResponseType]\n  async (TodoDb db, int id) =\u003E /* Code here */)\n  .Produces\u003CTodo\u003E(StatusCodes.Status200OK)\n  .ProducesProblem(StatusCodes.Status403Forbidden)\n  .ProducesProblem(StatusCodes.Status404NotFound)\n\u0060\u0060\u0060\n\nTherefore, I\u0027d like to add something like \u0060ProducesDefault\u0060 to the \u0060Microsoft.AspNetCore.OpenApi\u0060 package to allow developers to set the default response for an operation using extension methods.\n## In scope\n\n1. Add a \u0060ProducesDefault\u0060 extension method to the \u0060Microsoft.AspNetCore.OpenApi\u0060 package.\n   1. Perhaps this defaults to \u0060ProblemDetails\u0060?\n   2. It should also allow for a content type and schema to be set.\n2. This would work on specific endpoints.\n3. This could work on endpoint groups, too.\n4. Perhaps this should be enabled by default for all applications, as you usually want this enabled for every endpoint, decreasing the amount of boilerplate code needed to get this to work.\n   1. Consider allowing a developer to configure the \u0060default\u0060 settings in \u0060AddOpenAPI\u0060, like setting the content type and/or schema (like problem details or something else) globally.\n\n## Out of scope\n\nNone come to mind right now.\n\n## Risks / unknowns\n\nOne risk is considering my other issue of adding \u0060Description\u0060 to the \u0060Produces\u0060 family of methods: #57963, as this would be more ergonomic than current options. \n\nI\u0027ve created a design proposal for this here: #58724 , but there is an issue of source incompatibility as a string description would clash with the \u0060string contentTypes, params string[] additionalContentTypes\u0060 parameters of the \u0060Produces()\u0060 family of methods.\n\nIf that design proposal is accepted, we should consider how to make \u0060ProducesDefault\u0060 work with \u0060Description\u0060 as well.\n\nThis is important, as I recently implemented setting \u0060Description\u0060 on \u0060ProducesResponseType\u0060 and that family of attributes for MVC (#55656), so we should try to decrease the amount of friction for adding better Description support to Minimal API\u0027s, too.\n\n## Examples\n\n### Setting the default response for an operation\n\n\u0060\u0060\u0060csharp\napp.MapGet(\u0022/todos/{id}\u0022, \n  async (TodoDb db, int id) =\u003E /* Code here */)\n  .Produces\u003CTodo\u003E(StatusCodes.Status200OK)\n  .ProducesProblem(StatusCodes.Status403Forbidden)\n  .ProducesProblem(StatusCodes.Status404NotFound)\n  .ProducesDefault();\n  //.ProducesDefault\u003CCustomApiErrorType\u003E();\n  //.ProducesDefault\u003CCustomApiErrorType\u003E(\u0022application/xml\u0022);\n\u0060\u0060\u0060\n\n### Setting the default response for an endpoint group\n\n\u0060\u0060\u0060csharp\napp.MapGroup(\u0022/todos\u0022).MapTodosApi().ProducesDefault();\n\u0060\u0060\u0060\n\n### Customizing global default response\n\n\u0060\u0060\u0060csharp\nbuilder.Services.AddOpenApi(x =\u003E x.DefaultResponseType = typeof(CustomApiErrorClass));\n\u0060\u0060\u0060\n\u003C!--\n# Detailed design\n\nIt\u0027s often best not to fill this out until you get basic consensus about the above. When you do, consider adding an implementation proposal with the following headings:\n\nDetailed design\nDrawbacks\nConsidered alternatives\nOpen questions\nReferences\n\nIf there\u0027s one clear design you have consensus on, you could do that directly in a PR.\n--\u003E\n",
    "upvotes": 2,
    "labels": [
      "feature-openapi",
      "design-proposal",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86SA-4M",
        "parentId": null,
        "author": "sander1095",
        "content": "Hi @martincostello ! How nice to see you here :) \n\n- Why was the design proposal label removed? \n- What\u0027s the next step? I assume waiting for approval so I can create an API proposal and PR?",
        "createdAt": "2024-10-31T12:29:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58723#issuecomment-2449731084"
      },
      {
        "id": "IC_kwDOAQzde86SBKRM",
        "parentId": null,
        "author": "martincostello",
        "content": "\u003E Why was the design proposal label removed?\n\nMistake - I meant to remove the deprecated webframeworks label.\n\n\u003E What\u0027s the next step?\n\nThe team will look at it.",
        "createdAt": "2024-10-31T12:54:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58723#issuecomment-2449777740"
      },
      {
        "id": "IC_kwDOAQzde86VYPHA",
        "parentId": null,
        "author": "sander1095",
        "content": "This is related to #58719 , which, as far as I understand it, wants to add error handling (with OpenAPI\u0027s \u0060default\u0060) to ASP.NET Core in a more global way, which I would also accept, as this was one of my alternative approaches",
        "createdAt": "2024-11-28T13:42:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58723#issuecomment-2506158528"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86cjkQ1",
    "title": "Improving current methods for setting OpenAPI response descriptions with Minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/58724",
    "createdAt": "2024-10-31T10:58:34Z",
    "lastUpdated": "2024-10-31T11:41:48Z",
    "body": "## Summary\nThe purpose of this design proposal is to allow developers that use Minimal API\u0027s to set OpenAPI response descriptions in **a more ergonomic** way. I created (and implemented) this for controllers with #55656. Some preparations were already done for this in the PR related to the controller\u0027s issue (#58193), and this design proposal aims to finish that work.\n\n## Motivation and goals\n\nBeing able to set a description for each possible response from an endpoint **is very useful** as it allows a developer to not only know WHAT responses to expect, but also **WHEN to expect them**, at least in a broad sense. This can improve error handling in client applications and improve understanding of an API.\n\nMy proposal contains quite some info, so I want to start with a usage example of the proposal, which extends the \u0060Produces\u0060 extension method provided by the \u0060Microsoft.AspNetCore.OpenApi\u0060 package with a new parameter for the response description:\n\n\u0060\u0060\u0060csharp\napp.MapGet(\u0022/todos/{id}\u0022, async (TodoDb db, int id) =\u003E /* Code here */)\n  .Produces\u003CTodo\u003E(StatusCodes.Status200OK, \u0022The description of the response\u0022, \u0022application/json\u0022)\n  .Produces(StatusCodes.Status403Forbidden, \u0022Returned when the user isn\u0027t authorized to view the requested todo entity\u0022)\n  .Produces(StatusCodes.Status404NotFound, \u0022Returned when the todo doesn\u0027t exist or isn\u0027t public yet\u0022);\n\u0060\u0060\u0060\n\nThis would also work for ProducesProblem, etc...\n\n_I created an issue for the subject of this API proposal already: #57963 . I decided to recreate this issue with an design proposal to get a discussion started more quickly and with more context._\n\n### Setting response descriptions with the MVC approach\nBefore we go in-depth about this API proposal, I want to create some context about what I mean with the controller support from #55656. _This feature will only be released with .NET 10, so keep that in mind when reading the following code, which wouldn\u0027t compile with .NET 8 or 9._\n\nTo set a response description in a controller, a developer could write the following:\n\n \u003Cdetails\u003E\n  \u003Csummary\u003E\u003Cstrong\u003EClick here to see the code\u003C/strong\u003E\u003C/summary\u003E\n\n\u0060\u0060\u0060csharp\n[HttpGet(\u0022{id:int:min(1)}\u0022)]\n[ProducesResponseType\u003CTalk\u003E(StatusCodes.Status200OK, Description = \u0022Returns the requested talk entity\u0022)]\n[ProducesResponseType(StatusCodes.Status403Forbidden, Description = \u0022Returned when the user isn\u0027t authorized to view the requested talk entity\u0022)]\n[ProducesResponseType(StatusCodes.Status404NotFound, Description = \u0022Returned when the talk doesn\u0027t exist or isn\u0027t public yet\u0022)]\n[ProducesDefaultResponseType(Description = \u0022The response for undocumented or unexpected responses\u0022)]\npublic ActionResult\u003CTalk\u003E GetTalk(int id)\n{\n    // Code here\n}\n\u0060\u0060\u0060\n\nwhich could result in the following OpenAPI document (Parts like problem details and other irrelevant code has been removed for brevity):\n\n\u0060\u0060\u0060yaml\npaths:\n  /talks/{id}:\n    get:\n      operationId: \u0022GetTalk\u0022\n      parameters:\n        - name: \u0022id\u0022\n          in: \u0022path\u0022\n          required: true\n          schema:\n            type: \u0022integer\u0022\n      responses:\n        \u0027200\u0027:\n          description: \u0022Returns the requested talk entity\u0022\n          content:\n            application/json:\n              schema:\n                $ref: \u0022#/components/schemas/Talk\u0022\n        \u0027403\u0027:\n          description: \u0022Returned when the user isn\u0027t authorized to view the requested talk entity\u0022\n        \u0027404\u0027:\n          description: \u0022Returned when the talk doesn\u0027t exist or isn\u0027t public yet\u0022\n        \u0027default\u0027:\n          description: \u0022The response for undocumented or unexpected responses\u0022\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n-------\n\nIn all the projects I\u0027ve seen and used, response descriptions aren\u0027t used often in ASP.NET Core projects. I believe this to be case because setting them used to be quite verbose, needing XML comments or OpenAPI transformers from Swashbuckle/NSwag.\n\nWith .NET 10 releasing in November 2025, this is no longer the case with controllers as this is now much easier to do. However, I believe that the support for response descriptions with Minimal API\u0027s isn\u0027t as smooth.\n\n### The current problem of setting response descriptions with Minimal API\u0027s \nAs mentioned before, this design proposal aims to **improve the current ways** of setting response descriptions. It is already possible, but I am not satisfied with the current options:\n\n#### Using transformers\n[The documentation](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/openapi/aspnetcore-openapi?view=aspnetcore-9.0\u0026tabs=visual-studio%2Cminimal-apis#describe-response-types) mentions that descriptions can be set using [Document Transformers](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/openapi/aspnetcore-openapi?view=aspnetcore-9.0\u0026tabs=visual-studio%2Cminimal-apis#use-document-transformers) or [Operation Transformers](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/openapi/aspnetcore-openapi?view=aspnetcore-9.0\u0026tabs=visual-studio%2Cminimal-apis#use-operation-transformers).\n\nLet\u0027s take an Operation Transformer as an example. From the docs:\n\n\u0060\u0060\u0060csharp\nbuilder.Services.AddOpenApi(options =\u003E\n{\n    options.AddOperationTransformer((operation, context, cancellationToken) =\u003E\n    {\n        operation.Responses.Add(\u0022500\u0022, new OpenApiResponse { Description = \u0022Internal server error\u0022 });\n        return Task.CompletedTask;\n    });\n});\n\u0060\u0060\u0060\n\nThis would do the job. However:\n\n1. I believe that setting the description is quite important and we should reduce the amount of work required to set it. Therefore, I see this approach as too much work, or even too low-level, just to be able to set a description for an OpenAPI response.\n2. This code lives quite \u0022far away\u0022 from the actual endpoint, leading to potential drift between the actual endpoint and the description in the OpenAPI document if they are not updated together.\n\n\n#### Using ProducesResponseType attribute (.NET 10\u002B)\n[Based on the docs](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/openapi/aspnetcore-openapi?view=aspnetcore-9.0\u0026tabs=visual-studio%2Cminimal-apis#describe-response-types), this functionality could already be implemented using the \u0060ProducesResponseType\u0060 family of attributes, which I\u0027ve implemented Description support for (#55656) and will be released in .NET 10.\n\n\u0060\u0060\u0060csharp\nbuilder.MapGet(\u0022/api/todos\u0022,\n[ProducesResponseType(typeof(Todo), StatusCodes,Status200Ok, Description = \u0022A list of todo items\u0022)]\n[ProducesResponseType(StatusCodes.Status400BadRequest, Description = \u0022Some bad request description\u0022)]\n() =\u003E\n{ \n    // Code here\n});\n\u0060\u0060\u0060\n\nHowever, I do not like this approach in the context of minimal API\u0027s:\n\n1. It\u0027s not very readable, especially when there would be (more) arguments or attributes for these arguments.\n   1. I see Minimal API\u0027s as a way to create API\u0027s with less boilerplate code than the MVC approach. Using attributes for this instead of minimal-api-specific extension methods feels like it doesn\u0027t match that philosophy.\n2. It involves the Mvc namespace, which might not be desired when using the Minimal API approach\n3. It clashes with the OpenAPI extensions methods provided by the ASP.NET Core Minimal API package, which, in my opinion, are the preferred way to enrich endpoints with OpenAPI information when compared to attributes.\n\n## In scope\n\nEnrich the Produces() family of extension methods provided by the \u0060Microsoft.AspNetCore.OpenApi\u0060 package with a new parameter for the response description. This would allow developers to set response descriptions in a more ergonomic way.\n\n## Out of scope\n\nNothing comes to mind right now.\n\n## Risks / unknowns\n\nOne risk is that adding a Description parameter to the Produces() family of extension methods would clash with the current \u0060contentType\u0060 and \u0060additionalContentTypes\u0060 parameters:\n\n\u0060\u0060\u0060csharp\npublic static Microsoft.AspNetCore.Builder.RouteHandlerBuilder Produces (this Microsoft.AspNetCore.Builder.RouteHandlerBuilder builder, int statusCode, Type? responseType = default, string? contentType = default, params string[] additionalContentTypes);\n\npublic static Microsoft.AspNetCore.Builder.RouteHandlerBuilder Produces\u003CTResponse\u003E (this Microsoft.AspNetCore.Builder.RouteHandlerBuilder builder, int statusCode = 200, string? contentType = default, params string[] additionalContentTypes);\n\n// And others...\n\u0060\u0060\u0060\n\nI\u0027d like to add Description AFTER \u0060statusCode\u0060 and/or \u0060responseType\u0060, but this is currently already taken by \u0060contentType\u0060, which is also a string, so this would be a source incompatible change.\n\nI do think this is worth it because of the of the following reasons:\n\n- The current ways of setting response descriptions are not very ergonomic\n- The source compatibility problem is caused by \u0060contentType\u0060  and \u0060additionalContentTypes\u0060 overloads. I don\u0027t have exact numbers on the following claim, but I\u0027d like to think that developers that use Minimal API\u0027s are more likely to use JSON, which means that the \u0060contentType\u0060 argument wouldn\u0027t be used because the default is \u0060application/json\u0060 anyway.\n\nSo, perhaps this proposal should start with a discussion about this source compatibility problem and what we want (and don\u0027t want) to do to get this response description feature implemented for Minimal API\u0027s.\n\n## Usage Examples\n\n\u003C!--\nPlease provide code examples that highlight how the proposed API additions are meant to be consumed.\nThis will help suggest whether the API has the right shape to be functional, performant and useable.\nYou can use code blocks like this:\n\u0060\u0060\u0060csharp\n// some lines of code here\n\u0060\u0060\u0060\n--\u003E\nI believe that extending the OpenAPI extension methods like \u0060Produces()\u0060  provided by the \u0060Microsoft.AspNetCore.OpenApi\u0060 package are the way to go. They are already used to enrich endpoints with OpenAPI information, and I believe that they should be used to set response descriptions as well:\n\n\u0060\u0060\u0060csharp\napp.MapGet(\u0022/todos/{id}\u0022, async (TodoDb db, int id) =\u003E /* Code here */)\n  .Produces\u003CTodo\u003E(StatusCodes.Status200OK, \u0022The description of the response\u0022, \u0022application/json\u0022) // \u003C-- This introduces a source incompatible change as the description (string) is added as the second argument, which is currently contentType (string).\n  .Produces(StatusCodes.Status403Forbidden, \u0022Returned when the user isn\u0027t authorized to view the requested todo entity\u0022)\n  .Produces(StatusCodes.Status404NotFound, \u0022Returned when the todo doesn\u0027t exist or isn\u0027t public yet\u0022);\n\u0060\u0060\u0060\n\n- The description would live next to the endpoint definition\n- It\u0027s way less verbose than attributes or operation transformers.\n\nAs mentioned in the code comment, this introduces a source incompatible change. This is addressed further in the \u0022Alternative Designs\u0022 and \u0022Risks\u0022 sections.\n\n## Alternative Designs\n\n\u003C!--\nWere there other options you considered, such as alternative API shapes?\nHow does this compare to analogous APIs in other ecosystems and libraries?\n--\u003E\n\nThese alternative designs aim to avoid the source-incompatibility problem mentioned above.\n\n### Create new extension methods to avoid source incompatibility problems\nWe could create new extension methods like \u0060ProducesWithDescription\u0060 instead of altering the existing \u0060Produces\u0060 extension methods (and others..) to avoid the source incompatibility problem.\n\n\u0060\u0060\u0060csharp\napp.MapGet(\u0022/todos\u0022, async (TodoDb db) =\u003E await db.Todos.ToListAsync())\n  .Produces\u003CIList\u003CTodo\u003E\u003E(StatusCodes.Status200OK, \u0022application/json\u0022);\n\napp.MapGet(\u0022/foo\u0022, async (TodoDb db) =\u003E await db.Todos.ToListAsync())\n  .ProducesWithDescription\u003CIList\u003CFoo\u003E\u003E(StatusCodes.Status200OK, \u0022The description of the response\u0022, \u0022application/json\u0022, \u0022text/json\u0022);\n\u0060\u0060\u0060\n\nHowever, I do not like this much as it feels a little \u0022bolted-on\u0022. It might also just add confusion for developers because of a larger number of available methods.\n\n### Extend the TypedResults methods with Description information\nThis might be a bit of a stretch, but perhaps we could extend the TypedResults methods with a Description parameter. This way, the description would be set in the same place as where the response is created:\n\n\u0060\u0060\u0060csharp\napp.MapGet(\u0022/todos\u0022, async (TodoDb db) =\u003E\n{\n    var todos = await db.Todos.ToListAsync();\n    return TypedResults.Ok(todos, \u0022Returns a list of todo items\u0022);\n});\n\u0060\u0060\u0060\n\nI\u0027m not sure if this is a good idea, though:\n\n1. Having the response description in the same code as actual endpoint code might increase verbosity. Developers might also think this is returned to the client, even though it\u0027s only used for OpenAPI.\n2. Now that this description is part of actual endpoint code, a developer could also put variables into it, making the description dynamic. We can\u0027t support something like that, as the OpenAPI description should be (mostly) static.\n\n### Introduce unclear breaking change by making description the first argument of the extension methods, causing a clearer breaking change\nAnother way to avoid source incompatibility problems is to create a breaking change and make the description the first argument of the OpenAPI Produces extension methods. This way there isn\u0027t any confusion about the string being an additional content type.\n\n\u0060\u0060\u0060csharp\napp.MapGet(\u0022/todos\u0022, async (TodoDb db) =\u003E await db.Todos.ToListAsync())\n  .Produces\u003CIList\u003CTodo\u003E\u003E(\u0022This is the description\u0022, StatusCodes.Status200OK, \u0022application/json\u0022));\n\u0060\u0060\u0060\n\nHowever, I do not think this is very pretty either, and I believe that creating a breaking change for this is not worth it.",
    "upvotes": 3,
    "labels": [
      "feature-openapi",
      "design-proposal",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86crxXs",
    "title": "Services injected with attribute derived from FromKeyedServicesAttribute appear as request body in swagger",
    "url": "https://github.com/dotnet/aspnetcore/issues/58739",
    "createdAt": "2024-11-01T09:52:22Z",
    "lastUpdated": "2024-11-01T11:38:29Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nThis is much like [#50704](https://github.com/dotnet/aspnetcore/issues/50704#issue-1896783129) except for attributes derived from \u0060FromKeyedServicesAttribute\u0060. The [fix](https://github.com/dotnet/aspnetcore/pull/50717/commits/47ddb2754a1e63dd15f33ec3092a9976abcbd62d) for the previous issue only checked if the type was exactly \u0060FromKeyedServicesAttribute\u0060. \n\n### Expected Behavior\n\nI\u0027m hoping this could be changed to use something like \u0060IsAssignableTo/From\u0060 so that it covers derived attributes too.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\nIs there a workaround? e.g. some other \u0022Ignore this\u0022 attribute I could apply to hide it?",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86SIS5T",
        "parentId": null,
        "author": "stevendarby",
        "content": "P.S. I\u0027d be happy to raise a PR if that would help its chances of getting into a 9.0.x release.",
        "createdAt": "2024-11-01T10:20:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58739#issuecomment-2451648083"
      },
      {
        "id": "IC_kwDOAQzde86SIos4",
        "parentId": null,
        "author": "stevendarby",
        "content": "Workaround for swashbuckle, which works with the limited cases I have, but might not be generally applicable for everyone:\n\n\u0060\u0060\u0060C#\npublic class KeyedServicesFilter : IOperationFilter\n{\n    public void Apply(OpenApiOperation operation, OperationFilterContext context)\n    {\n        if (context.ApiDescription.HttpMethod != HttpMethods.Get)\n        {\n            return;\n        }\n\n        var parameter = context.MethodInfo\n            .GetParameters()\n            .FirstOrDefault(p =\u003E p.CustomAttributes.Any(c =\u003E c.AttributeType.IsAssignableTo(typeof(FromKeyedServicesAttribute))));\n\n        if (parameter is not null)\n        {\n            operation.RequestBody = null;\n\n            if (context.SchemaRepository.TryLookupByType(parameter.ParameterType, out var schema))\n            {\n                context.SchemaRepository.Schemas.Remove(schema.Reference.Id);\n            }\n        }\n    }\n}\n\u0060\u0060\u0060",
        "createdAt": "2024-11-01T11:38:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58739#issuecomment-2451737400"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86c9Hw4",
    "title": "Microsoft.Extensions.ApiDescription.Server - improve file name consistency with versioning",
    "url": "https://github.com/dotnet/aspnetcore/issues/58782",
    "createdAt": "2024-11-04T16:26:41Z",
    "lastUpdated": "2024-11-12T16:15:21Z",
    "body": "Currently if you have a versioned Web API project, and one version matches the name \u0027v1\u0027, it\u0027ll not emit the version number as part of the file name, anything else and it will get emitted, e.g. V1, v2, 1.0.\n\nWould it not be better to omit the version number if only one file is to be generated, otherwise always append it? This would mean file names are consistent, e.g. my-project_v1.json, my-project_v2.json, rather than now, where it\u0027ll be my-project.json, my-project_v2.json\n\nAlternatively, maybe pass in a flag to add in that behaviour and leave as-is for the default so as to be non-breaking?",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86ShDHw",
        "parentId": null,
        "author": "captainsafia",
        "content": "@furyd Thanks for filing this issue!\n\nI\u0027ll loop this into our larger meta issue around improving build-time OpenAPI document generation and we\u0027ll try to address it then.\n\nFor now, I\u0027m anticipating that in the future we\u0027ll make it easier to configure the name that is used to generate the filename of the document that is emitted to disk. The current behavior relies too much on the convention that \u0060v1\u0060 is the default document name and this results in unfortunate issues like this.",
        "createdAt": "2024-11-05T20:57:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58782#issuecomment-2458137072"
      },
      {
        "id": "IC_kwDOAQzde86TR9ko",
        "parentId": null,
        "author": "furyd",
        "content": "No worries @captainsafia , thank you for working on this.\n\nIf you\u0027re open to suggestions on the configuration, I think mirroring string interpolation would be nice, so that properties from the Open Api Document Info property can be referenced, and maybe the timestamp of document creation.\n\nExamples:\n\n\u0060\u003COpenApiGenerateDocumentsOptions\u003E--file-name {Title}_{Version}\u003C/OpenApiGenerateDocumentsOptions\u003E\u0060\n\n\u0060\u003COpenApiGenerateDocumentsOptions\u003E--file-name my-api_{timestamp:YYYY-mm-dd}\u003C/OpenApiGenerateDocumentsOptions\u003E\u0060\n\n\u0060\u003COpenApiGenerateDocumentsOptions\u003E--file-name {Title}_{timestamp:YYYY-mm-dd}\u003C/OpenApiGenerateDocumentsOptions\u003E\u0060\n\nI would expect that to cover most use cases",
        "createdAt": "2024-11-12T16:15:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58782#issuecomment-2470959400"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86dJk2e",
    "title": "Add examples to xmldoc for AddOpenAPI extension methods/overloads",
    "url": "https://github.com/dotnet/aspnetcore/issues/58807",
    "createdAt": "2024-11-05T21:42:33Z",
    "lastUpdated": "2024-11-06T10:03:37Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nExtension methods can be confusing for new .NET developers. They are described as extending a particular class, but often there is some common usage that would be very helpful for developers to know. In the case of AddOpenApi, it is an extension method for IServiceCollection. \n\n### Describe the solution you\u0027d like\n\nMost commonly it is used to add OpenAPI services to the service collection of a WebApplicationBuilder. Including an example of this in the docs would be very helpful to new .NET developers.\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86dM7hH",
    "title": "OpenAPI polymorphic response without base class",
    "url": "https://github.com/dotnet/aspnetcore/issues/58810",
    "createdAt": "2024-11-06T08:44:54Z",
    "lastUpdated": "2024-11-06T08:47:54Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI\u0027m trying to create an endpoint that has a polymorphic response using the \u0060Results\u003COk\u003CResponse1\u003E, Ok\u003CResponse2\u003E\u003E\u0060 pattern, so like a DU.\n\nIt is possible today using the \u0060JsonDerivedType\u0060 attribute and a base class and then set the response as the base class. But I would like to not have to do that.\n\n### Describe the solution you\u0027d like\n\nI would like to be able to this:\n\u0060\u0060\u0060c#\nusing Microsoft.AspNetCore.Http.HttpResults;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\n// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi\nbuilder.Services.AddOpenApi();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.MapOpenApi();\n}\n\nvar summaries = new[]\n{\n    \u0022Freezing\u0022, \u0022Bracing\u0022, \u0022Chilly\u0022, \u0022Cool\u0022, \u0022Mild\u0022, \u0022Warm\u0022, \u0022Balmy\u0022, \u0022Hot\u0022, \u0022Sweltering\u0022, \u0022Scorching\u0022\n};\n\n// Define the method for the delegate\nResults\u003COk\u003CWeatherForecast\u003E, Ok\u003CWeatherForecast[]\u003E\u003E GetWeatherForecast(bool returnSingle)\n{\n    if (returnSingle)\n    {\n        var singleForecast = new WeatherForecast\n        (\n            DateOnly.FromDateTime(DateTime.Now),\n            Random.Shared.Next(-20, 55),\n            summaries[Random.Shared.Next(summaries.Length)]\n        );\n        return TypedResults.Ok(singleForecast);\n    }\n    else\n    {\n        var forecast = Enumerable.Range(1, 5).Select(index =\u003E\n            new WeatherForecast\n            (\n                DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n                Random.Shared.Next(-20, 55),\n                summaries[Random.Shared.Next(summaries.Length)]\n            ))\n            .ToArray();\n        return TypedResults.Ok(forecast);\n    }\n}\n\napp.MapGet(\u0022/weatherforecast\u0022, GetWeatherForecast)\n   .WithName(\u0022GetWeatherForecast\u0022);\n\napp.Run();\n\ninternal record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)\n{\n    public int TemperatureF =\u003E 32 \u002B (int)(TemperatureC / 0.5556);\n}\n\u0060\u0060\u0060\n\nThis works as intended regarding the data returned and I get type safety for the return types.\n\nBut the generated OpenApi documentation is only saying that the \u0060WeatherForecast[]\u0060 is the response, the last one overwrites the first one.\n\nWhen looking at the OAS3.0 spec it is possible to define polymorphic response like this:\n\u0060\u0060\u0060json\n        \u0022responses\u0022: {\n          \u0022200\u0022: {\n            \u0022description\u0022: \u0022Success\u0022,\n            \u0022content\u0022: {\n              \u0022application/json\u0022: {\n                \u0022schema\u0022: {\n                  \u0022oneOf\u0022: [\n                    { \u0022$ref\u0022: \u0022#/components/schemas/SubAreaContractProfileData\u0022 },\n                    { \u0022$ref\u0022: \u0022#/components/schemas/DirectProcurementContractProfileData\u0022}\n                  ]\n                }\n              }\n            }\n          },\n\u0060\u0060\u0060\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86d-2WF",
    "title": "OpenApi ignores JsonNumberHandling.WriteAsString",
    "url": "https://github.com/dotnet/aspnetcore/issues/58882",
    "createdAt": "2024-11-11T22:00:29Z",
    "lastUpdated": "2024-12-19T00:04:28Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen a property has the attribute \u0060JsonNumberHandling(JsonNumberHandling.AllowReadingFromString|JsonNumberHandling.WriteAsString)\u0060, OpenApi still describes the property with the native type and not a string\n\n\n\n### Expected Behavior\n\nWhen using \u0060JsonNumberHandling.WriteAsString\u0060 I expect the OpenApi specification to report the propery as \u0060string\u0060\n\u0060\u0060\u0060json\n\u0022prop\u0022: {\n    \u0022type\u0022: \u0022string\u0022,\n }\n\u0060\u0060\u0060\n\n### Steps To Reproduce\n\n1. Create a new default asp.net webapi for dotnet 9.\n2. Run the project and navigate to \u0060/openapi/v1.json\u0060\n3. The \u0060temperatureC\u0060 property is listed as integer:\n\u0060\u0060\u0060json\n\u0022temperatureC\u0022: {\n    \u0022type\u0022: \u0022integer\u0022,\n     \u0022format\u0022: \u0022int32\u0022\n},  \n\u0060\u0060\u0060\n4. In weatherforcast.cs add an attribute to the \u0060temperatureC\u0060 property\n\u0060\u0060\u0060cs\n[JsonNumberHandling(JsonNumberHandling.AllowReadingFromString|JsonNumberHandling.WriteAsString)]\npublic int TemperatureC { get; set; }\n\u0060\u0060\u0060\n5. Run the project and navigate to \u0060/weatherforecast\u0060 and see \u0060temperatureC\u0060 is a string.\n\u0060\u0060\u0060json\n[{\u0022date\u0022:\u00222024-11-12\u0022,\u0022temperatureC\u0022:\u002211\u0022,\u0022temperatureF\u0022:51,\u0022summary\u0022:\u0022Balmy\u0022},{\u0022date\u0022:\u00222024-11-13\u0022,\u0022temperatureC\u0022:\u00223\u0022,\u0022temperatureF\u0022:37,\u0022summary\u0022:\u0022Warm\u0022}}\n\u0060\u0060\u0060\n6. Navigate to \u0060/openapi/v1.json\u0060\n7. The \u0060temperatureC\u0060 property is still listed as an integer:\n\u0060\u0060\u0060json\n\u0022temperatureC\u0022: {\n    \u0022type\u0022: \u0022integer\u0022,\n    \u0022format\u0022: \u0022int32\u0022\n},  \n\u0060\u0060\u0060\n\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100-rc.1.24452.12\n\n### Anything else?\n\nA workaround is to add a SchemaTransformer like\n\u0060\u0060\u0060cs\ninternal sealed class JsonNumberHandlerSchemaTransformer : IOpenApiSchemaTransformer\n{\n    public Task TransformAsync(OpenApiSchema schema, OpenApiSchemaTransformerContext context, CancellationToken cancellationToken)\n    {\n        var properties = context.JsonTypeInfo.Type.GetProperties(BindingFlags.Public | BindingFlags.Instance)\n                                .Where(prop =\u003E prop.GetCustomAttribute\u003CJsonNumberHandlingAttribute\u003E()?.Handling.HasFlag(JsonNumberHandling.WriteAsString) ?? false)\n                                .Select(prop =\u003E prop.GetCustomAttribute\u003CJsonPropertyNameAttribute\u003E()?.Name ?? \n                                                context.JsonTypeInfo.Options.PropertyNamingPolicy?.ConvertName(prop.Name) ??\n                                                prop.Name)\n                                .Where(schema.Properties.ContainsKey);\n\n        foreach (var property in properties)\n        {\n            schema.Properties[property].Type = \u0022string\u0022;\n        }\n\n        return Task.CompletedTask;\n    }\n}\n\u0060\u0060\u0060\n\nbut this is using reflection and probably missing some other details.",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86X_3aQ",
        "parentId": null,
        "author": "captainsafia",
        "content": "@adrianm64 Thanks for filing this issue and sharing the workaround that you had success with!\n\n@mikekistler This is one of those scenarios where our explicit type mappings for primitives gets us into trouble. Should we exempt integer types from this? We might be able to do so in .NET 10 with the JSON schema generated directly from STJ.",
        "createdAt": "2024-12-18T01:45:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58882#issuecomment-2550101648"
      },
      {
        "id": "IC_kwDOAQzde86YHNhN",
        "parentId": null,
        "author": "mikekistler",
        "content": "I\u0027m observing the following behavior:\n\n| Property has JsonNumberHandling | produces a schema with \u0060type\u0060 |\n| ----------------------------------- | ------------------------------ |\n| AllowReadingFromString                   |  [ \u0022string\u0022, \u0022integer\u0022 ]      |\n| AllowReadingFromString\\|WriteAsString |  [ \u0022string\u0022, \u0022integer\u0022 ]      |\n| Strict                                                   | \u0022integer\u0022     |\n\nNote that \u0022AllowReadingFromString\u0022 is the default for Web applications.\n\n@captainsafia I don\u0027t think exempting integer is the solution, because the same behavior occurs for double and likely any other \u0022number\u0022 type.\n\nI\u0027m not really sure what the solution is here, since OpenAPI v3.0.x does not permit \u0060type\u0060 to be an array. Perhaps the only \u0022correct\u0022 thing to do is to omit \u0022type\u0022 whenever the type from STJ is an array with more than one element (still handling \u0022null\u0022 specially). But that might be more painful than the current behavior.\n\n",
        "createdAt": "2024-12-18T18:41:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58882#issuecomment-2552027213"
      },
      {
        "id": "IC_kwDOAQzde86YJAoh",
        "parentId": null,
        "author": "captainsafia",
        "content": "Thanks for verifying the current behavior!\n\n\u003E @captainsafia I don\u0027t think exempting integer is the solution, because the same behavior occurs for double and likely any other \u0022number\u0022 type.\n\nCorrect -- if we went down this route, we\u0027d have to avoid our primitive-type based lookup for everything.\n\n\u003E I\u0027m not really sure what the solution is here, since OpenAPI v3.0.x does not permit type to be an array. Perhaps the only \u0022correct\u0022 thing to do is to omit \u0022type\u0022 whenever the type from STJ is an array with more than one element (still handling \u0022null\u0022 specially). But that might be more painful than the current behavior.\n\nPerhaps this is something we can bundle around the 3.1 support issue (https://github.com/dotnet/aspnetcore/issues/58619)? We should be able to use array types there and generate a more accurate schema.",
        "createdAt": "2024-12-19T00:03:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58882#issuecomment-2552498721"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86eZgR9",
    "title": "MapStaticAssets and Minimal APIs not working as expected",
    "url": "https://github.com/dotnet/aspnetcore/issues/58937",
    "createdAt": "2024-11-14T03:51:51Z",
    "lastUpdated": "2024-11-14T09:50:27Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nI am having issues using \u0060.MapStaticAssets()\u0060 with minimal apis that return \u0060RazorComponentResult\u003CT\u003E\u0060. The static assets are being returned as they did with \u0060.UseStaticFiles()\u0060, but all of the great features that are supposed to come with MapStaticAssets don\u0027t appear to be working as I expect.\n\n\n### Expected Behavior\n\nI expect the cache busting and compression features to work. It appears that the ETag feature is working.\n\n### Steps To Reproduce\n\n[Here is a link](https://github.com/benjaminsampica/htmxminimalapi) to the GitHub repository where it has been reproduced.\n\nPlease just pull the app and run it and observe the networking tab.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100\n\n### Anything else?\n\n![Image](https://github.com/user-attachments/assets/80c7d0d6-4c8f-4e00-b34a-b202b6276599)\n",
    "upvotes": 6,
    "labels": [
      "feature-static-web-assets",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86ebbVB",
    "title": "MapStaticFiles suppress UseStaticFile",
    "url": "https://github.com/dotnet/aspnetcore/issues/58942",
    "createdAt": "2024-11-14T08:18:24Z",
    "lastUpdated": "2024-11-14T09:50:59Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\n\u0060\u0060\u0060\napp.UseStaticFiles(new StaticFileOptions()\n{\n    OnPrepareResponse = ctx =\u003E\n    {\n        if (ctx.Context.Request.Path.Value.Contains(\u0022/ui/\u0022))//Do not use StartWithSegments here!\n        {\n            if (!ctx.Context.User.Identity.IsAuthenticated)\n            {\n                ctx.Context.Abort();\n                ctx.Context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;\n                return;\n            }\n        }\n    },\n})\napp.MapStaticAssets();\n\u0060\u0060\u0060\n\nWhen using MapStaticAssets after UseStaticFiles, the code inside UseStaticFiles (OnPrepareResponse) is not get called\n\n### Expected Behavior\n\nThe goal is to use both features\nFor certain static files, use logic in UseStaticFiles, otherwise use MapStaticAssets\n\n### Steps To Reproduce\n\nPut breakpoint inside OnPrepareResponse, it won\u0027t be hit if there is app.MapStaticAssets \n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.0\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-static-web-assets",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86ecdYy",
    "title": ".NET 9 OpenApi: JSON schema generation is not supported for contracts using ReferenceHandler.Preserve",
    "url": "https://github.com/dotnet/aspnetcore/issues/58943",
    "createdAt": "2024-11-14T09:54:11Z",
    "lastUpdated": "2024-11-19T20:54:37Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nUpgrading a .NET 8 Minimal API to .NET 9 and switching from Swashbuckle.AspNetCore to built-in Open API support, we get the following exception:\n\n\u0060System.NotSupportedException: JSON schema generation is not supported for contracts using ReferenceHandler.Preserve.\u0060\n\nIndeed, we have references preserved in our JSON options:\n\n\u0060\u0060\u0060cs\npublic static void AddJsonOptions(this WebApplicationBuilder builder)\n    {\n        builder.Services.Configure\u003CJsonOptions\u003E(options =\u003E\n        {\n            options.SerializerOptions.ReferenceHandler = ReferenceHandler.Preserve;\n            options.SerializerOptions.PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower;\n            options.SerializerOptions.Converters.Add(new JsonStringEnumConverter());\n        });\n    }\n\u0060\u0060\u0060\n\nBy commenting out the \u0060ReferenceHandler.Preserve\u0060, the open api document is created as expected.\n\n### Expected Behavior\n\nSupport for contracts using ReferenceHandler.Preserve.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86UN8dw",
        "parentId": null,
        "author": "captainsafia",
        "content": "@nicolaiarocci Thanks for filing this issue!\n\n@eiriktsarpalis Is there a particular reason we opted not to generate schemas when \u0060ReferenceHandler.Preserve = true\u0060?\n\nIt seems like the schemas that Swashbuckle creates ignore the ReferenceHandler setting altogether:\n\n\u0060\u0060\u0060\n\u0022Person\u0022: {\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022name\u0022: {\n            \u0022type\u0022: \u0022string\u0022,\n            \u0022nullable\u0022: true\n          },\n          \u0022child\u0022: {\n            \u0022$ref\u0022: \u0022#/components/schemas/Person\u0022\n          },\n          \u0022parent\u0022: {\n            \u0022$ref\u0022: \u0022#/components/schemas/Person\u0022\n          }\n        },\n        \u0022additionalProperties\u0022: false\n      },\n\u0060\u0060\u0060\n\nfor:\n\n\u0060\u0060\u0060\nclass Person\n{\n    public string? Name { get; set; }\n    public Person? Child { get; set; }\n    public Person? Parent { get; set; }\n}\n\u0060\u0060\u0060",
        "createdAt": "2024-11-19T20:27:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58943#issuecomment-2486683504"
      },
      {
        "id": "IC_kwDOAQzde86UOFO5",
        "parentId": null,
        "author": "eiriktsarpalis",
        "content": "Reference preservation alters the schema for most types, notably with collections that end up wrapping their values in JSON objects. Support for it was cut in .NET 9 for lack of time, but it\u0027s conceivable that it could be added in the future provided there is demand.",
        "createdAt": "2024-11-19T20:46:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58943#issuecomment-2486719417"
      },
      {
        "id": "IC_kwDOAQzde86UOIjG",
        "parentId": null,
        "author": "eiriktsarpalis",
        "content": "I should add that enabling reference preservation in your app carries important security ramifications. It should only be used with trusted inputs produced by System.Text.Json. In my opinion, it is not appropriate to use reference preservation in the context of web apps or Open API.",
        "createdAt": "2024-11-19T20:54:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58943#issuecomment-2486732998"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86efgG1",
    "title": "In AoT/trimmed Web APIs, [AsParameters] cannot be used on a class with a constructor that contains nullable reference type parameters",
    "url": "https://github.com/dotnet/aspnetcore/issues/58953",
    "createdAt": "2024-11-14T14:45:27Z",
    "lastUpdated": "2024-11-14T15:05:39Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWith .NET 9 we can no longer build a \u0022dotnet new webapiaot\u0022 project when the endpoints have \u0060[AsParameters]\u0060 attribute applied to a class with constructor parameters of a nullable reference type. The build fails with \u0022CS8639 The typeof operator cannot be used on a nullable reference type\u0022. This worked fine on .NET 8.\n\nThe example below shows several usages of app.MapGet() with query parameters. The comments describe the results.\n\n\u0060\u0060\u0060csharp\nusing System.Text.Json.Serialization;\n\nvar builder = WebApplication.CreateSlimBuilder(args);\n\nbuilder.Services.ConfigureHttpJsonOptions(options =\u003E\n    options.SerializerOptions.TypeInfoResolverChain.Insert(0, AppJsonSerializerContext.Default));\n\nvar app = builder.Build();\n\n// Builds and works fine.\napp.MapGet(\u0022/test1\u0022, (string str) =\u003E str);\n\n// Builds fine. Works fine if you call it with ?str=something, throws ArgumentNullException otherwise\n// because in the GeneratedRouteBuilderExtensions.g.cs the return type for this endpoint is a non-nullable string\napp.MapGet(\u0022/test2\u0022, (string? str = null) =\u003E str);\n\n// Builds and works fine.\napp.MapGet(\u0022/test3\u0022, ([AsParameters] ParametersThree parameters) =\u003E parameters.Str);\n\n// Build fails with CS8639 The typeof operator cannot be used on a nullable reference type.\n// On .NET 8 this builds fine and works like \u0022/test2\u0022.\napp.MapGet(\u0022/test4\u0022, ([AsParameters] ParametersFour parameters) =\u003E parameters.Str);\n\napp.Run();\n\npublic sealed record ParametersThree(string Str);\npublic sealed record ParametersFour(string? Str = null);\n\n[JsonSerializable(typeof(ParametersThree))]\n[JsonSerializable(typeof(ParametersFour))]\ninternal partial class AppJsonSerializerContext : JsonSerializerContext\n{\n}\n\u0060\u0060\u0060\n\nAnd here\u0027s the generated code for \u0022/test4\u0022.\n\u0060\u0060\u0060csharp\nMetadataPopulator populateMetadata = (methodInfo, options) =\u003E\n{\n    Debug.Assert(options != null, \u0022RequestDelegateFactoryOptions not found.\u0022);\n    Debug.Assert(options.EndpointBuilder != null, \u0022EndpointBuilder not found.\u0022);\n    options.EndpointBuilder.Metadata.Add(new System.CodeDom.Compiler.GeneratedCodeAttribute(\u0022Microsoft.AspNetCore.Http.RequestDelegateGenerator, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\u0022, \u00229.0.0.0\u0022));\n    options.EndpointBuilder.Metadata.Add(new ParameterBindingMetadata(\u0022Str\u0022, new PropertyAsParameterInfo(true, typeof(ParametersFour)!.GetProperty(\u0022Str\u0022)!, typeof(ParametersFour).GetConstructor(new[] { typeof(string?) })?.GetParameters()[0]), hasTryParse: false, hasBindAsync: false, isOptional: true));\n    options.EndpointBuilder.Metadata.Add(new ProducesResponseTypeMetadata(statusCode: StatusCodes.Status200OK, type: typeof(string), contentTypes: GeneratedMetadataConstants.PlaintextContentType));\n    return new RequestDelegateMetadataResult { EndpointMetadata = options.EndpointBuilder.Metadata.AsReadOnly() };\n};\n\u0060\u0060\u0060\n\n### Expected Behavior\n\nThe code compiles without throwing CS8639 and works the same as \u0022/test2\u0022, like it was on .NET 8.\nIdeally, the generator also respects the return type for both \u0022/test2\u0022 and \u0022/test4\u0022, which is a nullable \u0060string?\u0060.\n\n### Steps To Reproduce\n\nRun .NET 9\u0027s \u0060dotnet new webapiaot\u0060, replace the code in Program.cs with the above example and start a build.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "NativeAOT",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86fLADK",
    "title": "description is missing when using with FromForm",
    "url": "https://github.com/dotnet/aspnetcore/issues/59042",
    "createdAt": "2024-11-19T01:38:47Z",
    "lastUpdated": "2024-12-30T15:09:06Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\ndescription on the fromform is missing\n\n### Expected Behavior\n\nthe openapi field description with the value from Description\n\n### Steps To Reproduce\n\nadd Description to FromForm field\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100\n\n### Anything else?\n\nthe repo is https://github.com/cjdxhjj/openapi-demo.git\n![Image](https://github.com/user-attachments/assets/9674aa45-d39b-4f8f-bf20-d4ae5eab4f3f)\n![Image](https://github.com/user-attachments/assets/3edd9686-0843-417b-8129-c274da64c459)\n",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86UHCQv",
        "parentId": null,
        "author": "martincostello",
        "content": "Could you please add the relevant information to the issue description? Otherwise it\u0027s spread across multiple comments in a different issue.",
        "createdAt": "2024-11-19T07:17:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59042#issuecomment-2484872239"
      },
      {
        "id": "IC_kwDOAQzde86Y6_kd",
        "parentId": null,
        "author": "mikekistler",
        "content": "@cjdxhjj Thanks for filing this issue!\n\nI was able to reproduce this problem in a simple minimal API.\n\nI have flagged this as a bug and added it to our backlog.",
        "createdAt": "2024-12-30T15:09:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59042#issuecomment-2565601565"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86fPbGc",
    "title": "When endpoint return ValidationProblem and has errors the property errors doesn\u0027t have values.",
    "url": "https://github.com/dotnet/aspnetcore/issues/59052",
    "createdAt": "2024-11-19T10:24:24Z",
    "lastUpdated": "2025-01-08T11:34:50Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen endpoint return ValidationProblem and has errors the property errors doesn\u0027t have values in .Net 8 the same code works ok. I believe return **TypedResults.Problem** instead of **TypedResults.ValidationProblem**. My code return **TypedResults.ValidationProblem**. I have checked it and my code is correct.\n\n**Net 8**\n![Image](https://github.com/user-attachments/assets/77e2044d-3022-4301-8969-26801bc0d03a)\n\n**Net 9**\n![Image](https://github.com/user-attachments/assets/3b8cb40c-fe4c-41b2-81fb-4df68607aeef)\n\n**My code works in Net 8**\n![Image](https://github.com/user-attachments/assets/7151f2a5-d7ed-47fb-82d1-3d3344ee9b80)\n\n\n### Expected Behavior\n\nThe code return this because my code return **TypedResults.ValidationProblems**. Net8 the same code works ok.\n\n![Image](https://github.com/user-attachments/assets/b9ac3607-efe2-4730-a60a-66863da7006e)\n\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\nNet 9\n\n### Anything else?\n\n_No response_",
    "upvotes": 2,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86YBkpT",
        "parentId": null,
        "author": "jvsancho80",
        "content": "When will resolve this issue @martincostello ? I think is an important because is not possible use ValidationProblemDetails.\n\nThanks",
        "createdAt": "2024-12-18T07:24:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59052#issuecomment-2550549075"
      },
      {
        "id": "IC_kwDOAQzde86Za-5m",
        "parentId": null,
        "author": "sguryev",
        "content": "I have found the source of the issue.\nIn the NET8 we didn\u0027t have \u0060IProblemDetailsService\u0060 usage in the \u0060ValidationProblem.ExecuteAsync()\u0060 method. So it was writing \u0060HttpValidationProblemDetails\u0060 object to the JSON.\n![Image](https://github.com/user-attachments/assets/8c943e36-0162-4ed0-a13d-6d729a49a957)\n\nIn the NET9 we have a new approach with \u0060IProblemDetailsService\u0060 https://github.com/dotnet/aspnetcore/blob/67ae6c8b73e80fa5f499a069443c9844ca86c62a/src/Http/Http.Results/src/ValidationProblem.cs#L63\n\nThe \u0060AddProblemDetails()\u0060 extension method adds \u0060DefaultProblemDetailsWriter\u0060 in addition to the \u0060DefaultApiProblemDetailsWriter\u0060 which is added by \u0060AddMvcCoreServices()\u0060\n\nIn case the wrong order \u0060DefaultApiProblemDetailsWriter\u0060 will be called first by \u0060ProblemDetailsService\u0060 it will handle the problem, create basic \u0060ProblemDetails\u0060 and forget about \u0060Errors\u0060 property from the derived \u0060HttpValidationProblemDetails\u0060 or \u0060ValidationProblemDetails\u0060\n![Image](https://github.com/user-attachments/assets/2cc43b5d-c179-4f97-b148-9c7d72bc557f)\nAs the result: \u0060Errors\u0060 property is missing.\n\nBut placing \u0060AddProblemDetails()\u0060 before \u0060AddControllers()\u0060, \u0060AddMvc()\u0060, etc will place the \u0060DefaultProblemDetailsWriter\u0060 before \u0060DefaultApiProblemDetailsWriter\u0060 and it will be used by \u0060ProblemDetailsService\u0060. \u0060DefaultProblemDetailsWriter\u0060 preserves the original problem details object from the \u0060ProblemDetailsContext\u0060 instead of creating a new one.  \n![Image](https://github.com/user-attachments/assets/1fb5bcaa-ee2f-4a32-8aed-8563120dc991)\n\nI have found one mention about the order here: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-9.0#custom-iproblemdetailswriter\nBut it\u0027s related to the custom \u0060IProblemDetailsWriter\u0060 not the \u0060AddProblemDetails()\u0060 call in general.\n![Image](https://github.com/user-attachments/assets/d86b652c-0b48-4763-8f5e-29531acde166)\n\nI\u0027m not sure if current \u0060DefaultApiProblemDetailsWriter\u0060 behavior is correct.\nSame guide has a sample with incorrect order of calls which makes me think that \u0060DefaultApiProblemDetailsWriter\u0060 has to be fixed.\n![Image](https://github.com/user-attachments/assets/c82a2458-9e39-416a-8cda-48fb0b27a4d4)\n",
        "createdAt": "2025-01-06T21:49:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59052#issuecomment-2573987430"
      },
      {
        "id": "IC_kwDOAQzde86ZoNZG",
        "parentId": null,
        "author": "jvsancho80",
        "content": "Now it works. Thanks",
        "createdAt": "2025-01-08T11:34:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59052#issuecomment-2577454662"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86gogCp",
    "title": "OpenApi generates the same schema for generic types with a JsonConverterFactory.",
    "url": "https://github.com/dotnet/aspnetcore/issues/59172",
    "createdAt": "2024-11-26T14:51:26Z",
    "lastUpdated": "2025-01-15T10:10:45Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen generating openapi containing Generic types, with a JsonConverterFactory, the same schema is generated for different types.\n\nGiven the following minimal example:\n\u0060\u0060\u0060c#\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOpenApi();\n\nvar app = builder.Build();\n\napp.UseHttpsRedirection();\napp.MapOpenApi();\n\napp.MapGet(\u0022/\u0022, () =\u003E new ExampleModel());\n\napp.Run();\n\npublic class GenericConverterFactory : JsonConverterFactory\n{\n    public override bool CanConvert(Type typeToConvert) =\u003E typeToConvert.GetGenericTypeDefinition() == typeof(GenericValue\u003C\u003E);\n\n    public override JsonConverter? CreateConverter(Type typeToConvert, JsonSerializerOptions options) =\u003E (JsonConverter?)Activator.CreateInstance(typeof(GenericConverter\u003C\u003E).MakeGenericType(typeToConvert.GetGenericArguments()[0]));\n}\n\npublic class GenericConverter\u003CT\u003E : JsonConverter\u003CGenericValue\u003CT\u003E\u003E\n{\n    public override GenericValue\u003CT\u003E Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) =\u003E throw new NotImplementedException();\n\n    public override void Write(Utf8JsonWriter writer, GenericValue\u003CT\u003E value, JsonSerializerOptions options) =\u003E throw new NotImplementedException();\n}\n\n[JsonConverter(typeof(GenericConverterFactory))]\npublic readonly struct GenericValue\u003CTId\u003E\n{\n    public TId Id { get; init; }\n}\n\npublic class ExampleModel\n{\n    public GenericValue\u003CGuid\u003E GuidValue { get; set; }\n    public GenericValue\u003Cstring\u003E StringValue { get; set; }\n}\n\u0060\u0060\u0060\n\nI am getting the following openapi:\n\u0060\u0060\u0060json\n{\n  \u0022openapi\u0022: \u00223.0.1\u0022,\n  \u0022info\u0022: {\n    \u0022title\u0022: \u0022MinimalApi | v1\u0022,\n    \u0022version\u0022: \u00221.0.0\u0022\n  },\n  \u0022paths\u0022: {\n    \u0022/\u0022: {\n      \u0022get\u0022: {\n        \u0022tags\u0022: [\n          \u0022MinimalApi\u0022\n        ],\n        \u0022responses\u0022: {\n          \u0022200\u0022: {\n            \u0022description\u0022: \u0022OK\u0022,\n            \u0022content\u0022: {\n              \u0022application/json\u0022: {\n                \u0022schema\u0022: {\n                  \u0022$ref\u0022: \u0022#/components/schemas/ExampleModel\u0022\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \u0022components\u0022: {\n    \u0022schemas\u0022: {\n      \u0022ExampleModel\u0022: {\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022guidValue\u0022: {\n            \u0022$ref\u0022: \u0022#/components/schemas/GenericValueOfstring\u0022\n          },\n          \u0022stringValue\u0022: {\n            \u0022$ref\u0022: \u0022#/components/schemas/GenericValueOfstring\u0022\n          }\n        }\n      },\n      \u0022GenericValueOfstring\u0022: { }\n    }\n  },\n  \u0022tags\u0022: [\n    {\n      \u0022name\u0022: \u0022MinimalApi\u0022\n    }\n  ]\n}\n\u0060\u0060\u0060\n\nThere is only one schema generated for the GenericValue, namely \u0060GenericValueOfstring\u0060 (which is the last defined type). I was expecting \u0060GenericValueOfstring\u0060 and \u0060GenericValueOfGuid\u0060.\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86VXZRs",
        "parentId": null,
        "author": "desjoerd",
        "content": "After some more investigation, I think this is caused by https://github.com/dotnet/runtime/issues/110241",
        "createdAt": "2024-11-28T11:51:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59172#issuecomment-2505938028"
      },
      {
        "id": "IC_kwDOAQzde86VXcsl",
        "parentId": null,
        "author": "desjoerd",
        "content": "After even more investigation, the cause of this is probably fixed in https://github.com/dotnet/runtime/issues/109868. I am fine if someone wants to close this, otherwise I will wait for the next servicing release to test this.",
        "createdAt": "2024-11-28T11:59:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59172#issuecomment-2505952037"
      },
      {
        "id": "IC_kwDOAQzde86X_11p",
        "parentId": null,
        "author": "captainsafia",
        "content": "@desjoerd Thanks for filing this issue and taking the time to investigate it yourself.\n\nI\u0027ll keep this open so that we can follow up once the next servicing release comes out.\n\nThe reference PR _does_ seem to solve the issue but it would be good to verify that there isn\u0027t a confounding issue in Microsoft.AspNetCore.OpenApi that is also causing the problem.\n\nIn the meantime, sticking this in the backlog until we verify.",
        "createdAt": "2024-12-18T01:40:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59172#issuecomment-2550095209"
      },
      {
        "id": "IC_kwDOAQzde86aghPM",
        "parentId": null,
        "author": "desjoerd",
        "content": "@captainsafia I just checked with .NET Runtime 9.0.1 and I now get the correct output, a \u0060GenericValueOfGuid\u0060 AND \u0060GenericValueOfstring\u0060. So in my opinion this issue can be closed \uD83D\uDC4D \n\n\u0060\u0060\u0060json\n{\n  \u0022openapi\u0022: \u00223.0.1\u0022,\n  \u0022info\u0022: {\n    \u0022title\u0022: \u0022MinimalApi | v1\u0022,\n    \u0022version\u0022: \u00221.0.0\u0022\n  },\n  \u0022paths\u0022: {\n    \u0022/\u0022: {\n      \u0022get\u0022: {\n        \u0022tags\u0022: [\n          \u0022MinimalApi\u0022\n        ],\n        \u0022responses\u0022: {\n          \u0022200\u0022: {\n            \u0022description\u0022: \u0022OK\u0022,\n            \u0022content\u0022: {\n              \u0022application/json\u0022: {\n                \u0022schema\u0022: {\n                  \u0022$ref\u0022: \u0022#/components/schemas/ExampleModel\u0022\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \u0022components\u0022: {\n    \u0022schemas\u0022: {\n      \u0022ExampleModel\u0022: {\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022guidValue\u0022: {\n            \u0022$ref\u0022: \u0022#/components/schemas/GenericValueOfGuid\u0022\n          },\n          \u0022stringValue\u0022: {\n            \u0022$ref\u0022: \u0022#/components/schemas/GenericValueOfstring\u0022\n          }\n        }\n      },\n      \u0022GenericValueOfGuid\u0022: { },\n      \u0022GenericValueOfstring\u0022: { }\n    }\n  },\n  \u0022tags\u0022: [\n    {\n      \u0022name\u0022: \u0022MinimalApi\u0022\n    }\n  ]\n}\n\u0060\u0060\u0060",
        "createdAt": "2025-01-15T10:10:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59172#issuecomment-2592216012"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86gsYHo",
    "title": "Support registering OpenApiOperationTransformer via extension method for Minimal APIs",
    "url": "https://github.com/dotnet/aspnetcore/issues/59180",
    "createdAt": "2024-11-26T20:29:46Z",
    "lastUpdated": "2025-01-23T23:42:26Z",
    "body": "## Background and Motivation\n\nI\u0027m opening this proposal after a conversation with @sander1095 in relation to https://github.com/dotnet/aspnetcore/issues/58723 and https://github.com/dotnet/aspnetcore/issues/58724.\n\nPrior to .NET 9, we supported a \u0060WithOpenApi\u0060 extension method on that when invoked would generate an \u0060OpenApiOperation\u0060, inject it into endpoint metadata, then rely on consuming OpenAPI implementations like Swashbuckle to pluck this \u0060OpenApiOperation\u0060 and integrate it into the document that was being generated.\n\nWhen we introduced built-in OpenAPI support in .NET 9, we opted not to bring in support for this strategy and instead steer people towards the new \u0060IOpenApiOperationTransformer\u0060 abstraction for making modifications to their OpenAPI document.\n\nHowever, one of the things that @sander1095 pointed out with this approach is that you lose the ability to have operation transformations colocated with the endpoint they affected. For example, let\u0027s say that I want to set the description for a response in a given endpoint. With the operation transformer model, I might have to write something like this:\n\n\u0060\u0060\u0060csharp\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOpenApi(options =\u003E\n{\n    options.AddOperationTransformer((operation, context, ct) =\u003E\n    {\n        if (context.Description.RelativePath == \u0022weatherforecast\u0022)\n        {\n            operation.Responses[\u0022200\u0022].Description = \u0022Weather forecast for today\u0022;\n        }\n        return Task.CompletedTask;\n    });\n});\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.MapOpenApi();\n}\n\napp.MapGet(\u0022/weatherforecast\u0022, () =\u003E\n    new WeatherForecast(DateOnly.FromDateTime(DateTime.Now), 25, \u0022Sunny\u0022));\n\napp.Run();\n\nrecord WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)\n{\n    public int TemperatureF =\u003E 32 \u002B (int)(TemperatureC / 0.5556);\n}\n\u0060\u0060\u0060\n\nIn addition to the transformer being far away from the associated endpoint, I also have to implement the associated path-based check myself.\n\n## Proposed API\n\nThis issue proposes introducing a \u0060WithOpenApiTransformer\u0060 extension method that can be used to register an operation transformer for a given endpoint without having to use the global registration feature.\n\n\u0060\u0060\u0060diff\n// Assembly: Microsoft.AspNetCore.OpenApi\nnamespace Microsoft.AspNetCore.Builder;\n\npublic static class OpenApiEndpointConventionBuilderExtensions\n{\n\u002B    public static TBuilder WithOpenApiTransformer\u003CTBuilder\u003E(this TBuilder builder, Func\u003COpenApiOperation, OpenApiOperationTransformerContext, CancellationToken, Task\u003E transformer) where TBuilder : IEndpointConventionBuilder { }\n}\n\u0060\u0060\u0060\n\n## Usage Examples\n\nWith this proposed API, the same example above could be re-implemented in the following way:\n\n\u0060\u0060\u0060csharp\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOpenApi();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.MapOpenApi();\n}\n\napp.MapGet(\u0022/weatherforecast\u0022, () =\u003E\n    new WeatherForecast(DateOnly.FromDateTime(DateTime.Now), 25, \u0022Sunny\u0022))\n    .WithOpenApiTransformer((operation, context, ct) =\u003E\n    {\n        operation.Responses[\u0022200\u0022].Description = \u0022Weather forecast for today\u0022;\n        return Task.CompletedTask;\n    });\n\napp.Run();\n\nrecord WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)\n{\n    public int TemperatureF =\u003E 32 \u002B (int)(TemperatureC / 0.5556);\n}\n\u0060\u0060\u0060\n\nThere\u0027s also the option for 3rd party authors to provide their own extensions on top of this API to support further customizations. For example, the support for setting descriptions on responses as proposed in https://github.com/dotnet/aspnetcore/issues/58724 can be implemented in the following way:\n\n\u0060\u0060\u0060csharp\nnamespace FooBar.OpenApiExtensions;\n\npublic static class ExtensionMethods\n{\n    public static RouteHandlerBuilder WithResponseDescription(this RouteHandlerBuilder builder, int statusCode, string description)\n    {\n        builder.WithOpenApiTransformer((operation, context, cancellationToken)\n        {\n            operation.Responses[statusCode.ToString()].Description = description;\n            return Task.CompletedTask;\n        });\n        return builder;\n    }\n}\n\u0060\u0060\u0060\n\nWith the consumption pattern in the invoked code being:\n\n\u0060\u0060\u0060csharp\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOpenApi();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.MapOpenApi();\n}\n\napp.MapGet(\u0022/weatherforecast\u0022, () =\u003E\n    new WeatherForecast(DateOnly.FromDateTime(DateTime.Now), 25, \u0022Sunny\u0022))\n    .WithResponseDescription(200, \u0022Weather forecast for today\u0022);\n\napp.Run();\n\nrecord WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)\n{\n    public int TemperatureF =\u003E 32 \u002B (int)(TemperatureC / 0.5556);\n}\n\u0060\u0060\u0060\n\n## Alternative Designs\n\n- We could instead update the implementation to support the pre-existing \u0060WithOpenApi\u0060 overloads. However, this would prevent users from being able to access the \u0060OpenApiOperationTransformerContext\u0060 to customize the behavior of the transformer.\n- The proposal only supports adding the transformer via the delegate pattern. We could consider supporting the other registration patterns as well although that might not be necessary.\n\n## Risks\n\n\u003C!--\nPlease mention any risks that to your knowledge the API proposal might entail, such as breaking changes, performance regressions, etc.\n--\u003E\n\n- This proposal does introduce additional complexity to the transformer registration APIs. Operation transformers become unique in the sense that they can be configured at the top-level via the options object and at the endpoint level. We\u0027ll also have to consider ordering semantics for when operation transformers are applied.\n- This proposal does introduce confusion between the \u0060WithOpenApi\u0060 and \u0060WithOpenApiTransformer\u0060 APIs. We can consider naming the new overload to \u0060WithOpenApi\u0060 to mitigate this...although that might be even more confusing.\n\n",
    "upvotes": 3,
    "labels": [
      "api-needs-work",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86VH1Qx",
        "parentId": null,
        "author": "dotnet-policy-service",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.\n\u003C!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003E",
        "createdAt": "2024-11-26T20:29:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59180#issuecomment-2501858353"
      },
      {
        "id": "IC_kwDOAQzde86bpE6m",
        "parentId": null,
        "author": "halter73",
        "content": "API review notes?\n\n- Can you do the same thing today with \u0060WithOpenApi\u0060?\n  - That only works with Swashbuckle today in practice. This will be supported by \u0060AddOpenApi\u0060.\n- Given that we cannot make \u0060WithOpenApi\u0060 to work with \u0060AddOpenApi\u0060 does the name \u0060WithOpenApiTransformer\u0060 create confusion?\n-  \u0060WithOpenApiTransformer\u0060 adds the context parameter that \u0060WithOpenApi\u0060 doesn\u0027t offer.\n- Do \u0060WithOpenApiTransformer\u0060 callbacks run before or after global transformers? After because it\u0027s the \u0022nearest\u0022 so it can override.\n\nWe\u0027d like to know if we can make the existing \u0060WithOpenApi\u0060 method interoperate with \u0060AddOpenApi\u0060 before agreeing to a new similar method.",
        "createdAt": "2025-01-23T23:42:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59180#issuecomment-2611236518"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86g7niH",
    "title": "Consider deprecating \u0060Microsoft.Extensions.ApiDescription.Client\u0060 package",
    "url": "https://github.com/dotnet/aspnetcore/issues/59208",
    "createdAt": "2024-11-27T22:03:30Z",
    "lastUpdated": "2024-11-27T22:03:30Z",
    "body": "The \u0060Microsoft.Extensions.ApiDescription.Client\u0060 package ships MSBuild logic that is designed to support OpenAPI-based code generators attached to ASP.NET Core applications.\n\nThe primary API exposed by this package is an \u0060OpenApiReference\u0060 item group that allows a user to define a reference to an OpenAPI document(s) that code generators can use:\n\n\u0060\u0060\u0060\n\u003CPropertyGroup\u003E\n  \u003COpenApiReference Include=\u0022mypath\\openapi.json\u0022 /\u003E\n\u003C/PropertyGroup\u003E\n\u0060\u0060\u0060\n\nThere\u0027s an also an \u0060\u003COpenApiProjectReference\u003E\u0060 property that can be used to define the configuration options for a code generator.\n\nThis package is optimized for consumption by NSwag. Efforts to add Kiota support to the package in the past by @baywet have not been successful (see https://github.com/dotnet/aspnetcore/pull/41928).\n\nIn conversations with @RicoSuter it seems like the preference on the NSwag side is for users to invoke the code generation pipelines in NSwag via pre-existing NSwag tooling instead of the MSBuild-based middle line.\n\nWith all this in mind, given that:\n\n- The package has received little in the way of updates over the past few years.\n- The abstractions provided by the package don\u0027t scale well to non-NSwag code generators.\n- Code generators provide their own CLIs and configuration options to drive code generation.\n\nWe should consider deprecating the package to reduce maintenance burden and provide a more straightforward story around integration ASP.NET Core with code generators in the future.",
    "upvotes": 3,
    "labels": [
      "area-mvc",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86iEbvS",
    "title": "Properties are not visible in open api spec when using BindAsync",
    "url": "https://github.com/dotnet/aspnetcore/issues/59323",
    "createdAt": "2024-12-05T00:46:27Z",
    "lastUpdated": "2024-12-05T08:01:35Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\n\u0060\u0060GetItemsQuery\u0060\u0060 properties are not visible in OpenApi spec when I have BindAsync method\n\n### Expected Behavior\n\nProperties should be in open api spec\n\n### Steps To Reproduce\n\n\u0060\u0060\u0060cs\npublic sealed record GetItemsQuery(\n    string? SearchTerms,\n    Category? Category,\n    IEnumerable\u003CItemState\u003E ItemStates\n) : PagedQuery\u003CItemDto\u003E\n{\n    public static ValueTask\u003CGetItemsQuery?\u003E BindAsync(\n        HttpContext ctx,\n        ParameterInfo param\n    )\n    {\n        const string searchTermsKey = \u0022searchTerms\u0022;\n        const string categoryKey = \u0022category\u0022;\n        const string itemStatesKey = \u0022itemStates\u0022;\n\n        var searchTerms = ctx.Request.Query[searchTermsKey]\n            .ToString()\n            .Trim();\n\n        Category.TryFromName(\n            ctx.Request.Query[categoryKey],\n            ignoreCase: true,\n            out var category\n        );\n\n        IEnumerable\u003CItemState\u003E itemStates = Enumerable.Empty\u003CItemState\u003E();\n        var itemStatesParam = ctx.Request.Query[itemStatesKey].ToString();\n        if (!string.IsNullOrEmpty(itemStatesParam))\n        {\n            itemStates = itemStatesParam\n                .Split(\u0027,\u0027)\n                .Select(state =\u003E Enum.TryParse(state, out ItemState itemState) ? itemState : (ItemState?)null)\n                .Where(state =\u003E state.HasValue)\n                .Select(state =\u003E state.Value)\n                .ToList();\n        }\n\n        return ValueTask.FromResult\u003CGetItemsQuery?\u003E(new(\n            searchTerms,\n            category,\n            itemStates\n        ));\n    }\n}\n\u0060\u0060\u0060\n\u0060\u0060\u0060cs\n group\n            .MapGet(\n                \u0022/\u0022,\n                async (\n                    ISender sender,\n                    CancellationToken ct,\n                    GetItemsQuery qry\n                ) =\u003E OperationResults.Ok(await sender.Send(\n                    qry,\n                    ct\n                ))\n            )\n            .WithName(\u0022GetListings\u0022)\n            .WithSummary(\u0022Items get operation\u0022)\n            .WithDescription(\u0022\u0022)\n            .ProducesOperationResult\u003CPaged\u003CItemDto\u003E\u003E()\n            .ProducesOperationResult(StatusCodes.Status400BadRequest);\n\u0060\u0060\u0060\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86ik_Jb",
    "title": "Problem Details camel case RFC 7807 \u0022compliant casing\u0022",
    "url": "https://github.com/dotnet/aspnetcore/issues/59396",
    "createdAt": "2024-12-09T16:19:50Z",
    "lastUpdated": "2024-12-18T15:24:21Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nHi,\n\nFollowing the discussion in [this issue](https://github.com/dotnet/aspnetcore/issues/53639), it seems that starting with .NET 9, **Problem Details** are now always serialized using camelCase, reportedly, due to [RFC 7807](https://datatracker.ietf.org/doc/html/rfc7807) compliance.\n\nHowever, after reviewing the RFC, I couldn\u2019t find any section that explicitly mandates the use of camelCase. Instead, the RFC states:\n\n\u003E A problem type definition MAY specify additional members on the problem details object. For example, an extension might use typed links (RFC 5988) to another resource that can be used by machines to resolve the problem.  \n\u003E  \n\u003E If such additional members are defined, their names SHOULD start with a letter (ALPHA, as per [RFC 5234, Appendix B.1](https://datatracker.ietf.org/doc/html/rfc5234#appendix-B.1)) and SHOULD consist of characters from ALPHA, DIGIT ([RFC 5234, Appendix B.1](https://datatracker.ietf.org/doc/html/rfc5234#appendix-B.1)), and \u0022_\u0022, and they SHOULD be three characters or longer.\n\nI\u2019ve also noticed that the \u0060traceId\u0060 field was recently introduced in the Problem Details object in .NET9, which now results, e.g., in the following JSON:\n\n\u0060\u0060\u0060json\n{\n  \u0022type\u0022: \u0022https://tools.ietf.org/html/rfc9110#section-15.5.5\u0022,\n  \u0022title\u0022: \u0022Not Found\u0022,\n  \u0022status\u0022: 404,\n  \u0022traceId\u0022: \u002200-fb5a4583138884ff98c3ba7caf310619-83734512fdab2295-00\u0022\n}\n\u0060\u0060\u0060\n\nIn my opinion, the response body should respect the \u0060SerializerOptions.PropertyNamingPolicy\u0060 (e.g., camelCase or snake_case), with the only exception being kebab-case, which is not compliant with the RFC due to its use of hyphens. \n\nFor example, when using \u0060SerializerOptions.PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower\u0060 , the response body should produce the following result:\n\n\u0060\u0060\u0060json\n{\n  \u0022type\u0022: \u0022https://tools.ietf.org/html/rfc9110#section-15.5.5\u0022,\n  \u0022title\u0022: \u0022Not Found\u0022,\n  \u0022status\u0022: 404,\n  \u0022trace_id\u0022: \u002200-fb5a4583138884ff98c3ba7caf310619-83734512fdab2295-00\u0022\n}\n\u0060\u0060\u0060\n\nCould you please clarify why this change is being enforced?\n\nThanks!\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "help wanted",
      "area-mvc",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86X-xBV",
        "parentId": null,
        "author": "captainsafia",
        "content": "@hmiguel Thanks for filing this issue!\n\nThe change that we merged into .NET 8 was specifically around using the prescribed casing for well-defined properties in the ProblemDetails object, like \u0060title\u0060 and \u0060instance\u0060 as defined in [this portion of the spec](https://datatracker.ietf.org/doc/html/rfc7807#section-3.1).\n\n\u0060traceId\u0060 is cased this way as a result of [this bit of code](https://github.com/dotnet/aspnetcore/blob/main/src/Http/Http.Extensions/src/DefaultProblemDetailsWriter.cs#L59) which should probably be fixed.\n\nFor all other extension keys, the implementation will use the serializer options configured in the \u0060JsonOptions\u0060.\n\nWould you be interested in opening a PR to resolve this issue? It should be something like this:\n\n\u0060\u0060\u0060diff\n- context.ProblemDetails.Extensions[\u0022traceId\u0022] = traceId;\n\u002B var tradeIdKeyName = _serializerOptions.PropertyNamingPolicy.ConvertName(\u0022traceId\u0022);\ncontext.ProblemDetails.Extensions[traceIdKeyName] = traceId;\n\u0060\u0060\u0060",
        "createdAt": "2024-12-17T22:48:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59396#issuecomment-2549813333"
      },
      {
        "id": "IC_kwDOAQzde86X-xHi",
        "parentId": null,
        "author": "dotnet-policy-service",
        "content": "Looks like this issue has been identified as a candidate for community contribution. If you\u0027re considering sending a PR for this issue, look for the \u0060Summary Comment\u0060 link in the issue description. That comment has been left by an engineer on our team to help you get started with handling this issue. You can learn more about our Help Wanted process [here](https://aka.ms/aspnet/processes/help-wanted)\n\u003C!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003E",
        "createdAt": "2024-12-17T22:48:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59396#issuecomment-2549813730"
      },
      {
        "id": "IC_kwDOAQzde86YFngK",
        "parentId": null,
        "author": "shethaadit",
        "content": "Hi @captainsafia, I will raise PR for this soon. :)",
        "createdAt": "2024-12-18T15:24:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59396#issuecomment-2551609354"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86imTVs",
    "title": "index.html default file not found when using UseDefaultFiles and MapStaticAssets (ASP.NET 9)",
    "url": "https://github.com/dotnet/aspnetcore/issues/59399",
    "createdAt": "2024-12-09T18:42:31Z",
    "lastUpdated": "2024-12-16T22:12:45Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nI\u0027m currently learning ASP.NET Core.\nFrom an empty .NET 9 Web application, I added a wwwroot folder with an index.html file.\n\nIn Program.cs, I used UseDefaultFiles and MapStaticAssets as follows :\n\u0060\u0060\u0060C#\napp.UseHttpsRedirection();\napp.UseDefaultFiles();\n//comment the line 13 and uncomment line 14 to make it work\napp.MapStaticAssets();\n//app.UseStaticFiles();\n\u0060\u0060\u0060\n\n- When I go to the [web site without sepifying the index.html page](https://localhost:58716/), I get a 404 error.\n- If I [specify index.html](https://localhost:58716/index.html), no 404 error, but I get the console error net::ERR_CONTENT_DECODING_FAILED 200 (OK)  as reported in [issue #58940 ](https://github.com/dotnet/aspnetcore/issues/58940).\n- If I replace the call to MapStaticAssets with a call to UseStaticFiles (the commented line), everything works fine.\n\n\n\n\n\n### Expected Behavior\n\nThe expected behavior is simply to see my index.html page rendered by the brower.\n\n### Steps To Reproduce\n\nGithub repo with the simpliest sln to reproduce the issue: [MapStaticAssets-issue](https://github.com/tehmang/MapStaticAssets-issue)\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.101\n\n### Anything else?\n\nVS 2022 17.12.3\n\ndotnet --info:\nSDK\u00A0.NET\u00A0:\n Version:           9.0.101\n Commit:            eedb237549\n Workload version:  9.0.100-manifests.4a280210\n MSBuild version:   17.12.12\u002B1cce77968\n\nEnvironnement d\u0027ex\u00E9cution\u00A0:\n OS Name:     Windows\n OS Version:  10.0.26100\n OS Platform: Windows\n RID:         win-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\9.0.101\\\n\nCharges de travail .NET install\u00E9es\u00A0:\n [android]\n   Source de l\u2019installation: VS 17.12.35527.113\n   Version de manifeste:    35.0.7/9.0.100\n   Chemin d\u0027acc\u00E8s au Manifeste:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.sdk.android\\35.0.7\\WorkloadManifest.json\n   Type d\u0027installation:              Msi\n\n [aspire]\n   Source de l\u2019installation: VS 17.12.35527.113\n   Version de manifeste:    8.2.2/8.0.100\n   Chemin d\u0027acc\u00E8s au Manifeste:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.aspire\\8.2.2\\WorkloadManifest.json\n   Type d\u0027installation:              Msi\n\n [maui-windows]\n   Source de l\u2019installation: VS 17.12.35527.113\n   Version de manifeste:    9.0.0/9.0.100\n   Chemin d\u0027acc\u00E8s au Manifeste:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.sdk.maui\\9.0.0\\WorkloadManifest.json\n   Type d\u0027installation:              Msi\n\n [maccatalyst]\n   Source de l\u2019installation: VS 17.12.35527.113\n   Version de manifeste:    18.1.9163/9.0.100\n   Chemin d\u0027acc\u00E8s au Manifeste:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.sdk.maccatalyst\\18.1.9163\\WorkloadManifest.json\n   Type d\u0027installation:              Msi\n\n [ios]\n   Source de l\u2019installation: VS 17.12.35527.113\n   Version de manifeste:    18.1.9163/9.0.100\n   Chemin d\u0027acc\u00E8s au Manifeste:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.sdk.ios\\18.1.9163\\WorkloadManifest.json\n   Type d\u0027installation:              Msi\n\nConfigur\u00E9 pour utiliser loose manifests lors de l\u2019installation de nouveaux manifestes.\n\nHost:\n  Version:      9.0.0\n  Architecture: x64\n  Commit:       9d5a6a9aa4\n\n.NET SDKs installed:\n  9.0.101 [C:\\Program Files\\dotnet\\sdk]\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 8.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 9.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 8.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 9.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n  Microsoft.WindowsDesktop.App 8.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n  Microsoft.WindowsDesktop.App 9.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n\nOther architectures found:\n  x86   [C:\\Program Files (x86)\\dotnet]\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\n\nEnvironment variables:\n  Not set\n\nglobal.json file:\n  Not found\n\nLearn more:\n  https://aka.ms/dotnet/info\n\nDownload .NET:\n  https://aka.ms/dotnet/download",
    "upvotes": 3,
    "labels": [
      "feature-static-web-assets",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86W32k_",
        "parentId": null,
        "author": "luka-kusulja",
        "content": "don\u0027t use app.MapStaticAssets();\nuse this instead app.UseStaticFiles();",
        "createdAt": "2024-12-10T10:53:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59399#issuecomment-2531223871"
      },
      {
        "id": "IC_kwDOAQzde86XBHAc",
        "parentId": null,
        "author": "SaebAmini",
        "content": "Since \u0060MapStaticAssets\u0060 is [being pushed as the new optimised alternative](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/static-files?view=aspnetcore-9.0#mapstaticassets), this needs to be resolved. Seeing the same issue.",
        "createdAt": "2024-12-11T05:09:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59399#issuecomment-2533650460"
      },
      {
        "id": "IC_kwDOAQzde86XTLoz",
        "parentId": null,
        "author": "peterwurzinger",
        "content": "\u003E don\u0027t use app.MapStaticAssets(); use this instead app.UseStaticFiles();\n\nYeah, I mean, one wouldn\u0027t even need an expensive ASP.NET Core Host to serve static HTML only anyways, the point of all that is, that serving of application assets should be optimized. \u0060UseStaticFiles\u0060 essentially excludes projects that e.g. use some kind of static index.html one-pager as entrypoint for an MVC application from those optimizations.\n\nI faced the same issue today and to me it rather seems that it is a problem with Hot Reload than with the middleware itself. Disabling Hot Reload in Visual Studio did fix the issue and the static index.html was served without errors. So to verify that:\n- \u0060dotnet run\u0060 works (both with \u0060-c Release\u0060 and \u0060-c Debug\u0060)\n- \u0060dotnet publish\u0060 works (both with \u0060-c Release\u0060 and \u0060-c Debug\u0060)\n- Being started within Visual Studio with Hot Reload enabled brings up the Content Encoding error @tehmang described\n- Being started within Visual Studio with Hot Reload disabled fixes the issue\n- Being started with \u0060dotnet watch\u0060 brings up the Content Encoding error\n\nSo the issue likely is a combination of [Hot Reload](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-watch) with MapStaticAssets()",
        "createdAt": "2024-12-12T09:45:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59399#issuecomment-2538388019"
      },
      {
        "id": "IC_kwDOAQzde86XZrOG",
        "parentId": null,
        "author": "SaebAmini",
        "content": "This happens on a deployment environment so I doubt it\u2019d just be a hot reload issue.",
        "createdAt": "2024-12-12T21:55:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59399#issuecomment-2540090246"
      },
      {
        "id": "IC_kwDOAQzde86XZsFT",
        "parentId": null,
        "author": "peterwurzinger",
        "content": "Oh alright, I only saw the issue on my local machine for now. ",
        "createdAt": "2024-12-12T21:58:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59399#issuecomment-2540093779"
      },
      {
        "id": "IC_kwDOAQzde86XqtwQ",
        "parentId": null,
        "author": "YongChingShieh",
        "content": "i have same question,in a deployment environment ",
        "createdAt": "2024-12-16T04:15:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59399#issuecomment-2544557072"
      },
      {
        "id": "IC_kwDOAQzde86Xz2R-",
        "parentId": null,
        "author": "luka-kusulja",
        "content": "the problem with app.MapStaticAssets(); is that the response headers say that the response is GZIPed while its served raw so the browser can\u0027t decompress it, this is a bug.\n\nyes @SaebAmini you are right, this is a bug which needs to be resolved, until the dotnet team resolves the bug people can use app.UseStaticFiles(); especially when the questions starts with \u0022I\u0027m currently learning ASP.NET Core.\u0022\n\n @peterwurzinger as this is a bug there is a workaround to modify your response headers while in dev env",
        "createdAt": "2024-12-16T22:12:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59399#issuecomment-2546951294"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86jfmSn",
    "title": "OpenApi generation OpenApiSchemaComparer fails with null values for Properties, AllOf, or AnyOf",
    "url": "https://github.com/dotnet/aspnetcore/issues/59507",
    "createdAt": "2024-12-16T17:24:09Z",
    "lastUpdated": "2024-12-17T21:15:27Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nOpenApiSchemaComparer uses code like \u0060   hashCode.Add(obj.Properties.Count);\u0060 . In custom schema transforms where I might want to replace allof , anyof, or properties, intuitively I would set unwanted properties to null. Either the setter should prevent this, or the \u0060obj.Properties.Count\u0060 should be \u0060obj.Properties?.Count??0\u0060 or otherwise take care of nulls.\n\n### Expected Behavior\n\nNot crash when a schema property is null. \n\n### Steps To Reproduce\n\nCustom schema transform - set Properties to null. OpenApi doc gen and Scalar result have missing elements.\n\n### Exceptions (if any)\n\nObject reference not set to an instance of an object.\n\n### .NET Version\n\n9\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86X-ICq",
        "parentId": null,
        "author": "captainsafia",
        "content": "@FrankSzendzielarz Thanks for filing this issue!\n\nI believe as a temporary workaround you can initialize the designated properties to empty lists. The OpenAPI document writer _should_ do the write thing and not emit them but let me know if that\u0027s not the case.\n\nWith regard to how we might solve this in the long-term, with the adoption of \u0060Microsoft.OpenApi\u0060 v2, we\u0027re hoping to move forward with the comparers being implemented in the library themselves (instead of in the ASP.NET Core codebase). There\u0027s also some changes coming to the nullability/default blues for collection-based properties like \u0060AllOf\u0060 and friends.\n\nI\u0027ll take this one as a sub-issue under https://github.com/dotnet/aspnetcore/issues/58619 for now since the comparers are removed from source in https://github.com/dotnet/aspnetcore/pull/59480.",
        "createdAt": "2024-12-17T21:14:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59507#issuecomment-2549645482"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86jhGLh",
    "title": "Stream returned in route is disposed twice",
    "url": "https://github.com/dotnet/aspnetcore/issues/59514",
    "createdAt": "2024-12-16T20:43:21Z",
    "lastUpdated": "2025-01-20T16:26:38Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen returning a stream as a file while creating a web API, the stream is disposed twice.\n\n### Expected Behavior\n\nThe stream should only be disposed once.\n\n### Steps To Reproduce\n\n\u0060\u0060\u0060c#\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\nvar app = builder.Build();\n\napp.Map(\u0022/test\u0022, () =\u003E\n{\n    var stream = new MyStream();\n    return Results.File(stream);\n});\n\napp.Run();\n\ninternal class MyStream : MemoryStream\n{\n    private int _count;\n    protected override void Dispose(bool disposing)\n    {\n        _count\u002B\u002B;\n        Console.WriteLine(_count);\n        base.Dispose(disposing);\n    }\n}\n\u0060\u0060\u0060\n\nI can also reproduce while using \u0060FileStreamResult\u0060.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.101\n\n### Anything else?\n\nThere is no stack trace.",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86bJChJ",
        "parentId": null,
        "author": "quails4Eva",
        "content": "Note, this appears to apply to MVC as well, though might be different code.\n\nFrom what I can tell, for MVC when returning a FileStreamResult the stream is wrapped in a using in FileStreamResultExecutor, then it calls FileResultHelper.WriteFileAsync via the base class which wraps it in another using \n\nMain reason I noticed is that I\u0027m trying to reduce memory usage with System.IO.RecyclableMemoryStream and it flags the double dispose as a critical error (since disposing returns the stream to the pool.)",
        "createdAt": "2025-01-20T16:26:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59514#issuecomment-2602838089"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86jqO9J",
    "title": "Support F# option type in OpenApi schema generator",
    "url": "https://github.com/dotnet/aspnetcore/issues/59528",
    "createdAt": "2024-12-17T18:48:25Z",
    "lastUpdated": "2025-01-16T20:35:58Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nOpenAPI support has recently been add in F# web frameworks (Oxpecker, Giraffe, Falco). However there is a problem, that F# option type is not respected well. Here is an example with Oxpecker:\n\n\u0060\u0060\u0060fsharp\nopen Microsoft.AspNetCore.Builder\nopen Microsoft.AspNetCore.Http\nopen Microsoft.Extensions.DependencyInjection\nopen Oxpecker\nopen Oxpecker.OpenApi\n\ntype MyModel = { Name: string; Age: int option }\n\nlet endpoints = GET [\n    route \u0022/myModel\u0022 \u003C| %TypedResults.Ok { Name = \u0022John\u0022; Age = None }\n        |\u003E configureEndpoint _.WithName(\u0022MyModel\u0022)\n        |\u003E addOpenApiSimple\u003Cunit, MyModel\u003E\n]\n\n[\u003CEntryPoint\u003E]\nlet main args =\n    let builder = WebApplication.CreateBuilder(args)\n    builder.Services.AddRouting().AddOxpecker().AddOpenApi() |\u003E ignore\n    let app = builder.Build()\n    app.UseRouting().UseOxpecker(endpoints) |\u003E ignore\n    app.MapOpenApi() |\u003E ignore\n    app.Run()\n    0 // Exit code\n\u0060\u0060\u0060\n\nGenerates the following schema:\n\u0060\u0060\u0060json\n{\n  \u0022openapi\u0022: \u00223.0.1\u0022,\n  \u0022info\u0022: {\n    \u0022title\u0022: \u0022Empty | v1\u0022,\n    \u0022version\u0022: \u00221.0.0\u0022\n  },\n  \u0022paths\u0022: {\n    \u0022/myModel\u0022: {\n      \u0022get\u0022: {\n        \u0022tags\u0022: [\n          \u0022Empty\u0022\n        ],\n        \u0022operationId\u0022: \u0022MyModel\u0022,\n        \u0022responses\u0022: {\n          \u0022200\u0022: {\n            \u0022description\u0022: \u0022OK\u0022,\n            \u0022content\u0022: {\n              \u0022application/json\u0022: {\n                \u0022schema\u0022: {\n                  \u0022$ref\u0022: \u0022#/components/schemas/MyModel\u0022\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \u0022components\u0022: {\n    \u0022schemas\u0022: {\n      \u0022FSharpOptionOfint\u0022: {\n        \u0022pattern\u0022: \u0022^-?(?:0|[1-9]\\\\d*)$\u0022,\n        \u0022type\u0022: \u0022integer\u0022\n      },\n      \u0022MyModel\u0022: {\n        \u0022required\u0022: [\n          \u0022name\u0022,\n          \u0022age\u0022\n        ],\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022name\u0022: {\n            \u0022type\u0022: \u0022string\u0022\n          },\n          \u0022age\u0022: {\n            \u0022$ref\u0022: \u0022#/components/schemas/FSharpOptionOfint\u0022\n          }\n        }\n      }\n    }\n  },\n  \u0022tags\u0022: [\n    {\n      \u0022name\u0022: \u0022Empty\u0022\n    }\n  ]\n}\n\u0060\u0060\u0060\n\n### Describe the solution you\u0027d like\n\nI expect it to generate the same schema as with just \u0060int\u0060, but without making this field required:\n\u0060\u0060\u0060json\n{\n  \u0022openapi\u0022: \u00223.0.1\u0022,\n  \u0022info\u0022: {\n    \u0022title\u0022: \u0022Empty | v1\u0022,\n    \u0022version\u0022: \u00221.0.0\u0022\n  },\n  \u0022paths\u0022: {\n    \u0022/myModel\u0022: {\n      \u0022get\u0022: {\n        \u0022tags\u0022: [\n          \u0022Empty\u0022\n        ],\n        \u0022operationId\u0022: \u0022MyModel\u0022,\n        \u0022responses\u0022: {\n          \u0022200\u0022: {\n            \u0022description\u0022: \u0022OK\u0022,\n            \u0022content\u0022: {\n              \u0022application/json\u0022: {\n                \u0022schema\u0022: {\n                  \u0022$ref\u0022: \u0022#/components/schemas/MyModel\u0022\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \u0022components\u0022: {\n    \u0022schemas\u0022: {\n      \u0022MyModel\u0022: {\n        \u0022required\u0022: [\n          \u0022name\u0022\n        ],\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022name\u0022: {\n            \u0022type\u0022: \u0022string\u0022\n          },\n          \u0022age\u0022: {\n            \u0022type\u0022: \u0022integer\u0022,\n            \u0022format\u0022: \u0022int32\u0022\n          }\n        }\n      }\n    }\n  },\n  \u0022tags\u0022: [\n    {\n      \u0022name\u0022: \u0022Empty\u0022\n    }\n  ]\n}\n\u0060\u0060\u0060\n\n\n### Additional context\n\nNote that FSharp option [is already respected](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.Json/src/System/Text/Json/Serialization/Converters/FSharp/FSharpOptionConverter.cs) by System.Text.Json. \n\n\u0060ValueOption\u0060 type should also be supported in the same way.\n\n\u0060\u0060\u0060\n.NET SDK:\n Version:           9.0.101\n Commit:            eedb237549\n Workload version:  9.0.100-manifests.4a280210\n MSBuild version:   17.12.12\u002B1cce77968\n\u0060\u0060\u0060",
    "upvotes": 33,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86X-EdQ",
        "parentId": null,
        "author": "captainsafia",
        "content": "@Lanayx Thanks for filing this issue!\n\nThe OpenAPI implementation uses System.Text.Json\u0027s schema generation under the hood which follow\u0027s STJ\u0027s serialization semantics. To that end, I think your issue might be related to https://github.com/dotnet/runtime/issues/55744.\n\nBaring official support for F# DUs in STJ, I think having the https://github.com/dotnet/runtime/issues/105769 API implemented might also help get the desired behavior here.\n\nLet me know if this assessment makes sense to you!\n\nFor now, I\u0027ll stick this in the backlog. I\u0027m hoping there will be progress on the STJ end here to make things a little easier.",
        "createdAt": "2024-12-17T21:06:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59528#issuecomment-2549630800"
      },
      {
        "id": "IC_kwDOAQzde86X-muK",
        "parentId": null,
        "author": "Lanayx",
        "content": "@captainsafia Thanks for answering, but I don\u0027t want to generalize it to any DU at this point (untill STJ supports them). But as long as STJ supports fsharp options and value options, I\u0027d expect them to be supported in OpenApi as well. I think it should be special cased just as NRT https://github.com/dotnet/aspnetcore/blob/main/src/OpenApi/src/Services/OpenApiGenerator.cs#L308",
        "createdAt": "2024-12-17T22:23:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59528#issuecomment-2549771146"
      },
      {
        "id": "IC_kwDOAQzde86X-otK",
        "parentId": null,
        "author": "captainsafia",
        "content": "@Lanayx Have you experimented with using schema transformers to see if you can achieve the desired behavior? See [these docs](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/openapi/customize-openapi?view=aspnetcore-9.0#use-schema-transformers).",
        "createdAt": "2024-12-17T22:27:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59528#issuecomment-2549779274"
      },
      {
        "id": "IC_kwDOAQzde86X-rWn",
        "parentId": null,
        "author": "Lanayx",
        "content": "Thanks, I\u0027ll have a look. Still, if I manage to add the right transformer, this will fix the issue for Oxpecker, but not for any other F#-based generation.",
        "createdAt": "2024-12-17T22:33:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59528#issuecomment-2549790119"
      },
      {
        "id": "IC_kwDOAQzde86X-yJR",
        "parentId": null,
        "author": "captainsafia",
        "content": "@Lanayx Correct! If there\u0027s interest in the issue, the transformer implementation can serve as the basis for something we\u0027d include by default.",
        "createdAt": "2024-12-17T22:51:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59528#issuecomment-2549817937"
      },
      {
        "id": "IC_kwDOAQzde86X_WdZ",
        "parentId": null,
        "author": "Lanayx",
        "content": "@captainsafia I\u0027ve tried transformer and now I\u0027m not sure if it\u0027s possible to leverage it, since the first \u0060schema\u0060 parameter already contains wrong schema node, so I can\u0027t \u0022replace\u0022 it with a correct one. As for context, \u0060JsonTypeInfo\u0060 and \u0060JsonPropertyInfo\u0060 don\u0027t have setters, so I can\u0027t change them either.\n\n\u0060\u0060\u0060fsharp\noptions.AddSchemaTransformer(fun schema context ct -\u003E\n    let t = context.JsonTypeInfo.Type\n    if t.IsGenericType \u0026\u0026 t.GetGenericTypeDefinition() = typedefof\u003COption\u003C_\u003E\u003E then\n       Console.WriteLine(\u0022Transforming Option\u0022)\n    Task.CompletedTask\n) |\u003E ignore\n\u0060\u0060\u0060\n![Image](https://github.com/user-attachments/assets/d09c66ec-36bf-40a9-a8f2-fb7c5251b500)\n",
        "createdAt": "2024-12-18T00:17:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59528#issuecomment-2549966681"
      },
      {
        "id": "IC_kwDOAQzde86ayKgS",
        "parentId": null,
        "author": "Lanayx",
        "content": "@captainsafia Hi, could you please advise on the next steps?",
        "createdAt": "2025-01-16T20:35:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59528#issuecomment-2596841490"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86juPQg",
    "title": "Execption thrown when generating OpenAPI document using F#",
    "url": "https://github.com/dotnet/aspnetcore/issues/59536",
    "createdAt": "2024-12-18T05:25:10Z",
    "lastUpdated": "2024-12-18T07:23:15Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\n\nWhen using a very specific combination of types in F#, the OpenAPI document fails to generate and an exception is thrown. I believe it is a similar bug to #58213, but in this case the parent type is not referenced from a sub-type, which was the suspected cause in that case. Recreating the same code in C# failed to recreate the bug.\n\nSpecifically, all of these conditions have to be true to trigger the exception:\n\n- \u0060Dog.favoriteFoods\u0060 has to be an array, or at least not just a string\n- \u0060Test1Result\u0060 has to include fields of type \u0060Dog\u0060 and \u0060Animal\u0060\n- Both \u0060Animal\u0060 and \u0060Test1Result\u0060 have to be response types\n\n\u0060\u0060\u0060fsharp\nopen System\nopen System.Text.Json.Serialization\nopen Microsoft.AspNetCore.Builder\nopen Microsoft.Extensions.DependencyInjection\nopen Microsoft.Extensions.Hosting\nopen Microsoft.AspNetCore.Http\n\n[\u003CJsonDerivedType(typeof\u003CDog\u003E)\u003E]\n[\u003CJsonDerivedType(typeof\u003CCat\u003E)\u003E]\ntype Animal() =\n    member val name = \u0022\u0022 with get, set\n\nand Cat() =\n    inherit Animal()\n    member val favoriteFood: string = \u0022tuna\u0022 with get, set\n\nand Dog() =\n    inherit Animal()\n    member val favoriteFoods: string[] = [||] with get, set\n\ntype Test1Result = { dog: Dog; animal: Animal }\n\n[\u003CEntryPoint\u003E]\nlet main args =\n\n    let builder = WebApplication.CreateBuilder(args)\n\n    builder.Services.AddOpenApi() |\u003E ignore\n\n    let app = builder.Build()\n\n    if app.Environment.IsDevelopment() then\n        app.MapOpenApi() |\u003E ignore\n\n    app.MapGet(\u0022/test1\u0022, Func\u003Cstring\u003E(fun () -\u003E \u0022Hello World!\u0022))\n    |\u003E _.Produces\u003CTest1Result\u003E(StatusCodes.Status200OK, null, [||])\n    |\u003E ignore\n\n    app.MapGet(\u0022/test2\u0022, Func\u003Cstring\u003E(fun () -\u003E \u0022Hello World!\u0022))\n    |\u003E _.Produces\u003CAnimal\u003E(StatusCodes.Status200OK, null, [||])\n    |\u003E ignore\n\n    app.Run()\n\n    0\n\u0060\u0060\u0060\n\n### Expected Behavior\n\nThe OpenAPI document is successfully generated.\n\n### Steps To Reproduce\n\nA minimalist project recreating the issue is here:\n\n[https://github.com/josh-coproduct/FSharp-OpenAPI-Bug-Sample](https://github.com/josh-coproduct/FSharp-OpenAPI-Bug-Sample)\n\nIt includes the F# code the triggers the bug, and the C# code that does not.\n\nLaunching the F# project should open a browser window to [http://localhost:5047/openapi/v1.json](http://localhost:5047/openapi/v1.json), which should trigger the bug and show the exception.\n\n### Exceptions (if any)\n\n\u0060\u0060\u0060\nSystem.ArgumentException: An item with the same key has already been added. Key: AnimalDog\n   at System.Collections.Generic.Dictionary\u00602.TryInsert(TKey key, TValue value, InsertionBehavior behavior)\n   at System.Collections.Generic.Dictionary\u00602.Add(TKey key, TValue value)\n   at Microsoft.AspNetCore.OpenApi.OpenApiSchemaReferenceTransformer.TransformAsync(OpenApiDocument document, OpenApiDocumentTransformerContext context, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.ApplyTransformersAsync(OpenApiDocument document, IServiceProvider scopedServiceProvider, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOpenApiDocumentAsync(IServiceProvider scopedServiceProvider, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.OpenApi.OpenApiDocumentService.GetOpenApiDocumentAsync(IServiceProvider scopedServiceProvider, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Builder.OpenApiEndpointRouteBuilderExtensions.\u003C\u003Ec__DisplayClass0_0.\u003C\u003CMapOpenApi\u003Eb__0\u003Ed.MoveNext()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Http.Generated.\u003CGeneratedRouteBuilderExtensions_g\u003EF56B68D2B55B5B7B373BA2E4796D897848BC0F04A969B1AF6260183E8B9E0BAF2__GeneratedRouteBuilderExtensionsCore.\u003C\u003Ec__DisplayClass2_0.\u003C\u003CMapGet0\u003Eg__RequestHandler|5\u003Ed.MoveNext()\n--- End of stack trace from previous location ---\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\n\u0060\u0060\u0060\n\n### .NET Version\n\n9.0.101\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86j4twQ",
    "title": "Minimal API: TypedResults, Problem, ValidationProblem",
    "url": "https://github.com/dotnet/aspnetcore/issues/59560",
    "createdAt": "2024-12-19T08:09:38Z",
    "lastUpdated": "2024-12-27T17:25:51Z",
    "body": "## Summary\n\nEnhance the way we return \u0060TypedResult\u0060 for minimal api and \u0060ProblemDetails\u0060 when the system raise an error.\n\n## Motivation and goals\n\nI believe the newly added features related to this topic are great, but there is room for improvement.\n\n## In scope\n\n- TypedResults\n- ProblemDetails options\n- Minimal Api\n- Exceptions versus \u0022business\u0022 errors.\n\n## Out of scope\n\nN/A\n\n## Risks / unknowns\n\nNone\n\n## Examples\n\nThe way we can now use the following code is great:\n\n\u0060\u0060\u0060c#\nservices.AddProblemDetails(options =\u003E\n{\n    options.CustomizeProblemDetails = context =\u003E\n    {\n        context.ProblemDetails.Instance =\n            $\u0022{context.HttpContext.Request.Method} {context.HttpContext.Request.Path}\u0022;\n\n        context.ProblemDetails.Extensions.TryAdd(\u0022requestId\u0022, context.HttpContext.TraceIdentifier);\n\n        Activity? activity = context.HttpContext.Features.Get\u003CIHttpActivityFeature\u003E()?.Activity;\n        context.ProblemDetails.Extensions.TryAdd(\u0022traceId\u0022, activity?.Id);\n    };\n});\n\napp.UseStatusCodePages();\n\u0060\u0060\u0060\nEnriching our problem details in this manner is simply \u2764  \n\nFor exception handling in the case of a real exception, the ability to inject the \u0060IProblemDetailsService\u0060 service is cool:\n\u0060\u0060\u0060c#\npublic class CustomExceptionHandler(IProblemDetailsService problemDetailsService, ILogger\u003CCustomExceptionHandler\u003E log) : IExceptionHandler\n{\n    private readonly ILogger\u003CCustomExceptionHandler\u003E _log = log;\n\n    public async ValueTask\u003Cbool\u003E TryHandleAsync(\n        HttpContext httpContext,\n        Exception exception,\n        CancellationToken cancellationToken)\n    {\n        _log.LogError(exception, \u0022An error occurred: {message}\u0022,exception.Message);\n\n        var problemDetails = new ProblemDetails\n        {\n            Status = StatusCodes.Status500InternalServerError,\n            Title = \u0022An error occurred\u0022,\n            Type = exception.GetType().Name,\n            Detail = exception.Message,\n        };\n\n        return await problemDetailsService.TryWriteAsync(new ProblemDetailsContext\n        {\n            Exception = exception,\n            HttpContext = httpContext,\n            ProblemDetails = problemDetails\n        });\n    }\n}\n\u0060\u0060\u0060\n\nHowever, I believe there is a need for more clarity regarding when we are serious about error handling and do not want to raise an exception in the case of a normal error. An exception should indicate an unplanned error.\n\nNow that we have the TypedResults extension and a way to enforce our Minimal API to return certain types, ValidationProblem seems unnecessary because ultimately, we want to return either our normal typed result or a typed ProblemDetails result.\n\nSomething like that:\n\u0060Task\u003CResults\u003CCreated\u003CTenantStandardResult\u003E, ProblemHttpResult \u003E\u003E\u0060\n\nNot something like that\n\u0060Task\u003CResults\u003CCreated\u003CTenantStandardResult\u003E, ProblemHttpResult, ValidationProblem \u003E\u003E\u0060\n\nOn my end, to always be able to return \u0060ProblemDetails\u0060 in the case of \u0022business\u0022 errors, validation errors, or exceptions, I created a new extension called \u0060CustomTypedResults\u0060 as follows:\n\n\u0060\u0060\u0060c#\n    public static class CustomTypedResults\n    {\n        public static ProblemHttpResult Problem(IDictionary\u003Cstring, string[]\u003E validationErrors)\n        {\n            ArgumentNullException.ThrowIfNull(validationErrors);\n            \n            var problemDetails = new ProblemDetails()\n            {\n                Detail = \u0022Validation error\u0022,\n                Status = 400,\n                Title = \u0022Validation error\u0022,\n                Extensions = { { \u0022validationErrors\u0022, validationErrors } }\n            };\n\n            return TypedResults.Problem(problemDetails);\n        }\n\n        public static ProblemHttpResult Problem(IFeatureError featureError)\n        {\n            ArgumentNullException.ThrowIfNull(featureError);\n\n            var problemDetails = new ProblemDetails()\n            {\n                Detail = featureError.Details,\n                Status = (int)featureError.ErrorType,\n                Title = \u0022Service - feature error\u0022,\n                Extensions = { { \u0022errors\u0022, featureError.CustomErrors } }\n            };\n\n            return TypedResults.Problem(problemDetails);\n        }\n\n    }\n\u0060\u0060\u0060\n\nWith that, I m able to pass the result of a fluent validation (Dic) (like before with TypedResults.ValidationProblem():\n\u0060 CustomTypedResults.Problem()\u0060\n\nOr pass my error interface (IFeatureError), the same way:\n\u0060 CustomTypedResults.Problem()\u0060\n\nAnd maintain my typed API returns simple: \n\u0060private async Task\u003CResults\u003CCreated\u003CTenantStandardResult\u003E, ProblemHttpResult \u003E\u003E\u0060\n\n## Detailed design\n\nI am unsure if this approach will be interesting for others, but I believe it simplifies the process and allows us to consistently return\u0060 ProblemDetails\u0060 without further consideration.\n\nMainly when you don\u0027t use exception handler to trap normal errors... \nI think it\u0027s not good and I prefer very much the\u0060 Either\u003CIFeatureError,RightResult\u003E\u0060 pattern and be able to transform a \u0060IFeatureError \u0060to \u0060ProblemDetails\u0060.\n\nI am curious if it would be beneficial to explore this topic further or if anyone has a better approach already.",
    "upvotes": 0,
    "labels": [
      "design-proposal",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86YqPDl",
        "parentId": null,
        "author": "mikekistler",
        "content": "I think this approach may not work well with the generation of OpenAPI documents that was added in .NET 9. In particular, I think it would require \u0060ProducesResponseType\u0060 attributes to be specified in order to get the error responses to be included in the generated OpenAPI document. This is because \u0060TypedResults.Problem\u0060 does not provide metadata for the OpenAPI document, unlike other TypedResults methods like \u0060TypedResults.BadRequest\u0060. Is that important to you?",
        "createdAt": "2024-12-24T14:57:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59560#issuecomment-2561208549"
      },
      {
        "id": "IC_kwDOAQzde86YqUVi",
        "parentId": null,
        "author": "fdonnet",
        "content": "@mikekistler right, thx I was convinced that TypedResults.Problem will provide the ProblemDetails model in OpenID doc. Other TypedResults. are working but not TypedResults.Problem... I just confirmed now and I m sad... ;)",
        "createdAt": "2024-12-24T15:24:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59560#issuecomment-2561230178"
      },
      {
        "id": "IC_kwDOAQzde86YqXVt",
        "parentId": null,
        "author": "fdonnet",
        "content": "@mikekistler I changed for something like that, but it\u0027s bad:\n\n\u0060\u0060\u0060c#\n       public static BadRequest\u003CProblemDetails\u003E Problem(IFeatureError featureError)\n        {\n            ArgumentNullException.ThrowIfNull(featureError);\n\n            var problemDetails = new ProblemDetails()\n            {\n                Detail = featureError.Details,\n                Status = (int)featureError.ErrorType,\n                Title = \u0022Service - feature error\u0022,\n                Extensions = { { \u0022errors\u0022, featureError.CustomErrors } }\n            };\n\n            return TypedResults.BadRequest(problemDetails);\n        }\n\u0060\u0060\u0060\n\nNot as cool as before... but at least I have the problemdetails model in OpenApi\n\nEDIT: but now, I m loosing the correct StatusCode.... grrr, so not good. =\u003E worst.\n",
        "createdAt": "2024-12-24T15:41:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59560#issuecomment-2561242477"
      },
      {
        "id": "IC_kwDOAQzde86YqcoG",
        "parentId": null,
        "author": "mikekistler",
        "content": "Right. \u0060BadRequest\u0060 is wired to produce a 400 status (only). In fact, this is what makes it amenable to providing metadata for the OpenAPI doc. If the status code is unknown at build time, I don\u0027t think it\u0027s possible to produce OpenAPI metadata.\n\nIf there is some fixed set of status codes for \u0060featureError.ErrorType\u0060, it might be possible to create a TypedResults for just this set ...",
        "createdAt": "2024-12-24T16:12:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59560#issuecomment-2561264134"
      },
      {
        "id": "IC_kwDOAQzde86Yqhia",
        "parentId": null,
        "author": "fdonnet",
        "content": "I will try this way... because I have the current status code in my IfeatureError. I was thinking that the .Problem() will cover all my needs but no. My Api will return ProblemDetails for all possible err status code... sad I cannot document that easily.",
        "createdAt": "2024-12-24T16:46:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59560#issuecomment-2561284250"
      },
      {
        "id": "IC_kwDOAQzde86YqiwX",
        "parentId": null,
        "author": "fdonnet",
        "content": "linked to that #52424\n",
        "createdAt": "2024-12-24T16:55:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59560#issuecomment-2561289239"
      },
      {
        "id": "IC_kwDOAQzde86Y0ZGq",
        "parentId": null,
        "author": "mikekistler",
        "content": "Perhaps what you want is to add a \u00604XX\u0060 response. OpenAPI v3.0 added support for \u0022response code ranges\u0022 and \u00224XX\u0022 basically means any response code in the range 400-499 that is not explicitly defined.\n\nI added a [ProblemResponseTransformer](https://github.com/mikekistler/aspnet-transformer-gallery#problemresponsetransformer) to my TransformerGallery project to demonstrate how to do this.  It adds a 4XX response to every operation -- it was pretty straightforward to develop.\n\nI hope this is helpful.",
        "createdAt": "2024-12-27T16:55:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59560#issuecomment-2563871146"
      },
      {
        "id": "IC_kwDOAQzde86Y0cqb",
        "parentId": null,
        "author": "erwinkramer",
        "content": "Thanks @mikekistler.\n\nJust a small detail: you missed a forward slash after \u0060TransformerGallery\u0060 in your hyperlink in the readme :) \n\nPointing to \nhttps://github.com/mikekistler/aspnet-transformer-gallery/blob/main/TransformerGalleryTransformers/ProblemResponseTransformer.cs\n\nShould be\nhttps://github.com/mikekistler/aspnet-transformer-gallery/blob/main/TransformerGallery/Transformers/ProblemResponseTransformer.cs\n\nSpeaking of transformers, this is also a cool one that adds a security requirement to each operation based on the security policy that has been set: \nhttps://github.com/erwinkramer/bank-api/blob/c4d28c60118ada98b9a59ce6e9c312e7581096b6/BankApi.Core/Defaults/Transformer.Operation.cs#L52\n",
        "createdAt": "2024-12-27T17:14:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59560#issuecomment-2563885723"
      },
      {
        "id": "IC_kwDOAQzde86Y0eeC",
        "parentId": null,
        "author": "fdonnet",
        "content": "@mikekistler, this looks great! Now, I\u0027m unsure whether to use .ProducesProblem(4xx) to detail all possible problem returns for each endpoint or to go with your transformer. I appreciate having visibility into all potential status codes\u2014for instance, an update might return a 409 due to an \u0022optimistic concurrency\u0022 exception etc etc. However, I wonder if providing so much detail is necessary, or if a more general approach would suffice.\n\nAt the end, it\u0027s for a side project I have, and I believed that this TypedResuls.Problem() thing was the Holy Grail \uD83D\uDE04 To enforce the result types for my endpoints and to have an OpenApi documentation that fits without any effort. ",
        "createdAt": "2024-12-27T17:25:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59560#issuecomment-2563893122"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86j5fOf",
    "title": "Endpoint filter factory was called twice.",
    "url": "https://github.com/dotnet/aspnetcore/issues/59562",
    "createdAt": "2024-12-19T09:39:01Z",
    "lastUpdated": "2025-01-01T08:30:42Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nMinimal-API\u0027s endpoint filter factory was called twice.\n\n### Expected Behavior\n\nMinimal-API\u0027s endpoint filter factory was called once.\n\n### Steps To Reproduce\n\n\u0060\u0060\u0060 csharp\napp.MapGet(\u0022/api/a\u0022, () =\u003E { })\n    .AddEndpointFilterFactory((ctx, next) =\u003E\n    {\n        ctx.ApplicationServices.GetService\u003CILogger\u003CWebApplication\u003E\u003E()!.LogError(\u0022Enter!!!!!!!!!!!!\u0022);\n        return (ctxf) =\u003E next(ctxf);\n    });\n\u0060\u0060\u0060\n\n![Image](https://github.com/user-attachments/assets/4f9d04d5-7519-4b42-97c1-61b0f4b70d01)\n\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n- ASP.NET Core version: 8.0 and 9.0.\n- VS version: 17.12.1",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86Y2a-T",
        "parentId": null,
        "author": "oussamatecnique",
        "content": "I couldn\u0027t reproduce it, do you have more details?\nalso is this affecting the registering of endpoint filters?",
        "createdAt": "2024-12-28T18:53:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59562#issuecomment-2564403091"
      },
      {
        "id": "IC_kwDOAQzde86Y_-ZB",
        "parentId": null,
        "author": "CoreDX9",
        "content": "The endpoint metadata obtained from the two calls were different objects, so I believe the result of the first call was discarded. This should not affect the registration of endpoint filters.\n\nI think the first call is meaningless. If many endpoints are registered, unnecessary garbage collection and increased startup time may occur.\n\nThis is a sample. Both MainWebApplication and MainHostBuilder will output logs twice on .NET 8.0 and 9.0. Browser auto run is closed. \n\u0060\u0060\u0060 csharp\nnamespace WebApplication1;\n\npublic class Program\n{\n    public const string testStr = \u0022Has a string in endpoint metadata.\u0022;\n    public static void Main(string[] args)\n    {\n        MainWebApplication(args);\n        //MainHostBuilder(args);\n    }\n\n    public static void MainWebApplication(string[] args)\n    {\n        var builder = WebApplication.CreateBuilder(args);\n\n        var app = builder.Build();\n\n        var endpoint = app.MapGet(\u0022/\u0022, () =\u003E { });\n\n        endpoint.Add(static endpotintBuilder =\u003E\n        {\n            endpotintBuilder.FilterFactories.Add((ctx, next) =\u003E\n            {\n                ctx.ApplicationServices.GetService\u003CILogger\u003CWebApplication\u003E\u003E()!.LogError(\u0022Enter!!!!!!!!!!!!\u0022);\n\n                if (!endpotintBuilder.Metadata.Any(x =\u003E x is testStr))\n                {\n                    endpotintBuilder.Metadata.Add(testStr);\n                    endpotintBuilder.ApplicationServices.GetService\u003CILogger\u003CWebApplication\u003E\u003E()!.LogError(testStr);\n\n                    return ctxf =\u003E\n                    {\n                        ctxf.HttpContext.RequestServices.GetService\u003CILogger\u003CWebApplication\u003E\u003E()!.LogError(\u0022A filter with logging added.\u0022);\n                        return next(ctxf);\n                    };\n                }\n\n                return (ctxf) =\u003E next(ctxf);\n            });\n        });\n\n        app.Run();\n    }\n\n    public static void MainHostBuilder(string[] args)\n    {\n        CreateHostBuilder(args).Build().Run();\n    }\n\n    public static IHostBuilder CreateHostBuilder(string[] args) =\u003E\n        Host.CreateDefaultBuilder(args)\n        .ConfigureWebHostDefaults(webBuilder =\u003E\n        {\n            webBuilder.UseStartup\u003CStartup\u003E();\n        });\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services) { }\n    public void Configure(IApplicationBuilder app)\n    {\n        app.UseRouting();\n\n        app.UseEndpoints(endpoints =\u003E\n        {\n            var endpoint = endpoints.MapGet(\u0022/\u0022, () =\u003E { });\n\n            endpoint.Add(static endpotintBuilder =\u003E\n            {\n                endpotintBuilder.FilterFactories.Add((ctx, next) =\u003E\n                {\n                    ctx.ApplicationServices.GetService\u003CILogger\u003CWebApplication\u003E\u003E()!.LogError(\u0022Enter!!!!!!!!!!!!\u0022);\n\n                    if (!endpotintBuilder.Metadata.Any(x =\u003E x is Program.testStr))\n                    {\n                        endpotintBuilder.Metadata.Add(Program.testStr);\n                        endpotintBuilder.ApplicationServices.GetService\u003CILogger\u003CWebApplication\u003E\u003E()!.LogError(Program.testStr);\n\n                        return ctxf =\u003E\n                        {\n                            ctxf.HttpContext.RequestServices.GetService\u003CILogger\u003CWebApplication\u003E\u003E()!.LogError(\u0022A filter with logging added.\u0022);\n                            return next(ctxf);\n                        };\n                    }\n\n                    return (ctxf) =\u003E next(ctxf);\n                });\n            });\n        });\n    }\n}\n\u0060\u0060\u0060\n\nOutput :\n\u0060\u0060\u0060 log\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5219\nfail: Microsoft.AspNetCore.Builder.WebApplication[0]\n      Enter!!!!!!!!!!!!\nfail: Microsoft.AspNetCore.Builder.WebApplication[0]\n      Has a string in endpoint metadata.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl\u002BC to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: F:\\source\\repos\\WebApplication1\\WebApplication1\n// Before open browser\n// =====================================================================\n// After open browser\nfail: Microsoft.AspNetCore.Builder.WebApplication[0]\n      Enter!!!!!!!!!!!!\nfail: Microsoft.AspNetCore.Builder.WebApplication[0]\n      Has a string in endpoint metadata.\nfail: Microsoft.AspNetCore.Builder.WebApplication[0]\n      A filter with logging added.\n\u0060\u0060\u0060",
        "createdAt": "2025-01-01T08:30:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59562#issuecomment-2566907457"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86j7vsE",
    "title": "\u0022dotnet new webapiaot\u0022 should include OpenAPI support",
    "url": "https://github.com/dotnet/aspnetcore/issues/59564",
    "createdAt": "2024-12-19T13:32:28Z",
    "lastUpdated": "2024-12-20T18:06:44Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWhen I try to create an ASP.NET Core project with AOT support, I can use \u0060dotnet new webapiaot\u0060. I can add the \u0060--help\u0060 flag to see available options:\n\n\u0060\u0060\u0060\n# dotnet new webapiaot --help\n# Truncated...\n  --exclude-launch-settings        Whether to exclude launchSettings.json from the generated template.\n                                   Type: bool\n                                   Default: false\n  -f, --framework \u003Cnet8.0|net9.0\u003E  The target framework for the project.\n                                   Type: choice\n                                     net9.0  Target net9.0\n                                     net8.0  Target net8.0\n                                   Default: net9.0\n  --no-restore                     If specified, skips the automatic restore of the project on create.\n                                   Type: bool\n                                   Default: false\n  --use-program-main               Whether to generate an explicit Program class and Main method instead of top-level statements.\n                                   Type: bool\n                                   Default: false\n\u0060\u0060\u0060\nThat\u0027s quite limited!\n\nI can also create a project without AOT support by using \u0060dotnet new webapi\u0060. This has a lot more options:\n\n\u003Cdetails\u003E\n \u003Csummary\u003EClick to view code\u003C/summary\u003E\n\n\u0060\u0060\u0060\n  -au, --auth \u003CIndividualB2C|None|SingleOrg|Windows\u003E                  The type of authentication to use\n                                                                      Type: choice\n                                                                        None           No authentication\n                                                                        IndividualB2C  Individual authentication with Azure AD B2C\n                                                                        SingleOrg      Organizational authentication for a single tenant\n                                                                        Windows        Windows authentication\n                                                                      Default: None\n  --aad-b2c-instance \u003Caad-b2c-instance\u003E                               The Azure Active Directory B2C instance to connect to (use with IndividualB2C auth).\n                                                                      Type: string\n                                                                      Default: https://qualified.domain.name.b2clogin.com/\n  -ssp, --susi-policy-id \u003Csusi-policy-id\u003E                             The sign-in and sign-up policy ID for this project (use with IndividualB2C auth).\n                                                                      Type: string\n                                                                      Default: b2c_1_susi\n  --aad-instance \u003Caad-instance\u003E                                       The Azure Active Directory instance to connect to (use with SingleOrg auth).\n                                                                      Type: string\n                                                                      Default: https://login.microsoftonline.com/\n  --client-id \u003Cclient-id\u003E                                             The Client ID for this project (use with SingleOrg or IndividualB2C auth).\n                                                                      Type: string\n                                                                      Default: 11111111-1111-1111-11111111111111111\n  --domain \u003Cdomain\u003E                                                   The domain for the directory tenant (use with SingleOrg or IndividualB2C auth).\n                                                                      Type: string\n                                                                      Default: qualified.domain.name\n  --default-scope \u003Cdefault-scope\u003E                                     The API scope the client needs to request to provision an access token. (use with IndividualB2C, SingleOrg).\n                                                                      Type: string\n                                                                      Default: access_as_user\n  --tenant-id \u003Ctenant-id\u003E                                             The TenantId ID of the directory to connect to (use with SingleOrg auth).\n                                                                      Type: string\n                                                                      Default: 22222222-2222-2222-2222-222222222222\n  -r, --org-read-access                                               Whether or not to allow this application read access to the directory (only applies to SingleOrg auth).\n                                                                      Type: bool\n                                                                      Default: false\n  --exclude-launch-settings                                           Whether to exclude launchSettings.json in the generated template.\n                                                                      Type: bool\n                                                                      Default: false\n  --no-https                                                          Whether to turn off HTTPS. This option only applies if IndividualB2C, SingleOrg, or MultiOrg aren\u0027t used for --auth.\n                                                                      Type: bool\n                                                                      Default: false\n  -uld, --use-local-db                                                Whether to use LocalDB instead of SQLite. This option only applies if --auth Individual or --auth IndividualB2C is specified.\n                                                                      Type: bool\n                                                                      Default: false\n  -f, --framework \u003Cnet5.0|net6.0|net7.0|net8.0|net9.0|netcoreapp3.1\u003E  The target framework for the project.\n                                                                      Type: choice\n                                                                        net9.0         Target net9.0\n                                                                        net8.0         Target net8.0\n                                                                        net7.0         Target net7.0\n                                                                        net6.0         Target net6.0\n                                                                        net5.0         Target net5.0\n                                                                        netcoreapp3.1  Target netcoreapp3.1\n                                                                      Default: net9.0\n  --no-restore                                                        If specified, skips the automatic restore of the project on create.\n                                                                      Type: bool\n                                                                      Default: false\n  --called-api-url \u003Ccalled-api-url\u003E                                   URL of the API to call from the web app. This option only applies if --auth SingleOrg or --auth IndividualB2C is specified.\n                                                                      Type: string\n                                                                      Default: https://graph.microsoft.com/v1.0\n  --calls-graph                                                       Specifies if the web app calls Microsoft Graph. This option only applies if --auth SingleOrg is specified.\n                                                                      Type: bool\n                                                                      Default: false\n  --called-api-scopes \u003Ccalled-api-scopes\u003E                             Scopes to request to call the API from the web app. This option only applies if --auth SingleOrg or --auth IndividualB2C is specified.\n                                                                      Type: string\n                                                                      Default: user.read\n  --no-openapi                                                        Disable OpenAPI (Swagger) support\n                                                                      Type: bool\n                                                                      Default: false\n  --use-program-main                                                  Whether to generate an explicit Program class and Main method instead of top-level statements.\n                                                                      Type: bool\n                                                                      Default: false\n  -controllers, --use-controllers                                     Whether to use controllers instead of minimal APIs. This option overides the value specified by --minimal.\n                                                                      Type: bool\n                                                                      Default: false\n  -minimal, --use-minimal-apis                                        Whether to use minimal APIs instead of controllers.\n                                                                      Type: bool\n                                                                      Default: false\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n**The problem is that the AOT template doesn\u0027t have OpenAPI support by default, while the non-AOT version does support OpenAPI by default**.\n\n\nThis is understandable, as .NET 8 didn\u0027t contain an AOT compatible OpenAPI implementation. However, NET 9 received improved OpenAPI support with AOT support: https://devblogs.microsoft.com/dotnet/dotnet9-openapi/. \n\nThis is not included by default in the .NET 9 \u0060webapiaot\u0060 template, nor is it a flag like it is for \u0060dotnet new webapi\u0060 (\u0060--no-openapi\u0060).\nI understand there are a smaller amount of supported flags as AOT support is quite new, but I would like to see it added.\n\n### Describe the solution you\u0027d like\n\nOpenAPI is important for complex API\u0027s or API\u0027s that are consumed by API clients, like front-ends or other API\u0027s. If it is supported for non-aot projects, I would like to see it supported for AOT projects, too!\n\n### Additional context\n\nI wouldn\u0027t mind creating a PR myself if the team agrees this could be useful!",
    "upvotes": 1,
    "labels": [
      "feature-openapi",
      "NativeAOT",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86YO10y",
        "parentId": null,
        "author": "sander1095",
        "content": "If we\u0027re going to implement this, we should also update the docs that currently mention you need to add the package yourself:\n\nhttps://learn.microsoft.com/en-us/aspnet/core/fundamentals/openapi/aspnetcore-openapi?view=aspnetcore-9.0\u0026tabs=visual-studio#trimming-and-native-aot",
        "createdAt": "2024-12-19T13:37:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59564#issuecomment-2554027314"
      },
      {
        "id": "IC_kwDOAQzde86Yb7xk",
        "parentId": null,
        "author": "captainsafia",
        "content": "@sander1095 Thanks for filing this issue!\n\nI had mentally flagged adding in OpenAPI support to the Web API AoT template in .NET 9 but didn\u0027t do the legwork on filing an issue/doing the work.\n\nI\u0027m happy to do this in .NET 10.\n\nOne thing to note is that we\u0027re currently in the process of updating to the next major version of the OpenAPI.NET library to support OpenAPI 3.1 which regressed its AoT support. We\u0027ll want to close the loop on that before updating the templates for .NET 10.",
        "createdAt": "2024-12-20T17:48:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59564#issuecomment-2557459556"
      },
      {
        "id": "IC_kwDOAQzde86Yb-gv",
        "parentId": null,
        "author": "sander1095",
        "content": "So you\u0027re saying you\u0027ll be implementing it? I would also like to do it, as mentioned in the description. :)\n\nIf you\u0027d also welcome a community contribution - after AOT support is brought back - tag me and I\u0027ll get started on it? :)",
        "createdAt": "2024-12-20T17:56:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59564#issuecomment-2557470767"
      },
      {
        "id": "IC_kwDOAQzde86YcBq6",
        "parentId": null,
        "author": "captainsafia",
        "content": "Community contribution definitely welcome! I\u0027ll post on this issue once AoT support is back again and we can update the templates.",
        "createdAt": "2024-12-20T18:06:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59564#issuecomment-2557483706"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86kbkIR",
    "title": "UsePathBase should insert before UseRouting() in WebApplicationBuilder.ConfigureApplication",
    "url": "https://github.com/dotnet/aspnetcore/issues/59638",
    "createdAt": "2024-12-25T09:58:58Z",
    "lastUpdated": "2025-01-01T09:57:22Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying use PathBaseMiddleware with WebApplicationBuilder and auth such as:\n\n\u0060\u0060\u0060 csharp\n\n// ...\nbuilder.Services.AddAuthorization();\nbuilder.Services.AddAuthentication().AddCookie();\nvar app = builder.Build();\n\napp.UsePathBase(\u0022/example\u0022);\n\n// ...\napp.MapControllers().RequireAuthorization();\n\n\u0060\u0060\u0060\n\n\nwhen I access https://localhost:8080/example/api/weatherforecast, a exception page show:\n\n\n\u003E InvalidOperationException: Endpoint xxx contains authorization metadata, but a middleware was not found that supports authorization. Configure your application startup by adding app.UseAuthorization() in the application startup code. If there are calls to app.UseRouting() and app.UseEndpoints(...), the call to app.UseAuthorization() must go between them.\n\n\u003E Microsoft.AspNetCore.Routing.EndpointMiddleware.ThrowMissingAuthMiddlewareException(Endpoint endpoint)\nMicrosoft.AspNetCore.Routing.EndpointMiddleware.Invoke(HttpContext httpContext)\nMicrosoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\nSwashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\nSwashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\nMicrosoft.AspNetCore.Builder.Extensions.UsePathBaseMiddleware.InvokeCore(HttpContext context, PathString matchedPath, PathString remainingPath)\nMicrosoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\nMicrosoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)\n\n\nThis is becasue when I add UsePathBase(...), it will add a UseRoute after UsePathBase without Authorization.\n\nWebApplication generate a  middleware like this:\n\n1. UseDeveloperExceptionPage\n2. UseRouting\n3. UseAuthentication\n4. UseAuthorization\n5. WireSourcePipeline \n   5.1 UsePathBase(...); \n   5.2 UseRouting(...)\n   5.3 other middleware user added.\n6. UseEndpoints()\n\n\nThe final UseEndpoints(...) middleware will execute authz. The endpoint is matched on step 5.2\u3002step 3 will not execute because no endpoint matched on step 2.\n\n\n### Describe the solution you\u0027d like\n\nAdd UsePathBase(...) to WebApplicationBuilder.ConfigureApplication(...) when environment ASPNET_PATHBASE set.\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86ZAFbf",
        "parentId": null,
        "author": "wu-yafeng",
        "content": "Temporary solution:\n\n\u0060\u0060\u0060 csharp\n\npublic static WebApplicationBuilder ConfigurePathBase(this WebApplicationBuilder builder, PathString path)\n{\n    builder.Services.AddSingleton\u003CIStartupFilter\u003E(new PathBaseStartupFilter(path));\n\n    return builder;\n}\n\nprivate class PathBaseStartupFilter(PathString path) : IStartupFilter\n{\n    private readonly PathString _pathBase = path;\n    public Action\u003CIApplicationBuilder\u003E Configure(Action\u003CIApplicationBuilder\u003E next)\n    {\n        return app =\u003E\n        {\n            app.UsePathBase(_pathBase);\n            next(app);\n        };\n    }\n}\n\u0060\u0060\u0060\n\n",
        "createdAt": "2025-01-01T09:57:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59638#issuecomment-2566936287"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86lTJFI",
    "title": "Support global endpoint filters and metadata on WebApplication",
    "url": "https://github.com/dotnet/aspnetcore/issues/59755",
    "createdAt": "2025-01-07T16:26:35Z",
    "lastUpdated": "2025-01-21T21:24:05Z",
    "body": "## Background and Motivation\n\nIn the past, there have been requests to support adding endpoint filters at the global level (see https://github.com/dotnet/aspnetcore/issues/43237). More recently, the need for global filters has emerged as part of the work to support a source generator-based validation implementation in minimal APIs (see https://github.com/dotnet/aspnetcore/issues/46349).\n\nEndpoint filters are implemented on top of ASP.NET Core\u0027s conventions API and the \u0060IEndpointConventionBuilder\u0060. To support global filters, we\u0027ll need to expose an API for accessing an underlying \u0060IEndpointConventionBuilder\u0060 on the top-level \u0060WebApplication\u0060.\n\n## Proposed API\n\n\u0060\u0060\u0060diff\n// Assembly: Microsoft.AspNetCore\nnamespace Microsoft.AspNetCore.Builder;\n\npublic sealed class WebApplication : IHost, IApplicationBuilder, IEndpointRouteBuilder, IAsyncDisposable\n{\n\u002B  public IEndpointConventionBuilder Conventions { get; }\n}\n\u0060\u0060\u0060\n\n## Usage Examples\n\n\u0060\u0060\u0060csharp\nvar app = WebApplication.Create();\n\n// Register parameter validations for minimal APIs globally\napp.Conventions.WithValidation();\n\n// Disable anti-forgery checks on form-based endpoints during development\nif (app.Environment.IsDevelopment())\n{\n  app.Conventions.DisableAntiforgery();\n}\n\n// Require authorization on all endpoints in the application\napp.Conventions.RequireAuthorization();\n\napp.MapGet(\u0022/\u0022, () =\u003E \u0022Hello world!\u0022);\n\napp.Run();\n\u0060\u0060\u0060\n\n## Alternative Designs\n\nInstead of exposing the \u0060IEndpointConventionBuilder\u0060 as a property on the \u0060WebApplication\u0060 class, we can consider implementing the \u0060IEndpointConventionBuilder\u0060 interface directly on the class.\n\n\u0060\u0060\u0060diff\n// Assembly: Microsoft.AspNetCore\nnamespace Microsoft.AspNetCore.Builder;\n\npublic sealed class WebApplication : IHost, IApplicationBuilder, IEndpointRouteBuilder, IAsyncDisposable, IEndpointConventionBuilder\n{\n\u002B  public void Add(Action\u003CEndpointBuilder\u003E convention) { }\n\u002B  public void Finally(Action\u003CEndpointBuilder\u003E finallyConvention) { }\n}\n\u0060\u0060\u0060\n\nHowever, there\u0027s hesitation around having \u0060WebApplication\u0060 implement the \u0060IEndpointConventionBuilder\u0060 which is an interface with multiple extension methods ([ref](https://source.dot.net/#Microsoft.AspNetCore.Http.Abstractions/Extensions/IEndpointConventionBuilder.cs,8053f043ef3727d0,references)) that might pollute the API surface for the \u0060WebApplication\u0060. Isolating these extension methods to a property keeps the Intellisense on \u0060WebApplication\u0060 clean. On the other hand, there are discoverability questions around the \u0060Conventions\u0060 property.\n\nAlternatively, we can consider exposing a deconstructor on the \u0060WebApplication\u0060 class that allows the user to pull out the underlying \u0060IEndpointConventionBuillder\u0060.\n\n\u0060\u0060\u0060diff\n// Assembly: Microsoft.AspNetCore\nnamespace Microsoft.AspNetCore.Builder;\n\npublic sealed class WebApplication : IHost, IApplicationBuilder, IEndpointRouteBuilder, IAsyncDisposable\n{\n\u002B  public void Deconstruct(out IEndpointConventionBuilder conventions) { }\n}\n\u0060\u0060\u0060\n\n## Risks\n\n- The name \u0060Conventions\u0060 comes from an implementation details of the framework and is not as familiar to users as related terms like \u0022filter\u0022 and \u0022metadata\u0022, which map to conventions under the hood. This might impact the discoverability of this feature.\n- Supporting global filters on WebApplication means that users will need to understand the distinction between global middleware and global filters. We\u0027ll need to make sure that the distinction is clear to users who might not be familiar with the different pipelines.\n- Since conventions are global and applied to all \u0060RouteEndpoints\u0060 there is a chance that users can use the API in a way that results in non-sensical permutations. For example, a user can invoke \u0060app.Conventions.WithGroupName(\u0022global\u0022)\u0060 to add a global group name to all endpoints. This concept only makes sense in endpoints that use link-generation or OpenAPI and would be non-sensical of Blazor or SignalR endpoints.\n\n",
    "upvotes": 0,
    "labels": [
      "api-ready-for-review",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86Zhodj",
        "parentId": null,
        "author": "dotnet-policy-service",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.\n\u003C!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003E",
        "createdAt": "2025-01-07T16:28:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59755#issuecomment-2575730531"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86lYuwq",
    "title": "Response OpenApiOperation metadata with minimal api",
    "url": "https://github.com/dotnet/aspnetcore/issues/59769",
    "createdAt": "2025-01-08T08:52:45Z",
    "lastUpdated": "2025-01-22T07:57:34Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen you set as metadata using minimal api an OpenApiOperation, it is overwritten by the one created using reflection which is very bothering using trimming features and it looses data.\n\n### Expected Behavior\n\nWhen set it is just read and potentially a toggle could enable to merge reflection and custom model but minimal expected behavior would be to respect user data.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "Needs: Attention :wave:",
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86a6YW3",
        "parentId": null,
        "author": "mikekistler",
        "content": "@rmannibucau Could you please explain a bit more about what you are trying to accomplish and what isn\u0027t working they way you expect? Steps to reproduce would be very helpful for diagnosing this issue.",
        "createdAt": "2025-01-17T18:49:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59769#issuecomment-2598995383"
      },
      {
        "id": "IC_kwDOAQzde86bXHR1",
        "parentId": null,
        "author": "rmannibucau",
        "content": "Hi @mikekistler , I expected to pass the full \u0060OpenApiOperation\u0060 using \u0060WithMetadata\u0060 API and ignore any reflection and endpoint analyzis in a minimal API AOT project. This had the big advantage for me to couple the endpoint and doc without requiring the openapi extension to analyze right the endpoint. One thing it enables it to use \u0060HttpContext\u0060 only parameter for example and no source generator.\n\nHowever, the \u0060OpenApiOperation\u0060 is overriden by the rest of the OpenAPI generation backbone (to use \u0060MethodInfo\u0060).\n\nSo idea would be to ignore reflection if \u0060OpenApiOperation\u0060 is there and complete enough.",
        "createdAt": "2025-01-22T07:57:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59769#issuecomment-2606527605"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86lsA8L",
    "title": "[dotnet-sdk-10.0.100-alpha.1.25057.15] CleanArchitecture1 get error: System.TypeLoadException: Method \u0027get_Description\u0027 in type \u0027FastEndpoints.ProducesResponseTypeMetadata\u0027 from assembly FastEndpoints does not have an implementation.",
    "url": "https://github.com/dotnet/aspnetcore/issues/59804",
    "createdAt": "2025-01-10T10:02:37Z",
    "lastUpdated": "2025-01-22T10:16:48Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen run the 3rd party application with the latest .NET 10 build, it failed with error: \u0060\u0060\u0060System.TypeLoadException: Method \u0027get_Description\u0027 in type \u0027FastEndpoints.ProducesResponseTypeMetadata\u0027 from assembly \u0027FastEndpoints, Version=5.27.0.0, Culture=neutral, PublicKeyToken=null\u0027 does not have an implementation\u0060\u0060\u0060.\n\n**Application Name**: CleanArchitecture1\n**OS**\uFF1A Windows 10 22H2\n**CPU**: X64\n**.NET Build Number**: dotnet-sdk-10.0.100-alpha.1.25057.15\n**App \u0026 Source Location checking at**: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2338907\n**Github Link**: https://github.com/ardalis/CleanArchitecture\n\n**Verify Scenarios**:\n1). Windows 10 22H2 AMD64 \u002B dotnet-sdk-9.0.102: Pass\n2). Windows 10 22H2 AMD64 \u002B dotnet-sdk-10.0.100-alpha.1.25057.15: Fail\n\n### Expected Behavior\n\nLaunch successfully.\n\n### Steps To Reproduce\n\n**App Repro Steps:**\n1. Copy AppSource\\SourceShare\\CleanArchitecture1to your local machine .\n2. Open \u0022CleanArchitecture1\\App\\CleanArchitecture1\\Clean.Architecture.Web.runtimeconfig.json\u0022 file .\n3. Change the \u0022Clean.Architecture.Web.runtimeconfig.json\u0022 file to let the app run against with\n\u0060\u0060\u0060\ndotnet-sdk-10.0.100-alpha.1.25057.15.\n    \u0022frameworks\u0022: [\n     {\n        \u0022name\u0022: \u0022Microsoft.NETCore.App\u0022,\n        \u0022version\u0022: \u002210.0.0-alpha.1.25052.4\u0022\n      },\n      {\n        \u0022name\u0022: \u0022Microsoft.AspNetCore.App\u0022,\n        \u0022version\u0022: \u002210.0.0-alpha.2.25056.9\u0022\n      }\n    ]\n\u0060\u0060\u0060\n4. Run the \u201DCleanArchitecture1\\App\\CleanArchitecture1\\Clean.Architecture.Web.exe\u201D.\n5. Open edge and go to \u0022http://localhost:5000/swagger/index.html\u0022.\n\n**Expected Result:**\nLaunch successfully.\n\n**Actual Result:**\nLaunch failed with error: \n\u0060\u0060\u0060\nSystem.TypeLoadException: Method \u0027get_Description\u0027 in type \u0027FastEndpoints.ProducesResponseTypeMetadata\u0027 from assembly \u0027FastEndpoints, Version=5.27.0.0, Culture=neutral, PublicKeyToken=null\u0027 does not have an implementation.\n\u0060\u0060\u0060\n**Minimal Repro steps (Demo attached:[WebApiDemo.zip](https://github.com/user-attachments/files/18375104/WebApiDemo.zip)):**\n1. Create a default8.0 asp web api.\n2. Install FastEndpoints.Swagger 5.33.0.0.\n3. Copy the following code to replace code in Program.cs.\n\u0060\u0060\u0060\nusing FastEndpoints;\nusing FastEndpoints.Swagger;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddFastEndpoints().SwaggerDocument();\nvar app = builder.Build();\napp.UseFastEndpoints().UseSwaggerGen();\napp.Run();\n\u0060\u0060\u0060\n4. Create MyEndpoint.cs with below code.\n\u0060\u0060\u0060\nusing FastEndpoints;\nnamespace WebApiDemo\n{\n    public class MyEndpoint : Endpoint\u003CMyRequest, MyResponse\u003E\n    {\n        public override void Configure()\n        {\n            Post(\u0022/Test\u0022);\n            Description(b =\u003E b.ProducesProblemDetails(400));\n        }\n        public override async Task HandleAsync(MyRequest r, CancellationToken c)\n        {\n            await SendAsync(new()\n            {\n                Name = \u0022Test\u0022\n            });\n        }\n    }\n    public class MyRequest\n    {\n        public int Id { get; set; }\n    }\n    public class MyResponse\n    {\n        public string Name { get; set; }\n    }\n}\n\u0060\u0060\u0060\n5. Publish the app with command \u0022dotnet publish\u0022.\n6. Change the runtime.config file to let the app run against with dotnet-sdk-10.0.100-alpha.1.25057.15.\n\u0060\u0060\u0060\n    \u0022frameworks\u0022: [\n     {\n        \u0022name\u0022: \u0022Microsoft.NETCore.App\u0022,\n        \u0022version\u0022: \u002210.0.0-alpha.1.25052.4\u0022\n      },\n      {\n        \u0022name\u0022: \u0022Microsoft.AspNetCore.App\u0022,\n        \u0022version\u0022: \u002210.0.0-alpha.2.25056.9\u0022\n      }\n    ]\n\u0060\u0060\u0060\n6. Launch the app by WebApiDemo.exe.\n7. Open edge and go to \u0022http://localhost:5000/swagger/index.html\u0022.\n\n**Expected Result:**\nLaunch successfully.\n\n### Exceptions (if any)\n\n**Actual Result:**\nLaunch failed with error: \n\u0060\u0060\u0060System.TypeLoadException: Method \u0027get_Description\u0027 in type \u0027FastEndpoints.ProducesResponseTypeMetadata\u0027 from assembly \u0027FastEndpoints, Version=5.33.0.0, Culture=neutral, PublicKeyToken=null\u0027 does not have an implementation.\u0060\u0060\u0060\n\n### .NET Version\n\n10.0.100-alpha.1.25057.15\n\n### Anything else?\n\n**Dotnet info:**\n\u0060\u0060\u0060\n.NET SDK:\n Version:           10.0.100-alpha.1.25057.15\n Commit:            39da6dde11\n Workload version:  10.0.100-manifests.a166a9cf\n MSBuild version:   17.14.0-preview-25056-07\u002B8d395fd27\n\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.19045\n OS Platform: Windows\n RID:         win-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\10.0.100-alpha.1.25057.15\\\n\nHost:\n  Version:      10.0.0-alpha.1.25052.4\n  Architecture: x64\n  Commit:       efdd299533\n\n.NET SDKs installed:\n  10.0.100-alpha.1.25057.15 [C:\\Program Files\\dotnet\\sdk]\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 10.0.0-alpha.2.25056.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 10.0.0-alpha.1.25052.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.WindowsDesktop.App 10.0.0-alpha.1.25056.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n\n\u0060\u0060\u0060\n@dotnet-actwx-bot @dotnet/compat",
    "upvotes": 0,
    "labels": [
      "External",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86aGySS",
        "parentId": null,
        "author": "maritogram",
        "content": "It seems that FastEndpoints (version 5.33.0) uses its own implementation of IProducesResponseTypeMetadata from AspNetCore, however that interface was recently changed to include a Description property. This means that trying to cast (with the newest build) the interface into FastEndpoints\u0027 custom type will not work as it does not yet implement that Description property. I don\u0027t think this is an issue related to ASP.NET Core itself. \n\n",
        "createdAt": "2025-01-11T22:49:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59804#issuecomment-2585470098"
      },
      {
        "id": "IC_kwDOAQzde86bYQvQ",
        "parentId": null,
        "author": "Junjun-zhao",
        "content": "Thank you @maritogram ,@gfoidl. We will file an issue to the app owner to notify him/her about this change.  Is this an intentional by design change or breaking change?",
        "createdAt": "2025-01-22T10:16:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59804#issuecomment-2606828496"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86luRqP",
    "title": "OpenAPI document generation should emit documents with deterministic structure",
    "url": "https://github.com/dotnet/aspnetcore/issues/59809",
    "createdAt": "2025-01-10T14:53:20Z",
    "lastUpdated": "2025-01-14T23:02:15Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nThe OpenAPI document currently generated by .NET has a non-deterministic ordering of certain features such as path items, tag objects, and possibly other elements. This is problematic in situations where the OpenAPI document is generated at build time and committed to source control, because a small change in the app could generate a diff in the OpenAPI document that is simply a reordering of elements.\n\nAn example of the problem is [this PR in the eShop project], where the diff of the \u0060src/Catalog.API/Catalog.API.json\u0060 file shows:\n\n\u0060\u0060\u0060text\n\u003Egit diff --stat main src/Catalog.API/Catalog.API.json \n src/Catalog.API/Catalog.API.json | 602 \u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B\u002B--------------------------------------------------------------------------------------\n 1 file changed, 306 insertions(\u002B), 296 deletions(-)\n\u0060\u0060\u0060\n\nbut by sorting the files with jq, we can see that the substantive changes are _much_ smaller:\n\n\u0060\u0060\u0060text\n\u003Ediff \u003C(git show main:src/Catalog.API/Catalog.API.json | jq --sort-keys .) \u003C(jq --sort-keys . src/Catalog.API/Catalog.API.json) \n379a380,389\n\u003E           \u0022400\u0022: {\n\u003E             \u0022content\u0022: {\n\u003E               \u0022application/json\u0022: {\n\u003E                 \u0022schema\u0022: {\n\u003E                   \u0022$ref\u0022: \u0022#/components/schemas/ProblemDetails\u0022\n\u003E                 }\n\u003E               }\n\u003E             },\n\u003E             \u0022description\u0022: \u0022Bad Request\u0022\n\u003E           },\n968,970d977\n\u003C       \u0022name\u0022: \u0022Search\u0022\n\u003C     },\n\u003C     {\n974a982,984\n\u003E     },\n\u003E     {\n\u003E       \u0022name\u0022: \u0022Search\u0022\n\u0060\u0060\u0060\n\nHere only the 400 response is substantive -- the other change is a recording of the tag objects which isn\u0027t remedied by the --sort-keys feature of jq.\n\n### Describe the solution you\u0027d like\n\nThe framework should generate the OpenAPI document with a deterministic structure, such that changes to the app will produce a new document with minimal and only \u0022substantive\u0022 changes in the textual diff. \n\n### Additional context\n\n_No response_",
    "upvotes": 2,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86ac9K6",
        "parentId": null,
        "author": "mikekistler",
        "content": "More information on this: I was able to write a transformer that minimizes the diff of the V1 API document in eShop. The transformer:\n- Reorders the Path items to be sorted by path\n- Reorders the operations in each Path Item in a fixed order (get, post, put, patch, delete, head, options)\n- Reorders the entries of the global tags field to be ordered by tag name.\n\nI\u0027ll publish this transformer in my [aspnet-transformers-gallery](https://github.com/mikekistler/aspnet-transformer-gallery) project shortly. Users needing this support can use the transformer until we add the support directly in the framework.",
        "createdAt": "2025-01-14T23:02:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59809#issuecomment-2591281850"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86muHNR",
    "title": "Add better warnings about WithOpenApi potentially being useless",
    "url": "https://github.com/dotnet/aspnetcore/issues/59927",
    "createdAt": "2025-01-18T18:04:31Z",
    "lastUpdated": "2025-01-18T18:10:21Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nHi!\n\nIn https://github.com/dotnet/aspnetcore/issues/59180 the following is said:\n\n\u003E Prior to .NET 9, we supported a WithOpenApi extension method on that when invoked would generate an OpenApiOperation, inject it into endpoint metadata, then rely on consuming OpenAPI implementations like Swashbuckle to pluck this OpenApiOperation and integrate it into the document that was being generated.\n\u003E When we introduced built-in OpenAPI support in .NET 9, we opted not to bring in support for this strategy and instead steer people towards the new IOpenApiOperationTransformer abstraction for making modifications to their OpenAPI document.\n\nI\u0027ve been playing around a lot with \u0060Microsoft.AspNetCore.OpenApi\u0060. I tried to use \u0060WithOpenApi\u0060 to edit some parameter descriptions, change operation responses, etc... It seemed a lot easier than creating a global transformer (which is why I am so happy about #59180 !). I was pulling my hair out, because it didn\u0027t work at all. The debugger told me things were being added to the OpenAPI definitions, but they weren\u0027t showing up in the document.\n\nThen, by chance, I read the XML comments: \n\n\u003E This method does not integrate with built-in OpenAPI document generation support in ASP.NET Core and is primarily intended for consumption along-side Swashbuckle.AspNetCore.\n\nNow that \u0060Microsoft.AspNetCore.OpenAPI\u0060 supports document generation, it\u0027s really weird that \u0060WithOpenApi\u0060 does not play along.\nThis cost me quite a bit of time. The fact that I had to find it in the XML comments is not obvious enough.\n\nTherefore, I believe we should do better than XML comments.\n\n### Describe the solution you\u0027d like\n\n## Analyzer\nTherefore, I believe we should consider either adding an analyzer that warns people about \u0060WithOpenApi\u0060 being a no-op when **only** using **Microsoft.AspNetCore.OpenApi**.\n\nThis way it\u0027s way more obvious when you\u0027re doing something wrong. It will save a lot of time and frustration.\n\n## Deprecation\nPerhaps we should even deprecate \u0060WithOpenApi\u0060 and let Swashbuckle/NSwag deal with this on their own? This would be a breaking change, though.. But maybe for the best? \n\nI really wonder why ASP.NET Core\u0027s own OpenAPI generation library should have methods that are only used by 3rd party libraries.\nNow that Swashbuckle\u0027s not included by default anymore, \u0060WithOpenApi\u0060 is code that is included in most (new) ASP.NET Core projects that won\u0027t _do_ anything, and _can_ only cause confusion. I do not remember anything like this in ASP.NET Core\u0027s public API like this, though that may also be ignorance.\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86m5ob1",
    "title": "OpenAPI generator creates incorrect references for different polymorphic types with the same structure",
    "url": "https://github.com/dotnet/aspnetcore/issues/59969",
    "createdAt": "2025-01-20T19:09:21Z",
    "lastUpdated": "2025-01-25T14:59:00Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen dealing with different polymorphic type hierarchies, if two types happen to have the same name and structure, the OpenAPI generator does a type cross-reference and misses to generate the other type schema.\n\n\u0060\u0060\u0060csharp\n// TurtleEvent.cs\n[JsonDerivedType(typeof(Added), typeDiscriminator: \u0022added\u0022)]\n[JsonDerivedType(typeof(SlowedDown), typeDiscriminator: \u0022slowedDown\u0022)]\npublic abstract record TurtleEvent(DateTime Timestamp)\n{\n    public sealed record Added(DateTime Timestamp, int Id) : TurtleEvent(Timestamp);\n\n    public sealed record SlowedDown(DateTime Timestamp) : TurtleEvent(Timestamp);\n}\n\n// BearEvent.cs\n[JsonDerivedType(typeof(Added), typeDiscriminator: \u0022added\u0022)]\n[JsonDerivedType(typeof(Angered), typeDiscriminator: \u0022angered\u0022)]\npublic abstract record BearEvent(DateTime Timestamp)\n{\n    public sealed record Added(DateTime Timestamp, int Id) : BearEvent(Timestamp);\n\n    public sealed record Angered(DateTime Timestamp) : BearEvent(Timestamp);\n}\n\u0060\u0060\u0060\n\n\u0060TurtleEvent.Added\u0060 and \u0060BearEvent.Added\u0060 have the same name and value for the type discriminator. They also have two other properties with the same name and type, but they\u0027re part of different hierarchies.\n\nThis is the generated schema:\n\n\u0060\u0060\u0060json\n{\n  \u0022openapi\u0022: \u00223.0.1\u0022,\n  \u0022info\u0022: {\n    \u0022title\u0022: \u0022Api | v1\u0022,\n    \u0022version\u0022: \u00221.0.0\u0022\n  },\n  \u0022servers\u0022: [\n    {\n      \u0022url\u0022: \u0022http://localhost:5139\u0022\n    }\n  ],\n  \u0022paths\u0022: {\n    \u0022/turtle-events\u0022: {\n      \u0022get\u0022: {\n        \u0022tags\u0022: [\n          \u0022Api\u0022\n        ],\n        \u0022operationId\u0022: \u0022GetTurtleEvents\u0022,\n        \u0022responses\u0022: {\n          \u0022200\u0022: {\n            \u0022description\u0022: \u0022OK\u0022,\n            \u0022content\u0022: {\n              \u0022application/json\u0022: {\n                \u0022schema\u0022: {\n                  \u0022$ref\u0022: \u0022#/components/schemas/GetTurtleEventsResponse\u0022\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \u0022/bear-events\u0022: {\n      \u0022get\u0022: {\n        \u0022tags\u0022: [\n          \u0022Api\u0022\n        ],\n        \u0022operationId\u0022: \u0022GetBearEvents\u0022,\n        \u0022responses\u0022: {\n          \u0022200\u0022: {\n            \u0022description\u0022: \u0022OK\u0022,\n            \u0022content\u0022: {\n              \u0022application/json\u0022: {\n                \u0022schema\u0022: {\n                  \u0022$ref\u0022: \u0022#/components/schemas/GetBearEventsResponse\u0022\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \u0022components\u0022: {\n    \u0022schemas\u0022: {\n      \u0022BearEvent\u0022: {\n        \u0022required\u0022: [\n          \u0022$type\u0022\n        ],\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022anyOf\u0022: [\n          {\n            \u0022$ref\u0022: \u0022#/components/schemas/TurtleEventAdded\u0022\n          },\n          {\n            \u0022$ref\u0022: \u0022#/components/schemas/BearEventAngered\u0022\n          }\n        ],\n        \u0022discriminator\u0022: {\n          \u0022propertyName\u0022: \u0022$type\u0022,\n          \u0022mapping\u0022: {\n            \u0022added\u0022: \u0022#/components/schemas/BearEventAdded\u0022,\n            \u0022angered\u0022: \u0022#/components/schemas/BearEventAngered\u0022\n          }\n        }\n      },\n      \u0022BearEventAngered\u0022: {\n        \u0022required\u0022: [\n          \u0022timestamp\u0022\n        ],\n        \u0022properties\u0022: {\n          \u0022$type\u0022: {\n            \u0022enum\u0022: [\n              \u0022angered\u0022\n            ],\n            \u0022type\u0022: \u0022string\u0022\n          },\n          \u0022timestamp\u0022: {\n            \u0022type\u0022: \u0022string\u0022,\n            \u0022format\u0022: \u0022date-time\u0022\n          }\n        }\n      },\n      \u0022GetBearEventsResponse\u0022: {\n        \u0022required\u0022: [\n          \u0022events\u0022\n        ],\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022events\u0022: {\n            \u0022type\u0022: \u0022array\u0022,\n            \u0022items\u0022: {\n              \u0022$ref\u0022: \u0022#/components/schemas/BearEvent\u0022\n            }\n          }\n        }\n      },\n      \u0022GetTurtleEventsResponse\u0022: {\n        \u0022required\u0022: [\n          \u0022events\u0022\n        ],\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022events\u0022: {\n            \u0022type\u0022: \u0022array\u0022,\n            \u0022items\u0022: {\n              \u0022$ref\u0022: \u0022#/components/schemas/TurtleEvent\u0022\n            }\n          }\n        }\n      },\n      \u0022TurtleEvent\u0022: {\n        \u0022required\u0022: [\n          \u0022$type\u0022\n        ],\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022anyOf\u0022: [\n          {\n            \u0022$ref\u0022: \u0022#/components/schemas/TurtleEventAdded\u0022\n          },\n          {\n            \u0022$ref\u0022: \u0022#/components/schemas/TurtleEventSlowedDown\u0022\n          }\n        ],\n        \u0022discriminator\u0022: {\n          \u0022propertyName\u0022: \u0022$type\u0022,\n          \u0022mapping\u0022: {\n            \u0022added\u0022: \u0022#/components/schemas/TurtleEventAdded\u0022,\n            \u0022slowedDown\u0022: \u0022#/components/schemas/TurtleEventSlowedDown\u0022\n          }\n        }\n      },\n      \u0022TurtleEventAdded\u0022: {\n        \u0022required\u0022: [\n          \u0022id\u0022,\n          \u0022timestamp\u0022\n        ],\n        \u0022properties\u0022: {\n          \u0022$type\u0022: {\n            \u0022enum\u0022: [\n              \u0022added\u0022\n            ],\n            \u0022type\u0022: \u0022string\u0022\n          },\n          \u0022id\u0022: {\n            \u0022type\u0022: \u0022integer\u0022,\n            \u0022format\u0022: \u0022int32\u0022\n          },\n          \u0022timestamp\u0022: {\n            \u0022type\u0022: \u0022string\u0022,\n            \u0022format\u0022: \u0022date-time\u0022\n          }\n        }\n      },\n      \u0022TurtleEventSlowedDown\u0022: {\n        \u0022required\u0022: [\n          \u0022timestamp\u0022\n        ],\n        \u0022properties\u0022: {\n          \u0022$type\u0022: {\n            \u0022enum\u0022: [\n              \u0022slowedDown\u0022\n            ],\n            \u0022type\u0022: \u0022string\u0022\n          },\n          \u0022timestamp\u0022: {\n            \u0022type\u0022: \u0022string\u0022,\n            \u0022format\u0022: \u0022date-time\u0022\n          }\n        }\n      }\n    }\n  },\n  \u0022tags\u0022: [\n    {\n      \u0022name\u0022: \u0022Api\u0022\n    }\n  ]\n}\n\u0060\u0060\u0060\n\nIt mentions \u0060BearEvent\u0060 as being any of \u0060#/components/schemas/TurtleEventAdded\u0060 and \u0060#/components/schemas/BearEventAngered\u0060, though the discriminator mapping is correct - \u0060\u0022added\u0022: \u0022#/components/schemas/BearEventAdded\u0022\u0060. However, \u0060#/components/schemas/BearEventAdded\u0060 is not present in the document.\n\n### Expected Behavior\n\nI expected \u0060#/components/schemas/BearEventAdded\u0060 to be generated and \u0060BearEvent\u0060 to be any of \u0060#/components/schemas/BearEventAdded\u0060 and \u0060#/components/schemas/BearEventAngered\u0060.\n\n### Steps To Reproduce\n\nhttps://github.com/dotneutron/dotnet9-open-api-polymorphic-types\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.100\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86m_tmu",
    "title": "MS OpenAPI does not generate a valid schema for nullable complex properties",
    "url": "https://github.com/dotnet/aspnetcore/issues/59976",
    "createdAt": "2025-01-21T12:31:59Z",
    "lastUpdated": "2025-01-25T14:38:21Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nThe new OpenAPI support for ASP.NET Core projects generates semantic errors for some types, specifically for $ref entries. The sample below reproduces the issue: one of the properties gets the following ref:  \u0022$ref\u0022 \u0022#/components/schemas/#/properties/locaisRemover/items/properties/locais\u0022 which produces invalid description.\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\nHere\u0027s a sample that reproduces the issue by using and :\n\n\u0060\u0060\u0060\nusing Microsoft.AspNetCore.Http.HttpResults;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\n// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi\nbuilder.Services.AddOpenApi( );\nvar app = builder.Build( );\n\n// Configure the HTTP request pipeline.\nif( app.Environment.IsDevelopment( ) ) {\n    app.MapOpenApi( );\n}\napp.UseHttpsRedirection( );\n\napp.MapPut(\u0022/test\u0022,\n           (MsgMovimentacaoLocaisTrabalho msg) =\u003E Results.Ok( ))\n   .WithName(\u0022GetWeatherForecast\u0022);\n\napp.Run( );\n\n\npublic class MsgMovimentacaoLocaisTrabalho {    \n    public IList\u003CInfoGeral\u003E? LocaisRemover { get; set; }\n    public InfoGeral? LocaisAssociar { get; set; }\n}\n\npublic class InfoGeral {    \n    public Guid GuidDirecao { get; set; }\n    public IEnumerable\u003Cint\u003E Locais { get; set; } = Enumerable.Empty\u003Cint\u003E();\n}\n\u0060\u0060\u0060\n\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.101\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86nVYAf",
    "title": "Incorrect OpenAPI document generation with recursive object that contains a list",
    "url": "https://github.com/dotnet/aspnetcore/issues/60012",
    "createdAt": "2025-01-23T16:41:07Z",
    "lastUpdated": "2025-01-25T14:39:03Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nIn a .NET 9.0.1 Minimal API project with Microsoft.AspNetCore.OpenApi, I have the following endpoint, returning a recursive object that also contains a list:\n\n\u0060\u0060\u0060csharp\napp.MapGet(\u0022/api/categories\u0022, () =\u003E\n{\n    return TypedResults.Ok(new Category { Name = \u0022My Category\u0022 });\n});\n\npublic class Category\n{\n    public required string Name { get; set; }\n\n    public Category? Parent { get; set; }\n\n    public IEnumerable\u003CTag\u003E Tags { get; set; } = [];\n}\n\npublic class Tag\n{\n    public required string Name { get; set; }\n}\n\u0060\u0060\u0060\n\nWith this code, the OpenAPI definition is wrong:\n\n\u0060\u0060\u0060json\n\u0022components\u0022: {\n    \u0022schemas\u0022: {\n      \u0022Category\u0022: {\n        \u0022required\u0022: [\n          \u0022name\u0022\n        ],\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022name\u0022: {\n            \u0022type\u0022: \u0022string\u0022\n          },\n          \u0022parent\u0022: {\n            \u0022$ref\u0022: \u0022#/components/schemas/Category\u0022\n          },\n          \u0022tags\u0022: {\n            \u0022$ref\u0022: \u0022#/components/schemas/#/properties/parent/properties/tags\u0022\n          }\n        }\n      }\n    }\n}\n\u0060\u0060\u0060\n\nIf I remove the \u0060Parent\u0060 property from \u0060Category\u0060, the document is correctly generated:\n\n\u0060\u0060\u0060csharp\n\u0022components\u0022: {\n\t\u0022schemas\u0022: {\n\t  \u0022Category\u0022: {\n\t\t\u0022required\u0022: [\n\t\t  \u0022name\u0022\n\t\t],\n\t\t\u0022type\u0022: \u0022object\u0022,\n\t\t\u0022properties\u0022: {\n\t\t  \u0022name\u0022: {\n\t\t\t\u0022type\u0022: \u0022string\u0022\n\t\t  },\n\t\t  \u0022tags\u0022: {\n\t\t\t\u0022type\u0022: \u0022array\u0022,\n\t\t\t\u0022items\u0022: {\n\t\t\t  \u0022$ref\u0022: \u0022#/components/schemas/Tag\u0022\n\t\t\t}\n\t\t  }\n\t\t}\n\t  },\n\t  \u0022Tag\u0022: {\n\t\t\u0022required\u0022: [\n\t\t  \u0022name\u0022\n\t\t],\n\t\t\u0022type\u0022: \u0022object\u0022,\n\t\t\u0022properties\u0022: {\n\t\t  \u0022name\u0022: {\n\t\t\t\u0022type\u0022: \u0022string\u0022\n\t\t  }\n\t\t}\n\t  }\n\t}\n}\n\u0060\u0060\u0060\n\nNote that the issue happens even when using a primitive type for the collection (for example \u0060string\u0060).\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\nMinimal repro at https://github.com/marcominerva/RecursiveObjectIssue.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.102\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86broIl",
        "parentId": null,
        "author": "nanny07",
        "content": "I found out that if you invert the position of the two properties, putting the \u0022Tags\u0022 first and then \u0022Parent\u0022, it all works as expected\n\n\u0060\u0060\u0060json\n\u0022components\u0022: {\n    \u0022schemas\u0022: {\n      \u0022Category\u0022: {\n        \u0022required\u0022: [\n          \u0022name\u0022\n        ],\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022name\u0022: {\n            \u0022type\u0022: \u0022string\u0022\n          },\n          \u0022tags\u0022: {\n            \u0022type\u0022: \u0022array\u0022,\n            \u0022items\u0022: {\n              \u0022$ref\u0022: \u0022#/components/schemas/Tag\u0022\n            }\n          },\n          \u0022parent\u0022: {\n            \u0022$ref\u0022: \u0022#/components/schemas/Category\u0022\n          }\n        }\n      },\n      \u0022Tag\u0022: {\n        \u0022required\u0022: [\n          \u0022name\u0022\n        ],\n        \u0022type\u0022: \u0022object\u0022,\n        \u0022properties\u0022: {\n          \u0022name\u0022: {\n            \u0022type\u0022: \u0022string\u0022\n          }\n        }\n      }\n    }\n  },\n  \u0022tags\u0022: [\n    {\n      \u0022name\u0022: \u0022RecursiveObjectIssue\u0022\n    }\n  ]\n\u0060\u0060\u0060",
        "createdAt": "2025-01-24T08:07:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/60012#issuecomment-2611905061"
      },
      {
        "id": "IC_kwDOAQzde86bzkcv",
        "parentId": null,
        "author": "mikekistler",
        "content": "This looks like it might be a dup of #59976",
        "createdAt": "2025-01-25T14:39:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/60012#issuecomment-2613987119"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86ngDWn",
    "title": "OpenApi document generation is broken",
    "url": "https://github.com/dotnet/aspnetcore/issues/60026",
    "createdAt": "2025-01-24T19:00:48Z",
    "lastUpdated": "2025-01-24T20:46:14Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen publishing the \u0060TodosApi\u0060 benchmark in https://github.com/aspnet/Benchmarks/tree/main/src/BenchmarksApps/TodosApi I\u0027m getting the following build error:\n\n\u0060\u0060\u0060\n\u276F \\git\\aspnetcore\\.dotnet\\dotnet.exe publish TodosApi.csproj -c Release --disable-build-servers /p:MicrosoftNETCoreAppPackageVersion=10.0.0-alpha.1.25072.13 /p:MicrosoftAspNetCoreAppPackageVersion=10.0.0-alpha.2.25073.4 /p:GenerateErrorForMissingTargetingPacks=false /p:RestoreNoCache=true /p:MicrosoftWindowsDesktopAppPackageVersion=10.0.0-alpha.1.25073.1 /p:MicrosoftNETPlatformLibrary=Microsoft.NETCore.App /p:PublishAot=false /p:EnableRequestDelegateGenerator=false --framework net10.0 --self-contained -r win-x64 /bl\nYou are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy\n  TodosApi net10.0 failed with 2 error(s) (0.6s) \u2192 bin\\Release\\net10.0\\win-x64\\TodosApi.dll\n    D:\\packages\\NuGet\\cache\\microsoft.extensions.apidescription.server\\10.0.0-alpha.2.25073.4\\build\\Microsoft.Extensions.ApiDescription.Server.targets(68,5): error : Could not execute because the specified command or file was not found.\n    D:\\packages\\NuGet\\cache\\microsoft.extensions.apidescription.server\\10.0.0-alpha.2.25073.4\\build\\Microsoft.Extensions.ApiDescription.Server.targets(68,5): error MSB3073: The command \u0022dotnet \u0022D:\\packages\\NuGet\\cache\\microsoft.extensions.apidescription.server\\10.0.0-alpha.2.25073.4\\build\\../tools/dotnet-getdocument.dll\u0022 --assembly \u0022D:\\git\\Benchmarks\\src\\BenchmarksApps\\TodosApi\\bin\\Release\\net10.0\\win-x64\\TodosApi.dll\u0022 --file-list \u0022obj\\TodosApi.OpenApiFiles.cache\u0022 --framework \u0022.NETCoreApp,Version=v10.0\u0022 --output \u0022D:\\git\\Benchmarks\\src\\BenchmarksApps\\TodosApi\u0022 --project \u0022TodosApi\u0022 --assets-file \u0022D:\\git\\Benchmarks\\src\\BenchmarksApps\\TodosApi\\obj\\project.assets.json\u0022 --platform \u0022x64\u0022 --runtime \u0022win-x64 --self-contained\u0022 \u0022 exited with code 1.\n\u0060\u0060\u0060\n\nThe problem appears to be that the \u0060dotnet-getdocument.dll\u0060 file is not found in the \u0060microsoft.extensions.apidescription.server\u0060 nuget package under \u0060tools\u0060 directory. This may have been caused by https://github.com/dotnet/aspnetcore/commit/d4880ed4160b476346850ac653ce4b829ab09c94.\n\ncc @captainsafia \n\n### Expected Behavior\n\nThe TodosApi project should publish successfully.\n\n### Steps To Reproduce\n\n1. Clone and \u0060cd\u0060 into https://github.com/aspnet/Benchmarks/tree/main/src/BenchmarksApps/TodosApi\n2. Change the \u0060TargetFramework\u0060 of the project to \u0060net10.0\u0060\n3. Get the latest .NET 10 SDK daily build\n4. Run the following command:\n\n\u0060\u0060\u0060sh\ndotnet.exe publish TodosApi.csproj -c Release --disable-build-servers /p:MicrosoftNETCoreAppPackageVersion=10.0.0-alpha.1.25072.13 /p:MicrosoftAspNetCoreAppPackageVersion=10.0.0-alpha.2.25073.4 /p:GenerateErrorForMissingTargetingPacks=false /p:RestoreNoCache=true /p:MicrosoftWindowsDesktopAppPackageVersion=10.0.0-alpha.1.25073.1 /p:MicrosoftNETPlatformLibrary=Microsoft.NETCore.App /p:PublishAot=false /p:EnableRequestDelegateGenerator=false --framework net10.0 --self-contained -r win-x64 /bl\n\u0060\u0060\u0060\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\nHere is a binlog of the build error:\n\n[msbuild.binlog.zip](https://github.com/user-attachments/files/18540531/msbuild.binlog.zip)",
    "upvotes": 0,
    "labels": [
      "feature-openapi",
      "area-minimal"
    ],
    "comments": []
  }
]