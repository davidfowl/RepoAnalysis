[
  {
    "id": "MDU6SXNzdWUzOTE4Mzg1NDc=",
    "title": "Implement a native iOS client",
    "url": "https://github.com/dotnet/aspnetcore/issues/5275",
    "createdAt": "2017-03-10T22:28:54Z",
    "lastUpdated": "2023-09-26T08:13:23Z",
    "body": "Swift seems like a good candidate.",
    "upvotes": 2,
    "labels": [
      "enhancement",
      "area-signalr",
      "affected-few",
      "severity-major"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85narfB",
        "parentId": null,
        "author": "Varorbc",
        "content": "Has any progress been made on a Microsoft supported iOS client? ",
        "createdAt": "2023-09-26T08:13:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5275#issuecomment-1735047105"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWUzOTE4NDAyNjM=",
    "title": "C# client Stop can take a while if it spams Sends then tries to Stop",
    "url": "https://github.com/dotnet/aspnetcore/issues/5296",
    "createdAt": "2018-04-20T22:25:06Z",
    "lastUpdated": "2021-04-06T17:21:51Z",
    "body": "\u0060\u0060\u0060\r\nwhile (someCondition == false)\r\n{\r\n    _ = hubConnection.SendAsync(\u0022Ping\u0022);\r\n}\r\n\r\n// Takes a long time to complete\r\nhubConnection.StopAsync();\r\n// or\r\nhubConnection.DisposeAsync();\r\n\u0060\u0060\u0060\r\n\r\nThe \u0060SendAsync\u0060\u0027s are all waiting on a lock and when \u0060StopAsync/DisposeAsync\u0060 tries to run it waits on the same lock. And I\u0027ve observed it taking over a minute for the Stop/Dispose to finish",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "Perf",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDM4MzIzODM4Nw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "We should have an internal \u0060CancellationToken\u0060 that we trigger \uD83D\uDE0E",
        "createdAt": "2018-04-20T22:27:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5296#issuecomment-383238387"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzg5OTMwNw==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@BrennanConroy did you look into this? Is it because we drain the buffer before disposing?",
        "createdAt": "2021-04-06T07:36:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5296#issuecomment-813899307"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxNDI5NDMyOA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Yeah, we keep processing while there are messages in the buffer.",
        "createdAt": "2021-04-06T17:21:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5296#issuecomment-814294328"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWUzOTE4NDAzMzU=",
    "title": "Refreshing auth tokens for SignalR",
    "url": "https://github.com/dotnet/aspnetcore/issues/5297",
    "createdAt": "2018-04-26T20:10:16Z",
    "lastUpdated": "2025-01-21T19:00:48Z",
    "body": "Below is one option we\u0027ve considered, but I\u0027m re-framing this issue to build *some* story for refreshing auth tokens.\r\n\r\nTo improve the ability to \u0022refresh\u0022 expired tokens, we should consider caching the access token provided by the factory. Then, when an HTTP request gets a \u0060401\u0060, we call the factory again before re-issuing the request. That way the user can configure a process to \u0022refresh\u0022 the token without forcing the connection to be reestablished\r\n\r\n* For the WebSockets transport, this has no effect. There is only ever a single request. This logic would **not** cover reconnecting in the event of something like #1159 (where the WebSocket is terminated when the token expires)\r\n* For the SSE transport, this only affects \u0060POST\u0060 (send) requests. We would call the token factory again and re-issue the send. The unsent data would stay buffered in the pipe\r\n* For Long Polling, this affects \u0060POST\u0060 requests like SSE, and the \u0060GET\u0060 (poll) requests. The client would assume that a \u0060401\u0060 error indicates that the data is **still in the pipe** for them to read. The server would be expected to keep data in the pipe in the case of a \u0060401\u0060",
    "upvotes": 22,
    "labels": [
      "Needs: Design",
      "enhancement",
      "area-auth",
      "area-signalr",
      "Blazor \u2665 SignalR",
      "severity-major",
      "affected-medium",
      "Priority:2"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDM4NDc5NTI5Mw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "We need to make sure that if two requests are outstanding simultaneously, the access token factory is only called once. So we should use a shared component and lock properly",
        "createdAt": "2018-04-26T21:31:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-384795293"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDM4NDgwMTc1Nw==",
        "parentId": null,
        "author": "JamesNK",
        "content": "Also need to make sure any new new requests that need to get sent wait while the access token is refreshed.\r\n\r\nThe same behavior should happen while starting a connection. Requests that need to get sent with an access token should wait while a single call to the factory is made, and then get sent out once the token is ready.\r\n\r\nI\u0027m assuming the behavior between C# and TS should be the same.",
        "createdAt": "2018-04-26T21:57:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-384801757"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxODg1NzcxMA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "@SteveSandersonMS @rynowak FYI, just something that popped up in our backlog grooming and @BrennanConroy mentioned this was something you cared about. So we put our special happy label on it.",
        "createdAt": "2019-08-06T21:51:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-518857710"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUzNzIzNTY0NA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Expanding this to also cover the possibility of in-band refresh of the token. We may want to build a way to refresh the user principal **without** terminating the connection.",
        "createdAt": "2019-10-01T21:20:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-537235644"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc2Mzk0MjQyMw==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-01-20T21:00:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-763942423"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc2NDAwOTA3Mw==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "We should author a doc about handling auth expiration correctly. See https://github.com/dotnet/aspnetcore/issues/5283#issuecomment-368864944 for a code example.\r\n\r\n@bradygaster asked me to add @IEvangelist ",
        "createdAt": "2021-01-20T23:00:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-764009073"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgyMzY0NTA3OQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Notes:\r\nAdd an option to enable automatic refresh of connection on token expiration (note: this closes the connection)\r\n* Store some sort of auth information that has expiration on it on the transport\r\n* Use IConnectionLifetimeNotificationFeature from heartbeat on expiration to tell SignalR to abort connection (with retry allowed)\r\n* If expiration of token happens, can we first run auth again to check if the token hasn\u0027t had its expiry updated?",
        "createdAt": "2021-04-20T22:43:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-823645079"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NDU1MTc3OA==",
        "parentId": null,
        "author": "SebastianKunz",
        "content": "Not checking the expiration of the access token in SignalR is a huge security risk. And it adds some work for the appilcation developer to make sure the access token is always fresh. I think it makes sense to add it to the SignalR library where the developer can opt in the feature #14578\r\nI don\u0027t like the approach of closing the connection to then refresh the access token and then connect with the new access token. It does the job, but it\u0027s slow and hacky. There is also the possibility that the backend gets confused because of a completely new connectionId.\r\n\r\nFurthermore I see a second problem arising, which is not solved by keeping the access token fresh. And that is changing roles within the access token.\r\nFor that let me give an example.\r\n\r\nYou have a priviliged user that manages other users in your application. The priviliged user then removes a role from one of the users he manages (e.g. removes the role of adding comment to you blogpost). Assuming this communication is via SignalR and the access token is always valid (not expired) then the user is still authorized to the the tasks (comment on your blogpost) he just was removed from. In the worst case, the access token was just refreshed and the user can abuse his roles up to EXPIRATION_TIME (e.g. 4 minutes).\r\n\r\nThis is a more complex problem to solve then just making sure that the token is always valid, because the Identity Provider needs to inform you that the roles of a user were updated.\r\n\r\nTo sum this up. \r\nI see two problems with signalR and authorization. The first is that the access token is never looked at after the inital connection and second updating roles while a connection is live.\r\nI think we should focus on the first one (keeping the access token fresh). I think it would already help a lot of developers when SignalR with websockets support this feature.",
        "createdAt": "2021-06-04T10:07:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-854551778"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NDU3ODIwMA==",
        "parentId": null,
        "author": "JoFrMueller",
        "content": "@BrennanConroy killing the connection in case of an expired refresh token sounds like a blunt hack to be honest. Everything that relates to the connection would be thrown away, while what we actually want to achieve is a \u0022cache invalidation\u0022 on the side of the hub with the support of the client. Couldn\u0027t we think about it from the \u0022bi-directional communication feature\u0022 perspective of SignalR itself?\r\n\r\n1. Hub informs clients some seconds (configurable) before the access token will become invalid. Either because of a timer or because of the heartbeat mechanism. The hub has to know about it, because it persists/caches the initial access token and relates it to the connection itself.\r\n2. Clients can react to this event, that is triggered by the hub to then re-send their access token (which should be refreshed by their local access token handling mechanism anyways) to allow the hub to update the authorization properties related to the client.\r\n3. The hub receives the updated token from the client and overwrites all related ClaimsPrincipal properties for the sending client and therefore updates its internally cached/connectation related state to reflect the latest acces token content.\r\n4. Because of this update, if we remove a role from a client (like described by @SebastianKunz f.e.), this change will be reflected with the next access token refresh cycle, which usually should take 5 minutes maximum.",
        "createdAt": "2021-06-04T10:19:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-854578200"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1OTkyODcwMQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Apologies, I realize I left out some critical information when jotting down notes. Closing the connection after token expiration is one part of what we plan on implementing. We do want to have a nicer experience where the token can be refreshed without closing the connection. That does require a lot more thought and care and will be additive with the expiration check.\r\n\r\nThe current plan is to add just the expiration part in 6.0 (opt in) and then build on top of that and design the experience for refresh for a future release.",
        "createdAt": "2021-06-11T21:54:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-859928701"
      },
      {
        "id": "IC_kwDOAQzde840jXw9",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "6.0 work is done, there is a new option to close connections on auth expiration. See https://github.com/dotnet/aspnetcore/pull/32431 for info.\r\n\r\nBacklogging for future work in 7.0",
        "createdAt": "2021-07-16T20:04:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-881687613"
      },
      {
        "id": "IC_kwDOAQzde840jXxz",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-16T20:04:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-881687667"
      },
      {
        "id": "IC_kwDOAQzde8489eP8",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-27T01:03:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1022747644"
      },
      {
        "id": "IC_kwDOAQzde849TJyq",
        "parentId": null,
        "author": "gregoriusus",
        "content": "In addition to the security flaw mentioned before, there is also another problem. In high loaded signalr system disconnecting and reconnecting can lead to a lot of messages being lost. Disconnecting and reconnecting are expensive operations that should be avoided.\r\n\r\nThis issue is somehow addressed in many places. I guess that a lot of solutions, that are based on nsignalr, are with jwt authentication with refresh token.",
        "createdAt": "2022-02-02T22:49:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1028431018"
      },
      {
        "id": "IC_kwDOAQzde849TO1b",
        "parentId": null,
        "author": "gregoriusus",
        "content": "I am testing CloseOnAuthenticationExpiration feature. It works. On my development machine with all resources free it takes 1 second to process all operations:\r\n[2022-02-02T23:19:24.859Z] Information: Connection disconnected.\r\n[2022-02-02T23:19:25.904Z] Information: WebSocket connected to....\r\n\r\nA lot can happen in 1 second and on a high load system with a lot of users and messages can lead to messages lost.",
        "createdAt": "2022-02-02T23:23:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1028451675"
      },
      {
        "id": "IC_kwDOAQzde85HcRCi",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "Below are individual items to consider for refreshing auth tokens for SignalR: \r\n\r\n- [ ] Fix error message on client side for OnClose (.NET7):\r\n- Add info to CloseMessage that auth is expired and make it easy for clients to see that (strongly typed exception) and request a new token if required. This should include the error message and status code (401 for example). \r\n\r\n- [ ] Immediate easy \u2122 win for (.NET7):\r\n- Change AccessTokenFactory to only be called on startup and on 401/403 and retry the request, not for every single http request\r\n\r\n- [ ] Doc improvement (.NET7):\r\n- Add doc on how users can setup an endpoint to refresh their token on the server\r\n\r\n- [ ] Protocol change (.NET8):\r\n- Add new hub message type for \u0022pre-close\u0022 that\u0027s effectively an auth challenge and has a grace period for a response before killing connection\r\n- Could make use of Hub message headers to flow auth info to server instead.",
        "createdAt": "2022-07-28T20:19:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1198592162"
      },
      {
        "id": "IC_kwDOAQzde85NbXe4",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-01T19:37:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1299019704"
      },
      {
        "id": "IC_kwDOAQzde85QMPd_",
        "parentId": null,
        "author": "davidfowl",
        "content": "This is a popular issue, so I figured I\u0027d shared some updates. The team is looking at ways to keep the make sure there\u0027s a new auth token that represents the updated user information. Since SignalR isn\u0027t a simple request-response based system, it\u0027s challenging and anything we do here will require protocol changes (that means new client and server changes). \r\n\r\nThere are 2 approaches being considered:\r\n\r\n1. A way to renew user information using [the transport protocol](https://github.com/dotnet/aspnetcore/blob/f543e3552514c5c420eeddd55c505bbc131f10a6/src/SignalR/docs/specs/TransportProtocols.md) (HTTP in the common case) \r\n2. A way to renew the user information in [the hub protocol](https://github.com/dotnet/aspnetcore/blob/f543e3552514c5c420eeddd55c505bbc131f10a6/src/SignalR/docs/specs/HubProtocol.md) \r\n\r\nDoing auth at the transport layer lets us reuse all of the ASP.NET Core based authentication handlers so it\u0027s attractive. Doing it over the transport means we need to encode the auth representation in the hub protocol and then have code on the server side that understands how to \u0022unpack\u0022 the token (the equivalent of auth handlers but for SignalR specifically).\r\n\r\nThese are the forms of auth being looked at:\r\n\r\n- Cookie \r\n- JWT (generally bearer tokens)\r\n- Cert\r\n- API-Key\r\n",
        "createdAt": "2022-12-10T21:18:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1345386367"
      },
      {
        "id": "IC_kwDOAQzde85R0yNR",
        "parentId": null,
        "author": "Gruski",
        "content": "I\u0027d be happy if we could control when the accessTokenFactory is called to retrieve new access token. For custom authentication I would like to send a new auth token on every hub method call for reasons too elaborate to go into detail here. Sure I could do it though method parameters but that\u0027s ugly especially when there is an elegant way to do it on initial connection. Then on the back end we could develop more unified ways to custom handle those tokens, update identity, and so on.",
        "createdAt": "2023-01-05T21:21:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1372791633"
      },
      {
        "id": "IC_kwDOAQzde85SBCVs",
        "parentId": null,
        "author": "davidfowl",
        "content": "@Gruski SignalR can\u0027t get a new token, the issue is about how to force the accessTokenFactory to run more than once per connection establishment for long running connections.",
        "createdAt": "2023-01-09T17:37:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1376003436"
      },
      {
        "id": "IC_kwDOAQzde85aHd5U",
        "parentId": null,
        "author": "gregoriusus",
        "content": "Has been this addressed in. NET8?  At the moment, when getting a new token with refresh token, I can only disconnect an connect with a new token to trigger all auth procedure in Signalr backend. Isn\u0027t this a big issue? Can\u0027t just implement client side function who will send some magic word with token and reauthenticate connection or change URL param? ",
        "createdAt": "2023-04-17T18:48:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1511906900"
      },
      {
        "id": "IC_kwDOAQzde85by4fa",
        "parentId": null,
        "author": "DeepWorksStudios",
        "content": "\u003E Has been this addressed in. NET8? At the moment, when getting a new token with refresh token, I can only disconnect an connect with a new token to trigger all auth procedure in Signalr backend. Isn\u0027t this a big issue? Can\u0027t just implement client side function who will send some magic word with token and reauthenticate connection or change URL param?\r\n\r\nI agree this would be required to implement in net8 i\u0027m having the same issues",
        "createdAt": "2023-05-09T12:52:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1540065242"
      },
      {
        "id": "IC_kwDOAQzde85ksvF7",
        "parentId": null,
        "author": "gregoriusus",
        "content": "There are at least 3 issues ( opened on this issue. Any movement on this directions or at least feedback?",
        "createdAt": "2023-08-23T07:41:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1689448827"
      },
      {
        "id": "IC_kwDOAQzde85oOpa3",
        "parentId": null,
        "author": "Misiu",
        "content": "This issue should be moved to .NET 9 Planning as .NET 8 will be released soon. Hopefully, it will get addressed in .NET 9",
        "createdAt": "2023-10-05T11:07:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1748670135"
      },
      {
        "id": "IC_kwDOAQzde85pSFrJ",
        "parentId": null,
        "author": "Skyppid",
        "content": "\u003E This issue should be moved to .NET 9 Planning as .NET 8 will be released soon. Hopefully, it will get addressed in .NET 9\r\n\r\nAs often as it was moved to the next iteration without **any** visible update on it makes me doubt that .NET 9 will be our saviour. It\u0027s been two years almost since I last used it and had to work around this issue. Now again, I really thought they might have fixed it by now. But looks like even ASPNET.Core and SignalR aren\u0027t important enough projects for MS to fix critical issues. Not to mention how you can overlook this issue in the first place. Sad.",
        "createdAt": "2023-10-17T12:47:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1766349513"
      },
      {
        "id": "IC_kwDOAQzde85pS8lg",
        "parentId": null,
        "author": "gregoriusus",
        "content": "As I am aware, there is even no clue how to solve this from architecture point of view ",
        "createdAt": "2023-10-17T14:47:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1766574432"
      },
      {
        "id": "IC_kwDOAQzde85q5ROq",
        "parentId": null,
        "author": "gregoriusus",
        "content": "Is this issue\u0027s milestone moved to NET8 planning? ",
        "createdAt": "2023-11-04T09:46:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1793397674"
      },
      {
        "id": "IC_kwDOAQzde85q_gW3",
        "parentId": null,
        "author": "DeepWorksStudios",
        "content": "It\u0027s just to sad that signalR suffer from that issue and since months I hoped that they fix it but I guess it will never be fixed my impression is that all those Microsoft\u0027s projects are suffering from the same issues that the team behind it has not the resources to tackle all the bleeding wounds in their project and they just try to fix it but it\u0027s simply to much work for those people. That\u0027s my opinion based on the experience working at multiple .net Maui and asp.net core projects. Reported over 12 issues and followed a lot more of already reported issues that I as well encountered in those projects. And still a lot of the issues are still remaining present in the latest versions.",
        "createdAt": "2023-11-06T15:02:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1795032503"
      },
      {
        "id": "IC_kwDOAQzde85rFyHb",
        "parentId": null,
        "author": "gregoriusus",
        "content": "@mkArtakMSFT, guess you have some insider information. Are you going to tackle this issue?",
        "createdAt": "2023-11-06T21:51:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1796678107"
      },
      {
        "id": "IC_kwDOAQzde85rGDYQ",
        "parentId": null,
        "author": "davidfowl",
        "content": "Hopefully in .NET 9",
        "createdAt": "2023-11-06T21:56:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1796748816"
      },
      {
        "id": "IC_kwDOAQzde85rGaF3",
        "parentId": null,
        "author": "gregoriusus",
        "content": "@davidfowl , are there any new information regarding 2 approaches, have you talked about it?",
        "createdAt": "2023-11-06T22:11:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1796841847"
      },
      {
        "id": "IC_kwDOAQzde85rLt6E",
        "parentId": null,
        "author": "Skyppid",
        "content": "\u003E Hopefully in .NET 9\r\n\r\nThat\u0027d be great. SignalR itself is a great tool and usually works really well. But that issue is a huge deal breaker and always was. Is about time that this will be fixed.\r\n\r\nMaybe the community can help with that.",
        "createdAt": "2023-11-07T10:30:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1798233732"
      },
      {
        "id": "IC_kwDOAQzde85zX-gV",
        "parentId": null,
        "author": "yuvi-pc",
        "content": "Came across this [stackoverflow ](https://stackoverflow.com/a/70871191/4060087) workaround. It is working for us for our self hosted service. Is this a viable solution for now? ",
        "createdAt": "2024-02-09T10:20:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1935665173"
      },
      {
        "id": "IC_kwDOAQzde85zZgzS",
        "parentId": null,
        "author": "gregoriusus",
        "content": "\u003E Came across this [stackoverflow ](https://stackoverflow.com/a/70871191/4060087) workaround. It is working for us for our self hosted service. Is this a viable solution for now?\r\n\r\nWell, this implies to stop and reconnect... this is only solution for now....",
        "createdAt": "2024-02-09T14:50:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1936067794"
      },
      {
        "id": "IC_kwDOAQzde85zbnzY",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E @davidfowl , are there any new information regarding 2 approaches, have you talked about it?\r\n\r\nYes, we would go with an \u0022over the transport\u0022 approach. Which means protocol changes to accommodate doing auth without a reconnect. ",
        "createdAt": "2024-02-09T21:22:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1936620760"
      },
      {
        "id": "IC_kwDOAQzde85zbrKW",
        "parentId": null,
        "author": "gregoriusus",
        "content": "That\u0027s great. Is it already on road map?",
        "createdAt": "2024-02-09T21:34:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-1936634518"
      },
      {
        "id": "IC_kwDOAQzde86HE9a9",
        "parentId": null,
        "author": "gregoriusus",
        "content": "Any news on this topic?",
        "createdAt": "2024-08-02T22:40:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2266224317"
      },
      {
        "id": "IC_kwDOAQzde86Kx6g1",
        "parentId": null,
        "author": "Misiu",
        "content": "So maybe .NET 10? ",
        "createdAt": "2024-09-04T09:16:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2328340533"
      },
      {
        "id": "IC_kwDOAQzde86K1d3G",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E So maybe .NET 10?\r\n\r\nAt a minimum",
        "createdAt": "2024-09-04T14:47:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2329271750"
      },
      {
        "id": "IC_kwDOAQzde86K3pVD",
        "parentId": null,
        "author": "Skyppid",
        "content": "Wow that\u0027s crazy... too bad there\u0027s not much good alternatives to SignalR as of now...",
        "createdAt": "2024-09-04T19:45:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2329843011"
      },
      {
        "id": "IC_kwDOAQzde86K4eVq",
        "parentId": null,
        "author": "reduckted",
        "content": "\u003E At a minimum\r\n\r\nThe earliest we\u0027ll see it is in the next version? How about a maximum? \uD83D\uDE06 ",
        "createdAt": "2024-09-04T20:57:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2330060138"
      },
      {
        "id": "IC_kwDOAQzde86K4tOY",
        "parentId": null,
        "author": "DeepWorksStudios",
        "content": "\u003E \u003E At a minimum\n\u003E \n\u003E \n\u003E \n\u003E The earliest we\u0027ll see it is in the next version? How about a maximum? \uD83D\uDE06 \n\nIt\u0027s sadly the fact that Microsoft does not invest enough in the development department in comparison to how many technologies they are invented and maintaining. \n\nBest course is to build the solution yourself or even better try to avoid such incompleted frameworks.",
        "createdAt": "2024-09-04T21:07:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2330121112"
      },
      {
        "id": "IC_kwDOAQzde86bLl6Z",
        "parentId": null,
        "author": "thirstyape",
        "content": "6 years and 9 months and not even close to any real progress, just a bunch of classic MS bureaucracy.\n\nWhy is there not at least a manual way to refresh tokens or even just the stored value?",
        "createdAt": "2025-01-21T02:38:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2603507353"
      },
      {
        "id": "IC_kwDOAQzde86bOC_X",
        "parentId": null,
        "author": "Skyppid",
        "content": "\u003E 6 years and 9 months and not even close to any real progress, just a bunch of classic MS bureaucracy.\n\u003E \n\u003E Why is there not at least a manual way to refresh tokens or even just the stored value?\n\nFrom what I understand by using the \u0060accessTokenFactory\u0060 you always fetch a fresh token when a request is being sended. To optimize it, you can cache it until expiry and request a new one only if expired.\n\n\u0060\u0060\u0060ts\n    const hubConnectionBuilder = new HubConnectionBuilder().withUrl(this.SERVER_HUB_URL, {\n      transport: HttpTransportType.None,\n      logger: LogLevel.Debug,\n      accessTokenFactory: () =\u003E this.identityService.getToken()\n    });\n\u0060\u0060\u0060",
        "createdAt": "2025-01-21T09:28:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2604150743"
      },
      {
        "id": "IC_kwDOAQzde86bOP02",
        "parentId": null,
        "author": "DeepWorksStudios",
        "content": "\u003E \u003E 6 years and 9 months and not even close to any real progress, just a bunch of classic MS bureaucracy.\n\u003E \u003E \n\u003E \u003E Why is there not at least a manual way to refresh tokens or even just the stored value?\n\u003E \n\u003E From what I understand by using the \u0060accessTokenFactory\u0060 you always fetch a fresh token when a request is being sended. To optimize it, you can cache it until expiry and request a new one only if expired.\n\u003E \n\u003E \u0060\u0060\u0060ts\n\u003E     const hubConnectionBuilder = new HubConnectionBuilder().withUrl(this.SERVER_HUB_URL, {\n\u003E       transport: HttpTransportType.None,\n\u003E       logger: LogLevel.Debug,\n\u003E       accessTokenFactory: () =\u003E this.identityService.getToken()\n\u003E     });\n\u003E \u0060\u0060\u0060\n\nThis does not solve the original issue. The issue is that a reconnect is required to revaildet the token if its expired and that requires a full reconnect and if a client is connected without any connection loss even the token is invalid he can still accces protected hub methods etc . And some other issues that\u0027d come with the whole auth system of signalR just read the thread  ",
        "createdAt": "2025-01-21T09:50:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2604203318"
      },
      {
        "id": "IC_kwDOAQzde86bRVVs",
        "parentId": null,
        "author": "gregoriusus",
        "content": "Interesting that this is not some major issue. No one is refreshing token until logout/login?",
        "createdAt": "2025-01-21T15:16:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605012332"
      },
      {
        "id": "IC_kwDOAQzde86bRWim",
        "parentId": null,
        "author": "Skyppid",
        "content": "Is it? I remember in a previous company we used it and had the problem that after the expiry all requests failed. Back then we had to actually reconnect. But using the factory it requests a token on each request, so if the token is outdated it should still fail?\n\nOr do you mean backend-side? Honestly, we haven\u0027t been using SignalR that much so far, as those features were just UX convenience and there were more pressing things to build. It works for us, but maybe I\u0027m overlooking something here as I\u0027m not that deep into it anymore.\n\nJust wanted to hint that this helps at least with some common issues in low-frequency / non-critical scenarios.",
        "createdAt": "2025-01-21T15:17:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605017254"
      },
      {
        "id": "IC_kwDOAQzde86bReeC",
        "parentId": null,
        "author": "thirstyape",
        "content": "\u003E Interesting that this is not some major issue. No one is refreshing token until logout/login?\n\nBy default this is pretty much the issue, the token request does not happen until an HTTP request goes out, which doesn\u0027t happen often as most communication is facilitated via WebSocket. \n\nMaybe the thought process here is that since the connection remains open it doesn\u0027t require re-validation? Not sure I agree with this.\n\nJust seems wrong when I\u0027m adding methods on the hub for them to not check for a valid token on each request. And when an invalid token is found just abort the connection. My current workaround is two-fold: on the hub add a method that informs whether the token is valid; on the client check with the hub each request whether the token is valid and reconnect when it is not. Additionally, the hub will do a single retry if the request failed due to closure from the hub.",
        "createdAt": "2025-01-21T15:29:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605049730"
      },
      {
        "id": "IC_kwDOAQzde86bRfKM",
        "parentId": null,
        "author": "gregoriusus",
        "content": "Yes, we are solving now, on client side, to pool all request to signalr when we are refreshing token and then we disconnect and reconnect. But on high volume of calls to/from signalr this will pose a problem of messages being lost or invest on some kind of retry mechanism. ",
        "createdAt": "2025-01-21T15:31:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605052556"
      },
      {
        "id": "IC_kwDOAQzde86bRh8C",
        "parentId": null,
        "author": "thirstyape",
        "content": "\u003E Yes, we are solving now, on client side, to pool all request to signalr when we are refreshing token and then we disconnect and reconnect. But on high volume of calls to/from signalr this will pose a problem of messages being lost or invest on some kind of retry mechanism.\n\nExactly!\n\nOnly dealing with maybe 100 low traffic connections at a time right now, but this is going to be a scaling nightmare. ",
        "createdAt": "2025-01-21T15:35:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605063938"
      },
      {
        "id": "IC_kwDOAQzde86bRj0I",
        "parentId": null,
        "author": "DeepWorksStudios",
        "content": "\u003E Yes, we are solving now, on client side, to pool all request to signalr when we are refreshing token and then we disconnect and reconnect. But on high volume of calls to/from signalr this will pose a problem of messages being lost or invest on some kind of retry mechanism. \n\nIt\u0027s more about the actual backend issue that we can have the case an invalid token or a user that changed permissions on runtime can still access protected methods since the validation just happens on the initial handshake of the websocket connection afterwards if the connection persists than we got the issue with unauthorized users can still access protected resources. The only workaround is to attach to the signalR heartbeat and validate it yourself but on client side we got the reconnect issue it\u0027s a slight different issue but still all is kinda sharing the same issue that authentication is rather fragile in signalR \n\nThe workaround works but ain\u0027t optimal and causes scaling issues if the demand increases so yeah total conclusion is rather bad since it\u0027s a issue known for nearly 7 years ",
        "createdAt": "2025-01-21T15:38:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605071624"
      },
      {
        "id": "IC_kwDOAQzde86bRlGj",
        "parentId": null,
        "author": "DeepWorksStudios",
        "content": "\u003E \u003E Yes, we are solving now, on client side, to pool all request to signalr when we are refreshing token and then we disconnect and reconnect. But on high volume of calls to/from signalr this will pose a problem of messages being lost or invest on some kind of retry mechanism.\n\u003E \n\u003E Exactly!\n\u003E \n\u003E Only dealing with maybe 100 low traffic connections at a time right now, but this is going to be a scaling nightmare. \n\nSadly we already experienced issues  at our company in therms of scaling and there is no real solution sadly since it\u0027s a concept issue in signalR and can\u0027t be changed that easily that\u0027s why I wonder what did Microsoft all the 6 years. That would be sufficient time to fix such a major flaw ",
        "createdAt": "2025-01-21T15:40:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605076899"
      },
      {
        "id": "IC_kwDOAQzde86bRpTW",
        "parentId": null,
        "author": "thirstyape",
        "content": "\u003E It\u0027s more about the actual backend issue that we can have the case an invalid token or a user that changed permissions on runtime can still access protected methods since the validation just happens on the initial handshake of the websocket connection afterwards if the connection persists than we got the issue with unauthorized users can still access protected resources. The only workaround is to attach to the signalR heartbeat and validate it yourself but on client side we got the reconnect issue it\u0027s a slight different issue but still all is kinda sharing the same issue that authentication is rather fragile in signalR\n\u003E \n\u003E The workaround works but ain\u0027t optimal and causes scaling issues if the demand increases so yeah total conclusion is rather bad since it\u0027s a issue known for nearly 7 years\n\nWow! I hadn\u0027t even thought of token invalidation or permission changes, that\u0027s huge.",
        "createdAt": "2025-01-21T15:47:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605094102"
      },
      {
        "id": "IC_kwDOAQzde86bRqI6",
        "parentId": null,
        "author": "gregoriusus",
        "content": "Me niether regarding permission changes, this is additional issue :-(\n\nAt the time when they architect this, refresh token was not a big issue. We have one solution on old Signalr (NET framework) and we are using cookie based authentication. It works flawless. Anyone knows, if it is possible to mix and for signalr send cookie based authneticaton with some custom validation on server and for API calls token based?",
        "createdAt": "2025-01-21T15:48:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605097530"
      },
      {
        "id": "IC_kwDOAQzde86bRsaK",
        "parentId": null,
        "author": "DeepWorksStudios",
        "content": "\u003E \u003E It\u0027s more about the actual backend issue that we can have the case an invalid token or a user that changed permissions on runtime can still access protected methods since the validation just happens on the initial handshake of the websocket connection afterwards if the connection persists than we got the issue with unauthorized users can still access protected resources. The only workaround is to attach to the signalR heartbeat and validate it yourself but on client side we got the reconnect issue it\u0027s a slight different issue but still all is kinda sharing the same issue that authentication is rather fragile in signalR\n\u003E \u003E \n\u003E \u003E The workaround works but ain\u0027t optimal and causes scaling issues if the demand increases so yeah total conclusion is rather bad since it\u0027s a issue known for nearly 7 years\n\u003E \n\u003E Wow! I hadn\u0027t even thought of token invalidation or permission changes, that\u0027s huge.\n\nIt\u0027s a huge issue and no real solution wich would solve the root issue \n\nI mean that\u0027s why nobody srs uses Microsoft tech because their them self don\u0027t use it in the extend their should to prove it\u0027s viable for production and sadly this case if you require high security that\u0027s a no no \n\nIt\u0027s a killer issue out of my perspective I wonder why nobody points that out as what it is \n\nI mean I follow this issue since 4 years and still no progress at all only more people find out about the surface issue but only a small handful of people understands the overall impact on therms of auth security and I am no expert in that terms and still even I saw the issues that comes with this type of of implementation ",
        "createdAt": "2025-01-21T15:52:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605106826"
      },
      {
        "id": "IC_kwDOAQzde86bRxrD",
        "parentId": null,
        "author": "gregoriusus",
        "content": "Do you think that token authentication for api calls and cookie based for signalr would help in this issue? Just a thought...",
        "createdAt": "2025-01-21T16:00:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605128387"
      },
      {
        "id": "IC_kwDOAQzde86bR7T_",
        "parentId": null,
        "author": "thirstyape",
        "content": "\u003E Do you think that token authentication for api calls and cookie based for signalr would help in this issue? Just a thought...\n\nFrom what I can tell this would be subject to the same issue. \n\nThe documentation, and examples I googled, seem to suggest that the cookie would only be provided on the initial HTTP request, and subsequent requests over the WebSocket would be doing the same thing as token based requests. ",
        "createdAt": "2025-01-21T16:14:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605167871"
      },
      {
        "id": "IC_kwDOAQzde86bSQGb",
        "parentId": null,
        "author": "channeladam",
        "content": "It has been a while since I have looked at the SignalR code in my project, but I think I mitigate the many SignalR issues/concerns with the following approach:\n\n1. My  SignalR access token is a very short-lived token just for the hubs - no other endpoints will accept them - they are different from my normal api endpoint access tokens.\n\n2. I never send data to the hub via the SignalR connection!  When calling the backend, I always use a normal api endpoint with the normal session security mechanism.\n\n3. As you can guess, data is only sent from the backend to the frontend, for the specified user guid that was part of the original access token when initially connecting to SignalR.  The backend can check the current role of the user (e.g. against the database) before sending the data if necessary or if concerned about a role change.\nI believe that makes it okay for the SignalR connection to remain open as long as the user is on that web page.\nIf the user\u0027s web session times out, they are redirected to the login page, so their connection is closed from the frontend at that point.\n\n4. Due to the javascript library having issues reconnecting server-sent events or long-polling (more specifically not bothering to properly inspect the response status code), I use a custom HttpClient that extends DefaultHttpClient and overrides send()  in order to catch any error and and return a specific HttpResponse to address those issues to allow them to reconnect.\n\nHaving said all that, if I recall correctly (please be kind - I could be wrong!), the backend Hub Context keeps the initial connection request details - so the user\u0027s guid that was in the SignalR access token is always accessible via a claim via the Hub.Context.GetHttpContext().  I believe, if I wanted to, I could add other custom claims such as a session expiry timestamp if I wanted to check that later in a hub method, and then call Abort() if it had expired - or something similar if there was a role change and it had to be invalidated. Could be wrong!  \nEither way, given my approach, I don\u0027t need that.\n\nHope this helps someone.",
        "createdAt": "2025-01-21T16:50:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605253019"
      },
      {
        "id": "IC_kwDOAQzde86bSdNq",
        "parentId": null,
        "author": "DeepWorksStudios",
        "content": "\u003E It has been a while since I have looked at the SignalR code in my project, but I think I mitigate the many SignalR issues/concerns with the following approach:\n\u003E \n\u003E 1. My  SignalR access token is a very short-lived token just for the hubs - no other endpoints will accept them - they are different from my normal api endpoint access tokens.\n\u003E \n\u003E 2. I never send data to the hub via the SignalR connection!  When calling the backend, I always use a normal api endpoint with the normal session security mechanism.\n\u003E \n\u003E 3. As you can guess, data is only sent from the backend to the frontend, for the specified user guid that was part of the original access token when initially connecting to SignalR.  The backend can check the current role of the user (e.g. against the database) before sending the data if necessary or if concerned about a role change.\n\u003E I believe that makes it okay for the SignalR connection to remain open as long as the user is on that web page.\n\u003E If the user\u0027s web session times out, they are redirected to the login page, so their connection is closed from the frontend at that point.\n\u003E \n\u003E 4. Due to the javascript library having issues reconnecting server-sent events or long-polling (more specifically not bothering to properly inspect the response status code), I use a custom HttpClient that extends DefaultHttpClient and overrides send()  in order to catch any error and and return a specific HttpResponse to address those issues to allow them to reconnect.\n\u003E \n\u003E Having said all that, if I recall correctly (please be kind - I could be wrong!), the backend Hub Context keeps the initial connection request details - so the user\u0027s guid that was in the SignalR access token is always accessible via a claim via the Hub.Context.GetHttpContext().  I believe, if I wanted to, I could add other custom claims such as a session expiry timestamp if I wanted to check that later in a hub method, and then call Abort() if it had expired - or something similar if there was a role change and it had to be invalidated. Could be wrong!  \n\u003E Either way, given my approach, I don\u0027t need that.\n\u003E \n\u003E Hope this helps someone.\n\nSadly it won\u0027t work for my use case but I see how it can minimize the issues for many use cases but still they are just a workaround out of my perspective ",
        "createdAt": "2025-01-21T17:13:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605306730"
      },
      {
        "id": "IC_kwDOAQzde86bSvRH",
        "parentId": null,
        "author": "Gruski",
        "content": "I need this a few years ago too but since there was nothing being done I ended up changing my auth from token based to where info was actually stored in token, to database based so now token never needs to be updated because I can just update the auth info of the static client token on the server side in DB user\u0027s record. That also helped with heterogeneous systems that could not share auth which I also needed and sliding expiration which I believe none of the other workarounds address. Then use filters in the hub to auth against DB on every SignalR request.",
        "createdAt": "2025-01-21T17:47:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605380679"
      },
      {
        "id": "IC_kwDOAQzde86bTHh3",
        "parentId": null,
        "author": "DeepWorksStudios",
        "content": "https://www.youtube.com/watch?v=kAGlATRcgY4\nSecurity \u0026 Auth .NET 10 planning discussion\n\nThats currently live on going maybe it will tackel this issue in .net 10\nAt least i hope so ",
        "createdAt": "2025-01-21T18:40:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605480055"
      },
      {
        "id": "IC_kwDOAQzde86bTQv2",
        "parentId": null,
        "author": "DeepWorksStudios",
        "content": "They mentioned that it will be worked on this issue in .Net 10 \n\nGladly \uD83C\uDF89",
        "createdAt": "2025-01-21T19:00:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5297#issuecomment-2605517814"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWUzOTE4NDEyNDM=",
    "title": "Automate GPG signing of Java Package",
    "url": "https://github.com/dotnet/aspnetcore/issues/5309",
    "createdAt": "2018-06-18T19:59:50Z",
    "lastUpdated": "2023-06-02T01:07:56Z",
    "body": "* [x] Integrate into \u0060build.cmd\u0060 with **automatic skipping when Java is not present** (#2678)\r\n  * I think we should try to **fail** the build if Java is not present when on the CI though to avoid accidentally forgetting to build it because we spun up a new agent and didn\u0027t install Java.\r\n  * Stretch goal: Acquire Java as part of the build (only on CI)\r\n* [x] Make sure VSTS and Jenkins agents have the necessary JDK installed\r\n* [x] Make sure TeamCity (if we\u0027re still using it by then ;)) has the necessary JDK installed.\r\n* [x] Integrate JAR signing into the build\r\n* ~~Publish packages to a MyGet Maven feed as part of the build on the CI~~ (moved to https://github.com/aspnet/AspNetCore/issues/12025)\r\n* [ ] Integrate GPG signing into build\r\n* [ ] Consider publishing packages to Maven Central Staging feed as part of build.",
    "upvotes": 0,
    "labels": [
      "task",
      "area-signalr",
      "feature-client-java",
      "severity-nice-to-have",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQyNDA1MzE1NQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "The remaining work for this is P3 for 2.2. We should do it for 3.0, but it doesn\u0027t need to hold up 2.2",
        "createdAt": "2018-09-24T17:14:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5309#issuecomment-424053155"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQyNDA1MzQxMg==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Assigning to me to document the manual shipping procedures for 2.2. Will bump priority down and move the rest to 3.0 after that.",
        "createdAt": "2018-09-24T17:15:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5309#issuecomment-424053412"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQyNjcyMjIwOA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Documented. Automation will have to wait until I have some cycles, which won\u0027t be in 2.2",
        "createdAt": "2018-10-03T17:19:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5309#issuecomment-426722208"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ2ODc4OTM4Nw==",
        "parentId": null,
        "author": "ryanbrandenburg",
        "content": "Ping on this. It seems like every time Java updates we\u0027re broken by this in one way or another (JAVA_HOME is not updated, or even ALL versions of java are removed).",
        "createdAt": "2019-03-01T19:48:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5309#issuecomment-468789387"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ2ODc5MDc4Nw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "@mikaelm12 \t",
        "createdAt": "2019-03-01T19:53:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5309#issuecomment-468790787"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ4MTQ0NTEzNA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Triage decision: This isn\u0027t necessary to ship the actual Java client artifact, just to make our lives a little less manual.",
        "createdAt": "2019-04-09T21:21:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5309#issuecomment-481445134"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2NDYzODk5OQ==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-07-27T21:07:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5309#issuecomment-664638999"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzg5OTc4MA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@BrennanConroy this still manual?",
        "createdAt": "2021-04-06T07:36:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5309#issuecomment-813899780"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxNDI5MTE4NA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Yes, we have it as part of our release documentation.",
        "createdAt": "2021-04-06T17:17:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5309#issuecomment-814291184"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxNDMzNTc5NA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Is it worth doing this or are we OK having it be manual?",
        "createdAt": "2021-04-06T18:16:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5309#issuecomment-814335794"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWUzOTE4NDE2MDc=",
    "title": "Investigate redis streams for the backplane implementation",
    "url": "https://github.com/dotnet/aspnetcore/issues/5313",
    "createdAt": "2018-07-02T06:40:40Z",
    "lastUpdated": "2021-11-08T17:45:34Z",
    "body": "Investigate redis streams https://redis.io/topics/streams-intro as a backplane. \r\n\r\nSupport coming in SS.Redis: https://github.com/StackExchange/StackExchange.Redis/pull/860",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQwMTg1NjY0Ng==",
        "parentId": null,
        "author": "analogrelay",
        "content": "\uD83D\uDE44 ",
        "createdAt": "2018-07-02T16:14:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5313#issuecomment-401856646"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQwMTg2MDAwMA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "What reasons?\r\nCause it\u0027s new?\r\nCause it has replayability?\r\nCause it\u0027s faster?",
        "createdAt": "2018-07-02T16:25:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5313#issuecomment-401860000"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQwMjU0MDczMg==",
        "parentId": null,
        "author": "mgravell",
        "content": "Now available in the 2.0 branch, anything later than 2.0.0-alpha.86 on nuget; we will also do a 1.* drop soon",
        "createdAt": "2018-07-04T18:39:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5313#issuecomment-402540732"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQxMTEzMTAxMQ==",
        "parentId": null,
        "author": "yzorg",
        "content": "\u003E What reasons?\r\n\u003E Cause it\u0027s new?\r\n\u003E Cause it has replayability?\r\n\u003E Cause it\u0027s faster?\r\n\r\n@BrennanConroy In short: yes, \u0022replayability\u0022 and pub/sub.  \r\n\r\nWhich is not true of other Redis types/structures.  For example you can have a list (can contain full history, but no live notifications) or a pub/sub topic (subscribers get notified in real-time, but no history).  It looks like Redis streams provide both, ala Kafka.\r\n\r\nFaster?  I\u0027ll leave that to maintainers, but if SignalR no longer has to update separate list and pub/sub topic per message, it has potential to be more efficient, possibly faster.",
        "createdAt": "2018-08-07T17:08:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5313#issuecomment-411131011"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQxMTEzMTY0Ng==",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Faster? I\u0027ll leave that to maintainers, but if SignalR no longer has to update separate list and pub/sub topic per message, it has potential to be more efficient, possibly faster.\r\n\r\nWe don\u0027t use lists today, we use pub/sub exclusively. \r\n\r\nRedis streams would enable a bit more durability and it would scale out better (redis pub/sub doesn\u0027t scale very well today in redis cluster).",
        "createdAt": "2018-08-07T17:10:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5313#issuecomment-411131646"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQyMzgwMDg5NQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "I think we should look at this for 3.0. ",
        "createdAt": "2018-09-23T08:39:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5313#issuecomment-423800895"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWUzOTE4NDE4NTA=",
    "title": "Additional streaming parameter types",
    "url": "https://github.com/dotnet/aspnetcore/issues/5316",
    "createdAt": "2018-07-03T23:53:00Z",
    "lastUpdated": "2023-10-28T14:09:44Z",
    "body": "Currently the user can pass in \u0060ChannelReader\u003CT\u003E\u0060.\r\n\r\nWant to expand this to accept the \u0060Stream\u0060 class, possible the new \u0060Pipeline\u0060 class, etc. Make a common pattern for adding on additional types, maybe somehow tied to \u0060IEnumerableAsync\u0060.\r\n",
    "upvotes": 2,
    "labels": [
      "Needs: Design",
      "enhancement",
      "area-signalr",
      "Blazor \u2665 SignalR",
      "severity-nice-to-have",
      "affected-very-few",
      "help candidate"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQwMjMyNDc0Mg==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Nudging the cost up on this one as well :)",
        "createdAt": "2018-07-04T00:02:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5316#issuecomment-402324742"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQwNTQxNTgzMw==",
        "parentId": null,
        "author": "DylanDmitri",
        "content": "For the typescript client, there\u0027s no channels, so I ended up making a custom \u0022streaming parameter\u0022 object.\r\n\r\nThis object has no async magic, no loops. It\u0027s just when you call \u0022stream.write(5)\u0022 it generates and sends a stream item right there in the write method. The bad part is that you can only call this after making the invocation, whereas with a channel you can load items and then call afterwards.\r\n\r\n\u0060\u0060\u0060\r\n// channel style\r\nvar channel = Channel.CreateUnbounded\u003CFoo\u003E();\r\nforeach (foo in foos) {\r\n  channel.Write(foo);\r\n}\r\nvar result = await connection.invokeAsync(\u0022collectFoos\u0022, channel);\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\n// flat placeholder style\r\nvar stream = connection.NewUploadStream();\r\nvar promise = connection.invoke(\u0022collectFoos\u0022, stream);\r\nforeach (foo in foos) {\r\n    await stream.write(foo);\r\n}\r\nvar result = await promise;\r\n\u0060\u0060\u0060\r\n\r\nThe channel style one is definitely more elegant / more slick. The flat placeholder one better describes the underlying process; or the order in which things happen is more transparent.\r\n\r\nWhat I want to do is just implement something similar in C#. Probably beef up the StreamPlaceholder class substantially, and have users call \u0060stream.write(item)\u0060 like in typescript. This lets people do stuff like:\r\n\r\n\u0060\u0060\u0060\r\nforeach (byte[] chunk in myFile) {\r\n    await stream.write(chunk);\r\n}\r\n\u0060\u0060\u0060\r\n\r\nSo basically this would allow for every iterable to be supported.\r\n\r\nThe downside is that there\u0027s something fun or magical about sending a channel \u0022through to the server\u0022, and the nicer async staging results in cleaner code.\r\n\r\nThoughts?",
        "createdAt": "2018-07-16T23:54:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5316#issuecomment-405415833"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQwNTY2Mjk1NQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "My initial concern is that this is creating more ways to do the same things, and introducing new types that C# developers aren\u0027t familiar with. In general, we want to try to meet developers where they are, rather than teaching them new concepts. \u0060Stream\u0060 and \u0060Channel\u0060 are built-in to .NET, so developers will already understand them. Introducing a new concept means they have to learn something new just to use our framework.",
        "createdAt": "2018-07-17T17:30:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5316#issuecomment-405662955"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2NDYzNzAwNg==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-07-27T21:02:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5316#issuecomment-664637006"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzkwMTU0Ng==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@BrennanConroy we support IAsyncEnumerable and Channel right? I think adding support for Stream and Pipe would be a nice addons. We can even split those. \r\n\r\nWould this be both server and client? One downside of supporting those types are that you can\u0027t really control the buffer allocations so maybe it\u0027s a pit of failure. On the flipside, we\u0027d control reading from the Stream so we could rent buffers from the buffer pool and control how they get sent to the server side.",
        "createdAt": "2021-04-06T07:39:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5316#issuecomment-813901546"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxNTk3OTk5Mw==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E we support IAsyncEnumerable and Channel right?\r\n\r\nYep.\r\n\r\n\u003E I think adding support for Stream and Pipe would be a nice addons.\r\n\r\nThe big difference is that those would only support byte[] whereas \u0060IAsyncEnumerable\u0060 and \u0060Channel\u0060 support \u0022any\u0022 type.",
        "createdAt": "2021-04-08T16:49:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5316#issuecomment-815979993"
      },
      {
        "id": "IC_kwDOAQzde841RLL6",
        "parentId": null,
        "author": "TanayParikh",
        "content": "This would be an interesting API for Blazor as well. For the .NET to JS byte[] streaming interop, we\u0027re currently manually piping data between a developer provided stream into a \u0060Channel\u0060/\u0060IAsyncEnumerable\u0060 in order to utilize SignalR streaming. If we were able to supply a stream directly it would reduce complexity/allocations involved in that operation. ",
        "createdAt": "2021-08-05T18:43:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5316#issuecomment-893694714"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWUzOTE4NDYzNjQ=",
    "title": "Add possibility to inject json reviver function in Typescript client",
    "url": "https://github.com/dotnet/aspnetcore/issues/5321",
    "createdAt": "2018-07-26T08:54:42Z",
    "lastUpdated": "2023-10-28T14:09:45Z",
    "body": "Currently there is no possibility to customize in any way the behavior of JsonHubProtocol. It could pass a reviver function to the JSON.parse method. If a user could inject such function to the JsonHubProtocol it would be much easier to perform any data transformation (like converting date strings to Date objects).\r\n",
    "upvotes": 2,
    "labels": [
      "enhancement",
      "area-signalr",
      "api-suggestion",
      "severity-minor",
      "affected-very-few",
      "help candidate"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQwODE1NzQyNw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "The issue with the default \u0022reviver\u0022 parameter is that we can\u0027t allow a user code to impact the serialization/deserialization of the outer **protocol** messages, since those are what are actually passed in to JSON.parse. The plan we have is to provide a place for users to provide a transformer function that we will apply directly to the individual arguments/return values.",
        "createdAt": "2018-07-26T16:33:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5321#issuecomment-408157427"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQzNzE4MDQ0Nw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "We\u0027d be happy to take contributions for this. The idea would be that we\u0027d pass parameters and results through a custom user-defined function to allow JSON serialization to be customized in JavaScript. If someone is interested in working on it, let us know and we\u0027d be happy to help!",
        "createdAt": "2018-11-08T22:32:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5321#issuecomment-437180447"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzkxMDI2Nw==",
        "parentId": null,
        "author": "davidfowl",
        "content": "We need an API proposal for this one.",
        "createdAt": "2021-04-06T07:52:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5321#issuecomment-813910267"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWUzOTE4NDc1MDM=",
    "title": "Allow signalr-protocol-msgpack to be use with UMD",
    "url": "https://github.com/dotnet/aspnetcore/issues/5336",
    "createdAt": "2018-09-14T12:35:59Z",
    "lastUpdated": "2023-10-28T14:09:45Z",
    "body": "Could you pls export this module as namespace as well ?\r\n(same treatment given to the signalr npm package https://github.com/aspnet/SignalR/issues/951 )\r\n\r\n![image](https://user-images.githubusercontent.com/1522516/45550546-6573ea00-b82b-11e8-909a-df94a2fb3390.png)\r\n\r\nThanks",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "feature-client-javascript",
      "severity-minor",
      "affected-very-few",
      "help candidate"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQyMTQyMzEwMw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Unfortunately we\u0027re blocked by a TypeScript bug here: https://github.com/Microsoft/TypeScript/issues/20990\r\n\r\nWe export the code at \u0060signalR.protocols.msgpack\u0060 but TypeScript doesn\u0027t have a way for us to express this in the .d.ts file.",
        "createdAt": "2018-09-14T17:06:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5336#issuecomment-421423103"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQzNzE3NjA4MQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Let\u0027s take a look in 3.0 and see if we can hack around this.",
        "createdAt": "2018-11-08T22:16:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5336#issuecomment-437176081"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQzNzI3NzY5NA==",
        "parentId": null,
        "author": "valeriob",
        "content": "Since 3.0 is far away, can\u0027t you just do this ?\r\nhttps://github.com/Microsoft/TypeScript/issues/20990#issuecomment-426169333",
        "createdAt": "2018-11-09T07:48:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5336#issuecomment-437277694"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQzNzQzMTA5Ng==",
        "parentId": null,
        "author": "analogrelay",
        "content": "3.0 is the next release (since 2.2 is basically locked down). We\u0027ll provide a fix in that version.",
        "createdAt": "2018-11-09T17:20:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5336#issuecomment-437431096"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ2MTIxOTc3OA==",
        "parentId": null,
        "author": "bradygaster",
        "content": "one option is this workaround: https://github.com/Microsoft/TypeScript/issues/20990#issuecomment-433288494",
        "createdAt": "2019-02-06T22:50:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5336#issuecomment-461219778"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzkxMjQxMg==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Did we ever make progress here?",
        "createdAt": "2021-04-06T07:55:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5336#issuecomment-813912412"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWUzOTE4NDgwNTA=",
    "title": "Url can\u0027t be changed for easy reconnect",
    "url": "https://github.com/dotnet/aspnetcore/issues/5342",
    "createdAt": "2018-10-01T11:20:39Z",
    "lastUpdated": "2023-11-22T13:16:52Z",
    "body": "Using a client-side cursor (e.g. \u0060lastId\u0060 processed); for a reconnect this wants to be passed back to the server in the query string (as cors doesn\u0027t allow custom headers and cors is always applicable to websockets).\r\n\r\nHowever while \u0060signalR.HubConnectionBuilder()\u0060 provides easy construction of the connection; the url cannot be changed after building.\r\n\r\nThis means if the connection disconnects and you need to pass a cursor (e.g. id); the connection has to be rebuilt and all the events re-registered to the new connection.\r\n\r\nIt would be easier if the url could be updated and only \u0060.start\u0060 needed to be called again.",
    "upvotes": 2,
    "labels": [
      "enhancement",
      "blocked",
      "area-signalr",
      "feature-client-java",
      "feature-client-net",
      "feature-client-javascript",
      "affected-few",
      "severity-minor",
      "help candidate"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQyNjY5NzY3Ng==",
        "parentId": null,
        "author": "analogrelay",
        "content": "We\u0027ll need to review this for all the clients.",
        "createdAt": "2018-10-03T16:12:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5342#issuecomment-426697676"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ1OTExMDU0Nw==",
        "parentId": null,
        "author": "muratg",
        "content": "cc @halter73 because I saw the word \u0022reconnect\u0022 :smiley: \r\n",
        "createdAt": "2019-01-30T21:11:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5342#issuecomment-459110547"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ1OTE2MzYzMg==",
        "parentId": null,
        "author": "halter73",
        "content": "This wouldn\u0027t affect automatic reconnects. If we want this, we should probably set up a design meeting to determine things like how the URL should be updated (e.g. a property or \u0060.start\u0060 param), when it can be updated, etc...",
        "createdAt": "2019-01-31T00:15:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5342#issuecomment-459163632"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ4MTQ1MjEyNw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Triage decision: Design this in the preview 6 time period.",
        "createdAt": "2019-04-09T21:45:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5342#issuecomment-481452127"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ5MDI2NDg1Mw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Proposal: Make \u0060Url\u0060 settable, but it doesn\u0027t take affect until the next \u0060StartAsync\u0060/\u0060start\u0060 call. We\u0027d capture the current value in the connection state. We\u0027d do this in the HubConnection layer (since \u0060HttpConnection\u0060 is not reusable anyway).",
        "createdAt": "2019-05-07T21:38:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5342#issuecomment-490264853"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ5MDI2NzYzNA==",
        "parentId": null,
        "author": "benaadams",
        "content": "Your proposal is acceptable... {insert \u0022men in black\u0022 gif}",
        "createdAt": "2019-05-07T21:48:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5342#issuecomment-490267634"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ5NzUxMjExNw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Still planning to get this done... eventually \uD83D\uDE2B \r\n\r\nWith the reconnect stuff, this should be doable in the \u0060Reconnecting\u0060 event as well. @halter73 wants to try throwing \u0060InvalidOperationException\u0060 if you try to set it while the connection is active (not reconnecting or disconnected). So sure, give that a whirl :) ",
        "createdAt": "2019-05-30T22:46:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5342#issuecomment-497512117"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUwMzMxNTEwMw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "This is done in Java and JS. The .NET work is blocked on #10872 because we\u0027ll be refactoring that logic.",
        "createdAt": "2019-06-18T21:16:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5342#issuecomment-503315103"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUwNzc3MzI3NA==",
        "parentId": null,
        "author": "rjvdboon",
        "content": "\u003E \r\n\u003E \r\n\u003E The .NET work is blocked on #10872 because we\u0027ll be refactoring that logic.\r\n\r\nIt seems #10872 is done now",
        "createdAt": "2019-07-02T17:30:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5342#issuecomment-507773274"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUwNzc3NDU3MA==",
        "parentId": null,
        "author": "mikaelm12",
        "content": "Yeah, #10872 came in right at the end of preview 7 so this will now go into the preview 8 milestone. I can go ahead and finish this up.",
        "createdAt": "2019-07-02T17:33:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5342#issuecomment-507774570"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxNTU4NjgzMg==",
        "parentId": null,
        "author": "analogrelay",
        "content": "We missed the 3.0 train. We\u0027ll revisit for 3.1",
        "createdAt": "2019-07-26T20:20:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5342#issuecomment-515586832"
      },
      {
        "id": "IC_kwDOAQzde85spQRl",
        "parentId": null,
        "author": "coonmoo",
        "content": "Any news on getting the .NET SignalR client to support changing the url in the reconnecting event?\r\nI see in the JS client this is already supported",
        "createdAt": "2023-11-22T13:16:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5342#issuecomment-1822753893"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWUzOTE4NDg2NzY=",
    "title": "Improve error messaging for 404s",
    "url": "https://github.com/dotnet/aspnetcore/issues/5350",
    "createdAt": "2018-10-10T17:04:02Z",
    "lastUpdated": "2023-10-28T14:09:00Z",
    "body": "Usually a 404 occurs because sticky sessions are not enabled. We should provide a better error message here.",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "feature-client-java",
      "feature-client-net",
      "feature-client-javascript",
      "severity-nice-to-have",
      "affected-few",
      "help candidate"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQyODY5NjgxOQ==",
        "parentId": null,
        "author": "ptallett",
        "content": "Also if the server has a bug and doesn\u0027t expose the hub properly, you get an \u0022Error negotiating: error\u0022 which makes you think its actually communicated with the server when in fact it hasn\u0027t.\r\n\r\nI\u0027d think messing up the hub definition on the server is quite common for newbies.\r\n\r\nCheers,\r\nPaul",
        "createdAt": "2018-10-10T19:14:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5350#issuecomment-428696819"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQyODcwNDU1MQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "\u003E Also if the server has a bug and doesn\u0027t expose the hub properly\r\n\r\nCan you elaborate on what you mean by \u0022doesn\u0027t expose the hub properly\u0022?",
        "createdAt": "2018-10-10T19:41:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5350#issuecomment-428704551"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQyODcyNTUzNw==",
        "parentId": null,
        "author": "mikaelm12",
        "content": "I think @ptallett means when you incorrectly configure map hub and the client try to a wrong hub url. \r\nWe get an unexpected status code returned from negotiate: 404.",
        "createdAt": "2018-10-10T20:46:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5350#issuecomment-428725537"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQyODgzNTI4Mw==",
        "parentId": null,
        "author": "davidfowl",
        "content": "There\u0027s nothing we can do about that. If you point your client at www.google.com, we don\u0027t get a chance to handle it properly. Maybe we could log the mapped hubs at startup and the URL they are bound to. I\u0027m not sure what we could do on the client side besides improve the error message to say we didn\u0027t find the negotiate response?",
        "createdAt": "2018-10-11T06:23:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5350#issuecomment-428835283"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQyOTAyNTA0Ng==",
        "parentId": null,
        "author": "analogrelay",
        "content": "I think the ask here is to have an error that actually says we got a 404. At the moment I believe we have a very obscure error. That seems entirely legitimate.",
        "createdAt": "2018-10-11T16:32:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5350#issuecomment-429025046"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQyOTAzMTI3OQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "I see. This is across all the clients right?",
        "createdAt": "2018-10-11T16:48:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5350#issuecomment-429031279"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQyOTA0NTQxOA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "The JavaScript client is the one with the worst error messages :). The others are pretty good already.",
        "createdAt": "2018-10-11T17:27:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5350#issuecomment-429045418"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ0MDAzMzgwOQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "The easiest fix here is to detect the kind of 404 we get. Once a 404 is received:\r\n\r\n1. Have the client detect the \u0060Connection ID Required\u0060 error message and throw an error that points to docs on Sticky Sessions. Something like \u0060The server does not have a record of the current connection. This usually occurs when you are using multiple server instances and don\u0027t have Sticky Sessions enabled. See https://aka.ms/[something] for more information.\u0060\r\n\r\n1. If the \u0060Connection ID Required\u0060 message is not in the body, it\u0027s a more \u0022standard\u0022 404. Throw an error like \u0060A SignalR Hub could not be found at \u0027[url]\u0027.\u0060. Usually this will be caused by bad routing configuration.",
        "createdAt": "2018-11-19T20:38:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5350#issuecomment-440033809"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ0MDAzNDA0NA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "We should do this in all the clients. The JS client is the worst because it has *no* 404 error (it just says \u0022Error\u0022), but the Java and .NET clients could use the detection logic in 1 above.",
        "createdAt": "2018-11-19T20:39:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5350#issuecomment-440034044"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ4ODEyNjU4MQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Let\u0027s just improve the error message to have more detail.",
        "createdAt": "2019-04-30T21:45:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5350#issuecomment-488126581"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ5NzUxMDkxMA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Clarifying further. The work we\u0027re doing here is to change all three clients to explicitly detect a \u0060404\u0060 response and then throw a specific error (rather than the generic error we throw now) that says something like: \u0022The connection could not be found on the server, either it is not a SignalR endpoint, or the connection may not be present. ... something something try enabling sticky sessions ...\u0022",
        "createdAt": "2019-05-30T22:40:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5350#issuecomment-497510910"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUwOTgyMjIwNA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "The work for this repo:\r\n* Change error to say \u0022something something 404s. For more detail see https://aka.ms/signalr/404s\u0022\r\n* Log this in the client logs\r\n* Check if aka.ms can be used in code ;)\r\n\r\nThe work for docs (engineering team to do this) (cc @scottaddie):\r\n* Add a \u0022Troubleshooting\u0022 doc with a section on 404s\r\n* Update the aka.ms to point at it.\r\n",
        "createdAt": "2019-07-09T21:47:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5350#issuecomment-509822204"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxNTU4NjAwMA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "This is cut for 3.0. This can probably meet the bar for 3.1 though.",
        "createdAt": "2019-07-26T20:17:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5350#issuecomment-515586000"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxNjQwNTA3MA==",
        "parentId": null,
        "author": "jogibaeratvega",
        "content": "You receive a 404 when your JWT-Token you send in the query param is to large:\r\n\r\nError during WebSocket handshake: Unexpected response code: 404",
        "createdAt": "2019-07-30T12:51:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5350#issuecomment-516405070"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWUzOTE4NDk5NTI=",
    "title": "Java Testing improvements",
    "url": "https://github.com/dotnet/aspnetcore/issues/5367",
    "createdAt": "2018-10-29T18:12:59Z",
    "lastUpdated": "2021-03-02T00:21:29Z",
    "body": "* [ ] Automated Functional Tests against the a real server\r\n* [ ] Test expected log messages",
    "upvotes": 0,
    "labels": [
      "task",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": []
  },
  {
    "id": "MDU6SXNzdWUzOTE4NTE4NTA=",
    "title": "Redis reconnect problem",
    "url": "https://github.com/dotnet/aspnetcore/issues/5393",
    "createdAt": "2018-11-28T13:51:50Z",
    "lastUpdated": "2020-11-11T23:08:13Z",
    "body": "In our web application,when there is a problem with the redis cluster.The configcenter will automatically issue new cluster connections,and  old connections will be cleared.In this case, redis needs to reconnect.But there is no way to do this now, I have to restart the application.\r\n\r\nTherefore, I modified the following code  to solve this problem\r\n\u0060\u0060\u0060\r\n_redisServerConnection.ConnectionFailed \u002B= (_, e) =\u003E\r\n{\r\n        // We use the subscription connection type\r\n         // Ignore messages from the interactive connection (avoids duplicates)\r\n         if (e.ConnectionType == ConnectionType.Interactive)\r\n           {\r\n                   return;\r\n            }\r\n        RedisLog.ConnectionFailed(_logger, e.Exception);\r\n       // When ConnectionFailed ,try reconnect\r\n       _redisServerConnection = await _options.ConnectAsync(writer);\r\n       _bus = _redisServerConnection.GetSubscriber();\r\n};\r\n\u0060\u0060\u0060\r\nAny Suggestions for this situation?",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "affected-few",
      "severity-major"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ0MjUxNzMzNQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Redis Cluster isn\u0027t officially supported in SignalR.\r\n\r\nRedis will automatically try to reconnect, see the docs on reconnect (https://stackexchange.github.io/StackExchange.Redis/Configuration#reconnectretrypolicy). It looks like by default it waits 5 seconds between retries.",
        "createdAt": "2018-11-28T16:45:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5393#issuecomment-442517335"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ0MjY4NDQ0MA==",
        "parentId": null,
        "author": "cgyqu",
        "content": "@BrennanConroy It will try,but the redis host is invalid.Log below:\r\n\u003E StackExchange.Redis.RedisConnectionException: No connection is available to service this operation: PUBLISH \r\n\r\nThe connection needs to start with a new host.That means \u0060ConnectAsync\u0060 need to execute again.\r\n\u0060\u0060\u0060\r\n  internal async Task\u003CIConnectionMultiplexer\u003E ConnectAsync(TextWriter log)\r\n  {\r\n            // Factory is publically settable. Assigning to a local variable before null check for thread safety.\r\n            var factory = ConnectionFactory;\r\n            if (factory == null)\r\n            {\r\n                // REVIEW: Should we do this?\r\n                if (Configuration.EndPoints.Count == 0)\r\n                {\r\n                    Configuration.EndPoints.Add(IPAddress.Loopback, 0);\r\n                    Configuration.SetDefaultPorts();\r\n                }\r\n\r\n                return await ConnectionMultiplexer.ConnectAsync(Configuration, log);\r\n            }\r\n\r\n            return await factory(log);\r\n }\r\n\u0060\u0060\u0060\r\n\r\nThe latest connection host is obtained by redisName.\r\nRedis config:\r\n\u0060\u0060\u0060\r\nAddRedis(option =\u003E\r\n             {\r\n                 string redisName = \u0022signalR\u0022;\r\n                 option.ConnectionFactory = async writer =\u003E\r\n                 {\r\n                     var logger = new LoggerHelper();\r\n                     var connection = await RedisConnectionHelper.GetRedisConnection(redisName, writer);\r\n                     connection.ConnectionFailed \u002B= (_, e) =\u003E\r\n                     {\r\n                         logger.Info(\u0022StartUp\u0022, \u0022SignalR\u0022, \u0022Redis\u0022, $\u0022Connection Redis failed\uFF0Cex:\u0022 \u002B e.Exception.ToString());\r\n                     };\r\n\r\n                     if (!connection.IsConnected)\r\n                     {\r\n                         logger.Info(\u0022StartUp\u0022, \u0022SignalR\u0022, \u0022Redis\u0022, $\u0022Connection did not connect\u0022);\r\n                     }\r\n                     else\r\n                     {\r\n                         logger.Info(\u0022StartUp\u0022, \u0022SignalR\u0022, \u0022Redis\u0022, $\u0022Redis Connection connected,redisName:{redisName},connectStr:\u0022 \u002B connection.Configuration);\r\n                     }\r\n                     return connection;\r\n                 };\r\n             })\r\n\u0060\u0060\u0060",
        "createdAt": "2018-11-29T02:36:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/5393#issuecomment-442684440"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWUzOTQ0NzQxMTY=",
    "title": "SignalR: \u0060Error when dispatching \u0027\u0022OnDisconnectedAsync\u0022\u0027 on hub\u0060 and \u0060Failed disposing connection\u0060",
    "url": "https://github.com/dotnet/aspnetcore/issues/6149",
    "createdAt": "2018-12-27T19:43:26Z",
    "lastUpdated": "2024-12-04T22:32:10Z",
    "body": "### Describe the bug\r\n\r\nAfter migrating my application from ASP.NET Core 2.1 (net471) to ASP.NET Core 2.2 (netcoreapp2.2 and InProcess hosting model) I found some exceptions in our log system related to SignalR.\r\n\r\nThese exceptions are always happening after IIS shutting down the application.\r\n\r\nAnd I have some errors logged in the Event Viewer at the same time.\r\n\r\n### Additional context\r\n\r\n\u0060\u0060\u0060\r\n09:12:07.250 ERR Error when dispatching \u0027\u0022OnDisconnectedAsync\u0022\u0027 on hub.\r\nSystem.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: \u0027IServiceProvider\u0027.\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ThrowHelper.ThrowObjectDisposedException()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.CreateScope()\r\n   at Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u00601.OnDisconnectedAsync(HubConnectionContext connection, Exception exception)\r\n   at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.HubOnDisconnectedAsync(HubConnectionContext connection, Exception exception)\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\n09:12:07.939 ERR Error when dispatching \u0027\u0022OnDisconnectedAsync\u0022\u0027 on hub.\r\nSystem.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: \u0027IServiceProvider\u0027.\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ThrowHelper.ThrowObjectDisposedException()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.CreateScope()\r\n   at Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u00601.OnDisconnectedAsync(HubConnectionContext connection, Exception exception)\r\n   at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.HubOnDisconnectedAsync(HubConnectionContext connection, Exception exception)\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\n09:12:08.114 ERR Failed disposing connection \u0022hV2ao8YCcPSDKOtG6K0B4g\u0022.\r\nSystem.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: \u0027IServiceProvider\u0027.\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ThrowHelper.ThrowObjectDisposedException()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.CreateScope()\r\n   at Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u00601.OnDisconnectedAsync(HubConnectionContext connection, Exception exception)\r\n   at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.HubOnDisconnectedAsync(HubConnectionContext connection, Exception exception)\r\n   at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.RunHubAsync(HubConnectionContext connection)\r\n   at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.OnConnectedAsync(ConnectionContext connection)\r\n   at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.OnConnectedAsync(ConnectionContext connection)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher.ExecuteApplication(ConnectionDelegate connectionDelegate, HttpConnectionContext connection)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext.WaitOnTasks(Task applicationTask, Task transportTask, Boolean closeGracefully)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager.DisposeAndRemoveAsync(HttpConnectionContext connection, Boolean closeGracefully)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext.DisposeAsync(Boolean closeGracefully)\r\n   at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager.DisposeAndRemoveAsync(HttpConnectionContext connection, Boolean closeGracefully)\r\n\u0060\u0060\u0060\r\n\r\n### Event Viewer logs\r\n\r\n\u0060\u0060\u0060\r\nLog Name:      Application\r\nSource:        IIS AspNetCore Module V2\r\nDate:          12/25/2018 9:12:06 AM\r\nEvent ID:      1033\r\nTask Category: None\r\nLevel:         Information\r\nKeywords:      Classic\r\nUser:          N/A\r\nComputer:      THE_SERVER\r\nDescription:\r\nApplication \u0027MACHINE/WEBROOT/APPHOST/THE_APP\u0027 has shutdown.\r\nEvent Xml:\r\n\u003CEvent xmlns=\u0022http://schemas.microsoft.com/win/2004/08/events/event\u0022\u003E\r\n  \u003CSystem\u003E\r\n    \u003CProvider Name=\u0022IIS AspNetCore Module V2\u0022 /\u003E\r\n    \u003CEventID Qualifiers=\u00220\u0022\u003E1033\u003C/EventID\u003E\r\n    \u003CLevel\u003E4\u003C/Level\u003E\r\n    \u003CTask\u003E0\u003C/Task\u003E\r\n    \u003CKeywords\u003E0x80000000000000\u003C/Keywords\u003E\r\n    \u003CTimeCreated SystemTime=\u00222018-12-25T14:12:06.000000000Z\u0022 /\u003E\r\n    \u003CEventRecordID\u003E1336018\u003C/EventRecordID\u003E\r\n    \u003CChannel\u003EApplication\u003C/Channel\u003E\r\n    \u003CComputer\u003ETHE_SERVER\u003C/Computer\u003E\r\n    \u003CSecurity /\u003E\r\n  \u003C/System\u003E\r\n  \u003CEventData\u003E\r\n    \u003CData\u003EApplication \u0027MACHINE/WEBROOT/APPHOST/THE_APP\u0027 has shutdown.\u003C/Data\u003E\r\n    \u003CData\u003EProcess Id: 21132.\u003C/Data\u003E\r\n    \u003CData\u003EFile Version: 12.2.18316.0. Description: IIS ASP.NET Core Module V2 Request Handler. Commit: ce8cf65589734f82b0536c543aba5bd60d0a5a98\u003C/Data\u003E\r\n  \u003C/EventData\u003E\r\n\u003C/Event\u003E\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\nLog Name:      Application\r\nSource:        Application Error\r\nDate:          12/25/2018 9:12:07 AM\r\nEvent ID:      1000\r\nTask Category: (100)\r\nLevel:         Error\r\nKeywords:      Classic\r\nUser:          N/A\r\nComputer:      THE_SERVER\r\nDescription:\r\nFaulting application name: w3wp.exe, version: 8.5.9600.16384, time stamp: 0x5215df96\r\nFaulting module name: KERNELBASE.dll, version: 6.3.9600.18938, time stamp: 0x5a7ddf0a\r\nException code: 0xe0455858\r\nFault offset: 0x0000000000008eac\r\nFaulting process id: 0x528c\r\nFaulting application start time: 0x01d49b68baf0ffe9\r\nFaulting application path: c:\\windows\\system32\\inetsrv\\w3wp.exe\r\nFaulting module path: C:\\windows\\system32\\KERNELBASE.dll\r\nReport Id: 0f5a2200-084f-11e9-80d8-ac1f6b222a7d\r\nFaulting package full name: \r\nFaulting package-relative application ID: \r\nEvent Xml:\r\n\u003CEvent xmlns=\u0022http://schemas.microsoft.com/win/2004/08/events/event\u0022\u003E\r\n  \u003CSystem\u003E\r\n    \u003CProvider Name=\u0022Application Error\u0022 /\u003E\r\n    \u003CEventID Qualifiers=\u00220\u0022\u003E1000\u003C/EventID\u003E\r\n    \u003CLevel\u003E2\u003C/Level\u003E\r\n    \u003CTask\u003E100\u003C/Task\u003E\r\n    \u003CKeywords\u003E0x80000000000000\u003C/Keywords\u003E\r\n    \u003CTimeCreated SystemTime=\u00222018-12-25T14:12:07.000000000Z\u0022 /\u003E\r\n    \u003CEventRecordID\u003E1336019\u003C/EventRecordID\u003E\r\n    \u003CChannel\u003EApplication\u003C/Channel\u003E\r\n    \u003CComputer\u003ETHE_SERVER\u003C/Computer\u003E\r\n    \u003CSecurity /\u003E\r\n  \u003C/System\u003E\r\n  \u003CEventData\u003E\r\n    \u003CData\u003Ew3wp.exe\u003C/Data\u003E\r\n    \u003CData\u003E8.5.9600.16384\u003C/Data\u003E\r\n    \u003CData\u003E5215df96\u003C/Data\u003E\r\n    \u003CData\u003EKERNELBASE.dll\u003C/Data\u003E\r\n    \u003CData\u003E6.3.9600.18938\u003C/Data\u003E\r\n    \u003CData\u003E5a7ddf0a\u003C/Data\u003E\r\n    \u003CData\u003Ee0455858\u003C/Data\u003E\r\n    \u003CData\u003E0000000000008eac\u003C/Data\u003E\r\n    \u003CData\u003E528c\u003C/Data\u003E\r\n    \u003CData\u003E01d49b68baf0ffe9\u003C/Data\u003E\r\n    \u003CData\u003Ec:\\windows\\system32\\inetsrv\\w3wp.exe\u003C/Data\u003E\r\n    \u003CData\u003EC:\\windows\\system32\\KERNELBASE.dll\u003C/Data\u003E\r\n    \u003CData\u003E0f5a2200-084f-11e9-80d8-ac1f6b222a7d\u003C/Data\u003E\r\n    \u003CData\u003E\r\n    \u003C/Data\u003E\r\n    \u003CData\u003E\r\n    \u003C/Data\u003E\r\n  \u003C/EventData\u003E\r\n\u003C/Event\u003E\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\nLog Name:      Application\r\nSource:        Windows Error Reporting\r\nDate:          12/25/2018 9:12:07 AM\r\nEvent ID:      1001\r\nTask Category: None\r\nLevel:         Information\r\nKeywords:      Classic\r\nUser:          N/A\r\nComputer:      THE_SERVER\r\nDescription:\r\nFault bucket , type 0\r\nEvent Name: APPCRASH\r\nResponse: Not available\r\nCab Id: 0\r\n\r\nProblem signature:\r\nP1: w3wp.exe\r\nP2: 8.5.9600.16384\r\nP3: 5215df96\r\nP4: KERNELBASE.dll\r\nP5: 6.3.9600.18938\r\nP6: 5a7ddf0a\r\nP7: e0455858\r\nP8: 0000000000008eac\r\nP9: \r\nP10: \r\n\r\nAttached files:\r\n\r\nThese files may be available here:\r\n\r\n\r\nAnalysis symbol: \r\nRechecking for solution: 0\r\nReport Id: 0f5a2200-084f-11e9-80d8-ac1f6b222a7d\r\nReport Status: 0\r\nHashed bucket: \r\nEvent Xml:\r\n\u003CEvent xmlns=\u0022http://schemas.microsoft.com/win/2004/08/events/event\u0022\u003E\r\n  \u003CSystem\u003E\r\n    \u003CProvider Name=\u0022Windows Error Reporting\u0022 /\u003E\r\n    \u003CEventID Qualifiers=\u00220\u0022\u003E1001\u003C/EventID\u003E\r\n    \u003CLevel\u003E4\u003C/Level\u003E\r\n    \u003CTask\u003E0\u003C/Task\u003E\r\n    \u003CKeywords\u003E0x80000000000000\u003C/Keywords\u003E\r\n    \u003CTimeCreated SystemTime=\u00222018-12-25T14:12:07.000000000Z\u0022 /\u003E\r\n    \u003CEventRecordID\u003E1336020\u003C/EventRecordID\u003E\r\n    \u003CChannel\u003EApplication\u003C/Channel\u003E\r\n    \u003CComputer\u003ETHE_SERVER\u003C/Computer\u003E\r\n    \u003CSecurity /\u003E\r\n  \u003C/System\u003E\r\n  \u003CEventData\u003E\r\n    \u003CData\u003E\r\n    \u003C/Data\u003E\r\n    \u003CData\u003E0\u003C/Data\u003E\r\n    \u003CData\u003EAPPCRASH\u003C/Data\u003E\r\n    \u003CData\u003ENot available\u003C/Data\u003E\r\n    \u003CData\u003E0\u003C/Data\u003E\r\n    \u003CData\u003Ew3wp.exe\u003C/Data\u003E\r\n    \u003CData\u003E8.5.9600.16384\u003C/Data\u003E\r\n    \u003CData\u003E5215df96\u003C/Data\u003E\r\n    \u003CData\u003EKERNELBASE.dll\u003C/Data\u003E\r\n    \u003CData\u003E6.3.9600.18938\u003C/Data\u003E\r\n    \u003CData\u003E5a7ddf0a\u003C/Data\u003E\r\n    \u003CData\u003Ee0455858\u003C/Data\u003E\r\n    \u003CData\u003E0000000000008eac\u003C/Data\u003E\r\n    \u003CData\u003E\r\n    \u003C/Data\u003E\r\n    \u003CData\u003E\r\n    \u003C/Data\u003E\r\n    \u003CData\u003E\r\n    \u003C/Data\u003E\r\n    \u003CData\u003E\r\n    \u003C/Data\u003E\r\n    \u003CData\u003E\r\n    \u003C/Data\u003E\r\n    \u003CData\u003E0\u003C/Data\u003E\r\n    \u003CData\u003E0f5a2200-084f-11e9-80d8-ac1f6b222a7d\u003C/Data\u003E\r\n    \u003CData\u003E0\u003C/Data\u003E\r\n    \u003CData\u003E\r\n    \u003C/Data\u003E\r\n  \u003C/EventData\u003E\r\n\u003C/Event\u003E\r\n\u0060\u0060\u0060\r\n\r\n### dotnet --info\r\n\r\n\u0060\u0060\u0060\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\u0060\u0060\u0060",
    "upvotes": 4,
    "labels": [
      "bug",
      "area-signalr",
      "severity-minor",
      "affected-medium"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ1MDIyNzc0OA==",
        "parentId": null,
        "author": "fabiano",
        "content": "I did a test here and dropped an app_offline.htm file in the application\u0027s folder. After some seconds the w3wp.exe process crashed.\r\n\r\nThen I removed the attribute \u0060hostingModel=\u0022InProcess\u0022\u0060 from my web.config file and repeated the test. This time the w3wp.exe process didn\u0027t crash.",
        "createdAt": "2018-12-27T20:44:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/6149#issuecomment-450227748"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ1MDkyNDgwMg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "@pakrym @jkotalik Could you guys take a quick look?",
        "createdAt": "2019-01-02T17:15:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/6149#issuecomment-450924802"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ1MDk1OTY2MQ==",
        "parentId": null,
        "author": "gschuager",
        "content": "I get this exception when updating Microsoft.AspNetCore.SignalR from 1.0.4 to 1.1.0:\r\n\u0060\u0060\u0060\r\nSystem.ObjectDisposedException: Instances cannot be resolved and nested lifetimes cannot be created from this LifetimeScope as it has already been disposed.\r\n    at Autofac.Core.Lifetime.LifetimeScope.CheckNotDisposed()\r\n    at Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope(Object tag)\r\n    at Autofac.Extensions.DependencyInjection.AutofacServiceScopeFactory.CreateScope() in C:\\projects\\autofac-extensions-dependencyinjection\\src\\Autofac.Extensions.DependencyInjection\\AutofacServiceScopeFactory.cs:line 62\r\n    at Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u00601.OnDisconnectedAsync(HubConnectionContext connection, Exception exception)\r\n    at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.HubOnDisconnectedAsync(HubConnectionContext connection, Exception exception)\r\n    at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.RunHubAsync(HubConnectionContext connection)\r\n    at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.OnConnectedAsync(ConnectionContext connection)\r\n    at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.OnConnectedAsync(ConnectionContext connection)\r\n    at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher.ExecuteApplication(ConnectionDelegate connectionDelegate, HttpConnectionContext connection)\r\n    at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext.WaitOnTasks(Task applicationTask, Task transportTask, Boolean closeGracefully)\r\n    at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionContext.DisposeAsync(Boolean closeGracefully)\r\n    at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager.DisposeAndRemoveAsync(HttpConnectionContext connection, Boolean closeGracefully)\r\n    at Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager.DisposeAndRemoveAsync(HttpConnectionContext connection, Boolean closeGracefully)\r\n\u0060\u0060\u0060",
        "createdAt": "2019-01-02T19:27:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/6149#issuecomment-450959661"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ2Nzk4MTY5OA==",
        "parentId": null,
        "author": "muratg",
        "content": "Triage: This looks like an issue with SignalR or app throwing an exception on a background thread on shutdown.  @BrennanConroy can you take another look?",
        "createdAt": "2019-02-27T18:44:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/6149#issuecomment-467981698"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ2Nzk4MTgxNQ==",
        "parentId": null,
        "author": "muratg",
        "content": "(w3wp crashing is a red herring here.)",
        "createdAt": "2019-02-27T18:44:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/6149#issuecomment-467981815"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ2Nzk4MjEzNA==",
        "parentId": null,
        "author": "muratg",
        "content": "@fabiano Can you share your eventlogs when running with out-of-proc. You should be looking for a dotnet.exe crash in that case.",
        "createdAt": "2019-02-27T18:45:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/6149#issuecomment-467982134"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ2Nzk4OTk1Mg==",
        "parentId": null,
        "author": "fabiano",
        "content": "@muratg The application is not crashing when running with out-of-process. Checked the logs and there is only the entries from IIS AspNetCore Module V2 shutting down the application:\r\n\r\n\u0060\u0060\u0060\r\nLog Name:      Application\r\nSource:        IIS AspNetCore Module V2\r\nDate:          2/27/2019 1:56:38 PM\r\nEvent ID:      1012\r\nTask Category: None\r\nLevel:         Information\r\nKeywords:      Classic\r\nUser:          N/A\r\nComputer:      THE_SERVER\r\nDescription:\r\nApplication \u0027C:\\inetpub\\wwwroot\\the_app\\\u0027 was recycled after detecting the app_offline file.\r\nEvent Xml:\r\n\u003CEvent xmlns=\u0022http://schemas.microsoft.com/win/2004/08/events/event\u0022\u003E\r\n  \u003CSystem\u003E\r\n    \u003CProvider Name=\u0022IIS AspNetCore Module V2\u0022 /\u003E\r\n    \u003CEventID Qualifiers=\u00220\u0022\u003E1012\u003C/EventID\u003E\r\n    \u003CLevel\u003E4\u003C/Level\u003E\r\n    \u003CTask\u003E0\u003C/Task\u003E\r\n    \u003CKeywords\u003E0x80000000000000\u003C/Keywords\u003E\r\n    \u003CTimeCreated SystemTime=\u00222019-02-27T18:56:38.000000000Z\u0022 /\u003E\r\n    \u003CEventRecordID\u003E1410136\u003C/EventRecordID\u003E\r\n    \u003CChannel\u003EApplication\u003C/Channel\u003E\r\n    \u003CComputer\u003ETHE_SERVER\u003C/Computer\u003E\r\n    \u003CSecurity /\u003E\r\n  \u003C/System\u003E\r\n  \u003CEventData\u003E\r\n    \u003CData\u003EApplication \u0027C:\\inetpub\\wwwroot\\the_app\\\u0027 was recycled after detecting the app_offline file.\u003C/Data\u003E\r\n    \u003CData\u003EProcess Id: 19388.\u003C/Data\u003E\r\n    \u003CData\u003EFile Version: 12.2.18346.1. Description: IIS ASP.NET Core Module V2 Request Handler. Commit: 0f9ad16b096ca2535d77efd2ad27645449421b44\u003C/Data\u003E\r\n  \u003C/EventData\u003E\r\n\u003C/Event\u003E\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\nLog Name:      Application\r\nSource:        IIS AspNetCore Module V2\r\nDate:          2/27/2019 1:56:38 PM\r\nEvent ID:      1006\r\nTask Category: None\r\nLevel:         Information\r\nKeywords:      Classic\r\nUser:          N/A\r\nComputer:      THE_SERVER\r\nDescription:\r\nSent shutdown HTTP message to process \u002729772\u0027 and received http status \u0027202\u0027.\r\nEvent Xml:\r\n\u003CEvent xmlns=\u0022http://schemas.microsoft.com/win/2004/08/events/event\u0022\u003E\r\n  \u003CSystem\u003E\r\n    \u003CProvider Name=\u0022IIS AspNetCore Module V2\u0022 /\u003E\r\n    \u003CEventID Qualifiers=\u00220\u0022\u003E1006\u003C/EventID\u003E\r\n    \u003CLevel\u003E4\u003C/Level\u003E\r\n    \u003CTask\u003E0\u003C/Task\u003E\r\n    \u003CKeywords\u003E0x80000000000000\u003C/Keywords\u003E\r\n    \u003CTimeCreated SystemTime=\u00222019-02-27T18:56:38.000000000Z\u0022 /\u003E\r\n    \u003CEventRecordID\u003E1410137\u003C/EventRecordID\u003E\r\n    \u003CChannel\u003EApplication\u003C/Channel\u003E\r\n    \u003CComputer\u003ETHE_SERVER\u003C/Computer\u003E\r\n    \u003CSecurity /\u003E\r\n  \u003C/System\u003E\r\n  \u003CEventData\u003E\r\n    \u003CData\u003ESent shutdown HTTP message to process \u002729772\u0027 and received http status \u0027202\u0027.\u003C/Data\u003E\r\n    \u003CData\u003EProcess Id: 19388.\u003C/Data\u003E\r\n    \u003CData\u003EFile Version: 12.2.18346.1. Description: IIS ASP.NET Core Module V2 Request Handler. Commit: 0f9ad16b096ca2535d77efd2ad27645449421b44\u003C/Data\u003E\r\n  \u003C/EventData\u003E\r\n\u003C/Event\u003E\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\nLog Name:      Application\r\nSource:        IIS AspNetCore Module V2\r\nDate:          2/27/2019 1:56:38 PM\r\nEvent ID:      1030\r\nTask Category: None\r\nLevel:         Information\r\nKeywords:      Classic\r\nUser:          N/A\r\nComputer:      THE_SERVER\r\nDescription:\r\nApplication \u0027/LM/W3SVC/4/ROOT\u0027 with physical root \u0027C:\\inetpub\\wwwroot\\the_app\\\u0027 shut down process with Id \u002729772\u0027 listening on port \u002732531\u0027\r\nEvent Xml:\r\n\u003CEvent xmlns=\u0022http://schemas.microsoft.com/win/2004/08/events/event\u0022\u003E\r\n  \u003CSystem\u003E\r\n    \u003CProvider Name=\u0022IIS AspNetCore Module V2\u0022 /\u003E\r\n    \u003CEventID Qualifiers=\u00220\u0022\u003E1030\u003C/EventID\u003E\r\n    \u003CLevel\u003E4\u003C/Level\u003E\r\n    \u003CTask\u003E0\u003C/Task\u003E\r\n    \u003CKeywords\u003E0x80000000000000\u003C/Keywords\u003E\r\n    \u003CTimeCreated SystemTime=\u00222019-02-27T18:56:38.000000000Z\u0022 /\u003E\r\n    \u003CEventRecordID\u003E1410138\u003C/EventRecordID\u003E\r\n    \u003CChannel\u003EApplication\u003C/Channel\u003E\r\n    \u003CComputer\u003ETHE_SERVER\u003C/Computer\u003E\r\n    \u003CSecurity /\u003E\r\n  \u003C/System\u003E\r\n  \u003CEventData\u003E\r\n    \u003CData\u003EApplication \u0027/LM/W3SVC/4/ROOT\u0027 with physical root \u0027C:\\inetpub\\wwwroot\\the_app\\\u0027 shut down process with Id \u002729772\u0027 listening on port \u002732531\u0027\u003C/Data\u003E\r\n    \u003CData\u003EProcess Id: 19388.\u003C/Data\u003E\r\n    \u003CData\u003EFile Version: 12.2.18346.1. Description: IIS ASP.NET Core Module V2 Request Handler. Commit: 0f9ad16b096ca2535d77efd2ad27645449421b44\u003C/Data\u003E\r\n  \u003C/EventData\u003E\r\n\u003C/Event\u003E\r\n\u0060\u0060\u0060",
        "createdAt": "2019-02-27T19:07:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/6149#issuecomment-467989952"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ4MTQ0Mzc4OQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Triage decisions:\r\n* Block server shutdown until the connections are disposed. Hosting already has a timeout so we\u0027re OK just blocking on the user code\r\n* Observe exceptions in DisposeAndRemoveAsync to avoid shutdown issues.",
        "createdAt": "2019-04-09T21:17:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/6149#issuecomment-481443789"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ5NzUxMTU3NQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Suggest considering this for 3.1. We don\u0027t have the capacity to do it in 3.0 given the current list of work.",
        "createdAt": "2019-05-30T22:43:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/6149#issuecomment-497511575"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzkyMjAwMA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "I haven\u0027t seen reports of this recently. Is it still happening?",
        "createdAt": "2021-04-06T08:10:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/6149#issuecomment-813922000"
      },
      {
        "id": "IC_kwDOAQzde86L4Z4D",
        "parentId": null,
        "author": "johanknirk",
        "content": "We are running default service mode SignalR with app services behind, \r\n\r\nWe do rolling deploys behind an application gateway and when shutting down a app service instance we get this in logs:\r\n\r\n\u0060{\u0022message\u0022:\u0022Error when dispatching \\u0027\\u0022OnDisconnectedAsync\\u0022\\u0027 on hub.\u0022,\u0022id\u0022:\u002240685953-52b4-4d14-ba84-e7aab10b857b\u0022,\u0022fields\u0022:{\u0022HubMethod\u0022:\u0022OnDisconnectedAsync\u0022,\u0022EventId\u0022:\u0022{ Id: 1, Name: \\u0022ErrorDispatchingHubEvent\\u0022 }\u0022,\u0022SourceContext\u0022:\u0022Microsoft.AspNetCore.SignalR.HubConnectionHandler\u0022,\u0022NG_ServiceName\u0022:\u0022TrumfAppBFF\u0022,\u0022NG_MachineName\u0022:\u0022DW0SDWK000A6R\u0022,\u0022NG_Environment\u0022:\u0022dev\u0022,\u0022SourceContextName\u0022:\u0022HubConnectionHandler\u0022},\u0022messagetype\u0022:\u0022structured\u0022,\u0022logger\u0022:\u0022serilog\u0022,\u0022host\u0022:\u0022DW0SDWK000A6R\u0022,\u0022app\u0022:\u0022TrumfAppBFF\u0022,\u0022level\u0022:\u0022ERROR\u0022,\u0022timestamp\u0022:\u00222024-09-12T16:56:30.413\u0022,\u0022exception\u0022:\u0022System.ObjectDisposedException: Cannot access a disposed object.\\r\\nObject name: \\u0027IServiceProvider\\u0027.\\r\\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ThrowHelper.ThrowObjectDisposedException()\\r\\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.CreateScope()\\r\\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.CreateAsyncScope(IServiceScopeFactory serviceScopeFactory)\\r\\n   at Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\\u00601.OnDisconnectedAsync(HubConnectionContext connection, Exception exception)\\r\\n   at Microsoft.AspNetCore.SignalR.HubConnectionHandler\\u00601.HubOnDisconnectedAsync(HubConnectionContext connection, Exception exception)\\r\\n   at Microsoft.AspNetCore.SignalR.HubConnectionHandler\\u00601.RunHubAsync(HubConnectionContext connection)\\r\\n   at Microsoft.AspNetCore.SignalR.HubConnectionHandler\\u00601.OnConnectedAsync(ConnectionContext connection)\\r\\n   at Microsoft.AspNetCore.SignalR.HubConnectionHandler\\u00601.OnConnectedAsync(ConnectionContext connection)\\r\\n   at Microsoft.Azure.SignalR.ServiceConnection.ProcessApplicationTaskAsyncCore(ClientConnectionContext connection)\\r\\n   at Microsoft.Azure.SignalR.ServiceConnection.ProcessClientConnectionAsync(ClientConnectionContext connection)\u0022,\u0022templateHash\u0022:\u00229ac2dd74\u0022,\u0022logversion\u0022:\u00220\u0022}\u0060",
        "createdAt": "2024-09-12T17:05:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/6149#issuecomment-2346819075"
      },
      {
        "id": "IC_kwDOAQzde86WICwD",
        "parentId": null,
        "author": "zoeperryman",
        "content": "Any updates here?\n\nWe are still seeing this issue constantly each time our app shuts down, causing significant error noise in our logs.\n\nUsing .NET 8.0 with the Microsoft.Azure.SignalR library version 1.27.0. We are hosted our app in an Azure Web App.\n\n\u003E Error when dispatching \u0027OnDisconnectedAsync\u0027 on hub.\n\n\u0060\u0060\u0060\nSystem.ObjectDisposedException: Cannot access a disposed object.\nObject name: \u0027IServiceProvider\u0027.\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ThrowHelper.ThrowObjectDisposedException()\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.CreateScope()\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.CreateScope()\n   at Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u00601.OnDisconnectedAsync(HubConnectionContext connection, Exception exception)\n   at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.HubOnDisconnectedAsync(HubConnectionContext connection, Exception exception)\n\u0060\u0060\u0060",
        "createdAt": "2024-12-04T22:29:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/6149#issuecomment-2518690819"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0MDM5NzcyOTU=",
    "title": "Send completion from server in Client to Server streaming",
    "url": "https://github.com/dotnet/aspnetcore/issues/7070",
    "createdAt": "2019-01-28T19:46:02Z",
    "lastUpdated": "2021-07-29T18:40:54Z",
    "body": "Epic https://github.com/aspnet/AspNetCore/issues/8796\r\n\r\nWe should send a completion message to the client when the server completes the stream early so the client knows to stop sending stream items.\r\n\r\nAlso, if an unexpected stream item arrives we should probably send a completion for that stream id.",
    "upvotes": 0,
    "labels": [
      "Needs: Design",
      "enhancement",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ2NjEwNTQ2MQ==",
        "parentId": null,
        "author": "muratg",
        "content": "Moving this out as preview3 deadline was reached.",
        "createdAt": "2019-02-21T18:11:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7070#issuecomment-466105461"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ4MTQ0ODk4Ng==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Triage decision: We need to review cancellation/completion after preview 5.",
        "createdAt": "2019-04-09T21:34:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7070#issuecomment-481448986"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ4ODk1NDgxMA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@anurse Can we assign @mikaelm12 this as well?",
        "createdAt": "2019-05-03T06:06:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7070#issuecomment-488954810"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzkyMjYyMg==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Did we do this? This seems important.",
        "createdAt": "2021-04-06T08:11:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7070#issuecomment-813922622"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzkyMjcwNA==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-04-06T08:11:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7070#issuecomment-813922704"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxNDI4NzA0Ng==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "We didn\u0027t do this, this only applies if the hub method ends while the stream is still active. And it will just ignore any unexpected stream items the client still sends.\r\n\r\nShould be fairly simple to do.",
        "createdAt": "2021-04-06T17:10:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7070#issuecomment-814287046"
      },
      {
        "id": "IC_kwDOAQzde841AsHu",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-29T18:40:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7070#issuecomment-889373166"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0MDcwODI1OTQ=",
    "title": "[SignalR] Support union in the js client",
    "url": "https://github.com/dotnet/aspnetcore/issues/7298",
    "createdAt": "2019-02-06T05:06:17Z",
    "lastUpdated": "2024-11-27T04:52:19Z",
    "body": "MessagePack for C# supports Union type and I can use it for interfaces. For example, I have the following model that I send to js client:\r\n\u0060\u0060\u0060\r\n[MessagePackObject]\r\npublic class Prices\r\n{\r\n        [Key(\u0022last\u0022)]\r\n        public decimal Last { get; set; }\r\n\r\n        [Key(\u0022sell\u0022)]\r\n        public decimal Sell { get; set; }\r\n\r\n        [Key(\u0022buy\u0022)]\r\n        public decimal Buy { get; set; }\r\n\r\n        [Key(\u0022product\u0022)]\r\n        public IProductModel Product { get; set; }\r\n}\r\n\r\n[MessagePack.Union(0, typeof(ProductEx0))]\r\n[MessagePack.Union(1, typeof(ProductEx1))]\r\npublic interface IProductModel \r\n{\r\n   string Name{ get; set; }\r\n}\r\n\u0060\u0060\u0060\r\nI can create different \u0060IProductModel\u0060 and send to the client. I handle creating the corresponding objects manually on the client and all works fine. But, it does\u0027t work when I want to deserialize message to a class that contain union.  I have the following class on the server side:\r\n\u0060\u0060\u0060\r\npublic RegisterProduct \r\n{\r\n   [Key(\u0022product\u0022)]\r\n   public IProductModel Product { get; set; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nI send the following object from the client:\r\n\u0060\u0060\u0060\r\n{\r\n      product: new ProductEx0()     \r\n}\r\n\u0060\u0060\u0060\r\nMessagePack on server side throws error:\r\n\r\n\u003E  System.InvalidOperationException: code is invalid. code:129 format:fixmap\r\n\r\nI understand that Union types are encoded in different way, but from the client I send simple model. therefore messagepack cannot handle it.\r\n",
    "upvotes": 6,
    "labels": [
      "enhancement",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ2MTE1MjM0Mw==",
        "parentId": null,
        "author": "bradygaster",
        "content": "cc @muratg to come up with a repro and potential path forward. assigning to @BrennanConroy to come up with a test case so we can investigate. thanks for the detailed repro above!",
        "createdAt": "2019-02-06T19:21:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7298#issuecomment-461152343"
      },
      {
        "id": "IC_kwDOAQzde841FzDM",
        "parentId": null,
        "author": "peppy",
        "content": "Until this is resolved, I\u0027d highly recommend adding mention of this in the SignalR documentation. Right now it is recommended to use MessagePack for serialisation of messages, but with limitations like this (which you can hit late into development) not listed from the outset it\u0027s a bit of a frustrating situation.\r\n\r\nAlso a bit weird that this is titled as a javascript client issue, but also applies to the c# client.",
        "createdAt": "2021-08-02T04:51:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7298#issuecomment-890712268"
      },
      {
        "id": "IC_kwDOAQzde851zKT3",
        "parentId": null,
        "author": "Sonorpearl",
        "content": "Will there ever be a fix for it?\r\n\r\n@peppy I heard you have some kind of workaround?",
        "createdAt": "2024-03-04T11:14:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7298#issuecomment-1976345847"
      },
      {
        "id": "IC_kwDOAQzde851zT5E",
        "parentId": null,
        "author": "Sonorpearl",
        "content": "Mentioning this issue, so it\u0027s also linked: https://github.com/MessagePack-CSharp/MessagePack-CSharp/issues/1171",
        "createdAt": "2024-03-04T11:37:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7298#issuecomment-1976385092"
      },
      {
        "id": "IC_kwDOAQzde851zUvs",
        "parentId": null,
        "author": "Sonorpearl",
        "content": "Also throwing it in, but it seems like MemoryPack (MessagePack Alternative), has solved this issue:\r\nhttps://github.com/Cysharp/MemoryPack/issues/146\r\nHaven\u0027t done an investigation yet.",
        "createdAt": "2024-03-04T11:39:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7298#issuecomment-1976388588"
      },
      {
        "id": "IC_kwDOAQzde8515omm",
        "parentId": null,
        "author": "SylvainGantois",
        "content": "The standard hub Json protocol is much easier to use and supports polymorphism.\r\nIn our real life complex solution, we couldn\u0027t use MessagePack everywhere, and MemoryPack seems to have even more constraints.\r\nUnless there is a real performance issue related to message size, better stay away from those.",
        "createdAt": "2024-03-05T06:20:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7298#issuecomment-1978042790"
      },
      {
        "id": "IC_kwDOAQzde852kPK8",
        "parentId": null,
        "author": "olegsavelos",
        "content": "Guys its been years now, any chance you could actually fix this ?\r\n@Sonorpearl As a solution I have just copied their protocol implementation from the aspnet source and made the required changes so my models serialized by desired type, its literally 2 lines of code you need to change.\r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/6490712/80f579a0-cc65-4ab7-89f3-588c8f636c29)\r\n",
        "createdAt": "2024-03-11T18:55:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7298#issuecomment-1989210812"
      },
      {
        "id": "IC_kwDOAQzde852vRWt",
        "parentId": null,
        "author": "BFS-JWesseler",
        "content": "Thanks @olegsavelos, I will look into that tomorrow. My plan was to also look at the implementation of osu!, which was done here by @peppy:\r\nhttps://github.com/ppy/osu/pull/14389",
        "createdAt": "2024-03-12T16:43:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7298#issuecomment-1992103341"
      },
      {
        "id": "IC_kwDOAQzde855Dbyb",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E any chance you could actually fix this ?\r\n\r\n\u003E its literally 2 lines of code you need to change\r\n\r\nWe would gladly accept a PR to fix this. This is an open-source project \uD83D\uDE04 \r\n\r\nTests would likely go in https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/common/SignalR.Common/test/Internal/Protocol/MessagePackHubProtocolTests.cs",
        "createdAt": "2024-04-02T02:03:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7298#issuecomment-2030943387"
      },
      {
        "id": "IC_kwDOAQzde86VLTs5",
        "parentId": null,
        "author": "Mitchman215",
        "content": "Now that .NET 9 finally added \u0060System.Text.Json\u0060 polymorphic support for SignalR (#53035), it would be really nice to also have this capability with MessagePack for feature parity. As it stands, [the release notes for .NET 9](https://learn.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-9.0?view=aspnetcore-9.0#polymorphic-type-support-in-signalr-hubs) don\u0027t explicitly indicate that polymorphic support is only available for \u0060System.Text.Json\u0060 and not MessagePack, which is a bit misleading.\n\nAlso to echo @peppy\u0027s previous comment, it would be great if this issue were renamed to indicate that it also applies to c# client and [SignalR\u0027s documentation](https://learn.microsoft.com/en-us/aspnet/core/signalr/messagepackhubprotocol?view=aspnetcore-9.0) were updated to mention this limitation.\n\n",
        "createdAt": "2024-11-27T04:52:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/7298#issuecomment-2502769465"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0MjM4Nzg0MDA=",
    "title": "Support automatic reconnect in the Java client",
    "url": "https://github.com/dotnet/aspnetcore/issues/8711",
    "createdAt": "2019-03-21T18:25:36Z",
    "lastUpdated": "2024-12-23T09:09:31Z",
    "body": "Epic #8797 \r\n\r\nSplit from https://github.com/aspnet/AspNetCore/issues/5282\r\n\r\nWe will support automatic reconnect in 3.0 **without message replay**. We will also allow customization of the reconnect logic. This will be opt-in via a \u0060HubConnectionBuilder\u0060 option. The default behavior will continue to be manual reconnection.",
    "upvotes": 7,
    "labels": [
      "enhancement",
      "area-signalr",
      "feature-client-java",
      "severity-minor",
      "affected-all"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ4MDkyNjc0MQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Pre-triage notes:\r\n* Seems at risk for preview 5, but kinda odd to have Java be the odd client out.\r\n* Probably should be below the cut line for preview 5 given the very tight schedule.",
        "createdAt": "2019-04-08T17:27:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8711#issuecomment-480926741"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ5NzUxMDQzMw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "We\u0027ll take a look at this among post-3.0 work (including things like seemless reconnect) and aim to do it in 3.1 if that\u0027s appropriate.",
        "createdAt": "2019-05-30T22:38:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8711#issuecomment-497510433"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwNjAzNjAxMw==",
        "parentId": null,
        "author": "Moes81",
        "content": "Any update, on when the automaticReconnect will be scheduled? It\u0027s obviously not part of the 5.0 RC.",
        "createdAt": "2020-10-09T08:05:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8711#issuecomment-706036013"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczNDE5ODQ0OQ==",
        "parentId": null,
        "author": "Moes81",
        "content": "@BrennanConroy  Since the \u00225.0-candidate\u0022 label was removed, and it\u0027s not part of the 5.0 release, what\u0027s the plan with this feature?",
        "createdAt": "2020-11-26T09:58:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8711#issuecomment-734198449"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc2OTg1NDUxNw==",
        "parentId": null,
        "author": "NunoPontes",
        "content": "Hello, any updates on when this will be release for Java clients?",
        "createdAt": "2021-01-29T14:57:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8711#issuecomment-769854517"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzkyNTUwNQ==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-04-06T08:15:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8711#issuecomment-813925505"
      },
      {
        "id": "IC_kwDOAQzde841AtNU",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-29T18:48:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8711#issuecomment-889377620"
      },
      {
        "id": "IC_kwDOAQzde844E706",
        "parentId": null,
        "author": "Moes81",
        "content": "Since it\u0027s been moved to the backlog end of July and has been there since, I guess it\u0027s not going to happen very soon, right @BrennanConroy  @davidfowl ?",
        "createdAt": "2021-10-12T09:08:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8711#issuecomment-940817722"
      },
      {
        "id": "IC_kwDOAQzde85E2pYI",
        "parentId": null,
        "author": "50c",
        "content": "Is there any news about the feature? I\u0027m using 7.0.0-preview.4.22251.1 and client reconnect would be much appropriate",
        "createdAt": "2022-06-14T13:18:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8711#issuecomment-1155175944"
      },
      {
        "id": "IC_kwDOAQzde85qAGdD",
        "parentId": null,
        "author": "Varorbc",
        "content": "Hello, any updates on when this will be release for Java clients?",
        "createdAt": "2023-10-25T02:40:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8711#issuecomment-1778411331"
      },
      {
        "id": "IC_kwDOAQzde85-YM6i",
        "parentId": null,
        "author": "Haidar0096",
        "content": "Any updates on this?",
        "createdAt": "2024-05-20T11:33:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8711#issuecomment-2120273570"
      },
      {
        "id": "IC_kwDOAQzde86YizgK",
        "parentId": null,
        "author": "nuhkoca",
        "content": "Hello, any update here?",
        "createdAt": "2024-12-23T09:09:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8711#issuecomment-2559260682"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0MjM5NDExMTM=",
    "title": "Add streaming support to the C\u002B\u002B client",
    "url": "https://github.com/dotnet/aspnetcore/issues/8714",
    "createdAt": "2019-03-21T21:04:21Z",
    "lastUpdated": "2023-06-02T01:11:40Z",
    "body": "Epic #5301\r\n\r\nBoth client-to-server and server-to-client.\r\n\r\nThings to work out:\r\n* What exchange types do we use (RxCpp is a thing... https://github.com/ReactiveX/RxCpp)",
    "upvotes": 1,
    "labels": [
      "Needs: Design",
      "enhancement",
      "cost: L",
      "area-signalr",
      "feature-client-c\u002B\u002B",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2NDYzNjY1NQ==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-07-27T21:02:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8714#issuecomment-664636655"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzkyNTk4MQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@BrennanConroy are these issues still relevant or are we tracking the client work separately?",
        "createdAt": "2021-04-06T08:16:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8714#issuecomment-813925981"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0MjM5NDMzNjY=",
    "title": "Review Options for signalr C\u002B\u002B client",
    "url": "https://github.com/dotnet/aspnetcore/issues/8716",
    "createdAt": "2019-03-21T21:10:25Z",
    "lastUpdated": "2023-06-02T01:11:42Z",
    "body": "Epic #5301\r\n\r\nWe need to review the options model for the SignalR C\u002B\u002B client. Especially around authentication (making sure we support a custom auth token) and providing implementations of our abstractions (http_client, websocket_client, etc.)",
    "upvotes": 0,
    "labels": [
      "task",
      "area-signalr",
      "feature-client-c\u002B\u002B",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYyMzA1MjM5OQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Another one to make sure we cover is \u0022skip negotiation\u0022 (https://github.com/dotnet/aspnetcore/issues/21386)",
        "createdAt": "2020-05-03T04:29:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8716#issuecomment-623052399"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYzMDMzNTcyMQ==",
        "parentId": null,
        "author": "wegylexy",
        "content": "See https://github.com/aspnet/SignalR-Client-Cpp/pull/33",
        "createdAt": "2020-05-18T17:42:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8716#issuecomment-630335721"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2NDYzNjY3Nw==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-07-27T21:02:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8716#issuecomment-664636677"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc4NDM1NzYxMA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "* Connection timeout, 5 seconds by default, times out http requests/negotiate\r\n* Consider adding scheduler settings, right now we spin up 5 threads",
        "createdAt": "2021-02-23T17:09:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8716#issuecomment-784357610"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzkyNjA0OQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@BrennanConroy are these issues still relevant or are we tracking the client work separately?",
        "createdAt": "2021-04-06T08:16:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8716#issuecomment-813926049"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0MjM5NDQwNTA=",
    "title": "Public API review for SignalR C\u002B\u002B Client",
    "url": "https://github.com/dotnet/aspnetcore/issues/8717",
    "createdAt": "2019-03-21T21:12:07Z",
    "lastUpdated": "2024-09-13T21:43:42Z",
    "body": "Epic #5301 \r\n\r\nWe need to do a public API review for the SignalR C\u002B\u002B client to make sure we\u0027re happy with it.",
    "upvotes": 0,
    "labels": [
      "Needs: Design",
      "enhancement",
      "area-signalr",
      "feature-client-c\u002B\u002B",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ3NjQwMzQ1Mw==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Couple notes from PR reviews:\r\n\u0060http_request\u0060 timeout - should we have a separate parameter on send instead, or CTS-like class we return from send?\r\n\u0060websocket_transport\u0060 - \u0022trampoline\u0022 instead of recursion in receive loop (would prevent stack overflow from bad code), https://github.com/aspnet/AspNetCore/pull/8420#discussion_r266165339\r\nThreading - Currently relying on the websocket/http stack to do threading, we should decide on who owns threading and how to do it\r\n\u0060websocket_client\u0060 - \u0060on_receive\u0060 vs \u0060receive\u0060, \u0060receive\u0060 means we control the loop, \u0060on_receive\u0060 means \u0060websocket_client\u0060 providers need to handle the loop\r\n\u0060set_disconnected\u0060 - the callback should probably accept an exception",
        "createdAt": "2019-03-25T22:34:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8717#issuecomment-476403453"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2NDYzNjY4OA==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-07-27T21:02:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8717#issuecomment-664636688"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzkyNjExMQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@BrennanConroy are these issues still relevant or are we tracking the client work separately?",
        "createdAt": "2021-04-06T08:16:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8717#issuecomment-813926111"
      },
      {
        "id": "IC_kwDOAQzde85NiwHS",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003Cdetails\u003E\r\n\u003Csummary\u003Ehub_connection_builder.h\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060c\u002B\u002B\r\nnamespace signalr\r\n{\r\n    class hub_connection_builder\r\n    {\r\n    public:\r\n        hub_connection_builder(std::string url);\r\n\r\n        ~hub_connection_builder();\r\n\r\n        hub_connection_builder(const hub_connection_builder\u0026) = delete;\r\n\r\n        hub_connection_builder(hub_connection_builder\u0026\u0026) noexcept;\r\n\r\n        hub_connection_builder\u0026 operator=(hub_connection_builder\u0026\u0026) noexcept;\r\n\r\n        hub_connection_builder\u0026 operator=(const hub_connection_builder\u0026) = delete;\r\n\r\n        hub_connection_builder\u0026 configure_options(signalr_client_config config);\r\n\r\n        hub_connection_builder\u0026 with_logging(std::shared_ptr\u003Clog_writer\u003E logger, trace_level log_level);\r\n\r\n        hub_connection_builder\u0026 with_websocket_factory(std::function\u003Cstd::shared_ptr\u003Cwebsocket_client\u003E(const signalr_client_config\u0026)\u003E websocket_factory);\r\n\r\n        hub_connection_builder\u0026 with_http_client_factory(std::function\u003Cstd::shared_ptr\u003Chttp_client\u003E(const signalr_client_config\u0026)\u003E http_client_factory);\r\n\r\n        hub_connection_builder\u0026 skip_negotiation(bool skip = true);\r\n\r\n        hub_connection_builder\u0026 with_messagepack_hub_protocol();\r\n\r\n        std::unique_ptr\u003Chub_connection\u003E build();\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\nUsage\r\n\u0060\u0060\u0060c\u002B\u002B\r\nauto hub_connection = std::shared_ptr\u003Csignalr::hub_connection\u003E(\r\n    signalr::hub_connection_builder(\u0022http://localhost:5000/hub\u0022)\r\n    .skip_negotiation()\r\n    .build());\r\n\u0060\u0060\u0060\r\n\r\nTalking points:\r\n* \u0060with_messagepack_hub_protocol\u0060 is exposed even if you didn\u0027t compile with messagepack enabled. Calling it would throw then. We can put it in an \u0060#ifdef\u0060 but then user code would need to define the \u0060DEFINE\u0060 in order to use the API.\r\n  - Or we could look into exposing the \u0060hub_protocol\u0060 class in which case we\u0027d also make \u0060messagepack_hub_protocol\u0060 public\r\n* Should \u0060build()\u0060 return a pointer or \u0060shared_ptr\u0060?\r\n  - pointer likely makes a C-wrapper easier, but does require users to call \u0060delete\u0060 when they are done with the connection, or to wrap the pointer in a \u0060shared_ptr\u0060 themselves (edit: looked into C-wrapper a little and it likely doesn\u0027t care)\r\n* .NET client uses many \u0060WithUrl\u0060 overloads to configure http options\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Ehub_connection.h\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060c\u002B\u002B\r\nnamespace signalr\r\n{\r\n    class hub_connection\r\n    {\r\n    public:\r\n        ~hub_connection();\r\n\r\n        hub_connection(const hub_connection\u0026) = delete;\r\n\r\n        hub_connection\u0026 operator=(const hub_connection\u0026) = delete;\r\n\r\n        hub_connection(hub_connection\u0026\u0026) noexcept;\r\n\r\n        hub_connection\u0026 operator=(hub_connection\u0026\u0026) noexcept;\r\n\r\n        void start(std::function\u003Cvoid(std::exception_ptr)\u003E callback) noexcept;\r\n        void stop(std::function\u003Cvoid(std::exception_ptr)\u003E callback) noexcept;\r\n\r\n        connection_state get_connection_state() const;\r\n        const std::string\u0026 get_connection_id() const;\r\n\r\n        void on_disconnected(std::function\u003Cvoid (std::exception_ptr)\u003E disconnected_callback);\r\n\r\n        void on(const std::string\u0026 method_name, std::function\u003Cvoid (const std::vector\u003Csignalr::value\u003E\u0026)\u003E handler);\r\n\r\n        void invoke(const std::string\u0026 method_name, const std::vector\u003Csignalr::value\u003E\u0026 arguments = std::vector\u003Csignalr::value\u003E(), std::function\u003Cvoid(const signalr::value\u0026, std::exception_ptr)\u003E callback = [](const signalr::value\u0026, std::exception_ptr) {}) noexcept;\r\n\r\n        void send(const std::string\u0026 method_name, const std::vector\u003Csignalr::value\u003E\u0026 arguments = std::vector\u003Csignalr::value\u003E(), std::function\u003Cvoid(std::exception_ptr)\u003E callback = [](std::exception_ptr) {}) noexcept;\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nUsage:\r\n\u0060\u0060\u0060c\u002B\u002B\r\nstd::shared_ptr\u003Chub_connection\u003E connection;\r\nconnection-\u003Eon(\u0022Receive\u0022, [](const std::vector\u003Csignalr::value\u003E\u0026 args)\r\n{\r\n    args[0].as_double();\r\n    args[1].as_map();\r\n});\r\n\r\nconnection-\u003Eon_disconnected([](std::exception_ptr exception)\r\n{\r\n    std::cout \u003C\u003C \u0022Connection closed\u0022 \u003C\u003C std::endl;\r\n});\r\n\r\nconnection-\u003Estart([](std::exception_ptr exception)\r\n{\r\n    if (exception != std::nullptr)\r\n    {\r\n        try\r\n        {\r\n            std::rethrow_exception(exception);\r\n        }\r\n        catch (const std::exception\u0026 ex)\r\n        {\r\n            std::cout \u003C\u003C ex.what() \u003C\u003C std::endl;\r\n        }\r\n    }\r\n});\r\n\r\nconnection-\u003Einvoke(\u0022Send\u0022, std::vector\u003Csignalr::value\u003E { \u0022Test\u0022, 10 }, [](const signalr::value\u0026 args, std::exception_ptr exception)\r\n{\r\n    args[0].as_string();\r\n});\r\n\r\nconnection-\u003Estop([](std::exception_ptr exception)\r\n{\r\n});\r\n\u0060\u0060\u0060\r\n\r\n* what about cancellation of invoke (currently only supported in .NET client)\r\n\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Esignalr_value.h\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060c\u002B\u002B\r\nnamespace signalr\r\n{\r\n    enum class value_type\r\n    {\r\n        map,\r\n        array,\r\n        string,\r\n        float64,\r\n        null,\r\n        boolean,\r\n        binary\r\n    };\r\n\r\n    class value\r\n    {\r\n    public:\r\n        value();\r\n\r\n        value(std::nullptr_t);\r\n\r\n        value(value_type t);\r\n\r\n        value(bool val);\r\n\r\n        value(double val);\r\n\r\n        value(const std::string\u0026 val);\r\n\r\n        value(std::string\u0026\u0026 val);\r\n\r\n        value(const char* val);\r\n\r\n        value(const char* val, size_t length);\r\n\r\n        value(const std::vector\u003Cvalue\u003E\u0026 val);\r\n\r\n        value(std::vector\u003Cvalue\u003E\u0026\u0026 val);\r\n\r\n        value(const std::map\u003Cstd::string, value\u003E\u0026 map);\r\n\r\n        value(std::map\u003Cstd::string, value\u003E\u0026\u0026 map);\r\n\r\n        value(const std::vector\u003Cuint8_t\u003E\u0026 bin);\r\n\r\n        value(std::vector\u003Cuint8_t\u003E\u0026\u0026 bin);\r\n\r\n        value(const value\u0026 rhs);\r\n\r\n        value(value\u0026\u0026 rhs) noexcept;\r\n\r\n        ~value();\r\n\r\n        value\u0026 operator=(const value\u0026 rhs);\r\n\r\n        value\u0026 operator=(value\u0026\u0026 rhs) noexcept;\r\n\r\n        bool is_map() const;\r\n\r\n        bool is_double() const;\r\n\r\n        bool is_string() const;\r\n\r\n        bool is_null() const;\r\n\r\n        bool is_array() const;\r\n\r\n        bool is_bool() const;\r\n\r\n        bool is_binary() const;\r\n\r\n        double as_double() const;\r\n\r\n        bool as_bool() const;\r\n\r\n        const std::string\u0026 as_string() const;\r\n\r\n        const std::vector\u003Cvalue\u003E\u0026 as_array() const;\r\n\r\n        const std::map\u003Cstd::string, value\u003E\u0026 as_map() const;\r\n\r\n        const std::vector\u003Cuint8_t\u003E\u0026 as_binary() const;\r\n\r\n        value_type type() const;\r\n    }\r\n}\r\n\r\n\u0060\u0060\u0060\r\n\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Elog_writer.h\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060c\u002B\u002B\r\nnamespace signalr\r\n{\r\n    class log_writer\r\n    {\r\n    public:\r\n        // NOTE: the caller does not enforce thread safety of this call\r\n        virtual void write(const std::string \u0026entry) = 0;\r\n\r\n        virtual ~log_writer() {}\r\n    };\r\n}\r\n\u0060\u0060\u0060\r\n\r\nUsage:\r\n\u0060\u0060\u0060c\u002B\u002B\r\nhub_connection_builder(\u0022\u0022).with_logging(std::make_shared\u003Cmy_logger\u003E(), trace_level::debug);\r\n\r\nclass my_logger : public log_writer\r\n{\r\npublic:\r\n    virtual void write(const std::string\u0026 entry) override\r\n    {\r\n        std::cout \u003C\u003C entry \u003C\u003C std::endl;\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Etrace_level.h\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060c\u002B\u002B\r\nnamespace signalr\r\n{\r\n    enum class trace_level : int\r\n    {\r\n        verbose = 0,\r\n        debug = 1,\r\n        info = 2,\r\n        warning = 3,\r\n        error = 4,\r\n        critical = 5,\r\n        none = 6,\r\n    };\r\n}\r\n\u0060\u0060\u0060\r\n\r\n* We could do categories via a flags enum instead/in addition to level\r\n  - hub_connection | transport (skips connection logs, etc.)\r\n\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Esignalr_client_config.h\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060c\u002B\u002B\r\nnamespace signalr\r\n{\r\n    class signalr_client_config\r\n    {\r\n    public:\r\n        signalr_client_config();\r\n\r\n        const std::map\u003Cstd::string, std::string\u003E\u0026 get_http_headers() const noexcept;\r\n\r\n        void set_http_headers(const std::map\u003Cstd::string, std::string\u003E\u0026 http_headers);\r\n\r\n        void set_scheduler(std::shared_ptr\u003Cscheduler\u003E scheduler);\r\n        std::shared_ptr\u003Cscheduler\u003E get_scheduler() const noexcept;\r\n\r\n        void set_handshake_timeout(std::chrono::milliseconds);\r\n        std::chrono::milliseconds get_handshake_timeout() const noexcept;\r\n\r\n        void set_server_timeout(std::chrono::milliseconds);\r\n        std::chrono::milliseconds get_server_timeout() const noexcept;\r\n\r\n        void set_keepalive_interval(std::chrono::milliseconds);\r\n        std::chrono::milliseconds get_keepalive_interval() const noexcept;\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n* Extra options for cpprestsdk are carried over from legacy client\r\n* The \u0060#ifdef\u0060 pattern is ugly because it requires users to define the variable in order to consume the methods which isn\u0027t obvious\r\n* We could also remove the options and wait for user feedback, and maybe add first-class support for certain features\r\n* Non-const \u0060get_http_headers\u0060 could be removed, would resolve copy concerns so we don\u0027t modify user settings\r\n* In other clients we have \u0060http_connection_options\u0060 and this would be settable via \u0060with_url\u0060\r\n\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Ehttp_client.h\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060c\u002B\u002B\r\nnamespace signalr\r\n{\r\n    enum class http_method\r\n    {\r\n        GET,\r\n        POST\r\n    };\r\n\r\n    // created by signalr and passed to http_client impls\r\n    class http_request final\r\n    {\r\n    public:\r\n        http_request()\r\n            : method(http_method::GET), timeout(std::chrono::seconds(120))\r\n        { }\r\n\r\n        http_method get_method() const;\r\n\r\n        const std::map\u003Cstd::string, std::string\u003E\u0026 get_headers() const;\r\n\r\n        const std::string\u0026 get_content() const;\r\n\r\n        std::chrono::seconds get_timeout() const;\r\n    };\r\n\r\n    // created by http_client impls, consumed by signalr\r\n    class http_response final\r\n    {\r\n    public:\r\n        http_response(); // default 200 status code?\r\n        http_response(int code, const std::string\u0026 content);\r\n        http_response(int code, std::string\u0026\u0026 content);\r\n\r\n        http_response(http_response\u0026\u0026 rhs);\r\n        http_response(const http_response\u0026 rhs);\r\n\r\n        http_response\u0026 operator=(const http_response\u0026 rhs);\r\n\r\n        http_response\u0026 operator=(http_response\u0026\u0026 rhs) noexcept;\r\n    };\r\n\r\n    class http_client\r\n    {\r\n    public:\r\n        virtual void send(const std::string\u0026 url, http_request\u0026 request,\r\n            std::function\u003Cvoid(const http_response\u0026, std::exception_ptr)\u003E callback, cancellation_token token) = 0;\r\n\r\n        virtual ~http_client() {}\r\n    };\r\n}\r\n\u0060\u0060\u0060\r\n\r\n* implemented by users who don\u0027t want the default cpprestsdk http implementation\r\n* not binary vs. text aware (think LongPolling in the future) should we change that?\r\n\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Ewebsocket_client.h\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060c\u002B\u002B\r\nnamespace signalr\r\n{\r\n    class websocket_client\r\n    {\r\n    public:\r\n        virtual ~websocket_client() {};\r\n\r\n        virtual void start(const std::string\u0026 url, transfer_format transfer_format, std::function\u003Cvoid(std::exception_ptr)\u003E callback) = 0;\r\n\r\n        virtual void stop(std::function\u003Cvoid(std::exception_ptr)\u003E callback) = 0;\r\n\r\n        virtual void send(const std::string\u0026 payload, std::function\u003Cvoid(std::exception_ptr)\u003E callback) = 0;\r\n\r\n        virtual void receive(std::function\u003Cvoid(const std::string\u0026, std::exception_ptr)\u003E callback) = 0;\r\n    };\r\n}\r\n\u0060\u0060\u0060\r\n\r\n* implemented by users who don\u0027t want the default cpprestsdk websocket implementation\r\n* consider using \u0060std::vector\u003Cunit8_t\u003E\u0060 instead of \u0060std::string\u0060\r\n  - Today we just cast \u0060std::string\u0060 to \u0060uint8_t*\u0060 when using binary\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Etransfer_format.h\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060c\u002B\u002B\r\nnamespace signalr\r\n{\r\n    enum class transfer_format\r\n    {\r\n        text,\r\n        binary\r\n    };\r\n}\r\n\u0060\u0060\u0060\r\n\r\n* exposed in websocket_client so it knows whether to use text or binary framing\r\n\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Econnection_state.h\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060c\u002B\u002B\r\nnamespace signalr\r\n{\r\n    enum class connection_state\r\n    {\r\n        connecting,\r\n        connected,\r\n        disconnected\r\n    };\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Escheduler.h\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060c\u002B\u002B\r\nnamespace signalr\r\n{\r\n    typedef std::function\u003Cvoid()\u003E signalr_base_cb;\r\n\r\n    struct scheduler\r\n    {\r\n        virtual void schedule(const signalr_base_cb\u0026 cb, std::chrono::milliseconds delay = std::chrono::milliseconds::zero()) = 0;\r\n\r\n        virtual ~scheduler() {}\r\n    };\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Ecancellation_token.h\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060c\u002B\u002B\r\nnamespace signalr\r\n{\r\n    class cancellation_token_source;\r\n\r\n    class cancellation_token\r\n    {\r\n    public:\r\n        void register_callback(std::function\u003Cvoid()\u003E callback);\r\n\r\n        bool is_canceled() const;\r\n    };\r\n}\r\n\u0060\u0060\u0060\r\n\r\n* only used by implementors of http_client currently\r\n\r\n\u003C/details\u003E\r\n\r\n\u003Cdetails\u003E\r\n\u003Csummary\u003Etransport_type.h\u003C/summary\u003E\r\n\r\n\u0060\u0060\u0060c\u002B\u002B\r\nnamespace signalr\r\n{\r\n    enum class transport_type\r\n    {\r\n        websockets\r\n    };\r\n}\r\n\u0060\u0060\u0060\r\n\r\n* not exposed anywhere currently, could remove\r\n\r\n\u003C/details\u003E\r\n\r\n---\r\n\r\n* make types \u0060final\u0060? (sealed)\r\n* \u0060noexcept\u0060, should we only apply it to ctor/move ctor/copy ctor?\r\n  - if a method is \u0060noexcept\u0060 and ends up throwing it calls \u0060std::terminate\u0060, so we need to be really confident it won\u0027t throw (don\u0027t trust user code, etc.)\r\n  - perf optimizations for using \u0060noexcept\u0060 mainly comes from ctors\r\n  - \u0060noexcept\u0060 does declare intent though\r\n  - https://azure.github.io/azure-sdk/cpp_introduction.html#cpp-design-naming-functions-noexcept\r\n  \u003E YOU SHOULD declare all functions that can never throw exceptions noexcept.",
        "createdAt": "2022-11-02T17:17:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8717#issuecomment-1300955602"
      },
      {
        "id": "IC_kwDOAQzde85OW2lR",
        "parentId": null,
        "author": "halter73",
        "content": "API Review Notes:\r\n\r\n1. We are limited to C\u002B\u002B11 in order to support environments without the latest and greatest (e.g. game consoles).\r\n2. What about STL? VCPKG should help avoid issues with different versions of the STL.\r\n3. We should consider header file names. Let\u0027s update the usage examples with \u0060#include ...\u0060\r\n4. \u0060hub_connection_builder.create(string)\u0060 vs \u0060withUrl()\u0060. \u0060create(string)\u0060 seems fine.\r\n5. Should \u0060build()\u0060 return a pointer or \u0060shared_ptr\u0060? We think pointer is fine. You can create a \u0060shared_ptr\u0060 if you want.\r\n6. Should \u0060hub_connection_builder.create\u0060 return a pointer? Does \u0060hub_connection_builder\u0060 need a copy constructor if it\u0027s mostly tracking references so it\u0027s not really a copy?\r\n7. Does \u0060with_logging\u0060 need a \u0060shared_ptr\u0060? It feels safer. Logging can happen in the background.\r\n8. Let\u0027s try removing the CPPRESTSDK-specific APIs from \u0060signalr_client_config\u0060 and see if we get pushback. If something like proxy support is really needed, we can consider adding support to http_client.h.\r\n9. Name \u0060with_websocket_factory\u0060 parameter \u0060websocket_factory\u0060 instead of \u0060factory\u0060.\r\n10. Do we want to support building a \u0060hub_connection_builder\u0060 more than once? Not for now.\r\n11. Let\u0027s have \u0060with_websocket_factory\u0060 and \u0060with_http_client_factory\u0060 take \u0060std::function\u003Cwebsocket_client*\u003E\u0060/\u0060std::function\u003Chttp_client*\u003E\u0060 instead of a \u0060shared_ptr\u0060.\r\n12. Is there an \u0060#ifdef\u0060 for \u0060with_messagepack_hub_protocol\u0060? Inside of it yes. It\u0027s not really discoverable if we remove the public API by default. It will throw at runtime if you\u0027re missing the define. But the API is always available.\r\n\r\nTBC",
        "createdAt": "2022-11-15T01:02:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8717#issuecomment-1314613585"
      },
      {
        "id": "IC_kwDOAQzde85OW4s9",
        "parentId": null,
        "author": "AaronRobinsonMSFT",
        "content": "\u003E 5. Should build() return a pointer or shared_ptr? We think pointer is fine. You can create a shared_ptr if you want.\r\n\r\nI would instead return \u0060std::unique_ptr\u003CT\u003E\u0060. The ownership of a naked pointer is in question. Providing \u0060std::unique_ptr\u003CT\u003E\u0060 helps avoid that ambiguity.\r\n\r\n\u003E make types final? (sealed)\r\n\r\nYes. This improves optimization opportunities.\r\n\r\nI\u0027d also recommend referring to https://github.com/isocpp/CppCoreGuidelines.\r\n\r\nTaking some time to audit this API and how it works with the [GSL](https://github.com/microsoft/GSL) might also be worthwhile.",
        "createdAt": "2022-11-15T01:12:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8717#issuecomment-1314622269"
      },
      {
        "id": "IC_kwDOAQzde85OaqMJ",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E I would instead return \u0060std::unique_ptr\u003CT\u003E\u0060\r\n\r\nWouldn\u0027t this make \u0060hub_connection\u0060 a lot harder to use from different threads/places in code? Someone would need to place it in a global/another class and then use it via some methods on their class.\r\n\r\nIt would make it harder (impossible) to create a reference cycle via lambda captures (std::shared_ptr) though which is nice.",
        "createdAt": "2022-11-15T17:03:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8717#issuecomment-1315611401"
      },
      {
        "id": "IC_kwDOAQzde85Oate0",
        "parentId": null,
        "author": "AaronRobinsonMSFT",
        "content": "\u003E Wouldn\u0027t this make hub_connection a lot harder to use from different threads/places in code? Someone would need to place it in a global/another class and then use it via some methods on their class.\r\n\r\nBased on the statement, \u0022We think pointer is fine. You can create a shared_ptr if you want.\u0022, there is an expectation for users to take a raw pointer and create a \u0060shared_ptr\u003CT\u003E\u0060, right? In the current form you are saying \u0022here is a raw pointer with no assumptions about ownership, do as you please\u0022. That is wrong because if a user can immediately wrap the raw pointer it **implies** the pointer is owned by the caller. However, if you provide \u0060unique_ptr\u003CT\u003E\u0060, then the caller knows they own it and can do as they please safely. The \u0060shared_ptr\u003CT\u003E\u0060 ctor accepts an R-value reference of a \u0060unique_ptr\u003CT\u003E\u0060 specifically to indicate these ownership semantics and does it explicitly.\r\n\r\nThere should be no reason to use raw pointers at an API level in C\u002B\u002B14. In C\u002B\u002B11 there are a few cases, but none jumped out to me in the above API. Working through some use cases with the GSL would help with some of this.",
        "createdAt": "2022-11-15T17:12:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8717#issuecomment-1315624884"
      },
      {
        "id": "IC_kwDOAQzde85OauQx",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E The \u0060shared_ptr\u003CT\u003E\u0060 ctor accepts an R-value reference of a \u0060unique_ptr\u003CT\u003E\u0060\r\n\r\nAh, that\u0027s helpful.\r\n\r\n\u003E Working through some use cases with the GSL would help with some of this.\r\n\r\nThis seems difficult since the repo says it assumes C\u002B\u002B14 or higher... we\u0027re stuck targeting C\u002B\u002B11",
        "createdAt": "2022-11-15T17:15:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8717#issuecomment-1315628081"
      },
      {
        "id": "IC_kwDOAQzde85Oau88",
        "parentId": null,
        "author": "AaronRobinsonMSFT",
        "content": "\u003E This seems difficult since the repo says it assumes C\u002B\u002B14 or higher... we\u0027re stuck targeting C\u002B\u002B11\r\n\r\nOh, I missed that. Sigh... Reviewing the core guidelines is worth at least an hour or two though.",
        "createdAt": "2022-11-15T17:17:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8717#issuecomment-1315630908"
      },
      {
        "id": "IC_kwDOAQzde85OpDSu",
        "parentId": null,
        "author": "halter73",
        "content": "API Review Notes (Cont.):\r\n\r\n1. All copy and move constructors should have \u0060noexcept;\u0060.\r\n2. We like the chaining of the \u0060hub_connection_builder\u0060 methods.\r\n3. If we are copying the \u0060std::map\u0060, just pass it by value unless we\u0027re processing the data inline.\r\n    - Same goes for \u0060configure_options(const signalr_client_config\u0026 config)\u0060. It should be \u0060configure_options(signalr_client_config config)\u0060.\r\n5. If you build a copy of a \u0060hub_connection_builder\u0060, are all copies \u0022built\u0022 meaning they cannot be built again?\r\n    - Let\u0027s change \u0060create(string)\u0060 to a ctor and get rid of the copy constructor.\r\n6. Do we need a public API to set HTTP headers if only SignalR itself sets them? No. \u0060http_request\u0060 should be read-only and \u0060http_response\u0060 can be write-only.\r\n7. Why both \u0060get_http_headers() const noexcept;\u0060 and \u0060std::map\u003Cstd::string, std::string\u003E\u0026 get_http_headers() noexcept;\u0060.\r\n8. Should we even allow the transport to modify the \u0060signalr_client_config\u0060. It cannot because we pass it to the transport by \u0060const\u0060.\r\n9. The non-const \u0060std::map\u003Cstd::string, std::string\u003E\u0026 get_http_headers()\u0060 should be removed.\r\n10. Is the \u0060scheduler\u0060 from \u0060const std::shared_ptr\u003Cscheduler\u003E\u0026 get_scheduler() const noexcept;\u0060 being stored? Yes. Let\u0027s just make it \u0060std::shared_ptr\u003Cscheduler\u003E get_scheduler() const noexcept;\u0060. No const references for returns (probably).\r\n11. \u0060std::function\u003Cstd::shared_ptr\u003Cwebsocket_client\u003E(const signalr_client_config\u0026)\u003E websocket_factory\u0060 should be using \u0060unique_ptr\u0060 just like \u0060hub_connection_builder.build()\u0060.\r\n12. Always take \u0060std::function\u0060 by value if you are storing it after the call.\r\n13. Remove all the public constructors and assignment operators from \u0060hub_connection\u0060 since we\u0027re now handing out a \u0060unique_ptr\u0060.\r\n14. Let\u0027s remove all the typedefs for functions like \u0060method_invoked_handler\u0060.\r\n15. \u0060std::exception_ptr\u0060 is a bad API. We could pass a copy of the exception object itself but we\u0027d lose info like the stack trace. Or... \u0060std::function\u003Cvoid(std::exception_ptr)\u003E callback\u0060 could be \u0060std::function\u003Cvoid(const std::exception*)\u003E callback\u0060.\r\n16. Remove the \u0060__cdecl\u0060.\r\n17. Rename \u0060set_disconnected\u0060 to \u0060on_disconnected\u0060.\r\n18. Is \u0060on\u0060 additive? Yes. Let\u0027s make it the same for \u0060on_disconnected\u0060.\r\n19. Do we need the ability to remove \u0060on\u0060 callbacks? Maybe. We could theoretically add a registration return value later and add an \u0060off\u0060 method.\r\n20. \u0060const std::string\u0026\u0060 vs \u0060const char*\u0060? \u0060const std::string\u0026\u0060 is better.\r\n21. We \u2764\uFE0F https://github.com/BrennanConroy/SignalR/pull/1/",
        "createdAt": "2022-11-18T00:20:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8717#issuecomment-1319384238"
      },
      {
        "id": "IC_kwDOAQzde85PbyNq",
        "parentId": null,
        "author": "halter73",
        "content": "API Review Notes:\r\n\r\n1. We love the template demo that builds on \u0060signalr_value\u0060.\r\n2. Use \u0060*.hpp\u0060 instead of \u0060*.h\u0060 for all header files since we\u0027re using C\u002B\u002B even if it is header-only with no code.\r\n3. Use \u0060\u003C\u0060 instead of \u0060\u0022\u0060 for includes.\r\n4. Let\u0027s stick with \u0060unique_ptr\u0060 for \u0060with_websocket_factory \u0060 and \u0060with_http_client_factory\u0060. We\u0027re convinced we can make the tests work somehow.\r\n5. Friend classes are cool!\r\n6. Let\u0027s mark setters in \u0060signalr_client_config\u0060 with \u0060noexcept\u0060. Do a \u0060noexcept\u0060 pass.\r\n7. Can we replicate \u0060std::variant\u0060 or use it for \u0060signalr_value\u0060? No. It\u0027s C\u002B\u002B14 and greater and the \u0060index\u0060 API is unnecessary for a custom tagged union.\r\n8. Pass parameters by value instead of reference to \u0060value\u0060 constructors since we\u0027re just copying in the constructor anyway.\r\n9. Remove \u0060value(const char* val)\u0060. It\u0027s not too hard to have the user convert to \u0060std::string\u0060 themselves.\r\n10. \u0060value_type.null\u0060 is a unique concept because we don\u0027t know the type we\u0027re extracting to. Given null, \u0060is_string\u0060 will return false, \u0060as_string\u0060 will throw, etc... We could return a \u0060unique_ptr\u0060 from \u0060as_string\u0060 to return \u0022null\u0022, but this seems unwieldy. Custom converters can manually check \u0060is_null\u0060 for nullable properties.\r\n11. Let\u0027s move \u0060value_type\u0060 into \u0060value\u0060 and rename it to \u0060type\u0060.\r\n12. Enums should not have \u0060: int\u0060\r\n13. Should the 0 \u0060log_level\u0060 be \u0060none\u0060 to be more consistent with C\u002B\u002B libraries? It\u0027s probably better to align with Microsoft.Extensions.Logging LogLevel, but we should think about it.\r\n14. Do we need categories for logs? Can we use less log levels? Error, debug, none?\r\n15. Let\u0027s rename \u0060trace_level\u0060 to \u0060log_level\u0060.\r\n16. How do we flow the log writer and logger config to the transport and http client? Should we add it to \u0060signalr_client_config\u0060? Or should we force people to wire the logger themselves to custom transports and client?\r\n17. All destructors should be marked \u0060noexcept\u0060.\r\n18. Can we put \u0060http_method\u0060 instead \u0060http_request\u0060? Would we rename it to just \u0060method\u0060 if it\u0027s nested? Probably.\r\n19. Can \u0060websocket_client\u0060 be turned into an arbitrary transport? It\u0027s really close. The registration would have to change so \u0060with_websocket_factory\u0060 is now called \u0060with_transport_factory\u0060 and could take \u0060transport_type\u0060 as the first parameter.\r\n20. We assume the \u0060std::string\u0060 used by \u0060http_response\u0060 are UTF-8 encoded chars. Can we make it \u0060Vector\u003Cuint8_t\u003E\u0060? Is there away to avoid copying. If the only callback reading the buffer is internal code, maybe it\u0027s okay to just take a pointer and length and promise to do any copying we need in the callback.\r\n21. Don\u0027t block on \u0060read_to_end\u0060 in the \u0060default_websocket_client\u0060!",
        "createdAt": "2022-11-30T20:10:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8717#issuecomment-1332683626"
      },
      {
        "id": "IC_kwDOAQzde85WrvDY",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-03-04T00:47:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8717#issuecomment-1454305496"
      },
      {
        "id": "IC_kwDOAQzde85dgTER",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-05-30T16:40:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8717#issuecomment-1568747793"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0MjM5NDg2MTk=",
    "title": "SignalR C\u002B\u002B Client Clean-up",
    "url": "https://github.com/dotnet/aspnetcore/issues/8720",
    "createdAt": "2019-03-21T21:24:23Z",
    "lastUpdated": "2023-06-02T01:11:46Z",
    "body": "Epic #5301 \r\n\r\n- [x] Remove unrelated tests\r\n- [x] Remove remnants of classic ASP.NET protocol\r\n- [ ] Resolve \u0022TODO\u0022 comments\r\n- [ ] Normalize log and exception messages (Capitalization and full stops)",
    "upvotes": 0,
    "labels": [
      "task",
      "area-signalr",
      "feature-client-c\u002B\u002B",
      "clean-up",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU4Mzg4NjYyMw==",
        "parentId": null,
        "author": "mmarinchenko",
        "content": "Hi! May I add some considerations here? If this is not the best place for that please direct me to some other place where it would be more appropriate.\r\n\r\n**BACKGROUND**\r\n\r\nI\u0027m trying to integrate some SignalR C\u002B\u002B Client code to our pet game project which uses Unreal Engine. UE4 uses paranoid warning level while compiling sources and treat warnings as errors. It also still depends on old gnustl version (GCC 4.9) on Android (but this is another story...).\r\n\r\nIt\u0027s especially interesting for us to try to integrate SignalR C\u002B\u002B Client code using UE\u0027s implementations of http/websocket clients, json library, build system, etc. instead of cpprestsdk, boost, cmake, etc.\r\n\r\nI have no much expertise in C\u002B\u002B so my considerations easily can be irrelevant. If so feel free to ignore them :) \r\n\r\n**CONSIDERATIONS**\r\n\r\n**1.** The existence of \u0060make_unique.h\u0060 file causes ambiguous function error when compiling with Clang for Linux (or with GCC 4.9 for Android - I may be wrong here because I don\u0027t remember exactly). I deleted this file and the error is gone on all platforms which I tried;\r\n- Windows \u002B MSVC (VS 2019 v16.4.4)\r\n- Linux \u002B Clang 8.0.1 (bundled with UE)\r\n- iOS SDK 13.2\r\n- Android NDK r17c (GCC 4.9)\r\n\r\nSo is it actually needed? I may add that old gnustl on Android lacks \u0060std:to_string()\u0060. But as I can see both functions are parts of C\u002B\u002B11, so it also would be great to add list of supported compiler versions in repository main README.\r\n\r\n**2.** There is one place in whole project where \u0060dynamic_cast\u003C\u003E()\u0060 is used. \u0060connection_impl.cpp\u0060 file:\r\n\u0060\u0060\u0060\r\n                        catch (const std::exception\u0026 e)\r\n                        {\r\n                            auto canceled = dynamic_cast\u003Cconst canceled_exception*\u003E(\u0026e);\r\n                            if (canceled)\r\n                            {\r\n                                connection-\u003Em_logger.log(trace_level::info,\r\n                                    \u0022starting the connection has been canceled.\u0022);\r\n                            }\r\n                            else\r\n                            {\r\n                                connection-\u003Em_logger.log(trace_level::errors,\r\n                                    std::string(\u0022connection could not be started due to: \u0022)\r\n                                    .append(e.what()));\r\n                            }\r\n\u0060\u0060\u0060\r\nIt is possible to compile SignalR C\u002B\u002B Client without RTTI if we remove this special \u0060dynamic_cast\u003C\u003E()\u0060 case, enable exceptions and link to UE\u0027s http, json, etc. libs which are also compiled without RTTI. Will this lead to any problems with exceptions behaviour at runtime? Is this special case so important to mandate RTTI?\r\n\r\n**3.** At the very end of \u0060json_hub_protocol.cpp\u0060 file the \u0060return\u0060 statement uses \u0060std::move()\u0060, which prevents copy elision:\r\n\u0060\u0060\u0060\r\n            // Future protocol changes can add message types, old clients can ignore them\r\n            // TODO: null\r\n            break;\r\n        }\r\n\r\n        return std::move(value);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n**4.** \u0060log_writer\u0060 has virtual method:\r\n\u0060\u0060\u0060\r\n    class log_writer\r\n    {\r\n    public:\r\n        // NOTE: the caller does not enforce thread safety of this call\r\n        SIGNALRCLIENT_API virtual void write(const std::string \u0026entry) = 0;\r\n    };\r\n\u0060\u0060\u0060\r\nand derived type:\r\n\u0060\u0060\u0060\r\n    class trace_log_writer : public log_writer\r\n    {\r\n    public:\r\n        void write(const std::string \u0026entry) override;\r\n    };\r\n\u0060\u0060\u0060\r\nSo \u0060log_writer\u0060 should also have virtual destructor.\r\n\r\n**5.** \u0060signalr_value\u0060 has union with complex types:\r\n\u0060\u0060\u0060\r\n        union storage\r\n        {\r\n            bool boolean;\r\n            std::string string;\r\n            std::vector\u003Cvalue\u003E array;\r\n            double number;\r\n            std::map\u003Cstd::string, value\u003E map;\r\n\r\n            storage() {}\r\n            ~storage() {}\r\n        };\r\n\u0060\u0060\u0060\r\nThis causes MSVC warnings 4582 and 4583 ([link](https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warnings-c4400-through-c4599)) because union shares the memory between fields and doesn\u0027t know how to create/destroy complex objects. Potential memory leak?\r\n\r\n**6.** Initialization list reordering. There are three:\r\n- in \u0060hub_connection_impl\u0060 constructor \u0060m_handshakeReceived\u0060 must be placed before \u0060m_disconnected\u0060;\r\n- in \u0060websocket_transport\u0060 constructor:\r\n-- \u0060m_signalr_client_config\u0060 must be placed before \u0060m_receive_loop_cts\u0060;\r\n-- \u0060m_process_response_callback\u0060 must be placed before \u0060m_close_callback\u0060.\r\n\r\n---\r\n**P.S.** Header inclusion order is a mess :)",
        "createdAt": "2020-02-09T20:01:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8720#issuecomment-583886623"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU4NDIxNTYwNg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E The existence of \u0060make_unique.h\u0060 file causes ambiguous function error when compiling\r\n\r\nWe haven\u0027t seen this, but can take a look at removing the file.\r\n\r\n\u003E     * Android NDK r17c (GCC 4.9)\r\n\r\nI\u0027m not going to pretend to know anything about Android NDK, but a [quick search shows](https://github.com/android/ndk/wiki/Changelog-r17#announcements) that you should probably not use GCC and switch to libc\u002B\u002B as GCC has been deprecated in that version of the NDK.\r\n\r\n\u003E It is possible to compile SignalR C\u002B\u002B Client without RTTI\r\n\r\nWe can take a look at this especially if there is only 1 place where we use it currently.\r\n\r\nThe rest of your comments are about some warnings that we haven\u0027t cleaned up yet and will work on once we decide how to ignore warnings from external headers so we don\u0027t have hundreds of non-actionable warnings.",
        "createdAt": "2020-02-10T16:43:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8720#issuecomment-584215606"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU4NDIzNTEyOA==",
        "parentId": null,
        "author": "mmarinchenko",
        "content": "Thanks for the answer @BrennanConroy\r\n\r\nYou are right about Android NDK. The problem here is that UE depends on gnustl on Android) I.e. r17c is latest version of NDK which may be used with UE. This is not your problem of course, that\u0027s why I suggested to add list of supported compiler versions in README. I believe this would be very convenient for potential users of your code.\r\n\r\nSome official support for non-RTTI compilation (in case of excluding cpprestsdk and boost) from your side would be very helpful, thanks!",
        "createdAt": "2020-02-10T17:22:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8720#issuecomment-584235128"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2NDYzNjczMg==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-07-27T21:02:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8720#issuecomment-664636732"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzkyNjE3NA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@BrennanConroy are these issues still relevant or are we tracking the client work separately?",
        "createdAt": "2021-04-06T08:16:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8720#issuecomment-813926174"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxNDI3MzgzOA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Yes, tracking the C\u002B\u002B work with these issues.",
        "createdAt": "2021-04-06T16:51:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/8720#issuecomment-814273838"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0MjUwNDk2ODk=",
    "title": "Add CTI tests for SignalR on Xamarin",
    "url": "https://github.com/dotnet/aspnetcore/issues/8792",
    "createdAt": "2019-03-25T18:21:03Z",
    "lastUpdated": "2021-03-02T00:21:29Z",
    "body": "We should add a CTI test script for building a Xamarin-based client to get some coverage on breaking changes.",
    "upvotes": 0,
    "labels": [
      "task",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": []
  },
  {
    "id": "MDU6SXNzdWU0MjUwNDk4NTc=",
    "title": "Add CTI tests for SignalR on UWP",
    "url": "https://github.com/dotnet/aspnetcore/issues/8793",
    "createdAt": "2019-03-25T18:21:29Z",
    "lastUpdated": "2021-03-02T00:21:29Z",
    "body": "We should add a CTI test script for building a UWP-based client to get some coverage on breaking changes.",
    "upvotes": 0,
    "labels": [
      "task",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": []
  },
  {
    "id": "MDU6SXNzdWU0MjUwNTAxMTY=",
    "title": "Add CTI tests for SignalR on Android",
    "url": "https://github.com/dotnet/aspnetcore/issues/8794",
    "createdAt": "2019-03-25T18:22:09Z",
    "lastUpdated": "2021-03-02T00:21:29Z",
    "body": "We should add a CTI test script for building a native Android-based client to get some coverage on breaking changes.\r\n\r\nThis one is trickier since we need Android Studio and Java stuff on the test machine ;)",
    "upvotes": 0,
    "labels": [
      "task",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": []
  },
  {
    "id": "MDU6SXNzdWU0MjUwNzk5NzE=",
    "title": "Add CTI test scenario for SignalR JavaScript client",
    "url": "https://github.com/dotnet/aspnetcore/issues/8800",
    "createdAt": "2019-03-25T19:35:33Z",
    "lastUpdated": "2021-03-02T00:21:29Z",
    "body": "Related https://github.com/aspnet/AspNetCore/issues/5400\r\n\r\nSpecifically some TypeScript intellisense issues that are hard to test automatically.",
    "upvotes": 0,
    "labels": [
      "task",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": []
  },
  {
    "id": "MDU6SXNzdWU0NDI3ODI0MjU=",
    "title": "SignalR streaming from server to specific client",
    "url": "https://github.com/dotnet/aspnetcore/issues/10151",
    "createdAt": "2019-05-10T15:44:52Z",
    "lastUpdated": "2020-11-09T22:38:51Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\nI have a use case when server initiates a workflow with the client. Conventional SignalR call gives ability to pick specific client during invocation (\u0060MyHub.Clients.Client(\u0022clientid\u0022).SendAsync\u0060), but streaming doesn\u0027t (or it is not documented).\r\n\r\n### Describe the solution you\u0027d like\r\nTo have ability to stream to a specific client.\r\n\r\n### Describe alternatives you\u0027ve considered\r\nI don\u0027t see a workaround since my application is distributed and if I do not \u0022set up\u0022 a stream to the client on the first call (e.g. do \u0060Client(\u0022clientid\u0022).SendAsync\u0060 and then open stream from the client), the response might be routed to random application instance which is unacceptable.\r\n\r\n### Additional context\r\nThere is a ASP.NET Core application deployed to two regions - US and EU. It runs behind Traffic Manager and contains a SignalR hub and uses Azure SignalR Service (single US instance) as backplane for scaling purposes.\r\nThe hub interacts with the client in synchronous way - calls value-returning method and waits until it returns. The locking mechanism is implemented on top of in-memory collection of tasks, and thus there are problems when server-to-client communication originates on one instance (say EU), but client-to-server \u0022response\u0022 is returned to another (US) - first application instance is locked indefinitely, because it never receives the response for the request, and second instance does nothing because it cannot map the response to any previous request. I\u0027ve tried brand new \u0060ServerStickyMode=Required\u0060 mode for Azure SignalR, but it does not help since my client is permanently in US -\u003E \u0060Connect\u0060 is always hitting US application -\u003E all responses are \u0022stuck\u0022 to US instance as well. I suspect streaming can help me with this scenario.",
    "upvotes": 9,
    "labels": [
      "Needs: Design",
      "enhancement",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ5MTU0MjcwMw==",
        "parentId": null,
        "author": "davidfowl",
        "content": "This isn\u0027t something we can easily do today without a bunch of work so this is going into the backlog.\r\n\r\n\u003E The locking mechanism is implemented on top of in-memory collection of tasks, and thus there are problems when server-to-client communication originates on one instance (say EU), but client-to-server \u0022response\u0022 is returned to another (US) - first application instance is locked indefinitely, because it never receives the response for the request, and second instance does nothing because it cannot map the response to any previous request. I\u0027ve tried brand new ServerStickyMode=Required mode for Azure SignalR, but it does not help since my client is permanently in US -\u003E Connect is always hitting US application -\u003E all responses are \u0022stuck\u0022 to US instance as well. I suspect streaming can help me with this scenario.\r\n\r\nThe generic way to solve this is to use a bus that can talk between servers so that you can trigger the collection on the right machine.",
        "createdAt": "2019-05-11T20:47:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10151#issuecomment-491542703"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ5MTk0MTEzOA==",
        "parentId": null,
        "author": "crow-ua",
        "content": "@davidfowl I see. Meanwhile I\u0027ve implemented a PoC of a protocol with flow that originates on the client - it sends a stream (locks after each \u0060Write\u0060 portion) and hub responds to each message with \u0060Clients.Caller\u0060 (each received response removes corresponding lock on the client and moves to next step).\r\nLooking forward the same flow that starts from hub because this is what I was shooting for initially. Maybe there is a way... Although I understand I\u0027m kind of misusing the approach and trying to have stream \u0022open\u0022 for a long time would presumably have a bunch of side-effects.\r\np.s. A bus looks like a good option, but the overall latency of the solution would kill the whole concept.",
        "createdAt": "2019-05-13T18:48:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10151#issuecomment-491941138"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUzNTEyNjI3Nw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "We\u0027ll queue this for some discussions in 5.0. No committments yet, but we\u0027ll talk about options here.",
        "createdAt": "2019-09-25T17:25:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10151#issuecomment-535126277"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUzNTUyNjkxNg==",
        "parentId": null,
        "author": "crow-ua",
        "content": "@anurse Good to know, thank you.",
        "createdAt": "2019-09-26T14:23:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10151#issuecomment-535526916"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2MTI1NzE3OA==",
        "parentId": null,
        "author": "bradygaster",
        "content": "\u003E We\u0027ll queue this for some discussions in 5.0. No committments yet, but we\u0027ll talk about options here.\r\n\r\nI have commenced begging and groveling. ",
        "createdAt": "2019-12-03T16:53:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10151#issuecomment-561257178"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwMDczODgyMA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Pre-planning notes: I don\u0027t see us having the resources to look at this in 5.0. It needs spec changes, new protocol messages, versioning considerations, etc. and we\u0027re tight on resources this release because of other projects.",
        "createdAt": "2020-03-18T16:41:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10151#issuecomment-600738820"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYyNjA0NjUzMg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "This is large, we should get started on this ASAP if we\u0027re going to do it.",
        "createdAt": "2020-05-08T22:25:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10151#issuecomment-626046532"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0NDYzMjA2Mjg=",
    "title": "Consider a system for \u0022muxed\u0022 connections",
    "url": "https://github.com/dotnet/aspnetcore/issues/10407",
    "createdAt": "2019-05-20T21:33:28Z",
    "lastUpdated": "2024-03-02T00:51:12Z",
    "body": "Design a way to allow \u201Cmuxed\u201D connections so the Server would still need to make an outbound connection to itself or the service, but it would be one connection and all the actual virtual connections would be tunneled through it (like how the Service connects to the Server today). cc @anurse @danroth27 @halter73 \r\n\r\nDuring 3.0, we\u0027re currently committing to an implementation design, but not to the implementation. ",
    "upvotes": 0,
    "labels": [
      "Needs: Design",
      "enhancement",
      "area-signalr",
      "Blazor \u2665 SignalR",
      "severity-major",
      "affected-medium",
      "Priority:3"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ5NDE4MjM5MQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Clearing the milestone. We\u0027ll milestone it in Triage. I\u0027d like to keep things out of the 3.0.0 milestone unless they are epics.",
        "createdAt": "2019-05-20T23:15:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10407#issuecomment-494182391"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ5NDU1ODI2Mw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "We\u0027ll do some spiking and design work where we can in 3.0. Putting in preview 7 with low priority.",
        "createdAt": "2019-05-21T21:05:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10407#issuecomment-494558263"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ5NzUwOTY1Ng==",
        "parentId": null,
        "author": "analogrelay",
        "content": "We know (and knew when filing this) that we can\u0027t get it done for 3.0. This was originally just tracking the design process. Moving to the backlog to clarify that and renaming to cover the actual work.",
        "createdAt": "2019-05-30T22:35:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10407#issuecomment-497509656"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxNjYwODc5OQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "For context: This is a way to make using SignalR from Blazor server-side not suck.",
        "createdAt": "2019-07-30T21:47:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10407#issuecomment-516608799"
      },
      {
        "id": "IC_kwDOAQzde848TGxS",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-13T01:33:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10407#issuecomment-1011641426"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0NDkxODEwMzA=",
    "title": "SignalR Client C# - Custom Auth Scheme",
    "url": "https://github.com/dotnet/aspnetcore/issues/10576",
    "createdAt": "2019-05-28T10:08:01Z",
    "lastUpdated": "2025-01-17T13:48:36Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\nI\u0027m trying to override the Authorization scheme for C# SignalR Client e.g. not \u0060Bearer\u0060, however its doesn\u0027t seems possible as it seems to be hardcoded in https://github.com/aspnet/AspNetCore/blob/master/src/SignalR/clients/csharp/Http.Connections.Client/src/Internal/WebSocketsTransport.cs#L116\r\n\r\n### Describe the solution you\u0027d like\r\nAbility to override the auth shceme, such as \r\n\r\n\u0060\u0060\u0060cs\r\nnew HubConnectionBuilder()\r\n\t.WithUrl(url, opts =\u003E\r\n\t{\r\n\t\topts.AuthScheme = \u0022Secret\u0022;\r\n\t\topts.AccessTokenProvider = () =\u003E Task.FromResult(\u0022XXX\u0022);\r\n\t})\r\n\u0060\u0060\u0060\r\n\r\n### Describe alternatives you\u0027ve considered\r\nAnother option would be to pass the auth scheme in the \u0060AccessTokenProvider\u0060 itself but might be breaking depends on how it\u0027s handled\r\n",
    "upvotes": 8,
    "labels": [
      "Needs: Design",
      "enhancement",
      "area-signalr",
      "severity-minor",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDQ5NzUwNjE3OA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "You can\u0027t include the auth scheme in the \u0060AccessTokenProvider\u0060, we\u0027ll put \u0060Bearer\u0060 in front of it. So using \u0060FooScheme Token\u0060 would produce a header like \u0060Bearer FooScheme Token\u0060.\r\n\r\nWe have some thoughts on custom authentication providers, but until then you can achieve this by adding the header manually and/or using a custom HttpClientHandler. See the [SignalR Client Configuration](https://docs.microsoft.com/en-us/aspnet/core/signalr/configuration?view=aspnetcore-2.2\u0026tabs=dotnet#configure-additional-options) doc for more details.\r\n\r\nBacklogging for now as we do think custom authentication is a valuable scenario, we just don\u0027t have capacity in 3.0 for it.",
        "createdAt": "2019-05-30T22:19:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10576#issuecomment-497506178"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczMDEzOTY5Mg==",
        "parentId": null,
        "author": "Socolin",
        "content": "Hello,\r\n\r\nany ETA for this ?",
        "createdAt": "2020-11-19T05:31:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10576#issuecomment-730139692"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzkyNzcxMQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "I\u0027m not 100% sure I understand this issue. What scheme are you trying to use?",
        "createdAt": "2021-04-06T08:18:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10576#issuecomment-813927711"
      },
      {
        "id": "IC_kwDOAQzde840hWdE",
        "parentId": null,
        "author": "truegoodwill",
        "content": "Hi @davidfowl, I\u0027m in the same boat. My app uses \u0022Bearer\u0022 authentication for the Blazor wasm stuff and the usual REST api stuff, but within the UI it also allows the user to create custom, scoped, api keys so they can write their own code to interact with the application\u0027s REST api. To support this, I\u0027ve added a custom authentication scheme to the application, which allows the app to accept Authorization tokens of type either \u0060Bearer\u0060 or \u0060MyCustomScheme\u0060.\r\n\r\nHowever, if I want to allow the user to write their own code to connect to a signalR hub, for better performance, they are not able to authenticate a signalR client using the custom scheme. I\u0027d love my public api to provide SignalR in addition to the usual REST api stuff. I would prefer the solution presented by @stephenlautier, but I\u0027ll check out the alternatives I can find in the configuration docs. Thank you.",
        "createdAt": "2021-07-16T03:58:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10576#issuecomment-881157956"
      },
      {
        "id": "IC_kwDOAQzde840hX3K",
        "parentId": null,
        "author": "davidfowl",
        "content": "@truegoodwill can you show the server side logic for how you grab the token from the HTTP request?",
        "createdAt": "2021-07-16T04:17:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10576#issuecomment-881163722"
      },
      {
        "id": "IC_kwDOAQzde840h6T_",
        "parentId": null,
        "author": "truegoodwill",
        "content": "@davidfowl Certainly! Thank you :)\r\n\r\n### AuthenticationHandler\r\n\r\n\u0060\u0060\u0060csharp\r\npublic class ApiKeyAuthentication : IAuthenticationHandler\r\n{\r\n  /*\r\n    * This project uses Microsoft Orleans. Orleans grains make fantastic\r\n    * storage and retrieval for api key information, so we use a grain-per-key.\r\n    * Since grains are conveniently accessed by a guid key, it was decided that\r\n    * an api key should be the string representation of a guid.\r\n    */\r\n\r\n  public const string SCHEME_NAME = \u0022ApiKey\u0022;\r\n  public const string SCHEME_DISPLAY_NAME = \u0022ApiKey Authentication\u0022;\r\n\r\n  private const string AUTHORIZATION_HEADER_PREFIX = SCHEME_NAME \u002B \u0022 \u0022;\r\n\r\n  // Nothing to see here, folks. Nothing at all, moving rrriiiggght along now.\r\n  private static readonly Guid _testDeveloperGuid = Guid.Parse(\u002236F21412-7A50-4896-8ADC-2F6B3D4A3FC3\u0022);\r\n\r\n  /// \u003Csummary\u003E\r\n  /// Used to access the Orleans grains that store Api Key information.\r\n  /// \u003C/summary\u003E\r\n  private readonly IGrainFactory _grainFactory;\r\n\r\n  private HttpContext _context;\r\n  private AuthenticationScheme _scheme;\r\n\r\n  public ApiKeyAuthentication(IGrainFactory grainFactory)\r\n  {\r\n    _grainFactory = grainFactory;\r\n  }\r\n\r\n  public Task InitializeAsync(AuthenticationScheme scheme, HttpContext context)\r\n  {\r\n    if (scheme.Name != SCHEME_NAME)\r\n      throw new Exception($\u0022{nameof(ApiKeyAuthentication)} class cannot handle scheme \u0027{scheme.Name}\u0027.\u0022);\r\n\r\n    _scheme = scheme;\r\n    _context = context;\r\n    return Task.CompletedTask;\r\n  }\r\n\r\n  public async Task\u003CAuthenticateResult\u003E AuthenticateAsync()\r\n  {\r\n    try\r\n    {\r\n      if (TryGetTokenAsGuid(_context, out var token))\r\n      {\r\n        // You did not see this here.\r\n        if (token == _testDeveloperGuid)\r\n        {\r\n          var identity = new ClaimsIdentity(SCHEME_NAME);\r\n          identity.AddClaim(new Claim(ClaimTypes.NameIdentifier, _testDeveloperGuid.ToString(\u0022N\u0022)));\r\n          identity.AddClaim(new Claim(ClaimTypes.Expiration, TimeStamp.MaxValue.TicksUtc.ToString()));\r\n          var principle = new ClaimsPrincipal(identity);\r\n          var authenticationTicket = new AuthenticationTicket(principle, SCHEME_NAME);\r\n          return AuthenticateResult.Success(authenticationTicket);\r\n        }\r\n        else\r\n        {\r\n          // Get information about the api key from the Orleans grain that\r\n          // stores it.\r\n          var tokenData = await _grainFactory.GetGrain\u003CIApiKeyGrain\u003E(token).GetData().ConfigureAwait(false);\r\n\r\n          if (tokenData is null)\r\n            throw new Exception($\u0022Api key \u0027{token}\u0027 does not exist.\u0022);\r\n\r\n          if (tokenData.Expiry \u003C= TimeStamp.Now)\r\n            throw new Exception($\u0022Api key \u0027{token}\u0027 has expired.\u0022);\r\n\r\n          var identity = new ClaimsIdentity(SCHEME_NAME);\r\n          identity.AddClaim(new Claim(ClaimTypes.NameIdentifier, tokenData.UserId.ToString(\u0022N\u0022)));\r\n          identity.AddClaim(new Claim(ClaimTypes.Expiration, tokenData.Expiry.TicksUtc.ToString()));\r\n          var principle = new ClaimsPrincipal(identity);\r\n          var authenticationTicket = new AuthenticationTicket(principle, SCHEME_NAME);\r\n          return AuthenticateResult.Success(authenticationTicket);\r\n        }\r\n      }\r\n    }\r\n    catch (Exception x)\r\n    {\r\n      return AuthenticateResult.Fail(x.Message);\r\n    }\r\n\r\n    return AuthenticateResult.NoResult();\r\n\r\n    static bool TryGetTokenAsGuid(HttpContext context, out Guid token)\r\n    {\r\n      try\r\n      {\r\n        var authHeader = context.Request.Headers[\u0022Authorization\u0022];\r\n        for (var i = 0; i \u003C authHeader.Count; i\u002B\u002B)\r\n        {\r\n          if (authHeader[i].StartsWith(AUTHORIZATION_HEADER_PREFIX))\r\n          {\r\n            var tokenSpan = authHeader[i].AsSpan().Slice(AUTHORIZATION_HEADER_PREFIX.Length);\r\n            token = Guid.Parse(tokenSpan);\r\n            return true;\r\n          }\r\n        }\r\n        token = Guid.Empty;\r\n        return false;\r\n      }\r\n      catch (Exception x)\r\n      {\r\n        var message = \u0022Unable to parse Authorization header. See inner exception for details.\u0022;\r\n        throw new Exception(message, x);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Used when user is not known (authentication did not succeed).\r\n  public Task ChallengeAsync(AuthenticationProperties? properties)\r\n  {\r\n    _context.Response.StatusCode = StatusCodes.Status401Unauthorized;\r\n    return Task.CompletedTask;\r\n  }\r\n\r\n  // Used when user is known (authentication succeeded), but the permission is\r\n  // denied.\r\n  public Task ForbidAsync(AuthenticationProperties? properties)\r\n  {\r\n    _context.Response.StatusCode = StatusCodes.Status403Forbidden;\r\n    return Task.CompletedTask;\r\n  }\r\n}\r\n\u0060\u0060\u0060\r\n### Configuration\r\n\r\n\u0060\u0060\u0060csharp\r\n  .ConfigureWebHostDefaults(webBuilder =\u003E\r\n  {\r\n    webBuilder.ConfigureServices((ctx, services) =\u003E\r\n    {\r\n      services.AddAuthentication(options =\u003E\r\n      {\r\n        options.AddScheme\u003CApiKeyAuthentication\u003E(ApiKeyAuthentication.SCHEME_NAME, ApiKeyAuthentication.SCHEME_DISPLAY_NAME);\r\n        options.DefaultScheme = ApiKeyAuthentication.SCHEME_NAME;\r\n      })\r\n      .AddJwtBearer(options =\u003E\r\n      {\r\n        options.Authority = ctx.Configuration[\u0022Auth0:Authority\u0022];\r\n        options.Audience = ctx.Configuration[\u0022Auth0:ApiIdentifier\u0022];\r\n        options.TokenValidationParameters = new TokenValidationParameters\r\n        {\r\n          NameClaimType = ClaimTypes.NameIdentifier,\r\n        };\r\n        // Workaround for SignalR bearer token.\r\n        // TODO: Stop overriding events that are already attached.\r\n        options.Events = new JwtBearerEvents\r\n        {\r\n          OnMessageReceived = context =\u003E\r\n          {\r\n            var accessToken = context.Request.Query[\u0022access_token\u0022];\r\n            if (!string.IsNullOrWhiteSpace(accessToken))\r\n            {\r\n              context.Token = accessToken;\r\n            }\r\n            return Task.CompletedTask;\r\n          },\r\n        };\r\n      });\r\n\r\n      services.AddAuthorization(options =\u003E\r\n      {\r\n        options.DefaultPolicy = new AuthorizationPolicyBuilder(JwtBearerDefaults.AuthenticationScheme, ApiKeyAuthentication.SCHEME_NAME)\r\n          .RequireClaim(ClaimTypes.NameIdentifier)\r\n          .Build();\r\n      });\r\n\r\n      services.AddLogging(logging =\u003E\r\n      {\r\n        logging.AddConsole();\r\n        logging.AddFilter(logLevel =\u003E logLevel \u003E= LogLevel.Warning);\r\n      });\r\n\r\n      services.AddControllersWithViews();\r\n      services.AddRazorPages();\r\n      services.AddResponseCompression(opts =\u003E\r\n      {\r\n        opts.MimeTypes = ResponseCompressionDefaults.MimeTypes.Concat(\r\n            new[] { \u0022application/octet-stream\u0022 }); // Used by the SignalR hubs\r\n      });\r\n    });\r\n\r\n    webBuilder.Configure((ctx, app) =\u003E\r\n    {\r\n      if (ctx.HostingEnvironment.IsDevelopment())\r\n      {\r\n        app.UseWebAssemblyDebugging();\r\n      }\r\n\r\n      app.UseHttpsRedirection();\r\n      app.UseResponseCompression();\r\n      app.UseBlazorFrameworkFiles();\r\n      app.UseStaticFiles();\r\n\r\n\r\n      app.UseAuthentication();\r\n      app.UseRouting();\r\n      app.UseAuthorization();\r\n      app.UseEndpoints(endpoints =\u003E\r\n      {\r\n        endpoints.MapControllers();\r\n        endpoints.MapRazorPages();\r\n        endpoints.MapFallbackToFile(\u0022index.html\u0022);\r\n        endpoints.MapHub\u003CSignalsHub\u003E(\u0022/signals\u0022);\r\n        endpoints.MapHub\u003CPricesHub\u003E(\u0022/prices\u0022);\r\n      });\r\n    });\r\n  })\r\n\u0060\u0060\u0060\r\n\r\n\r\n\r\n",
        "createdAt": "2021-07-16T09:21:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10576#issuecomment-881304831"
      },
      {
        "id": "IC_kwDOAQzde840jLSe",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "One major issue is that browsers do not allow setting headers on websocket connections. This means we have to send the token in the query string which breaks your auth header logic.\r\n\r\nBecause we\u0027ve already used \u0060access_token\u0060 for BEARER, and you would need some way to distinguish what the scheme is, we would have to come up with some sort of identifier. Like \u0060myscheme_access_token=\u003Ctoken\u003E\u0060, or \u0060access_token=\u003Ctoken\u003E\u0026scheme=myscheme\u0060",
        "createdAt": "2021-07-16T18:26:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10576#issuecomment-881636510"
      },
      {
        "id": "IC_kwDOAQzde85tfhVg",
        "parentId": null,
        "author": "WAmadeus",
        "content": "I found a workaround to implement custom scheme. You can skip using AccessTokenProvider and add Authorization header directly in the Headers property.\r\n\r\nInstead of:\r\n\u0060\u0060\u0060\r\nnew HubConnectionBuilder()\r\n\t.WithUrl(url, opts =\u003E\r\n\t{\r\n\t\topts.AuthScheme = \u0022Secret\u0022;\r\n\t\topts.AccessTokenProvider = () =\u003E Task.FromResult(\u0022XXX\u0022);\r\n\t})\r\n\u0060\u0060\u0060\r\nYou can do this:\r\n\u0060\u0060\u0060\r\nnew HubConnectionBuilder()\r\n\t.WithUrl(url, opts =\u003E\r\n\t{\r\n\t\topts.Headers.Add(\u0022Authorization\u0022, \u0022Secret XXX\u0022);\r\n\t})\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2023-12-02T01:23:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10576#issuecomment-1836979552"
      },
      {
        "id": "IC_kwDOAQzde86aMG0o",
        "parentId": null,
        "author": "STeeL835",
        "content": "\u003E add Authorization header directly in the Headers property\n\nUnfortunately, when doing this, i get an exception:\n\u0060\u0060\u0060\nSystem.FormatException : The format of value \u0027CustomScheme XXX\u0027 is invalid.\n\nHttpHeaderParser.ParseValue(String value, Object storeValue, Int32\u0026 index)\nHttpHeaders.ParseAndAddValue(HeaderDescriptor descriptor, HeaderStoreItemInfo info, String value)\nHttpHeaders.Add(HeaderDescriptor descriptor, String value)\nHttpConnection.CreateHttpClient()\nHttpConnection.ctor(HttpConnectionOptions httpConnectionOptions, ILoggerFactory loggerFactory)\nHttpConnectionFactory.ConnectAsync(EndPoint endPoint, CancellationToken cancellationToken)\nHubConnection.StartAsyncCore(CancellationToken cancellationToken)\nHubConnection.StartAsyncInner(CancellationToken cancellationToken)\nHubConnection.StartAsync(CancellationToken cancellationToken)\n\u0060\u0060\u0060\n\nCan\u0027t add an Authorization header just like that, and can\u0027t use \u0060AuthenticationHeaderValue\u0060 object either - \u0060opt.Headers\u0060 is \u0060IDictionary\u003Cstring, string\u003E\u0060",
        "createdAt": "2025-01-13T11:34:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10576#issuecomment-2586864936"
      },
      {
        "id": "IC_kwDOAQzde86aNVSG",
        "parentId": null,
        "author": "WAmadeus",
        "content": "\u003E \u003E add Authorization header directly in the Headers property\n\u003E \n\u003E Unfortunately, when doing this, i get an exception:\n\u003E \n\u003E \u0060\u0060\u0060\n\u003E System.FormatException : The format of value \u0027CustomScheme XXX\u0027 is invalid.\n\u003E \n\u003E HttpHeaderParser.ParseValue(String value, Object storeValue, Int32\u0026 index)\n\u003E HttpHeaders.ParseAndAddValue(HeaderDescriptor descriptor, HeaderStoreItemInfo info, String value)\n\u003E HttpHeaders.Add(HeaderDescriptor descriptor, String value)\n\u003E HttpConnection.CreateHttpClient()\n\u003E HttpConnection.ctor(HttpConnectionOptions httpConnectionOptions, ILoggerFactory loggerFactory)\n\u003E HttpConnectionFactory.ConnectAsync(EndPoint endPoint, CancellationToken cancellationToken)\n\u003E HubConnection.StartAsyncCore(CancellationToken cancellationToken)\n\u003E HubConnection.StartAsyncInner(CancellationToken cancellationToken)\n\u003E HubConnection.StartAsync(CancellationToken cancellationToken)\n\u003E \u0060\u0060\u0060\n\u003E \n\u003E Can\u0027t add an Authorization header just like that, and can\u0027t use \u0060AuthenticationHeaderValue\u0060 object either - \u0060opt.Headers\u0060 is \u0060IDictionary\u003Cstring, string\u003E\u0060\n\nIt\u0027s working for me like this:\n\n\u0060\u0060\u0060\nnew HubConnectionBuilder()\n\t.WithUrl(url, opts =\u003E\n\t{\n\t\topts.Headers.Add(\u0022Authorization\u0022, \u0022Secret XXX\u0022);\n\t})\n\u0060\u0060\u0060",
        "createdAt": "2025-01-13T14:01:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10576#issuecomment-2587186310"
      },
      {
        "id": "IC_kwDOAQzde86auU6K",
        "parentId": null,
        "author": "STeeL835",
        "content": "I got it - our (well, not exactly [our](https://github.com/webmotions/fake-authentication-jwtbearer)) scheme just puts a JSON in place of XXX. \nI researched a bit and I think exception throws because there are commas, braces and other separators in json string, which are [not supported for Authorization header values](https://stackoverflow.com/questions/19512317/what-are-the-valid-characters-in-http-authorization-header#19512506) and framework [validates this header](https://github.com/dotnet/runtime/blob/b03f83de362f7168c94daa2f4b192959abefe366/src/libraries/System.Net.Http/src/System/Net/Http/Headers/KnownHeaders.cs#L32). We used this scheme for integration tests, and I guess we were lucky to use it unvalidated for a while until we tried to use it with SignalR",
        "createdAt": "2025-01-16T14:12:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/10576#issuecomment-2595835530"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0NjAyNTM2MDY=",
    "title": "[SignalR] Possibility to cancel long running hub method from client",
    "url": "https://github.com/dotnet/aspnetcore/issues/11542",
    "createdAt": "2019-06-25T07:17:06Z",
    "lastUpdated": "2024-10-10T18:42:13Z",
    "body": "I\u00B4m not quit sure if this post is more of a question or a feature request.\r\n\r\nI noticed that the \u0060InvokeAsync\u003CTResult\u003E(HubConnection, String, CancellationToken)\u0060 method accepts a \u0060CancellationToken\u0060. As far as I understood this token only cancels the invocation (and waiting for a result, ...) on the client, while on the server side the method proceeds.\r\nIs this correct?\r\n\r\nIf so wouldn\u00B4t it be a nice feature to allow such a cancellation? I saw that Google offers this possibility in their [gRPC](https://grpc.io/docs/guides/concepts/) framework aswell:\r\n\r\n\u003E Cancelling RPCs\r\nEither the client or the server can cancel an RPC at any time. A cancellation terminates the RPC immediately so that no further work is done. It is not an \u201Cundo\u201D: changes made before the cancellation will not be rolled back.\r\n\r\nWhen my understanding is wrong please provide me an example on how to do a cancellation of long running hub methods from the client.",
    "upvotes": 11,
    "labels": [
      "enhancement",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUwNTQ0ODc1Nw==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Today we only support cancellation for streams but there\u0027s nothing wrong with supporting this for other invocations. ",
        "createdAt": "2019-06-25T13:38:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-505448757"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUwNTQ5NDk4MA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "I believe we support it for non-streaming as well... As long as you accept a \u0060CancellationToken\u0060 in your Hub method, we\u0027ll automatically flow it forward. For example, the below should work:\r\n\r\n\u0060\u0060\u0060csharp\r\n// Server\r\npublic async Task LongRunningOperationAsync(string foo, int bar, CancellationToken cancellationToken)\r\n{\r\n}\r\n\r\n// Client\r\nvar result = await connection.InvokeAsync(\u0022foo\u0022, 42, someCancellationToken);\r\n\u0060\u0060\u0060\r\n\r\nIf it doesn\u0027t, let us know!",
        "createdAt": "2019-06-25T15:24:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-505494980"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUwNTQ5OTYyNQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "@anurse I don\u0027t think we do support that, but we structured the code in such a way that we could add support for it in the future.",
        "createdAt": "2019-06-25T15:35:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-505499625"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUwNTUwMzUwNw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Ah yes, I believe the server supports it but the client does not. Moving to the backlog to add this support.",
        "createdAt": "2019-06-25T15:44:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-505503507"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NzE5OTk1NQ==",
        "parentId": null,
        "author": "thw0rted",
        "content": "I\u0027m not really a SignalR user, just inherited a project that uses it, but can I make a suggestion?  If you\u0027re going to support cancellation of an in-flight request, instead of rolling your own \u0022token\u0022, just take an [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal).  This is what the Fetch API already uses, so if you\u0027re using Fetch under the hood, it\u0027s as simple as passing the \u0060signal\u0060 argument through.",
        "createdAt": "2020-01-22T14:13:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-577199955"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NzI5NTY3MQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "\u003E instead of rolling your own \u0022token\u0022, just take an [AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal).\r\n\r\nThat\u0027s for JavaScript though. This issue is discussing the .NET Client, where [CancellationToken](https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken) is the equivalent primitive. \r\n\r\nIf you\u0027re looking for changes to JavaScript cancellation (I don\u0027t think we support cancellation of server methods in JS at all right now, so it\u0027s certainly a good discussion to have!) then I\u0027d suggest filing a new issue.",
        "createdAt": "2020-01-22T17:26:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-577295671"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2NDYzOTM0Mg==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-07-27T21:08:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-664639342"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc4ODk3NTU5NQ==",
        "parentId": null,
        "author": "muzopraha",
        "content": "Hi, we need this functionality too. We have been waiting for this feature several months and one of our motivations for upgrading to .NET5 was this feature which was presented in .NET5 backlog. Now I see, it is not implemented yet :/ \r\nIs there any ETA for this one? Thank you.",
        "createdAt": "2021-03-02T15:07:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-788975595"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc4ODk4NDgxNg==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@muzopraha What\u0027s the scenario you have with a long running hub method? ",
        "createdAt": "2021-03-02T15:18:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-788984816"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc4OTAxMDA5OA==",
        "parentId": null,
        "author": "alexalok",
        "content": "Sorry to hijack the issue but I\u0027d also like to report one possible scenario. \r\n\r\nOur company uses SignalR as a signal server for WebRTC. There are 3 main actors involved: caller, signaling server and a callee. There\u0027s a method the caller calls to initiate a call and notify the callee. Ideally, method would wait for the callee to answer and return the information required for the call to be established. There is a problem, however: if the caller decides to cancel a call there\u0027s no way for us to cancel the initialization method. Due to this issue, currently we immediately return from the initialization method and use another server-\u003Eclient callback to inform of the result and one more client-\u003Eserver method to inform the signaling server if the caller has cancelled the call.\r\nIf we had a way for the caller to cancel the initialization method it would remove the need of those two additional methods.",
        "createdAt": "2021-03-02T15:54:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-789010098"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc4OTAyNjkxNA==",
        "parentId": null,
        "author": "muzopraha",
        "content": "\u003E @muzopraha What\u0027s the scenario you have with a long running hub method?\r\n@davidfowl \r\nThe scenario is, that our clients can run async heavy-weight server side operations (gathering data from other services) via SignalR. These clients waits for results (listen to SignalR), but it is quite common that these clients need to stop processing these requests. Now, we are cancelling these async operations via cancellation token on client side, but server-side is still running even if it is not necessary.\r\nOur solution architecture is like this: Clients (WPF/Blazor/etc) =\u003E WebAPI =\u003E Application =\u003E DB",
        "createdAt": "2021-03-02T16:17:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-789026914"
      },
      {
        "id": "IC_kwDOAQzde8486ANN",
        "parentId": null,
        "author": "thorgeirk11",
        "content": "@davidfowl Any updates on this? ",
        "createdAt": "2022-01-26T03:57:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1021838157"
      },
      {
        "id": "IC_kwDOAQzde8486IjN",
        "parentId": null,
        "author": "davidfowl",
        "content": "@thorgeirk11 No updates, best to add your scenario so we have a record of what people want to use it for before we invest the time. ",
        "createdAt": "2022-01-26T05:07:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1021872333"
      },
      {
        "id": "IC_kwDOAQzde8486jYA",
        "parentId": null,
        "author": "thw0rted",
        "content": "If you\u0027re collecting use cases, I can briefly describe mine.\r\n\r\nI load data to show on a map, from a variety of sources.  One provides records via SignalR.  If the user drags the map, I can start loading new records for the area that has just scrolled into view.  If they drag it again before the network request has finished, I may no longer need those records, so I can cancel the in-flight request.  With Fetch / AbortSignal, this process is very simple and works perfectly.",
        "createdAt": "2022-01-26T08:42:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1021982208"
      },
      {
        "id": "IC_kwDOAQzde8488nl0",
        "parentId": null,
        "author": "secretwpn",
        "content": "@thw0rted your use case sounds like it could use [SignalR streaming](https://docs.microsoft.com/en-us/aspnet/core/signalr/streaming?view=aspnetcore-6.0) to stream a list of records matching the new viewport. I have somewhat similar use case and streaming worked well for me.",
        "createdAt": "2022-01-26T19:22:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1022523764"
      },
      {
        "id": "IC_kwDOAQzde848-rm8",
        "parentId": null,
        "author": "thw0rted",
        "content": "Thanks for the link @secretwpn , that\u0027s basically exactly what I had in mind.  In fact, the API maps almost exactly to the RxJS Observable pattern which I already use extensively.  Of course, I\u0027m only consuming somebody else\u0027s back end API so I\u0027m not sure that the \u0060stream\u0060 method is available for the service I use, but I will make a note to come back and look into it when I have time.",
        "createdAt": "2022-01-27T10:30:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1023064508"
      },
      {
        "id": "IC_kwDOAQzde849S8gh",
        "parentId": null,
        "author": "MaximMikhisor",
        "content": "\u003E @thorgeirk11 No updates, best to add your scenario so we have a record of what people want to use it for before we invest the time.\r\n\r\nWe also need this functionality.\r\nUser starts some long runing process on server and waiting to get data.\r\nHe has option to cancel this process on Client side. But, unfortunately, this cancelation means nothing on Server side.\r\nAs result user can star-stop N times this process. And all these N processes will be running on server side until they will be finished.\r\n\r\nFrom our point of view cancelation is quite important functionality.\r\nEspecially if take in account that implemented interfaces assume it should work (i.e. presence of CancelationToken).\r\nIt took some time for us to figure out that it does not work.\r\n\r\nPlease implement this ticket.\r\nThank you.\r\n\r\n\r\n",
        "createdAt": "2022-02-02T21:31:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1028376609"
      },
      {
        "id": "IC_kwDOAQzde84_Q51X",
        "parentId": null,
        "author": "EmanH",
        "content": "[According to the docs](https://docs.microsoft.com/en-us/aspnet/core/signalr/streaming?view=aspnetcore-6.0#:~:text=Calling%20this%20method%20causes%20cancellation%20of%20the%20CancellationToken%20parameter%20of%20the%20Hub%20method%2C%20if%20you%20provided%20one.) this should be possible.\r\n\r\n![image](https://user-images.githubusercontent.com/422748/157166388-02d06562-272b-4a7d-ad75-12bdf2c5db32.png)\r\n\r\nHowever, this doesn\u0027t seem to work in my tests. Calling the dispose method on ISubscription stops the stream client-side, but the server continues to stream events.",
        "createdAt": "2022-03-08T04:31:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1061395799"
      },
      {
        "id": "IC_kwDOAQzde84_Q6GK",
        "parentId": null,
        "author": "EmanH",
        "content": "Our use-case is streaming a file download from server to client. The client should be able to cancel the download and stop the file chunks from being sent from the server.",
        "createdAt": "2022-03-08T04:33:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1061396874"
      },
      {
        "id": "IC_kwDOAQzde84_Q6iV",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "File a new issue and show your code.",
        "createdAt": "2022-03-08T04:38:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1061398677"
      },
      {
        "id": "IC_kwDOAQzde84_Q_Y_",
        "parentId": null,
        "author": "EmanH",
        "content": "Actually this issue might just relate to how Chrome dev tools does network throttling, which is how we\u0027re testing. With network throttling on there seems to be a buffer of events which continues to be sent even after dispose is called. The stream is actually being cancelled on the server. So probably no issue in the real world.",
        "createdAt": "2022-03-08T05:23:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1061418559"
      },
      {
        "id": "IC_kwDOAQzde85ARL6K",
        "parentId": null,
        "author": "banoz",
        "content": "\u003E \u0060\u0060\u0060cs\r\n\u003E // Server\r\n\u003E public async Task LongRunningOperationAsync(string foo, int bar, CancellationToken cancellationToken)\r\n\u003E {\r\n\u003E }\r\n\u003E \r\n\u003E // Client\r\n\u003E var result = await connection.InvokeAsync(\u0022foo\u0022, 42, someCancellationToken);\r\n\u003E \u0060\u0060\u0060\r\n\r\nIt doesn\u0027t work for me. \r\n\r\nFirst of all, it looks like client side call in your example missing a first parameter which is a called method name (\u0022LongRunningOperationAsync\u0022). \r\n\r\nAnd even with a proper first parameter it still doesn\u0027t work. It works only when I remove cancellationToken parameter from the server side method declaration. \r\n\r\nThe issue looks the same as [this](https://stackoverflow.com/questions/70355768/signalr-cancellation-in-case-of-client-to-server-streaming-makes-code-buggy-in).\r\n\r\nIs there some attribute that could help?\r\n\r\nI\u0027m using 3.1.23, can\u0027t go higher than Core 3.1",
        "createdAt": "2022-03-24T20:44:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1078247050"
      },
      {
        "id": "IC_kwDOAQzde85ARQ1S",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "CancellationToken in the hub method signature is only supported for Server to client streaming currently.\r\n\r\nThis issue is tracking adding it for other cases.",
        "createdAt": "2022-03-24T20:51:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1078267218"
      },
      {
        "id": "IC_kwDOAQzde85FAysM",
        "parentId": null,
        "author": "muzopraha",
        "content": "@davidfowl Any updates on this?",
        "createdAt": "2022-06-16T15:54:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1157835532"
      },
      {
        "id": "IC_kwDOAQzde85b1gpL",
        "parentId": null,
        "author": "Cizzl",
        "content": "any update?",
        "createdAt": "2023-05-09T19:12:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1540753995"
      },
      {
        "id": "IC_kwDOAQzde85sXDvf",
        "parentId": null,
        "author": "hershelJ",
        "content": "Any update on this? \r\n\r\nIt\u0027s an accepted overload, just confusing to as why the hub method would not be able to capture this?\r\n\r\nInvokeAsync:\r\n  public static Task\u003CTResult\u003E InvokeAsync\u003CTResult\u003E(this HubConnection hubConnection, string methodName, object? arg1, CancellationToken cancellationToken = default)\r\n  {\r\n      return hubConnection.InvokeCoreAsync\u003CTResult\u003E(methodName, new[] { arg1 }, cancellationToken);\r\n  }\r\n\r\nDescription\r\nI am experiencing an issue with SignalR\u0027s InvokeAsync method in a Blazor WebAssembly application. The problem arises when invoking a server-side Hub method with what seems like the correct number and types of parameters, yet I receive an error indicating a mismatch.\r\n\r\nEnvironment\r\nFramework: Blazor WebAssembly\r\nSignalR Version: 8.0.0\r\n.NET Version: 8.0.0\r\n\r\nError Message:\r\ndbug: Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher[22]\r\n      Parameters to hub method \u0027UpdateChannelAsync\u0027 are incorrect.\r\n      System.IO.InvalidDataException: Invocation provides 1 argument(s) but target expects 2.\r\n\r\nClient Side:\r\npublic async Task CreateOrUpdateChannelAsync(ChannelsViewModel channel, CancellationToken cts)\r\n{\r\n    // [Include relevant client-side code, focusing on the invocation part]\r\n    _signalRConnectionService.HubConnection.InvokeAsync\u003CChannelsViewModel\u003E(\u0022UpdateChannelAsync\u0022, channel, cts);\r\n}\r\n\r\nServer-Side Hub Method:\r\npublic async Task\u003CTPMChannels\u003E UpdateChannelAsync(TPMChannels channel, CancellationToken cts = default)\r\n{\r\n    // [Include relevant server-side hub method code]\r\n}\r\n",
        "createdAt": "2023-11-19T21:32:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1817983967"
      },
      {
        "id": "IC_kwDOAQzde85seEG6",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Since this feature isn\u0027t implemented yet that method signature won\u0027t work. It\u0027s basically trying to receive a serialized \u0060CancellationToken\u0060 from the client, which isn\u0027t going to work.\r\n\r\nThe cancellation token in \u0060InvokeAsync\u0060 will cancel the client waiting for a server response, but it doesn\u0027t pass that info along to the server yet. That\u0027s what this issue is tracking adding support for.\r\n\r\n\u0060public async Task UpdateChannelAsync(TPMChannels channel, CancellationToken cts = default)\u0060 -\u003E\r\n\u0060public async Task UpdateChannelAsync(TPMChannels channel)\u0060",
        "createdAt": "2023-11-20T21:20:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-1819820474"
      },
      {
        "id": "IC_kwDOAQzde86PMmau",
        "parentId": null,
        "author": "codymullins",
        "content": "@davidfowl if this is something the team would be interested in supporting, let us know. If you could give us an idea of the implementation you\u0027d prefer we can band together to make progress here.",
        "createdAt": "2024-10-09T14:04:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-2402444974"
      },
      {
        "id": "IC_kwDOAQzde86PYapW",
        "parentId": null,
        "author": "davidfowl",
        "content": "I\u0027ll defer to @BrennanConroy here.",
        "createdAt": "2024-10-10T16:17:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-2405542486"
      },
      {
        "id": "IC_kwDOAQzde86PZaax",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Basically we would need to update the client(s) to send a \u0060CancelInvocationMessage\u0060 when the cancellation token passed in to \u0060InvokeAsync\u0060 is canceled.\nWe currently only send that message type when the client cancels a stream\nhttps://github.com/dotnet/aspnetcore/blob/54c0cc8fa74e8196a2ce0711a20959143be7fb6f/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs#L708\n\nThe server is mostly setup to handle \u0060CancelInvocationMessage\u0060\nhttps://github.com/dotnet/aspnetcore/blob/54c0cc8fa74e8196a2ce0711a20959143be7fb6f/src/SignalR/server/Core/src/Internal/DefaultHubDispatcher.cs#L183-L189\nThe logs would likely need to be updated since it assumes streams are the only thing that can be canceled.\n\nWe\u0027d also need to update the logic around which hub methods can have a synthetic argument (\u0060CancellationToken\u0060)\nhttps://github.com/dotnet/aspnetcore/blob/54c0cc8fa74e8196a2ce0711a20959143be7fb6f/src/SignalR/server/Core/src/Internal/HubMethodDescriptor.cs#L64-L66\n\n--------\n\nA massive stretch goal would be to do the same thing for client results, which would require adding synthetic argument support on the client side and sending \u0060CancelInvocationMessage\u0060 from the server. That work is tracked by https://github.com/dotnet/aspnetcore/issues/44831 and shouldn\u0027t restrict this issue from being worked on.",
        "createdAt": "2024-10-10T18:42:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11542#issuecomment-2405803697"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0NjA2NTIwNjU=",
    "title": "Allow multiple calls to HubConnectionBuilder.Build",
    "url": "https://github.com/dotnet/aspnetcore/issues/11567",
    "createdAt": "2019-06-25T21:27:57Z",
    "lastUpdated": "2021-03-02T00:21:29Z",
    "body": "Right now we, somewhat arbitrarily, stop you from calling \u0060HubConnectionBuilder.Build\u0060 more than once. We should consider allowing multiple calls. It makes it easier to \u0022recreate\u0022 connections from scratch.\r\n\r\nWe should do a little historical investigation as to why we didn\u0027t do this in the first place.",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "severity-minor",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxNjYwMzg1MQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "We think it\u0027s reasonable to do this. Super low cost since it\u0027s just removing a check :)",
        "createdAt": "2019-07-30T21:31:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11567#issuecomment-516603851"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0MTMzMTc0Mg==",
        "parentId": null,
        "author": "Kahbazi",
        "content": "\u003E We should do a little historical investigation as to why we didn\u0027t do this in the first \r\n\r\nhttps://github.com/aspnet/SignalR/pull/1830#discussion_r179028857",
        "createdAt": "2019-10-12T14:51:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11567#issuecomment-541331742"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0NjM0NjU0MDQ=",
    "title": "Consider redesigning our \u0022breadth\u0022 test coverage in SignalR",
    "url": "https://github.com/dotnet/aspnetcore/issues/11821",
    "createdAt": "2019-07-02T22:37:11Z",
    "lastUpdated": "2020-11-11T23:23:27Z",
    "body": "We have a daily test run that uses Sauce Labs for browser breadth coverage. This is good but we also need Xamarin coverage and Android coverage (for the Java Client). This would be a good opportunity to review all that and improve the reporting of issues. Right now, for example, intermittent Sauce Labs issues cause RaaS to open bugs. That seems overkill.",
    "upvotes": 0,
    "labels": [
      "task",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwNTIwNTA1NA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Pre-triage notes: Yeah, backlog this, we aren\u0027t going to get to it in 5.0. It was explicitly cut in the costing docs I had earlier.",
        "createdAt": "2020-03-27T18:38:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11821#issuecomment-605205054"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0NjQwNjM0NjA=",
    "title": "[SignalR] Better integration with TestServer",
    "url": "https://github.com/dotnet/aspnetcore/issues/11888",
    "createdAt": "2019-07-04T05:06:51Z",
    "lastUpdated": "2024-09-25T17:01:13Z",
    "body": "Right now, it\u0027s only possible to use TestServer with the non-WebSockets transports because we only provide a way to replace the \u0060HttpMessageHandler\u0060. We should consider providing a way to provide a \u0060WebSocket\u0060 \u0022factory\u0022 so that we can integrate properly with TestServer.\r\n\r\nIt might be most appropriate here to add an alternative to \u0060WithUrl\u0060 on \u0060HubConnectionBuilder\u0060. Consider this possible test code:\r\n\r\n\u0060\u0060\u0060csharp\r\nvar server = new TestServer(webHostBuilder);\r\nvar connection = new HubConnectionBuilder()\r\n\t.WithTestServer(server, HttpTransportType.WebSockets, o =\u003E {\r\n\t\t// Assorted other HttpConnectionOptions\r\n\t})\r\n\t.Build();\r\n\u0060\u0060\u0060\r\n\r\nIt would be relatively simple to add this API once we have a way to swap out the WebSocket, though we\u0027d probably need to do so in a new assembly to avoid layering issues.",
    "upvotes": 28,
    "labels": [
      "enhancement",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0MDMxMjkyOA==",
        "parentId": null,
        "author": "khteh",
        "content": "Bear in mind that WebHostBuilder will be deprecated in future releases. ",
        "createdAt": "2019-10-10T02:55:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-540312928"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0MDY1ODM5MA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Yes, we\u0027re aware :). The focus is on better integration with TestServer, not necessarily using WebHostBuilder.",
        "createdAt": "2019-10-10T16:08:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-540658390"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY1NjUxNjMzNA==",
        "parentId": null,
        "author": "Suriman",
        "content": "Please, these characteristics are very important to be able to test SignalR with TestServer in integration or unit tests.",
        "createdAt": "2020-07-10T06:54:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-656516334"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc3NTE2MjI2Mw==",
        "parentId": null,
        "author": "suadev",
        "content": "\uD83D\uDC40 ",
        "createdAt": "2021-02-08T13:47:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-775162263"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgzOTM5ODA4OA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "There is now an API on HttpConnectionOptions to allow replacing the websocket so an extension method on the HubConnectionBuilder can be done now.",
        "createdAt": "2021-05-12T03:07:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-839398088"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgzOTQxMzExNA==",
        "parentId": null,
        "author": "khteh",
        "content": "@BrennanConroy which .Net version? .Net 5 or 6? Thanks.",
        "createdAt": "2021-05-12T03:55:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-839413114"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgzOTQxNDQyOA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "6, we don\u0027t add or change APIs in already released versions.",
        "createdAt": "2021-05-12T04:00:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-839414428"
      },
      {
        "id": "IC_kwDOAQzde84254ae",
        "parentId": null,
        "author": "wegylexy",
        "content": "Not sure if it helps, but here is an example to use named pipe as the underlying transport for testing: https://github.com/wegylexy/SignalRTunnel/blob/0afb58b11f88afcae8962a797f1eace14ce05096/src/Test/Test.cs#L71",
        "createdAt": "2021-09-16T18:28:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-921142942"
      },
      {
        "id": "IC_kwDOAQzde84377k0",
        "parentId": null,
        "author": "dayadimova",
        "content": "Hey @BrennanConroy. I have migrated my integration tests to .NET 6 and I\u0027ve replaced the WebSocket in HttpConnectionOptions with one created from TestServer. Currently having some issues with authentication - the access token is not sent with the request that establishes a connection to the server. Can you advise on how to add it to either the headers or query string?\r\n\r\nSignalR client code:\r\n\u0060\u0060\u0060\r\nvar connection = new HubConnectionBuilder()\r\n                .WithUrl($\u0022{_baseUrl}/hubs\u0022, options =\u003E\r\n                {\r\n                    options.AccessTokenProvider = () =\u003E Task.FromResult(token);\r\n                    options.SkipNegotiation = true;\r\n                    options.Transports = HttpTransportType.WebSockets;\r\n                    options.WebSocketFactory = (context, cancellationToken) =\u003E\r\n                    {\r\n                        var webSocketClient = _server.CreateWebSocketClient();\r\n                        var webSocket = webSocketClient.ConnectAsync(context.Uri, cancellationToken).GetAwaiter().GetResult();\r\n                        return ValueTask.FromResult(webSocket);\r\n                    };\r\n                    options.Headers.Add(IntegrationTestConstants.CorrTokenHeaderKey, IntegrationTestConstants.CorrTokenHeaderValue);\r\n                })\r\n                .Build();\r\n\u0060\u0060\u0060",
        "createdAt": "2021-10-08T08:41:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-938457396"
      },
      {
        "id": "IC_kwDOAQzde8438SaU",
        "parentId": null,
        "author": "sergey-litvinov",
        "content": "@dayadimova in case of browser\u0027s websocket implementation access token can be passed only with uri. And as you are creating WebSocket client manually, you need to add it to your uri as well.\r\n\r\nYou can check default \u0060WebSocketFactory\u0060 implementation here - https://github.com/dotnet/aspnetcore/blob/a0b950fc51c43289ab3c6dbea15926d32f3556cc/src/SignalR/clients/csharp/Http.Connections.Client/src/Internal/WebSocketsTransport.cs#L48\r\n\r\nThe needed part is at the bottom\r\n\u0060\u0060\u0060\r\n            if (_httpConnectionOptions.AccessTokenProvider != null)\r\n            {\r\n                var accessToken = await _httpConnectionOptions.AccessTokenProvider();\r\n                if (!string.IsNullOrWhiteSpace(accessToken))\r\n                {\r\n                    // We can\u0027t use request headers in the browser, so instead append the token as a query string in that case\r\n                    if (OperatingSystem.IsBrowser())\r\n                    {\r\n                        var accessTokenEncoded = UrlEncoder.Default.Encode(accessToken);\r\n                        accessTokenEncoded = \u0022access_token=\u0022 \u002B accessTokenEncoded;\r\n                        url = Utils.AppendQueryString(url, accessTokenEncoded);\r\n                    }\r\n                    else\r\n                    {\r\n#pragma warning disable CA1416 // Analyzer bug\r\n                        webSocket.Options.SetRequestHeader(\u0022Authorization\u0022, $\u0022Bearer {accessToken}\u0022);\r\n#pragma warning restore CA1416 // Analyzer bug\r\n                    }\r\n                }\r\n            }\r\n\u0060\u0060\u0060\r\nso you would need to update your code to something like\r\n\u0060\u0060\u0060diff\r\nvar connection = new HubConnectionBuilder()\r\n                .WithUrl($\u0022{_baseUrl}/hubs\u0022, options =\u003E\r\n                {\r\n                    options.AccessTokenProvider = () =\u003E Task.FromResult(token);\r\n                    options.SkipNegotiation = true;\r\n                    options.Transports = HttpTransportType.WebSockets;\r\n                    options.WebSocketFactory = (context, cancellationToken) =\u003E\r\n                    {\r\n                        var webSocketClient = _server.CreateWebSocketClient();\r\n\u002B                       var url = $\u0022{context.Uri}?access_token={token}\u0022;\r\n\u002B                       var webSocket = webSocketClient.ConnectAsync(url, cancellationToken).GetAwaiter().GetResult();\r\n                        return ValueTask.FromResult(webSocket);\r\n                    };\r\n                    options.Headers.Add(IntegrationTestConstants.CorrTokenHeaderKey, IntegrationTestConstants.CorrTokenHeaderValue);\r\n                })\r\n                .Build();\r\n\u0060\u0060\u0060",
        "createdAt": "2021-10-08T11:02:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-938550932"
      },
      {
        "id": "IC_kwDOAQzde8438fBs",
        "parentId": null,
        "author": "dayadimova",
        "content": "Awesome, thank you for the help, that worked \uD83D\uDE47 ",
        "createdAt": "2021-10-08T12:26:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-938602604"
      },
      {
        "id": "IC_kwDOAQzde8438oC7",
        "parentId": null,
        "author": "wegylexy",
        "content": "You want to return the connection task instead of blocking a thread.\r\n\u0060\u0060\u0060diff\r\nvar connection = new HubConnectionBuilder()\r\n    .WithUrl($\u0022{_baseUrl}/hubs\u0022, options =\u003E\r\n    {\r\n        options.AccessTokenProvider = () =\u003E Task.FromResult(token);\r\n        options.SkipNegotiation = true;\r\n        options.Transports = HttpTransportType.WebSockets;\r\n        options.WebSocketFactory = (context, cancellationToken) =\u003E\r\n        {\r\n            var webSocketClient = _server.CreateWebSocketClient();\r\n            var url = $\u0022{context.Uri}?access_token={token}\u0022;\r\n-           var webSocket = webSocketClient.ConnectAsync(url, cancellationToken).GetAwaiter().GetResult();\r\n\u002B           var webSocketTask = webSocketClient.ConnectAsync(url, cancellationToken);\r\n-           return ValueTask.FromResult(webSocket);\r\n\u002B           return new(webSocketTask);\r\n        };\r\n        options.Headers.Add(IntegrationTestConstants.CorrTokenHeaderKey, IntegrationTestConstants.CorrTokenHeaderValue);\r\n    })\r\n    .Build();\r\n\u0060\u0060\u0060",
        "createdAt": "2021-10-08T13:22:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-938639547"
      },
      {
        "id": "IC_kwDOAQzde845k3bu",
        "parentId": null,
        "author": "khteh",
        "content": "Where is \u0060IntegrationTestConstants\u0060 defined?",
        "createdAt": "2021-11-11T03:55:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-965965550"
      },
      {
        "id": "IC_kwDOAQzde845k48M",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "I think that\u0027s something they defined in their app and unrelated to what is being shown in the sample code.",
        "createdAt": "2021-11-11T04:11:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-965971724"
      },
      {
        "id": "IC_kwDOAQzde845k-Oi",
        "parentId": null,
        "author": "khteh",
        "content": "The following code snippet works:\r\n\u0060\u0060\u0060\r\n            HubConnection connection = new HubConnectionBuilder()\r\n                            .WithUrl(\u0022https://localhost/chatHub\u0022, o =\u003E {\r\n                                o.Transports = HttpTransportType.WebSockets;\r\n                                o.AccessTokenProvider = async () =\u003E await AccessTokenProvider();\r\n                                o.SkipNegotiation = true;\r\n                                o.HttpMessageHandlerFactory = _ =\u003E _testServer.CreateHandler();\r\n                                o.WebSocketFactory = async (context, cancellationToken) =\u003E\r\n                                {\r\n                                    var wsClient = _testServer.CreateWebSocketClient();\r\n                                    var url = $\u0022{context.Uri}?access_token={await AccessTokenProvider()}\u0022;\r\n                                    return await wsClient.ConnectAsync(new Uri(url), cancellationToken);\r\n                                };\r\n                            }).Build();\r\n\u0060\u0060\u0060\r\nHow to use the \u0060AccessTokenProvider\u0060 option? Is it redundant for this use case?",
        "createdAt": "2021-11-11T05:06:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-965993378"
      },
      {
        "id": "IC_kwDOAQzde85P-VLb",
        "parentId": null,
        "author": "deathcat05",
        "content": "I seem to be running into an issue with something similar to this. I am using .NET 6, and have created my TestServer and SignalR connection as follows in my integration test function: \r\n\r\n\u0060\u0060\u0060\r\nawait using var application = new WebApplicationFactory\u003CProgram\u003E();\r\n            using var client = application.CreateClient();\r\n\r\n            string? accessToken = await GetAcessTokenAsync(client, agent.Id, agent.Secret);\r\n            var connection = new HubConnectionBuilder()\r\n                .WithUrl(\u0022https://localhost/hub\u0022, options =\u003E\r\n                {\r\n                    options.Transports = HttpTransportType.WebSockets;\r\n                    options.AccessTokenProvider = () =\u003E Task.FromResult(accessToken);\r\n                    options.SkipNegotiation = true;\r\n                    options.HttpMessageHandlerFactory = _ =\u003E application.Server.CreateHandler();\r\n                    options.WebSocketFactory = async (context, cancellationToken) =\u003E\r\n                    {\r\n                        var wsClient = application.Server.CreateWebSocketClient();\r\n                        var url = $\u0022{context.Uri}?access_token={accessToken}\u0022;\r\n                        return await wsClient.ConnectAsync(new Uri(url), cancellationToken);\r\n                    };\r\n                })\r\n                .Build();\r\n\r\n            await connection.StartAsync();\r\n\u0060\u0060\u0060\r\n\r\nHowever, my test fails with the following Error information: \r\n\r\n  Message:\u2009\r\n\u0060System.InvalidOperationException : Incomplete handshake, status code: 401\u0060\r\n\r\n  Stack Trace:\u2009\r\n\u0060\u0060\u0060\r\nWebSocketClient.ConnectAsync(Uri uri, CancellationToken cancellationToken)\r\n\u003C\u003CTestShouldReturnTrue\u003Eb__3\u003Ed.MoveNext()\u2009line\u200942\r\n--- End of stack trace from previous location ---\r\nWebSocketsTransport.StartAsync(Uri url, TransferFormat transferFormat, CancellationToken cancellationToken)\r\nHttpConnection.StartTransport(Uri connectUrl, HttpTransportType transportType, TransferFormat transferFormat, CancellationToken cancellationToken)\r\nHttpConnection.SelectAndStartTransport(TransferFormat transferFormat, CancellationToken cancellationToken)\r\nHttpConnection.StartAsyncCore(TransferFormat transferFormat, CancellationToken cancellationToken)\r\nForceAsyncAwaiter.GetResult()\r\nHttpConnection.StartAsync(TransferFormat transferFormat, CancellationToken cancellationToken)\r\nHttpConnectionFactory.ConnectAsync(EndPoint endPoint, CancellationToken cancellationToken)\r\nHttpConnectionFactory.ConnectAsync(EndPoint endPoint, CancellationToken cancellationToken)\r\nHubConnection.StartAsyncCore(CancellationToken cancellationToken)\r\nHubConnection.StartAsyncInner(CancellationToken cancellationToken)\r\nForceAsyncAwaiter.GetResult()\r\nHubConnection.StartAsync(CancellationToken cancellationToken)\r\nPingPongTests.TestShouldReturnTrue(AgentModel agent)\u2009line\u200947\r\nPingPongTests.TestShouldReturnTrue(AgentModel agent)\u2009line\u200950\r\n--- End of stack trace from previous location ---\r\n\u0060\u0060\u0060\r\nMy token is issued successfully. I noticed that if I remove the \u0060options.SkipNegotiations = true\u0060 in my code, I get the following exception in my test function:\r\n\r\nMessage:\u2009\r\n\u0060\u0060\u0060\r\nSystem.AggregateException : Unable to connect to the server with any of the available transports. (WebSockets failed: Incomplete handshake, status code: 401)\r\n---- Microsoft.AspNetCore.Http.Connections.Client.TransportFailedException : WebSockets failed: Incomplete handshake, status code: 401\r\n-------- System.InvalidOperationException : Incomplete handshake, status code: 401\r\n\u0060\u0060\u0060\r\n\r\n  Stack Trace:\u2009\r\n\u0060\u0060\u0060\r\nHttpConnection.SelectAndStartTransport(TransferFormat transferFormat, CancellationToken cancellationToken)\r\nHttpConnection.StartAsyncCore(TransferFormat transferFormat, CancellationToken cancellationToken)\r\nForceAsyncAwaiter.GetResult()\r\nHttpConnection.StartAsync(TransferFormat transferFormat, CancellationToken cancellationToken)\r\nHttpConnectionFactory.ConnectAsync(EndPoint endPoint, CancellationToken cancellationToken)\r\nHttpConnectionFactory.ConnectAsync(EndPoint endPoint, CancellationToken cancellationToken)\r\nHubConnection.StartAsyncCore(CancellationToken cancellationToken)\r\nHubConnection.StartAsyncInner(CancellationToken cancellationToken)\r\nForceAsyncAwaiter.GetResult()\r\nHubConnection.StartAsync(CancellationToken cancellationToken)\r\nPingPongTests.TestShouldReturnTrue(AgentModel agent)\u2009line\u200947\r\nPingPongTests.TestShouldReturnTrue(AgentModel agent)\u2009line\u200950\r\n--- End of stack trace from previous location ---\r\n----- Inner Stack Trace -----\r\n----- Inner Stack Trace -----\r\nWebSocketClient.ConnectAsync(Uri uri, CancellationToken cancellationToken)\r\n\u003C\u003CTestShouldReturnTrue\u003Eb__3\u003Ed.MoveNext()\u2009line\u200942\r\n--- End of stack trace from previous location ---\r\nWebSocketsTransport.StartAsync(Uri url, TransferFormat transferFormat, CancellationToken cancellationToken)\r\nHttpConnection.StartTransport(Uri connectUrl, HttpTransportType transportType, TransferFormat transferFormat, CancellationToken cancellationToken)\r\nHttpConnection.SelectAndStartTransport(TransferFormat transferFormat, CancellationToken cancellationToken)\r\n\u0060\u0060\u0060\r\n\r\nI have used \u0060public partial class Program\u0060 in \u0060Program.cs\u0060 for the \u0060WebApplicationFactory\u0060. \r\nAm I missing something important somewhere? \r\n\r\nThanks in advance! ",
        "createdAt": "2022-12-07T23:29:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-1341739739"
      },
      {
        "id": "IC_kwDOAQzde85cRBcl",
        "parentId": null,
        "author": "EddyHaigh",
        "content": "Is there anything more clearly defined for testing SignalR with WebApplicationFactory yet? Can we also get some testing documentation in the official docs? ",
        "createdAt": "2023-05-15T14:19:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-1547966245"
      },
      {
        "id": "IC_kwDOAQzde85eEZWR",
        "parentId": null,
        "author": "aleoyakas",
        "content": "We\u0027re using cookie authentication for our SignalR endpoints which is achieved via a REST endpoint. Currently, there doesn\u0027t seem to be a way to share a handler (and therefore the cookies) with TestServer.\r\n\r\nIs there plans to include this functionality/is there a workaround that I\u0027m unaware of?",
        "createdAt": "2023-06-06T08:48:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-1578210705"
      },
      {
        "id": "IC_kwDOAQzde85eHyk3",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "It doesn\u0027t look like \u0060TestServer\u0060 has first class support for cookies, which means using it with SignalR won\u0027t have cookies either.\r\n\r\nThere is enough extensibility to implement it manually though. If you wrap the \u0060HttpMessageHandler\u0060 from \u0060TestServer.CreateHandler\u0060 you can intercept the Set-Cookie header and add it to a \u0060CookieContainer\u0060 instance that you share with \u0060HttpConnectionOptions\u0060 in SignalR. You\u0027d also need to add cookies from the \u0060CookieContainer\u0060 to requests via the \u0060TestServer.CreateHandler\u0060 overload that has an \u0060Action\u003CHttpContext\u003E\u0060.",
        "createdAt": "2023-06-06T16:35:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-1579100471"
      },
      {
        "id": "IC_kwDOAQzde85oJurl",
        "parentId": null,
        "author": "HakamFostok",
        "content": "I am using .NET 7 and in my case, the following code was more than enough\r\n\r\n\u0060\u0060\u0060\r\nstring accessToken = // get it from someplace\r\nbuilder.WithUrl(\u0022https://localhost/hub\u0022, o =\u003E\r\n{\r\n    o.AccessTokenProvider = () =\u003E Task.FromResult\u003Cstring?\u003E(accessToken);\r\n    o.HttpMessageHandlerFactory = _ =\u003E testServer.CreateHandler();\r\n})\r\n\u0060\u0060\u0060",
        "createdAt": "2023-10-04T17:55:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-1747380965"
      },
      {
        "id": "IC_kwDOAQzde86CFD3L",
        "parentId": null,
        "author": "DomenPigeon",
        "content": "Is there are new progress on this issue?\r\n\r\nAlso just wanted to point out that the \u0060StartAsync\u0060 method takes more than 4s to complete, which is really long to have all tests by default take 4s. I have tested it without the \u0060WebApplicationFactory\u0060 on localhost and it took like 100ms.\r\n\r\n\u0060\u0060\u0060csharp\r\nvar retryPolicy = new RetryPolicy();\r\nvar hubConnection = new HubConnectionBuilder()\r\n    .WithUrl(\u0022http://localhost/hubPath\u0022, opt =\u003E opt.HttpMessageHandlerFactory = HttpMessageHandlerFactory)\r\n    .Build();\r\n\r\nawait hubConnection.StartAsync();\r\n\u0060\u0060\u0060",
        "createdAt": "2024-06-21T09:20:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-2182364619"
      },
      {
        "id": "IC_kwDOAQzde86NilSr",
        "parentId": null,
        "author": "anhellwig",
        "content": "\u003E var url = $\u0022{context.Uri}?access_token={accessToken}\u0022;\r\n\r\nI know this an old topic, but maybe somebody will find it helpful anyway:\r\n\u0060context.Uri\u0060 already contains a query string, so you need to use an ampersand to add another parameter, like this:\r\n\u0060var url = $\u0022{context.Uri}\u0026access_token={accessToken}\u0022;\u0060",
        "createdAt": "2024-09-25T17:01:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/11888#issuecomment-2374653099"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0NjYwMjY4NzU=",
    "title": "Publish Maven Artifacts to Azure Artifacts on each build",
    "url": "https://github.com/dotnet/aspnetcore/issues/12025",
    "createdAt": "2019-07-09T23:25:29Z",
    "lastUpdated": "2020-11-11T23:27:23Z",
    "body": "We should publish our SignalR Java Client artifacts to an Azure Artifacts feed on each build. It would make testing a lot easier.\r\n\r\ncc @mikaelm12 ",
    "upvotes": 0,
    "labels": [
      "task",
      "area-signalr",
      "severity-minor",
      "affected-very-few"
    ],
    "comments": []
  },
  {
    "id": "MDU6SXNzdWU0NjYxNjY1MDI=",
    "title": "SignalR QUIC",
    "url": "https://github.com/dotnet/aspnetcore/issues/12040",
    "createdAt": "2019-07-10T08:15:18Z",
    "lastUpdated": "2021-11-28T19:50:08Z",
    "body": "Is it expected to have SignalR running on top of QUIC? \r\n\r\nFrom here it seems to be possible:\r\n\u003Cblockquote class=\u0022twitter-tweet\u0022 data-lang=\u0022en\u0022\u003E\u003Cp lang=\u0022en\u0022 dir=\u0022ltr\u0022\u003ESo SignalR is built against this and has no idea what the underlying trsnpsort is, it just parses it\u2019s protocol over the \u201Ctransport\u201D. So IPC becomes interesting, SignalR over named pipes? Easy, tcp easy, QUIC (hopefully easy).\u003C/p\u003E\u0026mdash; David Fowler (@davidfowl) \u003Ca href=\u0022https://twitter.com/davidfowl/status/979556952698101760?ref_src=twsrc%5Etfw\u0022\u003EMarch 30, 2018\u003C/a\u003E\u003C/blockquote\u003E\r\n\r\nAre there any plans on that?\r\n\r\n",
    "upvotes": 9,
    "labels": [
      "enhancement",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxMTA4ODM4OQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Not yet, we\u0027re doing experiments but it\u0027s way too early to promise anything.",
        "createdAt": "2019-07-13T04:48:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12040#issuecomment-511088389"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgyNTQ5MzQ4OQ==",
        "parentId": null,
        "author": "campersau",
        "content": "For HTTP/3 there is also a [\u0060WebTransport\u0060](https://w3c.github.io/webtransport/) under development which could potentially be used as a transport by SignalR which would then also work in the browser.\r\nhttps://web.dev/webtransport/\r\n",
        "createdAt": "2021-04-23T08:29:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12040#issuecomment-825493489"
      },
      {
        "id": "IC_kwDOAQzde8425uE-",
        "parentId": null,
        "author": "wegylexy",
        "content": "Can\u0027t wait. I just implemented a way to use any \u0060IDuplexPipe\u0060 or \u0060Stream\u0060 (e.g. QuicStream in preview for .NET 7.0) as the underlying transport.\r\nSee [FlyByWireless.SignalRTunnel](https://www.nuget.org/packages/FlyByWireless.SignalRTunnel) and [FlyByWireless.SignalRTunnel.Client](https://www.nuget.org/packages/FlyByWireless.SignalRTunnel.Client).\r\nOnce you\u0027ve got a bidirectional stream set up, forward it to the hub connection handler on the server and the hub connection builder in the client. If you use multiple QUIC streams for other purposes, feel free to send custom data and consume all of them before handing it over to my extensions.\r\n\r\nFor \u0060WebTransport\u0060, I hope it would work similarly, that I could have multiple data channels and pass just one over to SignalR.",
        "createdAt": "2021-09-16T17:39:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12040#issuecomment-921100606"
      },
      {
        "id": "IC_kwDOAQzde846evTn",
        "parentId": null,
        "author": "yahorsi",
        "content": "No once QUIC experimental implementation is out, are there any samples how it can be used with SignalR, interested in trying SignalR streaming with QUIC",
        "createdAt": "2021-11-28T19:15:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12040#issuecomment-981136615"
      },
      {
        "id": "IC_kwDOAQzde846ewZx",
        "parentId": null,
        "author": "wegylexy",
        "content": "In my case, I use QUIC datagrams to synchronize real-time game states and QUIC streams for occasional data, all multiplexed over one single connection per native game client. There are also web clients that can only use WebSockets to interact with those occasional data. Using the same SignalR APIs enables more code reuse across the full native game client, the server, auxiliary web clients, and third-party extensions in my case.",
        "createdAt": "2021-11-28T19:49:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12040#issuecomment-981141105"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0NjcxMjMxMDc=",
    "title": "Using SignalR core with Unity and IL2CPP (AOT)",
    "url": "https://github.com/dotnet/aspnetcore/issues/12102",
    "createdAt": "2019-07-11T21:47:46Z",
    "lastUpdated": "2023-11-21T12:23:30Z",
    "body": "I am having a similar issue as #10080. I am using preview 6 of asp.net core SignalR client inside of unity and compiling with IL2CPP.  [I created a small git repo with the code I use to reproduce this issue](https://github.com/thorgeirk11/SignalR-IL2CPP-failure-example ) \r\n\r\n\r\nI am running into an exception when starting the connection:\r\n\r\n\u0060\u0060\u0060cs\r\nconnection = new HubConnectionBuilder()\r\n   .WithUrl(\u0022http://localhost:5000/gamehub\u0022)\r\n   .Build(); // works fine\r\n\r\nawait connection.StartAsync(); // takes a few sec before failing\r\n\u0060\u0060\u0060\r\nThe \u0060connection.StartAsync\u0060 fails with the following exception:\r\n\u0060\u0060\u0060 \r\nInvalidDataException: Missing required property \u0027connectionId\u0027.\r\n  at Microsoft.AspNetCore.Http.Connections.NegotiateProtocol.ParseResponse (System.ReadOnlySpan\u00601[T] content)\r\n\u0060\u0060\u0060\r\n\r\nUnity\u0027s IL2CPP strips unused assemblies. It caused another issue but I fixed that by adding [link.xml file](https://github.com/thorgeirk11/SignalR-IL2CPP-failure-example/blob/master/Unity%202018.4%20Client/Assets/link.xml). So the issue described here should not be affected by code stripping. \r\n\r\nHere are the [server](https://github.com/thorgeirk11/SignalR-IL2CPP-failure-example/blob/master/server_output.log) and [client](https://github.com/thorgeirk11/SignalR-IL2CPP-failure-example/blob/master/client_output.log) traces.\r\n",
    "upvotes": 1,
    "labels": [
      "investigate",
      "enhancement",
      "area-signalr",
      "affected-few",
      "severity-major"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxMTAzMzAxNA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "I don\u0027t currently have unity on any of my work machines, but I might try this out on a personal machine to see if I can figure anything out.\r\n\r\nMeanwhile, is it possible for you to grab the network trace so we can verify what payload the client is receiving from the server?",
        "createdAt": "2019-07-12T21:04:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-511033014"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxMTIxNTc1MQ==",
        "parentId": null,
        "author": "thorgeirk11",
        "content": "@BrennanConroy I am not sure how to take a network trace. I set both of my server and client to verbose debug logging. The logs are included in the git repo above ([server](https://github.com/thorgeirk11/SignalR-IL2CPP-failure-example/blob/master/server_output.log) and [client](https://github.com/thorgeirk11/SignalR-IL2CPP-failure-example/blob/master/client_output.log))\r\n\r\nIf I can provide better traces please let me know how :) \r\n\r\nAlso of note, when I build with the mono runtime the handshake succeeds. I would guess this is a client side error instead of server side.\r\n\r\nThanks for the help!",
        "createdAt": "2019-07-14T16:16:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-511215751"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxMTQ5NTM0MQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "@thorgeirk11 We have some guidance on network traces here: https://docs.microsoft.com/en-us/aspnet/core/signalr/diagnostics?view=aspnetcore-2.2\r\n\r\n\u003E InvalidDataException: Missing required property \u0027connectionId\u0027.\r\n\r\nThis indicates that the response from the server is incorrect (missing a required property). Can you provide a sample response from the \u0060localhost:5000/gamehub/negotiate\u0060 endpoint (you can just use a browser to do this).",
        "createdAt": "2019-07-15T17:29:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-511495341"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxMjUyODE0NQ==",
        "parentId": null,
        "author": "thorgeirk11",
        "content": "Unity apparently doesn\u0027t play well with fiddler so after testing out different tools I managed to get a network trace through WireShark. See [NetworkTraces.zip](https://github.com/aspnet/AspNetCore/files/3403389/NetworkTraces.zip)\r\n\r\nAs far as I can see both the IL2CPP and Mono receive the same response. \r\n\r\nRequest:\r\n\u0060\u0060\u0060\r\nPOST /gamehub/negotiate HTTP/1.1\r\nUser-Agent: Microsoft.AspNetCore.Http.Connections.Client/3.0.0-preview6.19307.2\r\nX-Requested-With: XMLHttpRequest\r\nContent-Length: 0\r\nConnection: keep-alive\r\nHost: signalr-il2cpp-test.azurewebsites.net\r\n\u0060\u0060\u0060\r\nResponse:\r\n\u0060\u0060\u0060\r\nHTTP/1.1 200 OK\r\nContent-Length: 252\r\nContent-Type: application/json\r\nServer: Microsoft-IIS/10.0\r\nX-Powered-By: ASP.NET\r\nSet-Cookie: ARRAffinity=cfe9d88b4d05c4f99a90649b783196ca671405478765ab764374675d71877225;Path=/;HttpOnly;Domain=signalr-il2cpp-test.azurewebsites.net\r\nDate: Wed, 17 Jul 2019 18:40:52 GMT\r\n\r\n{\u0022connectionId\u0022:\u00225wLJLrzOr3q7VfCRrGx-7w\u0022,\u0022availableTransports\u0022:[{\u0022transport\u0022:\u0022WebSockets\u0022,\u0022transferFormats\u0022:[\u0022Text\u0022,\u0022Binary\u0022]},{\u0022transport\u0022:\u0022ServerSentEvents\u0022,\u0022transferFormats\u0022:[\u0022Text\u0022]},{\u0022transport\u0022:\u0022LongPolling\u0022,\u0022transferFormats\u0022:[\u0022Text\u0022,\u0022Binary\u0022]}]}\r\n\u0060\u0060\u0060\r\n\r\nCan you investigate if the deserialization mechanism is AOT (IL2CPP) compatible?\r\nUnity has wide adoption of IL2CPP and on some platform that is the only scripting runtime available, such as iOS and WebGL. \r\n\r\nPlease let me know if I can provide more info, check out the [git repo](https://github.com/thorgeirk11/SignalR-IL2CPP-failure-example) for my simple project that reproduces this error.\r\n\r\n",
        "createdAt": "2019-07-17T19:07:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-512528145"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxMjU0NjgzMw==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "I haven\u0027t gotten the chance to try out the repo project yet (thanks for that btw!).\r\n\r\nI did take a glance at the project though, and how does it know what version of the client to download and use?\r\n\r\nAlso, could you try to replace the json protocol to use Newtonsoft and see if it works with that?\r\n\r\n[Here](https://docs.microsoft.com/en-us/aspnet/core/migration/22-to-30?view=aspnetcore-2.2\u0026tabs=visual-studio#switch-to-newtonsoftjson) are the steps to switch to newtonsoft, note you need to add another package (for the link.xml file).",
        "createdAt": "2019-07-17T20:01:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-512546833"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyNTM4OTYwNQ==",
        "parentId": null,
        "author": "crevelop",
        "content": "@thorgeirk11 any update/success connecting from IL2CPP Unity client?\r\n\r\nSort of having the same issue ages ago and decided to use a plugin from the AssetStore by then.\r\n\r\nBut really looking fwd to using asp.net core SignalR client straight into Unity instead.",
        "createdAt": "2019-08-27T16:54:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-525389605"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyNjI0ODA0Ng==",
        "parentId": null,
        "author": "aL3891",
        "content": "We would also really like to use the official signalR client in unity",
        "createdAt": "2019-08-29T15:50:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-526248046"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyNjc4ODY4Mg==",
        "parentId": null,
        "author": "thorgeirk11",
        "content": "@crevelop Nope not yet, I guess the problem would be solved by switching out the serializer for an AOT friendly implementation.  I have not spent much time on it. The game I am working on is on standalone and currently using Mono. However, in the coming months, I would like the option to switch to IL2CPP to export to WebGL.",
        "createdAt": "2019-08-31T01:28:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-526788682"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyOTM4MjgxMg==",
        "parentId": null,
        "author": "parkycai",
        "content": "You may need to use Linker.xml to avoid field stripping",
        "createdAt": "2019-09-09T09:30:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-529382812"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyOTM5NDIwOA==",
        "parentId": null,
        "author": "thorgeirk11",
        "content": "Check out my repo. [I induded a Linker.xml for all of the SignalR binaries.\r\n](https://github.com/thorgeirk11/SignalR-IL2CPP-failure-example/blob/master/Unity%202018.4%20Client/Assets/link.xml)\r\n\r\n",
        "createdAt": "2019-09-09T09:58:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-529394208"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU1NDI1NzM0NA==",
        "parentId": null,
        "author": "samoteph",
        "content": "Hello @thorgeirk11 ! Is the SignalR core running with Unity finally ? I would like to integrate it on Hololens but at this time I\u0027ve not found any documentation to do this. You are my last hope :)",
        "createdAt": "2019-11-15T08:09:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-554257344"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU1NDU5NjgxMg==",
        "parentId": null,
        "author": "thorgeirk11",
        "content": "@samoteph It works out of the box for any platform that does not require IL2CPP.  \r\nHowever, it appears that MessagePack supports [IL2CPP platforms](https://github.com/neuecc/MessagePack-CSharp#unity). I will have to test it out for myself, but it looks promising.",
        "createdAt": "2019-11-16T02:48:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-554596812"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NTU5MzEzNg==",
        "parentId": null,
        "author": "neal2018",
        "content": "We also encounter this problem : ( \r\nHope that it will get fixed.",
        "createdAt": "2020-01-17T11:40:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-575593136"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU5MTEyODc2OA==",
        "parentId": null,
        "author": "jhofer",
        "content": "\u003E @samoteph It works out of the box for any platform that does not require IL2CPP.\r\n\u003E However, it appears that MessagePack supports [IL2CPP platforms](https://github.com/neuecc/MessagePack-CSharp#unity). I will have to test it out for myself, but it looks promising.\r\n\r\nDid you have any luck with messagepack?",
        "createdAt": "2020-02-25T23:18:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-591128768"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU5MTM2NDI2MQ==",
        "parentId": null,
        "author": "samoteph",
        "content": "Finally, I rewrote my own sharing service with WebSocket as a communication channel",
        "createdAt": "2020-02-26T10:51:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-591364261"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwMTUwMTE5MA==",
        "parentId": null,
        "author": "samuelgoldenbaum",
        "content": "Anyone get messagepack working? I added an entry to my link.xml file to the Microsoft.AspNetCore.SignalR.Protocols.MessagePack.dll, but I get missing constructor error. ",
        "createdAt": "2020-03-20T02:35:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-601501190"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwMTcxNjU0Mw==",
        "parentId": null,
        "author": "thorgeirk11",
        "content": "Yeah, we are currently using Messagepack successfully ",
        "createdAt": "2020-03-20T14:02:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-601716543"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwMTc2NTg0NA==",
        "parentId": null,
        "author": "samuelgoldenbaum",
        "content": "\u003E Yeah, we are currently using Messagepack successfully\r\n\r\n@thorgeirk11 great to hear - to confirm: are you using it with IL2CPP (iOS)? \r\n\r\nAfter downloading v3.1.2, I have extracted the netstandard2.0 \u0060Microsoft.AspNetCore.SignalR.Protocols.MessagePack.dll\u0060 \r\n\r\nI then added an additional entry in my \u0060link.xml\u0060 file as follows:\r\n\u0060\u0060\u0060\u003Cassembly fullname=\u0022Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocol\u0022 preserve=\u0022all\u0022/\u003E\u0060\u0060\u0060\r\n\r\nYet when I run it on a device, I get the following error:\r\n\r\n\u0060\u0060\u0060\r\nInvalidOperationException: A suitable constructor for type \u0027Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocol\u0027 could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ResultCache lifetime, System.Type serviceType, System.Type implementationType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n\u0060\u0060\u0060\r\n\r\nCould you list the steps you guys are taking to get it working in your project?\r\n\r\nMy link.xml file:\r\n\r\n\u0060\u0060\u0060\r\n\u003Clinker\u003E\r\n\t\u003Cassembly fullname=\u0022System.Core\u0022\u003E\r\n\t\t\u003Ctype fullname=\u0022System.Linq.Expressions.Interpreter.LightLambda\u0022 preserve=\u0022all\u0022 /\u003E\r\n\t\u003C/assembly\u003E\r\n\t\u003Cassembly fullname=\u0022MessagePack\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.AspNetCore.Connections.Abstractions\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.AspNetCore.Http.Features\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.AspNetCore.SignalR.Common\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocol\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.Extensions.DependencyInjection.Abstractions\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.Extensions.Options\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.Extensions.Primitives\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022System.Buffers\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022System.IO.Pipelines\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022System.Memory\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022System.Numerics.Vectors\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022System.Runtime.CompilerServices.Unsafe\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022System.Threading.Tasks.Extensions\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.AspNetCore.Http.Connections.Client\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.AspNetCore.Http.Connections.Common\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.AspNetCore.SignalR.Client.Core\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.AspNetCore.SignalR.Client\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.AspNetCore.SignalR.Protocols.Json\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.Extensions.Configuration.Abstractions\u0022 preserve=\u0022all\u0022/\u003E \r\n\t\u003Cassembly fullname=\u0022Microsoft.Extensions.Configuration.Binder\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.Extensions.Configuration\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.Extensions.DependencyInjection\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.Extensions.Logging.Abstractions\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.Extensions.Logging\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022System.ComponentModel.Annotations\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022System.Text.Json\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022System.Threading.Channels\u0022 preserve=\u0022all\u0022/\u003E\r\n\t\u003Cassembly fullname=\u0022Microsoft.AspNetCore.SignalR.Protocols.NewtonsoftJson\u0022 preserve=\u0022all\u0022/\u003E\r\n\u003C/linker\u003E\r\n\u0060\u0060\u0060",
        "createdAt": "2020-03-20T15:41:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-601765844"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwMTc2OTU4Mw==",
        "parentId": null,
        "author": "thorgeirk11",
        "content": "Ah I have yet to Port my project over to IL2CPP however I assume to get that working you would have to pre-compile a message pack parser.\r\n\r\n",
        "createdAt": "2020-03-20T15:48:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-601769583"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwMTc3MDcwNA==",
        "parentId": null,
        "author": "samuelgoldenbaum",
        "content": "\u003E Ah I have yet to Port my project over to IL2CPP however I assume to get that working you would have to pre-compile a message pack parser.\r\n\r\nWorks fine under mono - but iOS now only allows IL2CPP which is the stumbling block.\r\n\r\nCould you advise on process to \u0060pre-compile a message pack parser.\u0060",
        "createdAt": "2020-03-20T15:50:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-601770704"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwMTc3MDg1NQ==",
        "parentId": null,
        "author": "thorgeirk11",
        "content": "Take a look at https://github.com/neuecc/MessagePack-CSharp#aot",
        "createdAt": "2020-03-20T15:50:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-601770855"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwMTkwNzM3Nw==",
        "parentId": null,
        "author": "samuelgoldenbaum",
        "content": "\u003E Take a look at https://github.com/neuecc/MessagePack-CSharp#aot\r\n\r\nThanks, been trying to get this running but no luck. Let me know if you get it working with IL2CPP.",
        "createdAt": "2020-03-20T20:56:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-601907377"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY1MzkzMzQ0Mg==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Has anyone gotten this to work?",
        "createdAt": "2020-07-05T20:10:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-653933442"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY1MzkzMzc3MQ==",
        "parentId": null,
        "author": "samuelgoldenbaum",
        "content": "\u003E Has anyone gotten this to work?\r\n\r\nYes, but not with messagepack on IL2CPP. ",
        "createdAt": "2020-07-05T20:14:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-653933771"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY1Mzk0MTU4OQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@samuelgoldenbaum what\u2019s your environment?",
        "createdAt": "2020-07-05T21:30:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-653941589"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY1Mzk1NDMzMg==",
        "parentId": null,
        "author": "thorgeirk11",
        "content": "I am currently in the process of porting my project over to use a precompiled message pack formatter and IL2CPP \n\n[I encountered this issue](https://github.com/dotnet/aspnetcore/issues/10080#issuecomment-651742380) but have yet to see if the solution pointed out works.\n",
        "createdAt": "2020-07-05T23:43:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-653954332"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY1NDM3MzE5Mg==",
        "parentId": null,
        "author": "thorgeirk11",
        "content": "Just for reference, [I just created an issue on the MessagePack Repo.](https://github.com/neuecc/MessagePack-CSharp/issues/973) \r\n- Messagepack supports IL2CPP in Unity by including the raw source into the unity project.\r\n- Microsoft.AspNetCore.SignalR.Protocols.MessagePack has a reference to the MessagePack.dll\r\n\r\nMessagePack.dll is not supported in IL2CPP and the two solutions don\u0027t work well together. \r\n\r\n@davidfowl \u2B06\uFE0F Don\u0027t know who should take lead on fixing this because of the interplay between SignalR and Messagepack :shrug:",
        "createdAt": "2020-07-06T17:37:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-654373192"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2MTAzMzM5MA==",
        "parentId": null,
        "author": "lwuLok",
        "content": "Hey. \r\nAre there any updates regarding this issue?\r\nI would like to use unity as a frontend for a UWP AR application. However using AspNetCore.SignalR somehow only works in the Unity editor, but not the UWP build.\r\nFunny thing, while I use  a similiar approach as @thorgeirk11 in his original statement, I do not receive any exception at all.",
        "createdAt": "2020-07-20T13:17:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-661033390"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2NDY0MDQ2Mg==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-07-27T21:10:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-664640462"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY3NjU5NzgzNw==",
        "parentId": null,
        "author": "breynolds",
        "content": "Whenever there\u0027s an update on this, we\u0027d be happy to help test. Have a decent size environment with 10K concurrent users 1M daily that has worked well with SignalR for realtime info on the web. Would like to use same backend within Unity on iOS/Android. ",
        "createdAt": "2020-08-19T18:47:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-676597837"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY5MTMyNzE4OQ==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-09-11T21:49:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-691327189"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY5MTUyNzA0Ng==",
        "parentId": null,
        "author": "seriouz",
        "content": "Any news on this? My comp would like to use SignalR Core with Unity, too.\r\nEdit: I saw that https://github.com/neuecc/MessagePack-CSharp/issues/973 was fixed. So does this work now?",
        "createdAt": "2020-09-12T18:23:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-691527046"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY5MjE2MDg4NQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "We haven\u0027t done any testing on Unity. If you would like to help us out by testing with those changes, that would be great.",
        "createdAt": "2020-09-14T16:14:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-692160885"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcxMzE5Mzc3Mg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Brain dump:\r\n\r\nIL2CPP:\r\n* Doesn\u0027t support value types with \u0060System.Linq.Expressions\u0060 https://forum.unity.com/threads/are-c-expression-trees-or-ilgenerator-allowed-on-ios.489498/#post-3667969\r\n* link.xml is needed to avoid over trimming\r\n\r\nMessagePack:\r\n* ~~MessagePack non-generics doesn\u0027t seem to work even though the issue is closed https://github.com/neuecc/MessagePack-CSharp/issues/869~~ MessagePack non-generics don\u0027t work because we use \u0060ref MessagePackWriter\u0060 which isn\u0027t supported in IL2CPP\r\n* MessagePack has a unity plugin, when used it adds the source code to your unity project, which conflicts with SignalR-MessagePack referencing the library from NuGet\r\n* MessagePack also has unity specific compile switch, likely why it uses source build with the unity plugin, but if you want to just reference a dll you need to build it manually and copy the dll to your project\r\n\r\nSystem.Text.Json:\r\n* Tried strings/floats/small custom object with IL2CPP and it works\r\n\r\nGeneral:\r\n* NuGet \u002B Unity isn\u0027t really a great experience https://medium.com/@jonfoust/using-gcp-nuget-packages-with-unity-8dbd29c42cc4\r\n  * I opened the assembly-csharp project in VS, added NuGet references, then copied out the netstandard2.0 dlls to the Assets/Plugins folder manually, then deleted the Packages folder",
        "createdAt": "2020-10-20T23:19:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-713193772"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcxMzUxMzcwNA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "cc @jkotas for awareness (AOT stuff)",
        "createdAt": "2020-10-21T11:51:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-713513704"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcxNDE3MTQyNw==",
        "parentId": null,
        "author": "neuecc",
        "content": "You make it sound like there\u0027s a problem with MessagePack, but it\u0027s hard to run a library that doesn\u0027t consider to Unity.\r\nMy [MagicOnion](https://github.com/Cysharp/MagicOnion) has a complete AOT generator for Unity and providing a SignalR-like API.",
        "createdAt": "2020-10-22T01:54:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-714171427"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcxNDQ1OTgwNg==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@neuecc It wasn\u0027t meant to sound as if MessagePack is a problem, @BrennanConroy was just exploring the space and posting his findings. If we misrepresented MessagePack-CSharp in anyway please correct it so we can learn (this is a learning experience for us). \r\n\r\nTo your other point this is correct, we haven\u0027t historically been AOT friendly but that\u0027s one of the things we plan to work on going forward (as a strategy), which is why it\u0027s important to understand the current warts (which we have some basic idea of)",
        "createdAt": "2020-10-22T12:29:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-714459806"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcxNDQ5OTE1MQ==",
        "parentId": null,
        "author": "WalternativE",
        "content": "@davidfowl regarding my past experiences with using SignalR in Unity I\u0027d second the statement of @neuecc. It is really hard to use any .NET library, that wasn\u0027t meant to be used in Unity. Apart from not always playing super nice with IL2CPP the .NET SignalR client pulls in a quite sizable amount of ASP.NET Core dependencies. That works fine for anything that uses NuGet but it falls flat in Unity (afaik the Unity package manger has no NuGet interop). If it is the goal to write a Unity client for SignalR I\u0027d basically treat it as I would any non CLR language (like Java, JS, etc) and don\u0027t try to force the conventional client into an environment where it is setup for failure.",
        "createdAt": "2020-10-22T13:36:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-714499151"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczNjkyNzAxNA==",
        "parentId": null,
        "author": "jwittner",
        "content": "As a work around, while not free, [Best HTTP/2](https://assetstore.unity.com/packages/tools/network/best-http-2-155981#description) is a great package on the Unity Asset Store which supports SignalR Core out of the box. I\u0027m using it in a UWP/IL2CPP/HoloLens application to connect to an [Azure SignalR Service](https://azure.microsoft.com/en-us/services/signalr-service/) with great success.",
        "createdAt": "2020-12-02T01:27:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-736927014"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc1NzIxODMyNw==",
        "parentId": null,
        "author": "youtpout",
        "content": "Hello,\r\nfinally I can use SignalR on mobile with link.xml, but If i use enum in my model, the connection.On method in my client is never call, no problem on Unity editor.\r\nIf I replace enum by int it\u0027s work on both.",
        "createdAt": "2021-01-09T13:58:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-757218327"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc1OTEyMTU0MQ==",
        "parentId": null,
        "author": "jwittner",
        "content": "@youtpout - mind sharing more details about your working setup? E.g. the link.xml file, how you configured the dlls, etc. Would love to get this working for us too. =)",
        "createdAt": "2021-01-13T00:24:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-759121541"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc2MDM1NDg2Mg==",
        "parentId": null,
        "author": "youtpout",
        "content": "Exemple of project who works with enum in editor but not in IL2CPP mobile\r\nhttps://github.com/youtpout/SignalREnum\r\nhttps://github.com/youtpout/UnityEnum\r\n\r\n@jwittner see UnityEnum, you have plugins folder with all files who works for me ",
        "createdAt": "2021-01-14T17:45:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-760354862"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc4Mjk0MDY0OA==",
        "parentId": null,
        "author": "xabio",
        "content": "@youtpout how do you workaround the fact that s\u00EDgnalr only works with 11.0.0 version of newtonsoft.json?\nI am facing that issue.\nI try to use the one ported to unity ecosystem but without luck(it is based on 12.0.0)\nThanks",
        "createdAt": "2021-02-21T22:38:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-782940648"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc4Mjk0MTIzNA==",
        "parentId": null,
        "author": "youtpout",
        "content": "@xabio I use v12 without problem, see my project test plugins folder \r\nhttps://github.com/youtpout/UnityEnum/tree/master/Assets/Plugins",
        "createdAt": "2021-02-21T22:41:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-782941234"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc4Mjk0MjI0Nw==",
        "parentId": null,
        "author": "xabio",
        "content": "@youtpout  And how did you managed to do that? last version of signalr depends on netwonsoft 11.0.0 right?\nDid you managed to recompile it or how? Please your help is really important, I am really desesperated",
        "createdAt": "2021-02-21T22:47:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-782942247"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc4Mjk0MzYwOQ==",
        "parentId": null,
        "author": "youtpout",
        "content": "@xabio My bad, SignalR use textjson I think\r\nhttps://www.nuget.org/packages/Microsoft.AspNetCore.SignalR.Common/\r\nDependencies\r\n.NETStandard 2.0\r\nMicrosoft.AspNetCore.Connections.Abstractions (\u003E= 5.0.3)\r\nMicrosoft.Extensions.Options (\u003E= 5.0.0)\r\nSystem.Text.Json (\u003E= 5.0.1)\r\n\r\nI include Newtosoft because I use HttpClient for rest api call on my real project.",
        "createdAt": "2021-02-21T22:56:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-782943609"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxODgzNjY2OA==",
        "parentId": null,
        "author": "MGG2020",
        "content": "Has anyone solved the problem with IL2CPP and SignalR Core? ",
        "createdAt": "2021-04-13T15:40:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-818836668"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxOTQwNjY5MA==",
        "parentId": null,
        "author": "youtpout",
        "content": "\u003E Has anyone solved the problem with IL2CPP and SignalR Core?\r\n\r\nI can use SignalR Core with IL2CPP, the only problem for me is to use Messagepack...\r\n\r\nSee my project SignalREnum and UnityEnum",
        "createdAt": "2021-04-14T10:17:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-819406690"
      },
      {
        "id": "IC_kwDOAQzde840uCTN",
        "parentId": null,
        "author": "michalpypek",
        "content": "SignalR uses MessagePack in an unsupported way on Unity \u002B IL2CPP:\r\nit uses the nongeneric serialization method with signature: \r\n\u0060  public static void Serialize(Type type, ref MessagePackWriter writer, object obj, MessagePackSerializerOptions options = null)\u0060\r\nand the nongeneric deserialization method with signature:\r\n\u0060  public static object Deserialize(Type type, ref MessagePackReader reader, MessagePackSerializerOptions options = null)\u0060\r\n\r\nboth of which are unsupported when building with IL2CPP.\r\n\r\n1.See the lines on MessagePack\u0027s repository:\r\nhttps://github.com/neuecc/MessagePack-CSharp/blob/1551f9344c28e822f08f3a00971ddb26229e5910/src/MessagePack.UnityClient/Assets/Scripts/MessagePack/MessagePackSerializer.NonGeneric.cs#L247\r\n\r\nhttps://github.com/neuecc/MessagePack-CSharp/blob/1551f9344c28e822f08f3a00971ddb26229e5910/src/MessagePack.UnityClient/Assets/Scripts/MessagePack/MessagePackSerializer.NonGeneric.cs#L225\r\n\r\n2.Notice that the SignalR code is calling both of them: https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/common/Protocols.MessagePack/src/Protocol/DefaultMessagePackHubProtocolWorker.cs\r\n\r\n3.SignalR won\u0027t work with MessagePack built with IL2CPP\r\n\r\n\u0060\u0060\u0060\r\nNotSupportedException: MessagePackWriter/Reader overload is not supported in MessagePackSerializer.NonGenerics.\r\n  at MessagePack.MessagePackSerializer\u002BCompiledMethods.ThrowRefStructNotSupported () [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at MessagePack.MessagePackSerializer\u002BCompiledMethods\u002B\u003C\u003Ec.\u003C.ctor\u003Eb__13_4 (MessagePack.MessagePackWriter\u0026 x, System.Object y, MessagePack.MessagePackSerializerOptions z) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at MessagePack.MessagePackSerializer\u002BCompiledMethods\u002BMessagePackWriterSerialize.Invoke (MessagePack.MessagePackWriter\u0026 writer, System.Object value, MessagePack.MessagePackSerializerOptions options) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at MessagePack.MessagePackSerializer.Serialize (System.Type type, MessagePack.MessagePackWriter\u0026 writer, System.Object obj, MessagePack.MessagePackSerializerOptions options) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Protocol.DefaultMessagePackHubProtocolWorker.Serialize (MessagePack.MessagePackWriter\u0026 writer, System.Type type, System.Object value) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocolWorker.WriteArgument (System.Object argument, MessagePack.MessagePackWriter\u0026 writer) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocolWorker.WriteInvocationMessage (Microsoft.AspNetCore.SignalR.Protocol.InvocationMessage message, MessagePack.MessagePackWriter\u0026 writer) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocolWorker.WriteMessageCore (Microsoft.AspNetCore.SignalR.Protocol.HubMessage message, MessagePack.MessagePackWriter\u0026 writer) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocolWorker.WriteMessage (Microsoft.AspNetCore.SignalR.Protocol.HubMessage message, System.Buffers.IBufferWriter\u00601[T] output) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocol.WriteMessage (Microsoft.AspNetCore.SignalR.Protocol.HubMessage message, System.Buffers.IBufferWriter\u00601[T] output) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Client.HubConnection.SendHubMessage (Microsoft.AspNetCore.SignalR.Client.HubConnection\u002BConnectionState connectionState, Microsoft.AspNetCore.SignalR.Protocol.HubMessage hubMessage, System.Threading.CancellationToken cancellationToken) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine] (TStateMachine\u0026 stateMachine) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Client.HubConnection.SendHubMessage (Microsoft.AspNetCore.SignalR.Client.HubConnection\u002BConnectionState connectionState, Microsoft.AspNetCore.SignalR.Protocol.HubMessage hubMessage, System.Threading.CancellationToken cancellationToken) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Client.HubConnection.InvokeCore (Microsoft.AspNetCore.SignalR.Client.HubConnection\u002BConnectionState connectionState, System.String methodName, Microsoft.AspNetCore.SignalR.Client.Internal.InvocationRequest irq, System.Object[] args, System.String[] streams, System.Threading.CancellationToken cancellationToken) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine] (TStateMachine\u0026 stateMachine) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Client.HubConnection.InvokeCore (Microsoft.AspNetCore.SignalR.Client.HubConnection\u002BConnectionState connectionState, System.String methodName, Microsoft.AspNetCore.SignalR.Client.Internal.InvocationRequest irq, System.Object[] args, System.String[] streams, System.Threading.CancellationToken cancellationToken) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Client.HubConnection.InvokeCoreAsyncCore (System.String methodName, System.Type returnType, System.Object[] args, System.Threading.CancellationToken cancellationToken) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601[TResult].Start[TStateMachine] (TStateMachine\u0026 stateMachine) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Client.HubConnection.InvokeCoreAsyncCore (System.String methodName, System.Type returnType, System.Object[] args, System.Threading.CancellationToken cancellationToken) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Client.HubConnection.InvokeCoreAsync (System.String methodName, System.Type returnType, System.Object[] args, System.Threading.CancellationToken cancellationToken) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601[TResult].Start[TStateMachine] (TStateMachine\u0026 stateMachine) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Client.HubConnection.InvokeCoreAsync (System.String methodName, System.Type returnType, System.Object[] args, System.Threading.CancellationToken cancellationToken) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions.InvokeCoreAsync[TResult] (Microsoft.AspNetCore.SignalR.Client.HubConnection hubConnection, System.String methodName, System.Object[] args, System.Threading.CancellationToken cancellationToken) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at System.Runtime.CompilerServices.AsyncTaskMethodBuilder\u00601[TResult].Start[TStateMachine] (TStateMachine\u0026 stateMachine) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions.InvokeCoreAsync[TResult] (Microsoft.AspNetCore.SignalR.Client.HubConnection hubConnection, System.String methodName, System.Object[] args, System.Threading.CancellationToken cancellationToken) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n  at Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions.InvokeAsync[TResult] (Microsoft.AspNetCore.SignalR.Client.HubConnection hubConnection, System.String methodName, System.Object arg1, System.Threading.CancellationToken cancellationToken) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n \r\n\u0060\u0060\u0060",
        "createdAt": "2021-07-21T20:37:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-884483277"
      },
      {
        "id": "IC_kwDOAQzde840uf7i",
        "parentId": null,
        "author": "thorgeirk11",
        "content": "@BrennanConroy @davidfowl this issue is still causing problems. @michalpypek has digged into the cause of the problem. \n\nCan you please take a look at this issue before .net 6 arrives. Our game is using SignalR and MessagePack to great effect and this issue is preventing us form using this stack for an IL2CPP mobile game.",
        "createdAt": "2021-07-22T01:45:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-884604642"
      },
      {
        "id": "IC_kwDOAQzde840ugVK",
        "parentId": null,
        "author": "davidfowl",
        "content": "We never attempted to make unity work with the default SignalR client, especially not with IL2CPP. It\u0027s not on the list for .NET 6 and we\u0027re near the end. Unless it\u0027s a trivial fix, this won\u0027t be something that we work on for the upcoming release.",
        "createdAt": "2021-07-22T01:51:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-884606282"
      },
      {
        "id": "IC_kwDOAQzde840u9GB",
        "parentId": null,
        "author": "youtpout",
        "content": "Finally I buy a plugin on asset store for call SignalR with Messagepack on IL2CPP.\r\nBut you can use SignalR with Json without problem on IL2CPP.",
        "createdAt": "2021-07-22T07:58:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-884724097"
      },
      {
        "id": "IC_kwDOAQzde840vTq7",
        "parentId": null,
        "author": "thorgeirk11",
        "content": "@davidfowl we would highly appreciate you giving it a chance. \n@neuecc would you be willing to give them a hand? \n\nThis issue doesn\u0027t sound as a major effort. The heavy lifting has already been done the MessagePack Generator. Can you have someone investigate if this could be fixed in the coming release?",
        "createdAt": "2021-07-22T10:42:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-884816571"
      },
      {
        "id": "IC_kwDOAQzde840wI7K",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "If there is a trivial fix, then someone could try it out by copying the [MessagePackHubProtocol](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/common/Protocols.MessagePack/src/Protocol/MessagePackHubProtocol.cs) and [worker](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/common/Protocols.MessagePack/src/Protocol/MessagePackHubProtocolWorker.cs), modify it with the fix, then try it out on the client.\r\n\r\n\u0060\u0060\u0060c#\r\nclass MyCustomHubProtocol : IHubProtocol\r\n{\r\n    // modified from MessagePackHubProtocol\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060c#\r\nhubConnectionBuilder.Services.TryAddEnumerable(ServiceDescriptor.Singleton\u003CIHubProtocol, MyCustomHubProtocol\u003E());\r\n\u0060\u0060\u0060\r\n\r\nWe don\u0027t have any cycles during the last leg of .NET 6 to work on this.",
        "createdAt": "2021-07-22T16:08:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-885034698"
      },
      {
        "id": "IC_kwDOAQzde840wkez",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-22T18:42:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-885147571"
      },
      {
        "id": "IC_kwDOAQzde8404GWE",
        "parentId": null,
        "author": "TCROC",
        "content": "We are also experiencing this issue as we try to build to Android in Unity IL2CPP",
        "createdAt": "2021-07-27T00:33:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-887121284"
      },
      {
        "id": "IC_kwDOAQzde843qHBW",
        "parentId": null,
        "author": "wegylexy",
        "content": "MessagePack hub protocol also fails for .NET 7 NativeAOT.\r\nHere I replaced the transport with named pipe which is covered by my xunit test. [wegylexy/SignalRTunnel/.../src/Native/Native.cs#L100-L109](https://github.com/wegylexy/SignalRTunnel/blob/db82ad55e67a3582df0ebecf37d587fc35c30ec0/src/Native/Native.cs#L100-L109)\r\nAll managed test cases pass, and the native wrapper can start and stop the hub connection successfully. I haven\u0027t implemented invoke/send yet, but on fails. The event handler is never called back.\r\n\r\nI guess the problem lies around here: [dotnet/aspnetcore/.../src/Protocol/MessagePackHubProtocol.cs#L80-L113](https://github.com/dotnet/aspnetcore/blob/5d185c4d83ff70aeb5c691790c36e028b1c55b28/src/SignalR/common/Protocols.MessagePack/src/Protocol/MessagePackHubProtocol.cs#L80-L113)",
        "createdAt": "2021-10-04T19:24:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-933785686"
      },
      {
        "id": "IC_kwDOAQzde843t5yp",
        "parentId": null,
        "author": "wegylexy",
        "content": "I\u0027ve got \u0060On()\u0060 to work.\r\nHere I can copy raw bytes of encoded arguments to the \u0060On\u0060 handler: [wegylexy/SignalRTunnel/.../src/Native/Protocol.cs#L65](https://github.com/wegylexy/SignalRTunnel/blob/b4b39f88b73d31413dc342688af7fd5209c7b40e/src/Native/Protocol.cs#L65)\r\nThen here you can use your source-generated deserializers: [wegylexy/SignalRTunnel/.../src/Native/Connection.cs#L103](https://github.com/wegylexy/SignalRTunnel/blob/b4b39f88b73d31413dc342688af7fd5209c7b40e/src/Native/Connection.cs#L103)\r\nIn my case, I just pass it to native code and deserialize there with C\u002B\u002B macro-generated unpack functions. But I believe you can somehow invoke corresponding C# source-generated \u0060Deserialize\u003CT\u003E()\u0060 in managed code as well.\r\n\r\nNext, I\u0027ll work on \u0060InvokeCoreAsync()\u0060 and \u0060SendCoreAsync()\u0060.",
        "createdAt": "2021-10-05T20:27:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-934780073"
      },
      {
        "id": "IC_kwDOAQzde8433oqB",
        "parentId": null,
        "author": "wegylexy",
        "content": "After implementing native invoke and send, another issue appears: #37340",
        "createdAt": "2021-10-06T23:53:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-937331329"
      },
      {
        "id": "IC_kwDOAQzde843-DzL",
        "parentId": null,
        "author": "wegylexy",
        "content": "Boilerplate for quick fix:\r\n- Read [wegylexy/SignalRTunnel/.../src/Native/Protocol.cs#L76](https://github.com/wegylexy/SignalRTunnel/blob/1710f702da535d547ea4addce46640ab0df27b81/src/Native/Protocol.cs#L76)\r\n- Write [wegylexy/SignalRTunnel/.../src/Native/Protocol.cs#L190](https://github.com/wegylexy/SignalRTunnel/blob/1710f702da535d547ea4addce46640ab0df27b81/src/Native/Protocol.cs#L190)\r\n\r\n\u0060switch\u0060 every custom type used in your project and invoke the generic variant with source generation.",
        "createdAt": "2021-10-08T18:11:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-939015371"
      },
      {
        "id": "IC_kwDOAQzde844QtVv",
        "parentId": null,
        "author": "wegylexy",
        "content": "Check out [FlyByWireless.SignalRTunnel.Client.Native](https://www.nuget.org/packages/FlyByWireless.SignalRTunnel.Client.Native/1.3.2-alpha) and [wegylexy/SignalRTunnel/tree/native#nativeaot-usage](https://github.com/wegylexy/SignalRTunnel/tree/native#nativeaot-usage).\r\n\r\nBuilt-in types would work out-of-the-box.\r\nFor custom types, you will need to configure your generated serializers.",
        "createdAt": "2021-10-15T01:25:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-943904111"
      },
      {
        "id": "IC_kwDOAQzde85btWiI",
        "parentId": null,
        "author": "Lailore",
        "content": "Any update? MessagePack still not work on il2cpp ",
        "createdAt": "2023-05-08T15:45:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-1538615432"
      },
      {
        "id": "IC_kwDOAQzde85btY35",
        "parentId": null,
        "author": "xabio",
        "content": "No update from my side\n\nEl El lun, 8 may 2023 a las 17:45, Lailore ***@***.***\u003E\nescribi\u00F3:\n\n\u003E Any update? MessagePack still not work on il2cpp\n\u003E\n\u003E \u2014\n\u003E Reply to this email directly, view it on GitHub\n\u003E \u003Chttps://github.com/dotnet/aspnetcore/issues/12102#issuecomment-1538615432\u003E,\n\u003E or unsubscribe\n\u003E \u003Chttps://github.com/notifications/unsubscribe-auth/ABMGSKOPZJ43AFYCWGMYKULXFEIJ7ANCNFSM4IBWGA4Q\u003E\n\u003E .\n\u003E You are receiving this because you were mentioned.Message ID:\n\u003E ***@***.***\u003E\n\u003E\n",
        "createdAt": "2023-05-08T15:49:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-1538625017"
      },
      {
        "id": "IC_kwDOAQzde85sh5Z_",
        "parentId": null,
        "author": "agacanergunritimus",
        "content": "for android : add this code to AndroidManifest.xml\r\n\r\n\u0060\u003Cuses-permission android:name=\u0022android.permission.INTERNET\u0022 /\u003E\u0060\r\n\r\nfor ios : add this code to Info.plist\r\n\u0060\u003Ckey\u003ENSAppTransportSecurity\u003C/key\u003E\r\n\u003Cdict\u003E\r\n    \u003Ckey\u003ENSAllowsArbitraryLoads\u003C/key\u003E\r\n    \u003Ctrue/\u003E\r\n\u003C/dict\u003E\r\n\u0060",
        "createdAt": "2023-11-21T12:23:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12102#issuecomment-1820825215"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0Njc2MjMyNjg=",
    "title": "Add intermediate HubConnection states in Java client",
    "url": "https://github.com/dotnet/aspnetcore/issues/12138",
    "createdAt": "2019-07-12T22:27:56Z",
    "lastUpdated": "2020-11-09T21:07:20Z",
    "body": "After looking at our locking and state transitions, we should add intermediate connection states \u0060Connecting\u0060 and \u0060Disconnecting\u0060. This is for better handling potential races between starting and stopping a connection.\r\nContext: https://github.com/aspnet/AspNetCore/pull/12078#issuecomment-511047445\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxMTE2NzExMA==",
        "parentId": null,
        "author": "mikaelm12",
        "content": "Putting in preview 8 since this should help protect against potential races in the client.",
        "createdAt": "2019-07-14T02:09:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12138#issuecomment-511167110"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxMTk5MjY5Mg==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Triage: We\u0027ll leave this in preview 8 but it\u0027s not a top priority. We have identified some races and knocked those down. Hardening this seems like a good 3.1 candidate.",
        "createdAt": "2019-07-16T21:22:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12138#issuecomment-511992692"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxNTU4NjYzMQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Moving to backlog for 3.1",
        "createdAt": "2019-07-26T20:19:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12138#issuecomment-515586631"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUzMjQxMDMxMg==",
        "parentId": null,
        "author": "analogrelay",
        "content": "If we find specific bugs because of this, those are good candidates for 3.1. But just adding the intermediate states is for 5.0",
        "createdAt": "2019-09-17T21:31:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12138#issuecomment-532410312"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0Njg4NjQzNDk=",
    "title": "Improve Unity \u0022coverage\u0022",
    "url": "https://github.com/dotnet/aspnetcore/issues/12255",
    "createdAt": "2019-07-16T21:07:08Z",
    "lastUpdated": "2020-11-11T23:30:06Z",
    "body": "We basically support Unity but need to look at how to get some coverage and workflows in place.\r\n\r\n1. Understanding and getting some domain knowledge\r\n1. Consider test coverage where possible (maybe a CTI scenario)\r\n1. Look at ways to verify IL2CPP and ahead-of-time compilation issues.",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "affected-few",
      "severity-major"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUxNjYwMTY5MQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Related to #12102 ",
        "createdAt": "2019-07-30T21:24:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12255#issuecomment-516601691"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2NDYzOTQxMQ==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-07-27T21:08:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/12255#issuecomment-664639411"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0NzkyMzM5ODk=",
    "title": "\u0060IUserIdProvider\u0060 peer Hub, and  [...]",
    "url": "https://github.com/dotnet/aspnetcore/issues/13021",
    "createdAt": "2019-08-10T06:29:04Z",
    "lastUpdated": "2023-08-25T02:01:13Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\nWhen app **not** use standard \u0060Authentication/Authorization\u0060  and there multiple type of account, the user info is from different cookies, there will be a problem to use the same type of \u0060IUserIdProvider\u0060 that across different Hub.\r\n\r\n### Questions\r\n\r\nI can not reset the connection\u0027s userId, and also can not filter all the connection by filter \u0060Context.Items\u0060, and also can not get userId from a  group , how do I do the following. For example:\r\n- A chat room , that use can from anonymous state to  login state, (is this user must disconnect and reconnect with login cookie)\r\n- how to seed particular message to partial users of room (room managers or VIPs)\r\n- show room users\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "task",
      "Docs",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few",
      "net8_docathon"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyMTI4NDczMg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003Eshow room users\r\n\r\nYou need to implement this logic yourself, one way is to store connected connections in a database and remove them when they disconnect.\r\n\r\n\u003Ehow to seed particular message to partial users of room (room managers or VIPs)\r\n\r\nYou can add \u0022VIPs\u0022 to a group and send to that group using \u0060Clients.Group(\u0022VIPGroup\u0022).SendAsync(...)\u0060\r\n\r\n\u003EA chat room , that use can from anonymous state to login state, (is this user must disconnect and reconnect with login cookie)\r\n\r\nI\u0027m not sure what you mean here, could you be more specific?",
        "createdAt": "2019-08-14T15:02:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13021#issuecomment-521284732"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyMTM1MTkxMA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "\u003E there will be a problem to use the same type of \u0060IUserIdProvider\u0060 that across different Hub.\r\n\r\nFrom this, it sounds like the problem you\u0027re having is that you need different \u0060IUserIdProvider\u0060 logic for each hub. Correct? You are correct that there\u0027s only one \u0060IUserIdProvider\u0060 for the entire app. There may be something on the \u0060HubConnectionContext\u0060 that\u0027s passed in you could use to identify the Hub associated with the connection and you could use that to change the logic you use to generate the User Identifier. I don\u0027t know of something off-hand but @BrennanConroy could take a look and see ;)",
        "createdAt": "2019-08-14T17:56:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13021#issuecomment-521351910"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyMTM2MDQzNw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Let\u0027s add some notes to our [docs on \u0060IUserIdProvider\u0060](https://docs.microsoft.com/en-us/aspnet/core/signalr/authn-and-authz?view=aspnetcore-2.2#use-claims-to-customize-identity-handling) to show how to identify the hub you\u0027re accessing.",
        "createdAt": "2019-08-14T18:20:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13021#issuecomment-521360437"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyMTM2MDcxNA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "We could also identify (file a new bug) changes that we could make to make it easier to find the hub type from the \u0060HubConnectionContext\u0060 (perhaps the Hub type can be a property)",
        "createdAt": "2019-08-14T18:21:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13021#issuecomment-521360714"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyMTQ4MDUzOA==",
        "parentId": null,
        "author": "John0King",
        "content": "@BrennanConroy \r\n\u003E I\u0027m not sure what you mean here, could you be more specific? \r\n\r\nI mean  send username and password via signalR,  verify and  change the connection\u0027s userId on server side.\r\n\r\n\u003E You need to implement this logic yourself, one way is to store connected connections in a database and remove them when they disconnect.\r\n\r\nif I only want temporary manage, I need to implement my own \u0060GroupManager\u0060 and store it in memory (or redis),  but  I think signalR already have one,  Will that be a problem if my coustom GroupManager store too much \u0060ConnectionId\u0060 ( I mean it duplicate from SignalR one , and allocate two copies of memory ).\r\n",
        "createdAt": "2019-08-15T01:31:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13021#issuecomment-521480538"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyMTgyNjY2Ng==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003EI mean send username and password via signalR, verify and change the connection\u0027s userId on server side.\r\n\r\nThere isn\u0027t currently a way to change the value of \u0060Context.UserIdentifier\u0060 after the connection has been established.\r\n\r\nGenerally a connection should be authenticated before connecting to SignalR. You could send the info via a Hub method and then change an internal identifier that you use.\r\n\r\n\u003EWill that be a problem if my coustom GroupManager store too much ConnectionId ( I mean it duplicate from SignalR one , and allocate two copies of memory ).\r\n\r\nYou\u0027ll have to measure for your scenario, it\u0027s basically a single dictionary entry internally so it\u0027s not very much memory per connection.",
        "createdAt": "2019-08-15T23:01:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13021#issuecomment-521826666"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg0OTUzMTk4OQ==",
        "parentId": null,
        "author": "John0King",
        "content": "does this can be done now ?\r\n\r\n1)  \u0060IUserIdProvider\u0060 peer Hub.\r\n2)  set/change   current \u0060UserId\u0060  inside Hub.",
        "createdAt": "2021-05-27T10:47:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13021#issuecomment-849531989"
      },
      {
        "id": "IC_kwDOAQzde842lDGt",
        "parentId": null,
        "author": "John0King",
        "content": "anything new ?",
        "createdAt": "2021-09-09T01:11:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13021#issuecomment-915681709"
      },
      {
        "id": "IC_kwDOAQzde848sN2a",
        "parentId": null,
        "author": "John0King",
        "content": "Consider add an property to \u0060HttpConnectionDispatcherOptions\u0060  in \r\n\r\n\u0060\u0060\u0060C#\r\napp.MapHub\u003CTHub\u003E(\u0022route\u0022, option=\u003E{\r\n    option.UserIdProvider = (IServiceProvider provider)=\u003E provider.GetService\u003CIMyCustomUserIdProvider\u003E;\r\n   ...\r\n})\r\n\u0060\u0060\u0060",
        "createdAt": "2022-01-21T06:38:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13021#issuecomment-1018224026"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0ODUwNjIyMjk=",
    "title": "SignalR Support taking over the generation of connection Id ",
    "url": "https://github.com/dotnet/aspnetcore/issues/13443",
    "createdAt": "2019-08-26T06:13:34Z",
    "lastUpdated": "2021-04-06T08:55:52Z",
    "body": "### Background\r\nFor Azure SignalR, we\u0027d like a more semantic connection id, so that some info can be carried through ConnectionId for Azure SignalR to make some decisions more efficiently. \r\n\r\n### Proposed solution\r\nProvide some way to hook the generation of connection id which is now private for \u0060HttpConnectionManager\u0060 https://github.com/aspnet/AspNetCore/blob/460f9b63e9db9f4a3a542fcdc4204e29ca90f123/src/SignalR/common/Http.Connections/src/Internal/HttpConnectionManager.cs#L83\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyNTEzNzk2NQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "cc @bradygaster @anurse We want to look at this for 3.1",
        "createdAt": "2019-08-27T05:00:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13443#issuecomment-525137965"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUzNjIwOTczNg==",
        "parentId": null,
        "author": "Kahbazi",
        "content": "@halter73 Can I do this task?\r\n\r\nI was thinking to add this interface\r\n\r\n\u0060\u0060\u0060\r\npublic interface IConnectionIdGenerator\r\n{\r\n    ValueTask\u003Cstring\u003E GenerateIdAsync(HttpContext HttpContext)\r\n}\r\n\u0060\u0060\u0060\r\n\r\nWhat do you think?",
        "createdAt": "2019-09-28T17:35:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13443#issuecomment-536209736"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUzNjIxMjA1MQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Does it really need to be asynchronous?",
        "createdAt": "2019-09-28T18:07:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13443#issuecomment-536212051"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUzNjIxNjY1Nw==",
        "parentId": null,
        "author": "Kahbazi",
        "content": "I cannot think of any good use case right now :confused:",
        "createdAt": "2019-09-28T18:56:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13443#issuecomment-536216657"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUzNjI2NzkzMQ==",
        "parentId": null,
        "author": "Kahbazi",
        "content": "@davidfowl Should I provide two separate methods for ConnectionId and ConnectionToken? https://github.com/aspnet/AspNetCore/blob/master/src/SignalR/common/Http.Connections/src/Internal/HttpConnectionManager.cs#L84-L92",
        "createdAt": "2019-09-29T08:18:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13443#issuecomment-536267931"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUzNzIzMzkxNQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "@davidfowl I think we need a little more context here, and I think you and @vicancy may have it. I\u0027ll start a discussion offline.",
        "createdAt": "2019-10-01T21:15:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13443#issuecomment-537233915"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0MDMxMzYyMQ==",
        "parentId": null,
        "author": "vicancy",
        "content": "Oops, noticed that it moved out from 3.1.0 \uD83D\uDE22 Is it possible to make the progress faster?",
        "createdAt": "2019-10-10T02:57:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13443#issuecomment-540313621"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0MDMxNzc2NA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "I\u2019ll discuss with @anurse tomorrow ",
        "createdAt": "2019-10-10T03:08:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13443#issuecomment-540317764"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0MDQzNzM3OQ==",
        "parentId": null,
        "author": "Kahbazi",
        "content": "@vicancy Do you also want to create your own \u0060ConnectionToken\u0060? Do you need the methods to be async or non-async?",
        "createdAt": "2019-10-10T07:37:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13443#issuecomment-540437379"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NTA2ODQ0Mg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Sorry @Kahbazi we\u0027re still figuring out what we want here.\r\n\r\nOnce we\u0027ve settled on what we want and if it\u0027s not critical to get it in ASAP we can see if you\u0027re still interested in contributing!",
        "createdAt": "2019-10-22T17:26:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13443#issuecomment-545068442"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwNTIwNDg3MQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Pre-triage notes: This also feels like it falls in the bucket of things we proposed for 5.0 but don\u0027t have capacity for now.",
        "createdAt": "2020-03-27T18:37:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13443#issuecomment-605204871"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwNTIwNjkyMA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@anurse Can we push it to a later preview? The cost is trivial and we can potentially get @vicancy to make the change.",
        "createdAt": "2020-03-27T18:42:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13443#issuecomment-605206920"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzk1MjkyMw==",
        "parentId": null,
        "author": "davidfowl",
        "content": "We never did this did we? @vicancy should we still pursue this for 6.0?",
        "createdAt": "2021-04-06T08:55:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13443#issuecomment-813952923"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0ODc5NDYwOTQ=",
    "title": "SignalR (Client) UWP Background Support",
    "url": "https://github.com/dotnet/aspnetcore/issues/13613",
    "createdAt": "2019-09-02T00:07:07Z",
    "lastUpdated": "2023-10-28T14:09:09Z",
    "body": "Hello,\r\n\r\nIs there any way to run SignalR in the background? The server I need to use only makes SignalR available for notifications.\r\n\r\nI tried to configure websocket, but couldn\u0027t do it.\r\n\r\nhttps://docs.microsoft.com/en-us/windows/uwp/networking/network-communications-in-the-background\r\n",
    "upvotes": 0,
    "labels": [
      "Needs: Design",
      "enhancement",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few",
      "help candidate"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyNzY0NjI5Mw==",
        "parentId": null,
        "author": "halter73",
        "content": "We don\u0027t currently have UWP Background Support. This is our first time learning of ControlChannelTrigger. We\u0027d be interested in seeing what an implementation of a SignalR client transport that supported this looked like. I\u0027m not promising we\u0027d accept a PR that added support, but we\u0027d consider it.",
        "createdAt": "2019-09-03T21:23:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13613#issuecomment-527646293"
      },
      {
        "id": "IC_kwDOAQzde8425zVV",
        "parentId": null,
        "author": "wegylexy",
        "content": "If you can wrap \u0060SocketActivityTrigger\u0060 in an \u0060IDuplexPipe\u0060 or a \u0060Stream\u0060, and also do the initial HTTP upgrade to WebSocket (such that the server sees it as a normal WebSocket connection), [FlyByWireless.SignalRTunnel.Client](https://www.nuget.org/packages/FlyByWireless.SignalRTunnel.Client) may work.\r\nIf you can also change server code, see [FlyByWireless.SignalRTunnel](https://www.nuget.org/packages/FlyByWireless.SignalRTunnel) to use TCP or QuicStream directly without establishing a WebSocket connection.",
        "createdAt": "2021-09-16T18:04:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13613#issuecomment-921122133"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0ODg3MjE5MDU=",
    "title": "SignalR sends incomplete JSON in socket frames when using new System.Text.Json Serializer",
    "url": "https://github.com/dotnet/aspnetcore/issues/13651",
    "createdAt": "2019-09-03T17:06:03Z",
    "lastUpdated": "2021-07-29T18:44:32Z",
    "body": "_From @suedama1756 on Tuesday, September 3, 2019 5:02:57 PM_\r\n\r\n3.0.100-preview8-013656\r\n\r\nSignalR JS Client: 3.0.0-preview6.19307.2\r\n\r\nWe have an issue where SignalR is sending incomplete JSON in a socket frame to the browser which results in an error in the signalr client.\r\n\r\n\u0060\u0060\u0060js\r\n if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\u0022Message is incomplete.\u0022);\r\n   }\r\n\u0060\u0060\u0060\r\n\r\nThe issue does not occur when using the NewtonSoft JSON serializer. It looks like the JSON buffer is not being flushed correctly\r\n\r\n_Copied from original issue: dotnet/corefx#40770_",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "api-suggestion",
      "affected-most",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyNzU1MTM2OA==",
        "parentId": null,
        "author": "suedama1756",
        "content": "To be clear, this only occurs when using the System.Text.Json serializer.",
        "createdAt": "2019-09-03T17:09:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-527551368"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyNzU1MjY3OQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Do you have a sample app that we can reproduce this behavior with? Have you changed the default serializer options?",
        "createdAt": "2019-09-03T17:13:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-527552679"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyNzU1NDUwMA==",
        "parentId": null,
        "author": "suedama1756",
        "content": "I don\u0027t have an isolated sample although it may be possible to put one together. The configuration is pretty much the default new aspnet project template in VS2019.\r\n\r\n\u0060\u0060\u0060js\r\n if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n            }\r\n            else\r\n            {\r\n                app.UseHsts();\r\n            }\r\n                        \r\n            app.UseRouting();\r\n            app.UseHttpsRedirection();\r\n            \r\n            app.UseCors(options =\u003E\r\n            {\r\n                options\r\n                .AllowAnyMethod()\r\n                .AllowAnyHeader()\r\n                .AllowCredentials()\r\n                .SetIsOriginAllowed(host =\u003E true);\r\n\r\n            });\r\n\r\n            app.UseEndpoints(routes =\u003E\r\n            {\r\n                routes.MapControllers();\r\n                routes.MapHub\u003CViewServerHub\u003E(\u0022/viewport\u0022);\r\n            });\r\n\r\n\u0060\u0060\u0060\r\n\r\nWe are using a hub with a stream configured using an unbounded Channel Reader",
        "createdAt": "2019-09-03T17:18:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-527554500"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyNzU1NjEzNQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Could you provide the method(s) in \u0060ViewServerHub\u0060 that you\u0027re observing the issue with? And would it be possible to grab logs and or network traces of the partial message? https://docs.microsoft.com/en-us/aspnet/core/signalr/diagnostics?view=aspnetcore-2.2",
        "createdAt": "2019-09-03T17:22:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-527556135"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyNzU5MjEyNg==",
        "parentId": null,
        "author": "suedama1756",
        "content": "OK, I\u0027ve tracked down the issue and as is always the way with these things its not where I thought it would be. The issue is failure to serialize some double values (Infinite, NaN). I put in a custom double converter quickly and this seemed to resolve the issue. Interesting I could not replicate the exact issue even with a cut down example, instead I get a \u0022Invocation canceled due to the underlying connection being closed.\u0022\r\n\r\nI would have expected a serialization error in the observable, or something that would help me identify the failure. I certainly wouldn\u0027t expect partial frames... Is there a way for us to make this capture any serialization errors and report those to the client?\r\n\r\n",
        "createdAt": "2019-09-03T18:56:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-527592126"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyNzYyNTcxMA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Unfortunately due to the way we write messages there is no way to send a valid message to the client on serialization errors. You should see a server-side log at the Debug level with the exception that caused the client to disconnect.\r\n\r\nWhen you saw the partial frames were you running the app through the debugger? Normally the connection should close immediately, but if a debugger is attached the connection will not be cleaned up in order to make dev work easier.",
        "createdAt": "2019-09-03T20:27:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-527625710"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyNzY0MDU4MQ==",
        "parentId": null,
        "author": "halter73",
        "content": "Maybe we should make this a ~warning~ error log since this is indicative of a bug in an app. We want to make sure we don\u0027t log it so severely if it\u0027s client-controlled.",
        "createdAt": "2019-09-03T21:06:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-527640581"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyNzg5MTYyNQ==",
        "parentId": null,
        "author": "GSPP",
        "content": "I understand the response is being streamed so that errors have nowhere to go. Would response buffer help? Classic ASP.NET buffers responses by default and replaces them entirely in case of error.",
        "createdAt": "2019-09-04T13:05:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-527891625"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyODAzOTk5NA==",
        "parentId": null,
        "author": "halter73",
        "content": "Normal response buffering (where the entire response body is buffered prior to writing) wouldn\u0027t work for SignalR since it relies on response streaming. That does work reasonably well for catching and reporting MVC response serialization errors though.\r\n\r\nWe could consider serializing each frame into a buffer prior to writing it. We would probably want to make it opt-in in order to not degrade perf. I\u0027m not sure how many people will opt-in until after it\u0027s too late though \uD83D\uDE1E ",
        "createdAt": "2019-09-04T19:02:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-528039994"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUyODA4MTM0Nw==",
        "parentId": null,
        "author": "suedama1756",
        "content": "I think the suggestion of moving the log level to warning makes a lot of sense. As soon as I enabled debug logging I tracked the issue quickly. \r\n\r\nI can\u0027t see why response buffering wouldn\u0027t technically work as it would be fairly trivial to write the JSON in memory (potentially backed by disk for large objects) before sending it down the socket. I agree though that this doesn\u0027t feel like the correct option. Technically, this could be simulated very easily with existing infrastructure by serializing the object to JSON before writing it to the Channel and then wrapping it in a JSONWrapper struct before sending it to the channel. A CustonConverter could then be used  to write raw the unwrapped JSON (although not sure the new System.Text.Json supports raw, I think I looked into this already for supported the proposed n suffix for bigint). \r\n\r\nAnother option would be to support streaming a single message across multiple frames (streaming json) in the front end. This would allow for additional messages to be injected between frames to indicate error, e.g. first frame contains partial json, next frame contains a header indicated an error. Potentially a JSON (2) protocol?\r\n\r\nI haven\u0027t thought any of this through in any detail, just putting some ideas out there :) Clearly the other option is to test my code better!! \r\n\r\nThanks all, I appreciate the fast response on this \r\n",
        "createdAt": "2019-09-04T20:50:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-528081347"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUzMDIyMzM5Ng==",
        "parentId": null,
        "author": "ahsonkhan",
        "content": "\u003E The issue is failure to serialize some double values (Infinite, NaN). I put in a custom double converter quickly and this seemed to resolve the issue.\r\n\r\n@suedama1756, can you expand a bit on this? What\u0027s your input object that you are serializing and where do you end up seeing these unsupported double values that caused you to write a custom converter? I am interested in learning about that scenario, and if you could share an isolated sample (specific to the serializer itself, including the converter), that would be helpful to me (particularly because I don\u0027t think the serializer should be writing NaN/Infinity on .NET Core).",
        "createdAt": "2019-09-11T05:18:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-530223396"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU1NDU1OTc2Mg==",
        "parentId": null,
        "author": "willdean",
        "content": "\u003E Maybe we should make this a warning log since this is indicative of a bug in an app. We want to make sure we don\u0027t log it so severely if it\u0027s client-controlled.\r\n\r\nCould it be Error rather than Warning?  If it wasn\u0027t for the business about it being too late to throw an exception by the time the message is serialised, this sort of serialisation problem would normally throw an exception, which would generally be logged as Error rather than anything lower.",
        "createdAt": "2019-11-15T22:50:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-554559762"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwMDgzODI2NQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Let\u0027s make it an Error log and see how that goes :). It\u0027s a terminal case and unexpected by users. If necessary we can add a config setting.",
        "createdAt": "2020-03-18T20:18:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-600838265"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwODI2MDk3NQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "It may be reasonable to have a flag to allow buffering messages (off by default), but it would help catch issues like this ",
        "createdAt": "2020-04-03T06:46:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-608260975"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwODU4NTM3MQ==",
        "parentId": null,
        "author": "halter73",
        "content": "I know in the past, MVC has had similar issues with JsonResults. Do we have a supported way to buffer those other than using the Microsoft.AspNetCore.Buffering 0.2.2 NuGet package? \r\n\r\nThe big difference is that in MVC\u0027s case, serialization failures mean not being able to write a 500 response or diagnostic error page, while in SignalR, serialization failures cause entire connections to close.\r\n\r\nI think that\u0027s more reason *not* to have a buffering option in SignalR though. Buffering in MVC could make diagnostics easier. Turning buffering on in SignalR is basically asking to swallow exceptions, drop messages, and continue. This could lead to issues in the app logic that are worse than just dropping the connection.",
        "createdAt": "2020-04-03T18:09:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-608585371"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxMDUyODU1NA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E I think that\u0027s more reason not to have a buffering option in SignalR though. Buffering in MVC could make diagnostics easier. Turning buffering on in SignalR is basically asking to swallow exceptions, drop messages, and continue. This could lead to issues in the app logic that are worse than just dropping the connection.\r\n\r\nToday we write directly to the connection which can result in partial messages that corrupt the payload. Buffering would fail before messages are written to the connection resulting in a server side failure without breaking the connection.",
        "createdAt": "2020-04-07T17:46:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-610528554"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxMDU0MTYyMw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Or even fail the connection properly, with a message (properly sanitized for security). What happens now is an ungraceful disconnect since we can\u2019t write a close frame.",
        "createdAt": "2020-04-07T18:13:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-610541623"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxMDU3MTgwOA==",
        "parentId": null,
        "author": "willdean",
        "content": "As someone who suffered through debugging one of these \u0022SignalR connection occasionally drops because the new serializer doesn\u0027t like something I said\u0022 problems, I\u0027d ask that the API (at least in debug mode or Development environment) follows the principle of least surprise.  i.e. if you pass some data into an API which it can\u0027t cope with, it throws an exception at that point.    \r\n\r\nI do get it that, in normal operation, there\u0027s an optimization which prevents this working like this, but in general, dropping the connection feels entirely unexpected, and the fact that it does it without telling the API caller that it\u0027s done it just seems plain wrong.\r\n\r\nRather than change the architecture (buffering, etc), could the dev-mode code just perform a test serialisation of the data at the time of the call and discard the result?  That way any serialisation exceptions would automatically throw back to the caller.",
        "createdAt": "2020-04-07T19:17:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-610571808"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxMDU3NTE5OA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Rather than change the architecture (buffering, etc), could the dev-mode code just perform a test serialisation of the data at the time of the call and discard the result? That way any serialisation exceptions would automatically throw back to the caller.\r\n\r\nThat\u0027s the same as buffering.\r\n\r\nReopening this for re-consideration as a \u0022mode\u0022.",
        "createdAt": "2020-04-07T19:24:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-610575198"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxMDU5MzE4Mw==",
        "parentId": null,
        "author": "halter73",
        "content": "I\u0027m fine with it, as long as the error closes the connection with a clear error message. I don\u0027t want some VBesque \u0022On Error Resume Next\u0022 behavior.",
        "createdAt": "2020-04-07T20:04:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-610593183"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzk1ODMzOQ==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-04-06T09:03:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-813958339"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxNDI2MjkzNg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Also \u0060api-suggestion\u0060",
        "createdAt": "2021-04-06T16:35:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-814262936"
      },
      {
        "id": "IC_kwDOAQzde841AsqP",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-29T18:44:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-889375375"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0OTYwNjAxOTQ=",
    "title": "Add Java client transport fallback",
    "url": "https://github.com/dotnet/aspnetcore/issues/14172",
    "createdAt": "2019-09-19T22:45:50Z",
    "lastUpdated": "2023-10-28T14:09:11Z",
    "body": "We added the LongPolling transport to the Java client in https://github.com/aspnet/AspNetCore/pull/6856\r\n\r\nBut it currently doesn\u0027t do fallback, so the client either connects with the selected transport or it doesn\u0027t.",
    "upvotes": 1,
    "labels": [
      "enhancement",
      "area-signalr",
      "feature-client-java",
      "severity-minor",
      "affected-medium",
      "help candidate"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde843NExB",
        "parentId": null,
        "author": "noamyogev84",
        "content": "Hey @BrennanConroy i\u0027ll try to grab that\r\nCan you get me started with some pin points?",
        "createdAt": "2021-09-23T21:27:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/14172#issuecomment-926174273"
      },
      {
        "id": "IC_kwDOAQzde843P-Gd",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Sure, the general idea is that we want to first get the negotiate response from the server which can include multiple transports, then we\u0027ll loop over all of the transports the client can use and check that the server supports them too and see if the client connects with that transport. If it throws we log and try the next one, repeat until all transports are tried and either we stop on a successful one, or return some sort of error to the user.\r\n\r\nMost of the Typescript client code for an example is:\r\nhttps://github.com/dotnet/aspnetcore/blob/5223b497fe578b1c239a454a46e464866069a4dc/src/SignalR/clients/ts/signalr/src/HttpConnection.ts#L376-L408\r\n\r\nAnd for the .NET Client:\r\nhttps://github.com/dotnet/aspnetcore/blob/5223b497fe578b1c239a454a46e464866069a4dc/src/SignalR/clients/csharp/Http.Connections.Client/src/HttpConnection.cs#L365-L424",
        "createdAt": "2021-09-24T21:38:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/14172#issuecomment-926933405"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU0OTg0MTg2MjM=",
    "title": "Add more first-class options to HttpConnectionOptions",
    "url": "https://github.com/dotnet/aspnetcore/issues/14427",
    "createdAt": "2019-09-25T17:19:34Z",
    "lastUpdated": "2020-11-09T22:51:14Z",
    "body": "We support configuring things like CertificateValidationCallbacks, but they have to be done for the HttpClient and WebSocket separately. We should do what we do for other options (headers, etc.) and provide first-class properties that we copy to each of the option types.",
    "upvotes": 3,
    "labels": [
      "enhancement",
      "area-signalr",
      "severity-minor",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwNTIwNDYyMA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Pre-triage notes: This doesn\u0027t feel like something we can fit in 5.0 now. Suggest backlog and \u0060help wanted\u0060?",
        "createdAt": "2020-03-27T18:37:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/14427#issuecomment-605204620"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1MDMyNjY2NjE=",
    "title": "Distinct users on groups on send to many groups",
    "url": "https://github.com/dotnet/aspnetcore/issues/14782",
    "createdAt": "2019-10-07T06:59:19Z",
    "lastUpdated": "2022-06-27T02:37:35Z",
    "body": "### Distinct users on groups on send to many groups\r\n \r\nfor some reason a user exist in 2 groups ( g1, g2 ).\r\nwhen you try:\r\n\u0060Clients.Groups([ \u0022g1\u0022, \u0022g2\u0022 ]).SendAsync( ... )\u0060\r\n\r\nuser will get the same message twice.\r\n\r\n## The required solution\r\nadd option to let the developer to chose to distinct the users connection on groups or not.\r\n\r\n#### related issue:\r\n\u0060https://github.com/aspnet/AspNetCore/issues/5966\u0060\r\n\r\n",
    "upvotes": 2,
    "labels": [
      "enhancement",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDUzOTcwNjExOA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Deduping here would be a breaking change which means we\u0027d need to justify the cost of that break against the benefit. This is feasible though, since each server is sending the messages to all the connections in the group in a single method/loop. The biggest cost here is that we\u0027d need to track every connection we\u0027ve sent to, which means allocating a lot of memory to hold a list of all the connection IDs we\u0027ve sent to.\r\n\r\nThis is going on the backlog for now, as it\u0027s quite a big change. We may be able to look at it in a future release.\r\n\r\nUntil then, this is effectively by design. Your client application should be configured to be resilient to this by using some kind of idempotency token on the messages you send (so that when the client receives two messages with the same token value, it ignores the duplicates).",
        "createdAt": "2019-10-08T21:11:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/14782#issuecomment-539706118"
      },
      {
        "id": "IC_kwDOAQzde85Fi3eP",
        "parentId": null,
        "author": "dennis-yemelyanov",
        "content": "Would be really great to have this feature (perhaps as a different method/parameter to avoid breaking changes).\r\n\r\nI initially assumed the point of having a \u0060Groups()\u0060 method taking in a list was in deduping, but looks like it behaves similarly to calling a \u0060Group()\u0060 method separately for each group (although calling \u0060Groups()\u0060 once is probably more performant).\r\n\r\nJust curious, is it theoretically possible to implement by changing only the Signalr library code, in other words could I make a custom build of Signalr code and deploy it with my application? Or does this require changes in the Azure Signalr service?",
        "createdAt": "2022-06-27T02:36:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/14782#issuecomment-1166768015"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1MDkwMjQ0MDA=",
    "title": "Consider adding an error event handler for HubConnection",
    "url": "https://github.com/dotnet/aspnetcore/issues/15146",
    "createdAt": "2019-10-18T11:34:23Z",
    "lastUpdated": "2022-12-12T08:33:54Z",
    "body": "This works\r\n\r\n\u0060\u0060\u0060chsarp\r\nconnection.On\u003Cobject\u003E(\u0022onEvent, obj =\u003E System.WriteLine(\u0022triggers\u0022);\r\n\u0060\u0060\u0060\r\n\r\nThis does not\r\n\u0060\u0060\u0060chsarp\r\nconnection.On\u003CMessage\u003E(\u0022onEvent, obj =\u003E System.WriteLine(\u0022triggers\u0022);\r\n\u0060\u0060\u0060\r\n\r\nIt used fine in 2.2. Thanks, Anders",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "api-suggestion",
      "severity-minor",
      "affected-medium"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0MzY5MzIwMA==",
        "parentId": null,
        "author": "AndersMalmgren",
        "content": "Ops, I had a reference to Newton soft JToken in the Message type. I think its why it does not trigger. Why not throw error instead of doing nothing? I will rewrite to use System.Text.Json and get back here if it does not work",
        "createdAt": "2019-10-18T11:42:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-543693200"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0MzcwNjY2NQ==",
        "parentId": null,
        "author": "AndersMalmgren",
        "content": "Replaced JToken with JsonElement and it triggers. But please, do not silent swallow errors ;)",
        "createdAt": "2019-10-18T12:11:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-543706665"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0MzcwNzU0MA==",
        "parentId": null,
        "author": "AndersMalmgren",
        "content": "Also JToken has a ToOjbect which System.Text.Json does not. In System.Text.Json I need todo \r\n\r\n\u0060\u0060\u0060chsarp\r\nvar json = message.Event.GetRawText();\r\nreturn JsonSerializer.Deserialize(json, type, Options);\r\n\u0060\u0060\u0060",
        "createdAt": "2019-10-18T12:13:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-543707540"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0MzgxMDcyMw==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E Why not throw error instead of doing nothing?\r\n\r\nThere isn\u0027t really anywhere we can throw an error unless we close the connection and provide the error in the closed handler.\r\n\r\nWe instead log when a users \u0060.on(...)\u0060 handler either can\u0027t be found, or fails to run.\r\nYou can enable logs fairly easily by following the docs https://docs.microsoft.com/aspnet/core/signalr/diagnostics?view=aspnetcore-3.0#net-client-logging",
        "createdAt": "2019-10-18T16:01:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-543810723"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0Mzg5MDQxOA==",
        "parentId": null,
        "author": "AndersMalmgren",
        "content": "Can\u0027t you throw when you receive the message and can\u0027t translate it to the requested type. Or even pass null to the event handler so we get a null reference in event handler.\r\n\r\nWhen nothing happens it takes longer to debug :) ",
        "createdAt": "2019-10-18T19:03:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-543890418"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NDc2ODYwNw==",
        "parentId": null,
        "author": "dbacher",
        "content": "@BrennanConroy @AndersMalmgren \r\nThere should be an Action\u003CErrorInfo\u003E for general parse failures, and then if feasible, a separate one for each type matching the On\u003CT\u003E handler.\r\n\r\nWhen the client or server sends a message, the intent is a change of program state on the other side.  In a simple case, it\u0027s add a line to a chat room.  In a more complicated case, it\u0027s some transaction impacting a data element in persistent storage.  In any case, the intent was to change state on the other side of the wire - not to have the message ignored.  But the outcome is that the message was ignored.\r\n\r\nThis potentially impacts every subsequent state change for the lifespan of the process, which is probably a bad thing.  And so there should be a notification, to the process, \u0022hey this didn\u0027t work.\u0022  It\u0027s an error case, so there shouldn\u0027t be any impact to whatever throughput requirements you have.\r\n\r\nIn particular, client side, with MVVM - if the updates are intended to change the View Model, you have UI elements in an inconsistent state and that is...  we\u0027ll call it bad.\r\n\r\nServer side, client told you to change some row in some database and the row never changed.  But you didn\u0027t get back a success or a failure message, since the server just ignored your request.\r\n\r\nI\u0027d think there\u0027s never an outcome from having a notification method available that is worse than not having a notification available.",
        "createdAt": "2019-10-22T01:02:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-544768607"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NTU0OTc1Mg==",
        "parentId": null,
        "author": "analogrelay",
        "content": "\u003E Can\u0027t you throw when you receive the message and can\u0027t translate it to the requested type.\r\n\r\nThrow *where*? The dispatching is happening on a background thread. Where would you catch this exception? That would be no better than logging (which you could already capture with a custom sink).\r\n\r\nIf an error occurs while parsing, it\u0027s not recoverable, so we log it. If you want to *customize* serialization to better handle this kind of parse failure, that\u0027s something you should do in the serializer, since that\u0027s where the error occurs. SignalR is very intentionally abstracted away from that. For example, in the JSON serializer, you can customize the [\u0060JsonSerializerOptions\u0060](https://docs.microsoft.com/en-us/dotnet/api/system.text.json.jsonserializeroptions?view=netcore-3.0) and register custom converters that give you much more control over serialization if you want to do this.",
        "createdAt": "2019-10-23T17:23:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-545549752"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NzQzMzU3Nw==",
        "parentId": null,
        "author": "dbacher",
        "content": "@anurse \r\nLogging is an amplifier for denial of service.\r\n\r\nIf I connect and spool bad messages, I\u0027ll burn your CPU and whatever logging resources you\u0027re using, eventually your process will crash if network is greater than disk.  Any logging based solution makes that worse, not better.\r\n\r\nAnd so what we really want is a notification we can tie to a counter, so that after 10 tries or w/e, we can disconnect a peer.  Also, in a professional app versus a 6 line chat demo for Build, we\u0027d likely want to assemble a message and signal the peer \u0022hey, something bad is happening here.\u0022\r\n\r\nThat allows the peer to cancel user interface, for example.\r\n\r\nAnyway, the point is - replacing the serializer is not a discoverable error handling mechanism.  Doing it that way is going to cause issues here, it\u0027s going to cause questions on stack overflow, and 100% of the people who go that route are going to complain about it.\r\n\r\nAnd so maybe adding two unit tests - which is really likely what we\u0027re talking - and a zero cost delegate call on failures, which you expect to be rare when SignalR is working correctly in the absence of a hostile peer, so that apps can respond to the problem instead of just logging it somewhere might make a bit of sense?\r\n\r\nOr is the argument that SignalR will never have an error processing messages that an app using it might want to respond to in some way other than log and continue?",
        "createdAt": "2019-10-29T13:59:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-547433577"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0OTAzNDE3MA==",
        "parentId": null,
        "author": "HeikoBoettger",
        "content": "@dbacher \r\n\u003E Logging is an amplifier for denial of service.\r\n\r\nNot sure why this should be an argument against implementing a good logging system. As a developer I would only enable the logging while investigating a problem. There is a reason why there is a \u0060env.IsDevelopment()\u0060 extension for \u0060IWebHostEnvironment\u0060. \r\n\r\nAnyway having also used other frameworks as well, I would prefer adding some notification to do the logging by myself or whatever I like to do in such a case.\r\n\r\nIs it also possible to notify that a member of class wasn\u0027t deserialized because it wasn\u00B4t contained in the json-message? I just violated the DRY-priciple while experimenting when deserializing a message on the client side and discovered that I mispelled a member-name (instead reusing the type via a shared library). Got no hint from the system about this. Would the notifcation also help to find such a problem?",
        "createdAt": "2019-11-02T11:17:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-549034170"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0OTA2NDkzMQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "We could call an OnUnhandledError handler that gets called on the client. It\u2019s harder to do on the server depending on how much we actually parsed",
        "createdAt": "2019-11-02T17:34:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-549064931"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2MTY5NzkwNw==",
        "parentId": null,
        "author": "dbacher",
        "content": "@davidfowl \r\nI would like to use SignalR on a US DOD system (cue \u0022omg deathmonger and w/e comments\u0022), and so I need to integrate it with systems written in 1995, that were an original cause for the Personnel folks even getting desktop computers, versus shuffling actual papers.\r\n\r\nThe attacks I\u0027m trying to deal with run like this...\r\n\r\nAn attacker connects to a hub, and starts just spooling valid messages that route successfully as fast as they can.  There is no circumstance in which the framework can deal with this, but since I am being notified every time a message successfully routes - I can take that on at the app level, and act on it if I need to.  This is very app dependent.\r\n\r\nAn attacker connects to a hub and spools messages that don\u0027t deserialize successfully.  Right now this is a silent failure case, and so an attacker can use it to burn resources.  Adding any delegate based approach helps, however if you assume the attacker is spooling messages as fast as possible, the event pattern is likely to cause more allocation and garbage collection, and so it\u0027d be smarter to just call a delegate and then let the user route that to a pub/sub pattern if they need multicast, since I\u0027d expect that to be the exception not the rule (pun intended).\r\n\r\nAn attacker connects to a hub and sends messages the serializer does successfully deserialize, but which cannot be successfully routed.  This could be intentional - we did it all the time in Gasper Vantage with our internal library, back when I worked for NCR (cue: \u0022oh and you stole from poor people too\u0022 comments).  It also could be a bug.  Having a notification - again, any delegate based mechanism works but event might cause excessive allocations - would be helpful.  In this case, since there is already garbage since we deserialized an object successfully, the event pattern wouldn\u0027t add much to garbage collection on paper.  But \u0022not adding much\u0022 might be relevant.\r\n\r\nThere wouldn\u0027t be any impact to code that doesn\u0027t want / need to know from having the event - but it\u0027d help people dealing with the one bad person on all of Internet. ;)\r\n\r\nWith Gasper Vantage, we had to maintain a million message an hour target on 1995 era hardware.  When I started, we had to do it on Windows 3.1 (the DOS product had a lower threshold).  That was rough - real rough - with the entire operating system operating against us.\r\n\r\n@HeikoBoettger \r\nYou can have logging, in your production system - it\u0027s saved me more times than I can count.  Focus it, be able to turn your instrumentation on and off in production without restarting your entire farm of containers.\r\n\r\nHowever, be aware the disk can\u0027t be in two places at once, and if I\u0027m trying to burn your resources, I can leverage your logging to potentially burn more resources.  E.G. if I know you\u0027re writing entire messages to disk every time, I can make the messages as large as possible.  Generally, the issue (and this goes for memory and network approaches as well) is that the disk has a finite capacity, and you can exhaust that and cause writes to start backing up.\r\n\r\nIf you look at the Windows event log, when Windows sees this - it eventually, in some subsystems, starts logging \u0022the previous event repeats 100 times.\u0022\r\n\r\nIf you look at ASP.NET Health, it did the same thing - before it raised a health event it would wait some period of time, and if you needed it, you could have it batch them down to \u0022this event repeats a thousand times\u0022 and get one notification instead of a thousand.\r\n\r\nThe issue, in both cases, is it is really hard to deal with a problem with a hub without a reference for the hub, and so once you\u0027re in the standard logging or event infrastructure, your receiving a messgae or event to log, and aren\u0027t able to easily get back to the ASP.NET connection or hub.\r\n\r\nAnd so ASP.NET, nearly everywhere, has some error notification separate from health and logging.\r\n\r\nI can\u0027t today, but if you ping me a couple times, I can provide a deserializer that requires all non-nullable (C# 8 rules) properties to be populated or raises a notification.  If there\u0027s a field that explicitly states it can be null, I wouldn\u0027t enforce it being set (makes for smaller messages).",
        "createdAt": "2019-12-04T15:33:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-561697907"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzk2MjQ2Ng==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-04-06T09:09:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-813962466"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzk2NDgyNA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "This looks like a good issue to tackle. We need to figure out the scope, is it client or server or both. What types of errors are customers trying to handle. The main thing here seems to be malformed payloads that stop us from invoking your method. Assuming it\u0027s just the payload and not the outer framing, it should be possible on both server and client to have an error handler that gets called if dispatch fails altogether. It won\u0027t be called if an exception is thrown after dispatch, this is strictly when we can\u0027t never call your handler.\r\n\r\nWe also need to decide if we log when the unhandled error method gets called. Maybe we skip it assuming you might be doing logging in there an therefore it\u0027s handled.",
        "createdAt": "2021-04-06T09:13:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-813964824"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxNTk5OTgwOA==",
        "parentId": null,
        "author": "dbacher",
        "content": "A simple multicast event would be sufficient from my perspective.  At that point, I can use System.Reactive, LINQ, etc. to do the rest.\r\n\r\nIt\u0027d be fine, from my perspective, to punt logging to the app if it\u0027s registered a handler.\r\n\r\nAnother way to structure it would be a reactive extensions point - but I don\u0027t know if that\u0027s a good dependency to take.  But that\u0027d allow roughly:\r\n   myHub.Exceptions.Where(condition).Threshold(100, 1000).Each(reportingFunc);\r\n\r\nI believe this needs to be supported on both the server and the client.\r\n\r\nArgument for server:\r\nIf I have a client or a group of clients connecting to me and sending me bad data, I am burning network and CPU. If I have authentication - say a bearer token - being used in a DDOS, the app server alone is in a position to definitively know the bad credential and sever the access.  Especially with console or file-based logs that may contain carriage returns, line feeds, etc. embedded in them it is unreasonable to expect higher level software or hardware to identify and block the connection.  The application on the server alone is positioned to reliably revoke a JWT or similar credential.\r\n\r\nArgument for client:\r\nI have a peer on Android and a peer on the Microsoft Store both talking to each other across a Hub.  I control the version of the Hub, but once I submit a change to Microsoft and Google, I don\u0027t necessarily control that review process.  End user devices won\u0027t download the update until they see wifi. I make a change to the app that results in an exception on down-level versions.  And so the app appears to be launched and running on the user\u0027s device, but nothing at all is happening.  The user\u0027s access to logs is hampered because they\u0027re buried deep on both these OSes.\r\n\r\nArgument for web browser clients:\r\nThis impacts JavaScript clients as well, but to a lesser extent - primarily when fields that were primitive are moved to using structures and a CDN is at play, but a few other cases as well.  It\u0027s less of a problem for a Microsoft or a Facebook, more of a problem for smaller teams.  There tends to be a (wrong) thought that JSON and JavaScript\u0027s object solves all these problems, when in fact - it is the same as GWBASIC or Visual Basic with Option Strict off, and just pushes the Error 5, 7, 9 or 13 to runtime instead.  F12 tools can be disabled, and so console logging isn\u0027t necessarily available when there\u0027s an issue.",
        "createdAt": "2021-04-08T17:19:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-815999808"
      },
      {
        "id": "IC_kwDOAQzde840wm-V",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-22T18:59:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-885157781"
      },
      {
        "id": "IC_kwDOAQzde85QO69q",
        "parentId": null,
        "author": "smoogipoo",
        "content": "Hi, is this the appropriate place to report the following, or should I make another issue? There\u0027s a few related and I\u0027m not sure if it would duplicate this one:\r\n\r\nRight now if messagepack fails to bind method arguments, it triggers the following exception:\r\n\u0060\u0060\u0060\r\ndbug: Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher[22]\r\n      Parameters to hub method \u0027EndPlaySession\u0027 are incorrect.\r\n      System.IO.InvalidDataException: Error binding arguments. Make sure that the types of the provided values match the types of the hub method being invoked.\r\n       ---\u003E System.IO.InvalidDataException: Deserializing object of the \u0060SpectatorState\u0060 type for \u0027argument\u0027 failed.\r\n       ---\u003E MessagePack.MessagePackSerializationException: Failed to deserialize osu.Game.Online.Spectator.SpectatorState value.\r\n       ---\u003E MessagePack.MessagePackSerializationException: Unexpected msgpack code 203 (float 64) encountered.\r\n         at MessagePack.MessagePackReader.ThrowInvalidCode(Byte code)\r\n         at MessagePack.MessagePackReader.ReadInt64()\r\n         at MessagePack.Formatters.osu_Game_Scoring_ScoringValuesFormatter3.Deserialize(MessagePackReader\u0026 reader, MessagePackSerializerOptions options)\r\n         at MessagePack.Formatters.osu_Game_Online_Spectator_SpectatorStateFormatter1.Deserialize(MessagePackReader\u0026 reader, MessagePackSerializerOptions options)\r\n         at MessagePack.MessagePackSerializer.Deserialize[T](MessagePackReader\u0026 reader, MessagePackSerializerOptions options)\r\n         --- End of inner exception stack trace ---\r\n         at MessagePack.MessagePackSerializer.Deserialize[T](MessagePackReader\u0026 reader, MessagePackSerializerOptions options)\r\n         at lambda_method157(Closure , MessagePackReader\u0026 , MessagePackSerializerOptions )\r\n         at MessagePack.MessagePackSerializer.Deserialize(Type type, MessagePackReader\u0026 reader, MessagePackSerializerOptions options)\r\n         at Microsoft.AspNetCore.SignalR.Protocol.DefaultMessagePackHubProtocolWorker.DeserializeObject(MessagePackReader\u0026 reader, Type type, String field)\r\n         --- End of inner exception stack trace ---\r\n         at Microsoft.AspNetCore.SignalR.Protocol.DefaultMessagePackHubProtocolWorker.DeserializeObject(MessagePackReader\u0026 reader, Type type, String field)\r\n         at Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocolWorker.BindArguments(MessagePackReader\u0026 reader, IReadOnlyList\u00601 parameterTypes)\r\n         --- End of inner exception stack trace ---\r\n         at Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocolWorker.BindArguments(MessagePackReader\u0026 reader, IReadOnlyList\u00601 parameterTypes)\r\n         at Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocolWorker.CreateInvocationMessage(MessagePackReader\u0026 reader, IInvocationBinder binder, Int32 itemCount)\r\n\u0060\u0060\u0060\r\nThis can happen if the client and server don\u0027t have the same object model - we currently don\u0027t have a handshake mechanism for our project yet to prevent these errors.\r\n\r\nThis is a **debug-level** exception, which is unreasonable to enable filter for as this is a potential attack vector. Furthermore, the client receives these exceptions when calling \u0060InvokeAsync()\u0060 in a way that is completely devoid of any information other than that it has failed to invoke the method.\r\n\r\nIs the above related to this issue?",
        "createdAt": "2022-12-12T08:33:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15146#issuecomment-1346088810"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1MDk1NDQ2MTI=",
    "title": "[SignalR] Strongly-typed Hub Proxies",
    "url": "https://github.com/dotnet/aspnetcore/issues/15198",
    "createdAt": "2019-10-20T04:32:27Z",
    "lastUpdated": "2025-01-15T17:01:35Z",
    "body": "Edits from @anurse\r\n\r\nLet\u0027s use this to track strongly-typed hub proxies all-up. We\u0027ve talked about a few ways of doing it (code-gen, reflection emit, etc.). We have to consider a few things\r\n\r\n* Which clients *can* support it?\r\n* Which client environments can support it (for example, AOT environments like Unity wouldn\u0027t be able to support reflection emit-based generation)?\r\n* What\u0027s the API\r\n* How does this interact with client-side hubs #5278\r\n\r\nOriginal issue follows\r\n---\r\n\r\nOn the server side, we can create a strongly-typed hub (docs: https://docs.microsoft.com/en-us/aspnet/core/signalr/hubs?view=aspnetcore-3.0#strongly-typed-hubs). However, on the client-side, everything is still loosely typed, which means we lose type safety. Does the TypeScript client have any support for a strongly-typed connection? I imagine it could use generics on the \u0060build\u0060 function, eg:\r\n\u0060\u0060\u0060\r\nconst connection = new HubConnectionBuilder()\r\n  .withUrl(\u0022/hub\u0022)\r\n  .build\u003CMyHub\u003E();\r\n\u0060\u0060\u0060\r\n\r\nMy ideal setup would be automatically generating a TypeScript client based on the C# strongly-typed Hub, but for now I\u0027d be fine just manually creating a TypeScript type that replicates the server-side one.",
    "upvotes": 40,
    "labels": [
      "Needs: Design",
      "enhancement",
      "area-signalr",
      "severity-nice-to-have",
      "affected-medium"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NDIyMTI4NQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "There is no support for this currently. We\u0027ve definitely discussed it internally in the past but have prioritized other work as there hasn\u0027t been very much customer ask.\r\n\r\nThis is certainly a feature we would like to have :)",
        "createdAt": "2019-10-20T05:09:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-544221285"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NTU0NjMwMg==",
        "parentId": null,
        "author": "analogrelay",
        "content": "I think we\u0027d do this beyond just the TypeScript client. We have https://github.com/aspnet/AspNetCore/issues/5278 which is tracking a slightly different thing (using a client-side class to replace the \u0060On\u0060 methods). It sounds like what you\u0027re looking for is something like the Hub proxies ASP.NET SignalR had, where you can call server methods with syntax like this:\r\n\r\n\u0060\u0060\u0060csharp\r\nconnection.Server.MyHubMethod(...)\r\n\u0060\u0060\u0060\r\n\r\nInstead of\r\n\r\n\u0060\u0060\u0060csharp\r\nconnection.InvokeAsync(\u0022MyHubMethod\u0022, ...)\r\n\u0060\u0060\u0060\r\n\r\nIs that correct @Daniel15?\r\n\r\nIf so, I think we could repurpose this issue to track doing this across all the clients and put it on the backlog. It\u0027s not something we have in our current plans though.",
        "createdAt": "2019-10-23T17:15:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-545546302"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NTU0ODczMQ==",
        "parentId": null,
        "author": "Daniel15",
        "content": "I never actually used ASP.NET SignalR, but yeah something like that, assuming the \u0060MyHubMethod\u0060 is strongly-typed.\r\n\r\nI did recently discover the [Reinforced.Typings project](https://github.com/reinforced/Reinforced.Typings) which allows autogeneration of TypeScript interfaces based on C# classes, so I can at least get *some* typing for the C# models I\u0027m using.",
        "createdAt": "2019-10-23T17:21:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-545548731"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NTU1MjAzOA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "\u003E I never actually used ASP.NET SignalR, but yeah something like that, assuming the \u0060MyHubMethod\u0060 is strongly-typed.\r\n\r\nIn ASP.NET SignalR we used \u0060dynamic\u0060 to do it \uD83D\uDE28. But we wouldn\u0027t do that again :). We\u0027d do something like you proposed which would require a strongly-typed interface of some kind.\r\n\r\nDo you mind if I edit your issue a little bit to be more general and then we can use this issue to track that larger work item?",
        "createdAt": "2019-10-23T17:28:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-545552038"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NTU1MzIyNg==",
        "parentId": null,
        "author": "Daniel15",
        "content": "Sure, feel free to edit it :)",
        "createdAt": "2019-10-23T17:32:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-545553226"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NTU1NzY4NQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "I did find https://github.com/aspnet/AspNetCore/issues/5276 which we closed due to low enthusiasm, but there is new enthusiasm now :). I\u0027ll make the edits and we\u0027ll put this on the backlog to consider.",
        "createdAt": "2019-10-23T17:43:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-545557685"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2ODE4OTI4Mw==",
        "parentId": null,
        "author": "fuchen",
        "content": "Definitely need this! \r\n\u0060\u0060\u0060\r\n// server side hub\r\npublic class MathHub: Hub\r\n{\r\n    public int Add(int a, int b)\r\n    {\r\n        return a \u002B b;\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nGenerate below typescript interface:\r\n\u0060\u0060\u0060\r\ninterface MathHub {\r\n    invoke: {\r\n        Add(a: number, b: number): Promise\u003Cnumber\u003E\r\n    }\r\n    send: {\r\n        Add(a: number, b: number): void\r\n    }\r\n}\r\n\r\n// call and wait for return value\r\nconst result = await hub.invoke.Add(1, 2) \r\n\r\n// or without return value\r\nhub.send.Add(1, 2) // without return value\r\n\u0060\u0060\u0060\r\n\r\n",
        "createdAt": "2019-12-21T15:28:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-568189283"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3NDg4NzgxOA==",
        "parentId": null,
        "author": "iXyles",
        "content": "I would say this would be really nice to have, since it helps to prevent human error and annoying debugging session. Also makes developing pretty smooth on both ends by getting notice if you change this you will also have to update this (by help of compiler error as an example).",
        "createdAt": "2020-01-15T22:31:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-574887818"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxNzQyMTA4Ng==",
        "parentId": null,
        "author": "fredkuhne",
        "content": "Yes, please.",
        "createdAt": "2020-04-21T21:22:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-617421086"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYzMzI1OTMwOQ==",
        "parentId": null,
        "author": "jannikbuschke",
        "content": "\u002B1",
        "createdAt": "2020-05-24T16:52:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-633259309"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY0MjI4NDQyMg==",
        "parentId": null,
        "author": "Thorium",
        "content": "I hope the non-core functionality of \u0060EnableJavaScriptProxies\u0060 parameter (generating the javascript file with createHubProxies and registerHubProxies) will be included to AspNetCore.\r\nExisting projects would like to migrate to dotnet, but without rewriting all the JavaScript calls.\r\n",
        "createdAt": "2020-06-10T21:45:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-642284422"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY0MzA4MDg4Mw==",
        "parentId": null,
        "author": "jannikbuschke",
        "content": "Does anyone know of any good resources regarding code generation in dotnet core? I always had problem to understand the msbuild system, and how to hook into each build and render some data to some files.\r\nThe new code generation capabilities that come to dotnet, seem to only alter the generated dlls.\r\n\r\n// update: I usually have monorepos with server and client code side-by-side. It would be nice to autogenerate clientside code on every build step.",
        "createdAt": "2020-06-12T05:55:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-643080883"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY1MTMxMjYxNA==",
        "parentId": null,
        "author": "oising",
        "content": "It\u0027s been a few years since I\u0027ve used a signalr .net C# client, and I was surprised to find that it\u0027s still all strings and On() buffoonery. I\u0027d love to see a strongly typed client view of the server hub. The symmetry is broken -- we cannot have this! :)",
        "createdAt": "2020-06-29T19:25:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-651312614"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY1MTc1MDA1MA==",
        "parentId": null,
        "author": "Thorium",
        "content": "Is seems like .NET Core strongly-typed SignalR hub proxies are supported by [Fable](https://fable.io/) which translates F# to JavaScript:\r\nhttps://github.com/Shmew/Fable.SignalR",
        "createdAt": "2020-06-30T12:06:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-651750050"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY5NTM2NjQwMw==",
        "parentId": null,
        "author": "JasonEdb",
        "content": "I had a stab at this with \u0060Castle.DynamicProxy\u0060 to get the discussion started.\r\n- https://github.com/JasonEdb/SignalR.TypedClient\r\n\r\n**Called like this:**\r\n\u0060\u0060\u0060csharp\r\nusing Microsoft.AspNetCore.SignalR.Client;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing SignalR.TypedClient;\r\nusing TestCommon;\r\n\r\nnamespace TestClient\r\n{\r\n    class Program\r\n    {\r\n        static async Task Main(string[] args)\r\n        {\r\n            var builder = new HubConnectionBuilder();\r\n            await Task.Delay(TimeSpan.FromSeconds(3));\r\n            var hub = builder\r\n                .WithUrl(\u0022http://localhost:5000/echo\u0022)\r\n                .WithAutomaticReconnect()\r\n                .Build\u003CIEchoHub\u003E();\r\n\r\n            var unregister = hub.RegisterCallbacks(new MyClientCallbacks());\r\n            await hub.StartAsync();\r\n            var message = await hub.Invoke.Echo(\u0022Some message\u0022);\r\n            Console.WriteLine($\u0022Result: {message}\u0022);\r\n\r\n        }\r\n    }\r\n\r\n    public class MyClientCallbacks : IEchoHubClient\r\n    {\r\n        public Task OnMessageReceived(string message)\r\n        {\r\n            Console.WriteLine($\u0022{nameof(OnMessageReceived)} - {message}\u0022);\r\n            return Task.CompletedTask;\r\n        }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\nI noticed that there are a couple of issues with this approach;\r\n- \u0060Send\u0060 methods do not work if the server method has a Typed result, as send is fire and forget. A default value would have to be returned in these cases which is a bit ugly.\r\n- As mentioned above, this uses \u0060IL.Emit\u0060 so it will not work on all platforms\r\n- Cancellation token support would need to create a proxy for each call\r\n  - Example usage: \u0060hub.InvokeWithCancellation(ct).Echo(\u0022Message\u0022)\u0060\r\n- Reflection is needed to operate around the \u0060TaskCompletionSource\u0060\r\n\r\nOf course, if this were the taken approach, it would need some more attention, hub attributes would need to be respected and the dependency on \u0060Castle.Core\u0060 would need to be removed.",
        "createdAt": "2020-09-19T23:21:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-695366403"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY5NTM2NzM0NA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "We\u0027d likely be looking an approach that uses source generators. ",
        "createdAt": "2020-09-19T23:36:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-695367344"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY5NTM2NzkxNQ==",
        "parentId": null,
        "author": "JasonEdb",
        "content": "@davidfowl Yes that absolutely makes sense. That would eliminate all of the shortcomings of this approach.",
        "createdAt": "2020-09-19T23:44:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-695367915"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY5ODM3OTM1OQ==",
        "parentId": null,
        "author": "Thorium",
        "content": "My interest is mainly JavaScript proxies: The main motivation to update existing .NET Framework application to .NET Core would be the speed-gain of Kestrel web-server. However, with ASP.NET Core SignalR, without strongly typed proxies:\r\n\r\n- In the old AspNet.SignalR, the TypeScript compiler spots typing errors on hub-methods and parameters. With new AspNetCore.SignalR it cannot, so the code maintainability is poor. (Maintainability is usually more important than performance.)\r\n- The migration-work-load is large, as 1) all the methods has to be converted, 2) everything has to be tested as the JSON-serializer will have it\u0027s differences even if you use NewtonSoft.Json (e.g. Tuple-class .Item1 vs .item1).\r\n\r\nSo, for now, it\u0027s not worth of migrating exiting application using SignalR to .NET Core.\r\n",
        "createdAt": "2020-09-24T14:25:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-698379359"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY5ODUyNzY4NA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "ASP.NET Core SignalR isn\u0027t just more performant, it\u0027s also more reliable. ",
        "createdAt": "2020-09-24T18:58:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-698527684"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwOTU1MDg0OQ==",
        "parentId": null,
        "author": "ryandle",
        "content": "I found myself immediately wanting this in my Blazor WASM project!",
        "createdAt": "2020-10-15T19:43:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-709550849"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc0OTY3OTQyMQ==",
        "parentId": null,
        "author": "Stirda",
        "content": "@ryandle I hope [SignalR.Client.TypedHubProxy](https://github.com/AndreasBieber/SignalR.Client.TypedHubProxy) library will [port to ASP.NET Core](https://github.com/AndreasBieber/SignalR.Client.TypedHubProxy/issues/21) soon. I want to believe that this will open doors to Blazor WASM.",
        "createdAt": "2020-12-22T17:36:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-749679421"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc1MDUxNTEzMw==",
        "parentId": null,
        "author": "mehmetakbulut",
        "content": "@Stirda @ryandle Over the years I wrote some pieces to handle this issue but just last weekend decided to put them together as a library. https://github.com/mehmetakbulut/SignalR.Strong Comes with two options for client-to-server calls: dynamic proxy (\u0060hub.Do()\u0060) and expression proxy (\u0060ehub.SendAsync(hub =\u003E hub.Do())\u0060). I don\u0027t have a WASM case to test it on but if you try the \u00600.2\u0060 preview from nuget and find issues, I\u0027d be happy to take a peek.\r\n\r\nI might investigate a third option (source generators) which I could see getting contributed to \u0060dotnet/aspnetcore\u0060 eventually.",
        "createdAt": "2020-12-23T22:50:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-750515133"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc1MTgxMTI3MQ==",
        "parentId": null,
        "author": "mehmetakbulut",
        "content": "Had some free time so I [prototyped the source generator option](https://www.nuget.org/packages/SignalR.Strong.SourceGenerator/). Since generator has access to same code analyzer APIs, it could be improved to give compile time errors for hub interfaces that violate SignalR constraints. Overall looks promising but I\u0027m not sure if any pre-.NET 5 platform can utilize it.",
        "createdAt": "2020-12-28T18:03:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-751811271"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc1NjA4MjI2Mg==",
        "parentId": null,
        "author": "Thorium",
        "content": "This is a way to use Fable (client side compiler of F# to Javascript) and then interop your JS files with your Fable files:\r\nhttps://hashset.dev/article/14_improving_real_time_communication_using_fable_signal_r\r\n",
        "createdAt": "2021-01-07T12:17:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-756082262"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzk2MDkxNg==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-04-06T09:07:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-813960916"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzk2MTYwNg==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@BrennanConroy and @halter73 @mehmetakbulut\u0027s package might be a great place to start exploring this feature. Also @mehmetakbulut would you be willing to help design and contribute something based on the work you\u0027ve done? It looks like you\u0027ve basically explored all the options.",
        "createdAt": "2021-04-06T09:08:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-813961606"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgyMjA1NDk1Ng==",
        "parentId": null,
        "author": "mehmetakbulut",
        "content": "I\u0027d be happy to. Is there other work, concerns or timeline on you guys\u0027 end I should be aware of?\r\n\r\nI expect that the source generator solution is probably what would be of interest.",
        "createdAt": "2021-04-18T20:22:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-822054956"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgyMjY1ODI3MQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E Is there other work, concerns or timeline on you guys\u0027 end I should be aware of?\r\n\r\nIf we want something for the .NET 6 release it should probably be done by mid July, we might be able to push it to mid August especially if it\u0027s a new package. Otherwise, there are no concerns.\r\n\r\nSome things off the top of my head we\u0027ll need to think about:\r\n* Generate from server-side hub class?\r\n* Generate from client-side interface\r\n* Invoke/Send/Stream (interface only)\r\n  * Note: Synethetic arguments on Hub methods shouldn\u0027t be reflected on client side (currently only CancellationToken)\r\n  * CancellationToken on the client side calls, should it just be \u0060CancellationToken = default\u0060 or generate 2 methods each?\r\n* .On handlers\r\n  * Should there be an interface for these and then if you want to provide an implementation for a specific one you can?\r\n  * Should you just register a whole implementation class for all callbacks?\r\n* Should the API be part of the builder pattern or something you do after HubConnectionBuilder.Build",
        "createdAt": "2021-04-19T17:51:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-822658271"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgyMjY3NjMwMw==",
        "parentId": null,
        "author": "Thorium",
        "content": "\u003E Generate from server-side hub class?\r\n\u003E Generate from client-side interface\r\n\r\nI\u0027d like to see this feature being usable from non-.NET-client (like TypeScript).\r\nThe current non-core implementation is just an exe-file that parses the source-code hub-class attributes, and dumps the client in wanted language. Which is enough I think.\r\n",
        "createdAt": "2021-04-19T18:19:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-822676303"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgyMjg1ODA3NQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E I\u0027d like to see this feature being usable from non-.NET-client (like TypeScript).\r\n\r\nNoted, we\u0027ll probably start with the .NET client and figure out what sort of pattern and API we want. Then we can start looking at other clients.",
        "createdAt": "2021-04-19T23:37:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-822858075"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgyMzc0MjQ5Nw==",
        "parentId": null,
        "author": "mehmetakbulut",
        "content": "\u003E Generate from server-side hub class vs Generate from client-side interface\r\n\r\nMy current approach generates on client-side. The interfaces live in a common project so the SignalR hubs implement them as well. I like this better than generating from a hub class because the interface can be defined independently and consumers don\u0027t have to take a direct dependency on anything strictly tied to a particular server or client implementation.\r\n\r\n\u003E CancellationToken on the client side calls, should it just be CancellationToken = default or generate 2 methods each?\r\n\r\nI\u0027d say this is tied to whether we return the same interface supplied by the user (e.g. \u0060TIntf AsStronglyTypedHub\u003CTIntf\u003E(this HubConnection conn)\u0060) or an extended type (e.g. \u0060ExtendedTIntf AsStronglyTypedHub\u003CTIntf\u003E(this HubConnection conn)\u0060). If both client and server share an interface and we return that interface, then we should respect the interface as defined.\r\n\r\nGiven an interface:\r\n\u0060\u0060\u0060csharp\r\n    public interface IMockHub\r\n    {\r\n        Task\u003CChannelReader\u003Cint\u003E\u003E StreamToClientViaChannel(List\u003Cint\u003E a);\r\n\r\n        Task\u003CChannelReader\u003Cint\u003E\u003E StreamToClientViaChannelWithToken(List\u003Cint\u003E a, CancellationToken cancellationToken);\r\n    }\r\n\u0060\u0060\u0060\r\n\r\nI currently generate:\r\n\u0060\u0060\u0060csharp\r\n    public sealed class GeneratedIMockHub : IMockHub\r\n    {\r\n        private readonly Microsoft.AspNetCore.SignalR.Client.HubConnection conn;\r\n        public GeneratedIMockHub(Microsoft.AspNetCore.SignalR.Client.HubConnection connection)\r\n        {\r\n            this.conn = connection;\r\n        }\r\n\r\n        public System.Threading.Tasks.Task\u003CSystem.Threading.Channels.ChannelReader\u003Cint\u003E\u003E StreamToClientViaChannel(System.Collections.Generic.List\u003Cint\u003E a)\r\n        {\r\n            return this.conn.StreamAsChannelAsync\u003Cint\u003E(\u0022StreamToClientViaChannel\u0022, a);\r\n        }\r\n\r\n        public System.Threading.Tasks.Task\u003CSystem.Threading.Channels.ChannelReader\u003Cint\u003E\u003E StreamToClientViaChannelWithToken(System.Collections.Generic.List\u003Cint\u003E a, System.Threading.CancellationToken cancellationToken)\r\n        {\r\n            return this.conn.StreamAsChannelAsync\u003Cint\u003E(\u0022StreamToClientViaChannelWithToken\u0022, a, cancellationToken);\r\n        }\r\n    }\r\n\u0060\u0060\u0060\r\n\r\nAs such generating alternate methods is not too hard. However I currently return the same interface provided by the user so such alternate methods couldn\u0027t be exposed to the user. I think this makes it simpler for the user conceptually since they don\u0027t need to know about a custom type generated by us.\r\n\r\nIf we are generating from a hub class or returning an extended type, then yes we can take some creative freedoms..\r\n\r\n\u003E On handlers\r\n\r\nHandlers don\u0027t require anything beyond simple reflection to register callbacks with the \u0060HubConnection\u0060 object. An interface is not even necessary. Though without a shared interface, you risk registering callbacks that you may not have intended to be callbacks or mismatch what the server expects due to a typo.\r\n\r\n\u003E Should there be an interface for these and then if you want to provide an implementation for a specific one you can?\r\n\r\nMy current solution allows you to provide just an implementation (it is then assumed that all public methods are callbacks) or an interface plus an implementation (subset defined by the interface are callbacks). I think this works well because the client could independently define an interface (if one isn\u0027t supplied by server), capturing only the callbacks they care about. I called these handlers \u0022Spokes\u0022 (spoke and hub??), in hindsight I admit it wasn\u0027t the best name.. The most verbose signature I\u0027ve is: \u0060SpokeRegistration RegisterSpoke\u003CTSpokeIntf, TSpokeImpl\u003E(this HubConnection conn, TSpokeImpl spoke)\u0060 where \u0060SpokeRegistration\u0060 is an \u0060IDisposable\u0060 so the callback registrations can be undone later.\r\n\r\n\u003E Should you just register a whole implementation class for all callbacks?\r\n\r\nI think there is value in being able to register multiple implementations so different classes could capture different pieces. This does open the door to overlapping surfaces but could potentially be detected by analyzers.\r\n\r\n\u003E Should the API be part of the builder pattern or something you do after HubConnectionBuilder.Build\r\n\r\nI haven\u0027t taken much look in the builder code but if the underlying \u0060HubConnection\u0060 is exposed, then it would be easy to do it from builder as well. I originally wrote my own builder but later changed approach to providing extensions methods on \u0060HubConnection\u0060 (for both acquiring a strongly typed hub proxy as well as registering handlers) because I figured (1) that would be the simplest approach for a third party package and (2) it still allowed the underlying \u0060HubConnection\u0060 to be freely used by the user where the library didn\u0027t cover all cases and didn\u0027t need to worry about how the user got the \u0060HubConnection\u0060.\r\n",
        "createdAt": "2021-04-21T03:03:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-823742497"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgzNTk1NjUwMQ==",
        "parentId": null,
        "author": "mehmetakbulut",
        "content": "@davidfowl @BrennanConroy @halter73 Took me a while to get back to this but I\u0027ve opened up a design proposal capturing some of my own experience as well as questions in this ticket. I think it should be a good starting point but heavy scrutiny is needed to hammer out a design and implementation. https://github.com/dotnet/aspnetcore/issues/32534",
        "createdAt": "2021-05-10T00:03:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-835956501"
      },
      {
        "id": "IC_kwDOAQzde840wmbm",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Backlogging this issue, the C# work is being worked on for 6.0 in https://github.com/dotnet/aspnetcore/issues/32534\r\n\r\nOther client(s) will be considered in the future.",
        "createdAt": "2021-07-22T18:55:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-885155558"
      },
      {
        "id": "IC_kwDOAQzde840wmc_",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-22T18:55:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-885155647"
      },
      {
        "id": "IC_kwDOAQzde85J-vbH",
        "parentId": null,
        "author": "curt-w",
        "content": "I\u0027m also looking for this, implementation on Blazor / using the .NET client.",
        "createdAt": "2022-09-08T20:12:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-1241183943"
      },
      {
        "id": "IC_kwDOAQzde86alTkb",
        "parentId": null,
        "author": "QrystaL",
        "content": "Are there any updates for TS/JS proxy?",
        "createdAt": "2025-01-15T17:01:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/15198#issuecomment-2593470747"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1MTMzMDE5MTI=",
    "title": "SignalR : Java Client : stop in on doesn\u0027t work",
    "url": "https://github.com/dotnet/aspnetcore/issues/16598",
    "createdAt": "2019-10-28T13:26:13Z",
    "lastUpdated": "2021-07-29T18:57:43Z",
    "body": "Hello,\r\nmy existing java client code migrated to Core cannot stop...\r\nseems that the state never change even if i call stop() several times.. is there a workaround ?\r\n\r\n\u0060\u0060\u0060\r\nwhile (Connection.getConnectionState() != HubConnectionState.DISCONNECTED) {\r\n\t\t\ttry {\r\n\t\t\t\t\tConnection.stop();\r\n\t\t\t\t\tThread.sleep(100);\r\n\t\t\t\t}\r\n\t\t\tcatch (InterruptedException e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t}\r\n\t\tSystem.exit(0);\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "bug",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NzAxNDE3NQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "You shouldn\u0027t need to call stop in a loop. Instead you can await the stop call. Like \u0060Connection.stop().blockingAwait();\u0060",
        "createdAt": "2019-10-28T15:55:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-547014175"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NzEwNTQwOA==",
        "parentId": null,
        "author": "TheCamel",
        "content": "why not...but with previous version , i had to do this because if i call System.exit(0); before being sure the hub is closed...then signalR let a tcp connection open !\r\n\r\nI tested what you suggest and Connection.stop().blockingAwait(); never return !?!?\r\n",
        "createdAt": "2019-10-28T19:20:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-547105408"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NzE2OTEzMQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "What version of the Java client are you using?\r\n\r\nCould you enable logging on the [client](https://docs.microsoft.com/aspnet/core/signalr/java-client?view=aspnetcore-3.0#add-logging) and the [server](https://docs.microsoft.com/aspnet/core/signalr/diagnostics?view=aspnetcore-3.0) and share them please?\r\n\r\n",
        "createdAt": "2019-10-28T22:16:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-547169131"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NzI4MTk0Mg==",
        "parentId": null,
        "author": "TheCamel",
        "content": "i am using java 8; build 231 (1.8.0_231-b11) with signalR 1.0.0 \u002B gson 2.8.5 \r\n\r\nand slf4-nop 1.7.28 because was an error....\r\ni see the disconnect event on the hub\r\ndon\u0027t know how to get more log for you...\r\n",
        "createdAt": "2019-10-29T06:50:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-547281942"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0NzQ3OTg4MQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E slf4-nop\r\n\r\nDoesn\u0027t that logger implementation not log...?\r\n\r\nWe need to see the server and client logs to be able to make progress here. If you\u0027re worried about sensitive information I can provide an email for you to send the logs to.\r\n\r\nEven better would be if you could provide a simple repo with the client and server code that reproduces the issue.",
        "createdAt": "2019-10-29T15:29:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-547479881"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0Nzc2NDQ0Nw==",
        "parentId": null,
        "author": "TheCamel",
        "content": "I don\u0027t know how to get the logs....\r\n\r\nI can send you all my code if you want, it is simple : a vs2017 solution to build the hub and an eclipse folder to debug the \u0022java client\u0022; \r\n\r\nStart the index.html (open a hub client; copy/paste the java guid into the textbox and start \u0022simulate client\u0022; then start the java \u0027applet\u0027. in the \u0022client session\u0022 part : Press the \u0027detect plugin\u0027 button to see if ok; then the \u0027stop\u0027 button. this send a closing message to the java part\r\n",
        "createdAt": "2019-10-30T07:01:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-547764447"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU0OTM4NTM4NA==",
        "parentId": null,
        "author": "TheCamel",
        "content": "I end up with the following:\r\n-build;\r\n-start;\r\n-send message\r\n-disconnect \r\n==\u003E my close function works and state is changing\r\n\r\nbut when I send the close from the server , then it locks somewhere ? so it seems that we cannot close the hub in a \u0022on\u0022 delegate ?\r\n\r\nand if I just run a timer, then it close without any trouble\r\n\r\nPlease, any comment would be nice\r\n\r\n\r\n\r\nhubConnection.on(\u0022stopXSCP\u0022, ()-\u003E {\r\n\t\t\t\t\t\tGlobals.updateLastMessageReceive();\r\n\t\t\t\t\t\tClose(hubConnection);\r\n\t\t\t\t});\r\n\r\npublic static void Close(HubConnection hub)\r\n\t{\r\n\t\r\n\t\twhile (hub.getConnectionState() != HubConnectionState.DISCONNECTED) {\r\n\t\t\ttry {\r\n\t\t\t\thub.stop();\r\n\t\t\t\t\tThread.sleep(100);\r\n\t\t\t\t}\r\n\t\t\tcatch (InterruptedException e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t}\r\n\t\tSystem.exit(0);\r\n\t}\r\n\r\n\r\n",
        "createdAt": "2019-11-04T14:43:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-549385384"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU1MTE1NzIzMg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "I see, so you\u0027re blocking the \u0060on\u0060 callback with a call to \u0060stop\u0060.\r\n\r\nThat might not work in the Java client right now. I would suggest either launching a task and running \u0060stop\u0060 in that, or kicking off something else that runs \u0060stop\u0060 and unblock the \u0060on\u0060 callback as soon as possible.\r\n\r\nMarking as investigate for the team to take a look at if this is working in the Java client.",
        "createdAt": "2019-11-07T16:30:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-551157232"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU1MTE4MzM2NA==",
        "parentId": null,
        "author": "TheCamel",
        "content": "Yes, I would say that the Stop is blocked because in the On callback... :-)\r\nI have made a change with a watching thread to surround the problem. \r\n\r\nHave you seems my request about the cookies ? it is really blocking me in the migration  #16847\r\nbye",
        "createdAt": "2019-11-07T17:32:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-551183364"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU1MTMxMTIwMw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Let\u0027s take a look and see if calling \u0060stop\u0060 in an \u0060on\u0060 callback is working.\r\n\r\n\u003E I can send you all my code if you want\r\n\r\nPlease do post a runnable sample @TheCamel . Even if it\u0027s \u0022just a few projects\u0022 it\u0027s essential that we see the full context in order to understand what\u0027s going on.",
        "createdAt": "2019-11-07T23:19:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-551311203"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU1MTgyMzA4OQ==",
        "parentId": null,
        "author": "TheCamel",
        "content": "have added you to acces a private repo, \r\n\r\nsrlo.sln to create a hub\r\n\r\nsrlo.plugin is the eclipse/maven project\r\n\r\ntell me if any trouble\r\n",
        "createdAt": "2019-11-08T13:49:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-551823089"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU1MTk3ODA5NA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Please ensure @BrennanConroy has access, he\u0027ll be doing an investigation into this.",
        "createdAt": "2019-11-08T20:26:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-551978094"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU1MjU1MjcxMA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E Let\u0027s take a look and see if calling \u0060stop\u0060 in an \u0060on\u0060 callback is working.\r\n\r\nVerified that calling \u0060connection.stop().blockingAwait();\u0060 will not work.\r\n\r\n@TheCamel you can remove our access to your repo.",
        "createdAt": "2019-11-11T18:12:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-552552710"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU1MjU3Mzc0Mg==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Ok, we can look resolving this or at least providing better error messaging for 5.0. For now @TheCamel you\u0027ll have to do your \u0060stop\u0060 calls outside of \u0060on\u0060 callbacks (even if you just fire off a new thread to do it). This is a common area we can get some deadlocks, we\u0027ve seen similar behavior in .NET, so we\u0027ll take a look at finding the right solution.",
        "createdAt": "2019-11-11T19:10:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-552573742"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY3NjY3MzQ2MA==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-08-19T20:36:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-676673460"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyNTk4ODIxNw==",
        "parentId": null,
        "author": "benrebak",
        "content": "Is there any update on this? I get this problem when I run the following code:\r\n\r\n\u0060\u0060\u0060\r\nclass SignalRExample {\r\n    public static void main(String[] args) {\r\n        HubConnection hubConnection = HubConnectionBuilder.create(\u0022placeholder-url\u0022).build();\r\n        hubConnection.on(\u0022Delivery\u0022, SignalRExample::ReceiveDelivery, String.class);\r\n        hubConnection.start().blockingAwait();\r\n\r\n        try (Scanner reader = new Scanner(System.in)) {\r\n            String input = \u0022\u0022;\r\n            while (!input.equals(\u0022leave\u0022)) {\r\n                input = reader.nextLine();\r\n            }\r\n        }\r\n\r\n        hubConnection.stop().blockingAwait();\r\n    }\r\n\r\n    public static void ReceiveDelivery(String delivery) {\r\n        // ...\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nIf I run this and type leave into the console, the program doesn\u0027t stop.",
        "createdAt": "2020-11-12T10:25:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-725988217"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyNjIzNDUyOA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "This issue is about calling \u0060stop\u0060 inside one of your \u0060.on\u0060 callbacks. Looks like you\u0027re having a different problem, please file an issue with details about the problem you\u0027re experiencing.",
        "createdAt": "2020-11-12T17:47:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-726234528"
      },
      {
        "id": "IC_kwDOAQzde841AujJ",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-29T18:57:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16598#issuecomment-889383113"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1MTk1NTAxMDg=",
    "title": "Add a \u0060SendInAllGroups(string group1, string group2)\u0060",
    "url": "https://github.com/dotnet/aspnetcore/issues/16908",
    "createdAt": "2019-11-07T22:29:31Z",
    "lastUpdated": "2020-11-09T21:27:04Z",
    "body": "It would be really useful to have an \u0060And\u0060 like operator on groups where you can send a message to clients in a number of groups: user intersection in groups. Maybe useful to expose \u0060HubGroupList\u0060 to allow richer linq statements ",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU1MTg4OTgyNA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "We have \u0060await Clients.Groups(group1, group2, etc...).SendAsync(...);\u0060 already.\r\nhttps://source.dot.net/#Microsoft.AspNetCore.SignalR.Core/IHubClients%2560T.cs,d37e9b653646baf5",
        "createdAt": "2019-11-08T16:13:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16908#issuecomment-551889824"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU1MjE4NTE3MA==",
        "parentId": null,
        "author": "aateeque",
        "content": "I meant more like send to Client if Client is in group1 AND group2; from the doc on that method it\u0027s for all clients in all groups given. ",
        "createdAt": "2019-11-10T11:15:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16908#issuecomment-552185170"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU1MzYwNTQ3MQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "\u003E Maybe useful to expose \u0060HubGroupList\u0060 to allow richer linq statements\r\n\r\nThat only works when you have a single server though. As soon as you have Azure SignalR or Redis in place, there is no one list of group members.\r\n\r\n\u003E It would be really useful to have an \u0060And\u0060 like operator on groups where you can send a message to clients in a number of groups: user intersection in groups.\r\n\r\nWe never had this in ASP.NET SignalR (that I\u0027m aware of). Generally the pattern we recommended was for you to create intersection groups yourself if you need them. Adding new \u0022addresses\u0022 like this is quite costly since it requires updates and support across scale-out systems (Redis and Azure SignalR).\r\n\r\nIn particularly, this one is challenging because we implement groups using Redis channels and there\u0027s no way to do intersection there. We\u0027d have to implement intersection on each server, which is costly.\r\n\r\nGiven the history here, I don\u0027t think this is a high priority for us, at least not without more customer feedback.",
        "createdAt": "2019-11-13T21:14:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/16908#issuecomment-553605471"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1MzgxNTM5NTA=",
    "title": "\u0022stateChanged\u0022 missing from Typescript SignalR lifetime events?",
    "url": "https://github.com/dotnet/aspnetcore/issues/17900",
    "createdAt": "2019-12-16T02:40:01Z",
    "lastUpdated": "2023-10-28T14:08:17Z",
    "body": "### Describe the bug\r\nonreconnecting, onreconnected, onclose, and the event from start() are the only ones supported currently in the Typescript client, is this correct?\r\n\r\n### To Reproduce\r\nAttempt to use stateChanged ..\r\n\r\n### Further technical details\r\nSignalR for Typescript version 3.1.0.",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "api-suggestion",
      "severity-minor",
      "affected-very-few",
      "help candidate"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2NjE0MjU0OA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "There is no state change event. You might be confusing this with the previous version of \r\n SignalR (https://github.com/SignalR/SignalR)",
        "createdAt": "2019-12-16T16:44:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17900#issuecomment-566142548"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2NjI3NDg0MQ==",
        "parentId": null,
        "author": "cyraid",
        "content": "Actually I was getting it from your [docs](https://docs.microsoft.com/en-us/aspnet/signalr/overview/guide-to-the-api/hubs-api-guide-javascript-client#connectionlifetime). The docs state it\u0027s for the Javascript client, so I thought it\u0027d be similar?\r\n\r\nAre there any Typescript reference / docs / guides / examples? Am I using the wrong SignalR for typescript? In my package.json I have: @microsoft/signalr with version 3.1.0.",
        "createdAt": "2019-12-16T22:27:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17900#issuecomment-566274841"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2NzIxMzMxNw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "\u003E Actually I was getting it from your [docs](https://docs.microsoft.com/en-us/aspnet/signalr/overview/guide-to-the-api/hubs-api-guide-javascript-client#connectionlifetime). The docs state it\u0027s for the Javascript client, so I thought it\u0027d be similar?\r\n\r\nThose are the docs for the previous version of SignalR. Note the banner at the top of the page:\r\n\r\n![ASP.NET SignalR docs with a banner indicating that the docs are for a previous version of SignalR](https://user-images.githubusercontent.com/7574/71123325-3d460a00-2197-11ea-85da-7061a4d109a0.png)\r\n\r\nAre you using ASP.NET Core? If so, the docs can be found here: https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction?view=aspnetcore-3.1",
        "createdAt": "2019-12-18T21:07:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17900#issuecomment-567213317"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2NzcwODM3Ng==",
        "parentId": null,
        "author": "cyraid",
        "content": "Oh, apologies for not reading that. I did a search from Google and plopped on that page and must\u0027ve scrolled to the events part. Is there a way to get events other than onreconnecting, onclose (specifically for the state field in the HubConnection)?",
        "createdAt": "2019-12-19T22:35:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17900#issuecomment-567708376"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2Nzk3NTc2Ng==",
        "parentId": null,
        "author": "analogrelay",
        "content": "\u003E Is there a way to get events other than onreconnecting, onclose (specifically for the state field in the HubConnection)\r\n\r\nWhat other events are you looking for? The only other lifecycle event I can think of here is when the connection is started, but you can know when that happens because the Promise returned by \u0060.start()\u0060 will be completed.\r\n\r\n(Moving this to the Discussions milestone as this is more of a question on how to follow lifecycle events. If actionable work comes out the discussion we can file issues for that!)",
        "createdAt": "2019-12-20T16:03:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17900#issuecomment-567975766"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU2Nzk3OTYyMw==",
        "parentId": null,
        "author": "cyraid",
        "content": "Was kinda hoping for all states of:\r\n\r\n\u0060\u0060\u0060Typescript\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \u0022Disconnected\u0022,\r\n    /** The hub connection is connecting. */\r\n    Connecting = \u0022Connecting\u0022,\r\n    /** The hub connection is connected. */\r\n    Connected = \u0022Connected\u0022,\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \u0022Disconnecting\u0022,\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \u0022Reconnecting\u0022\r\n\u0060\u0060\u0060\r\n\r\nIt would also be nice if it were all in an event listener / subscriber type event state change like the \u0027stateChanged\u0027 instead of having to change the onreconnecting, onreconnect, onclose all separately.. Just a nit-pick I suppose. I\u0027ve made my own subscriber interface using rxjs, and just set the events, and on each event trigger the state change event.",
        "createdAt": "2019-12-20T16:14:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17900#issuecomment-567979623"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2ODA3NTg4OA==",
        "parentId": null,
        "author": "??",
        "content": "\u003E \r\n\u003E \r\n\u003E Was kinda hoping for all states of:\r\n\u003E \r\n\u003E \u0060\u0060\u0060ts\r\n\u003E     /** The hub connection is disconnected. */\r\n\u003E     Disconnected = \u0022Disconnected\u0022,\r\n\u003E     /** The hub connection is connecting. */\r\n\u003E     Connecting = \u0022Connecting\u0022,\r\n\u003E     /** The hub connection is connected. */\r\n\u003E     Connected = \u0022Connected\u0022,\r\n\u003E     /** The hub connection is disconnecting. */\r\n\u003E     Disconnecting = \u0022Disconnecting\u0022,\r\n\u003E     /** The hub connection is reconnecting. */\r\n\u003E     Reconnecting = \u0022Reconnecting\u0022\r\n\u003E \u0060\u0060\u0060\r\n\u003E \r\n\u003E It would also be nice if it were all in an event listener / subscriber type event state change like the \u0027stateChanged\u0027 instead of having to change the onreconnecting, onreconnect, onclose all separately.. Just a nit-pick I suppose. I\u0027ve made my own subscriber interface using rxjs, and just set the events, and on each event trigger the state change event.\r\n\r\nCame here looking for the exact same thing. StompJS has a stateChanged RxJS Observable that is very nice to work with. Would love to see that added to the signalR library",
        "createdAt": "2020-08-03T15:09:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17900#issuecomment-668075888"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY5MTMxMjAwNg==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-09-11T21:06:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17900#issuecomment-691312006"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzk2ODU2NQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "None of the clients currently support state changed events.",
        "createdAt": "2021-04-06T09:19:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/17900#issuecomment-813968565"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1NTM4NDI1NTk=",
    "title": "Evaluate the impact of Chromium Edge on SignalR browser-based testing.",
    "url": "https://github.com/dotnet/aspnetcore/issues/18524",
    "createdAt": "2020-01-22T22:55:35Z",
    "lastUpdated": "2020-11-11T23:07:20Z",
    "body": "Our browser-based tests use Karma\u0027s edge launcher, and Sauce Labs when running in the cloud. I expect that is launching Edge Legacy, rather than the Chromium-based Edge, but we should check that and look at splitting our testing so we\u0027re testing both Edge Legacy and Edge Chromium.",
    "upvotes": 0,
    "labels": [
      "task",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU3ODI2MzUxNg==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Also, we can probably run Edge tests on AzDO now since Chromium Edge probably supports headless!\r\n\r\nWe\u0027re ok with shifting Edge Legacy testing to Sauce Labs.",
        "createdAt": "2020-01-24T19:17:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18524#issuecomment-578263516"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwMDc0MjQwMQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Pre-planning notes: Punty punt. We have Chromium coverage already.",
        "createdAt": "2020-03-18T16:48:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18524#issuecomment-600742401"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1NTU0NDExMTg=",
    "title": "Add converter options for Java client",
    "url": "https://github.com/dotnet/aspnetcore/issues/18596",
    "createdAt": "2020-01-27T09:07:35Z",
    "lastUpdated": "2020-11-24T17:53:49Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\nMy application is using moshi, and i want to integrate SignalR, but i have to use Gson too now that i use SignalR(also rxjava).\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nI want to be able to use a converter like retrofit does, providing an interface for serialize/deserialize and implement it with gson/moshi or anything i want.\r\nGsonConverterFactory and MoshiConverterFactory.\r\n",
    "upvotes": 1,
    "labels": [
      "enhancement",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczMzEzOTY4NA==",
        "parentId": null,
        "author": "4brunu",
        "content": "I have the same issue.\r\nAny news on this?",
        "createdAt": "2020-11-24T17:53:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18596#issuecomment-733139684"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1NTgxNzYxODE=",
    "title": "Add support for flowing the Activity/distributed trace context via SignalR invocations",
    "url": "https://github.com/dotnet/aspnetcore/issues/18711",
    "createdAt": "2020-01-31T14:48:39Z",
    "lastUpdated": "2023-02-01T07:42:59Z",
    "body": "We need to make a provision in the SignalR hub protocol for flowing the distributed trace context. This will enable causality tracking across multiple SignalR applications or from an HTTP server calling a SignalR method. It\u0027s also worth thinking about what it means to flow the context back to the client for server -\u003E client invocations.\r\n",
    "upvotes": 5,
    "labels": [
      "enhancement",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU4MDg2OTc2MA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "If we expanded Hub Pipeline to work on the client as well, this could probably be done in that.",
        "createdAt": "2020-01-31T19:10:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18711#issuecomment-580869760"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxNDQyOTgyMw==",
        "parentId": null,
        "author": "davidfowl",
        "content": "@anurse it also needs to be done client side. \r\n\r\n@SergeyKanzhelev We should have a quick sync about this.",
        "createdAt": "2020-04-16T05:50:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18711#issuecomment-614429823"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzk2OTAyNA==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-04-06T09:20:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18711#issuecomment-813969024"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzk2OTUxOA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "We have headers in messages, we could finally use them here @BrennanConroy. It\u0027ll end up allocating async locals though...",
        "createdAt": "2021-04-06T09:20:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18711#issuecomment-813969518"
      },
      {
        "id": "IC_kwDOAQzde841AtCr",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-29T18:47:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18711#issuecomment-889376939"
      },
      {
        "id": "IC_kwDOAQzde85K8FCl",
        "parentId": null,
        "author": "alexdresko",
        "content": "Ha. I just spent a lot of time getting my .NET 6 application in my k8s cluster to post its metrics and traces through otelcol to jaeger, only to find out that the SignalR integration just isn\u0027t there. That\u0027s pretty disappointing from where I sit right now, so I\u0027m leaving a comment to remind people that this is an important issue. :) ",
        "createdAt": "2022-09-25T19:32:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18711#issuecomment-1257263269"
      },
      {
        "id": "IC_kwDOAQzde85UIz24",
        "parentId": null,
        "author": "phaza",
        "content": "For everyone else who struggles with this, there\u0027s work in progress here to fix this: https://github.com/dotnet/aspnetcore/pull/46164",
        "createdAt": "2023-02-01T07:42:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18711#issuecomment-1411595704"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1NjAwNDI5MTE=",
    "title": "Run NPM and Java tests in Helix",
    "url": "https://github.com/dotnet/aspnetcore/issues/18799",
    "createdAt": "2020-02-04T23:33:10Z",
    "lastUpdated": "2020-11-10T00:05:50Z",
    "body": "We should ensure we are running our SignalR NPM and Java tests in Helix to get full coverage. As part of this, we can review how they appear in the TestResults table to make sure we know how to categorize them properly.\r\n\r\n- [x] Java\r\n- [ ] Npm",
    "upvotes": 0,
    "labels": [
      "task",
      "area-signalr",
      "severity-minor",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU4MjE3Mzk4Ng==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "~~Blocked by https://github.com/dotnet/arcade/issues/4762~~",
        "createdAt": "2020-02-04T23:55:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18799#issuecomment-582173986"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU4NTg4MDMyOQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "NPM tests are on hold for now as they are complex and will likely take more resources than we\u0027d like to spend on them right now.",
        "createdAt": "2020-02-13T17:38:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18799#issuecomment-585880329"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU5NTMzMDk1OA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "@anurse should we backlog this for npm?",
        "createdAt": "2020-03-05T16:48:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18799#issuecomment-595330958"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDU5NTM3NTk0MA==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Yeah.",
        "createdAt": "2020-03-05T18:23:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/18799#issuecomment-595375940"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1ODIxNDQ5MTA=",
    "title": "Add client certificate support to SignalR JavaScript Client",
    "url": "https://github.com/dotnet/aspnetcore/issues/19875",
    "createdAt": "2020-03-16T09:43:35Z",
    "lastUpdated": "2020-11-13T16:27:11Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\n\r\nThe SignalR server requires client certificate but it seems currently not possible to supply a client certificate to the SignalR JavaScript Client running on Node.js.\r\n\r\n### Describe the solution you\u0027d like\r\nAn API to specify a client certificate or configure the underlying client.",
    "upvotes": 1,
    "labels": [
      "enhancement",
      "area-signalr",
      "severity-major",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyNjg2MDA1Nw==",
        "parentId": null,
        "author": "Binney",
        "content": "\u002B1 to this, I am having the exact same problem. there\u0027s apparently a way to hack through it in the C# client ([eg here](https://stackoverflow.com/questions/60274147/ignore-self-signed-certificate-when-building-url-for-signalr-javascript-client)) but I need to do something similar in my Node server",
        "createdAt": "2020-11-13T16:27:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/19875#issuecomment-726860057"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1ODUzNjMyNjk=",
    "title": "[TEST KO] Cannot make RedisEndToEnd pass locally on master branch",
    "url": "https://github.com/dotnet/aspnetcore/issues/20040",
    "createdAt": "2020-03-20T22:42:24Z",
    "lastUpdated": "2024-02-07T05:54:52Z",
    "body": "### Describe the bug\r\nAs i was trying to do PR #20031 i saw that lots of \u0060Redis\u0060 test were not passing \r\n\r\n### To Reproduce\r\nClone the branch from #20031, run \u0060docker for windows\u0060\r\nand run all tests from \u0060RedisEndToEnd.cs\u0060\r\n\r\n### Further technical details\r\n- \u0060master\u0060 branch here\r\n- Happen on both \u0060build.cmd -test\u0060 and \u0060Vs 16.6 Preview1\u0060\r\n\r\n### More details :\r\nI can\u0027t make pass all the \u0060RedisEndToEnd\u0060 tests from both \u0060build.cmd -test\u0060 and \u0060VS2019 16.6 Preview1\u0060 :(\r\n\r\nI even updates locally \u0060StackExchange.Redis\u0060 to \u00602.1.0\u0060 that was release yesterday as it contains lots of error message enhancement/fix, still the same result.\r\nCan someone reproduce or make them pass ?\r\n\r\nHere is what i see :\r\nI had to put a break point on the failing line : https://github.com/dotnet/aspnetcore/blob/master/src/SignalR/server/StackExchangeRedis/test/RedisEndToEnd.cs#L111\r\n![image](https://user-images.githubusercontent.com/2266487/77208797-e38a0e80-6afc-11ea-8496-d07282893799.png)\r\n\r\n(Even using \u0060docker logs --follow \u003Cname\u003E\u0060 does no see anymore activity, until the container is destroy because it\u0027s starterd with \u0060--rm\u0060)\r\n\r\nOne example of error :\r\n\u0060\u0060\u0060\r\n Message: \r\n    Microsoft.AspNetCore.SignalR.HubException : An unexpected error occurred invoking \u0027EchoUser\u0027 on the server. RedisConnectionException: No connection is available to service this operation: PUBLISH Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.EchoHub:user:userA; UnableToConnect on 172.17.0.2:6379/Interactive, Initializing/NotStarted, last: NONE, origin: BeginConnectAsync, outstanding: 0, last-read: 37s ago, last-write: 37s ago, keep-alive: 60s, state: Connecting, mgr: 10 of 10 available, last-heartbeat: never, global: 0s ago, v: 2.0.593.37019; IOCP: (Busy=0,Free=1000,Min=16,Max=1000), WORKER: (Busy=5,Free=32762,Min=16,Max=32767), Local-CPU: n/a\r\n  Stack Trace: \r\n    HubConnection.InvokeCoreAsyncCore(String methodName, Type returnType, Object[] args, CancellationToken cancellationToken) line 776\r\n    ForceAsyncAwaiter\u00601.GetResult() line 64\r\n    HubConnection.InvokeCoreAsync(String methodName, Type returnType, Object[] args, CancellationToken cancellationToken) line 390\r\n    TaskExtensions.TimeoutAfter(Task task, TimeSpan timeout, String filePath, Int32 lineNumber) line 45\r\n    RedisEndToEndTests.CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser(HttpTransportType transportType, String protocolName) line 111\r\n    --- End of stack trace from previous location ---\r\n\u0060\u0060\u0060\r\n",
    "upvotes": 0,
    "labels": [
      "task",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde841AuzC",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-29T18:59:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20040#issuecomment-889384130"
      },
      {
        "id": "IC_kwDOAQzde85YrHGg",
        "parentId": null,
        "author": "eerhardt",
        "content": "This test failed again on my PR: #47450\r\n\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=220405\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=4127442\u0026resultId=122066\u0026paneView=debug\r\n\r\nhttps://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-aspnetcore-refs-pull-47450-merge-0e57b67cf6174d519f/Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests--net8.0/1/console.408f0c34.log?helixlogtype=result\r\n\r\n\u0060\u0060\u0060\r\n2023-03-28T21:49:03.9723220Z   Failed Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests.CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser(transportType: WebSockets, protocolName: \u0022json\u0022) [30 s]\r\n2023-03-28T21:49:03.9723288Z   Error Message:\r\n2023-03-28T21:49:03.9723320Z    System.TimeoutException : The operation has timed out.\r\n2023-03-28T21:49:03.9723348Z   Stack Trace:\r\n2023-03-28T21:49:03.9723375Z      at Microsoft.AspNetCore.Testing.TaskExtensions.TimeoutAfter[T](Task\u00601 task, TimeSpan timeout, String filePath, Int32 lineNumber)\r\n2023-03-28T21:49:03.9723409Z    at Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests.CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser(HttpTransportType transportType, String protocolName) in /_/src/SignalR/server/StackExchangeRedis/test/RedisEndToEnd.cs:line 111\r\n2023-03-28T21:49:03.9723527Z --- End of stack trace from previous location ---\r\n2023-03-28T21:49:03.9723559Z   Standard Output Messages:\r\n2023-03-28T21:49:03.9723589Z  | [0.001s] TestLifetime Information: Starting test CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser-WebSockets-json at 2023-03-28T21:48:33\r\n2023-03-28T21:49:03.9723755Z  | [0.002s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Registering handler for client method \u0027Echo\u0027.\r\n2023-03-28T21:49:03.9723793Z  | [0.003s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Registering handler for client method \u0027Echo\u0027.\r\n2023-03-28T21:49:03.9723818Z  | [0.003s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Starting HubConnection.\r\n2023-03-28T21:49:03.9723842Z  | [0.003s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Starting HttpConnection.\r\n2023-03-28T21:49:03.9723866Z  | [0.003s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Establishing connection with server at \u0027http://127.0.0.1:36685/echo\u0027.\r\n2023-03-28T21:49:03.9723890Z  | [0.005s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Established connection \u0027PELRLEGdVFdrQXbsd5qPZg\u0027 with the server.\r\n2023-03-28T21:49:03.9723946Z  | [0.005s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Starting transport \u0027WebSockets\u0027 with Url: http://127.0.0.1:36685/echo.\r\n2023-03-28T21:49:03.9723969Z  | [0.005s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Information: Starting transport. Transfer mode: Text. Url: \u0027ws://127.0.0.1:36685/echo?id=6zuVA1Wv8jcgfFoCPAOSaw\u0027.\r\n2023-03-28T21:49:03.9724112Z  | [0.006s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Started transport.\r\n2023-03-28T21:49:03.9724148Z  | [0.006s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Transport \u0027WebSockets\u0027 started.\r\n2023-03-28T21:49:03.9724177Z  | [0.007s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Information: HttpConnection Started.\r\n2023-03-28T21:49:03.9724205Z  | [0.007s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: Using HubProtocol \u0027json v1\u0027.\r\n2023-03-28T21:49:03.9724234Z  | [0.007s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending Hub Handshake.\r\n2023-03-28T21:49:03.9724262Z  | [0.007s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Received message from application. Payload size: 32.\r\n2023-03-28T21:49:03.9724415Z  | [0.007s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Message received. Type: Text, size: 3, EndOfMessage: True.\r\n2023-03-28T21:49:03.9724438Z  | [0.007s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Handshake with server complete.\r\n2023-03-28T21:49:03.9724459Z  | [0.007s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending PingMessage message.\r\n2023-03-28T21:49:03.9724594Z  | [0.007s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending PingMessage message completed.\r\n2023-03-28T21:49:03.9724628Z  | [0.008s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Receive loop starting.\r\n2023-03-28T21:49:03.9724714Z  | [0.008s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: HubConnection started.\r\n2023-03-28T21:49:03.9724739Z  | [0.008s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Starting HubConnection.\r\n2023-03-28T21:49:03.9724766Z  | [0.008s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Received message from application. Payload size: 11.\r\n2023-03-28T21:49:03.9724794Z  | [0.008s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Starting HttpConnection.\r\n2023-03-28T21:49:03.9724864Z  | [0.008s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Establishing connection with server at \u0027http://127.0.0.1:43153/echo\u0027.\r\n2023-03-28T21:49:03.9724886Z  | [0.009s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Established connection \u0027GZQaFT9Oo30R1QUKasixsg\u0027 with the server.\r\n2023-03-28T21:49:03.9725028Z  | [0.009s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Starting transport \u0027WebSockets\u0027 with Url: http://127.0.0.1:43153/echo.\r\n2023-03-28T21:49:03.9725069Z  | [0.009s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Information: Starting transport. Transfer mode: Text. Url: \u0027ws://127.0.0.1:43153/echo?id=W4o5Xc5G8ax2IW10iIOg-w\u0027.\r\n2023-03-28T21:49:03.9725098Z  | [0.010s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Started transport.\r\n2023-03-28T21:49:03.9725124Z  | [0.010s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Transport \u0027WebSockets\u0027 started.\r\n2023-03-28T21:49:03.9725151Z  | [0.010s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Information: HttpConnection Started.\r\n2023-03-28T21:49:03.9725176Z  | [0.010s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: Using HubProtocol \u0027json v1\u0027.\r\n2023-03-28T21:49:03.9725254Z  | [0.010s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending Hub Handshake.\r\n2023-03-28T21:49:03.9725281Z  | [0.010s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Received message from application. Payload size: 32.\r\n2023-03-28T21:49:03.9725401Z  | [0.011s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Message received. Type: Text, size: 3, EndOfMessage: True.\r\n2023-03-28T21:49:03.9725434Z  | [0.011s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Handshake with server complete.\r\n2023-03-28T21:49:03.9725461Z  | [0.011s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending PingMessage message.\r\n2023-03-28T21:49:03.9725486Z  | [0.011s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending PingMessage message completed.\r\n2023-03-28T21:49:03.9725511Z  | [0.011s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Receive loop starting.\r\n2023-03-28T21:49:03.9725534Z  | [0.011s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: HubConnection started.\r\n2023-03-28T21:49:03.9725556Z  | [0.011s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Registering Invocation ID \u00271\u0027 for tracking.\r\n2023-03-28T21:49:03.9725577Z  | [0.011s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending InvocationMessage message \u00271\u0027.\r\n2023-03-28T21:49:03.9725598Z  | [0.011s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending InvocationMessage message \u00271\u0027 completed.\r\n2023-03-28T21:49:03.9725622Z  | [0.011s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Received message from application. Payload size: 99.\r\n2023-03-28T21:49:03.9725780Z  | [0.013s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Message received. Type: Text, size: 101, EndOfMessage: True.\r\n2023-03-28T21:49:03.9725818Z  | [0.013s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Processing 101 byte message from server.\r\n2023-03-28T21:49:03.9725840Z  | [15.010s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending PingMessage message.\r\n2023-03-28T21:49:03.9725862Z  | [15.010s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending PingMessage message completed.\r\n2023-03-28T21:49:03.9725923Z  | [15.010s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Received message from application. Payload size: 11.\r\n2023-03-28T21:49:03.9725948Z  | [15.706s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Message received. Type: Text, size: 11, EndOfMessage: True.\r\n2023-03-28T21:49:03.9725976Z  | [15.706s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Processing 11 byte message from server.\r\n2023-03-28T21:49:03.9726006Z  | [15.902s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Message received. Type: Text, size: 11, EndOfMessage: True.\r\n2023-03-28T21:49:03.9726128Z  | [15.902s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Processing 11 byte message from server.\r\n2023-03-28T21:49:03.9726157Z  | [16.010s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending PingMessage message.\r\n2023-03-28T21:49:03.9726179Z  | [16.010s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending PingMessage message completed.\r\n2023-03-28T21:49:03.9726201Z  | [16.010s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Received message from application. Payload size: 11.\r\n2023-03-28T21:49:03.9726266Z  | [30.015s] Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests Error: Test threw an exception.\r\n2023-03-28T21:49:03.9726292Z  | System.TimeoutException: The operation has timed out.\r\n2023-03-28T21:49:03.9726321Z  |    at Microsoft.AspNetCore.Testing.TaskExtensions.TimeoutAfter[T](Task\u00601 task, TimeSpan timeout, String filePath, Int32 lineNumber)\r\n2023-03-28T21:49:03.9726433Z  |    at Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests.CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser(HttpTransportType transportType, String protocolName) in /_/src/SignalR/server/StackExchangeRedis/test/RedisEndToEnd.cs:line 111\r\n2023-03-28T21:49:03.9726486Z  |    at Xunit.Sdk.TestInvoker\u00601.\u003C\u003Ec__DisplayClass48_0.\u003C\u003CInvokeTestMethodAsync\u003Eb__1\u003Ed.MoveNext() in /_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs:line 264\r\n2023-03-28T21:49:03.9726511Z  | --- End of stack trace from previous location ---\r\n2023-03-28T21:49:03.9726539Z  |    at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func\u00601 asyncAction) in /_/src/xunit.execution/Sdk/Frameworks/ExecutionTimer.cs:line 48\r\n2023-03-28T21:49:03.9726561Z  |    at Xunit.Sdk.ExceptionAggregator.RunAsync(Func\u00601 code) in /_/src/xunit.core/Sdk/ExceptionAggregator.cs:line 90\r\n2023-03-28T21:49:03.9726584Z  | [30.016s] TestLifetime Information: Finished test CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser-WebSockets-json in 30.015068s\r\n2023-03-28T21:49:03.9726608Z \r\n\u0060\u0060\u0060",
        "createdAt": "2023-03-28T22:39:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20040#issuecomment-1487696288"
      },
      {
        "id": "IC_kwDOAQzde85zHehD",
        "parentId": null,
        "author": "tebeco",
        "content": "@eerhardt \r\nshould i close it at this point ?",
        "createdAt": "2024-02-07T05:54:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20040#issuecomment-1931339843"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU1OTMzODE4MTA=",
    "title": "SignalR js client doesn\u0027t fallback to LongPolling when it fails to connect with server side events",
    "url": "https://github.com/dotnet/aspnetcore/issues/20500",
    "createdAt": "2020-04-03T13:26:50Z",
    "lastUpdated": "2022-07-25T16:40:33Z",
    "body": "### Describe the bug\r\nSignalR js client doesn\u0027t fallback to LongPolling when it fails to connect with server side events.\r\n\r\n### To Reproduce\r\nSetup the scenario described in #20498 \r\n\r\nThe following is logged and it doesn\u0027t try to connect with LongPolling after SSE fails.\r\n![image](https://user-images.githubusercontent.com/3148297/78364353-99556280-75bd-11ea-8d6d-13b68f1f746d.png)\r\n\r\nThese are the network calls made.\r\n![image](https://user-images.githubusercontent.com/3148297/78364458-c30e8980-75bd-11ea-8ccb-bab97cd70e22.png)\r\n\r\n### Second scenario\r\nI also had the issue in another scenario where I think a local firewall is messing with the connection where it won\u0027t fallback to LongPolling.\r\nThere this is logged.\r\n![image](https://user-images.githubusercontent.com/3148297/78364756-49c36680-75be-11ea-86aa-44b5c6f7ae9a.png)\r\n\r\nAnd these network calls are made.\r\n![image](https://user-images.githubusercontent.com/3148297/78365258-1fbe7400-75bf-11ea-80c7-ad50f7c5b661.png)\r\n\r\nWhen I use an old version of ASP.Net SignalR on the same server the fallback to LongPolling works as expected.\r\n![image](https://user-images.githubusercontent.com/3148297/78364986-b0e11b00-75be-11ea-9c74-23c184ebfde3.png)\r\n\r\n### Further technical details\r\n- ASP.NET Core version 3.1",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwODQ1MDc3NQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Are you using https? In both cases the connection was successfully made but then it failed to communicate afterwards (likely something in between buffering responses).\n\nIt may be better in these scenarios to disable SSE completely.",
        "createdAt": "2020-04-03T14:02:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20500#issuecomment-608450775"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwODQ1NjExMw==",
        "parentId": null,
        "author": "Hrydberg",
        "content": "No I am not using https.\r\nBut shouldn\u0027t it fallback to LongPolling automatically like the old SignalR client did?",
        "createdAt": "2020-04-03T14:12:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20500#issuecomment-608456113"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwODQ1ODAzNQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "We\u2019ll investigate why it\u2019s happening for sure, old signalr makes some tradeoffs we won\u2019t be willing to make in the new version though (which greatly affect things like connection establishment time). \n\nAre you in a situation where you cannot use websockets? Or weee you just testing other transports to see the behavior.",
        "createdAt": "2020-04-03T14:16:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20500#issuecomment-608458035"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwODQ2MTQ1NQ==",
        "parentId": null,
        "author": "Hrydberg",
        "content": "We have some clients that are running our application on old Windows Server 2008 R2 where websockets isn\u0027t available.\r\nThank you for investigating this.",
        "createdAt": "2020-04-03T14:22:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20500#issuecomment-608461455"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwODQ5NzU4NA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "SSE has already connected successfully which will disable transport fallback. The real issue is https://github.com/dotnet/aspnetcore/issues/20498 which we will definitely take a look at.\r\n\r\nAlso, you should consider disabling SSE on the client. In fact, we\u0027re even considering removing SSE in a future release.",
        "createdAt": "2020-04-03T15:12:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20500#issuecomment-608497584"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYwODYzNTM4NQ==",
        "parentId": null,
        "author": "shirhatti",
        "content": "Triage: In the old SignalR client, we waited for a message to be received before disabling transport fallback. However, this is low priority",
        "createdAt": "2020-04-03T20:09:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20500#issuecomment-608635385"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzk3MDg0OA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "This feels like the proxy in the middle buffering problem because there\u0027s no https.",
        "createdAt": "2021-04-06T09:22:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20500#issuecomment-813970848"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxNDI1Mzk2Mg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Yes it\u0027s a proxy issue, but we could try to change our behavior here to fallback anyways. But because we assume \u0022start\u0022 or \u0022connect\u0022 succeeding is a successful connection instead of waiting for any bytes, we stop the fallback logic.",
        "createdAt": "2021-04-06T16:22:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20500#issuecomment-814253962"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxNDI1NTIyOA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Client work is work * 3 right now. This one might be small, but you tell me.",
        "createdAt": "2021-04-06T16:24:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20500#issuecomment-814255228"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxNDI1ODc1OA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "It probably isn\u0027t small. It\u0027s more internal state management which is always tricky.",
        "createdAt": "2021-04-06T16:29:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20500#issuecomment-814258758"
      },
      {
        "id": "IC_kwDOAQzde84_H0xR",
        "parentId": null,
        "author": "rajeevBlr",
        "content": "We are also facing this issue. After SSE fails, Signalr does not fallback to LongPolling. @BrennanConroy if possible please increase the severity of the bug.",
        "createdAt": "2022-03-04T10:01:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20500#issuecomment-1059015761"
      },
      {
        "id": "IC_kwDOAQzde85HKL6t",
        "parentId": null,
        "author": "MatthiasLichter",
        "content": "Do you have any updates on this issue? It is frustrating to search for and explain.",
        "createdAt": "2022-07-25T10:14:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20500#issuecomment-1193852589"
      },
      {
        "id": "IC_kwDOAQzde85HMBOD",
        "parentId": null,
        "author": "lawrencetaur",
        "content": "We had the same issue trying to connect React with 3 pods of our app connected to using Redis backplane served by Ingress Nginx on Kubernetes. \r\n\r\nHere are the nginx ingress annotations we used:\r\n\r\n\u0060\u0060\u0060\r\n    nginx.ingress.kubernetes.io/affinity: cookie\r\n    nginx.ingress.kubernetes.io/ssl-redirect: \u0022false\u0022\r\n    nginx.ingress.kubernetes.io/session-cookie-hash: sha1\r\n    nginx.ingress.kubernetes.io/session-cookie-name: REALTIMESERVERID\r\n    nginx.ingress.kubernetes.io/affinity-mode: persistent\r\n    nginx.ingress.kubernetes.io/session-cookie-secure: \u0022true\u0022\r\n    nginx.ingress.kubernetes.io/session-cookie-samesite: \u0022None\u0022\r\n\u0060\u0060\u0060\r\n    \r\n\u0060session-cookie-secure\u0060 and \u0060session-cookie-samesite\u0060 did the trick because our app was loading inside an iframe via Shopify. \r\n    ",
        "createdAt": "2022-07-25T16:40:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/20500#issuecomment-1194333059"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU2MDQ5NjQzMDU=",
    "title": "[Epic] SignalR Transport Updates",
    "url": "https://github.com/dotnet/aspnetcore/issues/21104",
    "createdAt": "2020-04-22T18:18:48Z",
    "lastUpdated": "2023-05-05T01:59:01Z",
    "body": "The idea here is to build a new transport based on HTTP streaming. The idea is for the client to establish **two** long-running HTTP requests. Termination of either request by either party tears down the whole connection (and terminates the other request). This transport is designed for HTTP/2 environments, and the transport would likely be designed to function only when the requests are actually using HTTP/2.\r\n\r\n* One request serves as the \u0022upstream\u0022 connection. The client sends the request headers (including auth) and then streams data to the server. The server **does not write any response** to this request until the connection terminates.\r\n\r\n* The other request serves as the \u0022downstream\u0022 connection. The client sends request headers and an empty body. The server sends a long-running response back and writes data to it as data becomes available. The server concludes the response when the connection is terminated.\r\n\r\n**Why two requests?** We could have a single request with both the client and server streaming request/response data. This is permitted in the HTTP protocol. However, support for this in all platforms (Browser, .NET, Node, Java, etc.) is limited and inconsistent. Doing this two-stream model **doesn\u0027t** stop us from doing a bi-directional transport in the future.\r\n\r\nWith this transport, we can also consider deprecating Server-Sent Events. The SSE transport provides a middle-ground between Long Polling and WebSockets and has served us well but it has limitations:\r\n\r\n* IE still doesn\u0027t support it, so it\u0027s usefulness as a \u0022downlevel\u0022 transport is limited. The set of browsers that support WebSockets is a superset of the set of browsers that support SSE\r\n* It can be impacted by proxies, though not as badly as WebSockets. We\u0027ve encountered proxies that buffer responses which delays messages and can break connections (if timeouts elapse)\r\n* It is limited to the JSON protocol. SSE is an inherently text-based protocol. It is sensitive to line-breaks, making it difficult to encode binary messages. While Base64 encoding is an option, we haven\u0027t use that and simply avoid using the SSE transport for MessagePack.\r\n\r\n----\r\n\r\nWork Items (see note below)\r\n* [ ] https://github.com/dotnet/aspnetcore/issues/21105 Update the [Transport Protocols](https://github.com/dotnet/aspnetcore/blob/master/src/SignalR/docs/specs/TransportProtocols.md) spec to include the new HTTP Streaming transport\r\n* [ ] Implement the HTTP Streaming transport in the .NET Server and Client\r\n* [ ] Implement the HTTP Streaming transport in the JavaScript Client\r\n* [ ] Update documentation on [SignalR Client Features](https://docs.microsoft.com/en-us/aspnet/core/signalr/client-features?view=aspnetcore-3.1) for 5.0\r\n* [ ] ~https://github.com/dotnet/aspnetcore/issues/20462 Remove ServerSentEvents transport~\r\n\r\nNote: This is something that\u0027s fairly low on our priority list for now and may not make 5.0, so we\u0027ve only created issues to track the initial work (rather than spamming the tracker with a bunch of small issues). As we move forward, we\u0027ll create work items to track the rest of the work.",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "Epic",
      "severity-minor",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxNzk1MTY4Ng==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Should do something about https://github.com/dotnet/aspnetcore/issues/12662",
        "createdAt": "2020-04-22T18:27:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/21104#issuecomment-617951686"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxNzk1MjIxOQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "OR close this as a dupe \uD83D\uDE04 ",
        "createdAt": "2020-04-22T18:28:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/21104#issuecomment-617952219"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxNzk1MjQ2OA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "This is the epic, so we\u0027ll keep it open",
        "createdAt": "2020-04-22T18:28:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/21104#issuecomment-617952468"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxNzk1NjI1MQ==",
        "parentId": null,
        "author": "analogrelay",
        "content": "Yep, was about to close that actually.",
        "createdAt": "2020-04-22T18:35:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/21104#issuecomment-617956251"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxNzk2OTc5Mw==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Also we\u0027re learning there are big issues around how clients behave when they hit various limits in HTTP/2 especially because we plan on having long running requests.\r\n\r\nTL;DR Some clients don\u0027t open new connections when they hit the concurrent streams limit. ",
        "createdAt": "2020-04-22T19:01:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/21104#issuecomment-617969793"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYxNzk5OTcxNA==",
        "parentId": null,
        "author": "halter73",
        "content": "\u003E TL;DR Some clients don\u0027t open new connections when they hit the concurrent streams limit.\r\n\r\nContext: https://github.com/dotnet/runtime/issues/35088\r\n\r\nConcurrent connection limits have always been an issue with SignalR. Browsers and the .NET framework used to enforce really low per-host concurrent connection limits. Browsers still do enforce low limits for non-WebSocket connections.\r\n\r\nOver time, browsers have gradually increased their WebSocket limits. Now it seems to be [up to 255](https://chromium.googlesource.com/chromium/src/net/\u002B/master/socket/client_socket_pool_manager.cc#48) concurrent WebSocket connections per host in Chrome and 200 in firefox (based on network.websocket.max-connections in about:config).\r\n\r\nIf a server uses 100 SETTINGS_MAX_CONCURRENT_STREAMS like Kestrel does by default, that\u0027s at most 50 concurrent SignalR \u0022connections\u0022 using this new streaming transport over HTTP/2. That by itself doesn\u0027t seem so bad, but unlike with WebSockets (which have their own connection pool), hitting this limit could affect \u0022normal\u0022 requests.\r\n\r\nTangentially, we\u0027ll probably want to use negotiate or something to detect HTTP/2, I doubt we\u0027d want to use this transport if we\u0027re making HTTP/1.1 requests.",
        "createdAt": "2020-04-22T19:52:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/21104#issuecomment-617999714"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2NDY1MTczOA==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-07-27T21:37:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/21104#issuecomment-664651738"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU2MDQ5NjQ2ODk=",
    "title": "Add HTTP Streaming transport to Transport Protocols spec",
    "url": "https://github.com/dotnet/aspnetcore/issues/21105",
    "createdAt": "2020-04-22T18:19:30Z",
    "lastUpdated": "2020-11-11T23:26:39Z",
    "body": "See https://github.com/dotnet/aspnetcore/issues/21104 for details.\r\n\r\nThis issue tracks the work of updating the [Transport Protocols](https://github.com/dotnet/aspnetcore/blob/master/src/SignalR/docs/specs/TransportProtocols.md) spec to include a description of the HTTP Streaming transport.",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "severity-nice-to-have",
      "affected-few"
    ],
    "comments": []
  },
  {
    "id": "MDU6SXNzdWU2MTE5NjY1MDE=",
    "title": "Create or reuse route attribute for SignalR",
    "url": "https://github.com/dotnet/aspnetcore/issues/21460",
    "createdAt": "2020-05-04T15:31:55Z",
    "lastUpdated": "2022-07-02T17:22:27Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\nCurrently, the only way to specify the SignalR hub route is specifying in the \u0060MapHub\u0060 method like:\r\n\r\n\u0060\u0060\u0060\r\napp.UseEndpoints(endpoints =\u003E\r\n{\r\n  endpoints.MapHub\u003CSomeHub\u003E(\u0022/someHub\u0022);\r\n});\r\n\u0060\u0060\u0060\r\n### Describe the solution you\u0027d like\r\nI think it could be used some attribute as we use in asp net core controllers \u0060[Route(\u0022/someHub\u0022)]\u0060, this way it would simplify MapHub method, having more consistency about the place to put the hub route (in this case would be in the Hub class). Also, it would allow us to scan for this route and write some custom documentation (ex: some swagger extension) about signalR hubs.\r\nI know I can write that in my app, but it would be nice to have this built-in and it would be more consistent with aspnetcore controllers, maybe the same attribute could be used as well since signalR is part of aspnetcore now.\r\n\r\nThank you\r\n",
    "upvotes": 6,
    "labels": [
      "Needs: Design",
      "enhancement",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYyNDg2MzgxNw==",
        "parentId": null,
        "author": "analogrelay",
        "content": "This definitely sounds like an interesting idea, though we likely don\u0027t have resources to prioritize this for the next release (5.0). Would you expect to still register the hub with \u0060endpoints.MapHub\u003CSomeHub\u003E()\u0060? MVC auto-detects controllers but today SignalR does not auto-detect Hubs.",
        "createdAt": "2020-05-06T20:10:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/21460#issuecomment-624863817"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYyNDg4Nzk1Ng==",
        "parentId": null,
        "author": "emanuel-v-r",
        "content": "I guess that auto detection would be even better. Something like \u0060endpoints.MapHubs()\u0060, but it would take more effort, so maybe it could be shipped without it, and added later.",
        "createdAt": "2020-05-06T20:59:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/21460#issuecomment-624887956"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc1OTU2Mzg3OQ==",
        "parentId": null,
        "author": "EMooreMAC",
        "content": "We would also love to have this. Our application uses around 100 hubs, and forcing us to coordinate this list rather than keeping routing with the hub as an attribute is a maintenance headache.",
        "createdAt": "2021-01-13T16:27:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/21460#issuecomment-759563879"
      },
      {
        "id": "IC_kwDOAQzde85F6YNS",
        "parentId": null,
        "author": "bwmeyer",
        "content": "You can use reflection to register all hubs with a routing attribute:\r\n\r\n\u0060\u0060\u0060\r\npublic static class HubMappingExtension\r\n{\r\n    public static IEndpointRouteBuilder MapHubs(this IEndpointRouteBuilder endpoints)\r\n    {\r\n        foreach (Assembly assembly in AppDomain.CurrentDomain.GetAssemblies())\r\n        {\r\n            foreach (Type hub in assembly.GetTypes().Where(t =\u003E t.IsAssignableTo(typeof(Hub))))\r\n            {\r\n                RouteAttribute routeAttribute = hub.GetCustomAttributes(typeof(RouteAttribute), true).FirstOrDefault() as RouteAttribute;\r\n                if (!string.IsNullOrWhiteSpace(routeAttribute?.Template))\r\n                {\r\n                    MethodInfo mapHubMethod =\r\n                        typeof(HubEndpointRouteBuilderExtensions).GetMethod(\r\n                            nameof(HubEndpointRouteBuilderExtensions.MapHub),\r\n                            new Type[] { typeof(IEndpointRouteBuilder), typeof(string) });\r\n                    mapHubMethod = mapHubMethod.MakeGenericMethod(hub);\r\n                    mapHubMethod.Invoke(null, new object[] { endpoints, routeAttribute.Template });\r\n                }\r\n            }\r\n        }\r\n        return endpoints;\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2022-07-02T17:21:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/21460#issuecomment-1172931410"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU2MjkyMTUzMjE=",
    "title": "[SignalR] Allow Pre-serialized data in order to avoid duplicated serialization",
    "url": "https://github.com/dotnet/aspnetcore/issues/22465",
    "createdAt": "2020-06-02T13:43:56Z",
    "lastUpdated": "2024-08-27T19:00:02Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\nIt seems that currently is not possible to send to signalR clients directly a JSON string or even JSON byte encoded. That in some systems could lead to duplicated serialization and therefore degradation of performance.\r\n\r\n### Describe the solution you\u0027d like\r\nI would like to be able to send a JSON string or JSON byte encoded directly to SignalR Clients\r\n### Additional context\r\n* I have tried to use \u0060ArraySegment\u003Cbyte\u003E\u0060 as described here https://github.com/SignalR/SignalR/issues/1546, but with no luck\r\n* Seems that it was requested before here https://github.com/dotnet/aspnetcore/issues/5339",
    "upvotes": 1,
    "labels": [
      "enhancement",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYzODQzODAxMg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Could you describe your scenario and why are you pre-serializing data?\r\n\r\nNote: This is somewhat difficult because we support multiple serialization formats (messagepack and json).",
        "createdAt": "2020-06-03T20:16:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/22465#issuecomment-638438012"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYzODQ3NDEzNA==",
        "parentId": null,
        "author": "emanuel-v-r",
        "content": "The scenario described here https://github.com/dotnet/aspnetcore/issues/5339 is really similar to my scenario.\r\nI have serialized json in my message bus, with this feature I could consume this json and just bypass it to signalR clients, instead of deserializing and then let signalR serialize it again.\r\nI guess that we could have some method like \u0060SendRaw(byte[] data)\u0060 that would assume that data is serialized already. Or just implemente it like here https://github.com/SignalR/SignalR/issues/1546",
        "createdAt": "2020-06-03T21:34:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/22465#issuecomment-638474134"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYzODY2NTU1Ng==",
        "parentId": null,
        "author": "davidfowl",
        "content": "The thing that ASP.NET Core SignalR supports that ASP.NET SignalR doesn\u0027t is that client can be connected to the same hub with different protocols. So one client can be message pack and another can be json and when you send a message it\u0027ll serialize to the right formats for the right clients. With this change that would break and that\u0027s why we haven\u0027t pursued it as yet.",
        "createdAt": "2020-06-04T07:38:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/22465#issuecomment-638665556"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDYzODc0MDA2MA==",
        "parentId": null,
        "author": "emanuel-v-r",
        "content": "Got it, it is tricky for sure considering that.\r\nI guess that a possible solution would be to use instead \u0060SendRaw(Serialization.Json, byte[] data)\u0060, then if the client is expecting message pack, internally we would convert it from JSON directly to message pack serialization . The problem would be if in future you decide to support more serialization types that could not be so trivial to do this type of conversions.",
        "createdAt": "2020-06-04T09:40:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/22465#issuecomment-638740060"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxOTk1MDgxNQ==",
        "parentId": null,
        "author": "NickLarsen",
        "content": "\u002B1\r\n\r\nAll our ws messages pass through a message queue as well and we have full control over the client implementations of our app so we\u0027re happy to define the message serialization globally.  In our case it would be great if the ws relay could be fully agnostic to the shape of the message being sent as well since it\u0027s just a relay, and hence wanting to just pass along the already serialized message instead of relying on dynamic serialization twice.\r\n\r\nFor the time being it\u0027s not a make or break; our ws traffic is pretty low overall so we\u0027re not bottlenecked by this at all.",
        "createdAt": "2021-04-15T01:20:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/22465#issuecomment-819950815"
      },
      {
        "id": "IC_kwDOAQzde85qJ5-D",
        "parentId": null,
        "author": "pankof",
        "content": "Have you reconsidered this change? It is pretty common scenario for high traffic app to receive message through a Queue and then push them to clients. ",
        "createdAt": "2023-10-26T12:06:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/22465#issuecomment-1780981635"
      },
      {
        "id": "IC_kwDOAQzde86J4iaU",
        "parentId": null,
        "author": "HashPong",
        "content": "@BrennanConroy that sendraw would be nice as i have pre-serialized data of 250 rows, that will prob be accessed 1k\u002B times a sec, that\u0027s a huge cpu load that would be optimised",
        "createdAt": "2024-08-27T19:00:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/22465#issuecomment-2313299604"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU2NTM3NjcyMjg=",
    "title": "[SignalR] Add an option to enable client side ping check instead of only relying on client side PingMessage",
    "url": "https://github.com/dotnet/aspnetcore/issues/23794",
    "createdAt": "2020-07-09T05:07:17Z",
    "lastUpdated": "2024-03-02T00:51:13Z",
    "body": "\u003C!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003E\r\n\r\n### Is your feature request related to a problem? Please describe.\r\nThe issue is SignalR server-side relies on the first \u0060PingMessage\u0060 to enable the client-side ping check. \r\nhttps://github.com/dotnet/aspnetcore/blob/2ad8121efbdddd46920918bddb9ee67e1c4144a9/src/SignalR/server/Core/src/Internal/DefaultHubDispatcher.cs#L180\r\n\r\nHowever, if the client-side sends out messages constantly and **more frequently** than keep alive, the client never has any chance to send out \u0060PingMessage\u0060, and as a result the server-side ping check never invokes. \r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/d5cf36acc71fe576541bbb8d694a88815c22c800/src/SignalR/clients/ts/signalr/src/HubConnection.ts#L344\r\n\r\nAnd this can cause the issue that when using SSE to connect to the service, although client fails to send to the server when JWT token expiration(401), the connection never closes, like described here https://github.com/Azure/azure-signalr/issues/943\r\n\r\n### Describe the solution you\u0027d like\r\nProvide an option to **explicitly enable** the ping check through \u0060SignalROptions\u0060 can solve the issue.\r\n",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY1NjI3NTMwNw==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "The feature you describe above is close to something I\u0027ve been wanting to do for awhile. There should be a way to enforce clients to have to send pings.\r\n\r\n\u003E if the client-side sends out messages constantly and **more frequently** than keep alive, the client never has any chance to send out \u0060PingMessage\u0060, and as a result the server-side ping check never invokes.\r\n\r\nThis is a small bug, it should send the ping immediately after starting the connection, like the .NET client does.\r\n\r\n\u003E when using SSE to connect to the service, although client fails to send to the server when JWT token expiration(401), the connection never closes\r\n\r\nThis is the actual issue they are seeing, it\u0027s an issue with the auth story and tracked by https://github.com/dotnet/aspnetcore/issues/5283",
        "createdAt": "2020-07-09T18:11:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/23794#issuecomment-656275307"
      },
      {
        "id": "IC_kwDOAQzde85BTlfg",
        "parentId": null,
        "author": "halter73",
        "content": "We should make this automatic for newer clients, so they can opt-in to this. Not for security, but to notice issues like those described in #41081 sooner.",
        "createdAt": "2022-04-11T22:30:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/23794#issuecomment-1095653344"
      },
      {
        "id": "IC_kwDOAQzde85Bxfr3",
        "parentId": null,
        "author": "vicancy",
        "content": "Do we have an ETA for fixing this issue? Shall it follow the net7 release pipeline or it can be released on its own since it only affects the js package? We have several customers reporting this issue. cc @davidfowl ",
        "createdAt": "2022-04-20T05:44:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/23794#issuecomment-1103493879"
      },
      {
        "id": "IC_kwDOAQzde85Bxf9P",
        "parentId": null,
        "author": "davidfowl",
        "content": "We can do it during the .NET 7 release timeframe. \r\n\r\ncc @rafikiassumani-msft I\u0027m going to move this out of the backlog for re-triage.",
        "createdAt": "2022-04-20T05:46:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/23794#issuecomment-1103494991"
      },
      {
        "id": "IC_kwDOAQzde85J_W_t",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-09-08T23:52:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/23794#issuecomment-1241346029"
      },
      {
        "id": "IC_kwDOAQzde85KCidc",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E Shall it follow the net7 release pipeline or it can be released on its own since it only affects the js package?\r\n\r\nWe have updating the js client for .NET 7.",
        "createdAt": "2022-09-09T16:16:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/23794#issuecomment-1242179420"
      },
      {
        "id": "IC_kwDOAQzde85Y6Kzm",
        "parentId": null,
        "author": "v-paulino",
        "content": "Hello @BrennanConroy  ! I was wondering what could be the reason why the issue is still open.  ",
        "createdAt": "2023-03-31T09:43:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/23794#issuecomment-1491643622"
      },
      {
        "id": "IC_kwDOAQzde85Y8Arp",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Because the work hasn\u0027t been done...",
        "createdAt": "2023-03-31T15:26:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/23794#issuecomment-1492126441"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU2NTQzNjc5MzE=",
    "title": "[Java] Dispatch user callbacks and observe backpressure",
    "url": "https://github.com/dotnet/aspnetcore/issues/23825",
    "createdAt": "2020-07-09T21:47:00Z",
    "lastUpdated": "2020-11-11T23:20:49Z",
    "body": "Currently we run user callbacks like On handlers, OnClosed, and possibly invocation responses/streaming. We want to run these on a dedicated scheduler that is used only for user code. We also want to observe backpressure from the observables if they are not consuming messages quick enough.\r\n\r\ncc @davidfowl @halter73 ",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY2MzczOTgyMA==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-07-24T21:22:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/23825#issuecomment-663739820"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU2ODAwNTE3MTk=",
    "title": "SignalR WithAutomaticReconnect should also handle initial connection failure",
    "url": "https://github.com/dotnet/aspnetcore/issues/24957",
    "createdAt": "2020-08-17T08:34:55Z",
    "lastUpdated": "2022-07-05T06:05:40Z",
    "body": "### The issue\r\nCurrent WithAutomaticReconnect is useless. Because the code to handle initial connection failure and reconnection after error is essentially the same. So I just have to write my own reconnection code and use it.\r\n\r\n### Describe the solution you\u0027d like\r\nWithAutomaticReconnect to also handle initial connection attempt",
    "upvotes": 8,
    "labels": [
      "enhancement",
      "area-signalr",
      "affected-few",
      "severity-minor"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY3NTExODQ2MA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Initial connection failures would generally imply that you\u0027re trying to connect to the wrong endpoint or that you have a bad network and shouldn\u0027t really be retrying anyways.\r\n\r\nIf you want to retry in the initial connect then you can use code we provide in the docs for this https://docs.microsoft.com/en-us/aspnet/core/signalr/dotnet-client?view=aspnetcore-3.1\u0026tabs=visual-studio#automatically-reconnect",
        "createdAt": "2020-08-17T21:12:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24957#issuecomment-675118460"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY3NTIzOTc3OA==",
        "parentId": null,
        "author": "maxbl4",
        "content": "Some examples where initial connection failure is normal:\r\n1. If signalr is used to talk between microservices. During deployment, client service may start before the server.\r\n2. On a mobile device, at any time network may be down or slow, but we want to connect as soon as networks goes up\r\n3. Web worker scenario: similar to #2, but in browser. User can open PWA while offline\r\n\r\nIt is not hard to write my own reconnection code, but then WithAutomaticReconnect looks useless. Would be great to have built-in support.\r\n\r\nPS i actually use all above examples. #1 may sound not canonical, as grpc is more common way, but performance of signalr is much better and i like the ability to connect to a single endpoint from service and from browser",
        "createdAt": "2020-08-18T04:19:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24957#issuecomment-675239778"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY3NTI0MDUxMw==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Thanks for the scenarios! That\u0027s very helpful",
        "createdAt": "2020-08-18T04:22:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24957#issuecomment-675240513"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY3NTI0MDYzMg==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-08-18T04:22:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24957#issuecomment-675240632"
      },
      {
        "id": "IC_kwDOAQzde849lkYI",
        "parentId": null,
        "author": "RossMetacraft",
        "content": "Just thought I would throw in another use case for this, one that is similar to maxbl4\u0027s #1. I use SignalR for communication between clients and a server in a simulation lab. The lab is shut down when not in use. When the computers in the lab are powered up at the beginning of a session, the clients are started automatically (.NET desktop applications) and they will usually start up before the server is up and running.",
        "createdAt": "2022-02-09T02:04:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24957#issuecomment-1033258504"
      },
      {
        "id": "IC_kwDOAQzde85GA7ps",
        "parentId": null,
        "author": "vicancy",
        "content": "Another case is when using Azure SignalR, some app servers might return 500 negotiate responses to the clients when in the Azure SignalR maintenance period that some app servers are temporarily disconnected from Azure SignalR.  So when using Azure SignalR, we would recommend customers always add try..catch..retry when the connection starts. It would simplify the customer code a lot if this can be also covered by \u0022withAutomaticReconnect\u0022.",
        "createdAt": "2022-07-05T06:00:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/24957#issuecomment-1174649452"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU2ODI1NzkyNzQ=",
    "title": "SignalR connections are shutdown directly during graceful shutdowns",
    "url": "https://github.com/dotnet/aspnetcore/issues/25069",
    "createdAt": "2020-08-20T09:50:15Z",
    "lastUpdated": "2024-12-18T00:00:39Z",
    "body": "**Context:**\r\nHosting an application in a kubernetes environment can sometimes cause the service (with active connections) to be shutdown as autoscaling happens. We have implemented graceful shutdown behaviour for various parts of the application but I see no such feature/possibility for SignalR servers. This causes problems when using the [streaming features](https://docs.microsoft.com/en-us/aspnet/core/signalr/streaming?view=aspnetcore-3.1) in SignalR. The Hub interface does offer you a \u0060OnDisconnectedAsync\u0060 but as it turns out this is fired after the connection has been closed (by the server itself).\r\n\r\n**Things Tried**\r\nI\u0027ve stepped into the source code with a debugger to find out most is handled in privates/internal classes. Should a complete new implementation be written of a [HubConnectionHandler](https://github.com/aspnet/SignalR/blob/master/src/Microsoft.AspNetCore.SignalR.Core/HubConnectionHandler.cs) that can deal with IApplicationLifetime? Or am I missing something like an injectable class that can deal with this. Or is there an existing SignalR lifetime available?\r\n_Also; Im not sure if the HubFilters that seem to be coming out in a later release would help us with our problem._\r\n\r\n**Question/Idea:**\r\nWe would like to await stream completion (with a max timeout) before the SignalR connection is cut off. Is it possible to interact with the [IApplicationLifetime](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.hosting.iapplicationlifetime?view=aspnetcore-3.1) or await completion before SignalR [connections are actually closed](https://github.com/aspnet/SignalR/blob/master/src/Microsoft.AspNetCore.SignalR.Core/HubConnectionHandler.cs#L152)?",
    "upvotes": 6,
    "labels": [
      "Needs: Design",
      "enhancement",
      "area-signalr",
      "affected-most",
      "severity-minor",
      "Priority:1"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY3Nzc1OTAyMA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "You might be able to achieve something if you handle the IHostApplicationLifetime notification before SignalR does and closes all connections. This logic actually isn\u0027t directly in the signalr layer, it\u0027s part of the transport logic.\n\n",
        "createdAt": "2020-08-20T16:10:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-677759020"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY3ODEzNjA1OQ==",
        "parentId": null,
        "author": "WJRovers",
        "content": "I am not sure this is not possible as I could not find any interaction between the SignalR hosting service and the IHostApplicationLifetime. Ive done a little test:\r\n\r\n**Startup.cs**\r\n\u0060\u0060\u0060\u0060\r\npublic void Configure(IApplicationBuilder app, IHostApplicationLifetime applicationLifetime)\r\n{\r\n     applicationLifetime.ApplicationStopping.Register(() =\u003E\r\n     {\r\n          Console.WriteLine(\u0022App is stopping - We should wait before SignalR closes connections?\u0022);\r\n     }, true);\r\n\r\n    // Some more stuff here\r\n\u0060\u0060\u0060\u0060\r\n\r\n**ChatHub**\r\n\u0060\u0060\u0060\u0060\r\npublic async Task StreamData(ChannelReader\u003Cstring\u003E streamOfStrings){\r\n    try\r\n    {\r\n        await foreach (var receivedString in _channelReader.ReadAllAsync())\r\n            Console.WriteLine(receivedString)\r\n    catch (OperationCanceledException e)\r\n    {\r\n        Console.WriteLine(e.Message) // \u0022The underlying connection was closed.\u0022\r\n    }\r\n}\r\n\u0060\u0060\u0060\u0060\r\n\r\nWhen you start a Graceful shutdown during a stream of strings being send; the console will show the followiing:\r\n_Console Output_\r\n\u0060\u0060\u0060\r\nThe underlying connection was closed.\r\nApp is stopping\r\n\u0060\u0060\u0060\r\n\r\nTo me it looks like the SignalR service does not respect or interact with any of the IHostApplicationLifetime events. Am I missing something obvious or is this something that is not implemented?\r\n\r\n\r\n**Little extra information**\r\nWhen you have a SignalR client with auto reconnect; and you put something like a thread sleep (for testing) in the ApplicationStopping registration. It closes the connection during graceful shutdown; and then allows the agent to reconnect.",
        "createdAt": "2020-08-21T09:17:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-678136059"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY3ODM0MDI0Mg==",
        "parentId": null,
        "author": "davidfowl",
        "content": "What server are you running on?",
        "createdAt": "2020-08-21T15:05:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-678340242"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY3ODUwMzcxMA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "So one idea would be to add a hook to allow users to run something before SignalR starts closing connections.",
        "createdAt": "2020-08-21T21:10:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-678503710"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY3ODUwMzg5Nw==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-08-21T21:10:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-678503897"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc4NDM3MTQwNQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "We\u0027re thinking of adding an option to delay connection closes. By default there is no delay so today as soon as shutdown is triggered connections start closing. With the option you can specify how long SignalR delays once shutdown is triggered before trying to gracefully close connections.\r\n\r\nThe server can still aggressively shutdown connections that are still alive, Kestrel has configuration for this delay, not sure about other servers.\r\n\r\ncc @davidfowl ",
        "createdAt": "2021-02-23T17:29:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-784371405"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc4NDM3MTUwMw==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-02-23T17:30:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-784371503"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2MDUzOTI5Mg==",
        "parentId": null,
        "author": "cubed-it",
        "content": "I have exactly the same problem as the author. My singalr core application needs graceful termination for streams when scaling and rolling out an update. It is a showstopper somehow... \uD83D\uDE41\r\n\r\nSo I would like to support the call for such a \u0060ApplicationStopping\u0060 support for signalr core hereby explicitly!\r\n\r\nThanks a lot! \uD83D\uDC4D",
        "createdAt": "2021-06-14T09:26:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-860539292"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2ODMxODY0OQ==",
        "parentId": null,
        "author": "springy76",
        "content": "I have the same problem with Server-Blazor (using SignalR implicitly): All open circuits got \u0060ICircuitTracker.OnConnectionDownAsync\u0060 before my \u0060IHostApplicationLifetime.ApplicationStopping\u0060 handler gets called. And I checked that my code attaching to \u0060ApplicationStopping\u0060 was the first one adding delegates, so should be the first one called, too.\r\n\r\nI need an earlier point which allows me to wait (async) and trigger \u0060Component.StateHasChanged()\u0060.\r\n\r\nI already have existing code (in a singleton service which monitors all circuits) which - based on a timeout - \u0022kicks\u0022 users by first collecting state data and then redirecting them to a simple non-blazor razor page which allows them to reenter, but also allows IIS to apply idle-shutdown of the app pool.\r\nThis already works like a charm, I just cannot combine this code with a forced shutdown; all clients then just receive a reconnecting-attempt with final \u0022not possible\u0022 error - either because the server was shutdown entirely or the freshly started server can\u0027t of course re-attach dropped Blazor circuits.\r\n\r\nThe automatic re-connect of Blazor/SignalR is extremely worse in my scenario which involves hundreds of app-pools of the same application (strict tenant separation) - because in the (seldom) case of an entire IIS-reset hundreds of app-pools are starting at the same time immediately just because of the automatic retry.",
        "createdAt": "2021-06-25T08:24:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-868318649"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2ODg5NTYxOQ==",
        "parentId": null,
        "author": "cubed-it",
        "content": "@springy76 as stated above I\u0027m mainly interested in signalr core graceful termination, but blazor is also such a sore spot... I\u0027ve been looking for a solution for my employer how to roll out an update using kubernetes without all users being kicked out immediately...\r\nhowever my I ask if the source for the \u0022singleton service which monitors all circuits\u0022 is shareable? or at least could you provide some api hints? sounds really interessting and now I want such a thing too. ;) some users like to keep tabs open pretty long..\r\n",
        "createdAt": "2021-06-26T00:33:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-868895619"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg3MDY1NDUxOA==",
        "parentId": null,
        "author": "springy76",
        "content": "@cubed-it It\u0027s a relative simple service deriving from \u0060CircuitHandler\u0060: https://docs.microsoft.com/en-us/aspnet/core/blazor/fundamentals/signalr?view=aspnetcore-5.0\u0026pivots=server#blazor-server-circuit-handler which tracks all opened and closed circuits plus an in-memory weak-referenced service bus which all app components are listening to for kick messages.",
        "createdAt": "2021-06-29T14:32:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-870654518"
      },
      {
        "id": "IC_kwDOAQzde842aH7z",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "As a workaround you can register to the IHostApplicationLifetime.ApplicationStopping token after any call to MapHub or MapConnections and perform work in there before returning and letting the rest of the events fire.\r\n\r\n\u0060\u0060\u0060csharp\r\napp.UseEndpoint(endpoints =\u003E\r\n{\r\n    endpoints.MapHub\u003CMyHub\u003E(\u0022/hub\u0022);\r\n});\r\n// cancellation tokens fire callbacks in LIFO order, so make sure we\u0027re after MapHub is called\r\napp.ApplicationServices.GetRequiredService\u003CIHostApplicationLifetime\u003E().ApplicationStopping.Register(() =\u003E DoWork());\r\n\u0060\u0060\u0060",
        "createdAt": "2021-09-03T21:22:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-912817907"
      },
      {
        "id": "IC_kwDOAQzde842cZ36",
        "parentId": null,
        "author": "springy76",
        "content": "@BrennanConroy I\u0027ll have to give that a try - calling a hard .Wait() there shouldn\u0027t be total catastrophic as only this single thread would be blocked for some seconds? (I hope the final solution will allow awaiting tasks.)",
        "createdAt": "2021-09-06T07:33:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-913415674"
      },
      {
        "id": "IC_kwDOAQzde85CgW4c",
        "parentId": null,
        "author": "kunom",
        "content": "Same issue here. I would like to have SignalR being up until MassTransit is fully closed down.\r\n\r\nMassTransit works as a \u0060IHostedService\u0060, where shutdown happens one-per-one in reverse order of registration. I was a bit surprised that Azure SignalR does not do that but directly shortcuts to \u0060IHostApplicationLifetime\u0060.",
        "createdAt": "2022-05-03T06:29:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-1115778588"
      },
      {
        "id": "IC_kwDOAQzde85EHArT",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-05-31T22:13:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-1142688467"
      },
      {
        "id": "IC_kwDOAQzde85Eqinw",
        "parentId": null,
        "author": "zackliu",
        "content": "We\u0027re facing the same issue. And the workaround is not good enough because the customized graceful shutdown is usually async method. What you have to do is \u0022sync over async\u0022 to block the next task. We have many WebHosts instance in one process for business needs. So, the \u0022sync over async\u0022 will block a lot of threads and easy to cause thread starving. ",
        "createdAt": "2022-06-10T06:24:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-1152002544"
      },
      {
        "id": "IC_kwDOAQzde85EqmFb",
        "parentId": null,
        "author": "kunom",
        "content": "Not only should shutdown be happening as part of the \u0060IHostedService\u0060 contracts instead of the \u0060IApplicationLifetime\u0060 contract, it also should be possible to shut down individual SignalR hubs in a well-defined order. \r\n\r\nThis, at least, is our use case, and it took me a lot of time/reverse engineering/hacking/reflection to end up with a shutdown sequence of:\r\n\r\n\u0060SignalRHubs group1 \u003E MassTransit \u003E SignalRHubs group2\u0060 \r\n\r\nNeedless to say, as a side remark, that I don\u0027t understand why all the Azure SignalR extensions are marked as \u0060internal\u0060 and thus are also extremely hard to monitor for health checking.",
        "createdAt": "2022-06-10T06:38:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-1152016731"
      },
      {
        "id": "IC_kwDOAQzde85MAZdH",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:28:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-1275172679"
      },
      {
        "id": "IC_kwDOAQzde85vsbG6",
        "parentId": null,
        "author": "springy76",
        "content": "So what\u0027s the progress of \u0060.NET 8 Planning\u0060?",
        "createdAt": "2024-01-02T11:34:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-1873916346"
      },
      {
        "id": "IC_kwDOAQzde86XzXFi",
        "parentId": null,
        "author": "DanielCordell",
        "content": "Has there been any progress on this? Feels like this issue may have been forgotten about! @BrennanConroy \n\nRight now I want to perform a SignaLR connection to every connected client on server shutdown (basically like a \u0022I\u0027m shutting down right now!\u0022 message). \n\nI\u0027ve tried all combinations of ordering my middleware registration, I\u0027ve done something similar to this as well https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-912817907, but every time I try it seems that by the time I get to the \u0060ApplicationStopping\u0060 event, the signalr connections are already stopped.\n\n\nThis is essentially what I want to do:\n\n\u0060\u0060\u0060csharp\napp.UseEndpoints(endpoints =\u003E\n{\n    app.MapHub\u003CGracefulShutdownHub\u003E(\u0022/GracefulShutdownController\u0022);\n});\n\nvar hubContextService = app.Services.GetRequiredService\u003CIHubContext\u003CGracefulShutdownHub, IGracefulShutdownClient\u003E\u003E();\n\napp.Services.GetRequiredService\u003CIHostApplicationLifetime\u003E().ApplicationStopping.Register(() =\u003E\n{\n    Logger.LogInformation(\u0022PERFORMING GRACEFUL SHUTDOWN\u0022);\n    hubContextService.Clients.All.PerformGracefulShutdown().Wait();\n    Logger.LogInformation(\u0022Graceful Shutdown Performed\u0022);\n});\n\n\u0060\u0060\u0060\u0060\n\nBy the time I\u0027m calling \u0060hubContextService.Clients.All.PerformGracefulShutdown()\u0060, it appears every client has already disconnected.",
        "createdAt": "2024-12-16T21:24:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-2546823522"
      },
      {
        "id": "IC_kwDOAQzde86Xz29-",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "I just tried the workaround, and it works as expected. The issue is that \u0060PerformGracefulShutdown\u0060 only waits to send the clients a message, it doesn\u0027t wait for the clients to close.",
        "createdAt": "2024-12-16T22:13:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-2546954110"
      },
      {
        "id": "IC_kwDOAQzde86X0kiI",
        "parentId": null,
        "author": "DanielCordell",
        "content": "\u003E I just tried the workaround, and it works as expected. The issue is that \u0060PerformGracefulShutdown\u0060 only waits to send the clients a message, it doesn\u0027t wait for the clients to close.\n\nSorry, how would I wait for the clients to close in this context? I can\u0027t see anything on the hubContext or it\u0027s child objects, and I definitely want to delay the clients closing until after this invocation.",
        "createdAt": "2024-12-16T23:39:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-2547140744"
      },
      {
        "id": "IC_kwDOAQzde86X_DA9",
        "parentId": null,
        "author": "DanielCordell",
        "content": "@BrennanConroy Sorry I wouldn\u0027t ping if I hadn\u0027t tried everything I could think of \uD83D\uDE06, do you have any sample or reproducible code (or can you just explain) for what I would need to do to get the connection closing to wait until after these messages are sent?",
        "createdAt": "2024-12-17T23:28:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-2549887037"
      },
      {
        "id": "IC_kwDOAQzde86X_PE3",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E how would I wait for the clients to close in this context?\n\nYour app needs to manage that. Here is an example:\n\u0060\u0060\u0060csharp\nbuilder.Services.AddSingleton(clientManager);\n\nvar app = builder.Build();\n\napp.UseCors();\napp.UseHttpsRedirection();\n\napp.UseRouting();\n\napp.UseEndpoints(endpoints =\u003E\n{\n    endpoints.MapHub\u003CMyHub\u003E(\u0022/default\u0022);\n});\n\nvar hubContextService = app.Services.GetRequiredService\u003CIHubContext\u003CMyHub\u003E\u003E();\n\napp.Services.GetRequiredService\u003CIHostApplicationLifetime\u003E().ApplicationStopping.Register(() =\u003E\n{\n    hubContextService.Clients.All.SendAsync(\u0022Shutdown\u0022).Wait();\n    clientManager.WaitForShutdown().Wait();\n});\n\napp.Run();\n\npublic class MyHub : Hub\n{\n    private readonly ClientManager _clientManager;\n\n    public MyHub(ClientManager clientManager)\n    {\n        _clientManager = clientManager;\n    }\n\n    public override Task OnConnectedAsync()\n    {\n        _clientManager.Add(Context);\n        return Task.CompletedTask;\n    }\n\n    public override Task OnDisconnectedAsync(Exception? exception)\n    {\n        _clientManager.Remove(Context.ConnectionId);\n        return Task.CompletedTask;\n    }\n}\n\npublic class ClientManager\n{\n    private readonly ConcurrentDictionary\u003Cstring, HubCallerContext\u003E _clients = new();\n\n    public void Add(HubCallerContext caller)\n    {\n        _clients.TryAdd(caller.ConnectionId, caller);\n    }\n\n    public void Remove(string connectionId)\n    {\n        _clients.TryRemove(connectionId, out _);\n    }\n\n    public async Task WaitForShutdown()\n    {\n        var maxWaitTime = TimeSpan.FromSeconds(5);\n        var start = Stopwatch.GetTimestamp();\n\n        while (Stopwatch.GetElapsedTime(start) \u003C maxWaitTime \u0026\u0026 _clients.Count \u003E 0)\n        {\n            await Task.Delay(100);\n        }\n    }\n}\n\u0060\u0060\u0060",
        "createdAt": "2024-12-18T00:00:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25069#issuecomment-2549936439"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU2ODMwMzM4NzU=",
    "title": "Investigate performance improvement in java MessagePack deserializer",
    "url": "https://github.com/dotnet/aspnetcore/issues/25089",
    "createdAt": "2020-08-20T19:15:37Z",
    "lastUpdated": "2022-02-15T21:43:45Z",
    "body": "In the below block, we effectively deserialize maps/arrays twice - first to find out how long they are, second to feed that number of bytes into \u0060ObjectMapper.readValue\u0060. We should investigate if its possible to pass the bytes in from their starting offset, and to find out after the fact how many bytes were read so we can advance the underlying buffer. Perhaps with a custom Reader that keeps track of how many bytes it has read?\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/8522ba8e55a6fc4ebfcea57fe159905b080bb6a6/src/SignalR/clients/java/signalr/src/main/java/com/microsoft/signalr/MessagePackHubProtocol.java#L568-L610",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "severity-minor",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY3Nzg1MDA4Mg==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-08-20T19:15:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25089#issuecomment-677850082"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU2OTA0MjM5MzU=",
    "title": "Java signalr tests can\u0027t be debugged in VSCode",
    "url": "https://github.com/dotnet/aspnetcore/issues/25512",
    "createdAt": "2020-09-01T20:25:58Z",
    "lastUpdated": "2023-06-02T01:17:59Z",
    "body": "After https://github.com/dotnet/aspnetcore/pull/25253, test debugging in VSCode doesn\u0027t work any more for the Java signalr tests, possibly because of the change to the project layout.",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "feature-client-java"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc2MTIzMjMzMQ==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-01-15T22:33:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25512#issuecomment-761232331"
      },
      {
        "id": "IC_kwDOAQzde841At7S",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-29T18:53:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25512#issuecomment-889380562"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU2OTEzMDkxNjc=",
    "title": "Allow user to configure ObjectMapper we use for MessagePack serialization/deserialization",
    "url": "https://github.com/dotnet/aspnetcore/issues/25539",
    "createdAt": "2020-09-02T18:33:30Z",
    "lastUpdated": "2023-06-02T01:18:00Z",
    "body": "We should allow users to set strategies used by the ObjectMapper we use in the Java clients\u0027 MessagePack implementation (using the \u0060ObjectMapper.configure()\u0060 method on our end). For example, https://fasterxml.github.io/jackson-databind/javadoc/2.5/com/fasterxml/jackson/databind/MapperFeature.html to configure deserialization, or https://fasterxml.github.io/jackson-databind/javadoc/2.8/com/fasterxml/jackson/databind/PropertyNamingStrategy.html to configure how property names are serialized. Right now all property names are serialized as if they were camelCase, even if the user defined them as PascalCase.\r\n\r\nCC @BrennanConroy @halter73 ",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "feature-client-java"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDY5MjgzMDA2Nw==",
        "parentId": null,
        "author": "wtgodbe",
        "content": "Moving into 6.0 since this would be an API change",
        "createdAt": "2020-09-15T16:30:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25539#issuecomment-692830067"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc2MTIzMjI2Mw==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-01-15T22:32:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25539#issuecomment-761232263"
      },
      {
        "id": "IC_kwDOAQzde840oCgK",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-19T22:50:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/25539#issuecomment-882911242"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3MTc1MzE3NjY=",
    "title": "Always call Hub.OnDisconnectedAsync with an Exception when a client disconnects ungracefully",
    "url": "https://github.com/dotnet/aspnetcore/issues/26701",
    "createdAt": "2020-10-08T17:29:13Z",
    "lastUpdated": "2023-12-12T03:41:39Z",
    "body": "In some cases (based on reports to the \u0022ASP.NET Discussions\u0022 mailing list), Hub.OnDisconnectedAsync can be called without an Exception when SignalR clients disconnect ungracefully.\r\n\r\nOne way to remove ambiguity between graceful and ungraceful disconnects would be to send a CloseMessage from the SignalR client to the server before it gracefully closes the connection. The absence of a CloseMessage would then be enough for the server to know the client disconnected ungracefully and pass an Exception to Hub.OnDisconnectedAsync.\r\n\r\nWe already do this in the other direction when the SignalR server closes the connection.",
    "upvotes": 0,
    "labels": [
      "bug",
      "area-signalr",
      "severity-minor",
      "affected-medium"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwNjQwMjA2OQ==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-10-09T21:05:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-706402069"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwNjQwMjM5NQ==",
        "parentId": null,
        "author": "jkotalik",
        "content": "Note: make sure to tell all 3rd party clients to adapt if this change is made.",
        "createdAt": "2020-10-09T21:06:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-706402395"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwNjQwMjY1OA==",
        "parentId": null,
        "author": "bradygaster",
        "content": "cc @chenkennt ",
        "createdAt": "2020-10-09T21:06:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-706402658"
      },
      {
        "id": "IC_kwDOAQzde841Auuo",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-29T18:58:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-889383848"
      },
      {
        "id": "IC_kwDOAQzde85DGIMd",
        "parentId": null,
        "author": "vicancy",
        "content": "Hi experts, we have a customer who needs to differentiate between a client gracefully closed and a client closed by PingTimeout https://github.com/Azure/azure-signalr/issues/1421#issuecomment-1125676609. Any insights on it? Shall we implement this issue, or have special logic to pass an exception to OnDisconnectedAsync when the client is closed by PingTimeOut? cc @davidfowl ",
        "createdAt": "2022-05-13T05:49:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-1125679901"
      },
      {
        "id": "IC_kwDOAQzde85DJvKH",
        "parentId": null,
        "author": "halter73",
        "content": "If there\u0027s specific scenarios where the server can recognize the client disconnected ungracefully and we aren\u0027t passing an exception to OnDisconnectedAsync, we should absolutely do so. I\u0027d be happy to take any PRs that do this. I think the problem is that it can currently be impossible to tell if the client did disconnect ungracefully or not. To know for sure, we\u0027d have to send an explicit message from the client to server saying it\u0027s gracefully closing the connection.\r\n\r\nThe \u0060CloseMessage\u0060 already exists, but it\u0027s currently only sent from the server to the client. We can just repurpose it and also send it from the client to server when the client gracefully disconnects by calling \u0060stop()\u0060 or similar. The lack of this message would be enough to know the client disconnected ungracefully if the client started the connection with a high enough \u0060HandshakeRequestMessage.Version\u0060. The \u0060CloseMessage\u0060 also supports sending an error message via a property, but it seems silly to suppose a client will reliably be able to send a server a message about it\u0027s connectivity problems.\r\n\r\nWe\u0027d have to make a new protocol version for this, and update all the clients to start sending the \u0060CloseMessage\u0060 for graceful shutdown. Not a huge amount of work, but certainly not trivial. Without more customers asking for this, it seems low value since the customer could just update their clients to call \u0060await connection.invoke(\u0022ClosingGracefully\u0022);\u0060 before calling \u0060await connection.stop()\u0060 and get the same effect. You could just assume any call to \u0060OnDisconnectedAsync\u0060 without a call to \u0060ClosingGracefully\u0060 first was ungraceful.",
        "createdAt": "2022-05-14T03:23:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-1126625927"
      },
      {
        "id": "IC_kwDOAQzde85DJ5Tg",
        "parentId": null,
        "author": "davidfowl",
        "content": "I think there are a set of things we can do here:\r\n- The close message idea is a good one, we should enable that.\r\n- We can use a custom exception and pass that to OnDisconectedAsync when the server decides to close the connection because it didn\u0027t receive the client pings. This doesn\u0027t require a protocol change, it\u0027s all server side.",
        "createdAt": "2022-05-14T08:05:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-1126667488"
      },
      {
        "id": "IC_kwDOAQzde85DJ8-9",
        "parentId": null,
        "author": "ajbeaven",
        "content": "Thanks for reviving this discussion @vicancy. \r\n\r\n\u003E We can use a custom exception and pass that to OnDisconectedAsync when the server decides to close the connection because it didn\u0027t receive the client pings. This doesn\u0027t require a protocol change, it\u0027s all server side.\r\n\r\nI think this is what I\u0027m after. The previous version of SignalR (for ASP.NET Framework) had an isTimeout parameter on the OnDisconnect method which I presume was set to _true_ in cases like you described. I\u0027m just after that same functionality.",
        "createdAt": "2022-05-14T09:54:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-1126682557"
      },
      {
        "id": "IC_kwDOAQzde85DPE2G",
        "parentId": null,
        "author": "halter73",
        "content": "\u003E We can use a custom exception and pass that to OnDisconectedAsync when the server decides to close the connection because it didn\u0027t receive the client pings. This doesn\u0027t require a protocol change, it\u0027s all server side.\r\n\r\n\uD83D\uDC4D I didn\u0027t realize we weren\u0027t passing in an exception in that case. Not doing so just seems like a bug.\r\n\r\n\u003E I think this is what I\u0027m after. The previous version of SignalR (for ASP.NET Framework) had an isTimeout parameter on the OnDisconnect method which I presume was set to true in cases like you described. I\u0027m just after that same functionality.\r\n\r\nI believe you\u0027re referring to the \u0060stopCalled\u0060 parameter: https://docs.microsoft.com/en-us/aspnet/signalr/overview/guide-to-the-api/hubs-api-guide-server#how-to-handle-connection-lifetime-events-in-the-hub-class\r\n\r\nThe previous version of SignalR could do this more reliably because clients would call an \u0060/abort\u0060 endpoint when gracefully disconnecting (yes \u0022abort\u0022 was definitely a misnomer here \uD83D\uDE06). The previous version of SignalR also didn\u0027t assume a TCP connection closing meant the end of the connection like SignalR Core does. All transports were basically like Core\u0027s long polling transport where the server would have to wait after the client\u0027s last TCP connection closed to see if the client would reconnect with a new TCP connection if \u0060/abort\u0060 wasn\u0027t called, so a timeout was effectively the *only* way for a SignalR client could disconnect ungracefully. Even a connection reset didn\u0027t necessarily mean the logical SignalR connection was closing.\r\n\r\nSo, if the \u0060/abort\u0060 endpoint wasn\u0027t called before a timeout, old SignalR could assume the client disconnect ungracefully. But if the \u0060/abort\u0060 endpoint was called, old SignalR could fire \u0060OnDisconnected(stopCalled: true)\u0060 immediately. This \u0060/abort\u0060 endpoint in old SignalR serves the exact same purpose as the proposed client-to-server close message in SignalR Core. This was particularly important with the pervious version of SignalR because it worked without sticky sessions, so \u0060OnDisconnect\u0060 could fire when a client just \u0022hopped\u0022 to another server.",
        "createdAt": "2022-05-16T18:58:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-1128025478"
      },
      {
        "id": "IC_kwDOAQzde85DPwcv",
        "parentId": null,
        "author": "ajbeaven",
        "content": "Ahh sorry yeah, \u0060stopCalled\u0060 was the one. Thanks for taking the time to explain the inner workings; SignalR is a complex beast. \r\n\r\nSo just to clarify, if the aforementioned bug is fixed, you\u0027re saying I\u0027ll start having exceptions passed through to OnDisconnectedAsync in _some_ but not _all_ scenarios, so it can\u0027t be relied on? You\u0027re also saying that implementing the close method will make this reliable and then workarounds like the suggested \u0022ClosingGracefully\u0022 message won\u0027t be necessary?",
        "createdAt": "2022-05-16T22:35:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-1128204079"
      },
      {
        "id": "IC_kwDOAQzde85DvaWg",
        "parentId": null,
        "author": "ajbeaven",
        "content": "To give a bit of context, my use case is a chat app. If two users are chatting and purposefully disconnects either by clicking a button _OR_ closing the browser tab, the chat session should be immediately closed (I do this when the exception passed through to \u0060OnDisconnectedAsync\u0060 is not null). On the other hand, if a user loses connection, the session should be left open for a short period so that if the user is able to reestablish a connection before they time out after 35 seconds, the session can continue. \r\n\r\nI don\u0027t think the suggested \u0060await connection.invoke(\u0022ClosingGracefully\u0022);\u0060 solution works in the scenario where the client disconnects due to closing the browser tab. IIRC, old SignalR managed to have stopCalled be true in this situation, but I can\u0027t think of a way to replicate this by manually sending messages to the server. My testing found that sending in a beforeunload handler doesn\u0027t work seemlessly or reliably cross-browser. \r\n\r\nSo yeah, if you have any other ideas about how I could reliably differentiate between timeouts vs closed browser tab, I\u0027m all ears!",
        "createdAt": "2022-05-24T22:50:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-1136502176"
      },
      {
        "id": "IC_kwDOAQzde85DvitB",
        "parentId": null,
        "author": "davidfowl",
        "content": "Use timeouts, you can\u2019t distinguish between a browser refresh and a closed browser tab. Delay before marking the user as offline. ",
        "createdAt": "2022-05-24T23:42:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-1136536385"
      },
      {
        "id": "IC_kwDOAQzde85DvmIa",
        "parentId": null,
        "author": "ajbeaven",
        "content": "Sorry, I\u0027m not trying to distinguish between a refreshed vs closed browser tab, I\u0027m trying to do it between a user timing out (e.g. they\u0027ve lost connection for 30\u002B seconds aka an ungraceful disconnect) vs closed/refreshed browser tab.",
        "createdAt": "2022-05-25T00:10:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-1136550426"
      },
      {
        "id": "IC_kwDOAQzde85GPjSw",
        "parentId": null,
        "author": "vicancy",
        "content": "\u003E We can use a custom exception and pass that to OnDisconectedAsync when the server decides to close the connection because it didn\u0027t receive the client pings. This doesn\u0027t require a protocol change, it\u0027s all server side.\r\n\r\nHi experts @halter73 @davidfowl , do we have a plan to fix this issue? ",
        "createdAt": "2022-07-08T02:49:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-1178481840"
      },
      {
        "id": "IC_kwDOAQzde85XpOXF",
        "parentId": null,
        "author": "leteciHolandez",
        "content": "Hi guys, is there any chance that this issue will be worked on? Please, it is really important to be able to know if disconnect came as explicit closure of browser/tab or connectivity issue.",
        "createdAt": "2023-03-15T17:08:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-1470424517"
      },
      {
        "id": "IC_kwDOAQzde85lygn_",
        "parentId": null,
        "author": "leteciHolandez",
        "content": "Hi @BrennanConroy , is there any chance that this issue will be fixed with .NET8 release in November? ",
        "createdAt": "2023-09-06T06:21:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-1707739647"
      },
      {
        "id": "IC_kwDOAQzde85qVCFB",
        "parentId": null,
        "author": "FroHenK",
        "content": "Would completing the \u0060IDuplexPipe\u0060\u0027s Input and Output pipes with an exception when a \u0060WebSocketException\u0060 with \u0060ex.WebSocketErrorCode == WebSocketError.ConnectionClosedPrematurely\u0060 is raised within the \u0060StartReceiving\u0060 method of \u0060\u0060Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsServerTransport\u0060\u0060 solve this issue for WebSocket connections?",
        "createdAt": "2023-10-28T19:01:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-1783898433"
      },
      {
        "id": "IC_kwDOAQzde85uV9ey",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "Cleaning the milestone for the team to triage again ",
        "createdAt": "2023-12-12T03:41:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26701#issuecomment-1851250610"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3MjA0NDg1NjM=",
    "title": "Consider increasing SignalR log level if message size exceeds max",
    "url": "https://github.com/dotnet/aspnetcore/issues/26849",
    "createdAt": "2020-10-13T15:45:46Z",
    "lastUpdated": "2024-04-17T01:48:34Z",
    "body": "In Blazor Server, when a JSInterop response is larger than the SignalR payload size, no information is available by default that indicates the invocation failed. You have to turn up the SignalR logs up to to Debug to see the actual error:\r\n\r\n\u0060\u0060\u0060\r\ndbug: Microsoft.AspNetCore.SignalR.HubConnectionHandler[2]\r\n      Error when processing requests.\r\n      System.IO.InvalidDataException: The maximum message size of 32768B was exceeded. The message size can be configured in AddHubOptions.\r\n\u0060\u0060\u0060\r\n\r\nSignalR calls Hub.OnDisconnectedAsync with this exception but Blazor does not do anything with the exception. Perhaps logging the exception with a higher log level would be helpful.",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "Blazor \u2665 SignalR",
      "severity-major",
      "affected-medium",
      "Priority:2",
      "cost: XS",
      "feature-blazor-jsinterop"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcwNzgzNTQwMQ==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-10-13T15:49:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26849#issuecomment-707835401"
      },
      {
        "id": "IC_kwDOAQzde840zo9d",
        "parentId": null,
        "author": "dannyBies",
        "content": "I ran into this issue as well. I would\u0027ve expected this to be \u0060\u0060\u0060LogLevel.Error\u0060\u0060\u0060. I\u0027d be happy to provide a PR if wanted. https://github.com/dotnet/aspnetcore/blob/23b704915cdb9a73df7a61ff1aaa894712098615/src/SignalR/server/Core/src/HubConnectionHandlerLog.cs#L16-L17",
        "createdAt": "2021-07-23T22:57:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26849#issuecomment-885952349"
      },
      {
        "id": "IC_kwDOAQzde841K5n3",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-08-03T18:02:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26849#issuecomment-892049911"
      },
      {
        "id": "IC_kwDOAQzde844ntTQ",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "Triage: sounds like this needs more discussion. We\u0027re not sure there\u0027s a good solution.",
        "createdAt": "2021-10-22T20:16:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26849#issuecomment-949933264"
      },
      {
        "id": "IC_kwDOAQzde85MAZeL",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:28:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26849#issuecomment-1275172747"
      },
      {
        "id": "IC_kwDOAQzde856zA6E",
        "parentId": null,
        "author": "nlpsl202",
        "content": "I have the same issue, I think all error cause blazor reconnect should be log as error, so we can find what cause this error, but now only debug using visual studio can find out what is going on.",
        "createdAt": "2024-04-17T01:48:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/26849#issuecomment-2060193412"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3MzE2NDczNzg=",
    "title": "SignalR for UWP .NET Native breaks when moving from 3.1 to 5 RC2",
    "url": "https://github.com/dotnet/aspnetcore/issues/27297",
    "createdAt": "2020-10-28T17:28:29Z",
    "lastUpdated": "2022-11-13T10:18:51Z",
    "body": "Creating a straightforward SignalR client hub in a UWP app complied using .NET Native, using Newtonsoft option to keep .NET Native happy.\r\n\r\nvar connection = new HubConnectionBuilder().\r\n                                    WithUrl(\u0022myurl\u0022).\r\n                                    AddNewtonsoftJsonProtocol().\r\n                                    Build();\r\n\r\nThis works fine using:\r\n\r\n-Microsoft.AspNetCore.SignalR.Client 3.1.9\r\n-Microsoft.AspNetCore.SignalR.Protocols.NewtonsoftJson 3.1.9\r\n\r\nThen updating to:\r\n\r\n-Microsoft.AspNetCore.SignalR.Protocols.NewtonsoftJson 5.0.0-rc.2.20475.17\r\n\r\nHubConnectionBuilder now fails throwing a MissingMetadataException.\r\n\r\nSystem.Reflection.MissingMetadataException: \u0027Microsoft.Extensions.Options.IPostConfigureOptions\u003C\u003E\u0027 is missing metadata. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=392859\r\n   at SharedLibrary!\u003CBaseAddress\u003E\u002B0xc37113\r\n   at SharedLibrary!\u003CBaseAddress\u003E\u002B0xc34d8d\r\n   at SharedLibrary!\u003CBaseAddress\u003E\u002B0xc341cf\r\n   at SharedLibrary!\u003CBaseAddress\u003E\u002B0xc3f0f8\r\n   at SharedLibrary!\u003CBaseAddress\u003E\u002B0xc3fe8c\r\n   at SharedLibrary!\u003CBaseAddress\u003E\u002B0x9b0ed3\r\n   at SharedLibrary!\u003CBaseAddress\u003E\u002B0x9b0d20\r\n   at System.Reflection.Runtime.General.TypeResolver.TryResolveTypeSignature(TypeSpecificationHandle, MetadataReader, TypeContext, Exception\u0026) \u002B 0x3e0\r\n   at System.Reflection.Runtime.General.TypeResolver.TryResolve(Handle, MetadataReader, TypeContext, Exception\u0026) \u002B 0xb1\r\n   at System.Reflection.Runtime.General.TypeResolver.TryResolveTypeSignature(TypeSpecificationHandle, MetadataReader, TypeContext, Exception\u0026) \u002B 0x3ab\r\n   at System.Reflection.Runtime.General.TypeResolver.TryResolve(Handle, MetadataReader, TypeContext, Exception\u0026) \u002B 0xb1\r\n   at System.Reflection.Runtime.General.QSignatureTypeHandle.TryResolve(TypeContext, Exception\u0026) \u002B 0x4b\r\n   at System.Reflection.Runtime.General.QSignatureTypeHandle.Resolve(TypeContext) \u002B 0x2e\r\n   at System.Reflection.Runtime.ParameterInfos.RuntimeMethodParameterInfo.get_ParameterType() \u002B 0x45\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type, Type, CallSiteChain, ParameterInfo[], Boolean) \u002B 0x75\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite(ResultCache, Type, Type, CallSiteChain) \u002B 0x2b7\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric(ServiceDescriptor, Type, CallSiteChain, Int32, Boolean) \u002B 0xf0\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric(Type, CallSiteChain) \u002B 0xad\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type, CallSiteChain) \u002B 0x9c\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.\u003C\u003Ec__DisplayClass7_0.\u003CGetCallSite\u003Eb__0(Type) \u002B 0x10\r\n   at System.Collections.Concurrent.ConcurrentDictionary\u00602.GetOrAdd(TKey, Func\u00602) \u002B 0x9a\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetCallSite(Type, CallSiteChain) \u002B 0x7c\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type, Type, CallSiteChain, ParameterInfo[], Boolean) \u002B 0x88\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite(ResultCache, Type, Type, CallSiteChain) \u002B 0x170\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric(ServiceDescriptor, Type, CallSiteChain, Int32, Boolean) \u002B 0xf0\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric(Type, CallSiteChain) \u002B 0xad\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type, CallSiteChain) \u002B 0x9c\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.\u003C\u003Ec__DisplayClass7_0.\u003CGetCallSite\u003Eb__0(Type) \u002B 0x10\r\n   at System.Collections.Concurrent.ConcurrentDictionary\u00602.GetOrAdd(TKey, Func\u00602) \u002B 0x9a\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetCallSite(Type, CallSiteChain) \u002B 0x7c\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type, Type, CallSiteChain, ParameterInfo[], Boolean) \u002B 0x88\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite(ResultCache, Type, Type, CallSiteChain) \u002B 0x2b7\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(ServiceDescriptor, Type, CallSiteChain, Int32) \u002B 0x10e\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(Type, CallSiteChain) \u002B 0x83\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type, CallSiteChain) \u002B 0x86\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.\u003C\u003Ec__DisplayClass7_0.\u003CGetCallSite\u003Eb__0(Type) \u002B 0x10\r\n   at System.Collections.Concurrent.ConcurrentDictionary\u00602.GetOrAdd(TKey, Func\u00602) \u002B 0x9a\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetCallSite(Type, CallSiteChain) \u002B 0x7c\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type, Type, CallSiteChain, ParameterInfo[], Boolean) \u002B 0x88\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite(ResultCache, Type, Type, CallSiteChain) \u002B 0x170\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(ServiceDescriptor, Type, CallSiteChain, Int32) \u002B 0x10e\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateEnumerable(Type, CallSiteChain) \u002B 0x2bc\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type, CallSiteChain) \u002B 0xb2\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.\u003C\u003Ec__DisplayClass7_0.\u003CGetCallSite\u003Eb__0(Type) \u002B 0x10\r\n   at System.Collections.Concurrent.ConcurrentDictionary\u00602.GetOrAdd(TKey, Func\u00602) \u002B 0x9a\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetCallSite(Type, CallSiteChain) \u002B 0x7c\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type, Type, CallSiteChain, ParameterInfo[], Boolean) \u002B 0x88\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite(ResultCache, Type, Type, CallSiteChain) \u002B 0x2b7\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric(ServiceDescriptor, Type, CallSiteChain, Int32, Boolean) \u002B 0xf0\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric(Type, CallSiteChain) \u002B 0xad\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type, CallSiteChain) \u002B 0x9c\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.\u003C\u003Ec__DisplayClass7_0.\u003CGetCallSite\u003Eb__0(Type) \u002B 0x10\r\n   at System.Collections.Concurrent.ConcurrentDictionary\u00602.GetOrAdd(TKey, Func\u00602) \u002B 0x9a\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetCallSite(Type, CallSiteChain) \u002B 0x7c\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type, Type, CallSiteChain, ParameterInfo[], Boolean) \u002B 0x88\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite(ResultCache, Type, Type, CallSiteChain) \u002B 0x170\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric(ServiceDescriptor, Type, CallSiteChain, Int32, Boolean) \u002B 0xf0\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric(Type, CallSiteChain) \u002B 0xad\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type, CallSiteChain) \u002B 0x9c\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.\u003C\u003Ec__DisplayClass7_0.\u003CGetCallSite\u003Eb__0(Type) \u002B 0x10\r\n   at System.Collections.Concurrent.ConcurrentDictionary\u00602.GetOrAdd(TKey, Func\u00602) \u002B 0x9a\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetCallSite(Type, CallSiteChain) \u002B 0x7c\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type, Type, CallSiteChain, ParameterInfo[], Boolean) \u002B 0x88\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite(ResultCache, Type, Type, CallSiteChain) \u002B 0x170\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(ServiceDescriptor, Type, CallSiteChain, Int32) \u002B 0x10e\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact(Type, CallSiteChain) \u002B 0x83\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite(Type, CallSiteChain) \u002B 0x86\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.\u003C\u003Ec__DisplayClass7_0.\u003CGetCallSite\u003Eb__0(Type) \u002B 0x10\r\n   at System.Collections.Concurrent.ConcurrentDictionary\u00602.GetOrAdd(TKey, Func\u00602) \u002B 0x9a\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetCallSite(Type, CallSiteChain) \u002B 0x7c\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.CreateServiceAccessor(Type) \u002B 0x68\r\n   at System.Collections.Concurrent.ConcurrentDictionary\u00602.GetOrAdd(TKey, Func\u00602) \u002B 0x9a\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type, ServiceProviderEngineScope) \u002B 0x2b\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type) \u002B 0xc\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type) \u002B 0x14\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[T](IServiceProvider) \u002B 0x39\r\n   at Microsoft.AspNetCore.SignalR.Client.HubConnectionBuilder.Build() \u002B 0x43\r\n   at Mads.Models.Core.Clients.WebApi.\u003CRegisterClientAsync\u003Ed__30.MoveNext() \u002B 0x146\r\n",
    "upvotes": 0,
    "labels": [
      "task",
      "area-signalr",
      "severity-nice-to-have",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcxODA5MzI5Mg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "https://docs.microsoft.com/en-us/dotnet/framework/net-native/net-native-general-troubleshooting\r\nSpecifically the section about \u0060MissingMetadataException\u0060",
        "createdAt": "2020-10-28T17:32:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27297#issuecomment-718093292"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcxODExMDQxNQ==",
        "parentId": null,
        "author": "p2pbsh",
        "content": "Hi Brennan, I was looking into that before I posted but not really sure what I\u0027m supposed to add to the runtime directives, I\u0027m guessing you\u0027re suggesting details of my types I\u0027m serializing?\r\n\r\nThat leaves me with two questions:\r\n\r\n- Why is it falling over when calling hub builder before my types are ever involved? (its not failing when I try to send over SignalR, I don\u0027t get that far)\r\n\r\n- Why was it working fine in 3.1 then failed moving to 5? \r\n\r\nI had issues in the past with SignalR and .NET Native missing metadata when sending objects, but that was using System.Text.Json, switching back to Newtonsoft as in my example solved those problems in 3.1    ",
        "createdAt": "2020-10-28T18:01:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27297#issuecomment-718110415"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcxOTgwNTkxNA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "@tommcdon are there attributes/ways to avoid trimming to libraries? What can the user do to fix this? I think the rd.xml file will work but I don\u0027t know what types etc. you add.",
        "createdAt": "2020-10-30T21:22:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27297#issuecomment-719805914"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyMDY2MTk3MA==",
        "parentId": null,
        "author": "tommcdon",
        "content": "Hi @p2pbsh, .NET native is an AOT (Ahead-Of-Time) compilation technology and as part of that it resolves method and type at compile time.  This is contrasted to .NET Core which is a runtime technology and can dynamically resolve this information at execution time.  Can you try using the .NET native [missing metadata troubleshooter](https://docs.microsoft.com/en-us/dotnet/framework/net-native/reflection-and-net-native)?  ",
        "createdAt": "2020-11-02T18:57:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27297#issuecomment-720661970"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyMTAzNjYwNw==",
        "parentId": null,
        "author": "p2pbsh",
        "content": "Brennan / Tom\r\n\r\nI revisited the missing metadata and found adding the following resolved the issue:\r\n\r\n\u0060\u003CApplication\u003E\r\n    \u003CNamespace Name=\u0022Microsoft.Extensions.Options\u0022 Serialize=\u0022Required Public\u0022 /\u003E\r\n  \u003C/Application\u003E\r\n\u0060\r\n\r\nHappy to be back up and running, but would still argue something is amiss as the requirement to do this was introduced when moving to .NET5. ",
        "createdAt": "2020-11-03T10:38:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27297#issuecomment-721036607"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyMTk3OTU3NQ==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-11-04T21:16:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27297#issuecomment-721979575"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyMTk4MDEyNQ==",
        "parentId": null,
        "author": "jkotalik",
        "content": "@p2pbsh can you potentially provide us a repro for us to test that we can run locally? Like a git repo that we can clone and run. That will help us narrow down this issue.\r\n\r\nBesides that, potentially adding docs to aspnetcore about using UWP with SignalR.",
        "createdAt": "2020-11-04T21:17:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27297#issuecomment-721980125"
      },
      {
        "id": "IC_kwDOAQzde841SSe-",
        "parentId": null,
        "author": "bbhxwl",
        "content": "![image](https://user-images.githubusercontent.com/26525599/128454755-dfb57238-4b2b-45e1-af48-874141205425.png)\r\nI also use the signalr of xamarin.forms uwp to make mistakes. I don\u0027t know how to solve it.\r\n\r\n",
        "createdAt": "2021-08-06T04:10:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27297#issuecomment-893986750"
      },
      {
        "id": "IC_kwDOAQzde85EJ9ih",
        "parentId": null,
        "author": "FrogsLegs",
        "content": "\u003E Brennan / Tom\r\n\u003E \r\n\u003E I revisited the missing metadata and found adding the following resolved the issue:\r\n\u003E \r\n\u003E \u0060\u003CApplication\u003E \u003CNamespace Name=\u0022Microsoft.Extensions.Options\u0022 Serialize=\u0022Required Public\u0022 /\u003E \u003C/Application\u003E \u0060\r\n\u003E \r\n\u003E Happy to be back up and running, but would still argue something is amiss as the requirement to do this was introduced when moving to .NET5.\r\n\r\nFinally! A solution to this error. Adding this to the Default.rd.xml resolved it for me.",
        "createdAt": "2022-06-01T11:06:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27297#issuecomment-1143462049"
      },
      {
        "id": "IC_kwDOAQzde85OPiH4",
        "parentId": null,
        "author": "JeevaRP-SDE",
        "content": "Hi @FrogsLegs  @BrennanConroy  @tommcdon  @javiercn  Guys \r\nCan you please help me to understand this use case to me?\r\n",
        "createdAt": "2022-11-13T10:18:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27297#issuecomment-1312694776"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3MzQ3MTgxNjg=",
    "title": "[SignalR cpp] Allow handler registrations while connection is active",
    "url": "https://github.com/dotnet/aspnetcore/issues/27445",
    "createdAt": "2020-11-02T18:13:24Z",
    "lastUpdated": "2023-06-02T01:18:39Z",
    "body": "Currently \u0060hubConnection.on(...)\u0060 will throw if the connection is active, this isn\u0027t the pattern we follow in the other clients and we should allow handlers to be registered while the connection is running.\r\n\r\nhttps://github.com/aspnet/SignalR-Client-Cpp/blob/bcea0940576306ff625caa508b4f6a2a80d3fbe3/src/signalrclient/hub_connection_impl.cpp#L83-L86",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "feature-client-c\u002B\u002B",
      "severity-minor",
      "affected-very-few"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyMTk4MDMyMw==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-11-04T21:18:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27445#issuecomment-721980323"
      },
      {
        "id": "IC_kwDOAQzde85KbgXl",
        "parentId": null,
        "author": "CodeMnke",
        "content": "All you need to do is just remove the check, there is no reason for it. ",
        "createdAt": "2022-09-15T22:58:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27445#issuecomment-1248724453"
      },
      {
        "id": "IC_kwDOAQzde85Kewjv",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E All you need to do is just remove the check\r\n\r\nNot quite, the collection being inserting into is not thread safe so more thought needs to be put into the fix than just \u0022remove the check\u0022.\r\n\r\nIf you\u0027re passionate about this issue the repo is open source, feel free to open a PR to fix it \uD83D\uDE03 ",
        "createdAt": "2022-09-16T16:47:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27445#issuecomment-1249577199"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3Mzc5MTUzMzA=",
    "title": "[Epic] SignalR Redis improvements",
    "url": "https://github.com/dotnet/aspnetcore/issues/27583",
    "createdAt": "2020-11-06T17:08:53Z",
    "lastUpdated": "2024-03-02T00:51:14Z",
    "body": "* Figure out if Clustering works or what it would take to make it work - It works\r\n* If the redis connection is lost what should the behavior be\r\n  * Call ConenctAsync again for a new connection? https://github.com/dotnet/aspnetcore/issues/5393\r\n  * Buffer Client.X.SendAsync calls instead of throw?\r\n* Investigate new streaming APIs https://github.com/dotnet/aspnetcore/issues/5313",
    "upvotes": 5,
    "labels": [
      "enhancement",
      "cost: L",
      "area-signalr",
      "severity-major"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyMzMyNDkxNg==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-11-06T22:17:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27583#issuecomment-723324916"
      },
      {
        "id": "IC_kwDOAQzde841At4t",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-29T18:53:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27583#issuecomment-889380397"
      },
      {
        "id": "IC_kwDOAQzde849_epS",
        "parentId": null,
        "author": "sikri-eic",
        "content": "\u003E Figure out if Clustering works or what it would take to make it work\r\n\r\nOur experience shows that Redis clustering (with Azure Redis Cache) does not work (of course, it\u0027s possible that we configured something wrong). So, we had to move our SignalR app to a non-clustered Redis cache apart from all the others using the Redis cluster (which is not a great way to scale and is not cost-effective). So, I\u0027m very interested in learning what your findings (and solution) on this will be. Subscribing...",
        "createdAt": "2022-02-15T09:32:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27583#issuecomment-1040050770"
      },
      {
        "id": "IC_kwDOAQzde85MAZfu",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:28:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27583#issuecomment-1275172846"
      },
      {
        "id": "IC_kwDOAQzde85OIGhb",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Tested Redis Clustering with Azure Redis Cache. No additional configuration or code changes were needed on the server, just the connection string like usual.\r\n\r\nTested with 2 servers on separate shards, one client on each server.\r\nTested that broadcast to all clients works, and that sending to a specific connection works (this hits the \u0022group\u0022 subscription code path).\r\nAlso, forced 1 shard (primary and replica) to restart, server automatically reconnected and maintained it\u0027s subscriptions, tested via broadcast and send to specific client again.",
        "createdAt": "2022-11-10T18:44:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27583#issuecomment-1310746715"
      },
      {
        "id": "IC_kwDOAQzde85OKc8W",
        "parentId": null,
        "author": "sikri-eic",
        "content": "@BrennanConroy Thank you for testing this. We could not get Redis clustering to work on Azure Cache for Redis. I cannot remember what sort of errors/problems we got.\r\n\r\n\u003E No additional configuration or code changes were needed on the server, just the connection string like usual.\r\n\r\nThis is interesting. Our connection string is in the following format as of now: \u0060\u003Curl\u003E:\u003Cport\u003E,password=\u003Cpassword\u003E,ssl=True,abortConnect=False\u0060\r\n\r\nI wonder if this has anything to do with the problems we have experienced.\r\n\r\nAnyway, I will retest this as soon as I can.",
        "createdAt": "2022-11-11T08:05:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27583#issuecomment-1311362838"
      },
      {
        "id": "IC_kwDOAQzde85ONICM",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E Our connection string is in the following format as of now: \u0060\u003Curl\u003E:\u003Cport\u003E,password=\u003Cpassword\u003E,ssl=True,abortConnect=False\u0060\r\n\r\nThat\u0027s a normal connection string.",
        "createdAt": "2022-11-11T18:43:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27583#issuecomment-1312063628"
      },
      {
        "id": "IC_kwDOAQzde85ORfIH",
        "parentId": null,
        "author": "sikri-eic",
        "content": "That\u0027s what I thought too... Will test as soon as I can. Thanks.",
        "createdAt": "2022-11-14T07:24:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27583#issuecomment-1313206791"
      },
      {
        "id": "IC_kwDOAQzde85Ovss2",
        "parentId": null,
        "author": "tomap",
        "content": "Hello, \r\n\r\nMy understanding was that the commands used for redis are publish and subscribe which are not spread across nodes of a redis cluster.\r\nSo I\u0027m not sure to understand how the current implementation of backplane on redis is compatible with redis clusters. \r\n\r\nRedis 7 introduced ssubscribe and spublish which are compatible with redis clusters. (Sharded)\r\n\r\nBut maybe there is something I did not understand in either redis clusters or SignalR backplane?",
        "createdAt": "2022-11-20T12:58:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27583#issuecomment-1321126710"
      },
      {
        "id": "IC_kwDOAQzde85O0VB8",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "I think this is the key paragraph:\r\n\u003E Sharded Pub/Sub helps to scale the usage of Pub/Sub in cluster mode. It restricts the propagation of message to be within the shard of a cluster. Hence, the amount of data passing through the cluster bus is limited in comparison to global Pub/Sub where each message propagates to each node in the cluster. This allows users to horizontally scale the Pub/Sub usage by adding more shards.\r\n\r\nSo these new Redis commands help performance, but that doesn\u0027t mean Sharding will not work with SignalR today.",
        "createdAt": "2022-11-21T16:35:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27583#issuecomment-1322340476"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3Mzc5MjAzMTA=",
    "title": "SignalR improve connection close experience",
    "url": "https://github.com/dotnet/aspnetcore/issues/27584",
    "createdAt": "2020-11-06T17:16:44Z",
    "lastUpdated": "2021-07-29T18:55:11Z",
    "body": "* Flow more exceptions to OnDisconnectedAsync https://github.com/dotnet/aspnetcore/issues/26701\r\n* Investigate SendBeacon https://github.com/dotnet/aspnetcore/issues/14847\r\n* Improve error logs\r\n  * Browser can use ResponseType https://github.com/dotnet/aspnetcore/issues/26636\r\n  * Some logs look almost identical on client and server would be nice to more easily differentiate them\r\n  * If something errors can we provide suggestions for what is wrong?\r\n* Add more to the troubleshooting doc https://docs.microsoft.com/en-us/aspnet/core/signalr/troubleshoot?view=aspnetcore-3.1\r\n* 404 errors https://github.com/dotnet/aspnetcore/issues/5350",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "severity-minor",
      "affected-medium"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDcyMzMyNDk5Mw==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-11-06T22:18:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27584#issuecomment-723324993"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczODc3MDQ3MA==",
        "parentId": null,
        "author": "aleksandar-manukov",
        "content": "Hi,\r\n\r\nI am not sure if this is the correct place to ask, but we have a problem related to closing the SignalR connection. The problem is with \u0060StopAsync\u0060 method of the \u0060HubConnection\u0060 class of the SignalR Core .NET client. After migrating to version 5.0.0 of the client it takes several seconds for the method to complete (between 5 and 10 seconds). In order to not wait several seconds we make a fire-and-forget workaround:\r\n\u0060\u0060\u0060c#\r\nTask.Run(async () =\u003E\r\n{\r\n    // This try catch is in any case in order to not have any unhandled exception while stopping the connection.\r\n    try\r\n    {\r\n        try\r\n        {\r\n            await _hubConnection.StopAsync();\r\n        }\r\n        finally\r\n        {\r\n            await _hubConnection.DisposeAsync();\r\n        }\r\n    }\r\n    catch\r\n    {\r\n    }\r\n});\r\n\u0060\u0060\u0060\r\nDo you know if this workaround could lead to some open connections left? And is this planned to be fixed soon?\r\n\r\nThanks in advance!",
        "createdAt": "2020-12-04T12:58:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27584#issuecomment-738770470"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczODkxNjUyMg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E I am not sure if this is the correct place to ask\r\n\r\nIt isn\u0027t, please file a new issue",
        "createdAt": "2020-12-04T17:36:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27584#issuecomment-738916522"
      },
      {
        "id": "IC_kwDOAQzde841AuJn",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-29T18:55:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/27584#issuecomment-889381479"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3NTE0MTc5NDA=",
    "title": "Android client, in version 5.0.0-preview.8.20414.8, call HubConnection.onClosed(this) problem.",
    "url": "https://github.com/dotnet/aspnetcore/issues/28171",
    "createdAt": "2020-11-26T09:09:47Z",
    "lastUpdated": "2022-12-27T14:18:16Z",
    "body": "1.The client network is abnormally disconnected\r\n2.The server network is abnormally disconnected\r\n3.The server closes and disconnects\r\n4.The client normally stops and disconnects\r\n\u0060override fun invoke(exception: Exception?) {\u0060\r\n       \u0060LogUtils.sf(\u0022invoke ${exception?.message.toString()}\u0022)\u0060 \r\n       \u0060mSignalImp.disconnected()\u0060\r\n\u0060}\u0060\r\n\r\nI tested the four cases, only the second one will take a long time to get the callback, probably more than one minute, and the other three methods will get the callback immediately.\r\nI found RealWebSocket.class in the source code of Okhttp3, which has an attribute\r\n\r\n\u0060/**\u0060\r\n  \u0060* The maximum amount of time after the client calls [close] to wait for a graceful shutdown. If\u0060\r\n  \u0060* the server doesn\u0027t respond the web socket will be canceled.\u0060\r\n  \u0060*/\u0060\r\n\u0060private const val CANCEL_AFTER_CLOSE_MILLIS = 60L * 1000\u0060\r\n\r\nIn the case of server network abnormality, how can the client get the disconnection callback in a short time instead of printing the log \u0060HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\u0060  It takes one minute to print to get the onClose callback.\r\nI now want to get the callback in the invoke method of onClose immediately after disconnecting no matter what the situation, what do I need to do, please help me.\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "bug",
      "area-signalr"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczNjA5MDEwMA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "You can configure the keepalive timeout on the client with \u0060setServerTimeout(...)\u0060. If you update that, you should also change the servers \u0060KeepAliveInterval\u0060 value to be half the timeout.",
        "createdAt": "2020-11-30T22:18:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28171#issuecomment-736090100"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczNjE2Mzk0Mw==",
        "parentId": null,
        "author": "reverseAndroid",
        "content": "\u0060\u0060\u0060\r\nfun connection(url: String, token: String, target: String) {\r\n\r\n        mHubConnection = HubConnectionBuilder.create(url)\r\n            .withAccessTokenProvider(Single.defer { Single.just(token) })\r\n            .build()\u0060\r\n\r\n       mHubConnection.serverTimeout = 17000\r\n        mHubConnection.keepAliveInterval = 10000\r\n\r\n        mHubConnection.on(\r\n            target,\r\n            { message, group -\u003E mSignalImp.onReceive(message, group) },\r\n            String::class.java, String::class.java\r\n        )\r\n\r\n        mHubConnection.start()\r\n            .subscribeOn(Schedulers.io())\r\n            .observeOn(AndroidSchedulers.mainThread())\r\n            .subscribe(object : CompletableObserver, OnClosedCallback {\r\n                override fun onSubscribe(d: Disposable) {\r\n\r\n                }\r\n\r\n                override fun onComplete() {\r\n                    mHubConnection.onClosed(this)\r\n                    mSignalImp.onConnectionSuccessful()\r\n                }\r\n\r\n                override fun onError(e: Throwable) {\r\n                    mSignalImp.onConnectionFail(e.message.toString())\r\n                }\r\n\r\n                //mHubConnection.onClosed(this)  OnClosedCallback\r\n                //\u7528\u4E8E\u76D1\u542C\u65AD\u5F00\u8FDE\u63A5\u7684\u5404\u79CD\u60C5\u51B5\r\n                //1.\u5BA2\u6237\u7AEF\u7F51\u7EDC\u5F02\u5E38\u65AD\u5F00\u8FDE\u63A5\r\n                //2.\u670D\u52A1\u7AEF\u7F51\u7EDC\u5F02\u5E38\u65AD\u5F00\u8FDE\u63A5\r\n                //3.\u670D\u52A1\u7AEF\u5173\u95ED\u65AD\u5F00\u8FDE\u63A5\r\n                //4.\u5BA2\u6237\u7AEF\u6B63\u5E38stop\u65AD\u5F00\u8FDE\u63A5\r\n                override fun invoke(exception: Exception?) {\r\n                    LogUtils.sf(\u0022invoke  ${exception?.message.toString()}\u0022)\r\n                    if (!mIsManualDisconnect) {\r\n                        mSignalImp.onErrorDisconnected()\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\u0060\u0060\u0060\r\n\r\nYou can take a look at my code to see what\u0027s wrong. I set serverTimeout and keepAliveInterval as you said, but I have no effect here. If the server\u0027s network is shut down, it will still wait 1 minute before calling back to invoke(exception: Exception?) method.\r\n\r\nIn addition, I want to know what is the relationship between getting a callback in one minute and the server? Because I have turned off the server network during the test. I don\u0027t understand why it is related to the keepAliveInterval property of the server.",
        "createdAt": "2020-12-01T01:50:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28171#issuecomment-736163943"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczNjcyMjI1OQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Oh I didn\u0027t notice the hardcoded 60 second \u0060CANCEL_AFTER_CLOSE_MILLIS\u0060. You can try to set timeouts on the OkHttpClientBuilder and see if one of them helps timeout the close.\r\n\r\n\u0060\u0060\u0060\r\nHubConnectionBuilder.create(url)\r\n    .setHttpClientBuilderCallback((builder) -\u003E {\r\n        builder.callTimeout(...);\r\n        builder.readTimeout(...);\r\n        builder.writeTimeout(...);\r\n    });\r\n\u0060\u0060\u0060\r\n\r\nNotes: We should look at doing the same thing we did for browser websockets. When stop is called we unhook the websocket handlers, call close on it, then run the onClose callback inline instead of relying on the websocket connection closing gracefully.",
        "createdAt": "2020-12-01T18:02:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28171#issuecomment-736722259"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczNjcyMjQyNQ==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-12-01T18:02:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28171#issuecomment-736722425"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczNjkzMDk3NQ==",
        "parentId": null,
        "author": "reverseAndroid",
        "content": "![QQ\u622A\u56FE20201202093640](https://user-images.githubusercontent.com/25810748/100816828-fa517500-3481-11eb-9bc5-eab59ea26612.png)\r\n![QQ\u622A\u56FE20201202093704](https://user-images.githubusercontent.com/25810748/100816832-fd4c6580-3481-11eb-8429-17b2eed1a673.png)\r\n\r\nAccording to what you said, I set OKHttpClientBuilder, but it will still call back after 60s.",
        "createdAt": "2020-12-02T01:40:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28171#issuecomment-736930975"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczNjkzMTYyNw==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "15 * 1000 seconds is a very long time, try just 15, or using milliseconds.",
        "createdAt": "2020-12-02T01:42:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28171#issuecomment-736931627"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDczNjk0NTU1MA==",
        "parentId": null,
        "author": "reverseAndroid",
        "content": "![QQ\u622A\u56FE20201202102235](https://user-images.githubusercontent.com/25810748/100820114-7e0e6000-3488-11eb-90d3-7212a603fb32.png)\r\nSorry, I was a little anxious and set the attribute wrong, but I set it to 300 milliseconds. He still didn\u0027t get a callback immediately, and he would still wait 60s later.",
        "createdAt": "2020-12-02T02:24:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28171#issuecomment-736945550"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3Njc3MjQ4OTI=",
    "title": "Encoder abstraction for SignalR.StackExchangeRedis pub/sub messages",
    "url": "https://github.com/dotnet/aspnetcore/issues/28669",
    "createdAt": "2020-12-15T15:41:17Z",
    "lastUpdated": "2020-12-16T21:08:43Z",
    "body": "### Problem Description\r\nAs pointed out by [issue 18074](https://github.com/dotnet/aspnetcore/issues/18074), references to \u0060MessagePack\u0060 are in lock step with ASP.NET Core 3.x and ASP.NET 5.  Consumers that want to use \u0060MessagePack\u0060 for their own application use and also use \u0060Microsoft.AspNetCore.SignalR.StackExchangeRedis\u0060 are forced to the same major version of \u0060MessagePack\u0060.  This also means that upgrading to .NET 5 is more challenging for those projects because they may not be ready to perform a major version upgrade of \u0060MessagePack\u0060.\r\n\r\n### Proposed Solution\r\nI\u0027d like to see  \u0060Microsoft.AspNetCore.SignalR.StackExchangeRedis\u0060 depend on an abstraction for the message encoder used for Redis pub/sub.  That would allow us to make adapters to have any version of the SignalR library work with any version of \u0060MessagePack\u0060.  (Similar to how ASP.NET made an abstraction for the json serializer)\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc0NzAxNjQ0MQ==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-12-16T21:05:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28669#issuecomment-747016441"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc0NzAyMTE1Mg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Leaving open to see if there is customer interest.\r\n\r\nAs of right now we aren\u0027t planning on implementing this.",
        "createdAt": "2020-12-16T21:08:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28669#issuecomment-747021152"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3Njc5MzMyODE=",
    "title": "C wrapper for SignalR C\u002B\u002B client",
    "url": "https://github.com/dotnet/aspnetcore/issues/28673",
    "createdAt": "2020-12-15T18:01:15Z",
    "lastUpdated": "2023-06-02T01:19:07Z",
    "body": "We should provide an optional C wrapper for the C\u002B\u002B client so that:\r\n* C programs can use the client\r\n* Projects using other compilers can consume the client without worrying about things like incompatible \u0060std::string\u0060 implementations\r\n  * e.g. Unreal is built using X, and when consuming SignalR built with Y, you can get seg faults inside the SignalR library when it tries to use the \u0060std::string\u0060 passed in",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "feature-client-c\u002B\u002B"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc0NTQ2MzY1OA==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2020-12-15T18:01:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/28673#issuecomment-745463658"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU3ODk3MDU4ODk=",
    "title": "SignalR: Reconnecting event sends a null Exception object inside the handler.",
    "url": "https://github.com/dotnet/aspnetcore/issues/29447",
    "createdAt": "2021-01-20T07:10:43Z",
    "lastUpdated": "2021-07-26T21:27:10Z",
    "body": "### Describe the bug\r\nHello,\r\nI\u0027m using Microsoft.AspNetCore.SignalR.Client 3.1.\r\nI found the following Reconnecting event behavior:\r\nin some cases, the Exception argument of the handler for this event is null.\r\n\r\n### To Reproduce\r\nWhen I reproduced this error, I stopped the server in VS and after that the Reconnecting event handler on the Client had an Exception object = null.\r\nI\u0027ve seen this several times, but in most cases the Exception object is not null, so it\u0027s hard to write exact steps to reproduce.\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc2Mzk1MzI5Nw==",
        "parentId": null,
        "author": "JunTaoLuo",
        "content": "We\u0027ll update the docs in this area to be clearer.",
        "createdAt": "2021-01-20T21:19:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29447#issuecomment-763953297"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc2Mzk1MzM0NA==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-01-20T21:19:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29447#issuecomment-763953344"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc2NDYyMjk4MA==",
        "parentId": null,
        "author": "ijamon",
        "content": "Thanks.",
        "createdAt": "2021-01-21T12:53:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29447#issuecomment-764622980"
      },
      {
        "id": "IC_kwDOAQzde8403yVo",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-26T21:26:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/29447#issuecomment-887039336"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU4MDM5OTE2ODI=",
    "title": "Flow cookies from negotiate to the transport",
    "url": "https://github.com/dotnet/aspnetcore/issues/30007",
    "createdAt": "2021-02-08T21:39:39Z",
    "lastUpdated": "2023-06-02T01:19:28Z",
    "body": "Same issue as https://github.com/dotnet/aspnetcore/pull/26566 but for the C\u002B\u002B client.\r\n\r\nUnfortunately the cpprestsdk doesn\u0027t do anything with cookies so we need to handle them manually. i.e. Try to find an open source project that handles cookies and use that.",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "feature-client-c\u002B\u002B"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc3NTQ5OTg3MQ==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-02-08T22:16:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30007#issuecomment-775499871"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU4MTEzMjY4MzY=",
    "title": "No Java Documentation on RxJava Schedulers and Threading",
    "url": "https://github.com/dotnet/aspnetcore/issues/30272",
    "createdAt": "2021-02-18T17:50:52Z",
    "lastUpdated": "2021-02-19T21:10:28Z",
    "body": "### Describe the bug\r\nThere is no documentation or references on what thread the SignalR Core code runs on and if the client needs to manage threading. We have implement as shown below but need clarification on:\r\n\r\n1. If we need to specify with Rx scheduler to use for subscriptions and observations\r\n2. What thread will the onClosed callbacks be called on. From what we see, it is run on the OkHttp thread.\r\n\r\n### To Reproduce\r\nWe have implemented the library but subscribing \u0060start(), invoke() and stop()\u0060 on the \u0060Schedulers.io()\u0060 while observing on \u0060AndroidSchedulers.mainThread()\u0060 where needed. Not sure if this is correct or even needed but it was done to ensure network activity is performed on a background thread.\r\n\r\nThe above also lets us ensure that our logic runs on the Main thread but the \u0060onClosed\u0060 callback still runs on the \u0060OkHttp thread.\r\n\r\n\u0060\u0060\u0060\r\nonClosed { e -\u003E\r\n                    if (e == null) {\r\n                        LogUtils.d(TAG, \u0022Connection closed\u0022)\r\n                    } else {\r\n                        LogUtils.logMessageAndReportException(\r\n                            TAG,\r\n                            \u0022createHubConnection()\u0022,\r\n                            \u0022Connection closed\u0022,\r\n                            e\r\n                        )\r\n                    }\r\n                    LogUtils.d(TAG, \u0022Current thread: ${Thread.currentThread()}\u0022)\r\n                }\r\n\u0060\u0060\u0060\r\n\r\nprints out \u0060Current thread: Thread[OkHttp https://platform-sr.service.signalr.net/...,5,main]\u0060\r\n\r\n### Further technical details\r\n- Java Client 5.0.3\r\n- Android Studio 4.1.2\r\n",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc4MjM1MzQ0OA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Currently we don\u0027t manually schedule work, so you will see things like onClosed being on an OkHttp thread. Generally we recommend people don\u0027t do long running work in callbacks, and if you want to be safe you should specify a scheduler when subscribing to the RX primitives returned by the library.",
        "createdAt": "2021-02-19T21:09:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30272#issuecomment-782353448"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDc4MjM1NDAyMw==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-02-19T21:10:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30272#issuecomment-782354023"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU4MzIyMTI3MTU=",
    "title": "Custom Logging in SignalR DefaultHubDispatcher ",
    "url": "https://github.com/dotnet/aspnetcore/issues/30956",
    "createdAt": "2021-03-15T21:37:59Z",
    "lastUpdated": "2021-04-06T19:50:30Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\nI\u0027d like to log binding-errors and method not found errors in a SignalR-Hub as errors or warning. Currently they are logged as debug. So i have no chance on the server-side to detect, if an api is calling invalid methods. Except enabling debug-logging for \u0022Microsoft.AspNetCore.SignalR\u0022.\r\n\r\nIn Version 1.1 the DefaultHubDispatcher was public, so it was possible to override and replace it. With .net 5 the Dispatcher is now internal and it is no longer possible to override it.\r\nFurther on i found no possibilty to inject a custom logging logic. Do i miss something?\r\n\r\n### Describe the solution you\u0027d like\r\nThe easiest and fastest way would be to set DefaultHubDispatcher back to public. A maybe better fix would be to allow a custom error handling.\r\n\r\n\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgwMzA5MDUxNQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "We\u0027ve had a similar ask for the client side for binding errors at https://github.com/dotnet/aspnetcore/issues/15146\r\n\r\nAs of right now we have no plans on adding error handling. Backlogging to see if there is more customer asks for this.",
        "createdAt": "2021-03-19T20:07:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30956#issuecomment-803090515"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgwMzA5MDU1NQ==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-03-19T20:07:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30956#issuecomment-803090555"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgwMzEzMDYwMQ==",
        "parentId": null,
        "author": "CC84",
        "content": "This is very disappointing..... e.g. in case of an attack, i don\u0027t get any hint, someone is trying to find hidden functions.\r\n\r\nI finally can\u0027t understand, why an existing function in an earlier release is removed by simple making this class internal. Just make it public again and everyone can put it\u0027s own logic into it.",
        "createdAt": "2021-03-19T21:03:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30956#issuecomment-803130601"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgwNDgyNTk4Nw==",
        "parentId": null,
        "author": "davidfowl",
        "content": "We don\u0027t want the dispatcher to be public API. It\u0027s a hammer and super advanced. There are likely other smaller subsets of functionality that can be made public to accomplish the same task",
        "createdAt": "2021-03-23T11:27:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30956#issuecomment-804825987"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxMzA4NDk0MQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "What error handling do we need to add to support your needs @CC84? We\u0027re not going to be making the dispatcher public.",
        "createdAt": "2021-04-04T19:11:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30956#issuecomment-813084941"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxNDM0NDcyNA==",
        "parentId": null,
        "author": "CC84",
        "content": "I\u0027d like to get infos when a client calls a non existent method. Currently they are logged at loglevel debug and i have no chance to monitor them.\r\nThere are 2 usecases:\r\n1) When you access signalr from JS, a method call fails when a parameter is missing even when it\u0027s nullable. This is logged at the JS Client, but in most cases the signalr client is running in a browser and an enduser will not monitor the console output for errors-\r\n2) I\u0027d like to know, when a bot is trying to find undocumented methods. Currently you can connect to the signalR Hub and try any method and on serverside there is no way to log them except setting loglevel to debug.\r\n\r\nA very simple way would be to allow to change loglevel of missing method/wrongparameter logs.\r\n\r\n The relevant methods should be  ProcessInvocationBindingFailure and StreamBindingFailureMessage",
        "createdAt": "2021-04-06T18:27:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30956#issuecomment-814344724"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxNDM1MDE1NA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Great! I think this aligns with what I\u0027m thinking here https://github.com/dotnet/aspnetcore/issues/15146. We\u0027d expose a way to handle unknown methods on both server and client.",
        "createdAt": "2021-04-06T18:34:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30956#issuecomment-814350154"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxNDM5NTg1OA==",
        "parentId": null,
        "author": "CC84",
        "content": "Sounds good!",
        "createdAt": "2021-04-06T19:50:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/30956#issuecomment-814395858"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU4MzQyNzczMzI=",
    "title": "Investigate replacing cpprestsdk with libcurl",
    "url": "https://github.com/dotnet/aspnetcore/issues/31011",
    "createdAt": "2021-03-18T00:23:33Z",
    "lastUpdated": "2023-06-02T01:19:52Z",
    "body": "The cpprestsdk just announced that the project has moved into maintenance mode and is not recommended for new projects. We should look at moving to libcurl instead",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "feature-client-c\u002B\u002B"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgwMzA5MTM4Mw==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We will evaluate the request when we are planning the work for the next milestone. To learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-03-19T20:08:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31011#issuecomment-803091383"
      },
      {
        "id": "IC_kwDOAQzde840wleo",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-22T18:49:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31011#issuecomment-885151656"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU4NTc3MTQ5ODg=",
    "title": "SignalR performance: Json is faster than MessagePack",
    "url": "https://github.com/dotnet/aspnetcore/issues/31793",
    "createdAt": "2021-04-14T09:37:08Z",
    "lastUpdated": "2023-06-02T01:20:30Z",
    "body": "### Describe the bug\r\nI\u0027m facing an issue with SignalR. Our benchmark shows that json protocol is faster than messagepack when transfering a lot of data.\r\nWe need to investigate why messagepack isn\u0027t getting the same or better performance than json.\r\n\r\nWhile signalR with json protocol bandwidth increases when using larger packets (following the performance of raw binary websocket implementation), signalR with messagepack seems to be capped.\r\n![image](https://user-images.githubusercontent.com/82504943/114687679-4952c500-9d14-11eb-9880-a5edac42da18.png)\r\n\r\n### To Reproduce\r\nUse the following code:\r\nhttps://github.com/Foxstream/SignalrMessagepackExample\r\n\r\n### Further technical details\r\nIt is a .NET 5.0 project with \u0060Microsoft.AspNetCore.SignalR.Client 5.0.5\u0060 and \u0060Microsoft.AspNetCore.SignalR.Protocols.MessagePack 5.0.5\u0060 packages.\r\nRunning on Windows 10 20H2. It uses websocket transport protocol and HTTP.sys.\r\n\r\nUsing the .NET or the Javascript signalR client doesn\u0027t seem to matter because it will result in similar performance issues.\r\n\r\n#### Results on localhost\r\n\u0060\u0060\u0060\r\nWith messagepack (2000 packets of 256KB)\r\n179 packets/s | Bandwidth=45938 KB/s\r\nIt took 11.14s\r\n\r\nWith json (2000 packets of 256KB)\r\n343 packets/s | Bandwidth=87885 KB/s\r\nIt took 5.82s\r\n\u0060\u0060\u0060\r\n",
    "upvotes": 0,
    "labels": [
      "investigate",
      "feature-httpsys",
      "area-signalr",
      "area-networking"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxOTM4NjA0Ng==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Any reason why the server is using HTTP.sys? Also, that\u0027s pretty impressive, good job JSON \uD83D\uDE04 ",
        "createdAt": "2021-04-14T09:43:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31793#issuecomment-819386046"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxOTM4OTg3OQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Also this pattern is broken https://github.com/Foxstream/SignalrMessagepackExample/blob/f5b24f6f88e3eab63ccf1ad6428f135363e9a69a/SignalrMessagepackExample/Startup.cs#L71-L81. You can\u0027t reuse the \u0060byte[]\u0060 here, you have no idea when it\u0027s been use consumed so you need to allocate a new \u0060byte[]\u0060 everytime to be safe.\r\n\r\nStreaming large binary payloads over SignalR will also have a negative affect your GC behavior. What exactly are you streaming and can you shrink the package size so you don\u0027t end up with lots of temporary LOH allocations.",
        "createdAt": "2021-04-14T09:50:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31793#issuecomment-819389879"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxOTQwMDMyNQ==",
        "parentId": null,
        "author": "foxstream528",
        "content": "Thank you for your quick feedback ^^\u0027\r\n\r\nThat\u0027s a good question. If my memory serves me right, we use HTTP.sys to avoid having a limited number of simultaneous connections (but I am not sure of it, I will investigate).\r\n\r\nTo simplify the example project, I have directly use the \u0060byte[]\u0060, but in our main project, we instanciate an object.\r\n\u0060\u0060\u0060\r\n[MessagePackObject]\r\npublic class VideoDataResponse\r\n{\r\n      [Key(\u0022fragmentNumber\u0022)]\r\n      public int FragmentNumber { get; set; }\r\n\r\n      [Key(\u0022data\u0022)]\r\n      public byte[] Data { get; set; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nWe stream video data, so I do not think we can really shrink the package size.\r\n\r\nedit: I have fixed the \u0060byte[]\u0060 allocation in the example project. It doesn\u0027t seem to change anything about signalR performance.\r\nIf you have a general idea of the problem, feel free to make suggestions, we can investigate on our side and possibly make a Pull Request if we find the issue.",
        "createdAt": "2021-04-14T10:06:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31793#issuecomment-819400325"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxOTgwNzk3Mg==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-04-14T20:23:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31793#issuecomment-819807972"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxOTg5NTQ2NA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Thanks for the repro app. I first tried with Kestrel and didn\u0027t see the huge perf difference. But after switching to Http.Sys I can see the same perf hit.",
        "createdAt": "2021-04-14T22:40:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31793#issuecomment-819895464"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgxOTkxNTE3MA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "![image](https://user-images.githubusercontent.com/7574801/114793220-be3af480-9d3e-11eb-9c55-ebe88435b7bb.png)\r\nWell here is the problem, with MessagePack payloads are sent in 4k chunks, whereas with Json payloads are sent in 64k chunks. Still need to figure out why.",
        "createdAt": "2021-04-14T23:31:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31793#issuecomment-819915170"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgyNDAwNDQ1MA==",
        "parentId": null,
        "author": "foxstream528",
        "content": "We investigate on our side. We were not able to reproduce your analysis, but we found something else: there are \u0022websocket continuation\u0022.\r\n\r\nWith HTTP.sys\r\n- SignalR Json: No websocket continuation\r\n- SignalR MessagePack: websocket continuation\r\n- \u0022\u0022Raw\u0022 websocket: No websocket continuation\r\n\r\nWith Kestrel\r\n- SignalR Json: No websocket continuation\r\n- SignalR MessagePack: websocket contination at first, but then it disappears.\r\n\r\n![image](https://user-images.githubusercontent.com/82504943/115550049-b1238580-a2a9-11eb-942d-1ebabb30eb1d.png)\r\n\r\n\r\nIt seems websocket continuation is related to some sort of handshake because of unknown size packet. We think it may be related to the performance degradation. What do you think?\r\n\r\n\r\nIn any case, do you know if there are workarounds?",
        "createdAt": "2021-04-21T11:59:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31793#issuecomment-824004450"
      },
      {
        "id": "IC_kwDOAQzde841BEBs",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "HttpSys wraps the output stream directly and just writes the data inline as it gets it. Another server like Kestrel, wraps the output stream in a much more complicated way and essentially buffers the writes so they go out in bigger chunks.\r\n\r\nBacklogging as we wont be doing anything in 6.0 here.",
        "createdAt": "2021-07-29T21:25:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31793#issuecomment-889471084"
      },
      {
        "id": "IC_kwDOAQzde841BEDd",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-29T21:25:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/31793#issuecomment-889471197"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU4ODMwMDE1Mjc=",
    "title": "[Design proposal] Strongly-typed SignalR hub proxies and callback handlers",
    "url": "https://github.com/dotnet/aspnetcore/issues/32534",
    "createdAt": "2021-05-09T23:59:27Z",
    "lastUpdated": "2024-03-02T00:51:15Z",
    "body": "## Summary\r\n\r\nThis proposal aims to provide end-to-end strong typing for all interactions between SignalR clients and SignalR hubs.\r\n\r\n## Motivation and goals\r\n\r\n- Currently, SignalR clients can neither make strongly-typed calls to a SignalR hub nor register handlers for server-to-client calls in a strongly-typed manner. As such, developers are forced to write magic strings as well as guess argument sequence and return type.\r\n- [Community has asked for](https://github.com/dotnet/aspnetcore/issues/15198) [this over the years](https://github.com/dotnet/aspnetcore/issues/5278) and [people had to](https://github.com/ocbaker/SignalRNetClientProxyMap) [implement their](https://github.com/JasonEdb/SignalR.TypedClient) [own workarounds](https://github.com/MarkNickeson/SignalrCoreClientSideProxies) [including mine](https://github.com/mehmetakbulut/SignalR.Strong).\r\n- With end-to-end strong typing:\r\n    - Many run-time errors will be caught as build-time errors.\r\n    - Refactoring solutions that has both client and server projects will be easier since both ends can now share an actual interface.\r\n\r\n## In scope\r\n\r\n1. Strongly-typed remote procedure calls from a SignalR client to a SignalR hub\r\n2. Strongly-typed streaming calls from a SignalR client to a SignalR hub\r\n    1. Support for both single direction streaming in either direction and bi-directional streaming\r\n    2. Support for cancellation token in streaming calls.\r\n    3. Support for both \u0060ChannelReader\u003C\u003E\u0060 and \u0060IAsyncEnumerable\u003C\u003E\u0060 as the underlying stream\r\n3. Strongly-typed handlers for calls from a SignalR hub to a SignalR client\r\n\r\n## Out of scope\r\n\r\n1. Non-C# usage. For the time being, we should focus on design and implementation of the ideal solution. Later we can think about how this design can be implemented in languages other than C# based on collaboration with the community.\r\n\r\n## Risks / unknowns\r\n\r\n1. Transformative features (e.g. \u0060HubMethodName\u0060) can break strongly-typed clients depending on the particular implementation.\r\n    1. Should we allow interface definitions to be annotated with attributes so the consumers can account for a subset of these issues?\r\n2. Different implementations have different performance.\r\n    1. Is there a level of performance that we would want to guarantee across all target platforms?\r\n3. Some designs may not be possible to implement for some platforms.\r\n    1. Which platforms should we target?\r\n    2. Would we be OK with different implementations for different platforms?\r\n4. Versioning may be hard.\r\n\r\n## Examples\r\n\r\n### Client to Server Calls\r\n\r\nLet\u0027s say there is an interface \u0060IMyHub\u0060 as defined below which is implemented by an ASP.NET Core application as \u0060MyHub : SignalR.Hub, IMyHub\u0060.\r\n\r\n\u0060\u0060\u0060csharp\r\n    public interface IMyHub\r\n    {\r\n        Task Do();\r\n\r\n        Task\u003Cint\u003E Get();\r\n\r\n        Task Set(int a);\r\n        \r\n        Task\u003Cint\u003E GetAndSet(int a);\r\n\r\n        Task\u003CChannelReader\u003Cint\u003E\u003E StreamToClientViaChannel();\r\n\r\n        Task\u003CChannelReader\u003Cint\u003E\u003E StreamToClientViaChannelWithToken(CancellationToken cancellationToken);\r\n\r\n        Task StreamFromClientViaChannel(ChannelReader\u003Cint\u003E reader);\r\n\r\n        IAsyncEnumerable\u003Cint\u003E StreamToClientViaEnumerableWithToken([EnumeratorCancellation] CancellationToken cancellationToken);\r\n\r\n        Task StreamFromClientViaEnumerable(IAsyncEnumerable\u003Cint\u003E reader);\r\n    }\r\n\u0060\u0060\u0060\r\n\r\nA developer currently needs to consume it as below.\r\n\u0060\u0060\u0060csharp\r\nawait hubConnection.InvokeAsync(\u0022Do\u0022);\r\nvar ret = (int) await hubConnection.SendAsync(\u0022GetAndSet\u0022, 100);\r\n\u0060\u0060\u0060\r\n\r\nInstead, developer could be making strongly-typed calls.\r\n\u0060\u0060\u0060csharp\r\nawait myHub.Do();\r\nvar ret = await myHub.GetAndSet(100);\r\n\u0060\u0060\u0060\r\n\r\nWe can either have such a proxy be acquired from a hub connection or a builder.\r\n\u0060\u0060\u0060csharp\r\nvar myHub = myHubConnection.AsHubProxy\u003CIMyHub\u003E();\r\n// vs\r\nvar myHub = new HubProxyBuilder\u003CIMyHub\u003E()\r\n    .WithConnection(myHubConnection)\r\n    .ConfigureAnythingElse()\r\n    .Build();\r\n\u0060\u0060\u0060\r\n\r\nAcquisiton from a hub connection is simpler while builder provides more room for extension in future.\r\n\r\n### Server to Client Call Handlers\r\n\r\nOne can similarly define an interface \u0060IMyClient\u0060 as below which can then be used in \u0060Hub\u003CIMyClient\u003E\u0060 on server-end and implemented by any consumer to provide callbacks.\r\n\u0060\u0060\u0060csharp\r\n    public interface IMyClient\r\n    {\r\n        void Callback1();\r\n        void Callback2(string arg);\r\n    }\r\n\u0060\u0060\u0060\r\n\r\nA developer currently needs to provide such callbacks as below.\r\n\u0060\u0060\u0060csharp\r\nawait hubConnection.On(\u0022Callback1\u0022, (req) =\u003E { someActivity1(); });\r\nawait hubConnection.On\u003Cstring\u003E(\u0022Callback2\u0022, (arg) =\u003E { someActivity2(arg); });\r\n\u0060\u0060\u0060\r\n\r\nInstead, developer could be registering callback in a strongly-typed manner.\r\n\u0060\u0060\u0060csharp\r\npublic class MyClient : IMyClient { .. }\r\nvar myClient = new MyClient();\r\nawait hubConnection.RegisterCallbacks\u003CIMyClient\u003E(myClient);\r\n\u0060\u0060\u0060\r\n\r\nMultiple callback providers can be registered against the same hub connection so different callbacks can be provided by different classes. However this does mean overlap is possible. We\u0027d want to decide how to handle this and whether to impose restrictions.\r\n\r\n## Detailed design\r\n\r\nTo be decided.\r\n\r\nSome alternatives for client-to-server call implementation are:\r\n**Source-generated proxies** utilizes C# 9 / .NET 5 source generator feature.\r\n\r\nPros:\r\n- Supported on JIT and AOT platforms\r\n\r\nCons:\r\n- Consumer must be a C# 9 / .NET 5 project (though indirect consumption may be possible)\r\n\r\n**Dynamic proxies** utilizes \u0060Reflection.Emit\u0060 to dynamically generate proxy.\r\n\r\nPros:\r\n- Consumer can be a .NET Standard 2.0 project\r\n\r\nCons:\r\n- Not supported on AOT platforms\r\n- [Third-party dependency](http://www.castleproject.org/projects/dynamicproxy/) is needed if we don\u0027t want to reimplement a lot of proxy generation code or introduce significant constraints.\r\n\r\n**Expressive proxies** utilizes expressions to emulate a strongly-typed user experience.\r\n\r\nPros:\r\n- Mostly universal platform support\r\n\r\nCons:\r\n- Slowest\r\n- More verbose usage (e.g. \u0060await hubConnection.AsExpressive\u003CIMyHub\u003E().InvokeAsync(hub =\u003E hub.Do())\u0060)\r\n\r\nServer-to-client calls can be registered with just reflection (no \u0060Reflection.Emit\u0060) which is simple enough and would work on practically any platform. Other alternatives are possible such as source generation as well.",
    "upvotes": 23,
    "labels": [
      "area-signalr",
      "design-proposal"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDgzNzI3OTgyMw==",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-05-10T20:23:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-837279823"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg0MDg0MDEwOA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E await hubConnection.RegisterCallbacks\u003CIMyClient\u003E(myClient);\r\nMultiple callback providers can be registered against the same hub connection so different callbacks can be provided by different classes. However this does mean overlap is possible. We\u0027d want to decide how to handle this and whether to impose restrictions.\r\n\r\nMy main issue with this approach is that you are forced to define all methods on the client side. We\u0027ve seen many cases where some clients don\u0027t register for all methods. And you can\u0027t just have them throw \u0060NotImplementedException\u0060 because that isn\u0027t a good design and the SignalR library will just swallow that (we probably log as well).\r\n\r\n\u003Eclient-to-server call implementation are:\r\n\r\nSource-generated proxies is my favorite. It should work everywhere (in some environments you might need to generate the code before using it but that shouldn\u0027t be too hard).\r\n\r\n\u003E Transformative features (e.g. \u0060HubMethodName\u0060) can break strongly-typed clients depending on the particular implementation.\r\n\u003E \r\n\u003E     1. Should we allow interface definitions to be annotated with attributes so the consumers can account for a subset of these issues?\r\n\r\nI\u0027d say this is a P2 concern. We don\u0027t support this today, but if we add support for it, then we\u0027ll update the proxy to handle it as well.\r\n\r\n\u003E Different implementations have different performance.\r\n\u003E \r\n\u003E     1. Is there a level of performance that we would want to guarantee across all target platforms?\r\n\r\nAs fast as possible \uD83D\uDE04 Ideally there shouldn\u0027t be very much observable perf difference with this. Most of the code will be a pass-through wrapper right?\r\n\r\n\u003E Some designs may not be possible to implement for some platforms.\r\n\u003E \r\n\u003E     1. Which platforms should we target?\r\n\u003E \r\n\u003E     2. Would we be OK with different implementations for different platforms?\r\n\r\nI don\u0027t think a different implementation for different platforms is good. We already feel the burden for that sort of thing by having different clients for different languages. And it looks like we\u0027ll already be needing a different proxy generation for .NET vs. Typescript.\r\n\r\nWe should be targeting everything .NET Core runs on. i.e Xamarin, WPF, Console, WASM, etc.\r\n\r\n\u003E     4\\. Versioning may be hard.\r\n\r\nWhat versioning are you envisioning? So far we haven\u0027t made any breaking changes to the protocol or main APIs and aren\u0027t planning on doing that. New APIs will not be used by old proxy generators which should be fine. Although if possible we can try to make new proxy generation work on older clients.\r\n\r\n\u003E \u0060\u0060\u0060cs\r\n\u003E var myHub = myHubConnection.AsHubProxy\u003CIMyHub\u003E();\r\n\u003E // vs\r\n\u003E var myHub = new HubProxyBuilder\u003CIMyHub\u003E()\r\n\u003E     .WithConnection(myHubConnection)\r\n\u003E     .ConfigureAnythingElse()\r\n\u003E     .Build();\r\n\u003E \u0060\u0060\u0060\r\n\r\nI currently like the first option as it allows use of both the strongly typed connection, as well as the less-typed connection. Although I guess the type returned from the builder could include a property with the less-typed connection.",
        "createdAt": "2021-05-13T21:16:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-840840108"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg0MTAwMTA4OA==",
        "parentId": null,
        "author": "mehmetakbulut",
        "content": "\u003E My main issue with this approach is that you are forced to define all methods on the client side.\r\n\r\nThat makes sense. I\u0027m OK with restricting registration to a single \u0022callback provider\u0022. However are you saying you don\u0027t like \u0060await hubConnection.RegisterCallbacks\u003CIMyClient\u003E(myClient);\u0060 because \u0060IMyClient\u0060 could be defined by client instead of server?\r\n\r\nI was envisioning that \u0060IMyClient\u0060 would normally be defined by server and used as \u0060Hub\u003CIMyClient\u003E\u0060 as well as provided to clients as part of a library or common project.\r\n\r\n\u003E Source-generated proxies is my favorite.\r\n\r\nAgreed. I plan to focus on a detailed design based on source generation unless there is strong opposition.\r\n\r\n\u003E I\u0027d say this is a P2 concern.\r\n\r\n:thumbsup:\r\n\r\n\u003E Most of the code will be a pass-through wrapper right?\r\n\r\nWith source generation, it is just one extra vcall. So yes :)\r\n\r\n\u003E And it looks like we\u0027ll already be needing a different proxy generation for .NET vs. Typescript.\r\n\r\nYes. Are you envisioning .NET source-generators would generate Typescript source or some other more Typescript-native feature would be utilized? I don\u0027t use Typescript so I\u0027d definitely want more feedback on how we could approach that.\r\n\r\n\u003E What versioning are you envisioning?\r\n\r\nVersioning of the interfaces defined by users. When I make changes to \u0060IMyHub\u0060, if the interface is used by third parties, I\u0027m really only limited to backwards compatible changes. I suspect there isn\u0027t much that can be done here. It could always be a second/third pass addition..\r\n\r\n\u003E I currently like the first option as it allows use of both the strongly typed connection, as well as the less-typed connection.\r\n\r\nSame. I think for a first pass also it reduces complexity.",
        "createdAt": "2021-05-14T04:39:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-841001088"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg0MTM2NjE2MQ==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E However are you saying you don\u0027t like \u0060await hubConnection.RegisterCallbacks\u003CIMyClient\u003E(myClient);\u0060 because \u0060IMyClient\u0060 could be defined by client instead of server?\r\n\r\nNo, I\u0027m saying that \u0060myClient\u0060 is a class that must define all methods. It is a nice way of doing things though, you just implement a class that inherits \u0060IMyClient\u0060, so we might want to consider keeping it and also providing a way to register individual methods?\r\n\r\n\u003EAre you envisioning .NET source-generators would generate Typescript source or some other more Typescript-native feature would be utilized? I don\u0027t use Typescript so I\u0027d definitely want more feedback on how we could approach that.\r\n\r\nI\u0027m not sure yet. I believe there are .NET libraries that can produce JS or TS, so we might want to try and structure the source-generator in a way that we can possibly plug in other language generators in the future.\r\n\r\n\u003E Versioning of the interfaces defined by users. When I make changes to \u0060IMyHub\u0060, if the interface is used by third parties, I\u0027m really only limited to backwards compatible changes. I suspect there isn\u0027t much that can be done here. It could always be a second/third pass addition..\r\n\r\nYeah, not sure what we can do there :)",
        "createdAt": "2021-05-14T16:46:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-841366161"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg0MTUzNjY3Mw==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Would you like to propose what the API will look like and we can start iterating on it?",
        "createdAt": "2021-05-14T22:42:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-841536673"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg0MTY5NjUyNw==",
        "parentId": null,
        "author": "nenoNaninu",
        "content": "# Another proposal\r\n\r\nI have published a library called [\u0022TypedSignalR.Client\u0022](https://github.com/nenoNaninu/TypedSignalR.Client) which is Source Generator to create a strongly typed SignalR Client.  So this proposal has an implementation(slightly different from here). \r\n\r\nI think my proposal can address some of the current requirements.\r\n- No breaking changes.\r\n- We don\u0027t have to define all methods. \r\n\r\n# Summary\r\nThe work flow for developers is as follows.\r\n\r\n1. Annotate Attribute to generate code.\r\n2. Inherit the generated class and override only the necessary methods to implement. \r\n3. Call Hub through the implemented class. \r\n\r\n# Detail and Example\r\n\r\nFirst, suppose we have the following interface or class definition. This interface and class definition are assumed to be shared in the server and client projects by project reference etc. \r\n\r\n\u0060\u0060\u0060cs\r\npublic class UserDefine\r\n{\r\n    public Guid RandomId { get; set; }\r\n    public DateTime Datetime { get; set; }\r\n}\r\n\r\n// The return type of the client-side method must be Task. \r\n// This is because Hub\u003CT\u003E will cause a runtime error if a non-Task type is returned.\r\npublic interface IClientContract\r\n{\r\n    // Of course, user defined type is OK. \r\n    Task SomeClientMethod1(string user, string message, UserDefine userDefine);\r\n    Task SomeClientMethod2();\r\n}\r\n\r\n// The return type of the method on the hub-side must be Task or Task \u003CT\u003E. \r\npublic interface IHubContract\r\n{\r\n    Task\u003Cstring\u003E SomeHubMethod1(string user, string message);\r\n    Task SomeHubMethod2();\r\n}\r\n\u0060\u0060\u0060\r\n\r\nAnd suppose that it is implemented on the server as follows. \r\n\r\n\u0060\u0060\u0060cs\r\nusing Microsoft.AspNetCore.SignalR;\r\n\r\npublic class SomeHub : Hub\u003CIClientContract\u003E, IHubContract\r\n{\r\n    public async Task\u003Cstring\u003E SomeHubMethod1(string user, string message)\r\n    {\r\n        await this.Clients.All.SomeClientMethod1(user, message, new UserDefineClass());\r\n        return \u0022OK!\u0022;\r\n    }\r\n\r\n    public async Task SomeHubMethod2()\r\n    {\r\n        await this.Clients.Caller.SomeClientMethod2();\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nUnder these assumptions, on the client side, annotate the \u0060HubClientBaseAttribute\u0060 to the partial class as follows.\r\n\r\n\u0060\u0060\u0060cs\r\nusing TypedSignalR.Client;\r\n\r\n[HubClientBase(typeof(IHubContract), typeof(IClientContract))]\r\npartial class ClientBase\r\n{\r\n}\r\n\u0060\u0060\u0060\r\n\r\nBy annotating the HubClientBaseAttribute, the following code will be generated (simplified here).\r\n\r\n\u0060\u0060\u0060cs\r\npartial abstract class ClientBase : IHubClient\u003CIHubContract\u003E, IClientContract, IAsyncDisposable\r\n{\r\n    private class HubInvoker : IHubContract\r\n    {\r\n        private readonly HubConnection _connection;\r\n\r\n        public HubInvoker(HubConnection connection)\r\n        {\r\n            _connection = connection;\r\n        }\r\n\r\n        public Task\u003Cstring\u003E SomeHubMethod1(string user,string message)\r\n        {\r\n            return _connection.InvokeAsync\u003Cstring\u003E(nameof(SomeHubMethod1), user, message);\r\n        }\r\n\r\n        public Task SomeHubMethod2()\r\n        {\r\n            return _connection.InvokeAsync(nameof(SomeHubMethod2));\r\n        }\r\n    } // class HubInvoker\r\n\r\n    public HubConnection Connection { get; }\r\n    public IHubContract Hub { get; }\r\n    protected List\u003CIDisposable\u003E disposableList = new();\r\n\r\n    public ClientBase(HubConnection connection)\r\n    {\r\n        Connection = connection;\r\n        Hub = new HubInvoker(connection);\r\n\r\n        Connection.Closed \u002B= OnClosed;\r\n        Connection.Reconnected \u002B= OnReconnected;\r\n        Connection.Reconnecting \u002B= OnReconnecting;\r\n\r\n        var d1 = Connection.On\u003Cstring, string, UserDefineClass\u003E(nameof(SomeClientMethod1), SomeClientMethod1);\r\n        var d2 = Connection.On(nameof(SomeClientMethod2), SomeClientMethod2);\r\n\r\n        disposableList.Add(d1);\r\n        disposableList.Add(d2);\r\n    }\r\n\r\n    public virtual Task SomeClientMethod1(string user,string message, UserDefineClass userDefine) =\u003E Task.CompletedTask;\r\n\r\n    public virtual Task SomeClientMethod2() =\u003E Task.CompletedTask;\r\n\r\n    public async ValueTask DisposeAsync()\r\n    {\r\n        Connection.Closed -= OnClosed;\r\n        Connection.Reconnected -= OnReconnected;\r\n        Connection.Reconnecting -= OnReconnecting;\r\n\r\n        await Connection.DisposeAsync();\r\n\r\n        foreach(var d in disposableList)\r\n        {\r\n            d.Dispose();\r\n        }\r\n    }\r\n\r\n    public virtual Task OnClosed(Exception e) =\u003E Task.CompletedTask;\r\n    public virtual Task OnReconnected(string connectionId) =\u003E Task.CompletedTask;\r\n    public virtual Task OnReconnecting(Exception e) =\u003E Task.CompletedTask;\r\n} // class ClientBase\r\n\r\n\u0060\u0060\u0060\r\nThe generated code is inherited and used. The usability is very similar to the case of inheriting \u0060Hub\u003CT\u003E\u0060.\r\n\r\n- Hub to Client : \u0060this.Clients.All.SomeClientMethod()\u0060\r\n- Client to Hub : \u0060this.Hub.SomeHubMethod()\u0060\r\n\r\nAlso, the definition of the function is not a callback, but writing feeling similar to Hub-side. \r\n\r\n\u0060\u0060\u0060cs\r\nclass HubClient : ClientBase\r\n{\r\n    public HubClient(HubConnection connection, string arg) : base(connection)\r\n    {\r\n    }\r\n\r\n    // override and impl\r\n    public override async Task SomeClientMethod1(string user, string message, UserDefineClass userDefine)\r\n    {\r\n        await this.Hub.SomeHubMethod1(string user, string message);\r\n        Console.WriteLine(\u0022Call SomeClientMethod1!\u0022);\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n    // We don\u0027t have to implement all the methods !\r\n    // public override Task SomeClientMethod2()\r\n\r\n    // I think it is very comfortable to write SignalR event as follows.\r\n    public override Task OnClosed(Exception e)\r\n    {\r\n        Console.WriteLine($\u0022[On Closed!]\u0022);\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n    // Of course, we don\u0027t have to define all events.\r\n    // public override Task OnReconnecting(Exception e)\r\n}\r\n\r\n\u0060\u0060\u0060\r\nSince the base class comes with an implementation, developers can selectively override it, not all functions need to be implemented. \r\n\r\nIt\u0027s also easy to use. \r\n\r\n\u0060\u0060\u0060cs\r\nHubConnection connection = ...;\r\n\r\nvar client = new HubClient(connection, \u0022some parameter\u0022);\r\n\r\nawait client.Connection.StartAsync();\r\n\r\n// Invoke hub methods\r\nvar response = await client.Hub.SomeHubMethod1(\u0022user\u0022, \u0022message\u0022);\r\nConsole.WriteLine(response);\r\n\r\nawait client.Connection.StopAsync();\r\nawait client.DisposeAsync();\r\n\u0060\u0060\u0060\r\n\r\nPersonally, I don\u0027t hete writing \u0060new HubClient(connection, \u0022some parameter\u0022)\u0060.  If you are not comfortable with this, how about the following API?\r\n\r\n\u0060\u0060\u0060cs\r\npublic static T Build\u003CT\u003E(this IHubConnectionBuilder source, Func\u003CHubConnection,T\u003E factoryMethod)\r\n{\r\n    HubConnection connection = source.Build();\r\n    return factory.Invoke(connection);\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{\r\n    var client = new HubConnectionBuilder()\r\n        .WithUrl(\u0022https://~~~\u0022)\r\n        .Build(connection =\u003E new HubClient(connection, \u0022some parameter\u0022));\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2021-05-15T17:22:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-841696527"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg0MjY4NTU2Ng==",
        "parentId": null,
        "author": "mehmetakbulut",
        "content": "I\u0027d suggest the following basic API surface.\r\n\r\n\u0060\u0060\u0060csharp\r\n// Get strongly typed hub proxy\r\npublic T GetProxy\u003CT\u003E(this HubConnection conn);\r\n\r\n// Register callback method and get a disposable which can unregister callback\r\npublic IDisposable RegisterCallback\u003CT1, T2, ..\u003E(this HubConnection conn, string name, Action\u003CT1, T2, ..\u003E callback);\r\n\r\n// Register callback provider (i.e. a class providing the callback methods defined in TInterface) and get a disposable which can unregister callbacks\r\npublic IDisposable RegisterCallbackProvider\u003CTInterface, TImplementation\u003E(this HubConnection conn, TImplementation callbackProvider) where TImplementation : TInterface;\r\n\u0060\u0060\u0060\r\n\r\nThis keeps it simple to grab a proxy as well as register single and/or multiple callbacks. I\u0027m not very certain of the single callback registration because it is not a use case I had before. I\u0027m a bit worried that it may be not much better than what SignalR already offers.",
        "createdAt": "2021-05-17T22:32:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-842685566"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg0MjY5MTMzNQ==",
        "parentId": null,
        "author": "mehmetakbulut",
        "content": "@nenoNaninu It appears what you are proposing is one layer higher than what I\u0027ve proposed here. Your proposal essentially wraps proxy acquisition and callback registration behind a single base client class which seem to serve almost as a replacement for \u0060HubConnection\u0060 (e.g. you also provide automatic subscriptions for connection/disconnection etc..).\r\n\r\nMy intent is a bit different. I\u0027d like to see the essential strong typing features implemented without imposing conditions on implementations within end-user codebase (i.e. not require inheritance of an abstract class) and then such abstractions as yours could be added on top very easily. ",
        "createdAt": "2021-05-17T22:47:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-842691335"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg0MzMyMzk3Ng==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003Epublic IDisposable RegisterCallback\u003CT1, T2, ..\u003E(this HubConnection conn, string name, Action\u003CT1, T2, ..\u003E callback);\r\n\r\nNow that I think about it, this is just \u0060hubConnection.On\u003CT\u003E(string name, ...)\u0060. For some reason I was thinking there would be a difference. We probably don\u0027t want that. It would be interesting if there was a more strongly-typed API like, \u0060hubProxy.MethodName.Register((param) =\u003E Console.WriteLine(param));\u0060 food for thought. But I do think we should not have \u0060RegisterCallback\u0060 in it\u0027s current state since it adds nothing over \u0060.On\u0060.\r\n\r\n\u003Epublic IDisposable RegisterCallbackProvider\u003CTInterface, TImplementation\u003E(this HubConnection conn, TImplementation callbackProvider) where TImplementation : TInterface;\r\n\r\nShould this be taking the \u0060HubConnection\u0060 or the proxy type? And if it\u0027s on the proxy type, it wouldn\u0027t need to be an extension method, and the \u0060TInterface\u0060 could be pre-defined based on the \u0060GetProxy\u0060 call earlier.\r\n\r\n\u003Epublic T GetProxy\u003CT\u003E(this HubConnection conn);\r\n\r\nThis should return the proxy type right? We also want to see what the proxy type looks like.",
        "createdAt": "2021-05-18T16:24:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-843323976"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg0MzYxMTUyOA==",
        "parentId": null,
        "author": "mehmetakbulut",
        "content": "Here is a more concrete proxy example. Given following interface in a shared/common project/library:\r\n\u0060\u0060\u0060csharp\r\npublic interface IMyHub\r\n{\r\n    Task DoSomething();\r\n    Task\u003Cint\u003E DoSomethingElse(float arg);\r\n    IAsyncEnumerable\u003Cint\u003E StreamBidirectional(IAsyncEnumerable\u003Cfloat\u003E clientToServer, [EnumeratorCancellation] CancellationToken token);\r\n}\r\n\u0060\u0060\u0060\r\n\r\nGenerated proxy would be: (types would be written in fully qualified form but just simplifying for showing..)\r\n\u0060\u0060\u0060csharp\r\npublic sealed class GeneratedIMyHub : IMyHub\r\n{\r\n    private readonly HubConnection conn;\r\n    public GeneratedIMyHub(HubConnection connection)\r\n    {\r\n        this.conn = connection;\r\n    }\r\n    \r\n    public Task DoSomething()\r\n    {\r\n        return this.conn.InvokeAsync(\u0022DoSomething\u0022);\r\n    }\r\n    \r\n    public Task\u003Cint\u003E DoSomethingElse(float arg)\r\n    {\r\n        return this.conn.InvokeAsync\u003Cint\u003E(\u0022DoSomethingElse\u0022, arg);\r\n    }\r\n    \r\n    public IAsyncEnumerable\u003Cint\u003E StreamBidirectional(IAsyncEnumerable\u003Cfloat\u003E clientToServer, CancellationToken token)\r\n    {\r\n        return this.conn.StreamAsync\u003Cint\u003E(\u0022StreamBidrectional\u0022, clientToServer, token);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nMethods with \u0060void\u0060 rtype are the only caveat. These would be called via \u0060SendAsync\u0060 but that returns a task so we have to ignore or discard the returned task.\r\n\r\n\u0060GeneratedIMyHub\u0060 is an implementation detail that is not shown to the user on any API (though they can browse to source if they want). When the user calls \u0060hubConnection.GetProxy\u003CIMyHub\u003E()\u0060, they just get an object that satisfies \u0060IMyHub\u0060 which happens to really be of type \u0060GeneratedIMyHub\u0060.\r\n\r\n\r\n\u003E Should this be taking the HubConnection or the proxy type?\r\n\r\n\u0060RegisterCallbackProvider\u0060 should indeed take the \u0060HubConnection\u0060 object and not the proxy type or the proxy object. This is because the callbacks aren\u0027t related to the strongly-typed representation of the hub. \u0060TInterface\u0060 here would nominally be a \u0060IMyClient\u0060 published/shared by server in a common project/library. In my opinion, we shouldn\u0027t tie this to \u0060IMyHub\u0060 which is implemented by proxy as well as the actual hub.\r\n\r\nIn the case of \u0060RegisterCallbackProvider\u0060, you can imagine two variants:\r\n\u0060\u0060\u0060csharp\r\npublic IDisposable RegisterCallbackProvider\u003CTInterface, TImplementation\u003E(this HubConnection conn, TImplementation callbackProvider) where TImplementation : TInterface;\r\n\r\npublic IDisposable RegisterCallbackProvider\u003CTClient\u003E(this HubConnection conn, TClient callbackProvider);\r\n\u0060\u0060\u0060\r\n\r\nUnderlying code would look like:\r\n\u0060\u0060\u0060csharp\r\npublic IDisposable RegisterCallbackProvider\u003CTInterface, TImplementation\u003E(this HubConnection conn, TImplementation callbackProvider) where TImplementation : TInterface\r\n{\r\n    var intfType = typeof(TInterface);\r\n    var regs = new List\u003CIDisposable\u003E();\r\n    var methods = intfType.GetMethods(BindingFlags.Instance | BindingFlags.Public);\r\n    foreach (var method in methods)\r\n    {\r\n        var reg = conn.On(method.Name, method.GetParameters().Select(a =\u003E a.ParameterType).ToArray(),\r\n                objects =\u003E\r\n                    {\r\n                        method.Invoke(spoke, objects);\r\n                        return Task.CompletedTask;\r\n                    });\r\n                regs.Add(reg);\r\n    }\r\n    return MakeDisposableOf(regs);\r\n}\r\n\r\npublic IDisposable RegisterCallbackProvider\u003CTClient\u003E(this HubConnection conn, TClient callbackProvider)\r\n{\r\n    return RegisterCallbackProvider\u003CTClient, TClient\u003E(conn, callbackProvider);\r\n}\r\n\u0060\u0060\u0060\r\n\r\nAs a more concrete example, we can have the following interface in our shared/common project:\r\n\u0060\u0060\u0060csharp\r\npublic interface IMyClient\r\n{\r\n    void SomeCallback(float arg);\r\n}\r\n\u0060\u0060\u0060\r\n\r\nIn client project, user can utilize a callback provider like:\r\n\u0060\u0060\u0060csharp\r\npublic class MyClient : IMyClient\r\n{\r\n    public void SomeCallback(float arg) { .. }\r\n}\r\n\r\nvar registration = hubConnection.RegisterCallbackProvider\u003CIMyClient, MyClient\u003E(new MyClient());\r\n// or hubConnection.RegisterCallbackProvider(new MyClient());\r\nregistration.Dispose();\r\n\u0060\u0060\u0060\r\n\r\nThere aren\u0027t many restrictions on what could be a callback provider. For example, if the user doesn\u0027t have a \u0060IMyClient\u0060, they can still register a provider by using the 2nd overload. That would just use all public instance methods as the \u0022interface\u0022 so the user would need to ensure they don\u0027t have public methods that aren\u0027t meant to be callable. Though we can restrict registration to always supply an interface (and remove the 2nd overload) if we don\u0027t like this option.",
        "createdAt": "2021-05-18T22:33:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-843611528"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg0OTgwNTM1Mg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Couple notes:\r\n* We would prefer only needing to run the source generator from the client-side, don\u0027t need to look at server project.\r\nThis would require an attribute for each interface, \u0060Hub\u003CT1\u003E\u0060 and \u0060MyHub : T2\u0060\r\n\r\n* Throw for void methods/source gen time error\r\n  * we call async code underneath, lets not hide that and force users interfaces to be accurate\r\n\r\n* Make sure to follow the interface chain (note from previous code we\u0027ve written where we didn\u0027t take inheritance into consideration)\r\n\r\n* The RegisterCallbackProvider method above was using reflection, it should be simplified with the source generator\r\n\r\n\u0060\u0060\u0060C#\r\nIDisposable RegisterCallbackProvider\u003CTInterface\u003E(TInterface impl)\r\n{\r\n    var disposableCollection;\r\n    // for loop is just for pseudo code purposes, this would be source generated to have individual calls for each .On callback\r\n    foreach (method)\r\n    {\r\n        disposableCollection.Add(conn.On(\u0022blah\u0022, (param1) =\u003E impl.blah(param1)));\r\n    }\r\n\r\n    return disposableCollection;\r\n}\r\n\u0060\u0060\u0060\r\n\r\n* Consider having a runtime fallback for F# as it doesn\u0027t support source generators currently",
        "createdAt": "2021-05-27T17:20:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-849805352"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1MjIyNDk4Mg==",
        "parentId": null,
        "author": "bradygaster",
        "content": "@mehmetakbulut - would you mind reaching out with your email or a good way to schedule you for a teams meeting? The team likes your approach and discussed some ideas we have around it. We\u0027d like to iterate on our design ideas and the discussion we had, so if you could provide a way for us to get in touch we\u0027d like to schedule a meeting with you. You could also DM me on twitter at @bradygaster if that is easier (ping me so I can follow so we can DM if that works). ",
        "createdAt": "2021-06-01T15:36:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-852224982"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NDEyMzYyOQ==",
        "parentId": null,
        "author": "mehmetakbulut",
        "content": "@bradygaster I just sent you an email from my personal.",
        "createdAt": "2021-06-03T19:32:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-854123629"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2MTg5ODgyNA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u0060\u0060\u0060\r\nHubConnection connection;\r\nconnection.GetProxy\u003CT\u003E(); // find \u0022GetProxy\u0022, stash syntax node for second pass\r\n// example:\r\n// https://github.com/davidfowl/uController/blob/aa8bcb4b30764e42bd72d326cb2718a4d4eaf4a9/src/uController.SourceGenerator/uControllerGenerator.cs#L163-L179\r\n// https://github.com/davidfowl/uController/blob/aa8bcb4b30764e42bd72d326cb2718a4d4eaf4a9/src/uController.SourceGenerator/uControllerGenerator.cs#L37-L43\r\n\u0060\u0060\u0060\r\n\r\nTry a similar method for \u0060RegisterCallbackProvider\u0060 as well.\r\n\r\nFor testing:\r\nWe can consider adding \u0060IHubConnection\u0060 to make unit testing possible/easier. Today you need to either do E2E testing or something super hacky to verify that the correct \u0060HubConnection\u0060 methods are called.",
        "createdAt": "2021-06-15T23:28:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-861898824"
      },
      {
        "id": "IC_kwDOAQzde844xLgs",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Initial source generator work has been merged! Thanks a ton @mehmetakbulut!\r\n\r\nTo use the source generator:\r\n1. add a reference to Microsoft.AspNetCore.SignalR.Client.SourceGenerator from feed https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet7%40Local/nuget/v3/index.json\r\n2. add a HubServerProxyAttribute class to your project:\r\n\u0060\u0060\u0060csharp\r\n[AttributeUsage(AttributeTargets.Method)]\r\ninternal class HubServerProxyAttribute : Attribute\r\n{\r\n}\r\n\u0060\u0060\u0060\r\n3. add a HubClientProxyAttribute class to your project:\r\n\u0060\u0060\u0060csharp\r\n[AttributeUsage(AttributeTargets.Method)]\r\ninternal class HubClientProxyAttribute : Attribute\r\n{\r\n}\r\n\u0060\u0060\u0060\r\n4. add a static partial class to your project and write a static partial method with the \u0060[HubClientProxy]\u0060 attribute\r\n\u0060\u0060\u0060csharp\r\ninternal static partial class MyCustomExtensions\r\n{\r\n    [HubClientProxy]\r\n    public static partial IDisposable AnyNameYouWant\u003CT\u003E(this HubConnection connection, T provider);\r\n}\r\n\u0060\u0060\u0060\r\n5. add a static partial class to your project (could be the same as step 4) and write a static partial method with the \u0060[HubServerProxy]\u0060 attribute\r\n\u0060\u0060\u0060csharp\r\ninternal static partial class MyCustomExtensions\r\n{\r\n    [HubServerProxy]\r\n    public static partial T AnotherName\u003CT\u003E(this HubConnection connection);\r\n}\r\n\u0060\u0060\u0060\r\n6. use the partial methods from your code!\r\n\u0060\u0060\u0060csharp\r\npublic interface IServerHub\r\n{\r\n    Task SendMessage(string message);\r\n    Task\u003Cint\u003E Echo(int i);\r\n}\r\npublic interface IClient\r\n{\r\n    Task ReceiveMessage(string message);\r\n}\r\npublic class Client : IClient\r\n{\r\n    // Equivalent to HubConnection.On(\u0022ReceiveMessage\u0022, (message) =\u003E {});\r\n    Task ReceiveMessage(string message)\r\n    {\r\n        return Task.CompletedTask;\r\n    }\r\n}\r\n\r\nHubConnection connection = new HubConnectionBuilder().WithUrl(\u0022...\u0022).Build();\r\nvar stronglyTypedConnection = connection.AnotherName\u003CIServerHub\u003E();\r\nvar registrations = connection.AnyNameYouWant\u003CIClient\u003E(new Client());\r\n\r\nawait stronglyTypedConnection.SendMessage(\u0022Hello world\u0022);\r\nvar echo = await stronglyTypedConnection.Echo(10);\r\n\u0060\u0060\u0060\r\n\r\n\r\nFollow up source generator work:\r\n- [ ] Add \u0060HubClientProxyAttribute\u0060 and \u0060HubServerProxyAttribute\u0060 to the product\r\n  - Put it in the client dll or add a dll to the source generator with these classes\r\n- [ ] remove \u0060\u003CT\u003E\u0060 requirement from methods\r\n- [ ] allow non-extension method syntax \u0060private static partial IServerHub GetProxy(HubConnection connection);\u0060\r\n- [ ] support multiple attributed methods (currently limited to 1 HubClientProxy and 1 HubServerProxy)\r\n  - [ ] Test with a parameter name other than \u0060provider\u0060. https://github.com/dotnet/aspnetcore/pull/38025/files#r741500461\r\n- [ ] Test diagnostic messages, like https://github.com/dotnet/aspnetcore/blob/cf5d3ce8c9f226cc436aedb1cfa910146b36b90d/src/Analyzers/Analyzers/test/StartupAnalyzerTestBase.cs#L66\r\n- [ ] See how the experience feels and improve/add more diagnostics\r\n- [ ] code-fix for writing the methods? Triggers on writing the attribute maybe? \u0060[HubServerProxy]\u0060",
        "createdAt": "2021-10-26T23:47:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-952416300"
      },
      {
        "id": "IC_kwDOAQzde849lE6q",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-02-08T22:32:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-1033129642"
      },
      {
        "id": "IC_kwDOAQzde85jWVWO",
        "parentId": null,
        "author": "haslingerm",
        "content": "There are several similar issues regarding this topic, so I hope this is the proper place to ask: [Microsoft.AspNetCore.SignalR.Client.SourceGenerator](https://www.nuget.org/packages/Microsoft.AspNetCore.SignalR.Client.SourceGenerator#versions-body-tab) was previewed during the .NET 7 dev phase, but, according to the package version up on NuGet, never left the preview phase.\r\nNow we are nearing the end of the .NET 8 dev phase and I\u0027d like to know what the plan for this package is - @BrennanConroy are you still working on this?\r\n\r\nIf there aren\u0027t any issues, it could be made a full release, thus projects which do not allow using preview packages could pick it up. \r\nCompleting the tasks listed above and adding it to the signalr library as originally planned (if I read that correctly) could still happen for .NET 9, while allowing the already working pieces to be used earlier.",
        "createdAt": "2023-08-06T10:01:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-1666798990"
      },
      {
        "id": "IC_kwDOAQzde85jbnjX",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E If there aren\u0027t any issues, it could be made a full release\r\n\r\nWe aren\u0027t sure about the current API shape so won\u0027t be making a full release until then.\r\n\r\nWe had some thoughts on how the API could be changed, basically adding some new methods to \u0060HubConnectionBuilder\u0060 and having them fallback to reflection if someone doesn\u0027t use the source-generator. The source-generator would be preferred over the reflection of course, but this would allow usage without a source-generator.\r\n\r\nRough API shape\r\n\u0060\u0060\u0060csharp\r\n// scenario1: strongly typed to server, but manual .On needed for receiving\r\nHubConnection\u003CIServerHub\u003E hubConnection = new HubConnectionBuilder()\r\n    .WithUrl(http://localhost:5000/default)\r\n   .Build\u003CIServerHub\u003E();\r\n\r\n// scenario2: Manual sends to server, strongly-typed from server \r\nHubConnection hubConnection = new HubConnectionBuilder()\r\n    .WithUrl(http://localhost:5000/default)\r\n    .WithClientHub\u003CChatClient\u003E()\r\n    //.WithClientHub(new ChatClient())\r\n    .Build();\r\n\r\n// scenario3: strongly-typed to and from server\r\nHubConnection\u003CIServerHub\u003E hubConnection = new HubConnectionBuilder()\r\n    .WithUrl(http://localhost:5000/default)\r\n    .WithClientHub\u003CChatClient\u003E()\r\n    //.WithClientHub(new ChatClient())\r\n    .Build\u003CIServerHub\u003E();\r\n\r\npublic abstract class ClientHub\u003CT\u003E\r\n{\r\n    public virtual Task OnConnectedAsync() =\u003E Task.CompletedTask;\r\n\r\n    public virtual Task OnReconnectingAsync(RetryContext retry) =\u003E Task.CompletedTask;\r\n    public virtual Task OnReconnectedAsync() =\u003E Task.CompletedTask;\r\n\r\n    public virtual Task OnDisconnectedAsync(Exception? ex) =\u003E Task.CompletedTask;\r\n\r\n    public T Server { get; set; }\r\n\r\n    // Might want HubConnection\u003CT\u003E\r\n    public HubConnection HubConnection { get; set; }\r\n}\r\n\r\n// User code for bi-directional client-side hub\r\npublic class ChatClient : ClientHub\u003CIServerHub\u003E, IMyHubClient\r\n{\r\n    public ChatClient(IService service)\r\n    {\r\n    }\r\n\r\n    public override Task OnConnectedAsync()\r\n    {\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n    public override Task OnDisconnectedAsync(Exception? ex)\r\n    {\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n    public Task ReceiveMessage(string message)\r\n    {\r\n        return Server.Send(\u0022Proxy\u0022, message);\r\n    }\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2023-08-07T16:19:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-1668184279"
      },
      {
        "id": "IC_kwDOAQzde85jb6JG",
        "parentId": null,
        "author": "haslingerm",
        "content": "I know you have many more scenarios on your plate, but from my point of view I\u2019d say: don\u2019t overthink it.\r\n\r\nApplications I\u2019m building today (and I\u2019m talking about current .NET with awesome cross-plat capabilities here) are .NET backend \u0026 .NET frontend. The backend will almost always be ASP.NET Core, and the frontend is either Blazor or Avalonia (or MAUI or even WinForms if someone still wants to do those).\r\nIn any case we can share a contract DLL =\u003E I want strongly typed in both directions, always. Doing stuff manually is only a potential for an error. If some dynamic logic is required it can still be stringly typed and this library is just not used.\r\n\r\nSame thing about the possibility for reflection: this package is not used in legacy code (because it doesn\u2019t really exist yet) and going forward when there is a source generation option I\u2019d pick it \u2013 for better AOT compatibility alone. I can hardly think of a scenario where the amount of code generated for a simple SignalR client would be a concern regarding assembly size. Yet even if that is the case or more flexibility is required, we are still able to stringly type to our heart\u2019s contents.\r\n\r\nI\u2019m sure you have very valid reasons for your current plans, but I wanted to voice my view of preferring less complexity in this case anyway. So, in my opinion supporting only scenario 3 and source generation would be sufficient. But you don\u2019t have to hurry, there are good community solutions out there already =\u003E take your time to find a good canonical solution.\r\n",
        "createdAt": "2023-08-07T16:58:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-1668260422"
      },
      {
        "id": "IC_kwDOAQzde85t0K11",
        "parentId": null,
        "author": "WeihanLi",
        "content": "Any plan to make it in .NET 9? think it would be greatly helpful",
        "createdAt": "2023-12-06T08:16:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-1842392437"
      },
      {
        "id": "IC_kwDOAQzde85098c4",
        "parentId": null,
        "author": "stephenstarkie",
        "content": "I have tried to use this to build strongly typed SignalR services - I have copied the pattern described here and in https://kristoffer-strube.dk/post/typed-signalr-clients-making-type-safe-real-time-communication-in-dotnet/  While the code from the GitHub repo in the post works, my own does not.  I note that another user has also had the same problem on StackOverflow: https://stackoverflow.com/questions/77370046/signalr-source-generator-always-throw-exception (I notice the only answer there has not been marked as working and doesn\u0027t work for me).  I notice that sometimes when I have two solutions open (mine and DistributedStickyNotes), the distributed sticky notes proxy can suddenly turn up in the autogenerated .g.cs in my solution, until I change something or rebuild in my solution.  The only other difference is that I am trying to work with a serverless  hub - but I can\u0027t see how a client side generator would know that.\r\n\r\nDisitributedStickyNotes autogenerates this:\r\n\r\n\u0060\u0060\u0060\r\npublic static partial class HubConnectionExtensions\r\n    {\r\n        public static partial T ServerProxy\u003CT\u003E(this HubConnection connection)\r\n        {\r\n\r\n            if (typeof(T) == typeof(Shared.IStickyNoteHub))\r\n            {\r\n                return (T) (Shared.IStickyNoteHub) new Client.Proxies.HubConnectionExtensions.GeneratedIStickyNoteHub(connection);\r\n            }\r\n            throw new System.ArgumentException(nameof(T));\r\n        }\r\n    }\r\n\u0060\u0060\u0060\r\n\r\nMy code autogenerates this;\r\n\r\n\u0060\u0060\u0060\r\npublic static partial class HubConnectionExtensions\r\n    {\r\n        public static partial T ServerProxy\u003CT\u003E(this HubConnection connection)\r\n        {\r\n\r\n            throw new System.ArgumentException(nameof(T));\r\n        }\r\n    }\r\n\u0060\u0060\u0060",
        "createdAt": "2024-02-24T15:02:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-1962395448"
      },
      {
        "id": "IC_kwDOAQzde8509-_d",
        "parentId": null,
        "author": "stephenstarkie",
        "content": "OK - so I figured out my problem; because I referenced the HubConnectionExtensions from a shared library into two apps: a Blazor app and a Windows Service  the generator didn\u0027t work - as soon as I put the HubConnectionExtensions partial class in each of the two apps the source generators work",
        "createdAt": "2024-02-24T15:45:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-1962405853"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU4OTM1NDc3NzM=",
    "title": "Connect through proxy to signalr HUB - nodejs",
    "url": "https://github.com/dotnet/aspnetcore/issues/32779",
    "createdAt": "2021-05-17T17:29:05Z",
    "lastUpdated": "2023-10-28T14:07:43Z",
    "body": "Trying to connect to SignalR Hub through the nodejs client via a Proxy. The connection doesn\u0027t work with a corporate proxy. What should I put in options(aka IHttpConnectionOptions) in my nodejs client to get it to work ?\r\n\r\nconst signalR = require(\u0027@microsoft/signalr\u0027);\r\nvar url = require(\u0027url\u0027);\r\nvar HttpsProxyAgent = require(\u0027https-proxy-agent\u0027);\r\nvar agent;\r\n\r\n// HTTP/HTTPS proxy to connect to\r\nvar proxy = process.env.http_proxy;\r\nif (proxy) {\r\n  var options = url.parse(proxy);\r\n  agent = new HttpsProxyAgent(options);\r\n}\r\nlet options = {\r\n    accessTokenFactory: pcsUtils.getJwtToken,\r\n    Proxy: agent//????????????\r\n  }\r\nconnection = new signalR.HubConnectionBuilder()\r\n      .withUrl(hubUrl, options)\r\n      .build();\r\nIt works without the proxy.\r\n\r\nTIA,",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "api-suggestion",
      "help candidate"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg0MjU5NTYzMw==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "There is no first party options for using a proxy in NodeJS. You can replace the websocket and httpclient implementations today which would allow you to set the Agent on your implementations.\r\nhttps://github.com/dotnet/aspnetcore/blob/7b0f2b6804cc9cb4a6b0239640c29bfd347accf0/src/SignalR/clients/ts/signalr/src/IHttpConnectionOptions.ts#L52\r\nand\r\nhttps://github.com/dotnet/aspnetcore/blob/7b0f2b6804cc9cb4a6b0239640c29bfd347accf0/src/SignalR/clients/ts/signalr/src/IHttpConnectionOptions.ts#L16\r\n\r\nMoving to backlog for consideration of adding a property for this (node only, not browsers).",
        "createdAt": "2021-05-17T20:05:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32779#issuecomment-842595633"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg0MjU5NTczNg==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-05-17T20:05:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/32779#issuecomment-842595736"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5MTA5OTUxNjU=",
    "title": "Fatal regression: 6.0.0-preview2 and later break linking for SignalR client",
    "url": "https://github.com/dotnet/aspnetcore/issues/33269",
    "createdAt": "2021-06-04T01:43:34Z",
    "lastUpdated": "2022-10-21T06:48:14Z",
    "body": "\u003C!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003E\r\n\r\n### Describe the bug\r\nWhen Microsoft.AspNetCore.SignalR.Client is updated from 6.0.0-preview1 to preview4 (and possibly preview2 and 3) it no longer works in a Xamarin.Forms (iOS) project if the linker is enabled.\r\n\r\n6.6.0-preview1 and earlier versions work fine even when the linker is enabled.\r\n\r\n### To Reproduce\r\n\u003C!--\r\nWe \u2764 code! Point us to a minimalistic repro project hosted in a GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003E\r\n\r\n1. Install Microsoft.AspNetCore.SignalR.Client 6.0.0-preview4 in a Xamarin.Forms/iOS project.\r\nNote: If you upgrade or downgrade the library, make sure to close down VS For Mac and delete all bin and obj folders as the changes don\u0027t seem to be reflected in the build if this is not done.\r\n2. Use the \u0022HubConnectionBuilder\u0022 to connect to the SignalR backend\r\n3. Turn on linking (\u0022Link SDKs only\u0022)\r\n4. Build and run\r\n5. The app crashes when it\u0027s trying to call the HubConnectionBuilder in the SignalR client library, with the error \u0022\u0060System.InvalidOperationException: A suitable constructor for type \u0027Microsoft.Extensions.Options.UnnamedOptionsManager\u00271[Microsoft.AspNetCore.Http.Connections.Client.HttpConnectionOptions]\u0027 could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.\u0060\u0022.\r\n\r\nThe crash only happens if linking is enabled and the version is 6.0.0-preview4 (I verified that preview1 works, am unsure exactly where it got broken). The full stack trace is as follows:\r\n\r\n\u0060\u0060\u0060\r\nSystem.InvalidOperationException: A suitable constructor for type \u0027Microsoft.Extensions.Options.UnnamedOptionsManager\u00271[Microsoft.AspNetCore.Http.Connections.Client.HttpConnectionOptions]\u0027 could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ResultCache lifetime, System.Type serviceType, System.Type implementationType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x00021] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric (Microsoft.Extensions.DependencyInjection.ServiceDescriptor descriptor, System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain, System.Int32 slot, System.Boolean throwOnConstraintViolation) [0x0004a] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric (System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x00025] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite (System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x0003a] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetCallSite (System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x00010] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites (System.Type implementationType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain, System.Reflection.ParameterInfo[] parameters, System.Boolean throwIfCallSiteNotFound) [0x00016] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ResultCache lifetime, System.Type serviceType, System.Type implementationType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x00050] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact (Microsoft.Extensions.DependencyInjection.ServiceDescriptor descriptor, System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain, System.Int32 slot) [0x00073] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact (System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x00018] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite (System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x0002e] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetCallSite (System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x00010] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.CreateServiceAccessor (System.Type serviceType) [0x0000c] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at System.Collections.Concurrent.ConcurrentDictionary\u00272[TKey,TValue].GetOrAdd (TKey key, System.Func\u00272[T,TResult] valueFactory) [0x00034] in \u003Ccf60a21f6a4543e5a30e3c6ae6742e37\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService (System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngineScope) [0x00013] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService (System.Type serviceType) [0x00008] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService (System.Type serviceType) [0x00000] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[T] (System.IServiceProvider provider) [0x0000e] in \u003C44acc522f4fc4e959fecc254d3efdbfc\u003E:0\r\n  at Microsoft.AspNetCore.SignalR.Client.HubConnectionBuilder.Build () [0x00025] in \u003C207ee6dcc63548f6a7de0cf3bd6154d5\u003E:0\r\n  at MyProject.Services.ServerConnectionService.CreateConnection () [0x0000c] in /Users/tommikiviniemi/Projects/myproject/MyApp/Services/ServerConnectionService.cs:133\r\n...\r\n\u0060\u0060\u0060\r\n\r\nThe code it complains about, HubConnectionBuilder.Build, will crash even with an empty connection builder:\r\n\u0060\u0060\u0060c#\r\nreturn new HubConnectionBuilder().Build();\r\n\u0060\u0060\u0060\r\n\r\nPlease note that this is a Xamarin.Forms project, in case it has any bearing on anything.\r\n\r\nIt goes without saying that this is a catastrophic failure and I\u0027d really appreciate a fix. Thank you.\r\n\r\n### Exceptions (if any)\r\n\u0060\u0060\u0060\r\nSystem.InvalidOperationException: A suitable constructor for type \u0027Microsoft.Extensions.Options.UnnamedOptionsManager\u00271[Microsoft.AspNetCore.Http.Connections.Client.HttpConnectionOptions]\u0027 could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ResultCache lifetime, System.Type serviceType, System.Type implementationType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x00021] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric (Microsoft.Extensions.DependencyInjection.ServiceDescriptor descriptor, System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain, System.Int32 slot, System.Boolean throwOnConstraintViolation) [0x0004a] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateOpenGeneric (System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x00025] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite (System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x0003a] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetCallSite (System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x00010] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites (System.Type implementationType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain, System.Reflection.ParameterInfo[] parameters, System.Boolean throwIfCallSiteNotFound) [0x00016] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateConstructorCallSite (Microsoft.Extensions.DependencyInjection.ServiceLookup.ResultCache lifetime, System.Type serviceType, System.Type implementationType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x00050] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact (Microsoft.Extensions.DependencyInjection.ServiceDescriptor descriptor, System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain, System.Int32 slot) [0x00073] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.TryCreateExact (System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x00018] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateCallSite (System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x0002e] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.GetCallSite (System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain callSiteChain) [0x00010] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.CreateServiceAccessor (System.Type serviceType) [0x0000c] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at System.Collections.Concurrent.ConcurrentDictionary\u00272[TKey,TValue].GetOrAdd (TKey key, System.Func\u00272[T,TResult] valueFactory) [0x00034] in \u003Ccf60a21f6a4543e5a30e3c6ae6742e37\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService (System.Type serviceType, Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope serviceProviderEngineScope) [0x00013] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService (System.Type serviceType) [0x00008] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService (System.Type serviceType) [0x00000] in \u003C5c5c2d1e15f743cd9b15d3422c0b5a91\u003E:0\r\n  at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[T] (System.IServiceProvider provider) [0x0000e] in \u003C44acc522f4fc4e959fecc254d3efdbfc\u003E:0\r\n  at Microsoft.AspNetCore.SignalR.Client.HubConnectionBuilder.Build () [0x00025] in \u003C207ee6dcc63548f6a7de0cf3bd6154d5\u003E:0\r\n  at MyProject.Services.ServerConnectionService.CreateConnection () [0x0000c] in /Users/tommikiviniemi/Projects/myproject/MyApp/Services/ServerConnectionService.cs:133\r\n...\r\n\u0060\u0060\u0060\r\n\r\n### Further technical details\r\n\u0060\u0060\u0060\r\n=== Visual Studio Community 2019 for Mac ===\r\n\r\nVersion 8.10 (build 1773)\r\nInstallation UUID: c397ff94-0681-4a22-9972-062a757ab635\r\n\tGTK\u002B 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 6.18.0.23 (d16-6 / 088c73638)\r\n\r\n\tPackage version: 612000140\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 6.12.0.140 (2020-02/51d876a041e) (64-bit)\r\n\tPackage version: 612000140\r\n\r\n=== Roslyn (Language Service) ===\r\n\r\n3.10.0-3.21251.8\u002B4c32f5e4e9c0828a94fd4d1c9c0994082c85aaf3\r\n\r\n=== NuGet ===\r\n\r\nVersion: 5.9.0.7134\r\n\r\n=== .NET Core SDK ===\r\n\r\nSDK: /usr/local/share/dotnet/sdk/5.0.203/Sdks\r\nSDK Versions:\r\n\t5.0.203\r\n\t5.0.202\r\n\t3.1.409\r\n\t3.1.408\r\nMSBuild SDKs: /Applications/Visual Studio.app/Contents/Resources/lib/monodevelop/bin/MSBuild/Current/bin/Sdks\r\n\r\n=== .NET Core Runtime ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t5.0.6\r\n\t5.0.5\r\n\t3.1.15\r\n\t3.1.14\r\n\r\n=== .NET Core 3.1 SDK ===\r\n\r\nSDK: 3.1.409\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.15.68\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Updater ===\r\n\r\nVersion: 11\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 12.5 (18205)\r\nBuild 12E262\r\n\r\n=== Xamarin.Mac ===\r\n\r\nXamarin.Mac not installed. Can\u0027t find /Library/Frameworks/Xamarin.Mac.framework/Versions/Current/Version.\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 14.20.0.1 (Visual Studio Community)\r\nHash: fe0e2c518\r\nBranch: d16-10\r\nBuild date: 2021-05-19 08:15:56-0400\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 11.3.0.1 (Visual Studio Community)\r\nCommit: xamarin-android/d16-10/22fc2b3\r\nAndroid SDK: /Users/tommikiviniemi/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\tNone installed\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 30.0.4\r\nSDK Build Tools Version: 30.0.2\r\n\r\nBuild Information: \r\nMono: b4a3858\r\nJava.Interop: xamarin/java.interop/d16-10@f39db25\r\nProGuard: Guardsquare/proguard/v7.0.1@912d149\r\nSQLite: xamarin/sqlite/3.35.4@85460d3\r\nXamarin.Android Tools: xamarin/xamarin-android-tools/d16-10@c5732a0\r\n\r\n=== Microsoft OpenJDK for Mobile ===\r\n\r\nJava SDK: /Users/tommikiviniemi/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.25\r\n1.8.0-25\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android SDK Manager ===\r\n\r\nVersion: 16.10.0.12\r\nHash: e240b8c\r\nBranch: remotes/origin/d16-10\r\nBuild date: 2021-05-13 17:01:38 UTC\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 16.10.0.14\r\nHash: e340248\r\nBranch: remotes/origin/d16-10\r\nBuild date: 2021-05-13 17:01:56 UTC\r\n\r\n=== Xamarin Designer ===\r\n\r\nVersion: 16.10.0.117\r\nHash: 249267d55\r\nBranch: remotes/origin/d16-10\r\nBuild date: 2021-05-24 21:27:04 UTC\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 810001773\r\nGit revision: 56d63e5691f86f863cfaed823a5a8fe430e1aaa9\r\nBuild date: 2021-05-28 11:21:28-04\r\nBuild branch: release-8.10\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.16.0\r\nDarwin 20.5.0 Darwin Kernel Version 20.5.0\r\n    Sat May  8 05:10:33 PDT 2021\r\n    root:xnu-7195.121.3~9/RELEASE_X86_64 x86_64\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "linker-friendliness"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NDM0NzgxMw==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "Edit: Updated report to reflect that this is indeed an ASP.NET Core issue and not a Mono/Xamarin-macios issue.",
        "createdAt": "2021-06-04T04:23:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-854347813"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NDM2MjQ5MA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Looks like it might be due to a the linker removing this constructor somehow.\r\n\r\ncc @eerhardt ",
        "createdAt": "2021-06-04T05:09:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-854362490"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NDgyNTUxNA==",
        "parentId": null,
        "author": "eerhardt",
        "content": "Looking. My thinking is that the linker used by Xamarin Forms is older and doesn\u0027t understand \u0060DynamicallyAccessedMembersAttribute\u0060. But if that is true, then I\u0027m not sure how it worked before 6.0.0-preview2.",
        "createdAt": "2021-06-04T15:43:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-854825514"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NDgyOTc4OQ==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "\u003E Looking. My thinking is that the linker used by Xamarin Forms is older and doesn\u0027t understand \u0060DynamicallyAccessedMembersAttribute\u0060. But if that is true, then I\u0027m not sure how it worked before 6.0.0-preview2.\r\n\r\nI am unsure exactly in which version it broke (preview2, 3, or 4). preview-1 works properly. I did test with 2, 3 and 4 but failed to delete obj and bin folders so my testing was polluted. I have no idea why deleting them has any bearing as it is normally not a requirement when upgrading/downgrading NuGet packages, but clearly some kind of state was left behind when jumping between versions in this case. So I am content on preview-1 for now but am locked out from any new updates until this is fixed.\r\n\r\nThank you.",
        "createdAt": "2021-06-04T15:50:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-854829789"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NDk3NTM3NA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u0060UnnamedOptionsManager\u0060 is a new type in a recent preview of 6.0, could that be related to the issue.\r\n\r\n@eerhardt who can we ping on the Xamarin side to figure this out?\r\n\r\nCould you try out customizing the linker settings to see if it works around the issue? (adding the \u0060UnnamedOptionsManager\u0060 type or full namespace)\r\nhttps://docs.microsoft.com/en-us/xamarin/cross-platform/deploy-test/linker",
        "createdAt": "2021-06-04T20:14:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-854975374"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NDk5NzU5OA==",
        "parentId": null,
        "author": "eerhardt",
        "content": "@spouliot @rolfbjarne - any thoughts here? Does Xamarin\u0027s linker understand \u0060DynamicallyAccessedMembers\u0060?",
        "createdAt": "2021-06-04T21:06:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-854997598"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NTAxNjE3Nw==",
        "parentId": null,
        "author": "spouliot",
        "content": "@eerhardt in net6 there\u0027s no Xamarin\u0027s linker anymore. It\u0027s the net6 linker and a few additional (no removal) steps. IOW it it works in net6 then it works with Xamarin.iOS.\r\n\r\nIf this is about legacy then I don\u0027t think it\u0027s supported. The linker is based on mono 2020-02, only with more (and different) customization.",
        "createdAt": "2021-06-04T21:44:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-855016177"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NTA2OTE2Mg==",
        "parentId": null,
        "author": "eerhardt",
        "content": "My understanding from the description of the issue is that this is using the legacy Xamarin Forms with the 6.0 version of Microsoft.Extensions.Options.",
        "createdAt": "2021-06-04T22:45:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-855069162"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NTA5ODk0Mg==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "No I am not using legacy Xamarin Forms. I\u0027m using Xamarin.Forms 5, the current release that will be supported \u0027til November 2022. If Microsoft is working on a new version that may be released in the coming year or so, I wouldn\u0027t know about it.\r\n\r\nSo the current version of Xamarin.Forms with the latest NuGet packages of everything.",
        "createdAt": "2021-06-04T23:14:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-855098942"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NTEwODkxOQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Here\u0027s what we can do to clear things up:\r\n- SignalR hasn\u0027t done any work to make it work well with a linker in any scenario. If it worked before you got lucky, or something else was rooting code that made it work. This is similar to unity workloads that break left and right with IL linkers.\r\n- .NET 5 introduced a new way for libraries to annotate their code to influence the linker and we\u0027ve used this in a couple of places in .NET and ASP.NET Core to make it more linker friendly.\r\n- .NET 6 does much more of this annotating and fixing things so that we can be more confident running the linker will work or will warn when its going to break.\r\n\r\nAs for the current release of Xamarin.Forms, I don\u0027t know how it worked before or why it worked out of the box. I assume something in your code (or in a hidden linker file or extensibility point) was rooting these types. It\u0027s nothing that was influenced by SignalR itself.\r\n\r\nUnnamedOptionsManager is a new internal type that was introduced in .NET 6 preview4 but it\u0027s an implementation detail. The old type used in its place was OptionsManager. It\u0027s possible that OptionsManager was rooted by something else (we need to figure out what that was) and that UnnamedOptionsManager isn\u0027t rooted. \r\n\r\nThis is the crux of the issue. \r\n\r\nAs for which linker tech is being used, it seems like we\u0027re talking about the linker before it understood these annotations.",
        "createdAt": "2021-06-04T23:24:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-855108919"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NTE4MzgyNg==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "\u003E Here\u0027s what we can do to clear things up:\r\n\u003E \r\n\u003E * SignalR hasn\u0027t done any work to make it work well with a linker in any scenario. If it worked before you got lucky, or something else was rooting code that made it work. This is similar to unity workloads that break left and right with IL linkers.\r\n\u003E * .NET 5 introduced a new way for libraries to annotate their code to influence the linker and we\u0027ve used this in a couple of places in .NET and ASP.NET Core to make it more linker friendly.\r\n\u003E * .NET 6 does much more of this annotating and fixing things so that we can be more confident running the linker will work or will warn when its going to break.\r\n\u003E \r\n\u003E As for the current release of Xamarin.Forms, I don\u0027t know how it worked before or why it worked out of the box. I assume something in your code (or in a hidden linker file or extensibility point) was rooting these types. It\u0027s nothing that was influenced by SignalR itself.\r\n\u003E \r\n\u003E UnnamedOptionsManager is a new internal type that was introduced in .NET 6 preview4 but it\u0027s an implementation detail. The old type used in its place was OptionsManager. It\u0027s possible that OptionsManager was rooted by something else (we need to figure out what that was) and that UnnamedOptionsManager isn\u0027t rooted.\r\n\u003E \r\n\u003E This is the crux of the issue.\r\n\u003E \r\n\u003E As for which linker tech is being used, it seems like we\u0027re talking about the linker before it understood these annotations.\r\n\r\nThank you so much for the very thorough explanation, I really appreciate it!\r\n\r\nIs there anything I can do to make the linker keep the relevant parts, maybe by referencing something explicitly to keep it included or such?\r\n\r\nOr will XF5 compatibility be added to the SignalR library itself through some means?\r\n\r\nThanks for looking into this!",
        "createdAt": "2021-06-05T04:57:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-855183826"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1NjIyODYwMA==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E Is there anything I can do to make the linker keep the relevant parts, maybe by referencing something explicitly to keep it included or such?\r\n\r\nYes\r\n\r\n\u003Etry out customizing the linker settings to see if it works around the issue? (adding the UnnamedOptionsManager type or full namespace)\r\nhttps://docs.microsoft.com/en-us/xamarin/cross-platform/deploy-test/linker\r\n\r\nOr, you could try out the latest 6.0 version of Xamarin and see if the new linker works.\r\n\r\n@spouliot for the old linker, were there hardcoded classes that the linker didn\u0027t remove?",
        "createdAt": "2021-06-07T20:21:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-856228600"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1Njc0OTkwOA==",
        "parentId": null,
        "author": "spouliot",
        "content": "\u003E @spouliot for the old linker, were there hardcoded classes that the linker didn\u0027t remove?\r\n\r\n@BrennanConroy Not really. At least not for supporting code that is **not** shipped part of our SDK (including SignalR).\r\n\r\nIOW in the current (soon legacy) SDK we add linker support for the BCL we ship (as part of the SDK). That can be achieve by different forms, but that\u0027s transparent to developers.\r\n\r\nThe default linker mode for app is \u0022Link SDK\u0022 which means the linker will **only remove** code from assemblies that we ship.\r\n\r\nIn order for the linker to remove code in \u0022user code\u0022 (assemblies not part of the SDK) then the linker mode must be set to \u0022Link all\u0022. That also means the developer becomes responsible of ensuring the code is linker safe, e.g. preserving code accessed thru reflection.\r\n\r\n\u003E Turn on linking (\u0022Link SDKs only\u0022)\r\n\r\nThat does not seems to be the case here... and it would mean \u0060UnnamedOptionsManager\u0060 is not removed. \r\n\r\nWhat _might_ be happening is that the app has code (likely an assembly binary) compiled against \u0022Assembly 6.0\u0022 (that would include references to \u0060UnnamedOptionsManager\u0060) but builds the app against \u0060Assembly 5.0\u0060 (that would *not* have \u0060UnnamedOptionsManager\u0060).\r\n\r\nThat can work for a JIT app, since such errors will happen at runtime, and you might never hit the code path that would throw an exception.\r\n\r\nHowever that often won\u0027t work for AOT (required for iOS) since the error will happen at build time [1]. Same thing for the linker... it won\u0027t be able to resolve the metadata and fail [1]\r\n\r\n[1] unless the code is only used thru reflection... in that case the error will also be at runtime\r\n\r\n\r\n",
        "createdAt": "2021-06-08T13:05:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-856749908"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1Nzg0Mjc4OQ==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "@spouliot Correct, I am using the default linking option of \u0022Link SDK assemblies only\u0022, where the responsibility for the preservation of SDK constructs should not be brought over to me/the app developer.\r\n\r\nHere is a list of libraries that the client\u0027s shared (non-native) project is referencing:\r\n\u0060\u0060\u0060xml\r\n\u003CPackageReference Include=\u0022Xamarin.Forms\u0022 Version=\u00225.0.0.2012\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022Xamarin.Essentials\u0022 Version=\u00221.6.1\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022Newtonsoft.Json\u0022 Version=\u002213.0.1\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022Xamarin.FFImageLoading.Transformations\u0022 Version=\u00222.4.11.982\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022Xamarin.FFImageLoading.Svg.Forms\u0022 Version=\u00222.4.11.982\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022UXDivers.Grial\u0022 Version=\u00223.2.83\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022Rg.Plugins.Popup\u0022 Version=\u00222.0.0.11\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022Xamarin.FFImageLoading.Forms\u0022 Version=\u00222.4.11.982\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022XamarinUniversity.Infrastructure\u0022 Version=\u00222.2.0\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022ServiceConcurrency\u0022 Version=\u00221.1.6\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022LightObjectMapper\u0022 Version=\u00221.0.6\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022LightHttpRequest\u0022 Version=\u00221.0.5\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022Plugin.FacebookClient\u0022 Version=\u00223.0.7-beta\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022Xamarin.Forms.MultiDependencyResolver\u0022 Version=\u00221.0.0\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022Microsoft.AppCenter.Crashes\u0022 Version=\u00224.2.0\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022IOSToolbarExtensions\u0022 Version=\u00221.0.0\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022Xamarin.Forms.Chips\u0022 Version=\u00221.0.13\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022AnalyticsSender.Sinks.AppCenterAnalyticsSink\u0022 Version=\u00221.0.0\u0022 /\u003E\r\n\u003C!-- Don\u0027t update these until https://github.com/dotnet/aspnetcore/issues/33269 is fixed. Last tested version: 6.0.0-preview4. --\u003E\r\n\u003CPackageReference Include=\u0022Microsoft.AspNetCore.SignalR.Client\u0022 Version=\u00226.0.0-preview.1.21103.6\u0022 /\u003E\r\n\u003CPackageReference Include=\u0022Microsoft.Extensions.Logging.Console\u0022 Version=\u00226.0.0-preview.1.21102.12\u0022 /\u003E\r\n\u003C!-- Don\u0027t update this until https://github.com/xamarin/XamarinCommunityToolkit/issues/1209 is merged. Last tested version: 1.2.0-pre2. --\u003E\r\n\u003CPackageReference Include=\u0022Xamarin.CommunityToolkit\u0022 Version=\u00221.1.0-preview1056\u0022 /\u003E\r\n\u0060\u0060\u0060\r\n\r\nThe problem went away when I downgraded the SignalR client library back to 6.0.0-preview1.\r\nWhile I was jumping between different SignalR client library preview versions to isolate where it broke, I had to restart VS and then delete bin and obj folders in the project for the changes to take effect; merely changing the package versions and restoring packages wasn\u0027t enough for some reason.\r\n\r\nThe project where the SignalR client library resides in is as mentioned the \u0027shared\u0027 platform-independent portion in a Xamarin.Forms app (ie no iOS or Android specific code in there). It is using the default .NET target framework of \u0022.NET Standard 2.1\u0022. My Visual Studio for Mac version is 8.10 and Xamarin.Forms version is 5.0.0.2012 (in case it has any bearing on this).\r\n\r\nPlease let me know if you need any other clarifications. Thank you!",
        "createdAt": "2021-06-09T16:18:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-857842789"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1ODA4MDUxMg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "@spouliot which repo should we move this issue to?",
        "createdAt": "2021-06-09T20:31:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-858080512"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1ODExMzkwMg==",
        "parentId": null,
        "author": "spouliot",
        "content": "\u003E UnnamedOptionsManager is a new internal type that was introduced in .NET 6 preview4\r\n\r\n@davidfowl that\u0027s not P4 of SignalR - but P4 for .net6 right ?\r\n\r\nIt sounds like the type is **not** removed (by the linker) but a type that only exists in net6.\r\n\r\nThat would makes SignalR 6.0 incompatible with netstandard 2.1, which is what the customer is using.\r\n\r\nIs SignalR nuget advertising support for anything before net6 ?\r\n",
        "createdAt": "2021-06-09T21:26:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-858113902"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1ODExNjYxNg==",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E a type that only exists in net6.\r\n\r\nIt is a type in the Microsoft.Extensions.Options package, which targets netstandard2.0, so it is compatible with netstandard2.1.\r\n\r\n\u003E Is SignalR nuget advertising support for anything before net6 ?\r\n\r\nYes, we target net461, netstandard2.0, and net6.0",
        "createdAt": "2021-06-09T21:31:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-858116616"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1ODEyMDA1MQ==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "\u003E \u003E UnnamedOptionsManager is a new internal type that was introduced in .NET 6 preview4\r\n\u003E \r\n\u003E @davidfowl that\u0027s not P4 of SignalR - but P4 for .net6 right ?\r\n\u003E \r\n\u003E It sounds like the type is **not** removed (by the linker) but a type that only exists in net6.\r\n\u003E \r\n\u003E That would makes SignalR 6.0 incompatible with netstandard 2.1, which is what the customer is using.\r\n\u003E \r\n\u003E Is SignalR nuget advertising support for anything before net6 ?\r\n\r\nHi. The type is very much removed by the linker, as when linking is disabled everything works. If that type didn\u0027t exist I wouldn\u0027t even be able to compile my app. But yeah, everything works with 6.0.0-preview4 if the linker is completely disabled, or when downgrading to 6.0.0-preview1. Also, if only .NET6 is supported then you are killing of Xamarin.Forms support etc. Documentation doesn\u0027t mention this support being removed.\r\n\r\nThank you.",
        "createdAt": "2021-06-09T21:38:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-858120051"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1ODE3NDg3NQ==",
        "parentId": null,
        "author": "spouliot",
        "content": "\u003E It is a type in the Microsoft.Extensions.Options package\r\n\r\n@BrennanConroy hmm... ok, but that just move the target/questions elsewhere as this package is not directly referenced by the customer\u0027s project, so we don\u0027t know which \u0022working\u0022 version \u0022p1\u0022 used versus the \u0022broken\u0022 version \u0022p2\u0022 is using...\r\n\r\nand that\u0027s likely true for many other dependencies used in the project: bump one and you get a cascade of updates.\r\n\r\n\u003E which repo should we move this issue to?\r\n\r\nIf it worked in 6.0.0-preview1 and broke in 6.0.0-preview2 then this issue is already in the right repo, at least for the moment.\r\n\r\n\r\n@Tommigun1980 thanks for the information you have provided. However it is, sadly, of little use to diagnose the issue. There\u0027s something _weird_ as the linker would not remove a \u0022user\u0022 (non SDK) type. In most cases this type of issues involve assemblies binaries that were build against a different version of the dependencies (than the one your app is providing).\r\n\r\nThere\u0027s not much, beside guessing, that can be done without a test case to reproduce the issue. Are you able to attach a test case (ideally a subset of what you have) we can look into ? If you can provide this then I\u0027ll have a look, because I\u0027m curious :-)\r\n\r\nIf not then another (less optimal) way to find what happened is to the build your project doing binary search with different builds, between p1 and p2, to find which commit cause the issue. It can be done with sources, but it\u0027s easier if you have binaries.\r\n\r\n@BrennanConroy does your CI publish every build somewhere @Tommigun1980 can access ?\r\n\r\n\r\n",
        "createdAt": "2021-06-09T23:52:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-858174875"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1ODE4NzQzMw==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Before doing a binary search I recommend coming up with the most minimal repro using Dependency injection with options in a Xamarin application ",
        "createdAt": "2021-06-10T00:21:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-858187433"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1ODE5MjkxMA==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "@spouliot Xamarin.CommunityToolkit also had problems with the linker removing the default constructor for a type (SafeAreaEffectRouter) and they fixed it like so: https://github.com/xamarin/XamarinCommunityToolkit/pull/455/commits/7ef212887266700312095922c802ecd1d2a7357e\r\n\r\nIt was the exact same problem that builds with the linker enabled (\u0022Link SDKs only\u0022) would remove the default constructor, and they fixed it in the above commit. Maybe @pictos could chime in with details?",
        "createdAt": "2021-06-10T00:36:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-858192910"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1ODE5NjUzMw==",
        "parentId": null,
        "author": "spouliot",
        "content": "@Tommigun1980 no, XCT explicitly told the linker it was **safe** to process their assembly.\r\n\r\nhttps://github.com/xamarin/XamarinCommunityToolkit/blob/c51081c70b77898d27b9f38e0884bbeb5753f2b0/src/CommunityToolkit/Xamarin.CommunityToolkit/AssemblyInfo/AssemblyInfo.ios.tvos.watchos.macos.cs#L5\r\n\r\nBy doing so they get the benefits (smaller size, optimizations) but , like spidey said, _with great power comes great responsibility_ :-)\r\n\r\n\u003E Before doing a binary search\r\n\r\n@davidfowl definitively! A test case was my first suggestion :-)",
        "createdAt": "2021-06-10T00:48:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-858196533"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1ODIwNjU1MA==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "@spouliot I made the bug report for XCT. One of their releases was broken when \u0022Link SDKs\u0022 was enabled, exactly the same case as is happening here. The linked commit was the fix to my bug report.\r\nOnce it landed \u0022Link SDKs\u0022 was working again. Before that commit the error was almost identical to the one encountered here, with a missing default constructor.\r\n\r\nThe \u0060[assembly: LinkerSafe]\u0060 was added a month after the linker issue was introduced and fixed. At least https://github.com/xamarin/XamarinCommunityToolkit/commit/7ef212887266700312095922c802ecd1d2a7357e was marked as the commit that fixed the issue I reported where \u0022Links SDKs\u0022 got broken.",
        "createdAt": "2021-06-10T01:17:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-858206550"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1ODIyMjM1Mw==",
        "parentId": null,
        "author": "spouliot",
        "content": "\u003E The [assembly: LinkerSafe] was added a month after the linker issue was introduced and fixed.\r\n\r\n@Tommigun1980 no, the attribute was added earlier, on August 20th [1], while you filed the issue on October 8th 2020 [2]\r\n\r\n[1] https://github.com/xamarin/XamarinCommunityToolkit/pull/210/files\r\n[2] https://github.com/xamarin/XamarinCommunityToolkit/issues/393\r\n\r\nBut that does not help finding your current issue. If the linker removes the .ctor then something told it to process that assembly. I\u0027ve been told no for project options and for the assemblies opt\u0027ing-in.",
        "createdAt": "2021-06-10T02:02:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-858222353"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1ODIyNjE0OQ==",
        "parentId": null,
        "author": "pictos",
        "content": "\u003E It was the exact same problem that builds with the linker enabled (\u0022Link SDKs only\u0022) would remove the default constructor, and they fixed it in the above commit. Maybe @pictos could chime in with details?\r\n\r\nI believe that @spouliot is aware of that workaround, I learned it from him [here](https://github.com/xamarin/Essentials/pull/1209#discussion_r405051562) (;\r\nI\u0027m reading the role thread to have context, but looks like an interesting issue... AFAIK net6 doesn\u0027t the Mono\u0027s linker (Xamarin.Forms needs mono to build) and mono doesn\u0027t know .NET6\u0027s linker, so that could be an issue? (I\u0027m guessing here)",
        "createdAt": "2021-06-10T02:13:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-858226149"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2MDk2NTU3Nw==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-06-14T20:19:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-860965577"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2MTAzMzk3MA==",
        "parentId": null,
        "author": "eerhardt",
        "content": "Ok, I finally got my mac all updated and working so I could test this out and I can now say I understand why this is happening.\r\n\r\nBetween 6.0-preview1 and 6.0-preview2, we added the \u0060[AssemblyMetadata(\u0022IsTrimmable\u0022, \u0022true\u0022]\u0060 attributes to all the assemblies shipping from dotnet/runtime in https://github.com/dotnet/runtime/pull/48428.\r\n\r\nIt appears that the Xamarin iOS mtouch tool, which contains a version of the ILLinker code, is now starting to respect that assembly attribute as a way of telling if the assembly should be trimmed or not. See https://github.com/xamarin/xamarin-macios/pull/11229.\r\n\r\nIf I look at the \u0060mtouch.exe\u0060 on my machine in ILSpy I see the following code:\r\n\r\n\u0060\u0060\u0060C#\r\nprotected override bool IsLinkerSafeAttribute(CustomAttribute attribute)\r\n{\r\n\tTypeReference attributeType = attribute.get_AttributeType();\r\n\tstring name = ((MemberReference)attributeType).get_Name();\r\n\tstring text = name;\r\n\tif (!(text == \u0022LinkerSafeAttribute\u0022))\r\n\t{\r\n\t\tif (text == \u0022AssemblyMetadataAttribute\u0022)\r\n\t\t{\r\n\t\t\tif (!attribute.get_HasConstructorArguments())\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (attributeType.get_Namespace() != \u0022System.Reflection\u0022)\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tCustomAttributeArgument val = attribute.get_ConstructorArguments().get_Item(0);\r\n\t\t\tif (((CustomAttributeArgument)(ref val)).get_Value() as string!= \u0022IsTrimmable\u0022)\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tval = attribute.get_ConstructorArguments().get_Item(1);\r\n\t\t\treturn ((CustomAttributeArgument)(ref val)).get_Value().ToString().ToLowerInvariant() == \u0022true\u0022;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThis logic is used to tell whether to set the \u0060AssemblyAction.Link\u0060 action on the assembly or not.\r\n\r\nHowever, the issue is, the iOS mtouch tool should only be respecting the \u0060IsTrimmable\u0060 assembly attribute if it also respects all the other attributes we\u0027ve added to the new version of the linker: \u0060DynamicallyAccessedMembers\u0060, \u0060DynamicDependency\u0060, etc. Just because an assembly has \u0060IsTrimmable\u0060 on it, doesn\u0027t mean that it can be trimmed without also respecting these new attributes.\r\n\r\nI believe this issue should be moved to https://github.com/xamarin/xamarin-macios, as the current version of the mtouch tool is not doing the right thing.\r\n\r\ncc @spouliot @sbomer ",
        "createdAt": "2021-06-14T22:24:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-861033970"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2MTExNTAzOQ==",
        "parentId": null,
        "author": "spouliot",
        "content": "@eerhardt thanks for your investigation! That was meant to help/ease code move to net6, not to downgrade net6 code back to netstandard.\r\n\r\n\u003E Between 6.0-preview1 and 6.0-preview2, we added the [AssemblyMetadata(\u0022IsTrimmable\u0022, \u0022true\u0022] attributes to all the assemblies shipping from dotnet/runtime in dotnet/runtime#48428.\r\n\r\nThat remains a problem if some of the dotnet/runtime assemblies do not plan to support being trimmable for net6.\r\n\r\n",
        "createdAt": "2021-06-15T02:06:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-861115039"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2MTEzMTcyMQ==",
        "parentId": null,
        "author": "eerhardt",
        "content": "\u003E That remains a problem if some of the dotnet/runtime assemblies do not plan to support being trimmable for net6.\r\n\r\nWe have backtracked on a few assemblies that we don\u0027t plan on supporting trimmability. See https://github.com/dotnet/runtime/pull/52272 and https://github.com/dotnet/runtime/pull/49085. The current list of libraries that don\u0027t plan on supporting trimming in the near future:\r\n\r\n* System.Composition.Convention\r\n* System.ComponentModel.Composition.Registration\r\n* System.Composition.TypedParts\r\n* System.Composition.Hosting\r\n* System.ComponentModel.Composition\r\n* System.CodeDom\r\n* System.Configuration.ConfigurationManager\r\n* System.Speech\r\n\r\nFor those assemblies we don\u0027t add the \u0060IsTrimmable\u0060 assembly metadata - https://github.com/dotnet/runtime/search?q=SetIsTrimmable\r\n\r\nBut the rest of the assemblies we ship in the .NET 6 timeframe will have \u0060IsTrimmable=true\u0060 on them. So anyone using our v6 OOBs on the current Xamarin stack will run into this issue.",
        "createdAt": "2021-06-15T02:58:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-861131721"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2OTA1MTUxMA==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "Thank you guys so much for looking into this!! I really appreciate it.\r\n\r\n@spouliot I am assuming that commit fixes linking Xamarin apps when using the new .NET 6 libraries, right? If so do you know when it will be released? Iirc there was a new VS For Mac update a couple of days ago with a new Xamarin.iOS version, did the fix make it to that version?\r\n\r\nThank you again everyone!",
        "createdAt": "2021-06-26T19:33:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-869051510"
      },
      {
        "id": "IC_kwDOAQzde8451Wr6",
        "parentId": null,
        "author": "Satvik-web",
        "content": "I am getting this when I try to connect..\r\nType Microsoft.AspNetCore.Http.Connections.Client.HttpConnection has invalid vtable method slot 16 with method non\r\n![Screenshot 2021-11-16 at 7 13 23 PM](https://user-images.githubusercontent.com/72124172/141996315-1ece4460-1586-4712-9559-e98505a791bc.png)\r\n![Screenshot 2021-11-16 at 7 13 46 PM](https://user-images.githubusercontent.com/72124172/141996358-badabec0-ceaf-4b79-a91a-447776c10603.png)\r\ne\r\n",
        "createdAt": "2021-11-16T13:43:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-970287866"
      },
      {
        "id": "IC_kwDOAQzde85MrtKn",
        "parentId": null,
        "author": "tompi",
        "content": "Just for googlability, Im also using xamarin, and \u0022link all\u0022, so Im also stuck on signalr v5.\r\n\r\nTried 6.0.1 and 6.0.10 and both give me this message(on iOS only):\r\n\r\nThe type initializer for \u0027Microsoft.AspNetCore.Http.Connections.Client.Internal.Constants\u0027 threw an exception.\r\n\r\n  at Microsoft.AspNetCore.Http.Connections.Client.Internal.Constants.GetUserAgentHeader () [0x0003f] in \u003C0ff77aac3a5348fa82d58cb6c49bd84c\u003E:0 \r\n  at Microsoft.AspNetCore.Http.Connections.Client.Internal.Constants..cctor () [0x00018] in \u003C0ff77aac3a5348fa82d58cb6c49bd84c\u003E:0 \r\n\r\n\r\n\u0022link sdk only\u0022 works fine.\r\nAlso tried making a linker exception(preserve all) for \u0022Microsoft.AspNetCore.Http.Connections.Client\u0022, but does not help...",
        "createdAt": "2022-10-21T06:40:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33269#issuecomment-1286525607"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5MTkzMTcyMjE=",
    "title": "SignalR client: RPCs are not invoked on Android client if LLVM is on",
    "url": "https://github.com/dotnet/aspnetcore/issues/33493",
    "createdAt": "2021-06-11T23:58:19Z",
    "lastUpdated": "2021-06-14T20:25:33Z",
    "body": "\u003C!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003E\r\n\r\n### Describe the bug\r\n\r\nMy project is a Xamarin.Forms iOS/Android app. My project\u0027s shared project is a normal platform independent Xamarin.Forms .NET Standard 2.1 project. Said project is referencing the Microsoft.AspNetCore.SignalR.Client library.\r\n\r\nThere are several RPC registered to a HubConnection:\r\n\u0060\u0060\u0060c#\r\nconnection.On(\u0022SomeRPC\u0022, () =\u003E\r\n{\r\n    Console.WriteLine(\u0022HELLO!\u0022);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nThese work flawlessly in all permutations of release configurations except one.\r\n\r\niOS: AOT \u002B LLVM: Works -- RPCs are invoked (i.e. \u0060connection.On\u0060 callbacks are invoked).\r\nAndroid: AOT: Works -- RPCs are invoked (i.e. \u0060connection.On\u0060 callbacks are invoked).\r\nAndroid AOT \u002B LLVM: **Doesn\u0027t work!** RPCs are never invoked.\r\n\r\n### To Reproduce\r\n\u003C!--\r\nWe \u2764 code! Point us to a minimalistic repro project hosted in a GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003E\r\n\r\n1) Set up a Xamarin.Forms application.\r\n2) Add the Microsoft.AspNetCore.SignalR.Client NuGet to the shared project. Note: Use 6.0.0-preview1 because of this issue: https://github.com/dotnet/aspnetcore/issues/33269\r\n3) Register some \u0060connection.On\u0060 RPCs.\r\n4) Use some means to invoke the RPCs (from some test server I guess).\r\n5) *Optional*: Build and run a release build for iOS with AOT \u002B LLVM on to verify that the RPCs are invoked.\r\n6) *Optional*: Build and run a release build for Android with AOT on to verify that the RPCs are invoked.\r\n7) Build and run a release build for Android with AOT \u002B LLVM on to verify that the RPCs are **not** invoked.\r\n\r\n(In the off-chance that Android LLVM builds fail to build, follow the workaround at https://github.com/xamarin/xamarin-android/issues/5764#issuecomment-856062396 until https://github.com/xamarin/xamarin-android/issues/5764 is fixed.)\r\n\r\n_So all in all, turning LLVM on for Android builds makes RPCs not being called anymore. This effectively prevents one from using LLVM on Android until this issue is fixed._\r\n\r\n### Exceptions (if any)\r\n\u003C!-- \r\nInclude the exception you get when facing this issue\r\n--\u003E\r\n\r\nNone. Breakpoints show that the RPCs are not invoked on Android when LLVM is turned on, but there are no exceptions.\r\n\r\n### Further technical details\r\n- Microsoft.AspNetCore.SignalR.Client version: 6.0.0-preview1\r\n- Xamarin.Forms version: 5.0.0-2012\r\n- VS For Mac version: 8.10.1\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "linker-friendliness"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1OTk3MDQxMw==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "It\u0027s quite a pain to use these systems atm so I\u0027ll in case anyone else reads this and wants to actually make Xamarin builds for Android here are the hacks needed right now:\r\n\r\n1) LLVM can\u0027t be turned on on Android unless [AndroidAddKeepAlives is forced to false](https://github.com/xamarin/xamarin-android/issues/5764#issuecomment-856062396), until https://github.com/xamarin/xamarin-android/issues/5764 is fixed, unless you get lucky and the libraries you use are not subject to the https://github.com/xamarin/xamarin-android/issues/5764 issue.\r\n2) SignalR client library can\u0027t be updated beyond 6.0.0-preview1 until https://github.com/dotnet/aspnetcore/issues/33269 is fixed, if you want to enable SDK linking on Android.\r\n3) LLVM can\u0027t be turned on on Android until https://github.com/dotnet/aspnetcore/issues/33493 is fixed, as LLVM prevents RPCs from being called.\r\n\r\nHopefully this saves someone some time, but I\u0027d really appreciate if Microsoft made sure that release builds work properly in all permutations. This is incredibly time consuming and it gets taxing to keep tons of lists of issues that need to be resolved before certain options can be turned on.\r\n\r\nIf you were a new user and wanted to compile a sample app, chances are very good that you\u0027d never be able to do it. This pushes lots of potential users away so some more care would be greatly appreciated from all teams.\r\n\r\nThank you.",
        "createdAt": "2021-06-12T00:39:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33493#issuecomment-859970413"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1OTk3MjQxMQ==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "Ping @davidfowl and @spouliot because you are active in the [SignalR client library linker issue ticket](https://github.com/dotnet/aspnetcore/issues/33269), in case there\u0027s overlap between these issues. Thank you.",
        "createdAt": "2021-06-12T00:52:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33493#issuecomment-859972411"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1OTk3NjM3NA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Most of .NET doesn\u0027t work with linkers until .NET 6. The SignalR client is no different in this regard. This hasn\u0027t been a priority in the past so not much works but it will going forward (probably .NET 7 and onward). Until then, you\u0027ll need to stop running the linker on libraries that don\u0027t explicitly support it or figure out which types you need to keep in order to make the SignalR client work.",
        "createdAt": "2021-06-12T01:20:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33493#issuecomment-859976374"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1OTk5MTU4OA==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "@davidfowl Thank you for the reply.\r\n\r\nBut this issue has nothing to do with linkers. I am saying that the SignalR client library doesn\u2019t work with the LLVM compiler on Android. It does work with LLVM on iOS. When LLVM is enabled on Android RPC callbacks are not being invoked for some reason.\r\n\r\nWhat do you mean with libraries not supporting the linker btw? All libraries I have ever used can be linked, except the past three preview versions of SignalR. When the linker is enabled it links all SDKs and the linker kinda has to be enabled unless you want your app to be impossibly large, it\u2019s not run for certain libraries only. If a library can\u2019t be linked it has some problem that needs to be fixed. There\u2019s no way linker support could not be a priority for vendors. Maybe you are thinking of full program linking, but I am not using it, only SDK linking. Please remember that the SignalR client library is used in Xamarin mobile phone apps as well.\r\n\r\nBut that said, this ticket is not about linkers, that\u2019s in the other ticket. This ticket is about the LLVM problem on Android.\r\n\r\nhttps://docs.microsoft.com/en-us/xamarin/android/deploy-test/release-prep describes the LLVM under the section \u201CLLVM Optimizing Compiler\u201D.\r\n\r\nSignalR is recommended for real-time communication in Xamarin apps by Microsoft: https://azure.microsoft.com/en-us/resources/videos/build-2019-crafting-real-time-mobile-apps-with-xamarin-and-signalr/\r\n\r\nBut apps using SignalR must be able to utilize LLVM if we are to release them to the public. It\u2019s almost certainly a very minor detail that needs to be tweaked as LLVM should work out of the box. I\u2019m sure it won\u2019t take you guys many minutes to fix whatever issue there is.\r\n\r\nIf SignalR is no longer supposed to work in mobile apps then that has not been documented. But for mobile apps to be able to be released, we have to make optimized builds before submitting the apps to the app stores and to customers. Libraries must be mindful of the different environments where they can be used, especially if they are the recommended practices by Microsoft itself. It is extremely time consuming to figure out which library doesn\u2019t play by the rules, especially when you are following all the best practices that Microsoft has laid out. In its most banal form, a lot of sample apps can\u2019t be compiled right now as it stands.\r\n\r\nThank you.",
        "createdAt": "2021-06-12T03:40:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33493#issuecomment-859991588"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1OTk5NDE1Mw==",
        "parentId": null,
        "author": "davidfowl",
        "content": "I\u0027m just guessing that these AOT compiler also do linking (that\u0027s what they typically do) and if so, it breaks libraries because things get removed that shouldn\u0027t. I\u0027m 80% sure this is the issue, if there\u0027s something else wrong then we\u0027d be happy to fix  but as I said before, we don\u0027t test our libraries in these environments and until .NET 7 we don\u0027t be investing in a linker story outside of what we\u0027re planning to do now.\r\n\r\n\u003E If a library can\u2019t be linked it has some problem that needs to be fixed\r\n\r\nRight, see my previous comment. Making libraries linker friendly has been focus for .NET 6 with Blazor, Xamarin will converge on that same plan in .NET 6. Before then, you just got lucky. Most of the libraries we ship, including SignalR don\u0027t work with the linker and I don\u0027t expect the mass of libraries to work that are on NuGet.\r\n\r\n\u003E I\u2019m sure it won\u2019t take you guys many minutes to fix whatever issue there is.\r\n\r\nWe don\u0027t plan to get to this issue anytime soon, at least during the .NET 6 timeframe. If it\u0027s something that can be easily debugged and you can pinpoint something easy we can fix, we\u0027ll take it, beyond that, we\u0027re not going to take any action here.",
        "createdAt": "2021-06-12T04:08:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33493#issuecomment-859994153"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1OTk5NDM3OA==",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E If SignalR is no longer supposed to work in mobile apps then that has not been documented\r\n\r\nI can get behind this. We should open a doc issue explaining that the SignalR client isn\u0027t AOT compatible on Xamarin. We\u0027ll turn this into a documentation issue until we have the proper support in the product.",
        "createdAt": "2021-06-12T04:09:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33493#issuecomment-859994378"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1OTk5NTI1OA==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "Thank you for the replies @davidfowl.\r\nBut this issue still isn\u2019t related to linkers.\r\n\r\nAs I said in the ticket the SignalR library **does** work with AOT on Android. It also works with AOT \u002B LLVM on iOS. What does not work, however, is AOT \u002B **LLVM** on Android.\r\n\r\nI am asking to please fix the LLVM bug on Android. It is pretty much mandatory for apps using SignalR that are to be released on Google Play.\r\n\r\nThank you again.",
        "createdAt": "2021-06-12T04:19:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33493#issuecomment-859995258"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1OTk5NTcyMQ==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "\u003E I can get behind this. We should open a doc issue explaining that the SignalR client isn\u0027t AOT compatible on Xamarin. We\u0027ll turn this into a documentation issue until we have the proper support in the product.\r\n\r\nWait... If you are turning any Xamarin issues into documentation issues you are effectively deprecating support for Xamarin.\r\n\r\nI have spent a year making an app and now you are telling me Xamarin issues will be turned into documentation issues until .NET 7?\r\n\r\nIs this an official stance? That is literally killing off Xamarin support, as we won\u2019t be able to really make releases for a few years then.",
        "createdAt": "2021-06-12T04:24:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33493#issuecomment-859995721"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1OTk5NjA1Nw==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "I honestly think that you guys should take half a day into fixing any linker issues, and then fix whatever is preventing LLVM from working on Android. These are most of the time trivial issues. Do you really want to deprecate SignalR as the framework for Microsoft\u2019s mobile strategy, over something that would be very much fixable in a very short time?",
        "createdAt": "2021-06-12T04:28:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33493#issuecomment-859996057"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1OTk5NjE2OQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "SignalR doesn\u0027t support linking in any form. We want to, we just have never done so. I\u0027ve mentioned this several times. This includes AOT compiled Xamarin platforms that perform or Unity without work on the user\u0027s end part. Many people have gotten SignalR to work on these platforms but \r\n\r\nWe\u0027ll gladly fix issues identified by passionate members such as yourself who report them and help us support the existing platforms. Beyond that, we have no plans to do anything here in the short term.",
        "createdAt": "2021-06-12T04:29:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33493#issuecomment-859996169"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg1OTk5NjU3NQ==",
        "parentId": null,
        "author": "davidfowl",
        "content": "Consider using websockets directly if SignalR doesn\u0027t meet your needs. We\u0027ll be looking into these problems in a more concerted effort in a future release beyond the existing bug reports we get today.\r\n\r\n\u003E I honestly think that you guys should take half a day into fixing any linker issues\r\n\r\nWe\u0027ll definitely do that time permitting, no promises as to when that day will occur!",
        "createdAt": "2021-06-12T04:33:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33493#issuecomment-859996575"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2MDE4MTM3NA==",
        "parentId": null,
        "author": "Tommigun1980",
        "content": "\u003E Consider using websockets directly if SignalR doesn\u0027t meet your needs\r\n\r\nIt\u0027s not about \u0022SignalR\u0022 not meeting my needs, it\u0027s about it correctly working on all of the platforms it\u0027s supposed to support. If it supports Xamarin (which it should as there\u0027s lots of Microsoft materials about integrating SignalR to Xamarin apps), then by extension Xamarin.Android should be supported. But if you can\u0027t build optimised LLVM builds then it isn\u0027t really supported. It\u0027s really not about SignalR not meeting my needs as I said.\r\n\r\nAlso it\u0027s too late to change technologies anymore as the product is almost done, nor would I want to change up everything for a minor issue like LLVM not working properly on Android. (Where minor refers to cost of fixing the issue on your end, even though the issue itself is large to us developers who use SignalR in mobile apps as it prevents them from being released).",
        "createdAt": "2021-06-13T09:30:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33493#issuecomment-860181374"
      },
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg2MDk2ODgyNw==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-06-14T20:25:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33493#issuecomment-860968827"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5MzA0OTkwMzU=",
    "title": "Consider SignalR Pull Model / Streaming for JavaScript and Java client",
    "url": "https://github.com/dotnet/aspnetcore/issues/33859",
    "createdAt": "2021-06-25T21:00:04Z",
    "lastUpdated": "2024-03-02T00:51:15Z",
    "body": "As a part of https://github.com/dotnet/aspnetcore/issues/30289 / https://github.com/dotnet/aspnetcore/pull/33491 we didn\u0027t leverage SignalR\u0027s native streaming capability as we wanted to delay sending additional data chunks until the ones sent had been consumed by the server. Without this, the client could queue the entire stream at once (via \u0060subject.next(nextData)\u0060) thereby blocking interactivity till the stream was transferred. This would in turn present a breaking change for certain functionality like file uploads. Instead we took a \u0060send\u0060/\u0060invoke\u0060 based approach where we \u0060send\u0060 \u0060X\u0060 chunks, and then \u0060invoke\u0060 every \u0060X\u002B1\u0060 chunks to get a \u0022heartbeat\u0022 for the stream, and allow other requests to interrupt the transfer.",
    "upvotes": 1,
    "labels": [
      "enhancement",
      "area-signalr",
      "Blazor \u2665 SignalR",
      "Priority:3",
      "feature-blazor-jsinterop"
    ],
    "comments": [
      {
        "id": "MDEyOklzc3VlQ29tbWVudDg3MDAwNjUwMQ==",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-06-28T20:18:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33859#issuecomment-870006501"
      },
      {
        "id": "IC_kwDOAQzde848TG47",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-13T01:33:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/33859#issuecomment-1011641915"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NDcwNDk2Nzk=",
    "title": "How to disconnect specified client from outside hub",
    "url": "https://github.com/dotnet/aspnetcore/issues/34481",
    "createdAt": "2021-07-18T14:39:46Z",
    "lastUpdated": "2024-09-19T07:39:15Z",
    "body": "Hi,\r\n\r\nI have the exact same need of this issue: https://github.com/dotnet/aspnetcore/issues/5333, but sadly the microsoft bot closed it for inactivity.\r\n\r\nWhen i ban a user, i put his user-id in a table to be able to block further connection from this user. But if the user is already connected, he can still send and receive message. I could add a filter to ignore all request for this user, but he will still be able to receive all the message.\r\n\r\nThe proposed solution seem to create a \u00AB request disconnect \u00BB message in user code.\r\n\u0060\u0060\u0060\r\n// backend\r\n_hubContext.Clients.User(\u0022user-id-here\u0022).RequestDisconnect();\r\n\r\n//frontend\r\nconst connection: HubConnection = new HubConnectionBuilder()\r\n  .withUrl(\u0027/hub/myHub\u0027, {\r\n    accessTokenFactory: async () =\u003E (await getAccessToken()) ?? \u0027\u0027,\r\n    transport: HttpTransportType.WebSockets,\r\n    skipNegotiation: true\r\n  })\r\n  .withAutomaticReconnect()\r\n  .build();\r\n\r\nconnection.on(\u0027RequestDisconnect\u0027, () =\u003E {\r\n  connection.stop();\r\n});\r\n\u0060\u0060\u0060\r\nBut i don\u0027t like that solution, a user could have a client that doesn\u0027t respect the requestDisconnect. The other solution seem to \r\nseem to manually track the user connection in the hub itself and to be able to do a .Abort() on it later:\r\nhttps://github.com/dotnet/aspnetcore/issues/5333#issuecomment-564702805\r\n\r\n\u003E There is likely a workaround way to implement this right now. The necessary logic should already exist in the Hub itself (via Context.Abort()). The request here is to be able to do it from outside the hub.\r\n\u003E\r\n\u003EWhile we don\u0027t generally recommend doing this, it is currently OK to capture the HubCallerContext (from the Context property) in OnConnectedAsync, store it somewhere (a dictionary indexed by ConnectionID perhaps) and then call .Abort() on it to terminate the connection.\r\n\u003E\r\n\u003EI do agree that we should look at a more first-class way to do this, but I\u0027d be curious if this workaround works for your scenario. Would you be able to try it and report back? We\u0027ll look at this for 5.0, but that\u0027s not coming until November 2020 and I\u0027d like to be able to give you something that works before then :).\r\n\r\nIs that any way that this functionality could be implemented in the Signalr library itself ?\r\n\r\nIn the context of my application we only send message to groups, so technically i could only remove the user from the all the groups that he is part of, but even that can\u0027t work because the group manager doesn\u0027t all to remove user from group, only connection.",
    "upvotes": 0,
    "labels": [
      "Docs",
      "area-signalr",
      "net8_docathon"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde840nu78",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "https://github.com/dotnet/aspnetcore/issues/5333#issuecomment-623027734\r\n\u003E As useful as this feature is I don\u0027t think we should implement anything that needs to communicate across servers over the backplane to take an action on a connection. Aborting the socket needs to happen from the server where that socket is. It\u0027s simple an reliable (at least is should be) and there\u0027s no possibility of missing the notification because redis went down or because a backplane is poorly written.\r\n\r\nYou should be able to store the HubContext from the Hub in a custom manager then if you determine that that connection should be closed you can call Abort on the HubContext. And you can add support for users in your manager so you can close all connections for a user. https://github.com/dotnet/aspnetcore/issues/5333#issuecomment-565528090\r\n\r\nThe problem with supplying an \u0060Abort(string connectionId)\u0060 type API on \u0060IHubContext\u0060 is that we likely wont make it work across the backplane which would be unexpected behavior to a user of the API. So we\u0027re hesitant to add that API.\r\n\r\nWe might just want to document the recommended approach for users to implement if they want this type of feature\r\ncc @bradygaster ",
        "createdAt": "2021-07-19T20:16:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34481#issuecomment-882831100"
      },
      {
        "id": "IC_kwDOAQzde840rMPS",
        "parentId": null,
        "author": "Davilink",
        "content": "I think that documenting that recommendation is a good idea, but i need to be able to do it through a IHubContext, because this ban is done in a separate context from the Hub, the user is ban through an API controller.",
        "createdAt": "2021-07-20T22:05:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34481#issuecomment-883737554"
      },
      {
        "id": "IC_kwDOAQzde840t-CD",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060Next sprint planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-21T20:08:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34481#issuecomment-884465795"
      },
      {
        "id": "IC_kwDOAQzde840wlJ3",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-07-22T18:46:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34481#issuecomment-885150327"
      },
      {
        "id": "IC_kwDOAQzde8425ZlA",
        "parentId": null,
        "author": "wegylexy",
        "content": "Even if you keep a \u0060HubContext\u0060, it may be on a different server. Besides, you should also invoke a client method so it won\u0027t attempt to reconnect.\r\nIf you still want such a feature, it would rather be in \u0060HubLifetimeManager\u003C\u003E\u0060. The Redis override would then publish the abortion in case the context is not on the current server.",
        "createdAt": "2021-09-16T15:43:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34481#issuecomment-921016640"
      },
      {
        "id": "IC_kwDOAQzde85WSH02",
        "parentId": null,
        "author": "wadepickett",
        "content": "Related to doc PR: https://github.com/dotnet/AspNetCore.Docs/issues/28081   SignalR - How to access connectionIds outside of Hub",
        "createdAt": "2023-02-28T05:15:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/34481#issuecomment-1447591222"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5NzQ5Mjg2OTQ=",
    "title": "http_client\u0027s cancellation callback fires when there are no ongoing requests",
    "url": "https://github.com/dotnet/aspnetcore/issues/35517",
    "createdAt": "2021-08-19T18:20:44Z",
    "lastUpdated": "2024-03-02T00:51:16Z",
    "body": "\u003C!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003E\r\n\r\nThe bug is lifetime management of a caller supplied http_client. The C\u002B\u002B client needs to hold on to a reference to the caller supplied http_client till negotiate request completes and clean up the supplied callback or hold onto the http_client till shutdown, otherwise will end up hitting access violations during shutdown if it relies on caller maintaining the lifetime of the http_client.\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "feature-client-c\u002B\u002B"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde846pCIL",
        "parentId": null,
        "author": "BhavanaMSFT",
        "content": "The caller provided websocket_client has the same issue. Unless the caller maintains a reference, cleaning up hub_connection object can end up cleaning websocket_client on a thread that signals websocket close callback. This needs to be better managed as well. ",
        "createdAt": "2021-12-01T16:54:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35517#issuecomment-983835147"
      },
      {
        "id": "IC_kwDOAQzde85MAZgy",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:28:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/35517#issuecomment-1275172914"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5ODc1MTg3NzU=",
    "title": "Pipe should complete with exception if WebSockets closed prematurely",
    "url": "https://github.com/dotnet/aspnetcore/issues/36137",
    "createdAt": "2021-09-03T08:03:28Z",
    "lastUpdated": "2024-03-02T00:51:16Z",
    "body": "\u003C!--\r\nThis template is useful to build consensus about whether work should be done, and if so, the high-level shape of how it should be approached. Use this before fixating on a particular implementation.\r\n--\u003E\r\n\r\n## Summary\r\n\r\nCurrently, if a WebSocket is closed prematurely, the application pipe will complete with no exception. As a server, we need to catch this kind of error in our higher layer codes and log it in our specific format or add some special logic.\r\nIf the pipe closes very normally, we can\u0027t tell whether it\u0027s a real normal close or unexpected close.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/main/src/SignalR/common/Http.Connections/src/Internal/Transports/WebSocketsServerTransport.cs#L179\r\n\r\n\r\n## Motivation and goals\r\n\r\nUnexpected close should not swallow in such low layer. It can throw rethrow a new exception such as \u0060ClosedPrematurelyException\u0060 to tell application layer an unexpected/network issue. As a service provider, if we can\u0027t tell the close reason easily, we lose many opportunities.\r\n\r\n\u003C!--\r\n# Detailed design\r\n\r\nIt\u0027s often best not to fill this out until you get basic consensus about the above. When you do, consider adding an implementation proposal with the following headings:\r\n\r\nDetailed design\r\nDrawbacks\r\nConsidered alternatives\r\nOpen questions\r\nReferences\r\n\r\nIf there\u0027s one clear design you have consensus on, you could do that directly in a PR.\r\n--\u003E\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "design-proposal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842Y7Li",
        "parentId": null,
        "author": "davidfowl",
        "content": "Is there a reason the existing log doesn\u0027t work for you?",
        "createdAt": "2021-09-03T12:33:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36137#issuecomment-912503522"
      },
      {
        "id": "IC_kwDOAQzde842Y8Ss",
        "parentId": null,
        "author": "zackliu",
        "content": "It\u0027s inflexible. If we also want to provide the connection closed reason to customer in Azure, we need to obey some log format. And we also need to send metrics in the case. Anyway, we need to inject some our logic, so we need to catch it in our own codes instead of an underlayer log.",
        "createdAt": "2021-09-03T12:41:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36137#issuecomment-912508076"
      },
      {
        "id": "IC_kwDOAQzde842aDAV",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "This looks related to https://github.com/dotnet/aspnetcore/issues/26701\r\nWe want to improve the experience a bit so that more exceptions are flowed to OnDisconnectedAsync so it\u0027s easier to tell if there was a graceful disconnect or not.",
        "createdAt": "2021-09-03T20:39:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36137#issuecomment-912797717"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5OTAxMDA4NTg=",
    "title": "Offload websocket receive to scheduler threads",
    "url": "https://github.com/dotnet/aspnetcore/issues/36226",
    "createdAt": "2021-09-07T15:23:12Z",
    "lastUpdated": "2023-06-02T01:22:16Z",
    "body": "SignalR C\u002B\u002B client has a set of threads at its disposal that it can utilize to offload websocket receives to. ",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "feature-client-c\u002B\u002B"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842zqd5",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-09-14T21:06:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36226#issuecomment-919512953"
      }
    ]
  },
  {
    "id": "MDU6SXNzdWU5OTE1MTY0NTM=",
    "title": "SignalR Java client: disposing Completable returned by HubConnection.start() does nothing",
    "url": "https://github.com/dotnet/aspnetcore/issues/36298",
    "createdAt": "2021-09-08T20:46:15Z",
    "lastUpdated": "2023-06-02T01:22:18Z",
    "body": "### Describe the bug\r\nIt is not possible to prevent \u0060HubConnection\u0060 from starting with dispose call on \u0060Completable\u0060 returned by \u0060HubConnection.start()\u0060. \r\n[By looking at the code there is no \u0060doOnDispose\u0060 or alike](https://github.com/dotnet/aspnetcore/blob/a9986c33a51f5ceda5854cbfc8969f4c9079caf7/src/SignalR/clients/java/signalr/core/src/main/java/com/microsoft/signalr/HubConnection.java#L225)\r\n\r\nIf one is unaware of this, it could lead to unwanted connections.\r\n\r\n### To Reproduce\r\n\u0060\u0060\u0060java\r\nHubConnection hubConnection= HubConnectionBuilder.create(...)...;\r\nhubConnection\r\n    .start()\r\n    .subscribe(connection-\u003E/*do something*/)\r\n    .dispose(); // this does nothing, connection is created\r\n\u0060\u0060\u0060\r\n\r\n### Further technical details\r\n- Client version:  6.0.0-preview.7.21378.6\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "feature-client-java"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde842wBwe",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E If one is unaware of this, it could lead to unwanted connections.\r\n\r\nIf we added some \u0060doOnDispose\u0060 type thing you could still run into the same issue if start has already completed by the time you call dispose. I don\u0027t see this as being a very important scenario to fix as it has extremely limited scope unless I\u0027m missing something.",
        "createdAt": "2021-09-13T20:42:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36298#issuecomment-918559774"
      },
      {
        "id": "IC_kwDOAQzde842wc1r",
        "parentId": null,
        "author": "Bludator",
        "content": "In the heat of debugging it didn\u0027t come to my mind that \u0060connection.stop()\u0060 works even on not completely started connection. Now I realized I ultimately want that the \u0060connection.stop()\u0060 is called in \u0060doOnDispose\u0060. Which I could do in my code but I think it is not unreasonable to add it directly to the \u0060start\u0060 method.\r\n(Well I could do in next version: #28608)\r\n",
        "createdAt": "2021-09-13T23:54:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36298#issuecomment-918670699"
      },
      {
        "id": "IC_kwDOAQzde842zqve",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "This sounds like adding \u0022cancellation token\u0022 support to the Java client, not against it.",
        "createdAt": "2021-09-14T21:08:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36298#issuecomment-919514078"
      },
      {
        "id": "IC_kwDOAQzde842zqwt",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-09-14T21:08:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/36298#issuecomment-919514157"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde847ujT4",
    "title": "JS SignalR - HubConnection - Ability to unregister callbacks for connection states.",
    "url": "https://github.com/dotnet/aspnetcore/issues/36793",
    "createdAt": "2021-09-21T08:41:01Z",
    "lastUpdated": "2024-03-02T00:51:42Z",
    "body": "I was writing an internal plugin when I realized that there is no way to remove a callback added via \u0060onreconnected\u0060, save for creating a whole new hub connection. It could be useful to be able to add and remove temporary callbacks. For example inside a certain page, do some extra work if the connection is reestablished, unregister it before leaving the page.\r\n\r\nThe only workaround for now would be to have a single callback that would call from an array that I can modify, though it would be nicer if signalR provided a method.",
    "upvotes": 2,
    "labels": [
      "Needs: Design",
      "enhancement",
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde847xd5X",
    "title": "SignalR Karma test issues warning about deprecated API",
    "url": "https://github.com/dotnet/aspnetcore/issues/36809",
    "createdAt": "2021-09-21T16:30:08Z",
    "lastUpdated": "2024-03-02T00:51:43Z",
    "body": "As of the change at https://github.com/dotnet/aspnetcore/pull/36802, the \u0060run-tests.ts\u0060 code logs the following warning:\r\n\r\n\u0060\u0060\u0060\r\nWARN [karma-server]: Passing raw CLI options to new Server(config, done) is deprecated. Use parseConfig(configFilePath, cliOptions, {promiseConfig: true, throwErrors: true}) to prepare a processed Config instance and pass that as the config argument instead.\r\n\u0060\u0060\u0060\r\n\r\nThis refers to the code at https://github.com/dotnet/aspnetcore/blob/302cfd93d8ff643662c0f8f4690b09cd7408d1d3/src/SignalR/clients/ts/FunctionalTests/scripts/run-tests.ts#L212\r\n\r\nAlthough this doesn\u0027t cause any build or test failures, it suggests that at some point, Karma is going to remove this API and the code will stop working.",
    "upvotes": 0,
    "labels": [
      "area-infrastructure",
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde8488SHh",
    "title": "[SignalR] Autobahn-like test suite for SignalR",
    "url": "https://github.com/dotnet/aspnetcore/issues/37440",
    "createdAt": "2021-10-11T08:52:19Z",
    "lastUpdated": "2023-10-28T14:07:48Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\nI started working on SignalR implementation for Rust, which I believe is missing. I want to have a way to verify if the implementation is correct and has all the required features.\r\n\r\n### Describe the solution you\u0027d like\r\nI am looking for an automated test suite for SignalR much like the Autobahn test suite for WebSockets. Is there such a thing? I filed it as a feature request, but I am not sure if this is correct. After all, if it is missing or not public, it is a kind of feature request.\r\n\r\nIf I started the issue in the wrong place, please redirect me to the correct one.\r\n\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "help candidate"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde844DYac",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "Triage: this sounds like a good idea. We\u0027d love to have something like this. We\u0027d need to define what the cases are to test, and also have an example implementation. \r\n\r\nNotes: we\u0027ll want to minimize the effort required on the client side of the tests, while leaving open the possibility of doing asserts/checks on both sides.\r\n\r\nSee also gRPC interop tests: https://github.com/grpc/grpc/blob/master/doc/interop-test-descriptions.md",
        "createdAt": "2021-10-11T20:15:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37440#issuecomment-940410524"
      },
      {
        "id": "IC_kwDOAQzde844DYcH",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/master/docs/TriageProcess.md).",
        "createdAt": "2021-10-11T20:15:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37440#issuecomment-940410631"
      },
      {
        "id": "IC_kwDOAQzde85LK1aZ",
        "parentId": null,
        "author": "SebastianKunz",
        "content": "I think this could be quite interesting for people developing new clients. Here are my initial thoughts.\r\n- Do we want to provide a test suite only for client side implementations, or also for server side?\r\n- Where should the source code live? This repo, or somewere else?\r\n- How does a client implementation interact with the Autobahn? E.g. like gRPC interop tests via command line?\r\n\r\n## Test Coverage\r\nRegarding the test coverage I think we want to cover as much as possible of the spec. Here is a brief overview. These are directly extracted from the [Hub Protocol Spec](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md).\r\n### Protocol\r\n#### Flows\r\nAll supported communication flows should be covered. This means **handshake**, **invocations**, **streaming**, **non-blocking-invocations**, **ping**, **reconnect** and **close** (peacefull and unexpected). **Message headers** are currently not used, but are part of the spec so they should be included.\r\n\r\n#### Encoding\r\nThe spec defines two encodings (JSON and MessagePack). All flows should be tested with both encodings.\r\n\r\n### Transport\r\nAll flows should should support the different transport layers covered in [Transport Protocols Spec](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md).\r\nThis includes WebSockets, Server-Sent Events and Long Polling. The **negotiation** phase should be covered as well.",
        "createdAt": "2022-09-28T16:05:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37440#issuecomment-1261131417"
      },
      {
        "id": "IC_kwDOAQzde85LK7AC",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E All flows should be tested with both encodings.\r\n\r\n\u003E All flows should support the different transport\r\n\r\nThings like this should be optional, we don\u0027t want to write a test suite that requires people to write all encodings and all transports. Additionally, people should be able to add their own encodings or transports and test them.\r\n\r\nThere should probably be \u0022core tests\u0022 that test the bare minimum and then a bunch of additional optional tests for covering everything else. Then client implementations can choose what they want to test against based on what they support.\r\n\r\nOther test cases:\r\n* authorization, via header or query string\r\n* transport fallback\r\n* unexpected hub message types (think new server old client, or not full featured client)\r\n* invalid protocol\r\n* multiple hub messages in a single receive\r\n\r\n\u003E Do we want to provide a test suite only for client side implementations, or also for server side?\r\n\r\nClient side is the more interesting one right now. People are more likely to write a new client than a new server.\r\n\r\n\u003E Where should the source code live? This repo, or somewere else?\r\n\r\nIdeally here, then we can use it for all our clients.\r\n\r\n\u003E * How does a client implementation interact with the Autobahn? E.g. like gRPC interop tests via command line?\r\n\r\nNo clue \uD83D\uDE04 would need to look at how other test suites like autobahn and grpc do things.",
        "createdAt": "2022-09-28T16:25:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37440#issuecomment-1261154306"
      },
      {
        "id": "IC_kwDOAQzde85LO24s",
        "parentId": null,
        "author": "SebastianKunz",
        "content": "\u003E No clue \uD83D\uDE04 would need to look at how other test suites like autobahn and grpc do things.\r\n\r\nI had a quick look at [grpc](https://github.com/grpc/grpc/blob/master/doc/interop-test-descriptions.md) and [autobahn-testsuite](https://github.com/crossbario/autobahn-testsuite). The [grpc-interop-tests](https://github.com/grpc/grpc/blob/master/doc/interop-test-descriptions.md) describe a set of tests to be implemented for client and server implementations. From what I can see by skimming the docs they have [connection-backoff-interop-test-description.md](https://github.com/grpc/grpc/blob/master/doc/connection-backoff-interop-test-description.md), [http2-interop-test-descriptions.md](https://github.com/grpc/grpc/blob/master/doc/http2-interop-test-descriptions.md) and [interop-test-descriptions.md](https://github.com/grpc/grpc/blob/master/doc/interop-test-descriptions.md) test descriptions. Each specifiying tests for parts of the spec. They use program args to interface with the implementation. That way they pass down a test name which should be run by the client/server. Then they provide a script to run the server and client.  \r\n\u003E  For convenience, we provide a shell script wrapper that invokes both server and client at the same time, with the same test_case. This is the preferred way to run these tests.\r\n\r\n[Autobahn|Testsuite](https://github.com/crossbario/autobahn-testsuite) on the other hand provides a docker image to test against client/server implementations. They also provide some nice tools for developing\r\n\r\n\u003E Besides the automated testsuite (aka \u0022fuzzing\u0022 server/client), wstest also includes a number of other handy modes\r\n\u003E - WebSocket echo server and client\r\n\u003E - WebSocket broadcast server (and client driver)\r\n\u003E - Testee modes to test [AutobahnPython](http://autobahn.ws/python) against the test suite\r\n\u003E - wsperf controller and master (see below for more)\r\n\u003E - WAMP server and client, for developing WAMP implementations\r\n\u003E - WebSocket Mass-Connect\r\n\r\nInstead of using cmd line args, like grpc, a client has to open a new connection to the autobahn-test-server (fuzzingserver) specifiying what test to run via query string params.",
        "createdAt": "2022-09-29T12:08:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37440#issuecomment-1262186028"
      },
      {
        "id": "IC_kwDOAQzde85LP_Um",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E a client has to open a new connection to the autobahn-test-server (fuzzingserver) specifiying what test to run via query string params\r\n\r\nThis sounds like what I was thinking at one point. We would provide a server app with all the test cases configured (hub methods, hub protocols both good and bad, logic to hijack the request and inject invalid data, etc.), and the client would just write the test cases it cares about and connect to the server either with a query string, or a path to a hub.",
        "createdAt": "2022-09-29T15:56:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37440#issuecomment-1262482726"
      },
      {
        "id": "IC_kwDOAQzde85LXlpF",
        "parentId": null,
        "author": "szarykott",
        "content": "Nice to see it took off.\r\n\r\n\u003E Client side is the more interesting one right now. People are more likely to write a new client than a new server.\r\n\r\nWhile I agree that people are more likely to create clients, me in particular (as OP of this issue) created server in Rust. I later learnt that to create server I also need to _de facto_ implement client as I need to invoke client\u0027s hub methods from the server.\r\n\r\n\u003E This sounds like what I was thinking at one point. We would provide a server app with all the test cases configured (hub methods, hub protocols both good and bad, logic to hijack the request and inject invalid data, etc.), and the client would just write the test cases it cares about and connect to the server either with a query string, or a path to a hub.\r\n\r\nI like the idea. I think it would be equally easy to have a client with corresponding setup. \r\n\r\n\u003E Things like this should be optional, we don\u0027t want to write a test suite that requires people to write all encodings and all transports. Additionally, people should be able to add their own encodings or transports and test them.\r\n\r\n100% agree. For instance having support for only text WebSocket would be satisfactory for most users of custom implementation. Those implementations could just mention they support 75% of spec or simply name supported features. \r\n\r\n**What would be really interesting side effect** of writing test cases would be to have **all possible features listed in compact form**, maybe I did bad job searching but the only place they are listed are those long documents (and source code ofc): \r\n- [HubProtcol](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md)\r\n- [TransportProtocol](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md).\r\n\r\nI had some fun establishing a list of features to implement digging through those. And a few surprises when I discovered new things to implement that I missed previously.\r\n\r\nAs a side not, it would be nice if tests were contenerized to have an easy way to run them in CI.",
        "createdAt": "2022-10-01T20:37:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37440#issuecomment-1264474693"
      },
      {
        "id": "IC_kwDOAQzde85LhkW4",
        "parentId": null,
        "author": "SebastianKunz",
        "content": "I had a look at the reports Autobahn|Testsuite generates. It\u0027s quite neat. For every test case they write out json files containing all the information gathered for the testcase. They also provide html files, organized as reports to provide a summary of the testcases. Every testcase has a lot of detailed information about the testcase like description, expectation, actual, wirelog, wire statistics and more.  I think developing a client it could be quite nice to have similar features. When a tests fails a user can inspect where it went wrong by e.g. inspecting the network traffic.\r\n\r\nWhat do you think of the idea of developing a POC SignalR-Autobahn first. The main goal is to establish a framework that allows the development of autobahn-signalr tests. It shouldn\u0027t be too much about the tests themselves, but rather about the environment. That way we can see what works and what doesn\u0027t and what features are needed. This also allows developers to implement their own autobahn-tests without understanding the whole autobahn pipeline. Just like you don\u0027t have to understand how xUnit or nUnit work. You just write your tests.",
        "createdAt": "2022-10-04T14:25:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37440#issuecomment-1267090872"
      },
      {
        "id": "IC_kwDOAQzde85LjNuR",
        "parentId": null,
        "author": "szarykott",
        "content": "I am totally for a tracer bullet approach here.\r\n\r\nI would gladly see how tests that are developed fit into my implementations of server / client and how to make it more seamless before jumping all in.\r\n\r\nI thumbed through Autobahn as well and while it seems easy to implement tests for servers (just use C# client with tests encoded with expectations, run via docker), developing tests for client seems more challenging.\r\n\r\nA server with test cases could be provided, but then what? Each implementor would need to write their own tests by hand (possibly getting some of them wrong). Maybe there could be a way to standardize test cases notation somehow and make users only implement parser for those test cases (for code generation for instance)?",
        "createdAt": "2022-10-04T20:10:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37440#issuecomment-1267522449"
      },
      {
        "id": "IC_kwDOAQzde85LjaeP",
        "parentId": null,
        "author": "SebastianKunz",
        "content": "\u003E Each implementor would need to write their own tests by hand (possibly getting some of them wrong)\r\n\r\nExactly. But I fear thats just the costs one has to pay for a fully fledged automated test suite. \r\n\r\n\u003E Maybe there could be a way to standardize test cases notation somehow and make users only implement parser for those test cases\r\n\r\nI like this idea, but I am not sure whats the effort / reward ratio here. Might be too much work. But you hit a crucial point here: If we go for \u0022every implementation manually implements the test cases\u0022 we need to make sure to provide examples and proper documentation on each test case so there is no confusion on what implementations have to do.\r\n",
        "createdAt": "2022-10-04T21:01:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37440#issuecomment-1267574671"
      },
      {
        "id": "IC_kwDOAQzde85Melum",
        "parentId": null,
        "author": "szarykott",
        "content": "\u003E we need to make sure to provide examples and proper documentation on each test case so there is no confusion on what implementations have to do\r\n\r\nThis alone would be a satisfactory outcome of this issue. Automation would be a nice addition, a cherry on the cake.",
        "createdAt": "2022-10-18T22:36:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37440#issuecomment-1283087270"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde8496xsB",
    "title": "Crank SignalR Testing topology in Azure",
    "url": "https://github.com/dotnet/aspnetcore/issues/37909",
    "createdAt": "2021-10-28T18:23:02Z",
    "lastUpdated": "2024-03-02T00:51:43Z",
    "body": "We want to create a testing environment for perf testing SignalR in Azure using Crank. Some details of this topology:\r\n\r\n* [ ] VM running the Crank server\r\n* [ ] 5 ACI\u0027s, each running a containerized app that connects to the Crank-hosted Hub and starts sending messages\r\n\r\nThing to be done (team, please augment, let\u0027s **write it down**):\r\n\r\n* [ ] @bradygaster to write a bicep template to create the VM and other Azure resources\r\n* [ ] @bradygaster to send a PR for the bicep file once it\u0027s creating resources properly \r\n* [ ] tbd to provide a sample server and client project to do the work\r\n* [ ] tbd (probably @bradygaster) to write script that installs/configures/runs the Crank server on the VM\r\n* [ ] tbd (probably @bradygaster) to write script that builds the docker images and publishes them to ACR and fires up the ACI instances so they can turn the crank\r\n* [ ] tbd to provide other items @bradygaster forgot or omitted here",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "Priority:1"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85MAZhl",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:28:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/37909#issuecomment-1275172965"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde84-SNUz",
    "title": "SignalR TypeScript Client -HubConnectionBuilder - ILogger is not replaced when using build()",
    "url": "https://github.com/dotnet/aspnetcore/issues/38084",
    "createdAt": "2021-11-04T16:31:52Z",
    "lastUpdated": "2024-03-02T00:51:44Z",
    "body": "### Describe the bug\r\n\r\nWhen using the SignalR clients HubConnectionBuilder, under certain circumstances the configured ILogger is ignored.\r\n\r\n### To Reproduce\r\n\r\n\u0060\u0060\u0060ts\r\nconst hubConnectionBuilder = new HubConnectionBuilder();\r\n\r\n....\r\n\r\nconst hubConnection1: signalR.HubConnection = this.hubConnectionBuilder\r\n    .withUrl(..., { ... })\r\n    .configureLogging(new Logger(...))\r\n    .build();\r\n\r\nconst hubConnection2: signalR.HubConnection = this.hubConnectionBuilder\r\n    .withUrl(..., { ... }),\r\n    .configureLogging(new Logger(...))\r\n    .build();\r\n\u0060\u0060\u0060\r\n\r\nIn this scenario the logger configured for the first connection will be reused for the second one.\r\n\r\n\u0060\u0060\u0060ts\r\nconst hubConnectionBuilder = new HubConnectionBuilder();\r\n\r\n....\r\n\r\nconst hubConnection1: signalR.HubConnection = this.hubConnectionBuilder\r\n    .withUrl(..., { ..., logger: new Logger(...) })\r\n    .build();\r\n\r\nconst hubConnection2: signalR.HubConnection = this.hubConnectionBuilder\r\n    .withUrl(..., { ..., logger: new Logger(...) })\r\n    .build();\r\n\u0060\u0060\u0060\r\n\r\nIn this scenario the logger configured for the first connection will be different than the one configured for the second connection.\r\n\r\nIt has to do with these lines:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/c440ebcf49badd49f0e2cdde1b0a74992af04158/src/SignalR/clients/ts/signalr/src/HubConnectionBuilder.ts#L130-L137\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/c440ebcf49badd49f0e2cdde1b0a74992af04158/src/SignalR/clients/ts/signalr/src/HubConnectionBuilder.ts#L196-L199\r\n\r\nSince a previous connection was created, the  **httpConnectionOptions**will be populated with the previous logger. Since this logger is already configured, explicitly configuring a new one will fail because the only situation in which the logger is assigned is if the **httpConnectionOptions** had no log configured. However, since the previous  **httpConnectionOptions**are combined into the new ones when **withUrl** is used, then it is not possible to change the logger anymore.\r\n",
    "upvotes": 0,
    "labels": [
      "bug",
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde845TFgY",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "Triage:  We will re-assess whether we will allow to re-use \u0060HubConnectionBuilder\u0060  for .NE7. \r\n\r\nsee the following issue: https://github.com/dotnet/aspnetcore/issues/11567",
        "createdAt": "2021-11-04T18:23:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38084#issuecomment-961304600"
      },
      {
        "id": "IC_kwDOAQzde845TMDA",
        "parentId": null,
        "author": "nuno-tiago-reis",
        "content": "Does that still apply seeing as this is for the TypeScript client?",
        "createdAt": "2021-11-04T18:59:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38084#issuecomment-961331392"
      },
      {
        "id": "IC_kwDOAQzde845TUne",
        "parentId": null,
        "author": "halter73",
        "content": "#11567 is for the .NET client, but we cross-referenced to point out the current behavior is different from the TS client. This could be used as evidence that allowing builder reuse is error prone and a reason not to allow it in .NET.\r\n\r\nWe could *consider* not allowing reuse in the TS client as well, but that\u0027d obviously be a breaking change. I think we shouldn\u0027t make a breaking change and fix the bug.\r\n\r\n",
        "createdAt": "2021-11-04T19:50:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38084#issuecomment-961366494"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde84-iAd5",
    "title": "[Feature Request] SignalR response compression with new websockets compression in Asp.Net Core 6",
    "url": "https://github.com/dotnet/aspnetcore/issues/38230",
    "createdAt": "2021-11-09T20:40:02Z",
    "lastUpdated": "2024-03-02T00:51:44Z",
    "body": "\u003C!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003E\r\n\r\n### Please describe.\r\n\r\nResponse compression, not much else to say there. It\u0027s pretty necessary for mobile devices and the like. Especially in data-intensive scenarios.\r\n\r\nA 8MB JSON response being compressed down to 700KB is nearly required for mobile devices.\r\n\r\nAsp.Net Core 6 seems to have shipped with [websockets compression support](https://devblogs.microsoft.com/dotnet/announcing-net-6/#websocket-compression) (#2715),  will signalR be taking advantage of this?\r\n",
    "upvotes": 16,
    "labels": [
      "Needs: Design",
      "area-signalr",
      "Priority:3"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde845kC_u",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "Triage: we should discuss this further. We\u0027d either need to modify our abstractions to support this, or just have a global option to enable compression on the transport. There are tradeoffs to consider here so it would require more design/discussion.\r\n\r\n@douglasg14b You may also want to take a look at https://docs.microsoft.com/aspnet/core/signalr/messagepackhubprotocol?view=aspnetcore-6.0",
        "createdAt": "2021-11-10T21:14:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38230#issuecomment-965750766"
      },
      {
        "id": "IC_kwDOAQzde845kmEb",
        "parentId": null,
        "author": "douglasg14b",
        "content": "@adityamandaleeka \n\nThanks for the response!\n\nA glance at that page shows that MessagePack would produce smaller responses than JSON, however, it doesn\u0027t mention actually compressing the responses? I\u0027m guessing it\u0027s because it saves on syntax?\n\nIn my case at least, the response size is because of repetitive data that compresses pretty well (coordinates and the like).\n\nI look forward to hearing more.",
        "createdAt": "2021-11-11T00:51:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38230#issuecomment-965894427"
      },
      {
        "id": "IC_kwDOAQzde845kycf",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "@douglasg14b In the doc I linked above, there\u0027s a part that says:\r\n\r\n\u003E To customize how MessagePack formats data, \u0060AddMessagePackProtocol\u0060 takes a delegate for configuring options. In that delegate, the \u0060SerializerOptions\u0060 property is used to configure MessagePack serialization options. For more information on how the resolvers work, visit the MessagePack library at [MessagePack-CSharp](https://github.com/neuecc/MessagePack-CSharp). Attributes can be used on the objects you want to serialize to define how they should be handled.\r\n\r\nThere\u0027s some example code there too for how the configuration might look.\r\n\r\nThat MessagePack-CSharp repo shows more info about configuration options, including the option to enable LZ4 compression: https://github.com/neuecc/MessagePack-CSharp#lz4-compression\r\n",
        "createdAt": "2021-11-11T02:57:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38230#issuecomment-965945119"
      },
      {
        "id": "IC_kwDOAQzde845nfn_",
        "parentId": null,
        "author": "douglasg14b",
        "content": "Gotcha, the doc could be a bit clearer then, I \u0060Ctrl\u002BF\u0060 for \u0060compression\u0060 and didn\u0027t find any hits, and the above quote doesn\u0027t allude to it either unless you already have prior knowledge of messagepack configuration.\r\n\r\nEither way, thanks for the info.",
        "createdAt": "2021-11-11T21:57:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38230#issuecomment-966654463"
      },
      {
        "id": "IC_kwDOAQzde85CQ_nL",
        "parentId": null,
        "author": "luryus",
        "content": "We also have a SignalR application that would greatly benefit from message compression. Unfortunately the MessagePack LZ4 compression is specific to the MessagePack-CSharp library and as far as I know, it does not work with JavaScript SignalR clients.\r\n(https://stackoverflow.com/questions/65087721/net-5-signalr-messagepack-lz4-error-unable-to-find-ext-type-98)\r\n\r\n\u003E We\u0027d either need to modify our abstractions to support this, or just have a global option to enable compression on the transport.\r\n\r\nCouldn\u0027t compression support just be configured in the hub specific Websocket options? Maybe something like this:\r\n\u0060\u0060\u0060csharp\r\nendpoints.MapHub\u003CSampleHub\u003E(\u0022/samplehub\u0022, opts =\u003E\r\n{\r\n    opts.WebSockets.EnableCompression = true;\r\n});\r\n\u0060\u0060\u0060",
        "createdAt": "2022-04-28T05:08:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38230#issuecomment-1111751115"
      },
      {
        "id": "IC_kwDOAQzde85DDkS-",
        "parentId": null,
        "author": "nicolasmohamed",
        "content": "Hi @adityamandaleeka any news regarding SignalR websockets compression?\r\n\r\nThanks",
        "createdAt": "2022-05-12T13:39:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38230#issuecomment-1125008574"
      },
      {
        "id": "IC_kwDOAQzde85Keigj",
        "parentId": null,
        "author": "kolesnick",
        "content": "Vote \u002B for this one, because SignalR \u002B MessagePack doesn\u0027t work in Unity projects involving IL2CPP.",
        "createdAt": "2022-09-16T15:43:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38230#issuecomment-1249519651"
      },
      {
        "id": "IC_kwDOAQzde85MAZl5",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:28:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38230#issuecomment-1275173241"
      },
      {
        "id": "IC_kwDOAQzde85R9EGW",
        "parentId": null,
        "author": "douglasg14b",
        "content": "Hi, even if this won\u0027t be natively supported is there a recommended API surface area with the JS client and C# server to transparently compress/decompress data?\r\n\r\nIt seems like we can compress all responses with a \u0060Filter\u0060 on the C# side, but on the JS side how can we run every call through a decompression function of our own writing? Can we inject some code between the call \u0026 the routing to a function JS side? Without building our own micro-framework client-side.\r\n\r\n",
        "createdAt": "2023-01-08T23:44:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38230#issuecomment-1374962070"
      },
      {
        "id": "IC_kwDOAQzde85ZaHBi",
        "parentId": null,
        "author": "luryus",
        "content": "Any chance this could still be included in .NET 8?\r\n\r\nI just prototyped the SignalR changes required here, and they are quite minimal. Only one new boolean flag has to be added to \u0060WebSocketOptions\u0060: https://github.com/luryus/aspnetcore/commit/cef2a7b25f0081b41e36e67c1d707af97c572a1a \r\n\r\nWith this enabled the JS SignalR library just automatically changes to use compressed messages. With the C# client some additional configuration is needed, but it can already be done with the current library version.\r\n\r\nCost:L seems a bit excessive? Or am I missing some considerations here?\r\n\r\n@adityamandaleeka \r\n",
        "createdAt": "2023-04-07T07:19:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38230#issuecomment-1500016738"
      },
      {
        "id": "IC_kwDOAQzde85ZbnSO",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "https://devblogs.microsoft.com/dotnet/announcing-net-6/#websocket-compression:\r\n\u003E Compression used with encryption may lead to attacks, like [CRIME](https://en.wikipedia.org/wiki/CRIME) and [BREACH](https://en.wikipedia.org/wiki/BREACH). It means that a secret cannot be sent together with user-generated data in a single compression context, otherwise that secret could be extracted. To bring a user\u2019s attention to these implications and help them weigh the risks, we named one of the key APIs DangerousDeflateOptions. We also added the ability to turn off compression for specific messages, so if the user would want to send a secret, they could do that securely without compression.\r\n\r\nThe reason it\u0027s marked \u0060Cost:L\u0060 is because we would want to enable the ability to turn off compression per message to avoid CRIME and BREACH attacks on sensitive data. Just having a global on switch without the option to turn it off is not good. Additionally, it looks like browsers don\u0027t even support per message opt-out of compression which makes it even more dangerous to enable this feature without some consideration for preventing browsers from using compression.\r\n\r\nOther thoughts; should pings be compressed? They are only 11 bytes in json, 3 bytes in msgpack. How much would the message actually be compressed? Is the cpu cost worth the small size savings? Should we also compress other small messages or find some threshold where we think it becomes useful to compress the message?",
        "createdAt": "2023-04-07T15:55:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38230#issuecomment-1500411022"
      },
      {
        "id": "IC_kwDOAQzde85aAwg7",
        "parentId": null,
        "author": "douglasg14b",
        "content": "@BrennanConroy Couldn\u0027t we have 1st party layer 6 compression support instead? Which provides the benefits for most, and avoids both the issue you described, and browser compatibility problems?\r\n\r\n",
        "createdAt": "2023-04-16T07:43:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38230#issuecomment-1510148155"
      },
      {
        "id": "IC_kwDOAQzde85aJhdR",
        "parentId": null,
        "author": "luryus",
        "content": "\u003E The reason it\u0027s marked Cost:L is because we would want to enable the ability to turn off compression per message to avoid CRIME and BREACH attacks on sensitive data. Just having a global on switch without the option to turn it off is not good. \r\n\r\nI get your point, and those are certainly valid considerations. \r\n\r\nHowever, I feel that not exposing the compression feature unnecessarily closes out many valid and secure use cases for SignalR. In our case, we\u0027re using it to stream a lot of structural, well-compressing data over websockets. There\u0027s nothing sensitive in the messages so CRIME, BREACH etc. do not really apply. And the compression overhead for pings etc. would be negligible.\r\n\r\nWe\u0027re currently working around this by compressing the data manually before sending, and decompressing it in the browser using a JavaScript library. This technically works, but it\u0027s a bit of an awkward and suboptimal solution when there\u0027s already native support for compression both in the browser and the server.\r\n\r\nWouldn\u0027t it be sufficient to just have the field name clearly indicate that enabling the compression might cause security issues in some scenarios (DangerousEnableCompression)? That way the SignalR applications could make the decision based on their own usage patterns and take advantage of the existing features for compression. This would be an awesome first step while the more granular options are designed and implemented some time later.\r\n\r\nFWIW SignalR already can do message compression with long-polling if the ResponseCompression middleware is enabled. I could see the websocket compression as a similar feature to this: compression can be used if the user explicitly enables the compression and bypasses all the \u0022dangerous\u0022 warnings.",
        "createdAt": "2023-04-18T05:13:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38230#issuecomment-1512445777"
      },
      {
        "id": "IC_kwDOAQzde85mYxDS",
        "parentId": null,
        "author": "claudiuciumedean",
        "content": "I was wondering what is the status of this, of course I can still see that feature request is still open but is there any plan on implementing and shipping it in the foreseeable future (perhaps in a minor version of .NET 8)?\r\n\r\nI am asking since we are currently using SignalR for our WS communication and doing our own custom compression / decompression of messages, and would benefit greatly if SignalR implemented it as in the case of plain .NET WS implementation by using \u0060DangerousEnableCompression\u0060 flag.\r\n",
        "createdAt": "2023-09-13T14:40:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38230#issuecomment-1717768402"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde84-qEIW",
    "title": "ASP.NET Core SignalR - SkipNegotiation by default and use Negotiation if WebSocket connection fails.",
    "url": "https://github.com/dotnet/aspnetcore/issues/38300",
    "createdAt": "2021-11-11T17:40:03Z",
    "lastUpdated": "2024-03-02T00:51:45Z",
    "body": "We are using ASP.NET Core SingalR for real time communication in our application.\r\n90% of our web clients use WebSocket transport. By default, we don\u0027t SkipNegotiation.\r\nIf a client cannot connect using WebSocket then it can fall back to other protocols\r\nfor which Negotiate request is required. Even for the 90% percent of the clients\r\nusing WebSocket transport, two requests, negotiate, connect are required to establish a WebSocket connection. \r\nWe can improve the experience of these clients by establishing the connection in one request\r\nby skipping negotiate request.\r\n\r\nIt will be nice if the libraries can provide the feature where by default they SkipNegotiation \r\nand use WebSocket transport. If the connection is established, then we are good.\r\nIf the connection fails, then library can try to create new connection without skipping Negotiation.",
    "upvotes": 5,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde845nDF7",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "We will not default to enabling \u0060SkipNegotiation\u0060 as that would add an extra unneeded WebSocket request in scenarios such as [Azure SignalR Service](https://azure.microsoft.com/services/signalr-service/).\r\n\r\nChanging the behavior of \u0060SkipNegotiation\u0060 to allow fallback if WebSockets fails is an interesting idea.\r\n\r\nCurrently we require you to explicitly specify WebSockets on the client side when using \u0060SkipNegotiation\u0060, if we changed it so you could choose not to specify the transport then we could try WebSockets without negotiation and fallback to negotiating if it fails.\r\n\r\nThis would change the meaning of \u0060SkipNegotiation\u0060 to \u0022TrySkipNegotiation\u0022 which might be ok? The only reason I can find in the original design for needing to specify WebSockets is a comment about users might file an issue if they see a negotiate with the setting set https://github.com/aspnet/SignalR/pull/2070#discussion_r182502822. Which isn\u0027t a huge issue, especially if we put doc comments on the setting and have a log if we fallback with the setting set.\r\n\r\nFortunately, if we did this change it wouldn\u0027t break any existing apps because they are all required to specify the WebSocket transport already. And the behavior of not trying other transports if you specify a specific one won\u0027t change if we modify the behavior as proposed.\r\n\r\nWe\u0027ll need to think about this a little to see if there are any other downsides.",
        "createdAt": "2021-11-11T18:41:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38300#issuecomment-966537595"
      },
      {
        "id": "IC_kwDOAQzde846s55v",
        "parentId": null,
        "author": "alteut",
        "content": "Also, am I correct in thinking, that, in the meantime, we can implement this logic client-side?",
        "createdAt": "2021-12-02T17:39:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38300#issuecomment-984850031"
      },
      {
        "id": "IC_kwDOAQzde85CsPAq",
        "parentId": null,
        "author": "Aloento",
        "content": "TrySkipNegotiation is better:\r\nFirst, try WebSocket,\r\nthen, fallback to another protocol or do the negotiation.\r\nThis will greatly improve SignalR\u0027s connection establishment speed.",
        "createdAt": "2022-05-05T18:04:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38300#issuecomment-1118892074"
      },
      {
        "id": "IC_kwDOAQzde85KftCl",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Didn\u0027t get to this in .NET 7, but definitely still interested.",
        "createdAt": "2022-09-16T21:17:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38300#issuecomment-1249824933"
      },
      {
        "id": "IC_kwDOAQzde85KftEg",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-09-16T21:17:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38300#issuecomment-1249825056"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde84_SVer",
    "title": "signalr different \u0022backends\u0022 for different hubs",
    "url": "https://github.com/dotnet/aspnetcore/issues/38611",
    "createdAt": "2021-11-23T22:28:41Z",
    "lastUpdated": "2024-07-29T03:21:55Z",
    "body": "### Is your feature request related to a problem? Please describe.\r\nwith the rise of blazor server side it would be a good idea to also have the ability to configure different \u0022backends\u0022 for signalr.\r\ni.e. consider the following:\r\nChatHub -\u003E Redis\r\nBlazor Memory (Stick Sessions)\r\n\r\nthus it would make scaling a little bit easier, especially combining the two.\r\n\r\n\r\n### Describe the solution you\u0027d like\r\nprobably have something like:\r\n\u0060AddSignalR(\u0022Chat\u0022).AddStackExchangeRedis()\u0060\r\nand than:\r\n\u0060app.MapHub\u003CDemoHub\u003E(\u0022/Chart\u0022, options =\u003E {}, \u0022Chat\u0022);\u0060\r\n\r\nof course syntax can be different.\r\n\r\n**Edit:**\r\n\r\nmaybe as an information, this is basically already possible \u0022somewhat\u0022, but it\u0027s probably not known that much via:\r\n\r\n\u0060\u0060\u0060\r\n.AddSingleton(typeof(HubLifetimeManager\u003CHubClass\u003E), typeof(RedisHubLifetimeManager\u003CHubClass\u003E)\r\n\u0060\u0060\u0060\r\n\r\nof course this probably makes the syntax like: \u0060AddSignalR(\u0022Chat\u0022).AddHubBackend\u003CHubClass\u003E(options =\u003E options.UseStackExchangeRedis()))\u0060 probably a good idea\r\n",
    "upvotes": 1,
    "labels": [
      "Needs: Design",
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde846Tlrz",
        "parentId": null,
        "author": "davidfowl",
        "content": "Seems reasonable. Something like \u0060AddRedis\u003CTHub\u003E\u0060 (and an overload for adding the default impl per hub) Like all of our other APIs, it should be based on the hub type. The other thing to consider is the RedisOptions might need to have a generic version as a result so you can configure these per hub.",
        "createdAt": "2021-11-24T20:55:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38611#issuecomment-978213619"
      },
      {
        "id": "IC_kwDOAQzde846iIoX",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2021-11-29T21:11:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38611#issuecomment-982026775"
      },
      {
        "id": "IC_kwDOAQzde846iJCp",
        "parentId": null,
        "author": "halter73",
        "content": "FWIW, @BrennanConroy was discussing this in triage and does not think \u0060.AddStackExchangeRedis()\u0060 should affect server-side Blazor connections. Those should always use the default in-memory HubLifetimeManager.",
        "createdAt": "2021-11-29T21:13:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38611#issuecomment-982028457"
      },
      {
        "id": "IC_kwDOAQzde86GZop0",
        "parentId": null,
        "author": "boreys",
        "content": "This sounds like Blazor app cannot be scaled horizontally because of this in-memory HubLifetimeManager",
        "createdAt": "2024-07-29T03:21:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/38611#issuecomment-2254867060"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Agb5X",
    "title": "Intercept HTTP errors in SignalR JavaScript Client",
    "url": "https://github.com/dotnet/aspnetcore/issues/39079",
    "createdAt": "2021-12-16T14:13:26Z",
    "lastUpdated": "2024-03-02T00:51:45Z",
    "body": "This is more of a question then a issue. \r\nI\u0027m using the @microsoft/signalr (v.6.0.0) javascript client in my Vue project. \r\nThis is my Connection Builder\r\n\r\n\u0060client = new HubConnectionBuilder()\r\n  .withUrl(\u0027/chat\u0027, { accessTokenFactory: () =\u003E IdService.getToken() })\r\n  .configureLogging(LogLevel.None)\r\n  .withAutomaticReconnect()\r\n  .build()\u0060\r\n\r\nLater when I start the connection:\r\n\u0060client.start().then(() =\u003E {\r\n      console.log(\u0027Connected\u0027)\r\n    }).catch((err) =\u003E {\r\n      console.error(err)\r\n    })\u0060\r\n\r\nWhat I would like to do is, if there is a error in the moment of starting the connection, I would like to know the HTTP status code from the catched error. Like this:\r\n\u0060client.start().then(() =\u003E {\r\n      console.log(\u0027Connected\u0027)\r\n    }).catch((err) =\u003E {\r\n      console.error(err.response.status)\r\n    })\u0060\r\n\r\nThe problem is, the error that is getting catched is only a string. Of course I could filter the status code from the string but that seems wrong. \r\nSo my question is, is there any way or method to get the error codes?",
    "upvotes": 1,
    "labels": [
      "enhancement",
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde8473UzG",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "We sometimes throw an [HttpError](https://github.com/dotnet/aspnetcore/blob/c41741805eadf18986a4182f7fe7fd137318f691/src/SignalR/clients/ts/signalr/src/Errors.ts#L7) which has the status code included in it. There might be some improvements we can do here to more consistently throw those errors though.\r\n\r\nWhat specific error are you getting back?",
        "createdAt": "2022-01-03T21:06:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39079#issuecomment-1004358854"
      },
      {
        "id": "IC_kwDOAQzde8473cuz",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "@BrennanConroy After doing a little bit of research, I think there are places where we may need to consider returning an error type with both the message and status code. One of those areas could be during the actual connection negotiation.  See the following area.  Notice that when we get a status code that\u0027s not 200, we reject the promise with the vanilla js \u0060Error\u0060 class. \r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/c41741805eadf18986a4182f7fe7fd137318f691/src/SignalR/clients/ts/signalr/src/HttpConnection.ts#L331\r\n\r\n\u0060\u0060\u0060 JS\r\n  Promise.reject(new Error(\u0060error message ${statusCode}\u0060));\r\n\u0060\u0060\u0060\r\nWe might consider rejecting with a complex Errror Type Object that allows setting both the status code and the error message as you have mentioned above.  There are, however, numerous places to change. \r\n\r\n\u0060\u0060\u0060js\r\n     Promise.reject(new HttpError(\u0022error message\u0022,  statusCode));\r\n\u0060\u0060\u0060",
        "createdAt": "2022-01-03T22:08:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39079#issuecomment-1004391347"
      },
      {
        "id": "IC_kwDOAQzde8474iR0",
        "parentId": null,
        "author": "Wwwolfgang",
        "content": "In my case I was getting an error with 401 error code, because my Bearer Token was expired on the backend. But if I want to react properly to the error in the frontend, my only option is to check if the error string contains \u0027401\u0027 and proceed from there. And checking for a error code in a string feels wrong. ",
        "createdAt": "2022-01-04T10:07:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39079#issuecomment-1004676212"
      },
      {
        "id": "IC_kwDOAQzde8475zTB",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-04T17:07:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39079#issuecomment-1005008065"
      },
      {
        "id": "IC_kwDOAQzde84_Oz3k",
        "parentId": null,
        "author": "flensrocker",
        "content": "I would also like to intercept \u0022401 Unauthorized\u0022 in my Angular app, because I then show a login dialog and after that retry the request. A proper status code in the error object would be great!\r\n\r\nThanks!",
        "createdAt": "2022-03-07T16:00:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39079#issuecomment-1060847076"
      },
      {
        "id": "IC_kwDOAQzde85MAZnq",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:28:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39079#issuecomment-1275173354"
      },
      {
        "id": "IC_kwDOAQzde85UqX97",
        "parentId": null,
        "author": "JunkyXL86",
        "content": "How do people deal with errors at the moment? Is there an alternative solution that does not require parsing the status code?",
        "createdAt": "2023-02-07T08:40:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39079#issuecomment-1420394363"
      },
      {
        "id": "IC_kwDOAQzde85WMLTq",
        "parentId": null,
        "author": "NechiK",
        "content": "@JunkyXL86 I\u0027m using the next temporary approach. That\u0027s only way I came up with )\r\n\r\n\u0060\u0060\u0060\r\nif (error.message \u0026\u0026 error.message.includes(\u0060Status code \u0027401\u0027\u0060)) {\r\n  this.authService.refreshToken().subscribe();\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2023-02-27T09:58:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39079#issuecomment-1446032618"
      },
      {
        "id": "IC_kwDOAQzde85saSEz",
        "parentId": null,
        "author": "NechiK",
        "content": "I just installed @microsoft/signalR version 8 and the connection still doesn\u0027t return status codes for the 401 connection error.",
        "createdAt": "2023-11-20T11:00:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39079#issuecomment-1818829107"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Bmgty",
    "title": "Feature request for SignalR: IHubClients.UsersExceptClients()",
    "url": "https://github.com/dotnet/aspnetcore/issues/39462",
    "createdAt": "2022-01-12T17:36:39Z",
    "lastUpdated": "2022-01-12T21:08:50Z",
    "body": "I have the following setup:\r\n\r\nWhen a new browser connects to my SignalR hub, I register it by user id with a custom \u0060IUserIdProvider\u0060.\r\n\r\nThen, when a user sends a message in a chat, this hits one of my API endpoints that then calls the SignalR hub to send a message by \u0060hub.Clients.Users(chatParticipants).SendAsync(...)\u0060. This should send a message to all users, including the one that sent the message, because the user could have the chat open on several devices, and this allows their other devices to get the chat message.\r\n\r\nThe problem is that I\u0027d like to avoid sending the chat message to the specific original client/device that sent the message. Since most chat messages are between two users in the system, this would cut my message send by almost half if I could do this. This could be achieved with a method \u0060IHubClients.UsersExceptClients()\u0060, which would let me specify what users to send to (where each user can have several clients) but to exclude a specific client (and I\u0027d send in the connection id from the client side to the server for this purpose).\r\n\r\nIs it possible to add this feature?",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde848SYw4",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-12T21:08:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39462#issuecomment-1011452984"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85B7dnF",
    "title": "SignalR support for webtransport",
    "url": "https://github.com/dotnet/aspnetcore/issues/39583",
    "createdAt": "2022-01-17T17:24:18Z",
    "lastUpdated": "2024-05-24T16:23:56Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nOn the server side, do websockets create more mux overhead than UDP?  If so, does this make a good argument for having Blazor support Webtransport?  It appears Webtransport just went GA in Chrome a couple weeks ago?  Does this mean Edge will follow soon?\r\n\r\nhttps://developer.chrome.com/blog/new-in-chrome-97/#webtransport\r\n\n\n### Describe the solution you\u0027d like\n\nIn the same way client side websocket can be used in Blazor, I would also like to use Webtransport client side connections.\n\n### Additional context\n\n_No response_",
    "upvotes": 12,
    "labels": [
      "investigate",
      "area-signalr",
      "Blazor \u2665 SignalR",
      "HTTP3",
      "area-networking"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde848g_uV",
        "parentId": null,
        "author": "javiercn",
        "content": "@unicomp21 thanks for contacting us.\r\n\r\nWe use SignalR, so we would only use this transport if SignalR supported it and we deemed worth it.\r\n\r\nThe very likely answer is that it is very unlikely that we would use something based on UDP. We rely on many TCP features like ordering and flow control which we would need to reimplement if we were using UDP.",
        "createdAt": "2022-01-18T10:37:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1015282581"
      },
      {
        "id": "IC_kwDOAQzde848hJ6X",
        "parentId": null,
        "author": "unicomp21",
        "content": "I believe WebTransport also supports ordering?  Isn\u0027t there an option for it?  Starting to realize I could really use some help from @nibanks, on the quic team, to explain why there might be a compelling argument for supporting WebTransport.  Correct me if I\u0027m wrong, doesn\u0027t every tcp/websocket connection lock up resources (ie like memory for send/recv buffers) on the kernel side?  I\u0027ve also seen benchmarks where latency increases as the number of tcp connections, which the kernel must multiplex, moves into the thousands.  With webtransport, as opposed to to websocket, I believe it\u0027s a single udp socket and the rest (ie per connection data structures) gets handled in user space.  Incredibly efficient.",
        "createdAt": "2022-01-18T11:32:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1015324311"
      },
      {
        "id": "IC_kwDOAQzde848hUab",
        "parentId": null,
        "author": "nibanks",
        "content": "@javiercn WebTransport is based on HTTP/3, which is based on QUIC (for .NET, [MsQuic](https://github.com/microsoft/msquic)), which is on UDP. IMO, any HTTP/3 stack should eventually support WebTransport, as it seems to be the way the industry is going.",
        "createdAt": "2022-01-18T12:33:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1015367323"
      },
      {
        "id": "IC_kwDOAQzde848hVUE",
        "parentId": null,
        "author": "unicomp21",
        "content": "https://developer.chrome.com/blog/new-in-chrome-97/#webtransport\r\n\r\nI\u0027m guessing this means Edge, which is based on chromium?  Will follow shortly?\r\n",
        "createdAt": "2022-01-18T12:38:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1015371012"
      },
      {
        "id": "IC_kwDOAQzde848hVtY",
        "parentId": null,
        "author": "nibanks",
        "content": "\u003E I\u0027m guessing this means Edge, which is based on chromium? Will follow shortly?\r\n\r\nYes, Edge is generally in sync with Chrome for features like this.",
        "createdAt": "2022-01-18T12:40:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1015372632"
      },
      {
        "id": "IC_kwDOAQzde848hXJw",
        "parentId": null,
        "author": "javiercn",
        "content": "@nibanks that\u0027s fair, but in the context of Blazor its completely abstracted by SignalR, so provided its exposed by SignalR and satisfies the ordering and reliability constraints Blazor Server requires, then it can be used, but in any case, this will be something transparent to Blazor, since it\u0027s configured on the SignalR Hub.\r\n\r\n@unicomp21 Feel free to file a specific issue for support for this transport in SignalR instead.",
        "createdAt": "2022-01-18T12:48:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1015378544"
      },
      {
        "id": "IC_kwDOAQzde848hXmv",
        "parentId": null,
        "author": "unicomp21",
        "content": "@javiercn apologies, I was confused earlier.  This isn\u0027t a Blazor specific feature.  It would be for Aspnet in general, both server and client sides.  Any place there is websocket support, the intention would be to also have webtransport support.",
        "createdAt": "2022-01-18T12:51:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1015380399"
      },
      {
        "id": "IC_kwDOAQzde848hX8-",
        "parentId": null,
        "author": "unicomp21",
        "content": "I renamed the issue \u0022Blazor\u0022 -\u003E \u0022Aspnet\u0022.",
        "createdAt": "2022-01-18T12:53:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1015381822"
      },
      {
        "id": "IC_kwDOAQzde848hdIG",
        "parentId": null,
        "author": "campersau",
        "content": "See also https://github.com/dotnet/aspnetcore/issues/12040",
        "createdAt": "2022-01-18T13:17:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1015403014"
      },
      {
        "id": "IC_kwDOAQzde848nEAp",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "We released HTTP/3 support as an experimental feature in .NET 6 and are working to make it non-experimental in 7. As we do that, we should evaluate what, if any, support we\u0027ll need to add for WebTransport.\r\n\r\nMoving this to the .NET 7 milestone just for that investigation/groundwork. We don\u0027t actually plan to ship WebTransport support in .NET 7.\r\n",
        "createdAt": "2022-01-19T21:12:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1016873001"
      },
      {
        "id": "IC_kwDOAQzde848nLHS",
        "parentId": null,
        "author": "Tratcher",
        "content": "https://datatracker.ietf.org/doc/html/draft-ietf-webtrans-http3/#section-2\r\n\r\n\u003E    When an HTTP/3 connection is established, both the client and server\r\n   have to send a SETTINGS_ENABLE_WEBTRANSPORT setting in order to\r\n   indicate that they both support WebTransport over HTTP/3.\r\n\r\nThis would require support in our HTTP/3 implementation.",
        "createdAt": "2022-01-19T21:55:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1016902098"
      },
      {
        "id": "IC_kwDOAQzde848nWLd",
        "parentId": null,
        "author": "unicomp21",
        "content": "@nibanks ^",
        "createdAt": "2022-01-19T22:57:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1016947421"
      },
      {
        "id": "IC_kwDOAQzde848nXjR",
        "parentId": null,
        "author": "nibanks",
        "content": "@unicomp21 that\u0027s a job for the .NET HTTP/3 folks, not MsQuic \uD83D\uDE04 ",
        "createdAt": "2022-01-19T23:07:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1016953041"
      },
      {
        "id": "IC_kwDOAQzde848pPu9",
        "parentId": null,
        "author": "unicomp21",
        "content": "Lol, so many new layers, I get confused! \uD83D\uDE04",
        "createdAt": "2022-01-20T12:26:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1017445309"
      },
      {
        "id": "IC_kwDOAQzde8485cSO",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-01-25T23:05:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1021691022"
      },
      {
        "id": "IC_kwDOAQzde849Anmf",
        "parentId": null,
        "author": "wegylexy",
        "content": "For Blazor SignalR, it requires the browser runtime to use \u0060WebTransport\u0060 and the server to enable that with HTTP Datagram support in the settings frame in the HTTP/3 control stream.\r\nWith a custom fork of .NET 6 exposing the QUIC API, I am able to make the server send \u0060new byte[]{0, 4, 10, 0x80, 0xFF, 0xD2, 0x77, 1, 0xAB, 0x60, 0x37, 0x42, 1}\u0060 to enable WebTransport and HTTP Datagram. Then it needs to parse the QPACK-compressed CONNECT request in the request stream and responds with status 200.\r\nThe problem is, both QUIC API and QPACK helper classes are \u0060internal\u0060. I am dealing with the QUIC connection directly since there is no way to customize the one in Kestral. Moreover, I have to tweak the \u0060msquic\u0060 wrapper to support older versions of Windows.\r\n\r\nSo, I wish .NET expose QUIC API and HTTP/3 helper classes as public APIs or separate nuget packages such that we don\u0027t have to wait until November and a big Visual Studio update for .NET 7.",
        "createdAt": "2022-01-27T19:36:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1023572383"
      },
      {
        "id": "IC_kwDOAQzde849CuOD",
        "parentId": null,
        "author": "unicomp21",
        "content": "@wegylexy does anything prevent us from simply forking the repo?",
        "createdAt": "2022-01-28T11:25:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1024123779"
      },
      {
        "id": "IC_kwDOAQzde849CufP",
        "parentId": null,
        "author": "unicomp21",
        "content": "@nibanks if we forked .net http/3 stack to make the webtransport changes, what are the downsides?\r\n",
        "createdAt": "2022-01-28T11:27:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1024124879"
      },
      {
        "id": "IC_kwDOAQzde849DA5v",
        "parentId": null,
        "author": "wegylexy",
        "content": "I am not familiar with building the SDK/runtime itself, so I am using the same namespace in my assembly to override the classes and add datagram support. There may be name conflicts when the official API becomes \u0060public\u0060 in .NET 7.\r\nThe current QPACK handling seems incomplete. I hard-coded \u0060new byte[] { 1, 0x1F, 0, 0, 0xD9, 0x2F, 0x0D, 0x41, 0x48, 0xB7, 0x82, 0xC6, 0x9B, 0x07, 0x52, 0x2B, 0x3D, 0x89, 0x5A, 0x74, 0xA6, 0xB6, 0x56, 0x92, 0xC1, 0xCA, 0x9F, 0x85, 0x92, 0xC1, 0xCA, 0x90, 0x0B }\u0060 to the request stream in response to the CONNECT request for \u0060:status 200\u0060 and \u0060sec-webtransport-http3-draft draft02\u0060 regardless of which draft versions are being negotiated by the user agent.",
        "createdAt": "2022-01-28T13:08:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1024200303"
      },
      {
        "id": "IC_kwDOAQzde849DGJf",
        "parentId": null,
        "author": "nibanks",
        "content": "@unicomp21 I don\u0027t have the necessary expertise at the .NET layer to provide useful guidance, but ideally the best way forward would likely be to work with the .NET devs to add the functionality you need directly to .NET.",
        "createdAt": "2022-01-28T13:22:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1024221791"
      },
      {
        "id": "IC_kwDOAQzde85F4pMP",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "WebTransport is making great progress, but it\u0027s very unlikely SignalR will be able to make use of it in the short time left for 7.0. Moving to .NET 8 Planning.",
        "createdAt": "2022-07-01T15:43:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1172476687"
      },
      {
        "id": "IC_kwDOAQzde85OWiBi",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "An update on WebTransport status in .NET 7: https://devblogs.microsoft.com/dotnet/experimental-webtransport-over-http-3-support-in-kestrel/",
        "createdAt": "2022-11-14T23:12:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1314529378"
      },
      {
        "id": "IC_kwDOAQzde85OWnqH",
        "parentId": null,
        "author": "unicomp21",
        "content": "Thx!\n\nOn Mon, Nov 14, 2022 at 5:12 PM Aditya Mandaleeka ***@***.***\u003E\nwrote:\n\n\u003E An update on WebTransport status in .NET 7:\n\u003E https://devblogs.microsoft.com/dotnet/experimental-webtransport-over-http-3-support-in-kestrel/\n\u003E\n\u003E \u2014\n\u003E Reply to this email directly, view it on GitHub\n\u003E \u003Chttps://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1314529378\u003E,\n\u003E or unsubscribe\n\u003E \u003Chttps://github.com/notifications/unsubscribe-auth/AAEFL7M6JMVFT4DQI7X2EO3WILBOLANCNFSM5MFHAGSQ\u003E\n\u003E .\n\u003E You are receiving this because you were mentioned.Message ID:\n\u003E ***@***.***\u003E\n\u003E\n",
        "createdAt": "2022-11-14T23:39:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1314552455"
      },
      {
        "id": "IC_kwDOAQzde85p7QAx",
        "parentId": null,
        "author": "JohnGalt1717",
        "content": "Any updates on this for .net 8?",
        "createdAt": "2023-10-24T12:47:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1777139761"
      },
      {
        "id": "IC_kwDOAQzde85p8lk4",
        "parentId": null,
        "author": "BrennanConroy",
        "content": ".NET 8 is done, and the webtransport spec is still in draft mode. No updates.",
        "createdAt": "2023-10-24T15:30:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-1777490232"
      },
      {
        "id": "IC_kwDOAQzde85-7ans",
        "parentId": null,
        "author": "wave9d",
        "content": "Any updates on this ? ",
        "createdAt": "2024-05-24T13:12:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-2129504748"
      },
      {
        "id": "IC_kwDOAQzde85-9Enr",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "No, webtransport is still in draft mode. And even if it wasn\u0027t, this would require a massive amount of work to \u0022properly\u0022 make use of webtransport in SignalR.\r\n\r\nThere is the simpler approach of just adding it as another transport that works exactly like the other transports, but this wouldn\u0027t make use of webtransport streams, which is a great feature webtransport provides that we _should_ make use of. e.g. Streaming hub methods on a separate stream.",
        "createdAt": "2024-05-24T16:23:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39583#issuecomment-2129938923"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85C-D0N",
    "title": "SignalR SourceGenerator attribute API",
    "url": "https://github.com/dotnet/aspnetcore/issues/39973",
    "createdAt": "2022-02-03T21:20:02Z",
    "lastUpdated": "2024-03-02T00:51:46Z",
    "body": "## Background and Motivation\r\n\r\nFor PR https://github.com/dotnet/aspnetcore/pull/38025\r\n\r\nWe are adding a source generator for SignalR .NET clients to allow sharing strongly-typed interfaces between client and server. We have had the server side since first release and are now adding support for the client-side.\r\n\r\n## Proposed API\r\n\r\n\u0060\u0060\u0060diff\r\nnamespace Microsoft.AspNetCore.SignalR.Client\r\n{\r\n\u002B    [AttributeUsage(AttributeTargets.Method)]\r\n\u002B    public sealed class ClientHubAttribute : Attribute\r\n\u002B    {\r\n\u002B    }\r\n\r\n\u002B    [AttributeUsage(AttributeTargets.Method)]\r\n\u002B    public sealed class ServerHubProxyAttribute : Attribute\r\n\u002B    {\r\n\u002B    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nPackage Name:\r\nMicrosoft.AspNetCore.SignalR.Client.SourceGenerator\r\nAttribute DLL Name:\r\nMicrosoft.AspNetCore.SignalR.Client.SourceGenerator.HubProxyAttributes.dll\r\n\r\n## Usage Examples\r\n\r\n\u0060\u0060\u0060csharp\r\ninternal static partial class ProxyExtensions\r\n{\r\n    [ServerHubProxy]\r\n    public static partial T ServerHub\u003CT\u003E(this HubConnection conn);\r\n\r\n    [ClientHub]\r\n    public static partial IDisposable CallbackRegistration\u003CT\u003E(this HubConnection conn, T impl);\r\n}\r\n\r\npublic interface IMyHub\r\n{\r\n    Task GetNothing();\r\n}\r\n\r\npublic interface IMyHubClient\r\n{\r\n    Task ReceiveMessage(string message);\r\n}\r\n\r\npublic class MyHubClient : IMyHubClient\r\n{\r\n    public Task ReceiveMessage(string message)\r\n    {\r\n        Console.WriteLine(message);\r\n        return Task.CompletedTask;\r\n    }\r\n}\r\n\r\nvar myHub = conn.ServerHub\u003CIMyHub\u003E();\r\nvar dispose = connection.CallbackRegistration\u003CIMyHubClient\u003E(new MyHubClient());\r\nawait myHub.GetNothing();\r\n\u0060\u0060\u0060\r\n\r\n## Alternative Designs\r\n\r\nHubServerProxyAttribute\r\n\r\nHubClientProxyAttribute\r\nClientMethodsAttribute\r\nSignalRClientAttribute\r\nClientRegistrationAttribute\r\n\r\n",
    "upvotes": 2,
    "labels": [
      "area-signalr",
      "api-approved"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde849W5ax",
        "parentId": null,
        "author": "??",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.",
        "createdAt": "2022-02-03T21:20:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39973#issuecomment-1029412529"
      },
      {
        "id": "IC_kwDOAQzde849W5db",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-02-03T21:20:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39973#issuecomment-1029412699"
      },
      {
        "id": "IC_kwDOAQzde8499N67",
        "parentId": null,
        "author": "pranavkm",
        "content": "API review: We were still figuring out the names. The runtime recently added a source generator for P/Invokes and used the name: \u0060GeneratedDllImportAttribute\u0060. It would be nice to try and use that as a naming pattern for similar generated code across frameworks. However we could not come up with a similar name that wasn\u0027t also too verbose. For now, the two best options we could come up with were:\r\n\r\n\u0060\u0060\u0060diff\r\n{\r\n\u002B    [AttributeUsage(AttributeTargets.Method)]\r\n\u002B    public sealed class ClientRegistrationAttribute : Attribute\r\n\u002B    {\r\n\u002B    }\r\n\r\n\u002B    [AttributeUsage(AttributeTargets.Method)]\r\n\u002B    public sealed class ServerHubProxyAttribute : Attribute\r\n\u002B    {\r\n\u002B    }\r\n\u0060\u0060\u0060\r\n\r\n@BrennanConroy will talk to the remaining SignalR team and determine if these names are good to proceed with.",
        "createdAt": "2022-02-14T19:15:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39973#issuecomment-1039457979"
      },
      {
        "id": "IC_kwDOAQzde85owwAE",
        "parentId": null,
        "author": "sommmen",
        "content": "@BrennanConroy \r\n\r\nHello, it seems a preview package is on nuget already - i was wondering about the status of client generation for signalR, would the preview package be production ready and will this feature come to net8?",
        "createdAt": "2023-10-11T12:46:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39973#issuecomment-1757609988"
      },
      {
        "id": "IC_kwDOAQzde85o0cGr",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E would the preview package be production ready and will this feature come to net8?\r\n\r\nNo. See current thoughts on what needs to be done still https://github.com/dotnet/aspnetcore/issues/32534#issuecomment-1668184279",
        "createdAt": "2023-10-11T21:32:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/39973#issuecomment-1758577067"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85DyJnB",
    "title": "Using StackExchange.Redis as a SignalR backplane - Issues when message to client exceeds a certain size",
    "url": "https://github.com/dotnet/aspnetcore/issues/40200",
    "createdAt": "2022-02-14T12:17:08Z",
    "lastUpdated": "2024-07-23T15:52:16Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen sending messages over a certain size to a SignalR client, with AddStackExchangeRedis enabled, messages fail to send and the following debug error/exception appears. The message sends successfully if AddStackExchangeRedis is removed. This happens in production and with a simple containerised Redis instance locally.\r\n\r\nWhile messages this large are not typical, it would be nice to know what determines this limit and if/where it can be configured.\n\n### Expected Behavior\n\nThe user is made aware of the size/timeout limitation and can account for it/reconfigure.\n\n### Steps To Reproduce\n\n1. Configure a typical SignalR setup with a hub and client code\r\n2. Enable a Redis backplane with \u0060AddStackExchangeRedis\u0060\r\n3. Send a message to a connected client with a large payload (e.g 36MB)\n\n### Exceptions (if any)\n\n\u0060Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager: Error: Connection to Redis failed.\u0060\r\n\u0060StackExchange.Redis.RedisConnectionException: SocketClosed (ReadEndOfStream, last-recv: 0) on localhost:6379/Subscription, Idle/MarkProcessed, last: SUBSCRIBE, origin: ReadFromPipe, outstanding: 0, last-read: 0s ago, last-write: 44s ago, keep-alive: 60s, state: ConnectedEstablished, mgr: 9 of 10 available, in: 0, in-pipe: 0, out-pipe: 0, last-heartbeat: 0s ago, last-mbeat: 0s ago, global: 0s ago, v: 2.0.593.37019\u0060\n\n### .NET Version\n\n6.0.101\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "investigate",
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde849_EzO",
        "parentId": null,
        "author": "davidfowl",
        "content": "36MB payload over signalr. What\u2019s the application sending? It\u2019s likely that this type of application won\u2019t perform well the way redis is used. We\u2019ll need to beef up the guidance here. \r\n\r\nNot only will is it making redis barf but it\u2019s likely trashing your GC heap as well with lots intermediate large objects ",
        "createdAt": "2022-02-15T07:32:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40200#issuecomment-1039944910"
      },
      {
        "id": "IC_kwDOAQzde849_zZF",
        "parentId": null,
        "author": "domholmes",
        "content": "\u003E 36MB payload over signalr. What\u2019s the application sending? It\u2019s likely that this type of application won\u2019t perform well the way redis is used. We\u2019ll need to beef up the guidance here.\r\n\u003E \r\n\u003E Not only will is it making redis barf but it\u2019s likely trashing your GC heap as well with lots intermediate large objects\r\n\r\nThanks for the reply. This isn\u0027t a typical scenario for a payload this size but it happened and it raises the question of where/what the limit is. I just don\u0027t want to find out \u0027the hard way\u0027 that it\u0027s say, 5MB. We just want to be able to account for it as currently it fails silently. My assumption was that Redis doesn\u0027t actually handle the payload and was just maintaining connections when scaled out.",
        "createdAt": "2022-02-15T11:00:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40200#issuecomment-1040135749"
      },
      {
        "id": "IC_kwDOAQzde84-BYR9",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "It looks like Redis has limits on how much data you can publish at once:\r\nhttps://redis.io/docs/latest/develop/reference/clients/#output-buffer-limits\r\n\u003C!--https://redis.io/topics/clients#output-buffers-limits--\u003E\r\nYou can change those limits if your scenario needs bigger buffers.\r\n\r\nOutput from redis logs when this failure occurs:\r\n\u0060\u0060\u0060\r\n1:M 15 Feb 2022 17:09:27.155 # Client id=368 addr=\u003Caddr\u003E laddr=\u003Caddr\u003E fd=9 name=\u003Cname\u003E age=38\r\nidle=38 flags=P db=0 sub=6 psub=0 multi=-1 qbuf=0 qbuf-free=0 argv-mem=0 obl=63 oll=1\r\nomem=83886104 tot-mem=83906608 events=r cmd=subscribe user=default redir=-1\r\nscheduled to be closed ASAP for overcoming of output buffer limits.\r\n\u0060\u0060\u0060",
        "createdAt": "2022-02-15T17:13:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40200#issuecomment-1040548989"
      },
      {
        "id": "IC_kwDOAQzde84-BcDu",
        "parentId": null,
        "author": "davidfowl",
        "content": "@domholmes I think you have a good point about knowing the limits though. We should decide if there\u0027s a limit or warn about large messages with respect to redis (the azure signalr service warns about the cost of large messages for example). At a bare minimum we should document that redis limits will affect the size of messages being sent over redis. \r\n\r\nThen we should discuss other mitigations. \r\n\r\n@domholmes can you tell us what your scenario is?",
        "createdAt": "2022-02-15T17:28:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40200#issuecomment-1040564462"
      },
      {
        "id": "IC_kwDOAQzde84-Cjh_",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-02-15T22:23:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40200#issuecomment-1040857215"
      },
      {
        "id": "IC_kwDOAQzde85KK3hd",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-09-12T20:16:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40200#issuecomment-1244362845"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85ET4ex",
    "title": "Investigate using WebSocketStream in SignalR browser JS client",
    "url": "https://github.com/dotnet/aspnetcore/issues/40339",
    "createdAt": "2022-02-21T17:24:28Z",
    "lastUpdated": "2023-06-02T01:23:22Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\n[WebSocketStream](https://web.dev/websocketstream/) is a new API That solves some of the problems with backpressure in the original websocket APIs (aka there is none, the linked article explains it well).\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nWe should investigate lighting up the websocket transport with this API if available.\r\n\r\n### Additional context\r\n\r\n_No response_\r\n\r\ncc @BrennanConroy ",
    "upvotes": 1,
    "labels": [
      "area-signalr",
      "feature-client-javascript"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde84-bUCy",
        "parentId": null,
        "author": "TanayParikh",
        "content": "I believe this may be related to the ask in https://github.com/dotnet/aspnetcore/issues/33859.",
        "createdAt": "2022-02-22T01:41:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40339#issuecomment-1047347378"
      },
      {
        "id": "IC_kwDOAQzde84-e2UO",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-02-22T22:30:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40339#issuecomment-1048274190"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Eg1Ia",
    "title": "Can\u0027t access SignalR logging on Android",
    "url": "https://github.com/dotnet/aspnetcore/issues/40392",
    "createdAt": "2022-02-24T15:55:35Z",
    "lastUpdated": "2024-03-02T00:51:47Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nLogger is not preffered solution for android and even if we use it somehow internally, then we cannot turn it on. That\u0027s because it uses HubConnection class itself for tag. And that gets proguarded/obfuscated. \r\nADB does not allow tag of asterisk or dots - eg: \u0022*.*.*.a$HubConnection\u0022.\r\n\r\nPlease allow us to set up logging from java/kotlin side on Android.\n\n### Expected Behavior\n\nLogging into Logcat and possible override.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
    "upvotes": 9,
    "labels": [
      "investigate",
      "area-signalr",
      "feature-client-java"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde84-mKY5",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "@lepicekmichal Are you running an obfuscator on the SignalR library? In case this is the issue, and you would like to hardcode the tag name, then we will welcome a PR. ",
        "createdAt": "2022-02-24T19:30:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40392#issuecomment-1050191417"
      },
      {
        "id": "IC_kwDOAQzde84-mKb1",
        "parentId": null,
        "author": "??",
        "content": "Hi @lepicekmichal. We have added the \u0022Needs: Author Feedback\u0022 label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
        "createdAt": "2022-02-24T19:31:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40392#issuecomment-1050191605"
      },
      {
        "id": "IC_kwDOAQzde84-mMOj",
        "parentId": null,
        "author": "lepicekmichal",
        "content": "I don\u0027t run obfuscator, I guess I looked wrong. Nevertheless LoggerFactory.getLogger(Class\u003C*\u003E class) does return malformed tag and on top of that, it\u0027s not extendable like the other platforms.\r\nWhy is HubConnectionBuilder missing _configureLogging_ method?",
        "createdAt": "2022-02-24T19:40:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40392#issuecomment-1050198947"
      },
      {
        "id": "IC_kwDOAQzde84-mMx8",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "There is no \u0060configureLogging\u0060 method because Java configures logging globally for your app. We use slf4j and you bring your own logging system that plugs into slf4j\r\nhttps://docs.microsoft.com/aspnet/core/signalr/java-client?view=aspnetcore-6.0#add-logging",
        "createdAt": "2022-02-24T19:43:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40392#issuecomment-1050201212"
      },
      {
        "id": "IC_kwDOAQzde84-mNav",
        "parentId": null,
        "author": "lepicekmichal",
        "content": "I saw these docs, unfortunately it doesn\u0027t print anything, at all. I still think it\u0027s a bug, but if someone can elaborate on how to make it work, extend the documentation chapter, that would be greatly appreciated.",
        "createdAt": "2022-02-24T19:47:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40392#issuecomment-1050203823"
      },
      {
        "id": "IC_kwDOAQzde84-mNus",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "What are you trying that isn\u0027t working?",
        "createdAt": "2022-02-24T19:48:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40392#issuecomment-1050205100"
      },
      {
        "id": "IC_kwDOAQzde84-mO0H",
        "parentId": null,
        "author": "lepicekmichal",
        "content": "Well I added dependencies, either of these:\r\n\u0060\u0060\u0060\r\nimplementation \u0022org.slf4j:slf4j-jdk14:1.7.36\u0022\r\nimplementation \u0027org.slf4j:slf4j-android:1.7.36\u0027\r\n\u0060\u0060\u0060\r\n\r\nAnd that\u0027s pretty much it, there is no extensibility.\r\n\r\nI printed out the name of logger which is provided inside HubConnection class like this \u0060LoggerFactory.getLogger(HubConnection.class);\u0060; and the name it printed out was something like _\\*.*.a$HubConnection_.\r\nSo there was no way I could turn on that tag via adb shell prop.\r\n\r\nI could also try other 3rd party dependencies which have docs about how to add configuration file making it possible to print inside logcat, but that would not help with extensibility. Can\u0027t show them on screen, can\u0027t upload them to our log servers.",
        "createdAt": "2022-02-24T19:55:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40392#issuecomment-1050209543"
      },
      {
        "id": "IC_kwDOAQzde84-mUW0",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E I printed out the name of logger which is provided inside HubConnection class like this \u0060LoggerFactory.getLogger(HubConnection.class);\u0060; and the name it printed out was something like _*.*.a$HubConnection_.\r\n\r\nIf you manually create a logger with \u0022HubConnection\u0022 as the name does that work in your scenario?\r\n\r\nThat\u0027s what we were considering in https://github.com/dotnet/aspnetcore/issues/40392#issuecomment-1050191417",
        "createdAt": "2022-02-24T20:25:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40392#issuecomment-1050232244"
      },
      {
        "id": "IC_kwDOAQzde84-mVA2",
        "parentId": null,
        "author": "lepicekmichal",
        "content": "Yeah, if it got replaced inside library with such string, it would help with not seeing any logs at all. \r\nWould not help with processing the logs ourselves though.",
        "createdAt": "2022-02-24T20:28:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40392#issuecomment-1050234934"
      },
      {
        "id": "IC_kwDOAQzde84-8DFo",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-03-01T22:37:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40392#issuecomment-1055928680"
      },
      {
        "id": "IC_kwDOAQzde84_KPy7",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "@lepicekmichal We are not planning to implement \u0060ConfigureLogging\u0060 to allow users to pass in a \u0060Logger\u0060 from outside. Normally a \u0060Logger\u0060 applies to a class and works within the class context for tagging reasons.  It does not make sense to keep passing a single instance of \u0060HubConnection\u0060 logger from \u0060ConfigureLogging\u0060 to other classes as you\u0027ll end up losing the logs context due to a single tag. \r\n\r\nWe are, however, planning to change SignalR to start using a simple string for log tagging rather than the full package name plus class name.  \r\n\r\nWe will change all the loggers to use the following format: \u0060 Logger = LoggerFactory.getLogger(\u0022SignalR.\u003CClassName\u003E\u0022)\u0060.  Example for HubConnection class: \u0060 Logger = LoggerFactory.getLogger(\u0022SignalR.HubConnection\u0022)\u0060 We hope that proguard/obfuscator will not mess up with that string and you should be able to process logs with \u0060SignalR.\u003CClassName\u003E\u0060 prefix. Let us know if this will work for you. ",
        "createdAt": "2022-03-05T02:07:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40392#issuecomment-1059650747"
      },
      {
        "id": "IC_kwDOAQzde84_KPzw",
        "parentId": null,
        "author": "??",
        "content": "Hi @lepicekmichal. We have added the \u0022Needs: Author Feedback\u0022 label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
        "createdAt": "2022-03-05T02:08:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40392#issuecomment-1059650800"
      },
      {
        "id": "IC_kwDOAQzde84_KiBe",
        "parentId": null,
        "author": "lepicekmichal",
        "content": "Yes, that would help with debugging as of right now there are no logs whatsoever.\r\nAs for published version, I suppose I should be able to find slfj4 solution.\r\n\r\nOne more thing, this way we will not know which hub is logging what. There should be possibility to pass additional tag info. Or maybe you can just append url to the text of the log, something like that.",
        "createdAt": "2022-03-05T09:02:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40392#issuecomment-1059725406"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85FG_Je",
    "title": "Public setter for HttpClient in Java Client",
    "url": "https://github.com/dotnet/aspnetcore/issues/40534",
    "createdAt": "2022-03-04T09:57:51Z",
    "lastUpdated": "2023-05-16T14:47:33Z",
    "body": "Please make class com.microsoft.signalr.**HttpClient** and function com.microsoft.signalr.HttpHubConnectionBuilder.**withHttpClient** public.\r\n\r\nRight know they are package-private, so the only way for us to set up anything is using setHttpClientBuilderCallback method.\r\nThat is not ideal, because we have to remember everything we set up inside our OkHttpClient. \r\nFor example, we were re-setting all interceptors, but totally forgot to also copy proxy settings.\r\n\r\nPassing our own HttpClient would solve these problems.\r\n\r\n[Android]",
    "upvotes": 9,
    "labels": [
      "area-signalr",
      "api-suggestion"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde84_UVJe",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-03-08T22:39:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40534#issuecomment-1062294110"
      },
      {
        "id": "IC_kwDOAQzde85cYGxf",
        "parentId": null,
        "author": "lepicekmichal",
        "content": "So.. one year for one keyword is not enough? \uD83E\uDD26\u200D\u2642\uFE0F \uD83D\uDE22 ",
        "createdAt": "2023-05-16T14:47:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40534#issuecomment-1549823071"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85FNGWc",
    "title": "SignalR 6.x doesn\u0027t work with android il2cpp",
    "url": "https://github.com/dotnet/aspnetcore/issues/40569",
    "createdAt": "2022-03-07T08:27:21Z",
    "lastUpdated": "2025-01-13T11:56:53Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\n(Building with Unity)\r\nSignalR 6.x (6.0.0, 6.0.1, 6.0.2) doesn\u0027t work with android on IL2CPP. Works fine on windows il2cpp builds.\r\nReverting to 5.x fixes the issue.\r\n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n- Create a unity project\r\n- Add SignalR 6.x libraries\r\n- Add a script that creates the hub connection, like this: \u0060\u0060\u0060var connection = new HubConnectionBuilder().WithUrl(\u0022http://localhost:5014/game\u0022).Build();\u0060\u0060\u0060\r\n- Build with Il2CPP to android\r\n- Exception (see below) is thrown when calling \u0060.Build()\u0060\r\n\n\n### Exceptions (if any)\n\n\u0060\u0060\u006003-06 12:42:04.721: E/Unity(28182): ArgumentNullException: Value cannot be null.\r\n03-06 12:42:04.721: E/Unity(28182): Parameter name: obj\r\n03-06 12:42:04.721: E/Unity(28182):   at System.Threading.Monitor.ReliableEnterTimeout (System.Object obj, System.Int32 timeout, System.Boolean\u0026 lockTaken) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n03-06 12:42:04.721: E/Unity(28182):   at Microsoft.Extensions.DependencyInjection.DependencyInjectionEventSource.ServiceProviderBuilt (Microsoft.Extensions.DependencyInjection.ServiceProvider provider) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n03-06 12:42:04.721: E/Unity(28182):   at Microsoft.Extensions.DependencyInjection.ServiceProvider..ctor (System.Collections.Generic.ICollection\u00601[T] serviceDescriptors, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions options) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n03-06 12:42:04.721: E/Unity(28182):   at Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider (Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.DependencyInjection.ServiceProviderOptions options) [0x00000] in \u003C00000000000000000000000000000000\u003E:0 \r\n03-06 12:42:04.721: E/Unity(28182):   at Mi\u0060\u0060\u0060\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
    "upvotes": 3,
    "labels": [
      "bug",
      "area-signalr",
      "Priority:3"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde84_UUYu",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-03-08T22:36:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-1062290990"
      },
      {
        "id": "IC_kwDOAQzde85EpPmC",
        "parentId": null,
        "author": "cristoferfnt",
        "content": "Same here. Using Unity 2021.3, targeting netstandard2.1, Android IL2CPP.\r\nVersion 6.x gives this exact exception.\r\nRunning on the editor works fine.\r\nHave all the DLLs and link.xml necessary to prevent stripping.\r\n\r\nVersion 5.x works fine.",
        "createdAt": "2022-06-09T21:56:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-1151662466"
      },
      {
        "id": "IC_kwDOAQzde85EygCz",
        "parentId": null,
        "author": "cristoferfnt",
        "content": "Just tested the preview version (7.x), and the exception still occours. Will be using 5.0.17 for our project, but would like to use the newer version. When I have time, I\u0027ll try to debug this more.",
        "createdAt": "2022-06-13T15:48:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-1154089139"
      },
      {
        "id": "IC_kwDOAQzde85GJKEw",
        "parentId": null,
        "author": "thismaker",
        "content": "I am experiencing this issue as well, any assistance will be greatly appreciated. In the meanwhile, it seems rolling back to 5x is the only solution.",
        "createdAt": "2022-07-06T22:17:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-1176805680"
      },
      {
        "id": "IC_kwDOAQzde85KekP1",
        "parentId": null,
        "author": "kolesnick",
        "content": "I use this workaround to bypass that error:\r\n\r\n\u0060\u0060\u0060csharp\r\nvar connection =\r\n    new HubConnection(\r\n        new HttpConnectionFactory(\r\n            new OptionsWrapper\u003CHttpConnectionOptions\u003E(new HttpConnectionOptions\r\n            {\r\n                Transports = WebSockets,\r\n                SkipNegotiation = true,\r\n            }),\r\n            new NullLoggerFactory()),\r\n        new NewtonsoftJsonHubProtocol(),\r\n        new UriEndPoint(new Uri(url)),\r\n        new DummyServiceProvider(),\r\n        new NullLoggerFactory(),\r\n        new DefaultRetryPolicy())\r\n    {\r\n        ServerTimeout = Timeout,\r\n    };\r\n\r\nawait connection.StartAsync();\r\n\u0060\u0060\u0060\r\n\r\nAlso 2 additional classes are needed:\r\n\r\n\u0060\u0060\u0060csharp\r\ninternal sealed class DummyServiceProvider : IServiceProvider\r\n{\r\n    public object GetService(Type serviceType) =\u003E throw new NotSupportedException();\r\n}\r\n\r\ninternal sealed class DefaultRetryPolicy : IRetryPolicy\r\n{\r\n    private static readonly TimeSpan?[] RetryDelays = { Zero, FromSeconds(2), FromSeconds(10), FromSeconds(30), null, };\r\n\r\n    public TimeSpan? NextRetryDelay(RetryContext retryContext) =\u003E RetryDelays[retryContext.PreviousRetryCount];\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2022-09-16T15:50:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-1249526773"
      },
      {
        "id": "IC_kwDOAQzde858S6gJ",
        "parentId": null,
        "author": "Marik0511",
        "content": "Hi.\r\nIt\u0027s 2024 now, I have the same issue.\r\nI just wondering, there is no chanse to use SignalR client on application built for Android via Unity?... How could it be like that?.. Or may be there is some another workaround and I just didn\u0027t find it. \r\nKindly please, if there is some hidden technique to use latest version of SignalR in game/app built with Unity for Android platform - write it here. \r\nThank you in advance.\r\nWorkaround from @kolesnick doesn\u0027t work on the latest versoin of Unity. Will try SignalR version 5.0.17. (nowadays the latest version is 8.0.4)",
        "createdAt": "2024-04-30T13:25:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-2085333001"
      },
      {
        "id": "IC_kwDOAQzde858TByk",
        "parentId": null,
        "author": "pethesdaniel",
        "content": "@Marik0511 It\u0027s been a while since I had this issue, but I think I solved it by using Newtonsoft.JSON instead of MessagePack, as maybe MessagePack was doing some reflection which IL2CPP doesn\u0027t support.\r\n\r\nEDIT: The workaround used to work on SignalR Core 6.0.922.41926",
        "createdAt": "2024-04-30T13:40:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-2085362852"
      },
      {
        "id": "IC_kwDOAQzde858beXe",
        "parentId": null,
        "author": "Deusald",
        "content": "\u003E Hi. It\u0027s 2024 now, I have the same issue. I just wondering, there is no chanse to use SignalR client on application built for Android via Unity?... How could it be like that?.. Or may be there is some another workaround and I just didn\u0027t find it. Kindly please, if there is some hidden technique to use latest version of SignalR in game/app built with Unity for Android platform - write it here. Thank you in advance. Workaround from @kolesnick doesn\u0027t work on the latest versoin of Unity. Will try SignalR version 5.0.17. (nowadays the latest version is 8.0.4)\r\n\r\nI\u0027m using unity 2023.2.20f1 and signalR in version 8.0.3 building for Android with IL2CPP and everything is working fine for me.",
        "createdAt": "2024-04-30T22:22:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-2087577054"
      },
      {
        "id": "IC_kwDOAQzde858eXJa",
        "parentId": null,
        "author": "Marik0511",
        "content": "@Deusald cool, and what kind of creation of HubConnection instance do you use?",
        "createdAt": "2024-05-01T11:46:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-2088333914"
      },
      {
        "id": "IC_kwDOAQzde858el5i",
        "parentId": null,
        "author": "Deusald",
        "content": "This is my hub connection creation code on unity client:\r\n\u0060\u0060\u0060\r\n_HubConnection = new HubConnectionBuilder()\r\n                .WithUrl(url, options =\u003E\r\n                 {\r\n                     options.AccessTokenProvider = () =\u003E Task.FromResult(JwtToken)!;\r\n                     options.SkipNegotiation     = true;\r\n                     options.Transports          = HttpTransportType.WebSockets;\r\n                 }).ConfigureLogging(options =\u003E\r\n                 {\r\n                     options.SetMinimumLevel(LogLevel.Information);\r\n                     options.AddProvider(_LoggerProvider);\r\n                 }).Build();\r\n\u0060\u0060\u0060",
        "createdAt": "2024-05-01T12:24:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-2088394338"
      },
      {
        "id": "IC_kwDOAQzde858fswQ",
        "parentId": null,
        "author": "Marik0511",
        "content": "@Deusald, Thank you for answering me.\r\nI just copied your code, paste into newly created project in 2023.2.16f1.\r\nI use Windows11, Visual Studio 2022, all is updated.\r\nAlso I have another project in another folder just for getting all dlls, this project is on netstandard 2.1, just like in Player Settings in Unity. I\u0027ve published it in Release configuration and drag_n_drop all dlls into Unity\u0027s sub-folder.\r\nHere is how my project\u0027s file looks like:\r\n\u0060\u0060\u0060\r\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\r\n\r\n  \u003CPropertyGroup\u003E\r\n    \u003CTargetFramework\u003Enetstandard2.1\u003C/TargetFramework\u003E\r\n  \u003C/PropertyGroup\u003E\r\n\r\n  \u003CItemGroup\u003E\r\n    \u003CPackageReference Include=\u0022Microsoft.AspNetCore.SignalR.Client\u0022 Version=\u00228.0.4\u0022 /\u003E\r\n    \u003CPackageReference Include=\u0022SharpCompress\u0022 Version=\u00220.37.2\u0022 /\u003E\r\n  \u003C/ItemGroup\u003E\r\n\r\n\u003C/Project\u003E\r\n\u0060\u0060\u0060\r\nThe whole code in Unity project looks like this:\r\n\r\n\u0060\u0060\u0060\r\nusing Microsoft.AspNetCore.Http.Connections;\r\nusing Microsoft.AspNetCore.SignalR.Client;\r\nusing Microsoft.Extensions.Logging;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing UnityEngine;\r\n\r\npublic class PresentationScript : MonoBehaviour\r\n{\r\n    public TMPro.TextMeshProUGUI textMeshPro;\r\n\r\n    public void CreateConnectionButtonHandler()\r\n    {\r\n        try\r\n        {\r\n            var _HubConnection = new HubConnectionBuilder()\r\n                .WithUrl(\u0022https://myhub.com\u0022, options =\u003E\r\n                {\r\n                    options.AccessTokenProvider = () =\u003E Task.FromResult(\u0022some_token\u0022)!;\r\n                    options.SkipNegotiation = true;\r\n                    options.Transports = HttpTransportType.WebSockets;\r\n                }).ConfigureLogging(options =\u003E\r\n                {\r\n                    options.SetMinimumLevel(LogLevel.Information);\r\n                    options.AddProvider(new MyLoggerProvider());\r\n                }).Build();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            textMeshPro.text \u002B= ex.Message \u002B \u0022\\n\u0022;\r\n        }\r\n    }\r\n}\r\n\r\npublic class MyLoggerProvider : ILoggerProvider\r\n{\r\n    public Microsoft.Extensions.Logging.ILogger CreateLogger(string categoryName)\r\n    {\r\n        return new MyLogger();\r\n    }\r\n\r\n    public void Dispose()\r\n    { }\r\n}\r\n\r\npublic class MyLogger : Microsoft.Extensions.Logging.ILogger\r\n{\r\n    public IDisposable BeginScope\u003CTState\u003E(TState state) where TState : notnull\r\n    {\r\n        return null;\r\n    }\r\n\r\n    public bool IsEnabled(LogLevel logLevel)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    public void Log\u003CTState\u003E(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func\u003CTState, Exception, string\u003E formatter)\r\n    { }\r\n}\r\n\u0060\u0060\u0060\r\nAnd the result on my Samsung S21 looks loke this:\r\n![image](https://github.com/dotnet/aspnetcore/assets/131253149/9f0f2a75-06bc-49e3-bb43-632207a673ca)\r\nError occurs on .Build(); action, only on Android.\r\nDon\u0027t have a clue what\u0027s the reason......",
        "createdAt": "2024-05-01T16:03:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-2088684560"
      },
      {
        "id": "IC_kwDOAQzde858gHgu",
        "parentId": null,
        "author": "Deusald",
        "content": "@Marik0511 I pulled SignalR code from my project.\r\n[SignalRTest.zip](https://github.com/dotnet/aspnetcore/files/15179422/SignalRTest.zip)\r\nThere is an example server and client in unity. I tested it by making Andoird IL2CPP build and everything worked correctly. I was able to connect to server on my pc, send and receive messages.",
        "createdAt": "2024-05-01T17:18:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-2088794158"
      },
      {
        "id": "IC_kwDOAQzde85-Uv5b",
        "parentId": null,
        "author": "Marik0511",
        "content": "@Deusald, thank you for sending me your example, it helped me.\r\nSo I\u0027ve figured out what is different.\r\nWanna suggest to all non-experienced in Unity (like me), that came here to this discussion, please take a look if you have link.xml file in your Unity project. I put this file in the same folder where I have all my dlls.\r\nLong story short - this file makes that your dlls during il2cpp (Intermediate Language To C\u002B\u002B) convertion will be not clipped.\r\nHere is official documentation regarding that:\r\nhttps://docs.unity3d.com/Manual/ManagedCodeStripping.html\r\nMy file for example looks like this:\r\n\u0060\u0060\u0060\r\n\u003Clinker\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.AspNetCore.Connections.Abstractions\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.AspNetCore.Http.Connections.Client\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.AspNetCore.Http.Connections.Common\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.AspNetCore.SignalR.Client.Core\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.AspNetCore.SignalR.Client\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.AspNetCore.SignalR.Common\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.AspNetCore.SignalR.Protocols.Json\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.Bcl.AsyncInterfaces\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.Bcl.TimeProvider\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.Extensions.DependencyInjection.Abstractions\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.Extensions.DependencyInjection\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.Extensions.Features\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.Extensions.Logging.Abstractions\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.Extensions.Logging\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.Extensions.Options\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022Microsoft.Extensions.Primitives\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022System.Buffers\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022System.ComponentModel.Annotations\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022System.Diagnostics.DiagnosticSource\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022System.IO.Pipelines\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022System.Memory\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022System.Numerics.Vectors\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022System.Runtime.CompilerServices.Unsafe\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022System.Text.Encoding.CodePages\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022System.Text.Encodings.Web\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022System.Text.Json\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022System.Threading.Channels\u0022 preserve=\u0022all\u0022/\u003E\r\n  \u003Cassembly fullname=\u0022System.Threading.Tasks.Extensions\u0022 preserve=\u0022all\u0022/\u003E\r\n\u003C/linker\u003E\r\n\u0060\u0060\u0060\r\nAlso be carefull and use two spaces on the beginning of the line instead of tab, because with tabs it doesn\u0027t work, at least on my side.",
        "createdAt": "2024-05-19T21:41:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-2119368283"
      },
      {
        "id": "IC_kwDOAQzde86aKcP4",
        "parentId": null,
        "author": "RambunctiousCookie",
        "content": "What an incredibly stubborn issue.\nI have tried upteen versions of SignalR from multiple posts (3.1.11, 5.x.x, 6.0.9, 8.0.3, ...) along with multiple HubConnectionBuilder() configurations on the clientside.\n\nIt just doesn\u0027t work on Android, while working fine in the editor.\nI don\u0027t have \u0060link.xml\u0060. \n\nLower versions like 3.1.11 get this:\n\u0060SignalR:: Error initializing connection: A suitable constructor for type \u0027Microsoft.AspNetCore.Http.Connections.Client.HttpConnectionFactory\u0027 could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.\u0060\n\nHigher versions like 5.x.x, 6.0.9, 8.0.3, ... get this:\n\u0060Error initializing connection: The type initializer for \u0027Microsoft.AspNetCore.SignalR.Client.HubConnection\u0027 threw an exception.\u0060\n\u0060Stack Trace:   at System.Reflection.RuntimeConstructorInfo.InternalInvoke (System.Object obj, System.Object[] parameters, System.Boolean wrapExceptions) [0x00000] in \u003C00000000000000000000000000000000\u003E:0\u0060\n\nI am already using \u0060.AddNewtonsoftJsonProtocol()\u0060 or \u0060new NewtonsoftJsonHubProtocol()\u0060.\nI have tried the workarounds posted by \u0060kolesnick\u0060 and \u0060Deusald\u0060.\n\nHave never encountered a problem that cost so many hours to resolve in my life (and remains unresolved).\nHonestly this should come with a warning that SignalR is exceedingly incompatible with Unity",
        "createdAt": "2025-01-13T07:58:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-2586428408"
      },
      {
        "id": "IC_kwDOAQzde86aKiQn",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Honestly this should come with a warning that SignalR is exceedingly incompatible with Unity\n\n@BrennanConroy lets update the docs. I agree its painful to not see that warning label in the docs (even if you still try to make it work). Historically many parts of the stack are not trim friendly. That has been changing slowly.",
        "createdAt": "2025-01-13T08:13:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-2586453031"
      },
      {
        "id": "IC_kwDOAQzde86aK0Zw",
        "parentId": null,
        "author": "RambunctiousCookie",
        "content": "\u003E \u003E Honestly this should come with a warning that SignalR is exceedingly incompatible with Unity\n\u003E \n\u003E [@BrennanConroy](https://github.com/BrennanConroy) lets update the docs. I agree its painful to not see that warning label in the docs (even if you still try to make it work). Historically many parts of the stack are not trim friendly. That has been changing slowly.\n\nHi David,\n\nI finally got it to work with multiple workarounds. \nIt seems that even said workarounds only function within a very narrow range of SignalR versions (I haven\u0027t had time to check which, but I know the precise combination of these workarounds **do not work** on 9.0.00 or lower versions like 3.1.11).\n\nI was finally able to get it to connect after using a highly specific setup:\n- Microsoft.AspNetCore.SignalR.Client 6.0.9\n- Microsoft.AspNetCore.SignalR.Protocols.NewtonsoftJson 6.0.9\n- The \u0060link.xml\u0060 graciously provided above by \u0060Marik0511\u0060\n- Extremely specific HubConnectionBuilder() with explicit settings for \u0060HttpTransportType.WebSockets\u0060 and \u0060.AddNewtonsoftJsonProtocol()\u0060\n\nEven now I am still unsure of the limits of these workarounds. \nI would not call this a production friendly setup as it essentially binds the project/product to multiple complex legacy combinations to even work out the door.\n\nThank you for doing good work with this protocol, nonetheless! I really like working with SignalR (as I have done in other projects), but due to these complexities I think it\u0027s best to refrain from using SignalR with Unity \u002B Android. :)",
        "createdAt": "2025-01-13T08:55:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-2586527344"
      },
      {
        "id": "IC_kwDOAQzde86aMRv_",
        "parentId": null,
        "author": "Deusald",
        "content": "@RambunctiousCookie SignalR is ready for usage in production with Unity and IL2CPP. I\u0027m game developer that worked on [Battle of Polytopia](https://play.google.com/store/apps/details?id=air.com.midjiwan.polytopia) and [Mythic Mischief](https://play.google.com/store/apps/details?id=com.ivstudio.mythicmischiefonline). Both of those games use SignalR as a base system of communication and it\u0027s working very well. Also both are available under Android, iOS, compiled with IL2CPP and were using SignalR Client dll version ranging from version 6 up to 8. Check out my example project that I\u0027ve included couple posts above. I could swap SignalR dll versions in this project and everything worked so far for me. For example currently my app uses SignalR Client in version 8.0.11 and players are playing the game fine ;)",
        "createdAt": "2025-01-13T11:56:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40569#issuecomment-2586909695"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85F6Lsh",
    "title": "Simplify setting W3C Trace Context in SignalR browser clients",
    "url": "https://github.com/dotnet/aspnetcore/issues/40763",
    "createdAt": "2022-03-17T20:29:14Z",
    "lastUpdated": "2023-01-14T19:03:15Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to add W3C Trace Context to our client\u0027s SignalR calls over WebSockets.\r\n\r\nOur client generates a root trace ID when the page loads, and we are able to use interceptors on our REST calls to add the trace context to HTTP requests very easily, and ASP.NET Core automatically handles mapping the trace context to \u0060System.Diagnostics.Activity.Current\u0060. This allows us to do distributed tracing and track requests initiated by a single user\u0027s page load across all of our services.\r\n\r\nI would like the same thing for SignalR: automatic sending (for clients) and parsing (for servers/hubs) of W3C trace context, as well as handling \u0060Activity.Current\u0060. This may only be applicable to the browser-based WebSocket clients, since you should be able to set arbitrary HTTP headers, including \u0060traceparent\u0060 and \u0060tracestate\u0060, using other clients/transports, and I assume those would still be parsed by ASP.NET Core.\r\n\r\nI found a workaround to do this in the browser, but it passes the trace context using a query string parameter in the connection URL, which I am not sure is supported or not. It also requires you to manually reset the current for each hub method call, which is easy to miss.\n\n### Describe the solution you\u0027d like\n\nI would like it if there was a way to specify a trace context in the client libraries and send it to the hub somehow, and for the \u0060HubContext\u0060 to automatically parse the context and set \u0060Activity.Current\u0060 accordingly. (This would require some trickery for JS/browser clients since browsers don\u0027t allow extra headers in WebSocket connections.)\r\n\r\nFor example:\r\n\u0060\u0060\u0060javascript\r\n/**\r\n  * Add W3C trace context to the negotiation and connection requests\r\n  * @param {string?} traceparent - Parent trace context string.\r\n  *   If not specified, a random context will be created.\r\n  */\r\nfunction withTraceContext(traceparent: string?) {\r\n\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060javascript\r\nconst connection = new HubConnectionBuilder()\r\n  .withUrl(\u0022/myHub\u0022)\r\n  .withTraceContext()\r\n  .build()\r\n\u0060\u0060\u0060\r\nIn my example, the hub methods\u0027 parent activity is a \u0022StartSession\u0022 activity created on connection, but I would probably be fine if the parent was set to the client\u0027s trace context directly.\r\n\r\nAnother option is to have another property in \u0060HubContext\u0060 or a magic key in \u0060HubContext.Items\u0060 :magic_wand: (e.g. \u0060Context.Items[\u0022traceparent\u0022]\u0060) that is automatically parsed by the hub. That way, the user could decide how they want to get the trace context to the hub on the initial connection and parse it in \u0060OnConnectedAsync\u0060. From there, the \u0060HubContext\u0060 could automatically pick up the trace context from that \u0060HubContext\u0060 property or \u0060Item\u0060.\n\n### Additional context\n\nI have found a way to add this, but it feels a little hacky:\r\n\r\nIn the client:\r\n\r\n\u0060\u0060\u0060javascript\r\n// client.js\r\nconst traceparent = TraceContext.getRootContext().toString() // 00-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxx-01\r\nconst connection = new HubConnectionBuilder()\r\n  .withUrl(\u0060${baseUrl}/myhub?traceparent=${traceparent}\u0060)\r\n  .build();\r\nconnection.on(/* ... */)\r\nconnection.start()\r\n\u0060\u0060\u0060\r\n\r\nOn the server:\r\n\u0060\u0060\u0060csharp\r\n//MyHub.cs\r\npublic class MyHub\r\n{\r\n// ...\r\n    public Task OnConnectedAsync()\r\n    {\r\n        ActivityContext activityCtx = default;\r\n        var httpCtx = Context.GetHttpContext();\r\n        if (httpCtx.Request.Query.TryGetValue(\u0022traceparent\u0022, out StringValues tpParam) \u0026\u0026 tpParam.SingleOrDefault() is string traceParent)\r\n        {\r\n            try\r\n            {\r\n                string traceState = (httpCtx.Request.Query.TryGetValue(\u0022tracestate\u0022, out StringValues tsParam)) ? tsParam.SingleOrDefault() : null;\r\n                if (ActivityContext.TryParse(traceParent, traceState, out activityCtx)) { }\r\n            }\r\n            catch { }\r\n        }\r\n        Activity activity = MyDiagnostics.ActivitySource.StartActivity(\u0022MyHub.StartSession\u0022, ActivityKind.Client, activityCtx);\r\n        Context.Items[\u0022tracecontext\u0022] = activity;\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n    public async Task DoSomething()\r\n    {\r\n        // Add this line to the beginning of every hub method.\r\n        using var activity = StartActivity($\u0022{nameof(MyHub)}.{nameof(DoSomething)});\r\n    }\r\n\r\n    private Activity GetCurrentConnectionActivity()\r\n    {\r\n        return Context.Items[\u0022tracecontext\u0022] as Activity;\r\n    }\r\n\r\n    private Activity StartActivity(string operation)\r\n    {\r\n        return MyDiagnostics.ActivitySource.StartActivity(operation, ActivityKind.Client, GetCurrentConnectionActivity().Context);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060csharp\r\n// MyDiagnostics.cs\r\n\r\npublic static class MyDiagnostics\r\n{\r\n    public static readonly ActivitySource ActivitySource = StartActivitySource();\r\n\r\n    private static ActivitySource StartActivitySource()\r\n    {\r\n        var source = new ActivitySource(\r\n            \u0022MyActivitySource\u0022,\r\n            FileVersionInfo.GetVersionInfo(Assembly.GetAssembly(typeof(MyDiagnostics))!.Location).FileVersion\r\n        );\r\n\r\n        ActivitySource.AddActivityListener(new ActivityListener\r\n        {\r\n            ShouldListenTo = s =\u003E true,\r\n            SampleUsingParentId = (ref ActivityCreationOptions\u003Cstring\u003E activityOptions) =\u003E ActivitySamplingResult.AllData,\r\n            Sample = (ref ActivityCreationOptions\u003CActivityContext\u003E activityOptions) =\u003E ActivitySamplingResult.AllData,\r\n        });\r\n\r\n        return source;\r\n    }\r\n}\r\n\u0060\u0060\u0060",
    "upvotes": 1,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85AHYYL",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "Triage: related issue: https://github.com/dotnet/aspnetcore/issues/29846",
        "createdAt": "2022-03-22T21:48:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40763#issuecomment-1075676683"
      },
      {
        "id": "IC_kwDOAQzde85AHYa_",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-03-22T21:48:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40763#issuecomment-1075676863"
      },
      {
        "id": "IC_kwDOAQzde85SbTn0",
        "parentId": null,
        "author": "davidfowl",
        "content": "cc @BrennanConroy min bar is that we should document this.",
        "createdAt": "2023-01-14T19:03:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40763#issuecomment-1382889972"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85GLdlF",
    "title": "Callback manager in SignalR C\u002B\u002B client should use ints instead of strings for ids",
    "url": "https://github.com/dotnet/aspnetcore/issues/40832",
    "createdAt": "2022-03-22T23:24:02Z",
    "lastUpdated": "2024-03-02T00:51:47Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nThe callback id managed by the callback_manager class tracks info by converting an int into a string. This seems like a less than optimal way to manage resources. That\u0027s a string allocation and overhead that could be better managed if the id remained as int.\n\n### Describe the solution you\u0027d like\n\nIn order to reduce the impact of string allocations and other string-related slowdowns, is it possible to convert the callback manager to use ints instead of strings?\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "investigate",
      "area-signalr",
      "feature-client-c\u002B\u002B"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85AMIky",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "The invocation ID has to be a string per spec https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md#invocations\r\n\r\nEven if we store it as an int in the callback_manager we\u0027re going to have to convert it to a string at some point and then convert a string from the server to an int when we get the result. I don\u0027t see what we would save by storing the int instead of the string.\r\n\r\nAre you actually seeing performance issues specifically related to this string allocation? I would be very surprised if you were.",
        "createdAt": "2022-03-23T23:41:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40832#issuecomment-1076922674"
      },
      {
        "id": "IC_kwDOAQzde85AMzhJ",
        "parentId": null,
        "author": "mprather",
        "content": "@BrennanConroy I don\u0027t have specific metrics to show. I was taking a deeper look to understand a bug that we\u0027ve encountered and I just ran across the callback id. However, in general, we have done a lot of performance testing of our application and the impact of using the c\u002B\u002B signalr library in the past. \r\n\r\nMost of our installations are on small boards (rpi 3b\u002B or smaller, all the way down to a tiny 454Mz/64Mb). On those boards, we\u0027re limited in both CPU and mem. It\u0027s worth noting that the RPi 3B\u002B is the smallest board we\u0027ve attempted to use signalr on. \r\n\r\nOur implementations tend to process data up to speeds of 300Hz. Our mem footprint and cpu impact is typically rather small (in the single digits). However, when we start using signalr on a rpi 3b\u002B, cpu usage ramps up and becomes the big consumer by several factors. We\u0027ve taken a lot of steps to reduce the number of allocations before we hand anything over to the signalr api. We also only send messages when something has changed (i.e. if we\u0027re monitoring 125 states and only 2 change, then we send those changes -- for each timeslice). The goal is to provide data to a site so that other can watch what is happening in the lab/robots/etc.\r\n\r\nIn general, though, it just feels like signalr is not as well-tuned as we had hoped. On a recent application, we had to downgrade our processing from 100Hz to 10Hz so that signalr would work on the board. Otherwise, the cpu was clearly overloaded and everything would be impacted.\r\n\r\nThus, when I see something like a string-based key, it makes me wonder -- why? I get that the server is going to send it to as a string or vice-versa, but until it\u0027s actually needed as a string, wouldn\u0027t the best course of action be to leave it as an int (for lookups, etc)? Temp string is created, then copied, then another is created based on that string, etc. Also, string lookups/finds/comparisons are also pretty expensive. Between get_callback_id() and where the key is stored, there are at least 6 allocations (3 in get_callback_id and 3 more with the insert). If that key had been an int, there would be only a single allocation for the pair insertion. \r\n\r\nAre there other places where the api can be smarter about what is handling and how?  Those are the types of questions we ask of our own code.\r\n\r\nWe really like signalr from the web server side of things and not once has signalr\u0027s perf impact on the web server has come into question (it\u0027s noise on a web server with beefy everything) but getting data to the web server from a small system is key. If the api is not careful with what it\u0027s doing, then it will over-consume and make it harder to justify its use.\r\n",
        "createdAt": "2022-03-24T04:49:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40832#issuecomment-1077098569"
      },
      {
        "id": "IC_kwDOAQzde85ARCDD",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Thanks for sharing your scenario, it\u0027s nice to see where you\u0027re coming from.\r\n\r\nWe haven\u0027t done any real perf work for the C\u002B\u002B client yet, most of it has been driven by \u0022don\u0027t do obviously bad things\u0022 and the logging issue you opened a while back. And we\u0027re still mostly focused on getting the functionality up to par with the other client and ironing out bugs.\r\n\r\nWe can easily remove 1 of the temporary string allocations, and we\u0027ll do that at a minimum. I\u0027m still trying to convince myself that storing an int is ok from a protocol correctness standpoint. It might be since it\u0027s only used for sending from the client. And future changes to support receiving invocation IDs from the server could use a different callback manager type.",
        "createdAt": "2022-03-24T20:29:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40832#issuecomment-1078206659"
      },
      {
        "id": "IC_kwDOAQzde85Aq6i6",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-03-31T19:01:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40832#issuecomment-1084991674"
      },
      {
        "id": "IC_kwDOAQzde85MAZpl",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. Because it\u0027s not immediately obvious that this is a bug in our framework, we would like to keep this around to collect more feedback, which can later help us determine the impact of it. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:29:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/40832#issuecomment-1275173477"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85H-nC_",
    "title": "Testing ASP.NET Core with trimming",
    "url": "https://github.com/dotnet/aspnetcore/issues/41252",
    "createdAt": "2022-04-19T00:58:14Z",
    "lastUpdated": "2024-09-25T16:15:26Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nWe\u0027re annotating ASP.NET Core for trimming in .NET 7. In theory, the linker and trim warnings should ensure frameworks, libraries and apps work.\r\n\r\nWe should double-check that ASP.NET Core continues to run in some trimmed, published apps.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nWith trimming it\u0027s difficult to test trimmed features in isolation, e.g. an app uses features A and B. Did A and B only work because they were both used, etc. Building and running an app to test each feature in isolation isn\u0027t realistic.\r\n\r\nWe should do some basic smoke testing of core scenarios.\r\n\r\ne.g.\r\nMVC\r\nMinimal API\r\nSignalR\r\nAuthN/AuthZ\r\nKestrel/IIS/HttpSys\r\nData protection/security/identity\r\n\r\n### Additional context\r\n\r\n_No response_",
    "upvotes": 1,
    "labels": [
      "task",
      "area-dataprotection",
      "area-mvc",
      "area-auth",
      "area-signalr",
      "linker-friendliness",
      "area-networking"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85BtU6k",
        "parentId": null,
        "author": "javiercn",
        "content": "@JamesNK you can take inspiration on how we test trimming in Blazor Webassembly apps. We trim the projects on the CI only based on the Release configuration.",
        "createdAt": "2022-04-19T09:42:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41252#issuecomment-1102401188"
      },
      {
        "id": "IC_kwDOAQzde85BvEmX",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "@JamesNK how do you want all of us to track this? Do you want to put out a PR to which everyone will contribute or file separate issues?",
        "createdAt": "2022-04-19T16:35:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41252#issuecomment-1102858647"
      },
      {
        "id": "IC_kwDOAQzde85Bwdhm",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-04-19T22:18:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41252#issuecomment-1103222886"
      },
      {
        "id": "IC_kwDOAQzde85Gx48t",
        "parentId": null,
        "author": "hez2010",
        "content": "Seems that Blazor doesn\u0027t support \u0060/p:TrimMode=full\u0060 (with .NET 7 nightly sdk). If I use \u0060/p:TrimMode=full\u0060 while publishing, even a hello world blazor wasm website will fail to load because of trimming.",
        "createdAt": "2022-07-18T13:50:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41252#issuecomment-1187483437"
      },
      {
        "id": "IC_kwDOAQzde85M8agy",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "\u003E Seems that Blazor doesn\u0027t support \u0060/p:TrimMode=full\u0060 (with .NET 7 nightly sdk). If I use \u0060/p:TrimMode=full\u0060 while publishing, even a hello world blazor wasm website will fail to load because of trimming.\r\n\r\n@hez2010 can you please file a separate issue for this? Thanks!",
        "createdAt": "2022-10-25T17:34:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41252#issuecomment-1290905650"
      },
      {
        "id": "IC_kwDOAQzde85O2A_F",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-21T23:14:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41252#issuecomment-1322782661"
      },
      {
        "id": "IC_kwDOAQzde85xp6do",
        "parentId": null,
        "author": "amcasey",
        "content": "@JamesNK I feel like we have a much more sophisticated understanding of our trimming needs now.  Is this issue still relevant?",
        "createdAt": "2024-01-23T19:48:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41252#issuecomment-1906812776"
      },
      {
        "id": "IC_kwDOAQzde85xqwoW",
        "parentId": null,
        "author": "JamesNK",
        "content": "Tests are still important. Does trimming have enough tests? If yes, then close this.",
        "createdAt": "2024-01-23T22:34:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41252#issuecomment-1907034646"
      },
      {
        "id": "IC_kwDOAQzde86LnLbR",
        "parentId": null,
        "author": "captainsafia",
        "content": "Assuming the coverage we want here is via the \u0060Trimming.Tests\u0060 and \u0060NativeAoT.Tests\u0060 infrastructure that is documented [in this doc](https://github.com/dotnet/aspnetcore/blob/951b6ead6510409a7847481f818963e696686ca9/docs/Trimming.md#adding-a-new-test-project), we have coverage for SignalR, OpenAPI, DataProtection, and WebApplicationBuilder so far. We also have source generator tests for minimal APIs that validate compile-time and runtime behavior.\r\n\r\nI think the authentication-related APIs are where we currently have a testing gap. @halter73 confirm if I am wrong.",
        "createdAt": "2024-09-10T22:56:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41252#issuecomment-2342303441"
      },
      {
        "id": "IC_kwDOAQzde86MpsAE",
        "parentId": null,
        "author": "halter73",
        "content": "We definitely have a gap for a lot of auth-related stuff. There are other areas we don\u0027t appear to test trimmed output including MVC/Razor Pages, gRPC, Blazor Server/Web, IIS/HttpSys, static files/assets, and various other middleware. I\u0027m pretty sure we don\u0027t have any plans to support trimming MVC. I\u0027m not sure about the other stuff.",
        "createdAt": "2024-09-19T01:35:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41252#issuecomment-2359738372"
      },
      {
        "id": "IC_kwDOAQzde86NiCfk",
        "parentId": null,
        "author": "mkArtakMSFT",
        "content": "@halter73 can you please file a separate issue for our part of this work, so that we can park it in .NET 10 planning and go from there.",
        "createdAt": "2024-09-25T16:05:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41252#issuecomment-2374510564"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85IVcDM",
    "title": "SignalR per-invocation allocations",
    "url": "https://github.com/dotnet/aspnetcore/issues/41343",
    "createdAt": "2022-04-24T07:59:17Z",
    "lastUpdated": "2024-03-02T00:51:48Z",
    "body": "I\u0027m building a game that requires low latency and there\u0027s some SignalR overhead (that\u0027s pretty low tbh) but impossible to get rid of. The game I\u0027m building is sending LOTS of messages (60 FPS) so these are now the top allocations remaining. \r\n\r\nSome of them we can\u0027t remove, we might be able to pool objects but others we should leave alone. The ones I am interested in improving:\r\n- System.Object\\[\\]\r\n  - Microsoft.AspNetCore.SignalR.ClientProxyExtensions.SendAsync(Microsoft.AspNetCore.SignalR.IClientProxy, string, object, System.Threading.CancellationToken) \r\n  - Microsoft.AspNetCore.SignalR.Protocol.JsonHubProtocol.BindTypes(ref System.Text.Json.Utf8JsonReader, System.Collections.Generic.IReadOnlyList\u003CSystem.Type\u003E)\r\n- Microsoft.AspNetCore.SignalR.Internal.DefaultHubActivator\\\u003CT\\\u003E\r\n- string allocations (https://github.com/dotnet/aspnetcore/issues/41342)\r\n- System.Collections.Concurrent.ConcurrentDictionary\u003C,\u003E.Enumerator (https://github.com/dotnet/runtime/issues/25448)\r\n    -  Microsoft.AspNetCore.SignalR.DefaultHubLifetimeManager\u003CT\u003E.SendToAllConnections(string, System.Object[], System.Func\u003CMicrosoft.AspNetCore.SignalR.HubConnectionContext, object, bool\u003E, object, System.Threading.CancellationToken)\r\n- System.Byte\\[\\] \r\n  - Microsoft.AspNetCore.Internal.MemoryBufferWriter.ToArray\\(\\)\r\n  - Microsoft.AspNetCore.SignalR.Protocol.HubProtocolExtensions.GetMessageBytes\\(Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol, Microsoft.AspNetCore.SignalR.Protocol.HubMessage\\)\r\n  - Microsoft.AspNetCore.SignalR.SerializedHubMessage.GetSerializedMessage\\(Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol\\)\r\n- Microsoft.AspNetCore.SignalR.SerializedHubMessage\r\n- System.Collections.Generic.List\\\u003Cstring\\\u003E - Seems like we allocate a list of empty stream ids since it\u0027s always in the payload even when it\u0027s empty. (https://github.com/dotnet/aspnetcore/pull/41344)\r\n- There are 3 state machine boxes that allocate per operation (read/write)\r\n   - Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.ReadAsyncInternal() (https://github.com/dotnet/aspnetcore/pull/41345)\r\n   - System.IO.Pipelines.StreamPipeReader.ReadAsync.__Core|36_0() (https://github.com/dotnet/runtime/pull/68457)\r\n   - System.Net.Security.SslStream.ReadAsyncInternal() https://github.com/dotnet/runtime/issues/68467\r\n\r\n|Type|Allocations|Bytes|Average Size \\(Bytes\\)|\r\n|-|-|-|-|\r\n|\u00A0-\u00A0System.Runtime.CompilerServices.AsyncTaskMethodBuilder\\\u003C\\\u003E.AsyncStateMachineBox\\\u003C\\\u003E|2,418|477,152|197.33|\r\n|\u00A0-\u00A0System.Object\\[\\]|1,659|53,928|32.51|\r\n|\u00A0-\u00A0Microsoft.AspNetCore.SignalR.Protocol.InvocationMessage|1,631|91,336|56|\r\n|\u00A0-\u00A0System.String|1,629|54,420|33.41|\r\n|\u00A0-\u00A0System.Byte\\[\\]|862|302,374|350.78|\r\n|\u00A0-\u00A0System.Collections.Concurrent.ConcurrentDictionary\\\u003C,\\\u003E.Enumerator|858|55,040|64.15|\r\n|\u00A0-\u00A0Microsoft.AspNetCore.SignalR.SerializedHubMessage|825|72,600|88|\r\n|\u00A0-\u00A0System.Object|825|19,800|24|\r\n|\u00A0-\u00A0System.Int32\\[\\]|808|29,196|36.13|\r\n|\u00A0-\u00A0System.Collections.Generic.List\\\u003C\\\u003E|808|25,856|32|\r\n|\u00A0-\u00A0System.Collections.Generic.Dictionary\\\u003C,\\\u003E.Entry\\[\\]|806|96,720|120|\r\n|\u00A0-\u00A0System.Collections.Generic.Dictionary\\\u003C,\\\u003E|806|64,480|80|\r\n|\u00A0-\u00A0BombRMan.Hubs.GameServer|806|45,136|56|\r\n|\u00A0-\u00A0Microsoft.AspNetCore.SignalR.Protocol.CompletionMessage|806|45,136|56|\r\n|\u00A0-\u00A0Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope|806|38,688|48|\r\n|\u00A0-\u00A0Microsoft.AspNetCore.SignalR.Internal.DefaultHubActivator\\\u003CBombRMan.Hubs.GameServer\\\u003E|806|25,792|32|",
    "upvotes": 0,
    "labels": [
      "Perf",
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85CLhJa",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-04-26T22:35:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41343#issuecomment-1110315610"
      },
      {
        "id": "IC_kwDOAQzde85MAZqV",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T19:29:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41343#issuecomment-1275173525"
      },
      {
        "id": "IC_kwDOAQzde85Q0k9n",
        "parentId": null,
        "author": "davidfowl",
        "content": "We should be able to reduce the enumerator allocations with pooling (https://github.com/dotnet/runtime/pull/38296)",
        "createdAt": "2022-12-17T02:19:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41343#issuecomment-1355960167"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85JWPuD",
    "title": "Group Lifetime Events in signalr",
    "url": "https://github.com/dotnet/aspnetcore/issues/41601",
    "createdAt": "2022-05-10T03:48:59Z",
    "lastUpdated": "2023-06-23T02:06:41Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nSignalr clients have lifetime events like \u0060OnConnectedAsync\u0060 and \u0060OnDisconnectedAsync\u0060. But the groups don\u0027t have events like \u0060OnCreate\u0060, \u0060OnRemove\u0060, \u0060OnUserAdd\u0060, \u0060OnUserRemove\u0060 etc.\r\n\r\nBefore Signal I used to use socket.io(nodejs library) which has rooms similar to signalr groups. But I can find more features in rooms of socket.io than signalr\u0027s groups.\n\n### Describe the solution you\u0027d like\n\nGroup events will be good to have if it is possible to implement.\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85C7yAx",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "What is your scenario for this? We aren\u0027t sure what this would be used for.\r\n\r\nIf we were to add a feature the callback would only be called on the server where a add/remove is initiated (wouldn\u0027t be called across servers) and would only be for connection add/remove, no group add/remove.",
        "createdAt": "2022-05-10T22:33:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41601#issuecomment-1122967601"
      },
      {
        "id": "IC_kwDOAQzde85C7yCp",
        "parentId": null,
        "author": "??",
        "content": "Hi @ziaulhasanhamim. We have added the \u0022Needs: Author Feedback\u0022 label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
        "createdAt": "2022-05-10T22:33:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41601#issuecomment-1122967721"
      },
      {
        "id": "IC_kwDOAQzde85C8L-0",
        "parentId": null,
        "author": "ziaulhasanhamim",
        "content": "Currently, in my scenario, I have some data associated with groups that are stored in Redis. I want to delete the data when the group is removed.",
        "createdAt": "2022-05-11T01:14:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41601#issuecomment-1123073972"
      },
      {
        "id": "IC_kwDOAQzde85DUTCQ",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-05-17T22:48:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41601#issuecomment-1129394320"
      },
      {
        "id": "IC_kwDOAQzde85flN8Z",
        "parentId": null,
        "author": "mitchdenny",
        "content": "I don\u0027t think the needs attention label needs to be here.",
        "createdAt": "2023-06-23T02:06:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41601#issuecomment-1603591961"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85JmND3",
    "title": "[SignalR] Client keepalive check is disabled when I debug my hub server",
    "url": "https://github.com/dotnet/aspnetcore/issues/41673",
    "createdAt": "2022-05-13T05:18:42Z",
    "lastUpdated": "2024-08-29T18:34:07Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nClient ping timeout check is disabled when I debug my hub server\n\n### Expected Behavior\n\nI should be able to see \u0060OnDisconnectedAsync\u0060 triggered when client does not send out ping messages\n\n### Steps To Reproduce\n\n1. Create a simple Hub server\r\n2. Shorten \u0060ClientTimeoutInterval\u0060 to 5 seconds: \u0060services.AddSignalR(o=\u003Eo.ClientTimeoutInterval=TimeSpan.FromSeconds(5));\u0060\r\n3. Override OnDisconnectedAsync in the hub and insert a breakpoint there\r\n4. F5 to start debugging my hub\r\n5. OnDisconnectedAsync is never triggered because KeepAlive check is disabled when Debugger is attached: https://github.com/dotnet/aspnetcore/blob/88ee825bca9978df7f1d8c8c09b71b6dffeeb53b/src/SignalR/server/Core/src/HubConnectionContext.cs#L656 \n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n6.0.203\n\n### Anything else?\n\n_No response_",
    "upvotes": 1,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85DGE8A",
        "parentId": null,
        "author": "davidfowl",
        "content": "We should probably put all of these checks under a \u0060#if  DEBUG\u0060 check",
        "createdAt": "2022-05-13T05:19:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-1125666560"
      },
      {
        "id": "IC_kwDOAQzde85DUSuR",
        "parentId": null,
        "author": "halter73",
        "content": "\u003E We should probably put all of these checks under a \u0060#if DEBUG\u0060 check\r\n\r\nWe do this to make it easy for developers using SignalR don\u0027t time out their connection. Trying to test timeouts is a niche use case, and you can generally do testing for that specifically, when not under a debugger.",
        "createdAt": "2022-05-17T22:45:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-1129393041"
      },
      {
        "id": "IC_kwDOAQzde85DUdMf",
        "parentId": null,
        "author": "davidfowl",
        "content": "I\u0027m not sure we\u0027ve proven that \uD83D\uDE04 ",
        "createdAt": "2022-05-18T00:11:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-1129435935"
      },
      {
        "id": "IC_kwDOAQzde85DZo2i",
        "parentId": null,
        "author": "vicancy",
        "content": "This sounds inconsistent experience to me though. It is a hidden trick that I don\u0027t know until looking into the code. Maybe some explicit config to disable the timeout could be better?",
        "createdAt": "2022-05-19T00:10:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-1130794402"
      },
      {
        "id": "IC_kwDOAQzde85DebbA",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "The scenario where you test OnDisconnectedAsync when the client fails to send a keep alive is very specific IMO, if the client actually disconnects (via StopAsync, LongPoll takes 90 seconds, etc) then OnDisconnectedAsync will be called while debugging. I\u0027m not sure how useful an option for this would be since it\u0027s still something people will need to find and set and it\u0027s a very specific scenario that can generally be done while not under a debugger. My 2 cents.",
        "createdAt": "2022-05-19T18:24:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-1132050112"
      },
      {
        "id": "IC_kwDOAQzde85DefZG",
        "parentId": null,
        "author": "davidfowl",
        "content": "Feels bad that there\u0027s no workaround for this. Even if it\u0027s obscure.",
        "createdAt": "2022-05-19T18:37:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-1132066374"
      },
      {
        "id": "IC_kwDOAQzde85Dflf8",
        "parentId": null,
        "author": "halter73",
        "content": "To me it feels a lot like how you can\u0027t test what happens when task become unrooted under a debugger making it impossible for library authors like us to write tests about how we treat this condition (which is pretty important because it\u0027s one of the few ways to test code that enters a \u0060try/finally\u0060 but never exits) that runs under a debugger.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/9a81d79124c46fa883132b48715ab3a08b7425a5/src/Servers/Kestrel/test/InMemory.FunctionalTests/HttpConnectionManagerTests.cs#L22-L29\r\n\r\nI don\u0027t think we need to add a knob for a niche thing like this. To many settings can be overwhelming. But maybe we can make our \u0060if (Debugger.IsAttached)\u0060 check read a static field that\u0027s easily modifiable by a debugger along the lines of what \u0060Task\u0060 does.\r\n\r\nhttps://github.com/dotnet/runtime/blob/327e266efd36608331acdc620e846a889dc6aebc/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs#L180-L182\r\n\r\nIn our case, the debugger wouldn\u0027t be automatically setting the field, so the check would have to be something like \u0060if (Debugger.IsAttached \u0026\u0026 !_ignoreDebugger)\u0060.",
        "createdAt": "2022-05-20T01:26:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-1132353532"
      },
      {
        "id": "IC_kwDOAQzde85DfmW3",
        "parentId": null,
        "author": "davidfowl",
        "content": "What about an appcontext switch or env variable?",
        "createdAt": "2022-05-20T01:34:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-1132357047"
      },
      {
        "id": "IC_kwDOAQzde85Dfn-_",
        "parentId": null,
        "author": "halter73",
        "content": "You have a debugger. A static field is manually and programmatically configurable with a debugger. Reflection is an option too. Who\u0027s setting appcontext switch or setting an environment variable when they attach a debugger?",
        "createdAt": "2022-05-20T01:50:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-1132363711"
      },
      {
        "id": "IC_kwDOAQzde85DfoY8",
        "parentId": null,
        "author": "davidfowl",
        "content": "The setting isn\u0027t about the debugger. The setting is the value of the **timeout** when the debugger is attached.",
        "createdAt": "2022-05-20T01:54:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-1132365372"
      },
      {
        "id": "IC_kwDOAQzde85DvWE1",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "I don\u0027t think a configurable timeout is a good idea, we already let the user change keep alive interval and server timeout etc. this wouldn\u0027t actually do what users would want.\r\n\r\nWe could have an appcontext switch, but I think it\u0027s super low priority.",
        "createdAt": "2022-05-24T22:19:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-1136484661"
      },
      {
        "id": "IC_kwDOAQzde85DvWF6",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-05-24T22:19:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-1136484730"
      },
      {
        "id": "IC_kwDOAQzde85D3g_d",
        "parentId": null,
        "author": "davidfowl",
        "content": "This isn\u0027t about a configurable timeout, it\u0027s a way to turn off the default behavior where debugger attached is assumed to mean infinite.\r\n",
        "createdAt": "2022-05-26T14:16:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-1138626525"
      },
      {
        "id": "IC_kwDOAQzde85pdeR6",
        "parentId": null,
        "author": "AbakumovAlexandr",
        "content": "Are there any updates on this?\r\n\r\nThis is really a nonsensical and obscure \u0027feature\u0027. I was under an impression that disconnecting doesn\u0027t work in SignalR at all until doing a long Google search.\r\n\r\n\u003E We do this to make it easy for developers using SignalR don\u0027t time out their connection.\r\n\r\nIf I do want to not time out connections while debugging - I simply would increase those config timeout options in the Debug mode and it would make the prefect sense for just about everyone using SignalR.\r\n\r\nWhy on earth there should be undocumented\\hidden behavior discrepancies between how the Framework code works in Debug vs Release mode? And moreover, why there\u0027s no any config option to disable this lovely \u0027feature\u0027?",
        "createdAt": "2023-10-18T21:16:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-1769333882"
      },
      {
        "id": "IC_kwDOAQzde86KMtvl",
        "parentId": null,
        "author": "charlesdwmorrison",
        "content": "Just want to mention that a Bing search brought me to this issue as well. I\u0027m on .Net8 and the 8.08 versions of the SignalR NuGet packages. And was using SignalR in an NUnit test method. \r\nBut I think there is **not really an issue.** So I a posting my solution for anyone else who lands here.\r\n\r\n- When I ran my app without debugging (in a normal run), SignalR worked; my clients got the message.\r\n- But in debug mode it seemed like the messages I was sending were not making it to my SignalR hub.\r\n- I found out that the real problem was that the StartAsync() method on the hub initialization needed to have an \u0022await\u0022 in front of it.\r\n- This means I really needed to put the hub initialization and \u0022 await _hubConnection.StartAysnc()\u0022 code inside an async method.\r\n- If you think about it, a method that says \u0022startAysnc\u0022 *must* need to be inside an async method.\r\n- However, the IDE only gives you a little green line about this, not a full blown error.\r\n- I wanted the hub connection and StartAysnc() method to be in NUnit\u0027s \u0022Setup()\u0022 method. By default the VS NUnit template does not make this method aysnc, so I just didn\u0027t see it.\r\n\r\nSo that was the solution for me: change my \u0022Setup()\u0022 method to aysnc and then do awaits like this:\r\n\r\n  await _hubConnection.StartAsync();\r\n  await _hubConnection.InvokeAsync(\u0022ExecuteMyMethodOnTheHub\u0022);\r\n\r\nNote that the hub initialization code does NOT require awaits . . . . so it\u0027s easy to miss this.\r\n\r\nWhy this worked in Run mode, but not in debug mode, I don\u0027t understand. But that consistently happened for me. Was driving me crazy.\r\n\r\nIt seems like  maybe the .Net framework should trigger a red-squiggly  if you fail to put await in front of _hubConnection.StartAsync();.\r\n\r\nSignalR is a great technology, Microsoft did a great job with it and I hope to see it continued to be pushed forward. \r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2024-08-29T18:34:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41673#issuecomment-2318588901"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85JyfjH",
    "title": "[Trimming] SignalR",
    "url": "https://github.com/dotnet/aspnetcore/issues/41704",
    "createdAt": "2022-05-17T02:37:44Z",
    "lastUpdated": "2024-10-22T01:34:13Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nSignalR should run in a trimmed app.\n\n### Describe the solution you\u0027d like\n\nShipping projects under https://github.com/dotnet/aspnetcore/tree/main/src/SignalR need to add support for trimming.\r\n\r\nSee [https://github.com/dotnet/aspnetcore/blob/main/docs/Trimming.md](https://github.com/dotnet/aspnetcore/blob/main/docs/Trimming.md?rgh-link-date=2022-05-17T02%3A36%3A27Z) for instructions\n\n### Additional context\n\n_No response_",
    "upvotes": 1,
    "labels": [
      "area-signalr",
      "linker-friendliness"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85DURZS",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-05-17T22:34:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41704#issuecomment-1129387602"
      },
      {
        "id": "IC_kwDOAQzde85KK3Nl",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-09-12T20:15:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41704#issuecomment-1244361573"
      },
      {
        "id": "IC_kwDOAQzde85s00es",
        "parentId": null,
        "author": "bbougot",
        "content": "Hey there!\r\nWe really need this happening, do you have an ETA?",
        "createdAt": "2023-11-24T14:56:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41704#issuecomment-1825785772"
      },
      {
        "id": "IC_kwDOAQzde85s08B2",
        "parentId": null,
        "author": "davidfowl",
        "content": ".NET ships yearly. We just finished 8, so 9 is next year. This will be considered in planning (which we haven\u2019t done yet)",
        "createdAt": "2023-11-24T15:22:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41704#issuecomment-1825816694"
      },
      {
        "id": "IC_kwDOAQzde85s09VZ",
        "parentId": null,
        "author": "bbougot",
        "content": "Thank you for your answer @davidfowl. I guess this won\u0027t weight much, but if it could get prioritized that\u0027ll be awesome. There isn\u0027t any solid alternative to SignalR, and this NativeAOT compatiblity is our single blocker as of today.",
        "createdAt": "2023-11-24T15:27:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41704#issuecomment-1825822041"
      },
      {
        "id": "IC_kwDOAQzde85s1Knf",
        "parentId": null,
        "author": "davidfowl",
        "content": "You can use raw WebSockets as an alternative. NativeAOT incompatibility is going to everywhere \uD83D\uDE04 that didn\u0027t plan for it.",
        "createdAt": "2023-11-24T16:19:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41704#issuecomment-1825876447"
      },
      {
        "id": "IC_kwDOAQzde86Ci8_v",
        "parentId": null,
        "author": "eerhardt",
        "content": "https://github.com/dotnet/aspnetcore/pull/56079 and https://github.com/dotnet/aspnetcore/pull/56460 make the core of SignalR client and server, along with the JsonProtocol trimming and AOT compatible with the following known limitations/drawbacks:\r\n\r\n* Only the JSON protocol is currently supported\r\n    * Need to use the Source Generator - both client and server. This follows the same approach as Minimal APIs.\r\n* SignalR Server parameters of type \u0060IAsyncEnumerable\u003CT\u003E\u0060 and \u0060ChannelReader\u003CT\u003E\u0060 where \u0060T\u0060 is a ValueType are not supported\r\n    * Will get runtime exceptions at startup during F5 time and in published app\r\n    * The SignalR client supports passing in \u0060IAsyncEnumerable\u003CT\u003E\u0060 and \u0060ChannelReader\u003CT\u003E\u0060 parameters where \u0060T\u0060 is a ValueType in native AOT. It is only the server where this scenario can\u0027t be supported.\r\n    * Return types of \u0060IAsyncEnumerable\u003CT\u003E\u0060 and \u0060ChannelReader\u003CT\u003E\u0060 where \u0060T\u0060 is a ValueType are supported in both the client and the server\r\n    * See https://github.com/dotnet/aspnetcore/issues/56179#issuecomment-2204359353 for more information.\r\n* Custom awaitables and certain F# patterns on the server are not supported in trimming or AOT\r\n    * There is a Feature switch (\u0060Microsoft.AspNetCore.SignalR.Hub.IsCustomAwaitableSupported\u0060 AppContext switch and \u0060SignalRCustomAwaitableSupport\u0060 MSBuild property) that is disabled by default in trimmed and AOT\u0027d apps\r\n* Client proxy generation is not supported in PublishAot - will get warnings at build-time\r\n    * Works with PublishTrimmed with no warnings\r\n",
        "createdAt": "2024-06-25T23:32:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41704#issuecomment-2190200815"
      },
      {
        "id": "IC_kwDOAQzde86ECNMk",
        "parentId": null,
        "author": "eerhardt",
        "content": "The core of SignalR server and client is trimming and native AOT compatible as of .NET 9 Preview 7. Along with the Json protocol.\r\n\r\nLeaving this issue open to track also making the following trim and native AOT compatible:\r\n\r\n* [MessagePack protocol](https://github.com/dotnet/aspnetcore/tree/main/src/SignalR/common/Protocols.MessagePack/src)\r\n* [Microsoft.AspNetCore.SignalR.StackExchangeRedis](https://github.com/dotnet/aspnetcore/tree/main/src/SignalR/server/StackExchangeRedis)",
        "createdAt": "2024-07-08T20:12:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41704#issuecomment-2215170852"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85KHfwK",
    "title": "Null results not handled correctly in Java client",
    "url": "https://github.com/dotnet/aspnetcore/issues/41775",
    "createdAt": "2022-05-20T18:18:19Z",
    "lastUpdated": "2024-03-02T00:51:49Z",
    "body": "We don\u0027t differentiate between a null result and no result in the Java client today. Looking at the .NET client we have a \u0060hasResult\u0060 parameter when constructing the CompletionMessage\r\nhttps://github.com/dotnet/aspnetcore/blob/e9a9108db352b714a64a01ff3be5c5c59e08ca7c/src/SignalR/common/SignalR.Common/src/Protocol/CompletionMessage.cs#L36\r\nvs. no \u0060hasResult\u0060 in the Java client.\r\nhttps://github.com/dotnet/aspnetcore/blob/e9a9108db352b714a64a01ff3be5c5c59e08ca7c/src/SignalR/clients/java/signalr/core/src/main/java/com/microsoft/signalr/CompletionMessage.java#L15\r\n\r\nThis causes code like below to never complete the client-side invoke:\r\n\u0060\u0060\u0060csharp\r\nclass MyHub : Hub\r\n{\r\n    Task\u003Cstring?\u003E Get()\r\n    {\r\n        return Task.FromResult\u003Cstring?\u003E(null);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\u0060\u0060\u0060java\r\nconnection.invoke(String.class, \u0022Get\u0022).blockingGet();\r\n\u0060\u0060\u0060",
    "upvotes": 1,
    "labels": [
      "bug",
      "area-signalr",
      "feature-client-java"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85DvVtD",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-05-24T22:16:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41775#issuecomment-1136483139"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85K9H9c",
    "title": "Hub methods can soft-lock the connection",
    "url": "https://github.com/dotnet/aspnetcore/issues/41997",
    "createdAt": "2022-06-02T02:18:40Z",
    "lastUpdated": "2024-03-02T00:51:49Z",
    "body": "Today we detect if you allow parallel hub invocations and throw if you don\u0027t when trying to use the feature. This doesn\u0027t work if you use IHubContext in the Hub, or if you have multiple waiting results for the same connections Hubs.\r\nThis is also especially bad in OnConnectedAsync because that\u0027s a special method that runs before the receive loop starts, we need to throw/unblock/warn etc. for this",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "severity-blocking"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85ENVt5",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-06-02T02:19:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41997#issuecomment-1144347513"
      },
      {
        "id": "IC_kwDOAQzde85I3wIV",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "The biggest issue with this is resolved.\r\n\r\nWhat remains is using an injected \u0060IHubContext\u003CTHub\u003E\u0060 in the Hub can still cause issues.",
        "createdAt": "2022-08-22T16:09:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41997#issuecomment-1222574613"
      },
      {
        "id": "IC_kwDOAQzde85I3wSx",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 7 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-08-22T16:10:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/41997#issuecomment-1222575281"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85M8IcA",
    "title": "SignalR send to all connections by user ID except one.",
    "url": "https://github.com/dotnet/aspnetcore/issues/42513",
    "createdAt": "2022-07-01T02:38:26Z",
    "lastUpdated": "2024-03-02T00:51:49Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI have a use case for being able to call a SignalR client method for all connections for a given user ID, except the current connection.\n\n### Describe the solution you\u0027d like\n\nI see that the API provides GroupExcept and AllExcept but I didn\u0027t find a way to do essentially \u0022UserExcept\u0022. Is there a way to do this that I\u0027m simply not finding? Is there a reason that this option wasn\u0027t included? The fact that it\u0027s missing makes me wonder if there\u0027s something wrong with what I\u0027m trying to do, but I can\u0027t see how that would be the case.\r\n\r\nWhat I\u0027m doing as a workaround is adding every connection to a group named after their user ID, and then using GroupExcept to do what I need.\r\n\r\nThank you!\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85OCL2d",
    "title": "JS Client reconnection, HubConnection.ts. Incorrect number of reconnection attempts is logged.",
    "url": "https://github.com/dotnet/aspnetcore/issues/42806",
    "createdAt": "2022-07-19T08:51:35Z",
    "lastUpdated": "2023-10-28T14:07:57Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\n_JS SignalR Client version: 6.0.7_\r\n\u0060\u0060\u0060\r\n/** The version of the SignalR client. */\r\nconst VERSION = \u00226.0.7\u0022;\r\n\u0060\u0060\u0060\r\n\r\n_Overview._\r\n\r\nUsing standard SignalR reconnection mechanism, and in case connection was not finally established, the _number of reconnection attempts_ is incorrectly logged. The number is -\u003E **reconnection attempts \u002B 1**, but expected to be -\u003E _reconnection attempts_. \r\n\r\n_Details._\r\n\r\nsource: \u0060HubConnection.ts\u0060\r\nmethod: \u0060private async _reconnect(error?: Error)\u0060\r\n\r\nProblematic code-snippet \u0060_reconnect()\u0060 loop source:\r\n\u0060\u0060\u0060 \r\nwhile (nextRetryDelay !== null) {\r\n    this._logger.log(LogLevel.Information, \u0060Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.\u0060);\r\n\r\n    //...\r\n\r\n    try {\r\n        await this._startInternal();\r\n\r\n        // ...\r\n\r\n        return;\r\n    } catch (e) {\r\n        this._logger.log(LogLevel.Information, \u0060Reconnect attempt failed because of error \u0027${e}\u0027.\u0060);\r\n        // ... \r\n\r\n        retryError = e instanceof Error ? e : new Error(e.toString());\r\n        // ! source code line number 822, previousReconnectAttempts\u002B\u002B\r\n        // increment, which finally influence on the incorrect log message (in case connection was not established).\r\n        nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts\u002B\u002B, Date.now() - reconnectStartTime, retryError);\r\n    }\r\n}\r\n\r\n// ! source code line number 826\r\n// incorrect number of reconnection attempts logged.\r\nthis._logger.log(LogLevel.Information, \u0060Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.\u0060);\r\n\r\nthis._completeClose();\r\n\u0060\u0060\u0060\r\n\r\nsource line 822:  \r\n\u0060\u0060\u0060nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts\u002B\u002B, Date.now() - reconnectStartTime, retryError);\u0060\u0060\u0060\r\nsource line 826:  \r\n\u0060\u0060\u0060this._logger.log(LogLevel.Information, \u0060Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.\u0060);\u0060\u0060\u0060\r\n\r\n_Issue example._\r\n\r\nWhen standard \u0060.withAutomaticReconnect()\u0060 (witch attempts to reconnect 4 times [0, 2000, 10000, 30000]) fails to reconnect the following log message is logged:\r\n\u0060\u0060\u0060\r\n[2022-07-19T07:55:10.103Z] Information: Reconnect retries have been exhausted after 58811 ms and 5 failed attempts. Connection disconnecting.\r\n\u0060\u0060\u0060\r\nMessage contains **5** attempts, but actually there were **4** attempts.\n\n### Expected Behavior\n\nIn case reconnection fails to establish connection, then _the number of attempts logged_ should correspond to _the number of actual reconnection attempts_.\n\n### Steps To Reproduce\n\n1. Create connection and start it.\r\n\u0060\u0060\u0060\r\nconst hubConnection = new signalR.HubConnectionBuilder()\r\n    .withUrl(\u0022\u003CconnectionURL\u003E\u0022)\r\n    .withAutomaticReconnect()\r\n    .configureLogging(signalR.LogLevel.Information);\r\n\r\n\r\nhubConnection.start();\r\n\u0060\u0060\u0060\r\n\r\n2. Stop hub, interrupting (closing) connection.\r\n\r\n3. Check log messages.\r\n\r\nExample:\r\n\u0060\u0060\u0060\r\n[2022-07-19T07:54:11.293Z] Information: Reconnect attempt number 1 will start in 0 ms.\r\n\r\n\r\n[2022-07-19T07:54:15.388Z] Information: Reconnect attempt failed because of error \u0027Error: Failed to complete negotiation with the server: TypeError: Failed to fetch\u0027.\r\n[2022-07-19T07:54:15.388Z] Information: Reconnect attempt number 2 will start in 2000 ms.\r\n[2022-07-19T07:54:21.464Z] Warning: Error from HTTP request. TypeError: Failed to fetch.\r\n\r\n\r\n[2022-07-19T07:54:21.465Z] Information: Reconnect attempt failed because of error \u0027Error: Failed to complete negotiation with the server: TypeError: Failed to fetch\u0027.\r\n[2022-07-19T07:54:21.465Z] Information: Reconnect attempt number 3 will start in 10000 ms.\r\n[2022-07-19T07:54:35.575Z] Warning: Error from HTTP request. TypeError: Failed to fetch.\r\n\r\n\r\n[2022-07-19T07:54:35.576Z] Information: Reconnect attempt failed because of error \u0027Error: Failed to complete negotiation with the server: TypeError: Failed to fetch\u0027.\r\n[2022-07-19T07:54:35.576Z] Information: Reconnect attempt number 4 will start in 30000 ms.\r\n[2022-07-19T07:55:10.102Z] Warning: Error from HTTP request. TypeError: Failed to fetch.\r\n\r\n\r\n[2022-07-19T07:55:10.103Z] Information: Reconnect attempt failed because of error \u0027Error: Failed to complete negotiation with the server: TypeError: Failed to fetch\u0027.\r\n[2022-07-19T07:55:10.103Z] Information: Reconnect retries have been exhausted after 58811 ms and 5 failed attempts. Connection disconnecting.\r\n\u0060\u0060\u0060\r\nThere were 4 actual attempts to reconnect. Logged 5 attempts -\u003E \u0022Reconnect retries have been exhausted after 58811 ms and **5 failed attempts**.\u0022\r\n\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n6.0.300\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "bug",
      "area-signalr",
      "good first issue",
      "help candidate"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85G3Bxs",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-07-19T09:37:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42806#issuecomment-1188830316"
      },
      {
        "id": "IC_kwDOAQzde85G3CUq",
        "parentId": null,
        "author": "javiercn",
        "content": "@babinik thanks for contacting us.\r\n\r\nThis seems like a classic off by one bug, feel free to send us a PR if you want to contribute a fix.",
        "createdAt": "2022-07-19T09:40:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42806#issuecomment-1188832554"
      },
      {
        "id": "IC_kwDOAQzde85G5wyB",
        "parentId": null,
        "author": "JakeYallop",
        "content": "Is this definitely a bug? To me this seems correct - 5 attempts have been made, 1 initial attempt and 4 retries. Maybe slightly different wording would be clearer?\r\n\r\nI can see from the code snippet that the intention of the code was at least to report retries.",
        "createdAt": "2022-07-19T21:02:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42806#issuecomment-1189547137"
      },
      {
        "id": "IC_kwDOAQzde85HNM3A",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Same issue in the .NET client since it was written at the same time: https://github.com/dotnet/aspnetcore/issues/34549",
        "createdAt": "2022-07-25T21:19:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42806#issuecomment-1194642880"
      },
      {
        "id": "IC_kwDOAQzde85MZnty",
        "parentId": null,
        "author": "??",
        "content": "@JakeYallop  \r\n\r\nI understand your reasoning for thinking so. However, look at the log this way. There are 5 entries printed total. Considering the small amount of retries of 5, this is probably something that doesn\u0027t usually fail often. The first run that hits the function that logs that line wouldn\u0027t have even run completely once through the while loop if you look into the call stack of the code, so why would it need to be logged as \u0022reconnect attempt 1\u0022 when the variable is originally declared as 0 and the run hasn\u0027t completed yet?\r\n\r\nI have submitted a PR here. [#44611](https://github.com/dotnet/aspnetcore/pull/44611)",
        "createdAt": "2022-10-18T04:02:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42806#issuecomment-1281784690"
      },
      {
        "id": "IC_kwDOAQzde85MrSib",
        "parentId": null,
        "author": "??",
        "content": "The ticket was related to making a SignalR connection where a two way bi-directional connection needs to be setup on the server, the server accepting the TCP/AMQP connection would be where the connection would have to be established. There is a HubConnection.cs located underneath the project Microsoft.AspNetCore.SignalR.Client.Core. Through further examination of the logging messages that are posted to the issue https://github.com/dotnet/aspnetcore/issues/42806, the same text strings that are being logged can be found at HubConnection.Log.cs underneth the same Microsoft.AspNetCore.SignalR.Client.Core project.\r\n\r\nIf anyone else wants to take a look and give me a second pair of eyes.",
        "createdAt": "2022-10-21T03:38:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/42806#issuecomment-1286416539"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85QPg4l",
    "title": "[SignalR] Precision on specifications for MessagePack",
    "url": "https://github.com/dotnet/aspnetcore/issues/43455",
    "createdAt": "2022-08-22T11:24:06Z",
    "lastUpdated": "2024-03-02T00:51:50Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nHi,\r\nI try to create a lib to communicate with SignalR from an Arduino ([ESP32S2 Saola](https://docs.espressif.com/projects/esp-idf/en/latest/esp32s2/hw-reference/esp32s2/user-guide-saola-1-v1.2.html) to be precise) and I\u0027m using [HubProtocol.md](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md) as reference for my dev.\r\n\r\nAs Arduino is a very limited device, I want to use MessagePack as serialization and websocket as transport but I\u0027ve 2 \u0022issues\u0022. \r\n\r\n1) The HandshakeResponse is sended in binary and not in text\r\n\r\nIt\u0027s not really an issue, I can manage a response in binary but in [TransportProtocols.md](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md) it is specified this \u0022When using a text-based protocol like JSON, it is preferable for the WebSockets transport to use Text frames.\u0022. As Handshake is always in json, I\u0027ve waited for a response in text. Maybe, it\u0027s a good idea to specify in the document that when using MessagePack, the reponse will be in binary.\r\n\r\n2) In regular frame after Handshake, I have 1 unspecified byte more in frame\r\n\r\nI\u0027ve verified with Wireshark the problem :\r\n![image](https://user-images.githubusercontent.com/13921115/185906644-9fa67b50-7ff6-475c-91b3-346c6ab80ba0.png)\r\n\r\nAt the end of the payload, 0x82 0x03 is a correct websocket header that specify a binary frame with 3 bytes of payload and 0x91 0x06 is a valid Ping message but what is 0x02 ? I have checked the whole documentation and nowhere it\u0027s specified a header or something else between the websocket header and the message. For reference, I quote the Ping message specification :\r\n\r\n![image](https://user-images.githubusercontent.com/13921115/185907896-c39dda09-afa8-4846-aa0b-0e63fc0e88fa.png)\r\n\n\n### Expected Behavior\n\nSuppression of the \u0022unwanted\u0022 byte or a modification of the specification to tell what is this byte to be able to write a conform client\n\n### Steps To Reproduce\n\nMy test program (on C# side) is very simple, 1 aspnet core project with 1 SignalR hub:\r\n\r\nProgram.cs:\r\n\u0060\u0060\u0060csharp\r\nnamespace Arduino.SignalR.Client.DemoServer\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var builder = WebApplication.CreateBuilder(args);\r\n\r\n            builder.Services.AddSignalR().AddMessagePackProtocol();\r\n\r\n            var app = builder.Build();\r\n\r\n            app.MapHub\u003CTestHub\u003E(\u0022/TestHub\u0022);\r\n\r\n            app.Run();\r\n        }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nTestHub.cs:\r\n\u0060\u0060\u0060csharp\r\nusing Microsoft.AspNetCore.SignalR;\r\n\r\nnamespace Arduino.SignalR.Client.DemoServer\r\n{\r\n    public class TestHub : Hub\r\n    {\r\n        public async Task EchoMessage(string message)\r\n        {\r\n            await Clients.All.SendAsync(\u0022ReceivedMessage\u0022, message);\r\n        }\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThe Arduino side is a little more complexe and could be find here [Arduino.SignalR.Client](https://github.com/EscapeAutomate/Arduino.SignalR.Client). It\u0027s a WIP :)\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n6.0.400\n\n### Anything else?\n\nASP.NET Core version: 6.0\r\nIDE: Visual studio for C# and Cpp\r\n\r\n\u0060\u0060\u0060\r\ndotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.400\r\n Commit:    7771abd614\r\n\r\nEnvironnement d\u0027ex\u00E9cution\u00A0:\r\n OS Name:     Windows\r\n OS Version:  10.0.19044\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.400\\\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nHost:\r\n  Version:      6.0.8\r\n  Architecture: x64\r\n  Commit:       55fb7ef977\r\n\r\n.NET SDKs installed:\r\n  2.2.207 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.422 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.303 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.408 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.202 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.203 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.303 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet-download\r\n\r\nLearn about .NET Runtimes and SDKs:\r\n  https://aka.ms/dotnet/runtimes-sdk-info\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "Docs",
      "area-signalr",
      "net8_docathon"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85I3Zf1",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E It\u0027s not really an issue, I can manage a response in binary but in [TransportProtocols.md](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md) it is specified this \u0022When using a text-based protocol like JSON, it is preferable for the WebSockets transport to use Text frames.\u0022. As Handshake is always in json, I\u0027ve waited for a response in text. Maybe, it\u0027s a good idea to specify in the document that when using MessagePack, the reponse will be in binary.\r\n\r\nThat\u0027s a good point. Since SignalR assumes a \u0022stream based transport\u0022 there\u0027s no way to mark individual messages so the entire transport is either considered binary or text. We should update this in the spec.\r\n\r\nPS: We have a C\u002B\u002B client here that maybe you can take inspiration from (or directly use) https://github.com/aspnet/SignalR-Client-Cpp/tree/main/src/signalrclient",
        "createdAt": "2022-08-22T15:00:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43455#issuecomment-1222481909"
      },
      {
        "id": "IC_kwDOAQzde85I3dne",
        "parentId": null,
        "author": "LioRei",
        "content": "I\u0027ve seen this repo only today :) but I can\u0027t use it directly (too much dependencies that require a \u0022real\u0022 Cpp compilator).\r\nBut yes, it would be a good example of what to do and how",
        "createdAt": "2022-08-22T15:13:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43455#issuecomment-1222498782"
      },
      {
        "id": "IC_kwDOAQzde85I3qtV",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E 0x91 0x06 is a valid Ping message but what is 0x02 ?\r\n\r\nThe MessagePack hub protocol is well defined at https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md#messagepack-msgpack-encoding, the \u00600x02\u0060 is specifically the length prefix described at https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md#binary-encoding",
        "createdAt": "2022-08-22T15:54:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43455#issuecomment-1222552405"
      },
      {
        "id": "IC_kwDOAQzde85I3zg-",
        "parentId": null,
        "author": "LioRei",
        "content": "My bad, I\u0027ve not read this section as I have a lib who do the serialization for me \uD83D\uDE05\r\nMaybe this section worth a better visibility ? Like being between \u0022MessagePack (MsgPack) encoding\u0022 and \u0022Invocation Message Encoding\u0022?\r\n\r\nThx for the response, I can continue my work to connect small object to big datacenter in real time ",
        "createdAt": "2022-08-22T16:19:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43455#issuecomment-1222588478"
      },
      {
        "id": "IC_kwDOAQzde85I3z3o",
        "parentId": null,
        "author": "LioRei",
        "content": "You can close this issue if you want \uD83D\uDE09",
        "createdAt": "2022-08-22T16:20:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43455#issuecomment-1222589928"
      },
      {
        "id": "IC_kwDOAQzde85I30Nx",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E As Handshake is always in json, I\u0027ve waited for a response in text. Maybe, it\u0027s a good idea to specify in the document that when using MessagePack, the reponse will be in binary.\r\n\r\nThis is definitely worth calling out, let\u0027s keep the issue open for doc improvements.",
        "createdAt": "2022-08-22T16:21:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43455#issuecomment-1222591345"
      },
      {
        "id": "IC_kwDOAQzde85Kfkjq",
        "parentId": null,
        "author": "wadepickett",
        "content": "@BrennanConroy, Are we good with how we point out the messages are binary in this section here?: [Use MessagePack Hub Protocol in SignalR for ASP.NET Core - What is MessagePack?] https://docs.microsoft.com/en-us/aspnet/core/signalr/messagepackhubprotocol?view=aspnetcore-6.0#what-is-messagepack].  Is something more needed?  If that is good, then I will verify we have something similar in other SignalR docs that mention MessagePack.",
        "createdAt": "2022-09-16T20:38:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43455#issuecomment-1249790186"
      },
      {
        "id": "IC_kwDOAQzde85Kfkxo",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "This is tracking updating https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md, sorry we used the same label you\u0027re now looking at for the docs repo.",
        "createdAt": "2022-09-16T20:39:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43455#issuecomment-1249791080"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85QayFr",
    "title": "HubClientProxyGenerator doesn\u0027t run when using inferred generic type arguments",
    "url": "https://github.com/dotnet/aspnetcore/issues/43510",
    "createdAt": "2022-08-24T10:13:59Z",
    "lastUpdated": "2024-03-02T00:51:50Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nSignalR client proxy code isn\u0027t generated when using the extension method with auto-inferred type arguments (as suggested by Visual Studio).\r\n\r\n### Expected Behavior\r\n\r\nThe proxy code is generated.\r\n\r\n### Steps To Reproduce\r\n\r\nAdd [\u0060Microsoft.AspNetCore.SignalR.Client.SourceGenerator\u0060](https://www.nuget.org/packages/Microsoft.AspNetCore.SignalR.Client.SourceGenerator) package reference, add this code to a C# file:\r\n\r\n\u0060\u0060\u0060csharp\r\nusing Microsoft.AspNetCore.SignalR.Client;\r\n\r\nnamespace ConsoleApp4;\r\n\r\ninternal static class Program\r\n{\r\n    static HubConnection hubConnection = null!;\r\n\r\n    static void Main()\r\n    {\r\n        hubConnection = new HubConnectionBuilder().WithUrl(\u0022...\u0022).Build();\r\n    }\r\n\r\n    static void Register(IClient client)\r\n    {\r\n        // \\/ Remove type argument here \\/\r\n        hubConnection.RegisterClient\u003CIClient\u003E(client);\r\n    }\r\n}\r\n\r\n[AttributeUsage(AttributeTargets.Method)]\r\ninternal class HubServerProxyAttribute : Attribute\r\n{\r\n}\r\n\r\n[AttributeUsage(AttributeTargets.Method)]\r\ninternal class HubClientProxyAttribute : Attribute\r\n{\r\n}\r\n\r\ninternal static partial class MyCustomExtensions\r\n{\r\n    [HubClientProxy]\r\n    public static partial IDisposable RegisterClient\u003CT\u003E(this HubConnection connection, T provider);\r\n\r\n    [HubServerProxy]\r\n    public static partial T GetServerProxy\u003CT\u003E(this HubConnection connection);\r\n}\r\n\r\npublic interface IServerHub\r\n{\r\n    Task SendMessage(string message);\r\n}\r\n\r\npublic interface IClient\r\n{\r\n    Task ReceiveMessage(string message);\r\n}\r\n\r\npublic class Client : IClient\r\n{\r\n    public Task ReceiveMessage(string message) =\u003E Task.CompletedTask;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nthen remove the generic type argument at line 18.",
    "upvotes": 0,
    "labels": [
      "bug",
      "area-signalr",
      "help candidate"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85JmpJx",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Looks like the issue is with how we initially filter nodes in the parser:\r\nhttps://github.com/dotnet/aspnetcore/blob/3ea008c80d5cc63de7f90ddfd6823b7b006251ff/src/SignalR/clients/csharp/Client.SourceGenerator/src/HubClientProxyGenerator.Parser.cs#L137-L143\r\nWe\u0027re checking if the Generic type is specified which it isn\u0027t when you let the inference figure it out.\r\n\r\nThis case is handled later on, but it\u0027s too late at that point since we\u0027ve already filtered the method call out:\r\nhttps://github.com/dotnet/aspnetcore/blob/3ea008c80d5cc63de7f90ddfd6823b7b006251ff/src/SignalR/clients/csharp/Client.SourceGenerator/src/HubClientProxyGenerator.Parser.cs#L254-L257",
        "createdAt": "2022-09-01T22:52:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43510#issuecomment-1234866801"
      },
      {
        "id": "IC_kwDOAQzde85QYmiv",
        "parentId": null,
        "author": "94sedighi",
        "content": "I would like to take a look and try to find a solution for this bug",
        "createdAt": "2022-12-13T13:59:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43510#issuecomment-1348626607"
      },
      {
        "id": "IC_kwDOAQzde85QgczU",
        "parentId": null,
        "author": "94sedighi",
        "content": "@albi005 can you please say which version of C# and .NET you are using?\r\nThe partial methods have different restrictions in different C# versions.\r\nThe code you posted to reproduce the Issue doesn\u0027t compile in C# 11 and i\u0027m getting the following compiler error:\r\n\r\n\u0060Error CS8795 Partial method \u0027MyCustomExtensions.RegisterClient\u003CT\u003E(HubConnection, T)\u0027 must have an implementation part because it has accessibility modifiers.\u0060",
        "createdAt": "2022-12-14T09:08:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43510#issuecomment-1350683860"
      },
      {
        "id": "IC_kwDOAQzde85QkITH",
        "parentId": null,
        "author": "albi005",
        "content": "I just created a new console app in VS2022 17.5 preview 1 and added the above code to Program.cs.\r\n\r\nThe .csproj looks like this:\r\n\u0060\u0060\u0060xml\r\n\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\r\n\r\n  \u003CPropertyGroup\u003E\r\n    \u003COutputType\u003EExe\u003C/OutputType\u003E\r\n    \u003CTargetFramework\u003Enet7.0\u003C/TargetFramework\u003E\r\n    \u003CImplicitUsings\u003Eenable\u003C/ImplicitUsings\u003E\r\n    \u003CNullable\u003Eenable\u003C/Nullable\u003E\r\n  \u003C/PropertyGroup\u003E\r\n\r\n  \u003CItemGroup\u003E\r\n    \u003CPackageReference Include=\u0022Microsoft.AspNetCore.SignalR.Client\u0022 Version=\u00227.0.1\u0022 /\u003E\r\n    \u003CPackageReference Include=\u0022Microsoft.AspNetCore.SignalR.Client.SourceGenerator\u0022 Version=\u00227.0.0-preview.7.22376.6\u0022 /\u003E\r\n  \u003C/ItemGroup\u003E\r\n\r\n\u003C/Project\u003E\r\n\u0060\u0060\u0060",
        "createdAt": "2022-12-14T15:36:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43510#issuecomment-1351648455"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85RQSDV",
    "title": "[SignalR-Client-Cpp] Cannot properly handle invalid url",
    "url": "https://github.com/dotnet/aspnetcore/issues/43774",
    "createdAt": "2022-09-06T12:38:31Z",
    "lastUpdated": "2024-03-04T22:15:51Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen use a url like \u0022/something\u0022 then start the connection,\r\n\r\nIt seems that underline lib cpprest does not allow empty host and throw the exception, but the exception does not return in the callback,  instead, it terminates the program.\r\n\u0060\u0060\u0060\r\nterminate called after throwing an instance of \u0027std::invalid_argument\u0027\r\n  what():  URI must contain a hostname.\r\nAborted\r\n\u0060\u0060\u0060\r\n**and this cannot be catched in anyway because the function \u0060hub_connection::start(std::function\u003Cvoid(std::exception_ptr)\u003E callback) noexcept;\u0060 is a \u0060noexcept\u0060 function**\r\n\r\n[https://docs.microsoft.com/en-us/cpp/cpp/noexcept-cpp?view=msvc-170](url)\r\n\u003E Mark a function as noexcept only if all the functions that it calls, either directly or indirectly, are also noexcept or const. The compiler doesn\u0027t necessarily check every code path for exceptions that might bubble up to a noexcept function. If an exception does exit the outer scope of a function marked noexcept, [std::terminate](https://docs.microsoft.com/en-us/cpp/standard-library/exception-functions?view=msvc-170#terminate) is invoked immediately, and there\u0027s no guarantee that destructors of any in-scope objects will be invoked.\r\n\r\n### Expected Behavior\r\n\r\nWith the mark of noexcept in hub_connection::start() function, any exceptions that might occur are expected to be in the callback.\r\n\r\nOtherwise, it should not be marked with noexcept and let user handle any exception that might come out from it.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "bug",
      "area-signalr",
      "feature-client-c\u002B\u002B"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85J0GYw",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "While we should probably fix the underlying issue, why are you trying to use \u0060/something\u0060? That won\u0027t work unless you\u0027re using the Javascript client in the browser since we can infer the current web pages host then.",
        "createdAt": "2022-09-06T16:37:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43774#issuecomment-1238394416"
      },
      {
        "id": "IC_kwDOAQzde85J0xgf",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "It\u0027s just my use case where the app is in initial state and the server url is not yet configured, so the url might be in that format at first use.\r\n\r\nAnd since my app allow free input from user (to configure their server url), I will need to be able to catch/handle this exception appropriately.",
        "createdAt": "2022-09-06T19:34:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43774#issuecomment-1238571039"
      },
      {
        "id": "IC_kwDOAQzde85J0zQc",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "You could also look at the url before initializing the SignalR connection.",
        "createdAt": "2022-09-06T19:42:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43774#issuecomment-1238578204"
      },
      {
        "id": "IC_kwDOAQzde85J0z6_",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "\u003E You could also look at the url before initializing the SignalR connection.\r\n\r\nYes, that is my workaround right now.\r\n\r\nBut anyhow, would be nice if this is addressed from the lib itself.",
        "createdAt": "2022-09-06T19:45:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/43774#issuecomment-1238580927"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85TWAFH",
    "title": "SignalR client library needs better logging/access to underlying message data",
    "url": "https://github.com/dotnet/aspnetcore/issues/44383",
    "createdAt": "2022-10-05T19:35:14Z",
    "lastUpdated": "2024-03-02T00:51:51Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI made a silly mistake today that took me some time to debug because there appears to be no easy way to access the underlying messages sent by SignalR as plaintext.\r\n\r\nI have a method where I added a cancellationTokenSource as such.\r\n\r\n\u0060\u0060\u0060\r\nusing (var cancelToken = new CancellationTokenSource(timeoutMS))\r\n{\r\n     return clientProxy.InvokeAsync\u003CT\u003E(methodName, request, cancelToken);\r\n}\r\n\u0060\u0060\u0060\r\nYou might already be able to spot the problem (cancelToken should be cancelToken.Token) I had forgotten about this simple change I made and suddenly started getting the error:\r\n\r\n**Error reading JSON.\r\n\u0027{\u0027 is invalid after a value. Expected either \u0027,\u0027, \u0027}\u0027, or \u0027]\u0027. LineNumber: 0 | BytePositionInLine: 98.**\r\n\r\nI tried to enable detailed logging by adding trace for logging messages.\r\n\r\n\u0060\u0060\u0060\r\nvar conn = new HubConnectionBuilder()\r\n.ConfigureLogging(logging =\u003E\r\n{\r\n    logging.SetMinimumLevel(LogLevel.Trace);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nYet unfortunately I received no further details other than the message above.\r\n\r\nIn the end I needed to implement my own custom IHubProtocol by duplicating JsonHubProtocol which finally revealed the real error to me which was: \r\n\r\n\u0060{\u0022type\u0022:1,\u0022invocationId\u0022:\u00229\u0022,\u0022target\u0022:\u0022blahblah\u0022,\u0022arguments\u0022:[{blahblah}{\u0022type\u0022:7,\u0022error\u0022:\u0022Connection closed with an error. NotSupportedException: Serialization and deserialization of \u0027System.IntPtr\u0027 instances are not supported. Path: $.Token.WaitHandle.Handle.\u0022,\u0022allowReconnect\u0022:true}\u0060\n\n### Describe the solution you\u0027d like\n\nI believe inside JsonHubProtocol -\u003E ParseMessage on the error condition the entire message payload should be shown to the user or at least if tracing is turned on this should be the behaviour.\r\n\r\nIt should not be this difficult to find out what happened to cause deserialisation to fail.\n\n### Additional context\n\nIn summary, there should be more information when an error condition occurs deep inside the protocol. ",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "help candidate"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85LpE2F",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u0060\u0060\u0060C#\r\nvar conn = new HubConnectionBuilder()\r\n.ConfigureLogging(logging =\u003E\r\n{\r\n    logging.SetMinimumLevel(LogLevel.Trace);\r\n});\r\n\u0060\u0060\u0060\r\n\r\nWhat logger provider did you enable?",
        "createdAt": "2022-10-05T22:37:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44383#issuecomment-1269058949"
      },
      {
        "id": "IC_kwDOAQzde85LqAhz",
        "parentId": null,
        "author": "MaximG1234",
        "content": "Hey @davidfowl, \r\n\r\nUggh, so I did make a mistake there because I was already receiving a message I thought I had provided a provider but just for curiosity sake, I have gone back and enabled it properly but the error message still wouldnt have helped me and is basically identical to the message I showed above.\r\n\r\nRealistically I still would have no idea of what actually went wrong without recreating the steps above I described.\r\n\r\n\u0060\u0060\u0060\r\nfail: Microsoft.AspNetCore.SignalR.Client.HubConnection[69]\r\n      HubConnection reconnecting due to an error.\r\n      System.IO.InvalidDataException: Error reading JSON.\r\n       ---\u003E System.Text.Json.JsonReaderException: \u0027{\u0027 is invalid after a value. Expected either \u0027,\u0027, \u0027}\u0027, or \u0027]\u0027. LineNumber: 0 | BytePositionInLine: 98.\r\n         at System.Text.Json.ThrowHelper.ThrowJsonReaderException(Utf8JsonReader\u0026 json, ExceptionResource resource, Byte nextByte, ReadOnlySpan\u00601 bytes)\r\n         at System.Text.Json.Utf8JsonReader.ConsumeNextToken(Byte marker)\r\n         at System.Text.Json.Utf8JsonReader.ConsumeNextTokenOrRollback(Byte marker)\r\n         at System.Text.Json.Utf8JsonReader.ReadSingleSegment()\r\n         at System.Text.Json.Utf8JsonReader.Read()\r\n         ......\r\n         at Microsoft.AspNetCore.SignalR.Client.HubConnection.ReceiveLoop(ConnectionState connectionState)\r\ntrce: Microsoft.AspNetCore.SignalR.Client.HubConnection[72]\r\n      Reconnect attempt number 1 will start in 00:00:05.\r\n[trce: Microsoft.AspNetCore.SignalR.Client.HubConnection[20]\r\n      Releasing Connection Lock in HandleConnectionClose (/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs:1396).\r\n15:38:05 WRN] Connection reconnecting after error in HubConnectionManager with error Error reading JSON.\r\n\u0027{\u0027 is invalid after a value. Expected either \u0027,\u0027, \u0027}\u0027, or \u0027]\u0027. LineNumber: 0 | BytePositionInLine: 98.\r\n\u0060\u0060\u0060\r\n\r\nPS: Thank you for all your hard work on SignalR @davidfowl absolutely love using it.",
        "createdAt": "2022-10-06T04:42:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44383#issuecomment-1269303411"
      },
      {
        "id": "IC_kwDOAQzde85Lt8bn",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "I\u0027m a bit confused here, the logs from your recent comment seem to indicate an error parsing on the **client side**, but the original issue shows that there was an error parsing on the **server side**.\r\n\r\nIf you test the original problem with logging turned on (now that you fixed the logging \uD83D\uDE04) you should see the error \u0060\u0022Connection closed with an error. NotSupportedException: Serialization and deserialization of \u0027System.IntPtr\u0027 instances are not supported. Path: $.Token.WaitHandle.Handle.\u0022\u0060 that you showed in your original issue. Additionally, that error would be propagated to the reconnect or close handler registered on your client.\r\n\r\nRegarding your new comment showing an error from the client side, that log isn\u0027t great and could probably be improved. What did you do to cause that error so we can repro?",
        "createdAt": "2022-10-06T16:06:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44383#issuecomment-1270335207"
      },
      {
        "id": "IC_kwDOAQzde85LuwNu",
        "parentId": null,
        "author": "??",
        "content": "Hi @MaximG1234. We have added the \u0022Needs: Author Feedback\u0022 label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
        "createdAt": "2022-10-06T18:56:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44383#issuecomment-1270547310"
      },
      {
        "id": "IC_kwDOAQzde85LwjMC",
        "parentId": null,
        "author": "MaximG1234",
        "content": "Hi @BrennanConroy,\r\n\r\nYep apologies, its probably a bit confusing because I am using the latest version of SignalR which supports reverse invocation from Server -\u003E Client.\r\n\r\nIn my case the method above: \r\n\r\n\u0060\u0060\u0060\r\nusing (var cancelToken = new CancellationTokenSource(timeoutMS))\r\n{\r\n     return clientProxy.InvokeAsync\u003CT\u003E(methodName, request, cancelToken);\r\n}\r\n\u0060\u0060\u0060\r\nIs being invoked from the ASP.NET Core application and being sent to a .NET 7 console client utilising \u0060Microsoft.AspNetCore.SignalR.Client\u0060 Version 7.0.0-preview.7.22376.6.\r\n\r\nAs you correctly note interestingly the error is being generated on the client (in this case the .NET 7 console app) rather than the server.\r\n\r\nReproducing this issue would simply involve invoking a client from the ASP.NET Core app to any method on the client with the parameters as specified. \r\n\r\nDoes this make sense?",
        "createdAt": "2022-10-07T02:12:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44383#issuecomment-1271018242"
      },
      {
        "id": "IC_kwDOAQzde85Lwlfp",
        "parentId": null,
        "author": "MaximG1234",
        "content": "PS: I note that I did not appear to receive an error on the ASP.NET Core application but I have a relatively complicated process that I am using to make my invocations which might have tripped things up. \r\n\r\nAlso while I am using EnableDetailedErrors on the ASP.NET side I have not configured the logging filters which probably would have provided me more information. \r\n\r\nThe fact that the error was appearing on the client tripped me up and made me \u0027ignore\u0027 the server thinking the error occured on the client and wasnt related to the server. \r\n\r\nI guess my general point is that it shouldnt be this easy to shoot yourself in the foot under the circumstances I described, in an ideal world both the server would generate an error (which it might have as you described) AND the client would be able to parse the message correctly and output something meaningful, or if it truly cant then just print the entire message.",
        "createdAt": "2022-10-07T02:24:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44383#issuecomment-1271027689"
      },
      {
        "id": "IC_kwDOAQzde85Lw05-",
        "parentId": null,
        "author": "MaximG1234",
        "content": "\u003E Additionally, that error would be propagated to the reconnect or close handler registered on your client.\r\n\r\n_100% this is **not** happening_ if you take a look at the error I\u0027ve received (which was also the one pushed to the reconnect handler, the json parser is failing to parse the message. I didn\u0027t delve very deeply but I suspect that \u0027NotSupportedException:\u0027 or \u0027Path:\u0027 or similar is tripping it up. After thinking about it more, I would definitely argue that this is borderline a bug.",
        "createdAt": "2022-10-07T04:16:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44383#issuecomment-1271090814"
      },
      {
        "id": "IC_kwDOAQzde85MAhOG",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Looking at this more closely, you\u0027re hitting the issue described in https://github.com/dotnet/aspnetcore/issues/13651#issuecomment-527625710. As noted in the comment, there is a log on the server side that will have the nicer Json error message (it\u0027s Error level now) that would have pointed you to the issue.",
        "createdAt": "2022-10-11T19:57:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44383#issuecomment-1275204486"
      },
      {
        "id": "IC_kwDOAQzde85MBG7f",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-10-11T22:39:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44383#issuecomment-1275358943"
      },
      {
        "id": "IC_kwDOAQzde85MBHDi",
        "parentId": null,
        "author": "rafikiassumani-msft",
        "content": "Triage: We should do the same thing we do in the JS client and log the raw messages. \r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/c647f58bd0e53ec5cd13bdec037ac53c444abf99/src/SignalR/clients/ts/signalr/src/IHttpConnectionOptions.ts#L39\r\nhttps://github.com/dotnet/aspnetcore/blob/c647f58bd0e53ec5cd13bdec037ac53c444abf99/src/SignalR/clients/ts/signalr/src/Utils.ts#L61",
        "createdAt": "2022-10-11T22:39:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44383#issuecomment-1275359458"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85ULuDh",
    "title": "Quarantine SignalR functional test \u0022closed with error or start fails if hub cannot be created\u0022",
    "url": "https://github.com/dotnet/aspnetcore/issues/44608",
    "createdAt": "2022-10-17T23:20:27Z",
    "lastUpdated": "2024-03-02T00:51:51Z",
    "body": "## Failing Test(s)\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/274c32e63a9df1979175c4e7c9adffdabc182e96/src/SignalR/clients/ts/FunctionalTests/ts/HubConnectionTests.ts#L362\r\n\r\n## Error Message\r\n\r\n\u0060\u0060\u0060text\r\n: Timeout - Async callback was not invoked within the 40000 ms timeout specified by jest.setTimeout.Timeout - Async callback was not invoked within the 40000 ms timeout specified by jest.setTimeout.Error: \r\n\u0060\u0060\u0060\r\n\r\n## Stacktrace\r\n\r\n\u003Cdetails\u003E\r\n\u003C!--\r\nProvide the stack trace associated with the test failure, if applicable.\r\n--\u003E\r\n\r\n\u0060\u0060\u0060text\r\n    at new Spec (D:\\a\\_work\\1\\s\\src\\SignalR\\clients\\ts\\common\\node_modules\\jest-jasmine2\\build\\jasmine\\Spec.js:116:22)\r\n    at new Spec (D:\\a\\_work\\1\\s\\src\\SignalR\\clients\\ts\\common\\node_modules\\jest-jasmine2\\build\\setup_jest_globals.js:78:9)\r\n    at specFactory (D:\\a\\_work\\1\\s\\src\\SignalR\\clients\\ts\\common\\node_modules\\jest-jasmine2\\build\\jasmine\\Env.js:523:24)\r\n    at Env.it (D:\\a\\_work\\1\\s\\src\\SignalR\\clients\\ts\\common\\node_modules\\jest-jasmine2\\build\\jasmine\\Env.js:592:24)\r\n    at Env.it (D:\\a\\_work\\1\\s\\src\\SignalR\\clients\\ts\\common\\node_modules\\jest-jasmine2\\build\\jasmineAsyncInstall.js:134:23)\r\n    at it (D:\\a\\_work\\1\\s\\src\\SignalR\\clients\\ts\\common\\node_modules\\jest-jasmine2\\build\\jasmine\\jasmineLight.js:100:21)\r\n    at Suite.\u003Canonymous\u003E (D:\\a\\_work\\1\\s\\src\\SignalR\\clients\\ts\\FunctionalTests\\ts\\HubConnectionTests.ts:362:13)\r\n    at addSpecsToSuite (D:\\a\\_work\\1\\s\\src\\SignalR\\clients\\ts\\common\\node_modules\\jest-jasmine2\\build\\jasmine\\Env.js:444:51)\r\n    at Env.describe (D:\\a\\_work\\1\\s\\src\\SignalR\\clients\\ts\\common\\node_modules\\jest-jasmine2\\build\\jasmine\\Env.js:414:11)\r\n    at describe (D:\\a\\_work\\1\\s\\src\\SignalR\\clients\\ts\\common\\node_modules\\jest-jasmine2\\build\\jasmine\\jasmineLight.js:88:18)\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n\r\n## Logs\r\n\r\n\u003Cdetails\u003E\r\n\r\n\u0060\u0060\u0060\r\nconsole.log\r\n      *** SPEC STARTED: hubConnection using json over WebSockets transport closed with error or start fails if hub cannot be created [2022-10-14T21:42:16.288Z] ***\r\n\r\n      at LogBannerReporter.specStarted (ts/LogBannerReporter.ts:15:17)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.289Z] Debug: Starting HubConnection.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.289Z] Debug: Starting connection with transfer format \u0027Text\u0027.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.290Z] Debug: Sending negotiation request: http://127.0.0.1:35035/uncreatable/negotiate?negotiateVersion=1.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.293Z] Debug: Selecting transport \u0027WebSockets\u0027.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.294Z] Trace: (WebSockets transport) Connecting.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.info\r\n      [2022-10-14T21:42:16.297Z] Information: WebSocket connected to ws://127.0.0.1:35035/uncreatable?id=4Z5UzIrkXRVaOuaQIpX-tA.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:147:30)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.297Z] Debug: The HttpConnection connected successfully.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.298Z] Debug: Sending handshake request.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.298Z] Trace: (WebSockets transport) sending data. String data of length 32. Content: \u0027{\u0022protocol\u0022:\u0022json\u0022,\u0022version\u0022:1}\u001E\u0027.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.info\r\n      [2022-10-14T21:42:16.298Z] Information: Using HubProtocol \u0027json\u0027.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:147:30)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.304Z] Trace: (WebSockets transport) data received. String data of length 3. Content: \u0027{}\u001E\u0027.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.304Z] Debug: Server handshake complete.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.304Z] Trace: (WebSockets transport) sending data. String data of length 11. Content: \u0027{\u0022type\u0022:6}\u001E\u0027.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.304Z] Debug: HubConnection connected successfully.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.307Z] Trace: (WebSockets transport) socket closed.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.307Z] Debug: HttpConnection.stopConnection(undefined) called while in state Connected.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.info\r\n      [2022-10-14T21:42:16.307Z] Information: Connection disconnected.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:147:30)\r\n\r\n    console.log\r\n      [2022-10-14T21:42:16.307Z] Debug: HubConnection.connectionClosed(undefined) called while in state Connected.\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:151:30)\r\n\r\n    console.error\r\n      [2022-10-14T21:42:16.308Z] Error: An onclose callback called with error \u0027undefined\u0027 threw error \u0027TypeError: Cannot read properties of undefined (reading \u0027message\u0027)\u0027.\r\n\r\n      139 |                 case LogLevel.Critical:\r\n      140 |                 case LogLevel.Error:\r\n    \u003E 141 |                     this.out.error(msg);\r\n          |                              ^\r\n      142 |                     break;\r\n      143 |                 case LogLevel.Warning:\r\n      144 |                     this.out.warn(msg);\r\n\r\n      at ConsoleLogger.log (../signalr/dist/esm/Utils.js:141:30)\r\n      at TestLogger.log (ts/TestLogger.ts:44:35)\r\n      at HubConnection._completeClose (../signalr/dist/cjs/HubConnection.js:624:30)\r\n      at HubConnection._connectionClosed (../signalr/dist/cjs/HubConnection.js:605:18)\r\n      at HttpConnection.HubConnection.connection.onclose (../signalr/dist/cjs/HubConnection.js:46:51)\r\n      at HttpConnection._stopConnection (../signalr/dist/cjs/HttpConnection.js:416:26)\r\n      at WebSocketTransport.transport.onclose (../signalr/dist/cjs/HttpConnection.js:337:46)\r\n      at WebSocketTransport._close (../signalr/dist/cjs/WebSocketTransport.js:150:22)\r\n\r\n    console.log\r\n      *** SPEC DONE: hubConnection using json over WebSockets transport closed with error or start fails if hub cannot be created [2022-10-14T21:42:56.292Z; Duration: 40004ms] ***\r\n\r\n      at LogBannerReporter.specDone (ts/LogBannerReporter.ts:22:17)\r\n\u0060\u0060\u0060\r\n\r\n\u003C/details\u003E\r\n\r\n## Build\r\n\r\n[Example 1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=53219\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=1087558\u0026resultId=100027\u0026paneView=debug)\r\n[Example 2](https://dev.azure.com/dnceng-public/public/_build/results?buildId=54980\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=1128610\u0026resultId=100608\u0026paneView=debug)",
    "upvotes": 0,
    "labels": [
      "test-failure",
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85NciNx",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-01T22:52:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44608#issuecomment-1299325809"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85VLSyX",
    "title": "Document dependencies used by SignalR c\u002B\u002B client",
    "url": "https://github.com/dotnet/aspnetcore/issues/44788",
    "createdAt": "2022-10-30T21:28:04Z",
    "lastUpdated": "2024-03-04T22:17:36Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nProjects that are dependent on the microsoft-signalr package no longer compile with [v0.1.0-alpha4](https://github.com/aspnet/SignalR-Client-Cpp/releases/tag/v0.1.0-alpha4) when compiling on a linux platform.\r\n\r\n\r\n### Expected Behavior\r\n\r\nWith the latest release of signalR c\u002B\u002B library, projects that relied on the library no longer build on linux compilations.\r\n\r\n### Steps To Reproduce\r\n\r\nPlatform:\r\ndebian or ubuntu x64\r\n\r\nSetup:\r\n1) install latest vcpkg (i.e. commit from 10/29 that effectively includes v0.1.0-alpha4)\r\n2) install the microsoft-signalr package.\r\n3) compile existing app that used signalR. the app uses makefile for compilation.\r\n\r\nResult:\r\nCompilation fails due to missing reference\r\n#11 29.14 /usr/bin/ld: /src/vcpkg/installed/x64-linux/lib/libmicrosoft-signalr.a(json_hub_protocol.cpp.o): in function \u0060signalr::json_hub_protocol::parse_message(char const*, unsigned long) const\u0027:\r\n#11 29.14 json_hub_protocol.cpp:(.text\u002B0x29): undefined reference to \u0060Json::Value::Value(Json::ValueType)\u0027\r\n#11 29.14 /usr/bin/ld: json_hub_protocol.cpp:(.text\u002B0x15c): undefined reference to \u0060Json::Value::~Value()\u0027\r\n#11 29.14 /usr/bin/ld: /src/vcpkg/installed/x64-linux/lib/libmicrosoft-signalr.a(json_hub_protocol.cpp.o): in function \u0060signalr::json_hub_protocol::write_message[abi:cxx11](signalr::hub_message const*) const\u0027:\r\n#11 29.14 json_hub_protocol.cpp:(.text\u002B0xce6): undefined reference to \u0060Json::Value::Value(Json::ValueType)\u0027\r\n#11 29.14 /usr/bin/ld: json_hub_protocol.cpp:(.text\u002B0xd29): undefined reference to \u0060Json::writeString[abi:cxx11](Json::StreamWriter::Factory const\u0026, Json::Value const\u0026)\u0027\r\n#11 29.14 /usr/bin/ld: json_hub_protocol.cpp:(.text\u002B0xd96): undefined reference to \u0060Json::StreamWriterBuilder::~StreamWriterBuilder()\u0027\r\n#11 29.14 /usr/bin/ld: json_hub_protocol.cpp:(.text\u002B0xd9e): undefined reference to \u0060Json::Value::~Value()\u0027\r\n#11 29.14 /usr/bin/ld: json_hub_protocol.cpp:(.text\u002B0xdd1): undefined reference to \u0060Json::Value::Value(int)\u0027\r\n#11 29.14 /usr/bin/ld: json_hub_protocol.cpp:(.text\u002B0xde0): undefined reference to \u0060Json::Value::operator[](char const*)\u0027\r\n#11 29.14 /usr/bin/ld: json_hub_protocol.cpp:(.text\u002B0xdeb): undefined reference to \u0060Json::Value::operator=(Json::Value\u0026\u0026)\u0027\r\n#11 29.14 /usr/bin/ld: json_hub_protocol.cpp:(.text\u002B0xdf3): undefined reference to \u0060Json::Value::~Value()\u0027\r\n#11 29.14 /usr/bin/ld: json_hub_protocol.cpp:(.text\u002B0xe0a): undefined reference to \u0060Json::Value::Value(std::__cxx11::basic_string\u003Cchar, std::char_traits\u003Cchar\u003E, std::allocator\u003Cchar\u003E \u003E const\u0026)\u0027\r\n\r\n\r\nRolling back to vcpkg release 2022.10.19, which utilizes alpha3 results in a successful build.\r\n\r\nI\u0027ve also tried manually installing the jsoncpp package to ensure that it would be available (while using alpha4). Compilation fails.\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85NRPrb",
        "parentId": null,
        "author": "mprather",
        "content": "The issue is that jsoncpp is now a dependency as of alpha4. This is not explicitly called out in the project\u0027s readme. If you are using a makefile, the fix is to add \u0060jsoncpp\u0060 to the library list.\r\n\r\nPlease make sure the doc\u0027s state what dependencies are utilized. \r\n",
        "createdAt": "2022-10-30T22:32:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44788#issuecomment-1296366299"
      },
      {
        "id": "IC_kwDOAQzde85NRTJC",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Hmm, it should install and pull in jsoncpp automatically from vcpkg. What changes when you use make vs cmake? Does make require explicitly calling out dependencies?",
        "createdAt": "2022-10-30T23:41:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44788#issuecomment-1296380482"
      },
      {
        "id": "IC_kwDOAQzde85NRVeY",
        "parentId": null,
        "author": "mprather",
        "content": "vcpkg is properly including jsoncpp. thus from a vcpkg perspective, there is no change. that part of setup is ok. the part that needs adjustment is the makefiles. you are required to list out each dependency via the \u0060-l\u0060 parameter for gcc and clang.\r\n\r\nFor example, the following command produces an exe that leverages the signalR library.\r\n\r\n\u003C alpha4\r\n\u0060\u0060\u0060\r\ng\u002B\u002B -o /test-app -DNO_SIGNALRCLIENT_EXPORTS /src/app/cpp/build/debug-livestream/Application.o -L/src/vcpkg/installed/x64-linux/lib -lpthread -lz  -ldl -lmicrosoft-signalr -lcpprest -lcrypto -lssl -lz\r\n\u0060\u0060\u0060\r\n\r\nalpha4 (note addition of \u0060-ljsoncpp\u0060 at the end)\r\n\u0060\u0060\u0060\r\ng\u002B\u002B -o /test-app -DNO_SIGNALRCLIENT_EXPORTS /src/app/cpp/build/debug-livestream/Application.o -L/src/vcpkg/installed/x64-linux/lib -lpthread -lz  -ldl -lmicrosoft-signalr -lcpprest -lcrypto -lssl -lz -ljsoncpp\r\n\u0060\u0060\u0060\r\n\r\nat this point, this issue is focused on improving the documentation. our build scripts upgraded vcpkg to pull in the latest changes and they all broke. I took a quick look at the project readme to see if something changed and it was not clear that a new dependency was now required with the change from alpha3 to alpha4. \r\n",
        "createdAt": "2022-10-31T00:13:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44788#issuecomment-1296390040"
      },
      {
        "id": "IC_kwDOAQzde85NRWBi",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Gotcha, thanks for the explanation!",
        "createdAt": "2022-10-31T00:17:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44788#issuecomment-1296392290"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85VXtnt",
    "title": "[Epic]: Support returning values from client invocations",
    "url": "https://github.com/dotnet/aspnetcore/issues/44831",
    "createdAt": "2022-11-02T00:25:29Z",
    "lastUpdated": "2024-03-02T00:51:52Z",
    "body": "Support server to clients acks so that reliable messaging can be implemented more easily. This would only be when using \u0060Clients.Client()\u0060. I think we should go back to the SendAsync (fire and forget) InvokeAsync (wait for ack) naming pattern. That\u0027s the one sticking point.\r\n\r\nEDIT by @anurse: For clarity, this issue is tracking all work related to allowing values to be returned from client invocations. It **also** covers allowing the server to wait for a \u0060void\u0060-returning (or \u0060Task\u0060-returning) client side method to complete.\r\n\r\n### Work left for .NET 7\r\n\r\n- [ ] his was already an issue with Task returning \u0060.On\u0060 methods, but client results likely makes it more likely to block on the client side\r\n- [ ] #41997\r\n  - Today we detect if you allow parallel hub invocations and throw if you don\u0027t when trying to use the feature. This doesn\u0027t work if you use \u0060IHubContext\u0060 in the Hub, or if you have multiple waiting results for the same connections Hubs.\r\n  - This is also especially bad in \u0060OnConnectedAsync\u0060 because that\u0027s a special method that runs before the receive loop starts, we need to throw/unblock/warn etc. for this\r\n- [ ] Analyzer to warn about strongly-typed hubs and using \u0060InvokeAsync\u0060 with \u0060.All\u0060, \u0060.Group\u0060, etc.\r\n- [ ] \u0060InvokeAsync\u0060 void result? Scenario, acks without needing a value\r\n- [ ] [Scaleout] ServerA requests client result from connection on ServerB, ServerB goes down after receiving request, ServerA needs to know somehow so it can error the client result\r\n- [ ] Look at performance\r\n  - The biggest performance issue I can think of right now is that \u0060RawResult\u0060 allocates and copy the bytes which can be expensive\r\n- [ ] Flow cancellation from server to client\r\n  - Inject \u0060CancellationToken\u0060 into \u0060.On\u0060 methods and send \u0060CancelInvocation\u0060 hub messages to clients",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85Ncxpl",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-02T00:25:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44831#issuecomment-1299389029"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85V2JiH",
    "title": "Potential out of memory with slow SignalR clients",
    "url": "https://github.com/dotnet/aspnetcore/issues/44943",
    "createdAt": "2022-11-08T14:01:13Z",
    "lastUpdated": "2024-03-02T00:51:52Z",
    "body": "I noticed the SignalR client connection receive loop uses an unbounded receive buffer [here](https://github.com/dotnet/aspnetcore/blob/4c300ec6db7117a05b7c79cf6f617e9d498212b6/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs#L1273). If I read the code correctly it looks like network backpressure is not applied in the opposite direction - from the runtime into the receive loop. In theory, if an app is very slow to process the received messages, it is entirely possible for the \u0060invocationMessageChannel\u0060 to grow until the application runs out of memory. \r\n\r\nCan the code be refactored to use a bounded channel instead, with a configurable maximum size?",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85OIX6A",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-10T19:49:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/44943#issuecomment-1310817920"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85WV83M",
    "title": "Microsoft.AspNetCore.Connections.ConnectionResetException",
    "url": "https://github.com/dotnet/aspnetcore/issues/45086",
    "createdAt": "2022-11-14T19:09:17Z",
    "lastUpdated": "2024-12-17T22:37:41Z",
    "body": " I am still getting the exception in the middleware\r\n\r\nMicrosoft.AspNetCore.Connections.ConnectionResetException: The client has disconnected\r\n ---\u003E System.Runtime.InteropServices.COMException (0x80070040): The specified network name is no longer available. (0x80070040)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.AspNetCore.Server.IIS.Core.IO.AsyncIOOperation.GetResult(Int16 token)\r\n   at Microsoft.AspNetCore.Server.IIS.Core.IISHttpContext.ReadBody()\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult\u0026 result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.IIS.Core.IISHttpContext.ReadAsync(Memory\u00601 memory, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.IIS.Core.HttpRequestStream.ReadAsyncInternal(Memory\u00601 buffer, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.ReadAsync(Memory\u00601 buffer, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions.DrainAsync(Stream stream, ArrayPool\u00601 bytePool, Nullable\u00601 limit, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter.ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding)\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder.BindModelAsync(ModelBindingContext bindingContext)\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.BindModelAsync(ActionContext actionContext, IModelBinder modelBinder, IValueProvider valueProvider, ParameterDescriptor parameter, ModelMetadata metadata, Object value, Object container)\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerBinderDelegateProvider.\u003C\u003Ec__DisplayClass0_0.\u003C\u003CCreateBinderDelegate\u003Eg__Bind|0\u003Ed.MoveNext()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.\u003CInvokeInnerFilterAsync\u003Eg__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\u003CInvokeNextResourceFilter\u003Eg__Awaited|24_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State\u0026 next, Scope\u0026 scope, Object\u0026 state, Boolean\u0026 isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\u003CInvokeAsync\u003Eg__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.\u003CInvoke\u003Eg__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n\r\nI thought it would solve the problem.\r\nHow do I find the problem?\r\n\r\nThanks\r\n\r\n_Originally posted by @tomerts in https://github.com/dotnet/aspnetcore/issues/24112#issuecomment-717274371_\r\n      ",
    "upvotes": 3,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85OWP6D",
        "parentId": null,
        "author": "Tratcher",
        "content": "The plan was to change BodyModelBinder to catch IOExceptions and return a 400 (not that the status code matters other than logging, the client has disconnected.) . This will prevent noisy stack traces from being logged unnecessarily.",
        "createdAt": "2022-11-14T21:51:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45086#issuecomment-1314455171"
      },
      {
        "id": "IC_kwDOAQzde85PAf3h",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-23T18:59:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45086#issuecomment-1325530593"
      },
      {
        "id": "IC_kwDOAQzde85cxcY4",
        "parentId": null,
        "author": "cuiliang",
        "content": "Whish these logs never show in windows event log. \r\n\r\n![image](https://github.com/dotnet/aspnetcore/assets/1972649/8ec1ca12-4f4c-4b77-9e01-8a1b13a48cc5)\r\n",
        "createdAt": "2023-05-22T03:23:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45086#issuecomment-1556465208"
      },
      {
        "id": "IC_kwDOAQzde85kSEbE",
        "parentId": null,
        "author": "ImrePyhvel",
        "content": "Me too, with slight variations in stack trace, see below. What seems to matter is that connection is broken early during \u0060ReadRequestBodyAsync()\u0060, so it smells like 400 to me. Nothing wrong on server, no action required.\r\n\r\n\u0060\u0060\u0060\r\nMicrosoft.AspNetCore.Connections.ConnectionResetException: The client has disconnected\r\n ---\u003E System.Runtime.InteropServices.COMException (0x800704CD): An operation was attempted on a nonexistent network connection. (0x800704CD)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.AspNetCore.Server.IIS.Core.IO.AsyncIOOperation.GetResult(Int16 token)\r\n   at Microsoft.AspNetCore.Server.IIS.Core.IISHttpContext.ReadBody()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult\u0026 result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.IIS.Core.IISHttpContext.ReadAsync(Memory\u00601 memory, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.IIS.Core.HttpRequestStream.ReadAsyncInternal(Memory\u00601 buffer, CancellationToken cancellationToken)\r\n   at System.Text.Json.Serialization.ReadBufferState.ReadFromStreamAsync(Stream utf8Json, CancellationToken cancellationToken, Boolean fillBuffer)\r\n   at System.Text.Json.JsonSerializer.ReadFromStreamAsync[TValue](Stream utf8Json, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter.ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter.ReadRequestBodyAsync(InputFormatterContext context, Encoding encoding)\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder.BindModelAsync(ModelBindingContext bindingContext)\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.BindModelAsync(ActionContext actionContext, IModelBinder modelBinder, IValueProvider valueProvider, ParameterDescriptor parameter, ModelMetadata metadata, Object value, Object container)\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerBinderDelegateProvider.\u003C\u003Ec__DisplayClass0_0.\u003C\u003CCreateBinderDelegate\u003Eg__Bind|0\u003Ed.MoveNext()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.\u003CInvokeInnerFilterAsync\u003Eg__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.\u003CInvokeNextExceptionFilterAsync\u003Eg__Awaited|26_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n\u0060\u0060\u0060\r\n  \r\n  AspNetCore.App 7.0.10",
        "createdAt": "2023-08-17T15:11:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45086#issuecomment-1682458308"
      },
      {
        "id": "IC_kwDOAQzde85sKdv0",
        "parentId": null,
        "author": "montella1507",
        "content": "\u003Cimg width=\u0022727\u0022 alt=\u0022image\u0022 src=\u0022https://github.com/dotnet/aspnetcore/assets/10418323/6006eca7-6d4f-4d68-bcef-c0978b3dbd8d\u0022\u003E\r\nSo... will we ever get this fix to stop spamming .NET exceptions for no reason? ",
        "createdAt": "2023-11-16T15:28:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45086#issuecomment-1814682612"
      },
      {
        "id": "IC_kwDOAQzde8595ndy",
        "parentId": null,
        "author": "sebastianwhiffen",
        "content": "Registering my interest in this being fixed also, currently logging unnecessary 500s and blaming a middleware for trying to read the context after its been closed ",
        "createdAt": "2024-05-15T11:20:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45086#issuecomment-2112255858"
      },
      {
        "id": "IC_kwDOAQzde86X-s4L",
        "parentId": null,
        "author": "Tmurdoch",
        "content": "I would also like some more info as to how to fix this.",
        "createdAt": "2024-12-17T22:37:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45086#issuecomment-2549796363"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85WcWcy",
    "title": "SignalR should allow managing of connections by UserGroup",
    "url": "https://github.com/dotnet/aspnetcore/issues/45114",
    "createdAt": "2022-11-15T19:29:39Z",
    "lastUpdated": "2024-03-02T00:51:53Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nRight now, I can send messages to an individual user using their NameIdentifier and \u0060Clients.User(nameIdentifier).SendAsync\u0060.  I can also send messages to a group of connections using a group name and \u0060Clients.Group(groupName).SendAsync\u0060.  However, unless I\u0027m missing something, I can\u0027t send a message to a group of users (user as identified by nameIdentifier, not connection ID) at the SignalR level.\n\n### Describe the solution you\u0027d like\n\nI\u0027d like to be able to send messages to a group of users (user as identified by nameIdentifier, not connection ID) at the SignalR level.\n\n### Additional context\n\nYes, this can of course be done with a roll-your-own backplane, track your own users as a group, and send to multiple users in SignalR according to the group you\u0027ve defined for yourself.  But the beauty of Groups and Users in SignalR is that they inherently support scaling up to multiple SignalR server instances and your code doesn\u0027t have to worry about ensuring that the message gets sent out to all SignalR instances.\r\n\r\nIf I roll-my-own backplane, I have 2 options:\r\n1) Implement my own mechanism for grouping users by nameIdentifier, then when I want to send a message to all users in that group, use \u0060Clients.Users(nameIdentifiers)\u0060.  This will work, but each time a server wants to send to the group, it\u0027ll have to go to a backplane or database to retrieve the list of all users in that group; it can\u0027t use SignalR\u0027s existing scaling architecture to just \u0022send to all users in this UserGroup\u0022, which would be more convenient and efficient.\r\n2) Use \u0060Clients.Group(groupName)\u0060.  Each time a user joins a group, I add their connection ID into that named group, then send to that group to send to all group users.  But what about when the user reconnects with a new ID?  I need to worry about adding their new ID back into the appropriate groups.  And what about when they leave the group?  I know their current ID, but not any others associated with their nameIdentifier that may have been added.  Seems like this won\u0027t really work.\r\n\r\nIf, however, SignalR offered the concept of UserGroup, I\u0027d add a user to a group when necessary, remove them when necessary, and when I needed to send a message to all group users by nameIdentifier, I\u0027d send it to that UserGroup.  A user disconnecting/reconnecting is fine because their nameIdentifier is still in that UserGroup so nothing needs to happen.  A user leaving is fine, because my server instance can just remove that nameIdentifier from the UserGroup.  And when I need to send a message to all users in the UserGroup, I don\u0027t need to spend extra resources going off to a backplane or DB; it\u0027s utilizing the one that already exists because I\u0027ve scaled up SignalR and setup a SignalR backplane already.",
    "upvotes": 2,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85OcTBI",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 8 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-15T23:50:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45114#issuecomment-1316040776"
      },
      {
        "id": "IC_kwDOAQzde85OhLWM",
        "parentId": null,
        "author": "jez9999",
        "content": "Additional idea: GroupGroup, allowing you to have groups of Groups to which you can send a message.",
        "createdAt": "2022-11-16T16:40:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45114#issuecomment-1317320076"
      },
      {
        "id": "IC_kwDOAQzde85SsMcU",
        "parentId": null,
        "author": "dkogithub",
        "content": "This is a must have feature for us as well. \r\nWe have a workaround on the client side for now, but it\u0027s super ugly solution. \r\nIt would be great to have a possibility to do filtering on the server side using user ids instead of connection ids.",
        "createdAt": "2023-01-18T16:05:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45114#issuecomment-1387317012"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85Xa-yf",
    "title": "SignalR-Client-Cpp should consider using a different json library",
    "url": "https://github.com/dotnet/aspnetcore/issues/45318",
    "createdAt": "2022-11-28T16:11:38Z",
    "lastUpdated": "2024-02-13T01:49:16Z",
    "body": "## Summary\r\nThe alpha4 release has incorporated the use of the jsoncpp library.  The team should consider switching to the nlohmann json library. The nlohmann library is a header-only library (https://github.com/nlohmann/json).\r\n\r\n## Motivation and goals\r\nThere are a few reasons why a header-only json library might fit better with signalR.\r\n\r\n1) Less to build - every library that signalr depends upon needs to be built. this might eventually make it harder to build/deploy signalr for non-standard platforms (e.g. we went through a 9-month period where vcpkg could not be used on RPi due to a variety of issues. adding jsoncpp as a dependency simply makes that potential problem surface area even larger).\r\n\r\n2) Less to deploy - each library dependency increases the final set of deployment files.\r\n\r\n3) Better performance - parse time and peak memory stats for nlohmann are better than jsoncpp.  The less time it takes to process json, the better. The less impact on memory, even better.  Small boards with limited resources don\u0027t need to spend extra time parsing and memory allocs are super slow. Here\u0027s a handy reference that illustrates various benchmarks for common json libraries, including both jsoncpp and nlohmann, https://lokiastari.com/Json/Performance.linux.html\r\n\r\n## In scope\r\nChanging library dependency.\r\n\r\n## Out of scope\r\nPerformance testing of libraries. It\u0027s been done by others.\r\n\r\n## Risks / unknowns\r\nIncorporating this change should effectively backing out the compilation and deployment changes introduced with alpha4.\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "design-proposal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85PRL9c",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2022-11-29T00:07:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45318#issuecomment-1329905500"
      },
      {
        "id": "IC_kwDOAQzde85PRMR7",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "Triage: This isn\u0027t for 1.0 of the C\u002B\u002B client, but we could consider this in the future (especially if there\u0027s more demand).",
        "createdAt": "2022-11-29T00:09:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45318#issuecomment-1329906811"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85ZhwCo",
    "title": "SignalR source generators shouldn\u0027t include Compilation in the pipeline",
    "url": "https://github.com/dotnet/aspnetcore/issues/45663",
    "createdAt": "2022-12-18T20:18:30Z",
    "lastUpdated": "2024-02-13T01:47:30Z",
    "body": "See https://github.com/dotnet/roslyn-analyzers/issues/6352\r\n\r\nThese pipelines are not efficient and this generator is not really incremental.\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/d2f7bd0b37b7fed379d694b3231e6c5ddd177819/src/SignalR/clients/csharp/Client.SourceGenerator/src/HubClientProxyGenerator.cs#L15-L32\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/d2f7bd0b37b7fed379d694b3231e6c5ddd177819/src/SignalR/clients/csharp/Client.SourceGenerator/src/HubServerProxyGenerator.cs#L15-L32\r\n\r\nEvery typed character in IDE will produce a new compilation and the whole thing will re-run. This doesn\u0027t benefit from being incremental.",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85aKZxc",
    "title": "[SignalR-Client-Cpp] Support for LongPolling Transport",
    "url": "https://github.com/dotnet/aspnetcore/issues/45791",
    "createdAt": "2022-12-28T11:01:11Z",
    "lastUpdated": "2024-02-13T01:46:55Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am using SignalR-Client-Cpp from inside a corporate network to connect to a public (online) signalR hub. The connection goes through a WAF which is incompatible to websockets.\n\n### Describe the solution you\u0027d like\n\nAutomatic fallback to use Long Polling [Transport](https://github.com/aspnet/SignalR/blob/release/2.1/specs/TransportProtocols.md) when the \u0060Upgrade\u0060 to Websockets is not possible. \r\n\r\n\u0060\u0060\u0060log\r\n[error    ] [websocket transport] exception when connecting to the server: set_fail_handler: 20: Invalid HTTP status.\r\n[error    ] transport could not connect due to: set_fail_handler: 20: Invalid HTTP status.\r\n[info     ] stopping connection\r\n[info     ] acquired lock in shutdown()\r\nset_fail_handler: 20: Invalid HTTP status.\r\n\u0060\u0060\u0060\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85SOrZw",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-01-11T22:45:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45791#issuecomment-1379579504"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85aS4qv",
    "title": "SignalR Retry lost connection behavior change",
    "url": "https://github.com/dotnet/aspnetcore/issues/45810",
    "createdAt": "2022-12-30T23:05:14Z",
    "lastUpdated": "2024-02-13T01:46:47Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to use the RetryPolicy to activate when an app starts but the server is not available. Currently the only time a retry is done is after a connection has been established and then gets disconnected.\n\n### Describe the solution you\u0027d like\n\nIt would be nice to have a property on the RetryPolicy to allow for use in the StartAsyncCore even when there has not been a connection established.\r\n\r\nSo if I have a AutoReconnect(RetryPolicy) in the hub builder, and the first attemp to connect to the server fails, We would like the Retry Policy to activate.\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85RkiQW",
        "parentId": null,
        "author": "hridpath",
        "content": "### Here are examples of what could be done:\r\nSo imagine a factory with may stations(Clients) and one Server. In the scenario where the power is off, for whatever reason, the stations can boot into the application(Client) quickly. The Server takes maybe a couple of minutes to get all the services ready. So the Server Hub  is not immediately available. In the current code. The clients would require a User input to restart or code added to  loop and wait for the connection. If the Client HubConnection has a RetryPolicy, we should not have to write extra code to handle this scenario.\r\n**So a boolean property can be added to the IRetryPolicy:**\r\n\u0060 /// \u003Csummary\u003E\r\n    /// When true this property tells the HubConnetion to run this RetryPolicy when an initial connection cannot be established. This allows for\r\n    /// clients to attempt to connect to a server that may be late in starting up, or failed on startup and requires a restart. The clients can then\r\n    /// reconnect when the server becomes available, if NextRetryDelay has not receives a null.\r\n    /// \u003C/summary\u003E\u0060\r\n    **bool? RetryOnStart { get; set; } =\u003E false;**\r\n\r\n**Then by making three changes to the HubConnection code:**\r\nChange this:\r\n**\u0060private async Task StartAsyncCore(CancellationToken cancellationToken)\u0060**\r\nTo this:\r\n\u0060private async Task StartAsyncCore(CancellationToken cancellationToken,\u0060**_bool fromReconnectAsync = false_**\u0060)\u0060\r\n\r\n**Add this to the StartAsyncCore method when HandshakeAsync fails**:\r\n\u0060 //[DS]If Handshake fails, and this is the first attempt, start ReconnectAsync only once.\r\n  //[CAUTION] The ReconnectAsync method calls this method so there is a chase scenario.\u0060\r\n            **_if (_reconnectPolicy.RetryOnStart \u0026\u0026 !fromReconnectAsync)\r\n                await ReconnectAsync(ex);_**\r\n**Then lastly, change the call arguments to StartAsyncCore in the ReconnectAsync method from:**\r\n**_await StartAsyncCore(_state.StopCts.Token).ConfigureAwait(false);_**\r\nto:\r\n**_await StartAsyncCore(_state.StopCts.Token, true).ConfigureAwait(false);_**",
        "createdAt": "2023-01-01T20:51:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45810#issuecomment-1368531990"
      },
      {
        "id": "IC_kwDOAQzde85ThAZN",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Today we recommend writing your own start loop if this is the behavior you desire. https://learn.microsoft.com/aspnet/core/signalr/dotnet-client?view=aspnetcore-7.0\u0026tabs=visual-studio#automatically-reconnect\r\n\r\nThis is because it\u0027s a lot easier to reason that if someone already had an active connection they would want it to reconnect automatically.\r\nBut if someone hasn\u0027t connected yet there could be multiple reasons that reconnect wouldn\u0027t be wanted, e.g. wrong url, not authenticated, not connected to internet. If we did something like this, we\u0027d likely go the opt-in route like you mentioned with \u0060IRetryPolicy.RetryOnStart\u0060.\r\n\r\nWe\u0027ll backlog and see if there is any more community interest in this behavior.",
        "createdAt": "2023-01-23T23:49:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45810#issuecomment-1401161293"
      },
      {
        "id": "IC_kwDOAQzde85ThAbZ",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-01-23T23:49:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/45810#issuecomment-1401161433"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85bXqsn",
    "title": "HubFilter should act the same way as an API middleware  ",
    "url": "https://github.com/dotnet/aspnetcore/issues/46095",
    "createdAt": "2023-01-13T21:24:05Z",
    "lastUpdated": "2024-02-13T01:45:27Z",
    "body": "I have an IUserResolver service and an IUserAccessor service inside my API.\r\n\r\nWhen using normal API request, I have a middleware that has the job of resolving the current user and setting it in the IUserAccessor service. This middleware works well and is scoped for the current request.\r\n\r\nHowever, when trying the same thing with IHubFilter, I get very different results. Here\u0027s my filter.\r\n\r\n\r\n\u0060\u0060\u0060cs\r\n    public class UserResolverFilter : IHubFilter\r\n    {\r\n        private IUserResolverService _userResolverService;\r\n        private IUserAccessorService _userAccessorService;\r\n        private readonly ILogger\u003CUserResolverFilter\u003E _logger;\r\n        public UserResolverFilter(IUserResolverService userResolverService, IUserAccessorService userAccessorService, ILogger\u003CUserResolverFilter\u003E logger)\r\n        {\r\n            _userResolverService = userResolverService;\r\n            _userAccessorService = userAccessorService;\r\n            _logger = logger;\r\n\r\n        }\r\n\r\n        public async ValueTask\u003Cobject\u003E InvokeMethodAsync(\r\n            HubInvocationContext invocationContext,\r\n            Func\u003CHubInvocationContext, ValueTask\u003Cobject\u003E\u003E next\r\n            )\r\n        {\r\n\r\n            return await next(invocationContext);\r\n        }\r\n\r\n        public async Task OnConnectedAsync(HubLifetimeContext context, Func\u003CHubLifetimeContext, Task\u003E next)\r\n        {\r\n            var accessToken = await _userResolverService.ResolveAccessTokenAsync();\r\n            var user = await _userResolverService.ResolveAsync();\r\n            _userAccessorService.AccessToken = accessToken;\r\n            _userAccessorService.User = user;\r\n            if (user == null)\r\n            {\r\n                _logger.LogDebug($\u0022Unauthenticated user with connectionId {context.Context.ConnectionId} connected\u0022);\r\n            }\r\n            else\r\n            {\r\n                _logger.LogDebug($\u0022Authenticated User {_userAccessorService.User.UserName} with connectionId {context.Context.ConnectionId} connected\u0022);\r\n            }\r\n            await next(context);\r\n        }\r\n\r\n        public async Task OnDisconnectedAsync(\r\n            HubLifetimeContext context, Exception exception, Func\u003CHubLifetimeContext, Exception, Task\u003E next)\r\n        {\r\n\r\n            if (_userAccessorService.User == null)\r\n            {\r\n                _logger.LogDebug($\u0022Unauthenticated user with connectionId {context.Context.ConnectionId} disconnected\u0022);\r\n            }\r\n            else\r\n            {\r\n                _logger.LogDebug($\u0022Authenticated User {_userAccessorService.User.UserName} with connectionId {context.Context.ConnectionId} disconnected\u0022);\r\n            }\r\n            await next(context, exception);\r\n        }\r\n\u0060\u0060\u0060\r\n\r\n\r\nAnd my hub\r\n\r\n\u0060\u0060\u0060cs\r\n   public class SessionHub : Hub\u003CISessionHub\u003E\r\n    {\r\n        private readonly ISessionService _sessionService;\r\n\r\n        public classSessionHub (\r\n            ISessionService sessionService\r\n            )\r\n        {\r\n            _sessionService= sessionService;\r\n\r\n        }\r\n\r\n\r\n        public override async Task OnConnectedAsync()\r\n        {\r\n            await base.OnConnectedAsync();\r\n            await _sessionService.CreateAsync(Context.ConnectionId);\r\n        }\r\n\r\n        public override async Task OnDisconnectedAsync(Exception exception)\r\n        {\r\n            await _sessionService.DeleteAsync(Context.ConnectionId);\r\n            await base.OnDisconnectedAsync(exception);\r\n        }\r\n\u0060\u0060\u0060\r\n\r\nNow my ISessionService calls injects my IUserAccessor service and when is constructed, assings the user to a public variable. The problem is that when the constructor is called, the filter has not been executed yet, which is really different of the middleware logic, making assigning null to my user variable.\r\n\r\n\r\n\r\nIs there a way to unify this behaviour so that we can have the same exact \u0022middleware\u0022 DI logic for hub filters^ ",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "api-suggestion"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85SbNYy",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E I have a middleware that has the job of resolving the current user and setting it in the IUserAccessor service. This middleware works well and is scoped for the current request.\r\n\r\n\u0060\u0060\u0060C#\r\nvar accessToken = await _userResolverService.ResolveAccessTokenAsync();\r\nvar user = await _userResolverService.ResolveAsync();\r\n\u0060\u0060\u0060\r\n\r\n- What do these calls do?\r\n- What does \u0060IUserAccessorService\u0060 look like?",
        "createdAt": "2023-01-14T17:27:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46095#issuecomment-1382864434"
      },
      {
        "id": "IC_kwDOAQzde85SbOaO",
        "parentId": null,
        "author": "sebastienlabine",
        "content": "@davidfowl \r\n\r\nTheses calls to store the user in a scoped service, allowing me to simply inject the userAccessorService in the service instead of always passing the user as a parameter in my service functions. You can think of it like a tenant service. This service is also injected in my DBContext for global query filters.\r\n\r\n\r\n\u0060\u0060\u0060cs\r\n    public class UserAccessorService : IUserAccessorService\r\n    {\r\n        public SBUser? User { get; set; }\r\n        public string? AccessToken { get; set; }\r\n    }\r\n\u0060\u0060\u0060\r\n\r\n\r\n**IUserResolverService**\r\n\u0060\u0060\u0060cs\r\npublic class UserResolverService : IUserResolverService\r\n    {\r\n        private readonly UserManager\u003CSBUser\u003E _userManager;\r\n        private readonly IHttpContextAccessor _context;\r\n\r\n\r\n        public UserResolverService(UserManager\u003CSBUser\u003E userManager, IHttpContextAccessor context)\r\n        {\r\n            _userManager = userManager;\r\n            _context = context;\r\n        }\r\n        public async Task\u003CSBUser\u003E ResolveAsync()\r\n        {\r\n            return await _userManager.GetUserAsync(_context.HttpContext.User);\r\n        }\r\n        public async Task\u003Cstring\u003E ResolveAccessTokenAsync()\r\n        {\r\n            return await _context.HttpContext.GetTokenAsync(\u0022access_token\u0022);\r\n        }\r\n    }\r\n\u0060\u0060\u0060\r\n\r\nhere\u0027s the middleware I was using\r\n\r\n\u0060\u0060\u0060cs\r\n public class UserResolverMiddleware\r\n    {\r\n        private readonly RequestDelegate next;\r\n\r\n        public UserResolverMiddleware(RequestDelegate next)\r\n        {\r\n            this.next = next;\r\n        }\r\n\r\n        public async Task Invoke(HttpContext context)\r\n        {\r\n            var accessor = context.RequestServices.GetRequiredService\u003CIUserAccessorService\u003E();\r\n            var resolver = context.RequestServices.GetRequiredService\u003CIUserResolverService\u003E();\r\n            var user = await resolver.ResolveAsync();\r\n            var accessToken = await resolver.ResolveAccessTokenAsync();\r\n            accessor.User = user;\r\n            accessor.AccessToken = accessToken;\r\n            await next(context);\r\n        }\r\n    }\r\n\r\n\u0060\u0060\u0060",
        "createdAt": "2023-01-14T17:45:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46095#issuecomment-1382868622"
      },
      {
        "id": "IC_kwDOAQzde85SbOzv",
        "parentId": null,
        "author": "davidfowl",
        "content": "Right, the problem with this service is that its dependent on the \u0060IHttpContextAccessor\u0060 which doesn\u0027t work with SignalR. You should be getting the user from the \u0060HubLifetimeContext\u0060  when using SignalR.\r\n",
        "createdAt": "2023-01-14T17:51:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46095#issuecomment-1382870255"
      },
      {
        "id": "IC_kwDOAQzde85SbPp8",
        "parentId": null,
        "author": "sebastienlabine",
        "content": "@davidfowl The thing is my user is actually getting resolved by \u0060HTTPContextAccessor\u0060. The problem seems to be that my underling services are already constructed before the \u0060HubFilter\u0060 is executed.\r\n\r\n![image](https://user-images.githubusercontent.com/8888846/212488075-7f35cc77-a7b5-4bc5-865b-a87aebf682cf.png)\r\n\r\nHere\u0027s my base service that every service inherits from. You can see that I actually associate the \u0060_user\u0060 field to the user found in the accessor service. This value is null because it\u0027s contructed before the filter. I can still access _userAccessorService.User directly to have access to my user, but this is where the logic is different than the API middleware\r\n\r\n\u0060\u0060\u0060cs\r\n\r\n     public ServiceBase(\r\n            IDbContextFactory\u003CSBContext\u003E dbContextFactory,\r\n            IUserAccessorService accessorService,\r\n            IMapper mapper\r\n            )\r\n        {\r\n            _mapper = mapper;\r\n            _dbContextFactory = dbContextFactory;\r\n            _userAccessorService = accessorService;\r\n            _context = CreateDbContext();\r\n            _dbSet = _context.Set\u003CT\u003E();\r\n            _user = _userAccessorService.User;\r\n            _userId = _userAccessorService.UserId;\r\n        }\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2023-01-14T18:04:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46095#issuecomment-1382873724"
      },
      {
        "id": "IC_kwDOAQzde85SbRSt",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E @davidfowl The thing is my user is actually getting resolved by HTTPContextAccessor. \r\n\r\nRight but you\u0027re getting lucky. You don\u0027t want to use the user from the accessor because it might be stale or a disposed reference (in the case of windows auth). You want to use the one that comes from the context SignalR is passing to you.\r\n\r\n\u003E The problem seems to be that my underling services are already constructed before the HubFilter is executed.\r\n\r\nYou haven\u0027t shown the service registration and their lifetime. Nor have you shown your HubFilter registration.\r\n\r\nI [wrote something](https://github.com/dotnet/AspNetCore.Docs/issues/27956#issuecomment-1362339682) that will go into the docs soon about understanding the hub lifetime.\r\n\r\nWhen using SignalR, there are 2 dependency injection scopes in play, and they are unrelated:\r\n- Request scope\r\n- The hub invocation scope\r\n\r\nIf you have a scoped service, you will *NOT* get the same instance of services. I\u0027d need to see more of your project to understand the lifetime issues, but hopefully that provides enough of a hint to get you further in your understanding of the issue.",
        "createdAt": "2023-01-14T18:26:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46095#issuecomment-1382880429"
      },
      {
        "id": "IC_kwDOAQzde85SbSnh",
        "parentId": null,
        "author": "sebastienlabine",
        "content": "Thanks for the clarification about the HTTPContext! \r\n\r\nYes, I feel like it might be a little bit confusing coming for the Rest API where the dependency injection  / lifetime of a request is fairly straightfoward.\r\n\r\nThanks for adding the documentation and your help. I\u0027ll take a look and try with theses concepts in mind.",
        "createdAt": "2023-01-14T18:44:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46095#issuecomment-1382885857"
      },
      {
        "id": "IC_kwDOAQzde85SbTkT",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Yes, I feel like it might be a little bit confusing coming for the Rest API where the dependency injection / lifetime of a request is fairly straightfoward.\r\n\r\nYou can think of it very similarly but there are 2 separate worlds.\r\n\r\nHttp request -\u003E new scope -\u003E invoke middleware -\u003E invoke endpoint (new controller e.g.) -\u003E dispose scope\r\nHub invocation -\u003E new scope -\u003E new hub -\u003E invoke hub method -\u003E dispose hub -\u003E dispose scope\r\n\r\n",
        "createdAt": "2023-01-14T19:02:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46095#issuecomment-1382889747"
      },
      {
        "id": "IC_kwDOAQzde85XoK9F",
        "parentId": null,
        "author": "ricardomomm",
        "content": "@davidfowl I have a similar case and I think we should have similar feature than a API Middleware for SignalR hubs. Let me explain my scenario:\r\n\r\nI have a SignalR application that is multi-tenant, when the request comes in\r\n\r\n1. I\u0027m resolving the Tenant from the subdomain in the Request, which works fine in API and SignalR middleware\r\n2. After retrieving the the Tenant it validates the user token using the tenant authentication options, basically custom JwtBearer options with a custom scheme per tenant\r\n3. The authentication goes well and then it leaves the Request and enters the Hub Invocation\r\n4. In the Hub I have a few services that depend on Tenant information to be created (some tenant may have different implementations of a service)\r\n5. That is where it breaks, I cannot access this scope from Hub invocation before the hub is created, or before the service arguments of a method are resolved. I need that to resolve the Tenant again inside the Hub invocation scope, there are no extension points.\r\n\r\nIn summary, I have all the information to resolve the Tenant, but I cannot resolve before instantiating the dependencies because there are no extension points.\r\n\r\nI added a HubFilter, but at the time the HubFilter executes all the Hub dependencies were resolved.",
        "createdAt": "2023-03-15T14:50:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46095#issuecomment-1470148421"
      },
      {
        "id": "IC_kwDOAQzde85em7zN",
        "parentId": null,
        "author": "PatriQ94",
        "content": "Is there any updates on these issues? I\u0027m facing the same issues and cannot find any solutions.\r\n\r\nI have a HubFilter which is supposted to execute before the Hubs, read tenant/user data and store them into a Scoped service like this:\r\n\u0060\u0060\u0060csharp\r\npublic class TenantFilter : IHubFilter\r\n{\r\n    private readonly IUserInfo _userInfo;\r\n    public TenantFilter(IUserInfo userInfo)\r\n    {\r\n        _userInfo = userInfo;\r\n    }\r\n    public async ValueTask\u003Cobject\u003E InvokeMethodAsync(HubInvocationContext invocationContext, \r\n    Func\u003CHubInvocationContext, ValueTask\u003Cobject\u003E\u003E next)\r\n    {\r\n        HttpContext httpContext = invocationContext.Hub.Context.GetHttpContext();\r\n        //Fills the tenant data into _userInfo\r\n        AuthorizationHelper.ProcessAuthorizationHeaders(_userInfo, httpContext.Request.Headers);\r\n\r\n        return await next(invocationContext);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nI have a Hub which accepts requests like this:\r\n\u0060\u0060\u0060csharp\r\n[SignalRHub]\r\npublic class ScreeningHub : Hub\r\n{\r\n    public async Task TriggerScreening([FromServices] IScreeningService _screeningService)\r\n    {\r\n        _screeningService.TriggerScreening();\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\nWhich calls a Scoped service which looks like this:\r\n\u0060\u0060\u0060csharp\r\npublic class ScreeningService : IScreeningService\r\n{\r\n    private readonly IScreeningRepository _screeningRepository;\r\n    public ScreeningService(IScreeningRepository screeningRepository)\r\n    {\r\n        _screeningRepository = screeningRepository;\r\n    }\r\n\t\r\n    public async Task\u003Cbool\u003E TriggerScreening()\r\n    {\r\n        return await _screeningRepository.DoSomething();\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\nWhich calls a Scoped repository which looks like this:\r\n\u0060\u0060\u0060csharp\r\npublic class ScreeningRepository : IScreeningRepository\r\n{\r\n    private readonly string tenantId;\r\n    public ScreeningRepository(IUserInfo userInfo)\r\n    {\r\n        //UserInfo here is empty\r\n        tenantId = userInfo.GetTenant();\r\n    }\r\n\t\r\n    public async Task\u003Cbool\u003E DoSomething()\r\n    {\r\n\t//Can\u0027t do anything because tenantId here is empty\r\n        return false;\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\nAnd here the UserInfo is empty. Because the ScreeningRepository was instantiated before the HubFilter was executed, leaving the dependency injection broken.\r\n",
        "createdAt": "2023-06-12T12:40:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46095#issuecomment-1587264717"
      },
      {
        "id": "IC_kwDOAQzde85f08uo",
        "parentId": null,
        "author": "ricardomomm",
        "content": "Bump! This is very needed!",
        "createdAt": "2023-06-26T15:24:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46095#issuecomment-1607715752"
      },
      {
        "id": "IC_kwDOAQzde85f1Dco",
        "parentId": null,
        "author": "davidfowl",
        "content": "For now you have to resolve dependencies from the invoke method using the service provider instead of the constructor.",
        "createdAt": "2023-06-26T15:41:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46095#issuecomment-1607743272"
      },
      {
        "id": "IC_kwDOAQzde85vcanX",
        "parentId": null,
        "author": "co-dax",
        "content": "@ricardomomm, @PatriQ94 If tenant related service is scoped then you can get the service instance within a hub filter via \u0060HubInvocationContext.ServiceProvider.GetRequiredService\u003CISomeScopedService\u003E() \u0060and configure there (since you have connection/user data there, for example \u0060invocationContext.Context.User.Claims...\u0060) tenant related values (since we cannot get user/connection information through DI in the service itself). Then you will get **the same** (since/if the service is scoped) but configured service instance in a Hub constructor via dependency injection.\r\nI have used this approach to centralize and abstract away the workaround and to have a clean dependency injection into \u0060Hub\u0060 constructor instead of having to resolve service from the service provider as suggested by @davidfowl  [just above](https://github.com/dotnet/aspnetcore/issues/46095#issuecomment-1607743272).",
        "createdAt": "2023-12-26T18:59:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46095#issuecomment-1869720023"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85cSOxQ",
    "title": "Is IAsyncEnumerable supported as a client result type in SignalR?",
    "url": "https://github.com/dotnet/aspnetcore/issues/46161",
    "createdAt": "2023-01-18T23:41:11Z",
    "lastUpdated": "2024-12-18T02:00:26Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to combine [client results](https://learn.microsoft.com/en-us/aspnet/core/signalr/hubs?view=aspnetcore-7.0#client-results) with [streaming](https://learn.microsoft.com/en-us/aspnet/core/signalr/streaming?view=aspnetcore-7.0) in SignalR to send a request message from the server to the client and have the client respond with a stream of response messages. Is this currently supported?\r\n\r\nFor example can I create a \u0060\u0060\u0060Hub\u003CIClient\u003E\u0060\u0060\u0060 and IClient method \u0060\u0060\u0060Task\u003CIAsyncEnumerable\u003CPartialContent\u003E\u003E GetContent()\u0060\u0060\u0060 and call it from the server on a client?\r\n\r\nAll the streaming examples I\u0027ve found in the documentation are initiated by the client rather than the server.\r\n\r\n\n\n### Describe the solution you\u0027d like\n\nIf it\u0027s not supported, then I\u0027d like support to be added for returning streaming responses from the client to the server.\n\n### Additional context\n\n_No response_",
    "upvotes": 7,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85TPC5G",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E If it\u0027s not supported, then I\u0027d like support to be added for returning streaming responses from the client to the server.\r\n\r\nCan you outline the scenario? We\u0027ve discussed it but the implementation is tricky so motivating examples would help.",
        "createdAt": "2023-01-19T05:18:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-1396452934"
      },
      {
        "id": "IC_kwDOAQzde85TZ0IM",
        "parentId": null,
        "author": "KSemenenko",
        "content": "@RedwoodForest SignalR has Streams https://learn.microsoft.com/en-us/aspnet/core/signalr/streaming?view=aspnetcore-7.0\r\nprobably this is what you looking for",
        "createdAt": "2023-01-21T15:46:45Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-1399276044"
      },
      {
        "id": "IC_kwDOAQzde85TZ5ai",
        "parentId": null,
        "author": "davidfowl",
        "content": "@KSemenenko this is about server to client streaming (which we don\u0027t support), initiated by the server.",
        "createdAt": "2023-01-21T17:46:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-1399297698"
      },
      {
        "id": "IC_kwDOAQzde85TZ6xV",
        "parentId": null,
        "author": "KSemenenko",
        "content": "Now I get it, I thought for a while that these two-way streams.\r\nAnyway @davidfowl I have some examples for you:\r\n\r\nStock flow, client read somwhere this flow, maybe process it and send it to serverside. like 15k-50k messages per second.\r\n\r\nAudio/video stream from client side to server. I did it once (I may be wrong. It was a couple of years ago and it didn\u0027t work very well), I sent audio buffer over regualr method, and play sound from Stream. \r\n\r\nBut perhaps these are all examples for which websockets are better without additional wrappers for better performance.\r\nAlthough once a stream has been created, there probably isn\u0027t much overhead anymore.\r\n\r\n\r\n\r\n",
        "createdAt": "2023-01-21T18:12:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-1399303253"
      },
      {
        "id": "IC_kwDOAQzde85Ta8aE",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Stock flow, client read somwhere this flow, maybe process it and send it to serverside. like 15k-50k messages per second.\r\n\r\nI don\u0027t understand this one. \r\n\r\n\u003E Audio/video stream from client side to server. I did it once (I may be wrong. It was a couple of years ago and it didn\u0027t work very well), I sent audio buffer over regualr method, and play sound from Stream.\r\n\r\nYou can send anything really over SignalR now. Of course, there are optimizations you can make if you do it all yourself but the latest hub protocol is pretty good at transfering pretty much anything, since it support both binary and a text (JSON) protocol.\r\n\r\nThe benefit of client results if really keeping the state machine in a single async flow vs breaking the flow and state up into multiple calls over client and server that need to be correlated.\r\n\r\n",
        "createdAt": "2023-01-22T18:46:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-1399572100"
      },
      {
        "id": "IC_kwDOAQzde85TbIQX",
        "parentId": null,
        "author": "KSemenenko",
        "content": "In the first case, I was referring to stock trading, forex, or crypto. for example, clients read a stream of quotes from exchanges, then aggregate a it bit and then send it to the server.\r\nAnd you need a good speed there, also this is an endless stream of data.\r\n\r\nOr, as an option, files can be transferred via signalR.\r\n\r\nSomeone in my team tried to do this. But something went wrong.  =)\r\n\r\n\r\nBut as you can see, this is not a good examples. each case requires a special solution and imposes its own limitations...\r\n",
        "createdAt": "2023-01-22T22:03:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-1399620631"
      },
      {
        "id": "IC_kwDOAQzde85TfoOJ",
        "parentId": null,
        "author": "RedwoodForest",
        "content": "@davidfowl \r\n\r\n\u003E \u003E If it\u0027s not supported, then I\u0027d like support to be added for returning streaming responses from the client to the server.\r\n\u003E \r\n\u003E Can you outline the scenario? We\u0027ve discussed it but the implementation is tricky so motivating examples would help.\r\n\r\nIn our case we have a .NET-based client and server for monitoring devices at remote sites and are using SignalR to add a feature to the client that allows occasional remote access via the user\u0027s browser to the device administration web pages for configuration by proxying HTTP traffic from the server to the client. (Access is limited to specific devices the user has permission to access remotely.)\r\n\r\nThere are other approaches to this one could take such as creating an SSH reverse proxy, but after exploring and prototyping a number of options SignalR will be the easiest to integrate into our existing client/server apps and the performance seems acceptable for our use case.\r\n\r\nStreaming client results are not required for 95% of our use cases, as most HTTP responses can be handled by choosing an appropriate max message size, but some devices support things like downloading dumps of troubleshooting information which can be into the tens or hundreds of MB, and it would be nice to support this use case.\r\n\r\n\u003E The benefit of client results if really keeping the state machine in a single async flow vs breaking the flow and state up into multiple calls over client and server that need to be correlated.\r\n\r\nAs you mention above, one workaround is to send the response from the client as a separate one-way streaming call and correlating it with the request on the server. We used this approach in our prototype before client results were supported, and it definitely works. The main downside is the additional complexity in waiting for the response and doing the correlation.\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2023-01-23T18:34:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-1400800137"
      },
      {
        "id": "IC_kwDOAQzde85qV6Z_",
        "parentId": null,
        "author": "fishjimi",
        "content": "\u003E @KSemenenko this is about server to client streaming (which we don\u0027t support), initiated by the server.\r\n\r\nThis is a feature that I exactly wanted !!!!! \r\nI really hope SignalR could become into a more general framework for remote communication. \r\n\r\n\r\n\u003E \u003E If it\u0027s not supported, then I\u0027d like support to be added for returning streaming responses from the client to the server.\r\n\u003E \r\n\u003E Can you outline the scenario? We\u0027ve discussed it but the implementation is tricky so motivating examples would help.\r\n\r\nFor example, In IOT scenario , sometime server need to initiate request to device:\r\n* Retrieval device\u0027s status or files (such as logs,images,videos,recorded data,etc)\r\n* Command device and return execution results\r\n* Upgrade device\u0027s firmware\r\n\r\nSo, clients need to communicate with server in two-way real-time communication (best if request can be initiated by both side).\r\nThere are many alternative options:\r\n\r\n* gRPC\r\nSupport two-way stream, but it\u0027s hard to maintain connections for server, request can only be initiated by client, otherwise , you have to implement your own protocal based on two-way stream.\r\n* DotNetty\r\nCan do anything, but mostly have to implement by yourself.\r\n* SignalR\r\nNearly perfect !! Both side of server and client can initiate request, Easy to maintain connections bu using \u0060\u0060\u0060Client,User,Group\u0060\u0060\u0060.  The missing is, not support two-way stream and server can\u0027t initiate stream, which means some fuctions , like \u0060Retrieval client\u0027s files/data\u0060, \u0060send files/data to client\u0060, can\u0027t be done **\u0060in a single async flow\u0060**.\r\n\r\n\r\n\u0060\u0060\u0060c#\r\n//Client can do this\r\nvar channel = Channel.CreateBounded\u003Cstring\u003E(10);\r\nawait connection.SendAsync(\u0022UploadStream\u0022, channel.Reader);\r\nawait channel.Writer.WriteAsync(\u0022some data\u0022);\r\nawait channel.Writer.WriteAsync(\u0022some more data\u0022);\r\nchannel.Writer.Complete();\r\n\r\n//Client can do this\r\nvar cancellationTokenSource = new CancellationTokenSource();\r\nvar channel = await hubConnection.StreamAsChannelAsync\u003Cint\u003E(\r\n    \u0022Counter\u0022, 10, 500, cancellationTokenSource.Token);\r\n// Wait asynchronously for data to become available\r\nwhile (await channel.WaitToReadAsync())\r\n{\r\n    // Read all currently available data synchronously, before waiting for more data\r\n    while (channel.TryRead(out var count))\r\n    {\r\n        Console.WriteLine($\u0022{count}\u0022);\r\n    }\r\n}\r\n\r\nConsole.WriteLine(\u0022Streaming completed\u0022);\r\n\u0060\u0060\u0060\r\n\u0060\u0060\u0060c#\r\npublic interface ITestHub\r\n{\r\n    Task\u003CChannelReader\u003Cstring\u003E\u003E RequestClientToUploadStream();\r\n    //Or Task\u003CIAsyncEnumerable\u003Cstring\u003E\u003E RequestClientToUploadStream();\r\n\r\n    Task RequestClientToDownloadStream(ChannelReader\u003Cstring\u003E stream);\r\n    //Or Task RequestClientToDownloadStream(IAsyncEnumerable\u003Cstring\u003E stream);\r\n}\r\n\r\n//Server can\u0027t do this\r\nvar stream = await _hubContext.Clients.Client(someConnectionId).RequestClientToUploadStream();\r\nawait foreach (var item in stream.ReadAllAsync())\r\n{\r\n    //...\r\n}\r\n\r\n//Server can\u0027t do this\r\nvar channel = Channel.CreateBounded\u003Cstring\u003E(10);\r\nvar stream = await _hubContext.Clients.Client(someConnectionId).RequestClientToDownloadStream(channel.Reader);\r\nawait channel.Writer.WriteAsync(\u0022some data\u0022);\r\nawait channel.Writer.WriteAsync(\u0022some more data\u0022);\r\nchannel.Writer.Complete();\r\n\u0060\u0060\u0060",
        "createdAt": "2023-10-29T14:27:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-1784129151"
      },
      {
        "id": "IC_kwDOAQzde85qV--P",
        "parentId": null,
        "author": "davidfowl",
        "content": "@BrennanConroy how much work would it be to support streaming with client results? We hit a ton of gotchas implementing single results that would only be amplified by this (there are lots of foot guns), but I agree if they are *strong* scenarios that warrant it, we can investigate. If we did this, we\u0027d start with single connections only, not groups etc.\r\n\r\n\u003E For example, In IOT scenario , sometime server need to initiate request to device:\r\n\r\n\u003E Retrieval device\u0027s status or files (such as logs,images,videos,recorded data,etc)\r\n\u003E Command device and return execution results\r\n\u003E Upgrade device\u0027s firmware\r\n\r\nFor sure, I have an example of command and control using client results https://github.com/davidfowl/CommandAndControl. These things were of course always possible before but was made trivial but adding client results. Still, seeing motivating, non-contrived examples (preferably with existing implementations) would be the best way to motivate this work. \r\n\r\n",
        "createdAt": "2023-10-29T15:42:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-1784147855"
      },
      {
        "id": "IC_kwDOAQzde85qWAn3",
        "parentId": null,
        "author": "fishjimi",
        "content": "\u003E For sure, I have an example of command and control using client results https://github.com/davidfowl/CommandAndControl. These things were of course always possible before but was made trivial but adding client results. Still, seeing motivating, non-contrived examples (preferably with existing implementations) would be the best way to motivate this work.\r\n\r\n\r\nCommandAndControl is really cool! and it\u0027s pattern is really suit for IOT or game scenario.\r\nThat\u0027s why I think SignalR is better(easy to use) than gRPC or something else, Mainlly becase it can initiate request from server, while orther frameworks can\u0027t.\r\nThe best practices in my imagination is:\r\n\r\nOrleans  \r\n\\\u002B  \r\nSignalR (with streaming initiated by the server)  \r\n\\\u002B   \r\nOrleans based SignalR backplane  \r\n\\[\u002BProtobuf Serializer  ]  \r\n\\=  \r\nWill be able to be used in all scenarios \uD83D\uDE02 ",
        "createdAt": "2023-10-29T16:09:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-1784154615"
      },
      {
        "id": "IC_kwDOAQzde85qWRxY",
        "parentId": null,
        "author": "KSemenenko",
        "content": "\r\n\u003E Orleans \u002B SignalR (with streaming initiated by the server) \u002B Orleans based SignalR backplane [\u002BProtobuf Serializer ] = Will be able to be used in all scenarios \uD83D\uDE02\r\n\r\ntry our library, we even made support for \u0022server calls client method and get result\u0022\r\nhttps://github.com/managedcode/Orleans.SignalR\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2023-10-29T21:05:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-1784224856"
      },
      {
        "id": "IC_kwDOAQzde85vJ9Ki",
        "parentId": null,
        "author": "A9G-Data-Droid",
        "content": "My example is a variable group of worker services. Each one processes data and stores some metadata about what it is doing in a local DB. The hub is a Blazor Server App that provides a central place to look at all the results of any or all workers. It is much like the command and control example, except the clients are returning tables that exceed the recommended message size by an unknown and growing amount. So I can\u0027t just increase the SignalR message size and pretend like it won\u0027t overrun some day.\r\n\r\nI am currently streaming the data on a different connection because I can\u0027t stream in a client response. Then I return a simple confirmation in the client response. This gets me the client response flow I want and the streaming data to workaround the size limitation on the client response. It just seems odd. (You could argue that I am in this position due to architecture decisions but I don\u0027t want to roll a full distributed DB sync for this project at this point).\r\n\r\nNOTE: I am using \u0060TypedSignalR.Client\u0060 due to the lack of strongly typed client to hub communication.\r\n\r\n\u0060\u0060\u0060c#\r\n/// A \u0022client results\u0022 method in my client looks like this:\r\npublic async Task\u003Cint?\u003E GetJobList()\r\n{\r\n    int? numberOfJobs = null;\r\n    \r\n    try\r\n    {\r\n        var jobList = _dbClient.GetAllThe\u003CJobProgress\u003E();\r\n        numberOfJobs = jobList.Count;\r\n\r\n        // I am recieving the SetCompleteJobList in a hub method that writes to _theJobList\r\n        await _strongHub.SetCompleteJobList(jobList.ToAsyncEnumerable());\r\n    }\r\n    catch (Exception e)\r\n    {\r\n        _logger.Error(e, \u0022Failed to send job list to hub!\u0022);\r\n    }\r\n\r\n    return numberOfJobs;\r\n}\r\n\r\n\r\n// From hub example:\r\nvar expectedJobCount = heyClient.GetJobList();\r\nif (expectedJobCount == _theJobList.Count)\r\n    Console.WriteLine(\u0022This is what success looks like.\u0022)\r\n\u0060\u0060\u0060",
        "createdAt": "2023-12-20T17:40:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-1864880802"
      },
      {
        "id": "IC_kwDOAQzde86XxTUx",
        "parentId": null,
        "author": "bitbound",
        "content": "@davidfowl   Here\u0027s a use case to add to the list.\n\nThe products I work on involve managing remote computers via the browser.  The browser connects to a SignalR hub, and agents on the remote devices connect to another.\n\nI\u0027ve previous implemented, and will be implementing again, features like remote registry editor, remote file system manager, remote event viewer, etc.\n\nIn these scenarios, it would be very helpful if I could get an \u0060IAsyncEnumerable\u003CTDto\u003E\u0060 returned in a single call from the \u0022browser to server to agent and back\u0022.",
        "createdAt": "2024-12-16T17:56:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-2546283825"
      },
      {
        "id": "IC_kwDOAQzde86XxYFR",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E In these scenarios, it would be very helpful if I could get an IAsyncEnumerable\u003CTDto\u003E returned in a single call from the \u0022browser to server to agent and back\u0022.\n\nCan you detail how this helps? Ideally you would show the current implementation and how this new support would make it easier",
        "createdAt": "2024-12-16T18:05:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-2546303313"
      },
      {
        "id": "IC_kwDOAQzde86Xx_u6",
        "parentId": null,
        "author": "bitbound",
        "content": "I don\u0027t currently have an implementation to show, and I didn\u0027t use SignalR at previous companies.\n\nHowever, imagine you have a file explorer in the browser, and you\u0027re streaming file system entries back from a remote agent as you navigate through the tree.  You also have a search function.  Your services might look like this with the new support. \n\n\u0060\u0060\u0060C#\npublic class BrowserHub(IHubContext\u003CAgentHub, IAgentHubClient\u003E agentHub) : Hub\u003CIBrowserHubClient\u003E\n{\n  private readonly IHubContext\u003CAgentHub, IAgentHubClient\u003E _agentHub = agentHub;\n\n  public async IAsyncEnumerable\u003CFileSystemEntryDto\u003E GetFileSystemEntries(Guid deviceId, string parentPath)\n  {\n     var agentConnectionId = await GetAgentConnectionId(deviceId);\n     var fileSystemEntries = _agentHub.Clients\n        .Client(agentConnectionId)\n        .GetFileSystemEntries(parentPath);\n\n     await foreach (var fileSystemEntry in fileSystemEntries)\n     {\n       yield return fileSystemEntry;\n     }\n  }\n\n  public async IAsyncEnumerable\u003CFileSystemEntryDto\u003E SearchFileSystemEntries(Guid deviceId, string parentPath, string searchPattern)\n  {\n     var agentConnectionId = await GetAgentConnectionId(deviceId);\n     var fileSystemEntries = _agentHub.Clients\n       .Client(agentConnectionId)\n       .SearchFileSystemEntries(parentPath, searchPattern);\n\n     await foreach (var fileSystemEntry in fileSystemEntries)\n     {\n       yield return fileSystemEntry;\n     }\n  }\n}\n\n// In shared abstractions library.\npublic interface IAgentHubClient\n{\n  IAsyncEnumerable\u003CFileSystemEntryDto\u003E GetFileSystemEntries(string parentPath);\n  IAsyncEnumerable\u003CFileSystemEntryDto\u003E SearchFileSystemEntries(string parentPath, string searchPattern);\n}\n\n\u0060\u0060\u0060\n\nHowever, as far as I\u0027m aware (please correct me if I\u0027m wrong), this isn\u0027t currently possible with SignalR.  The changes proposed in this issue would be required to support this flow (i.e. returning \u0060IAsyncEnumerable\u003CT\u003E\u0060 from the agent\u0027s client interface).\n\nFor listing items at a specific path, I don\u0027t want to return a realized collection, since it might be larger than max message size.  Same for search, plus I\u0027d also like them to show in the browser immediately as they\u0027re found.\n\nWe do currently have some search functions and output streaming in our agent that is invoked from the server.  However, since our agent has both a SignalR connection and a separate websocket connection, we implemented these using StreamJsonRpc over the raw websocket connection, which supports returning \u0060IAsyncEnumerable\u003CT\u003E\u0060 from the client.  (One of these connections will be refactored out, though, as the redundancy was a result of other consolidations.)\n\nAnyhow, if I wanted to implement similar functionality over the SignalR connection with the currently-available APIs, I think I\u0027d have to use an intermediate service to \u0022hand off\u0022 the stream.  I implemented this before in a personal project, but it only worked in-memory and didn\u0027t support a distributed backend environment.  I also didn\u0027t like it.  The code isn\u0027t used anymore, but some of it is still in the repo.  It\u0027s also sending opaque byte chunks in this example.  Here\u0027s the gist.\n\n- \u0022Viewer\u0022 (e.g. browser) requests a stream from the agent.  (code was removed)\n- Viewer calls [another hub method](https://github.com/bitbound/ControlR/blob/main/ControlR.Web.Server/Hubs/ViewerHub.cs#L536) to get the stream.\n- Viewer [waits for ready signal](https://github.com/bitbound/ControlR/blob/main/ControlR.Web.Server/Services/StreamStore.cs#L47) from agent.\n- Agent sends up an \u0060IAsyncEnumerable\u003CT\u003E\u0060 to \u0060AgentHub\u0060, whichs adds stream to \u0060IStreamStore\u0060. (code was removed)\n- Signaling and \u0022hand off\u0022 is done through [an item](https://github.com/bitbound/ControlR/blob/main/ControlR.Web.Server/Helpers/StreamSignaler.cs) in the store.\n- Method in \u0060AgentHub\u0060 awaits end signal.  (code was removed)\n\nAgain, I didn\u0027t like this, since it seemed very hacky.  The proposed changes would make it a lot cleaner and succinct.",
        "createdAt": "2024-12-16T19:27:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-2546465722"
      },
      {
        "id": "IC_kwDOAQzde86XytyZ",
        "parentId": null,
        "author": "davidfowl",
        "content": "I see how returning an IAsyncEnumerable here would be more efficient than returning a list from the client (point in time streaming). I guess I\u2019m looking for a streaming scenario. Are the entries from the client streaming or a fixed set?",
        "createdAt": "2024-12-16T20:25:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-2546654361"
      },
      {
        "id": "IC_kwDOAQzde86X_dNs",
        "parentId": null,
        "author": "bitbound",
        "content": "Not to be pedantic, but I suppose that depends on your definition of \u0022streaming\u0022.  I\u0027d consider the example of searching the file system (or other data store on a remote device) as streaming.  You don\u0027t know how long the search will take to complete, and you want results to stream back as they are found.\n\nWMI queries could also benefit from this, since the \u0060ManagementObjectSearcher\u0060 will return items as they are found, before the whole search completes.\n\nA more outlandish example is remote control/desktop.  I implemented the below remote control app through SignalR, using the \u0022hand off\u0022 pattern I described above.  This is actually from where that code originated.\n\nhttps://github.com/user-attachments/assets/327b8ada-d0f3-47d8-9b82-72e4b9117d1c\n",
        "createdAt": "2024-12-18T00:34:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-2549994348"
      },
      {
        "id": "IC_kwDOAQzde86X_8Nq",
        "parentId": null,
        "author": "davidfowl",
        "content": "Yes I think that\u0027s fair, and point in time streaming IAsyncEnumerable\u003CT\u003E is more reasonable than along running stream. We ran into lots of issues around customers being able to deadlock themselves depending on where they called a client invocation, but maybe the killer scenario for this feature *is* command and control.\n\nI\u0027ll let @BrennanConroy comment on how expensive this feature is, no promises of course.",
        "createdAt": "2024-12-18T02:00:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46161#issuecomment-2550121322"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85eUfjy",
    "title": "SignalR - Outbound bytes size",
    "url": "https://github.com/dotnet/aspnetcore/issues/46609",
    "createdAt": "2023-02-13T14:14:32Z",
    "lastUpdated": "2024-02-13T01:42:55Z",
    "body": "Hello,\r\n\r\nDo we have any way to understand the bytes size of an outbound message in  SignalR?\r\n\r\nMaybe some kind of interceptor, that would be able to get payload metadata, after the serialization phase? As I understand Hub Filters  are executed before the serialization.\r\nOr maybe there\u0027s some kind of SignalR Diagnostic source that I can subscribe.\r\nAnother option would be sending preserialized data, so that we can count the bytes before sending it, but as I understand that\u0027s not supported.\r\n\r\nThanks in advance.\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85VKpry",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "There\u0027s an issue tracking getting some telemetry in this area: https://github.com/dotnet/runtime/issues/75420\r\n\r\nIn the meantime, you can get the payload sizes if you enable trace level logging (warning: this may be a bit intense and you probably don\u0027t want to run it in production).\r\n\r\nJust curious, why are you interested in collecting this information?",
        "createdAt": "2023-02-13T23:26:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46609#issuecomment-1428855538"
      },
      {
        "id": "IC_kwDOAQzde85VKrRi",
        "parentId": null,
        "author": "emanuel-v-r",
        "content": "\u003E There\u0027s an issue tracking getting some telemetry in this area: [dotnet/runtime#75420](https://github.com/dotnet/runtime/issues/75420)\r\n\u003E \r\n\u003E In the meantime, you can get the payload sizes if you enable trace level logging (warning: this may be a bit intense and you probably don\u0027t want to run it in production).\r\n\u003E \r\n\u003E Just curious, why are you interested in collecting this information?\r\n\r\nThank you so much for the feedback.\r\nWe need to get such info programmatically.\r\nIn this specific case we need to have a view of the throughput of our service, in bytes.\r\nUnfortunately since this kind of metadata is not available, and there\u0027s no support for pre-serialized data, we had to duplicate the serialization just to get the bytes of the payload.",
        "createdAt": "2023-02-13T23:35:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46609#issuecomment-1428862050"
      },
      {
        "id": "IC_kwDOAQzde85VL0oW",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E We need to get such info programmatically.\r\nIn this specific case we need to have a view of the throughput of our service, in bytes.\r\n\r\nHow are you using this?",
        "createdAt": "2023-02-14T05:57:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46609#issuecomment-1429162518"
      },
      {
        "id": "IC_kwDOAQzde85VMjQx",
        "parentId": null,
        "author": "emanuel-v-r",
        "content": "\u003E \u003E We need to get such info programmatically.\r\n\u003E \u003E In this specific case we need to have a view of the throughput of our service, in bytes.\r\n\u003E \r\n\u003E How are you using this?\r\n\r\nJust to provide some metrics to the user",
        "createdAt": "2023-02-14T08:56:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46609#issuecomment-1429353521"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85en5to",
    "title": "SignalR with singelton service makes client halt under load",
    "url": "https://github.com/dotnet/aspnetcore/issues/46707",
    "createdAt": "2023-02-16T11:35:41Z",
    "lastUpdated": "2024-02-13T01:42:35Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nHi,\r\nwe encountered a problem with SignalR if a hub is registered as a singleton. It works fine for a small number of requests, but as soon as we start 2 Clients which send lots of requests at once, one client successfully completes all its requests and the second client halts and waits forever for its remaining requests.\r\n\r\nIt seems like the issue was introduced with net7. If the targetframework for the server application is changed to net6 both clients complete all their requests and everything works as expected.\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\nI\u0027ve created a small test solution to reproduce the issue (see https://github.com/tobsil/SignalRTest ). This solution contains a simple server and client application. To reproduce the bug start the server and run two or mor instances of the client application at once.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.103\n\n### Anything else?\n\n.NET SDK:\r\n Version:   7.0.103\r\n Commit:    276c71d299\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.22621\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\7.0.103\\\r\n\r\nHost:\r\n  Version:      7.0.3\r\n  Architecture: x64\r\n  Commit:       0a2bda10e8\r\n\r\n.NET SDKs installed:\r\n  7.0.103 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 5.0.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85Vb8Nd",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Don\u0027t register your hub in DI. That is not supported and can break in unexpected ways. Sadly, DI doesn\u0027t provide a way to prevent users from doing this.",
        "createdAt": "2023-02-16T16:46:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46707#issuecomment-1433387869"
      },
      {
        "id": "IC_kwDOAQzde85VtUxf",
        "parentId": null,
        "author": "tobsil",
        "content": "Ok, I think i can work around this issue by registering another class as Singleton and let this object be injected through my hubs constructor. Is this a viable solution we can use?\r\n\r\nFrankly it\u0027s quit a bit scary that its possible to build something this broken with the framework, even though looks like its working fine in the first place... Until you start to do some tests under load.\r\nAlso I\u0027m a bit puzzled by the fact that we we see the issues only with net7 and it seems ok on net6",
        "createdAt": "2023-02-21T06:56:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46707#issuecomment-1437944927"
      },
      {
        "id": "IC_kwDOAQzde85VwiXM",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E registering another class as Singleton and let this object be injected through my hubs constructor. Is this a viable solution we can use?\r\n\r\nYes, that is recommended.",
        "createdAt": "2023-02-21T16:40:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46707#issuecomment-1438787020"
      },
      {
        "id": "IC_kwDOAQzde85VzX0N",
        "parentId": null,
        "author": "tobsil",
        "content": "Good to know.\r\nBy the way, is this behavior documented somewhere? Is there any good resource for \u0022SignalR pitfalls and common misconceptions\u0022 or some like that, like a FAQ?",
        "createdAt": "2023-02-22T07:05:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46707#issuecomment-1439530253"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85fK_XE",
    "title": "Issue with SignalR scale using redis backplane in sentinel mode (HA)",
    "url": "https://github.com/dotnet/aspnetcore/issues/46832",
    "createdAt": "2023-02-23T11:50:19Z",
    "lastUpdated": "2024-02-13T01:41:40Z",
    "body": "I am trying to scale application that uses signalr with redis backplane in sentinel mode.\r\n\r\nI don\u0027t even know if that is possible, but here are details:\r\nasp.net core 6\r\nMicrosoft.AspNetCore.SignalR.StackExchangeRedis 6.0.2.\r\n\r\nIf i connect directly to master with:\r\n\u0022rds01:6379\u0022\r\ni can see program working as expected, that means that redis-cli with \u0027monitor\u0027 and \u0027pubsub channels\u0027 works as expected and i can see a list of subscribers there\r\n\r\nIf i connect in sentinel mode with:\r\n\u0022adress-public:26379\u0022\r\nServiceName = \u0022idp\u0022\r\n\r\nwhich triggers to sentinel mode according to stackexchange documentation,\r\ni don\u0027t see anything with redis-cli like before, \u0027pubsub channels\u0027 gives me just \u0022xxx___Booksleeve_MasterChanged\u0022 channel, but no hub channels like before so the whole thing doesn\u0027t work as expected\r\n\r\nwhat am i missing here?",
    "upvotes": 1,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85V81dx",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "@mgravell, I\u0027m not very familiar with sentinel mode, any thoughts here?",
        "createdAt": "2023-02-23T15:46:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46832#issuecomment-1442010993"
      },
      {
        "id": "IC_kwDOAQzde85a7rqt",
        "parentId": null,
        "author": "uciprian",
        "content": "Check out whether redis sentinel support has been added in stack exchange redis library, for sure in v1 is not supported",
        "createdAt": "2023-04-27T12:20:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/46832#issuecomment-1525594797"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85hN5B_",
    "title": "[Signalr-Cpp-Client] Cannot close connection if connection state is connecting (deadlock for ~30 secs)",
    "url": "https://github.com/dotnet/aspnetcore/issues/47304",
    "createdAt": "2023-03-19T17:12:48Z",
    "lastUpdated": "2024-02-13T01:39:41Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen I call Stop() after Start(), and if the internet is slow or the server cannot be connected somehow, the app will be in deadlock for around 30 secs. (which I assume, is the timeout period)\r\n\r\n### Expected Behavior\r\n\r\nIf connection is cancelled after Start() has been processing, Signalr should cancel and stop trying to reach the server immediately instead of waiting for timeout.\r\n\r\n### Steps To Reproduce\r\n\r\n- call Start() on hub_connection\r\n- make the server cannot connect and keep in connecting state\r\n- call Stop() on hub_connection\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "bug",
      "area-signalr",
      "feature-client-c\u002B\u002B"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85YClSU",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "I\u0027m not seeing this issue, are you using the latest version of the client?\r\n\r\n\u0060\u0060\u0060\r\n2023-03-20T23:10:31.066Z [verbose  ] acquired lock in start()\r\n2023-03-20T23:10:31.069Z [verbose  ] disconnected -\u003E connecting\r\n2023-03-20T23:10:31.069Z [verbose  ] released lock in start()\r\n// added 1 second delay here to make sure the client is trying to connect to server\r\n2023-03-20T23:10:32.087Z [info     ] closing connection\r\n2023-03-20T23:10:32.087Z [verbose  ] acquired lock in shutdown()\r\n2023-03-20T23:10:32.088Z [info     ] starting the connection has been canceled by stop().\r\n2023-03-20T23:10:32.088Z [verbose  ] connecting -\u003E disconnected\r\nexception when starting connection: an operation was canceled\r\nconnection stopped successfully\r\n2023-03-20T23:10:32.089Z [verbose  ] released lock in shutdown()\r\n2023-03-20T23:10:32.089Z [verbose  ] calling shutdown() from the dtor\r\n2023-03-20T23:10:32.089Z [verbose  ] acquired lock in shutdown()\r\n2023-03-20T23:10:32.089Z [verbose  ] connection already disconnected\r\n2023-03-20T23:10:32.089Z [verbose  ] released lock in shutdown()\r\n\u0060\u0060\u0060\r\n\r\nYou can see it closed very quickly\r\n2023-03-20T23:10:31.066Z -\u003E 2023-03-20T23:10:32.089Z\r\nWith a thread.sleep(1000)",
        "createdAt": "2023-03-20T23:11:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1477072020"
      },
      {
        "id": "IC_kwDOAQzde85YDECR",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "yes, I use the latest version. Perhaps there are another factors.\r\n\r\n- Try to, instead of 1 second delay, make it **never** connect.\r\n- Note that the platform is **linux arm** where I found this.\r\n- Other than trying to stop, I also try to quit the application right after disconnect/stop. (may not relevant, I kind of figure that SignalR automatically trying to stop connection when it is disposed / when the application is trying to close)\r\n\r\n",
        "createdAt": "2023-03-21T02:33:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1477197969"
      },
      {
        "id": "IC_kwDOAQzde85YDHRi",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E Try to, instead of 1 second delay, make it never connect.\r\n\r\nThe 1 second delay was just to make sure that the client was in the code for attempting to connect to the server before calling stop. There was no server for it to connect to.\r\n\r\nCan you share yours logs?",
        "createdAt": "2023-03-21T02:54:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1477211234"
      },
      {
        "id": "IC_kwDOAQzde85YDJSo",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "looks like I didn\u0027t enable verbose log for signalR but here:\r\n\r\n\u0060\u0060\u0060\r\n2023-03-21T03:03:37.572Z [info     ] stopping connection\r\n2023-03-21T03:03:37.573Z [info     ] acquired lock in shutdown()\r\n2023-03-21T03:03:37.573Z [info     ] starting the connection has been canceled by stop().\r\ncouldn\u0027t connect to server - retrying... in 5 sec\r\n2023-03-21T03:03:37.573Z [info     ] acquired lock in shutdown()\r\n\u0060\u0060\u0060\r\n\r\n\u0060couldn\u0027t connect to server - retrying... in 5 sec\u0060 \u003C- that was my own exception handling\r\n\r\n(when calling Stop() or trying to close app itself, it doesn\u0027t produce any of these (nothing happen). I have to wait for around 30 secs til these lines come)",
        "createdAt": "2023-03-21T03:05:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1477219496"
      },
      {
        "id": "IC_kwDOAQzde85YDJgQ",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Please show more of the logs, don\u0027t cherry-pick what to show.",
        "createdAt": "2023-03-21T03:06:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1477220368"
      },
      {
        "id": "IC_kwDOAQzde85YDKGd",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "alright:\r\n\u0060\u0060\u0060\r\nServer url is : http://192.168.0.21:8200\r\nmachine checking...\r\nCannot open serial port.\r\nmachine not connected.\r\nWARNING: Service name lost.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nWARNING: Notification failed\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\n2023-03-21T03:03:37.572Z [info     ] stopping connection\r\n2023-03-21T03:03:37.573Z [info     ] acquired lock in shutdown()\r\n2023-03-21T03:03:37.573Z [info     ] starting the connection has been canceled by stop().\r\ncouldn\u0027t connect to server - retrying... in 5 sec\r\n2023-03-21T03:03:37.573Z [info     ] acquired lock in shutdown()\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\n\u0060\u0060\u0060\r\n\r\nI will tell you what happen here,\r\n- \u0060Server url is : http://192.168.0.21:8200\u0060 that is right before the Start() has been called\r\n- the repeated log seen here is my business code where I check something every 2.5 sec\r\n\u0060\u0060\u0060\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\n\u0060\u0060\u0060",
        "createdAt": "2023-03-21T03:10:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1477222813"
      },
      {
        "id": "IC_kwDOAQzde85YDKpf",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "I don\u0027t see the start logs? But regardless, you see how you have\r\n\u0060[info     ] acquired lock in shutdown()\u0060 and my logs have \u0060[verbose  ] acquired lock in shutdown()\u0060?\r\nThis means you\u0027re using an older version of the client... please upgrade and try again.",
        "createdAt": "2023-03-21T03:14:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1477225055"
      },
      {
        "id": "IC_kwDOAQzde85YDKyx",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "Ok, can you guide me please? How can I upgrade to the newest version. This is what I built from the master branch of https://github.com/aspnet/SignalR-Client-Cpp.",
        "createdAt": "2023-03-21T03:15:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1477225649"
      },
      {
        "id": "IC_kwDOAQzde85YDK6O",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "There is no master branch. It\u0027s main.",
        "createdAt": "2023-03-21T03:16:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1477226126"
      },
      {
        "id": "IC_kwDOAQzde85YDK-D",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "**Yes I mean main",
        "createdAt": "2023-03-21T03:16:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1477226371"
      },
      {
        "id": "IC_kwDOAQzde85YDLKI",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Well, you need to use the latest. If you\u0027re using git, then you need to pull the latest changes. If you\u0027re just downloading a zip, then you need to download it again.\r\n\r\nIdk what to tell you, however you\u0027re building is using an older version.",
        "createdAt": "2023-03-21T03:18:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1477227144"
      },
      {
        "id": "IC_kwDOAQzde85YDLWf",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "Ok, I\u0027m pulling and trying to build again right now, please wait I will share the result",
        "createdAt": "2023-03-21T03:19:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1477227935"
      },
      {
        "id": "IC_kwDOAQzde85YDMyA",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "How can I enable verbose log for signalr? ",
        "createdAt": "2023-03-21T03:30:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1477233792"
      },
      {
        "id": "IC_kwDOAQzde85YDNLe",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u0060\u0060\u0060c\u002B\u002B\r\nclass logger : public signalr::log_writer\r\n{\r\n    // Inherited via log_writer\r\n    virtual void write(const std::string \u0026 entry) override\r\n    {\r\n        std::cout \u003C\u003C entry;\r\n    }\r\n};\r\n\r\nsignalr::hub_connection_builder::create(\u0022http://localhost:5000/default\u0022)\r\n        .with_logging(std::make_shared\u003Clogger\u003E(), signalr::trace_level::verbose)\r\n        .build();\r\n\u0060\u0060\u0060",
        "createdAt": "2023-03-21T03:34:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1477235422"
      },
      {
        "id": "IC_kwDOAQzde85YKF6Z",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "After I tried to pinpoint my lib version issue, now I can verify that I use the latest version.\r\n\r\nBut the problem still here, with a bit different outcome (got segmentation fault at the end) :\r\n\u0060\u0060\u0060\r\nServer url is : http://192.168.0.21:8200\r\nCannot open serial port.\r\nmachine not connected.\r\n2023-03-22T07:31:28.029Z [verbose  ] acquired lock in start()\r\n2023-03-22T07:31:28.029Z [verbose  ] disconnected -\u003E connecting\r\n2023-03-22T07:31:28.029Z [verbose  ] released lock in start()\r\nWARNING: Service name lost.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nWARNING: Notification failed\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nwifi: XXXX\r\nmachine checking...\r\nCannot open serial port.\r\nmachine not connected.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nSegmentation fault\r\n\u0060\u0060\u0060",
        "createdAt": "2023-03-22T07:35:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1479040665"
      },
      {
        "id": "IC_kwDOAQzde85YKI7l",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "I\u0027m not sure why, but in several trials, I don\u0027t encounter segmentation fault like above anymore but got this outcome instead :\r\n\u0060\u0060\u0060\r\nServer url is : http://192.168.0.21:8200\r\n2023-03-22T07:44:25.612Z [verbose  ] acquired lock in start()\r\n2023-03-22T07:44:25.612Z [verbose  ] disconnected -\u003E connecting\r\n2023-03-22T07:44:25.612Z [verbose  ] released lock in start()\r\nmachine checking...\r\nCannot open serial port.\r\nmachine not connected.\r\nWARNING: Service name lost.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nWARNING: Notification failed\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nwifi: XXX\r\nmachine checking...\r\nCannot open serial port.\r\nmachine not connected.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nwifi: XXX\r\nmachine checking...\r\nCannot open serial port.\r\nmachine not connected.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nwifi: XXX\r\nmachine checking...\r\nCannot open serial port.\r\nmachine not connected.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nwifi: XXX\r\nmachine checking...\r\nCannot open serial port.\r\nmachine not connected.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\n2023-03-22T07:44:55.618Z [info     ] closing connection\r\n2023-03-22T07:44:55.618Z [verbose  ] acquired lock in shutdown()\r\n2023-03-22T07:44:55.619Z [info     ] starting the connection has been canceled by stop().\r\n2023-03-22T07:44:55.619Z [verbose  ] connecting -\u003E disconnected\r\ncouldn\u0027t connect to server - retrying... in 5 sec\r\n2023-03-22T07:44:55.619Z [verbose  ] released lock in shutdown()\r\n2023-03-22T07:44:55.619Z [verbose  ] calling shutdown() from the dtor\r\n2023-03-22T07:44:55.619Z [verbose  ] acquired lock in shutdown()\r\n2023-03-22T07:44:55.619Z [verbose  ] connection already disconnected\r\n2023-03-22T07:44:55.619Z [verbose  ] released lock in shutdown()\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\n\u0060\u0060\u0060",
        "createdAt": "2023-03-22T07:48:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1479053029"
      },
      {
        "id": "IC_kwDOAQzde85YNBJk",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E When I call Stop() after Start(), and if the internet is slow or the server cannot be connected somehow, the app will be in deadlock for around 30 secs. (which I assume, is the timeout period)\r\n\r\nOk, explain to me how this issue is showing up given the above logs? It looks like you wait 30 seconds after calling start to call stop, and then stop finished in .001 seconds.",
        "createdAt": "2023-03-22T15:43:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1479807588"
      },
      {
        "id": "IC_kwDOAQzde85Ypm8M",
        "parentId": null,
        "author": "??",
        "content": "Hi @Wasenshi123. We have added the \u0022Needs: Author Feedback\u0022 label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
        "createdAt": "2023-03-28T17:09:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1487302412"
      },
      {
        "id": "IC_kwDOAQzde85Y1qTB",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "Okay, looks like I\u0027m having a cross-compiling issue. (from Ubuntu on wsl to RPi4). ([Track issue here](https://github.com/dotnet/aspnetcore/issues/47495))\r\n\r\nBut putting that aside for now,\r\n\r\nWhen I try to compile \u0026 build from the RPi4 board itself, the program output log differently.:\r\n\r\n\u0060\u0060\u0060\r\nServer url is : \r\nhttp://192.168.0.21:8200\r\nmachine not connected.\r\n2023-03-30T14:50:10.514Z [verbose  ] acquired lock in start()\r\n2023-03-30T14:50:10.514Z [verbose  ] disconnected -\u003E connecting\r\n2023-03-30T14:50:10.514Z [verbose  ] released lock in start()\r\n2023-03-30T14:50:12.807Z [info     ] closing connection\r\n2023-03-30T14:50:12.807Z [verbose  ] acquired lock in shutdown()\r\n2023-03-30T14:50:12.807Z [info     ] starting the connection has been canceled by stop().\r\n2023-03-30T14:50:12.807Z [verbose  ] connecting -\u003E disconnected\r\ncouldn\u0027t connect to server - retrying... in 5 sec\r\ndisposed the connection.\r\n2023-03-30T14:50:12.808Z [verbose  ] calling shutdown() from the dtor\r\n\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\n\r\nChecking for card Reader...\r\nls: cannot access \u0027/dev/input/by-id\u0027: No such file or directory\r\nno reader found.\r\n\r\nand so on...\r\n\u0060\u0060\u0060\r\n\r\ndisposed the connection \u003C- that is the line I put in Stop() callback function  (where I just dereference the hub_connection from unique pointer)\r\n\r\nstill looks like deadlock situation here. (this time, infinitely)\r\n",
        "createdAt": "2023-03-30T15:01:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1490461889"
      },
      {
        "id": "IC_kwDOAQzde85Y-KAV",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Again, where is the deadlock? Your logs show everything happening in 2 seconds.",
        "createdAt": "2023-03-31T22:40:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1492688917"
      },
      {
        "id": "IC_kwDOAQzde85ZR1aI",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "I mean, what I get right now is the app not exiting.\r\n\r\nSeems like there has something to do either by my code doing something wrong or by the SignalR lib itself but I hope you could shed some light here.\r\n\r\nYou can see that it doesn\u0027t complete the process. If you compare my log with yours, there are some lines missing:\r\n\r\n\u0060\u0060\u0060\r\n2023-03-20T23:10:32.089Z [verbose  ] acquired lock in shutdown()\r\n2023-03-20T23:10:32.089Z [verbose  ] connection already disconnected\r\n2023-03-20T23:10:32.089Z [verbose  ] released lock in shutdown()\r\n\u0060\u0060\u0060\r\n\r\nthis part of lines never comes, and my app is not responding and not exiting indefinitely.\r\n\r\n(so the absence of the line \u0027released lock in shutdown()\u0027 is where I assume its a deadlock situation)",
        "createdAt": "2023-04-05T17:13:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1497847432"
      },
      {
        "id": "IC_kwDOAQzde85ZY1kj",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E so the absence of the line \u0027released lock in shutdown()\u0027\r\n\r\n\u003E disposed the connection \u003C- that is the line I put in Stop() callback function (where I just dereference the hub_connection from unique pointer)\r\n\r\nGotcha, the \u0022released\u0022 log is after calling the callback function you provided. Which implies you\u0027re doing something in there that is blocking.\r\n\r\nAnd since you\u0027re also getting \u0022calling shutdown() from the dtor\u0022 at the end, it looks like you\u0027re losing a reference to the hub_connection inside the callback potentially. That causes the dtor to run, which tries to shutdown the connection, which is blocked on your callback, ending in a deadlock.\r\n\r\nThe library code can probably release the lock in this case before calling the callback.",
        "createdAt": "2023-04-06T22:08:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1499683107"
      },
      {
        "id": "IC_kwDOAQzde85ZdW0_",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "Are you saying that, I shouldn\u0027t lose a hub reference inside Stop() callback?\r\n\r\nThis is my code for disconnection before shutting down my app:\r\n\r\n\u0060\u0060\u0060\r\nvoid MyServer::Disconnect() {\r\n  if (!connection) {\r\n    return;\r\n  }\r\n  std::promise\u003Cvoid\u003E dc;\r\n  force_disconnect = true;\r\n  connection-\u003Estop([this, \u0026dc](std::exception_ptr exception){\r\n    try {\r\n      if (exception) {\r\n        std::rethrow_exception(exception);\r\n      }\r\n      this-\u003Econnection = nullptr;\r\n      std::cout \u003C\u003C \u0022disposed the connection.\u0022 \u003C\u003C std::endl;\r\n    }\r\n    catch (const std::exception\u0026 ex) {\r\n      std::cerr \u003C\u003C \u0022Couldn\u0027t stop connection properly: \u0022 \u003C\u003C ex.what() \u003C\u003C std::endl;\r\n      log_error(\u0022stop connection error\u0022, ex);\r\n    }\r\n    dc.set_value();\r\n  });\r\n\r\n  dc.get_future().get();\r\n}\r\n\u0060\u0060\u0060\r\n\r\nand this is what I setup for connection:\r\n\r\n\u0060\u0060\u0060\r\nvoid MyServer::Connect() {\r\nconnection = std::make_unique\u003Csignalr::hub_connection\u003E(...);\r\n\r\n... // some other setups\r\n\r\nconnection-\u003Eset_disconnected([this](std::exception_ptr ex) {\r\n  std::cout \u003C\u003C \u0022Server disconnected.\u0022 \u003C\u003C std::endl;\r\n  global_event::on_network_update.emit(false);\r\n\r\n  if (force_disconnect) {\r\n    force_disconnect = false;\r\n    return;\r\n  }\r\n\r\n  this-\u003EConnect();\r\n});\r\n\r\nconnection-\u003Estart([this](std::exception_ptr ex) {\r\n  if (ex) {\r\n    std::cout \u003C\u003C \u0022couldn\u0027t connect to server - retrying... in 5 sec\u0022 \u003C\u003C std::endl;\r\n    std::thread([this] () {\r\n      std::this_thread::sleep_for(std::chrono::milliseconds(5000));\r\n      this-\u003EConnect();\r\n    }).detach();\r\n\r\n    return;\r\n  }\r\n  std::cout \u003C\u003C \u0022Connected with server!\u0022 \u003C\u003C std::endl;\r\n  global_event::on_network_update.emit(true);\r\n\r\n  UpdateUnitList();\r\n});\r\n\r\n}\r\n\u0060\u0060\u0060\r\n\r\nAnything that I\u0027m doing wrong here? I couldn\u0027t find where would be the potential cause.",
        "createdAt": "2023-04-08T11:03:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1500867903"
      },
      {
        "id": "IC_kwDOAQzde85ZdYYa",
        "parentId": null,
        "author": "Wasenshi123",
        "content": "Ok, seems like I understand your answer correctly.\r\n\r\nAfter I remove that one line, the problem is gone.\r\n\r\n\u0060\u0060\u0060\r\nvoid MyServer::Disconnect() {\r\n  if (!connection) {\r\n    return;\r\n  }\r\n  std::promise\u003Cvoid\u003E dc;\r\n  force_disconnect = true;\r\n  connection-\u003Estop([this, \u0026dc](std::exception_ptr exception){\r\n    try {\r\n      if (exception) {\r\n        std::rethrow_exception(exception);\r\n      }\r\n      // don\u0027t lose a connection ref here.\r\n      std::cout \u003C\u003C \u0022end connection.\u0022 \u003C\u003C std::endl;\r\n    }\r\n    catch (const std::exception\u0026 ex) {\r\n      std::cerr \u003C\u003C \u0022Couldn\u0027t stop connection properly: \u0022 \u003C\u003C ex.what() \u003C\u003C std::endl;\r\n      log_error(\u0022stop connection error\u0022, ex);\r\n    }\r\n    dc.set_value();\r\n  });\r\n\r\n  dc.get_future().get();\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u003E The library code can probably release the lock in this case before calling the callback\r\n\r\nI just wonder what do you mean in this line? (if you mean you probably could update the lib to do that, I agree, that would be nice)\r\n\r\nAnd what is the best practice in this case? when or how should I de-ref the hub_connection after I decide to end the connection?",
        "createdAt": "2023-04-08T11:47:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1500874266"
      },
      {
        "id": "IC_kwDOAQzde85Zhkgl",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E  just wonder what do you mean in this line? (if you mean you probably could update the lib to do that, I agree, that would be nice)\r\n\r\nRight, the SignalR library can likely be updated.\r\n\r\n\u003E And what is the best practice in this case? when or how should I de-ref the hub_connection after I decide to end the connection?\r\n\r\nIn your case since you\u0027re using a promise to wait for stop to complete, you could unreference the connection after \u0060dc.get_future().get();\u0060",
        "createdAt": "2023-04-10T15:44:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47304#issuecomment-1501972517"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85hUHjd",
    "title": "[SignalR] Server stops sending ping message to the client",
    "url": "https://github.com/dotnet/aspnetcore/issues/47327",
    "createdAt": "2023-03-20T18:35:49Z",
    "lastUpdated": "2024-02-13T01:39:32Z",
    "body": "The server stops sending ping messages to the client, which causes the connection to abort.\r\n\r\nI tried to dig into how the ping message might be getting blocked by combing through https://github.com/dotnet/aspnetcore/blob/bec278eabea54f63da15e10e654bdfa4168a2479/src/SignalR/server/Core/src/HubConnectionContext.cs\r\n\r\n\u0060\u0060\u0060c#\r\n private ValueTask TryWritePingAsync()\r\n    {\r\n        // Don\u0027t wait for the lock, if it returns false that means someone wrote to the connection\r\n        // and we don\u0027t need to send a ping anymore\r\n        if (!_writeLock.Wait(0))\r\n        {\r\n            return default;\r\n        }\r\n\r\n        // TODO: cancel?\r\n        return new ValueTask(TryWritePingSlowAsync());\r\n    }\r\n\r\nprivate async Task TryWritePingSlowAsync()\r\n    {\r\n        try\r\n        {\r\n            if (_connectionAborted)\r\n            {\r\n                return;\r\n            }\r\n\r\n            await _connectionContext.Transport.Output.WriteAsync(_cachedPingMessage);\r\n\r\n            Log.SentPing(_logger);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            CloseException = ex;\r\n            Log.FailedWritingMessage(_logger, ex);\r\n            AbortAllowReconnect();\r\n        }\r\n        finally\r\n        {\r\n            _writeLock.Release();\r\n        }\r\n    }\r\n\u0060\u0060\u0060\r\n\r\nI have a feeling it is getting hung up on \r\n\u0060\u0060\u0060c#\r\nawait _connectionContext.Transport.Output.WriteAsync(_cachedPingMessage); // maybe it\u0027s not actually writing\r\n\u0060\u0060\u0060\r\n\r\nor on\r\n\r\n\u0060\u0060\u0060c#\r\n  if (!_writeLock.Wait(0)) // _writeLock could be deadlocked\r\n\u0060\u0060\u0060\r\n\r\nBut I don\u0027t know for sure.  \r\n\r\nAre there any steps I can take to help narrow down the cause?\r\n\r\nSo far, I\u0027ve failed to reproduce this bug in test project\r\n\r\n### Expected Behavior\r\n\r\nThe server should never stop sending ping messages to the client.  In the event it cannot, it would be nice if there were logs indicating why the ping message isn\u0027t being sent.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.102\r\n\r\n### Anything else?\r\n\r\nclient: @microsoft/signalr@7.0.2\r\n\r\nThis bug has been occurring in our project for over a year now.\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85YBxP5",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E Are there any steps I can take to help narrow down the cause?\r\n\r\nTurn on logging and gather network traces.\r\nhttps://learn.microsoft.com/aspnet/core/signalr/diagnostics?view=aspnetcore-7.0\r\n\r\nAlso, a brief description of how your client and server interact would be helpful. ",
        "createdAt": "2023-03-20T20:05:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47327#issuecomment-1476858873"
      },
      {
        "id": "IC_kwDOAQzde85YCObe",
        "parentId": null,
        "author": "colinblaise",
        "content": "I have trace logging enabled on the client and server.\r\n\r\n![image](https://user-images.githubusercontent.com/6540262/226472272-d65e5f6e-e421-449b-86e6-46059c5f3c89.png)\r\n\r\nI\u0027m able to see threads that are stuck waiting for the semaphore to release.  I\u0027m pretty sure the server stops sending ping events \u0060if (!_writeLock.Wait(0))\u0060. is returning true when it\u0027s locked.  \r\n\r\nThe client jobs a connection group and starts receiving a lot of data.  Eventually signal stops sending data and stops sending ping events, which causes the connection to abort.",
        "createdAt": "2023-03-20T21:46:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47327#issuecomment-1476978398"
      },
      {
        "id": "IC_kwDOAQzde85YCTDW",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E I\u0027m pretty sure the server stops sending ping events \u0060if (!_writeLock.Wait(0))\u0060. is returning true when it\u0027s locked.\r\n\r\nSure, if the server is sending data then pings aren\u0027t needed so it will skip sending it and check again after X seconds.\r\n\r\n\u003E I\u0027m able to see threads that are stuck waiting for the semaphore to release.\r\n\r\nIs the server sending faster than the client can process? What logs do you get when the connection closes?",
        "createdAt": "2023-03-20T22:04:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47327#issuecomment-1476997334"
      },
      {
        "id": "IC_kwDOAQzde85YCXhY",
        "parentId": null,
        "author": "colinblaise",
        "content": "I agree with the design principle, however, I\u0027m not receiving data and since \u0060writeLock\u0060 is held it isn\u0027t sending the ping either.\r\n\r\nHere is the error I receive when the keep alive interval lapses:\r\n\r\n![image](https://user-images.githubusercontent.com/6540262/226477597-e7260dda-69d7-4648-b4f1-73ae73ebb5fe.png)\r\n",
        "createdAt": "2023-03-20T22:17:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47327#issuecomment-1477015640"
      },
      {
        "id": "IC_kwDOAQzde85YCYs_",
        "parentId": null,
        "author": "colinblaise",
        "content": "I have a bunch of server -\u003E client methods that aren\u0027t actually being awaited.  I wonder if this is somehow causing a deadlock.\r\n\r\n![image](https://user-images.githubusercontent.com/6540262/226478097-f2279e26-296e-4f9f-b20a-bbd09bcad916.png)\r\n",
        "createdAt": "2023-03-20T22:20:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47327#issuecomment-1477020479"
      },
      {
        "id": "IC_kwDOAQzde85YCe6V",
        "parentId": null,
        "author": "colinblaise",
        "content": "It\u0027s looking like this is the problem.\r\n\r\nHaving synchronous methods call a method that has an internal semaphore is a recipe for deadlock disaster.\r\n\r\nAfter updated it to this, I haven\u0027t been able to reproduce the issue.\r\n\r\n![image](https://user-images.githubusercontent.com/6540262/226482582-71d18b6e-b8d3-45b6-97f2-a78cf791c503.png)\r\n\r\n",
        "createdAt": "2023-03-20T22:49:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47327#issuecomment-1477045909"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85inrm_",
    "title": "SignalR.Common tests with Japanese characters fail on MacOS 11.6.8",
    "url": "https://github.com/dotnet/aspnetcore/issues/47566",
    "createdAt": "2023-04-04T20:58:35Z",
    "lastUpdated": "2024-02-13T01:38:18Z",
    "body": "See https://github.com/dotnet/aspnetcore/pull/47545#issuecomment-1496219366",
    "upvotes": 0,
    "labels": [
      "test-failure",
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85ixwK-",
    "title": "[SignalR] Avoid initial memory allocation in ChannelBasedSemaphore",
    "url": "https://github.com/dotnet/aspnetcore/issues/47588",
    "createdAt": "2023-04-06T11:06:07Z",
    "lastUpdated": "2024-02-13T01:38:05Z",
    "body": "\u003C!--\r\nThis template is useful to build consensus about whether work should be done, and if so, the high-level shape of how it should be approached. Use this before fixating on a particular implementation.\r\n--\u003E\r\n\r\n## Summary\r\n\r\nThe initial memory allocation should be avoided in \u0060ChannelBasedSemaphore\u0060\r\n\r\n## Motivation and goals\r\n\r\nSome developers could just give \u0060HubConnectionContextOptions.MaximumParallelInvocations\u0060 a large value (such as \u0060int.MaxValue\u0060) to ensure their single client can make as many parallel invocations as possible.\r\n\r\nUnfortunately , \u0060ChannelBasedSemaphore\u0060 will always [allocate](https://github.com/dotnet/aspnetcore/blob/dce793fda55ebc9b32eb69ff01023a618ed06942/src/SignalR/server/Core/src/Internal/ChannelBasedSemaphore.cs#L20) \u0060\u0027enough\u0027\u0060 memory according to \u0060HubConnectionContextOptions.MaximumParallelInvocations\u0060 on first invocation, even if there is only one invocation here, and the whole program may crash or have high cpu and memory usage without a friendly warning. This behavior increases the costs of diagnostics. \r\n\r\nThis is a sample message for an event about this error in \u0060Event Viewer\u0060 in Win10\r\n\u0060\u0060\u0060\r\nFaulting application name: SignalRTest.exe, version: 1.0.0.0, time stamp: 0x634eda42\r\nFaulting module name: coreclr.dll, version: 7.0.22.51805, time stamp: 0x634ed04e\r\nException code: 0xc0000005\r\nFault offset: 0x000000000013b93e\r\nFaulting process id: 0x820c\r\nFaulting application start time: 0x01d9682ee7ded2d7\r\nFaulting application path: C:\\Users\\anoba\\source\\repos\\SignalRTest\\SignalRTest\\bin\\Debug\\net7.0\\SignalRTest.exe\r\nFaulting module path: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\7.0.0\\coreclr.dll\r\nReport Id: a686bc6b-6375-4553-b5b3-0b26dc5403dc\r\nFaulting package full name: \r\nFaulting package-relative application ID: \r\n\u0060\u0060\u0060\r\n\r\n---\r\nBy the way, will [this](https://github.com/dotnet/aspnetcore/blob/dce793fda55ebc9b32eb69ff01023a618ed06942/src/SignalR/server/Core/src/HubConnectionHandler.cs#L204) cause an inconsistent result for available invocation quotas? I didn\u0027t see any \u0060Release\u0060 corresponding the result of \u0060TryAcquire\u0060.\r\n\r\n## In scope\r\n\r\nThis is my immature idea. Maybe we can use the \u0060Interlocked\u0060 to implement \u0060TryAcquire\u0060, and use the combination of \u0060Interlocked\u0060 and \u0060Channel\u0060 for \u0060WaitAsync\u0060 and \u0060RunAsync\u0060 ?\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "design-proposal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85i1PEx",
    "title": "[Java Client] HTTP errors during WebSocket handshake not surfaced as HttpRequestExceptions",
    "url": "https://github.com/dotnet/aspnetcore/issues/47597",
    "createdAt": "2023-04-06T22:25:44Z",
    "lastUpdated": "2024-10-17T14:42:58Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nIf an HTTP response for the opening SignalR negotiate call contains an unexpected response code, the SignalR Java client library will convert the error to an \u0060HttpRequestException\u0060 for use by consumers of the library. However, if negotiation is skipped and a similar error occurs during the opening WebSocket handshake, the library does not return a useful exception. Instead, \u0060OkHttpWebSocketWrapper.SignalRWebSocketListener.onFailure()\u0060 ignores the \u0060Response\u0060 returned by OkHttp and wraps the provided \u0060Throwable\u0060 in a \u0060RuntimeException\u0060.\r\n\r\nThis makes certain handleable errors, like 401, especially difficult to detect. I believe the only recourse today is to parse the error message string on the underlying \u0060Throwable\u0060 returned by OkHttp.\n\n### Expected Behavior\n\nWhen negotiation is skipped, SignalR should return \u0060HttpRequestException\u0060s for the opening HTTP handshake in the WebSocket protocol, so we can handle the error codes (like 401) appropriately.\n\n### Steps To Reproduce\n\n1. Set up a basic SignalR Java client and SignalR service that supports authentication.\r\n2. Configure the SignalR client to use WebSocket transport and skip negotiation.\r\n3. Provide a bad token for the connection.\r\n\r\nExpected: SignalR Java client receives an \u0060HttpRequestException\u0060 with a 401 code.\r\nActual: SignalR Java client receives a generic \u0060RuntimeException\u0060.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
    "upvotes": 1,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86NynG0",
        "parentId": null,
        "author": "Rishan99",
        "content": "Any update around this?",
        "createdAt": "2024-09-27T09:29:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47597#issuecomment-2378854836"
      },
      {
        "id": "IC_kwDOAQzde86QOm5h",
        "parentId": null,
        "author": "abelmatos",
        "content": "Can we also remove the error log?\nWe shouldn\u0027t log it if an Exception is thrown.\nhttps://github.com/dotnet/aspnetcore/blob/21e8836755b8be5f7fc7bf35d9f5b87ae60b62a0/src/SignalR/clients/java/signalr/core/src/main/java/com/microsoft/signalr/OkHttpWebSocketWrapper.java#L135\n",
        "createdAt": "2024-10-17T14:42:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47597#issuecomment-2419748449"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85jQSgK",
    "title": "SignalR npm package not able to be bundled using \u0060esbuild\u0060",
    "url": "https://github.com/dotnet/aspnetcore/issues/47674",
    "createdAt": "2023-04-12T20:36:41Z",
    "lastUpdated": "2024-12-31T17:18:21Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nHi,\r\nI\u0027m using the npm package \u0060@microsoft/signalr\u0060 with version \u00607.0.4\u0060. I\u0027m using \u0060esbuild\u0060 for bundeling, however, it does not correctly resolve some dependencies, like \u0060ws\u0060.\r\n\r\nThis is due [those hacks](https://github.com/search?q=repo%3Adotnet%2Faspnetcore%20__webpack_require__\u0026type=code):\r\n\u0060\u0060\u0060ts\r\n// In order to ignore the dynamic require in webpack builds we need to do this magic\r\n// @ts-ignore: TS doesn\u0027t know about these names\r\nconst requireFunc = typeof __webpack_require__ === \u0022function\u0022 ? __non_webpack_require__ : require;\r\nwebSocketModule = requireFunc(\u0022ws\u0022);\r\neventSourceModule = requireFunc(\u0022eventsource\u0022);\r\n\u0060\u0060\u0060\r\n\r\nI don\u0027t think this is an issue of \u0060esbuild\u0060, since it believes that this is a dynamic require. Can we somehow fix this?\r\n\r\nI confirmed that this is the issue, by patching the lib to use plain \u0060require\u0060 instead of the \u0060requireFunc\u0060, then everything works correctly.\n\n### Expected Behavior\n\n\u0060ws\u0060 is resolved correctly when using the \u0060bundle\u0060 option of \u0060esbuild\u0060.\n\n### Steps To Reproduce\n\nhttps://github.com/hrueger/signalr-esbuild-issue\r\n\r\n1. \u0060yarn install\u0060\r\n1. \u0060yarn build\u0060\r\n1. See \u0060__webpack_require__\u0060 is still in \u0060dist/bundle.js\u0060 instead of the \u0060ws\u0060 module embedded in the bundle.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\nn/a\n\n### Anything else?\n\n_No response_",
    "upvotes": 4,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85Zw9yU",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Looks like an esbuild issue\r\nhttps://github.com/evanw/esbuild/issues/1921",
        "createdAt": "2023-04-12T21:52:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47674#issuecomment-1506008212"
      },
      {
        "id": "IC_kwDOAQzde85ZxPlX",
        "parentId": null,
        "author": "hrueger",
        "content": "Are you sure? I don\u0027t think so, to be honest. This is not about esm / cjs, but instead the workaround which is implemented for webpack here, breaks other bundlers (at least esbuild). To those, the call looks like a dynamic require, although it is actually not dynamic. Do you know, what I mean?",
        "createdAt": "2023-04-12T23:09:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47674#issuecomment-1506081111"
      },
      {
        "id": "IC_kwDOAQzde85aK7WD",
        "parentId": null,
        "author": "shsuman",
        "content": "We are facing the same issue with 5.0.17. The workaround was to replace the **\\_\\_non\\_webpack\\_require\\_\\_** with **require** using webpack plugin.\r\n\r\n\u0060\u0060\u0060javascript\r\n{\r\n      test: /@microsoft.signalr.dist.cjs.(HttpConnection|FetchHttpClient)\\.js/,\r\n      loader: \u0027string-replace-loader\u0027,\r\n      options: {\r\n             search: /__non_webpack_require__/g,\r\n             replace: \u0027require\u0027,\r\n             strict: true\r\n       }\r\n}\r\n\u0060\u0060\u0060 \r\nThe question I want to ask is why is **\\_\\_non_webpack_require\\_\\_** is being used because after searching online, it seems like it is not meant to be used in production code and no other package uses it.",
        "createdAt": "2023-04-18T10:13:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47674#issuecomment-1512813955"
      },
      {
        "id": "IC_kwDOAQzde85hRzxe",
        "parentId": null,
        "author": "hrueger",
        "content": "Thanks!",
        "createdAt": "2023-07-12T08:17:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47674#issuecomment-1632058462"
      },
      {
        "id": "IC_kwDOAQzde86ENhL1",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Unfortunately this issue will need to be reopened. The fix we made broke other important scenarios so we\u0027ll need to find a different way to fix this. Starting with 8.0.7 this esbuild issue will start happening again.",
        "createdAt": "2024-07-09T16:25:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47674#issuecomment-2218136309"
      },
      {
        "id": "IC_kwDOAQzde86E3W_P",
        "parentId": null,
        "author": "rahul-sharma-uipath",
        "content": "@BrennanConroy did it break multiple scenarios or just the esbuild thing?",
        "createdAt": "2024-07-15T18:14:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47674#issuecomment-2229104591"
      },
      {
        "id": "IC_kwDOAQzde86KdnXW",
        "parentId": null,
        "author": "sschultze",
        "content": "For bundling with \u0060rollup\u0060 (for Electron Main), I also have to use an ugly workaround involving the \u0060replace\u0060 plugin. Needless to say that this is very unsatisfactory.\r\n\r\n\u0060\u0060\u0060js\r\nreplace({\r\n    preventAssignment: true,\r\n    include: [\r\n        \u0027./node_modules/@microsoft/signalr/dist/**/*\u0027\r\n    ],\r\n    values: {\r\n        // @microsoft/signalr 8.0.7\r\n        \u0027/*#__PURE__*/\u0027: \u0027\u0027,\r\n        \u0027new (requireFunc(\u0022tough-cookie\u0022)).CookieJar()\u0027: \u0027undefined\u0027,\r\n        \u0027this._fetchType = requireFunc(\u0022fetch-cookie\u0022)(this._fetchType, this._jar);\u0027: JSON.stringify(\u0027\u0027),\r\n        \u0027requireFunc(\u0022ws\u0022)\u0027: \u0027undefined\u0027,\r\n        \u0027requireFunc(\u0022eventsource\u0022)\u0027: \u0027undefined\u0027\r\n    },\r\n    delimiters: [\u0027\u0027, \u0027\u0027]\r\n}),\r\n\u0060\u0060\u0060\r\n\r\nIn addition, the private \u0060WebSocket\u0060 and \u0060EventSource\u0060 properties have to be set in \u0060IHttpConnectionOptions\u0060 manually. And this workaround wouldn\u0027t work with cookies.",
        "createdAt": "2024-08-31T19:08:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47674#issuecomment-2323019222"
      },
      {
        "id": "IC_kwDOAQzde86Y-0tA",
        "parentId": null,
        "author": "bigcakes",
        "content": "Any updates on this issue?",
        "createdAt": "2024-12-31T17:18:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/47674#issuecomment-2566605632"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85kIT6k",
    "title": "Signalr typescript client provide stream to AsyncGenerator in additional to IStreamResult\u003CT\u003E",
    "url": "https://github.com/dotnet/aspnetcore/issues/47840",
    "createdAt": "2023-04-23T07:22:35Z",
    "lastUpdated": "2024-02-13T01:37:17Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI am trying to use \u0060signalr\u0060 client, but found that it returns AsyncGenerator, which not very easy to use in modern APIs like \u0060for await\u0060:\r\n\u0060\u0060\u0060ts\r\nclass HubConnection {\r\n  stream\u003CT = any\u003E(methodName: string, ...args: any[]): IStreamResult\u003CT\u003E;\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nA new api that returns AsyncGenerator:\r\n\r\n\u0060\u0060\u0060ts\r\nHubConnection {\r\n  stream\u003CT = any\u003E(methodName: string, ...args: any[]): IStreamResult\u003CT\u003E;\r\n  streamAsync\u003CT = any\u003E(methodName: string, ...args: any[]): AsyncGenerator\u003CT\u003E;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nso I can using \u0060for await\u0060 to execute this streamAsync result:\r\n\u0060\u0060\u0060ts\r\nfor await (const c of hubConnection.streamAsync(this.userInput)) {\r\n  resp.content \u002B= c;\r\n}\r\n\u0060\u0060\u0060\r\n\r\n### Additional context\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85k5mkL",
    "title": "SignalR C\u002B\u002B Client Static Lib",
    "url": "https://github.com/dotnet/aspnetcore/issues/48027",
    "createdAt": "2023-05-02T17:36:15Z",
    "lastUpdated": "2024-11-10T12:45:54Z",
    "body": "Hi I\u0027m a C\u002B\u002B newbie I use C# most of the time\r\nI need to develop a windows signalr client using VC\u002B\u002B\r\nI installed it using vcpkg: vcpkg install microsoft-signalr:x86-windows-static\r\nThen in project configuration properties Vcpkg use vcpkg=yes Use Static Libraries=yes\r\nWhile compiling I got the following error.\r\nIs there anything else I need to set to correctly link this library statically?\r\n\r\n![QQ\u622A\u56FE20230503013335](https://user-images.githubusercontent.com/54973061/235741641-7bf1ddf3-96f2-4bcd-96fa-7e5f64a13de7.jpg)\r\n\r\n",
    "upvotes": 1,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85bUpkW",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "This looks like a very new feature: https://devblogs.microsoft.com/cppblog/vcpkg-2023-04-15-release-vcpkg-ships-in-visual-studio-xbox-triplets-github-actions-cache-support-and-more/#vcpkg-now-included-with-visual-studio-ide\r\n\r\nDid you run \u0060vcpkg integrate install\u0060?",
        "createdAt": "2023-05-02T20:56:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48027#issuecomment-1532139798"
      },
      {
        "id": "IC_kwDOAQzde85bV1vV",
        "parentId": null,
        "author": "q812143836",
        "content": "\u003E This looks like a very new feature: https://devblogs.microsoft.com/cppblog/vcpkg-2023-04-15-release-vcpkg-ships-in-visual-studio-xbox-triplets-github-actions-cache-support-and-more/#vcpkg-now-included-with-visual-studio-ide\r\n\u003E \r\n\u003E Did you run \u0060vcpkg integrate install\u0060?\r\n\r\nYes \r\nI can use this library normally with Use Static Libraries=no\r\nbut i need to link statically\r\n",
        "createdAt": "2023-05-03T04:53:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48027#issuecomment-1532451797"
      },
      {
        "id": "IC_kwDOAQzde85bZ07j",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Oh I see, you can probably workaround this by defining \u0060NO_SIGNALRCLIENT_EXPORTS\u0060 when compiling or before including any signalr headers.\r\n\r\nFor fixing this:\r\nOther vcpkg projects modify the header depending on the link mode being built\r\ne.g. https://github.com/microsoft/vcpkg/blob/6d69bbacd2fbeae957f034dbbd2b454b5e3941fe/ports/simd/portfile.cmake#L26-L29 which is used in https://github.com/ermig1979/Simd/blob/2490278c3016b9fb3828f35b3c8563379e03b7b4/src/Simd/SimdLib.h#L654",
        "createdAt": "2023-05-03T18:14:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48027#issuecomment-1533497059"
      },
      {
        "id": "IC_kwDOAQzde85bapcG",
        "parentId": null,
        "author": "q812143836",
        "content": "\u003E Oh I see, you can probably workaround this by defining \u0060NO_SIGNALRCLIENT_EXPORTS\u0060 when compiling or before including any signalr headers.\r\n\u003E \r\n\u003E For fixing this: Other vcpkg projects modify the header depending on the link mode being built e.g. https://github.com/microsoft/vcpkg/blob/6d69bbacd2fbeae957f034dbbd2b454b5e3941fe/ports/simd/portfile.cmake#L26-L29 which is used in https://github.com/ermig1979/Simd/blob/2490278c3016b9fb3828f35b3c8563379e03b7b4/src/Simd/SimdLib.h#L654\r\n\r\nthank you so much for replying me\r\nI\u0027ve added: #define NO_SIGNALRCLIENT_EXPORTS\r\nbut while compiling I got some new errors\r\n\r\n![QQ\u622A\u56FE20230504043923](https://user-images.githubusercontent.com/54973061/236044349-fe423153-9b27-4735-800d-01dfa7be19c0.jpg)\r\n\r\n",
        "createdAt": "2023-05-03T20:39:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48027#issuecomment-1533712134"
      },
      {
        "id": "IC_kwDOAQzde85bfq7t",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Add \u0060crypt32.lib;winhttp.lib\u0060 to Linker -\u003E Input -\u003E Additional Dependencies\r\n",
        "createdAt": "2023-05-04T16:17:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48027#issuecomment-1535028973"
      },
      {
        "id": "IC_kwDOAQzde85bnruW",
        "parentId": null,
        "author": "q812143836",
        "content": "\u003E Add \u0060crypt32.lib;winhttp.lib\u0060 to Linker -\u003E Input -\u003E Additional Dependencies\r\n8/5000\r\nThank you, I made it\r\n\r\n\r\n",
        "createdAt": "2023-05-06T12:14:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48027#issuecomment-1537129366"
      },
      {
        "id": "IC_kwDOAQzde86TBy0j",
        "parentId": null,
        "author": "RayKoopa",
        "content": "In the current vcpkg version 0.1.0-alpha4#12, I also needed to add \u0060bcrypt.lib\u0060 to the additional linker dependencies to successfully compile.",
        "createdAt": "2024-11-10T12:44:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48027#issuecomment-2466721059"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85mQWJh",
    "title": "SignalR WebSocket Connectivity Issue in FireFox",
    "url": "https://github.com/dotnet/aspnetcore/issues/48305",
    "createdAt": "2023-05-18T12:34:41Z",
    "lastUpdated": "2024-02-13T01:35:31Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI am getting  \u0022Error: Failed to start the transport \u0027WebSockets\u0027: Error: WebSocket failed to connect\u0022 while using SignalR in an Angular application with .NET 6.0. The issue occurs specifically in **Mozilla Firefox** and it\u0027s random. Despite attempting to refresh the page, the problem persists. However, closing and reopening the browser resolves the issue.\r\n\r\nAfter approximately 1-2 minutes of being stuck in the \u0022connecting\u0022 state, SignalR throws an error and automatically switches its transport protocol to Server-Sent Events (SSE), following which the connection successfully establishes.\r\n\r\nThe WebSocket connection is working fine in Chrome\n\n### Expected Behavior\n\nLike Chrome a websocket connection should be established in Firefox as well.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n.Net Version: 6.0.3  Signalr Version: 6.0.3\n\n### Anything else?\n\n![connecting](https://github.com/dotnet/aspnetcore/assets/130349622/a720231c-fc1d-406a-b31c-fdbf02c0c45f)\r\n",
    "upvotes": 2,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85clPpR",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Get a network trace\r\nhttps://learn.microsoft.com/aspnet/core/signalr/diagnostics?view=aspnetcore-7.0#network-traces",
        "createdAt": "2023-05-18T15:55:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48305#issuecomment-1553267281"
      },
      {
        "id": "IC_kwDOAQzde85cmeI_",
        "parentId": null,
        "author": "MGulraiz",
        "content": "I will try to obtain a network trace since the issue is random, making it quite difficult for me to reproduce. However, I do have the network activity of my browser from the last time.\r\n![blockrequest](https://github.com/dotnet/aspnetcore/assets/130349622/cd7b084f-0b92-46b1-905d-6da7c5ca4805)\r\n\r\n",
        "createdAt": "2023-05-18T20:10:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48305#issuecomment-1553588799"
      },
      {
        "id": "IC_kwDOAQzde85dIdbu",
        "parentId": null,
        "author": "MGulraiz",
        "content": "[2023-5-19_v1.2.zip](https://github.com/dotnet/aspnetcore/files/11562640/2023-5-19_v1.2.zip)\r\n@BrennanConroy   Please find the attached network trace. It appears that SignalR is taking more than one minute to send a second request after the negotiate request, which might be causing the issue.",
        "createdAt": "2023-05-25T08:29:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48305#issuecomment-1562498798"
      },
      {
        "id": "IC_kwDOAQzde85ilc2j",
        "parentId": null,
        "author": "ttutko",
        "content": "I have also just started seeing something very similar to this if not the exact issue. It\u0027s on an airgapped network that I can\u0027t provide a trace from though. Will also point out that this is Firefox 114.0.2 on a linux host (Pop_Os! 22.04).",
        "createdAt": "2023-07-27T16:46:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48305#issuecomment-1653984675"
      },
      {
        "id": "IC_kwDOAQzde85nMT8w",
        "parentId": null,
        "author": "fabianeichfeldt",
        "content": "I am observing similar problems since some weeks\r\nFrom what I can see:\r\nInitial websocket connection request seems to fail, afterwards it\u0027s falling back to Server Sent Events, which is taking forever. In the end the websocket connection upgrade is working after 40seconds\r\n![image](https://github.com/dotnet/aspnetcore/assets/44608348/e786e0bc-c1d1-48ce-bb3a-838fb55581c8)\r\n\r\nInteresting observation: Problems occur only on local deployment. For remote connections it works as intended:\r\n![image](https://github.com/dotnet/aspnetcore/assets/44608348/68e1f42e-6aeb-44ff-b6c6-265b90b142cb)\r\n\r\nUsed versions\r\nFirefox: 117.0.1\r\nOS: Ubuntu 22.04\r\nJS SignalR Client: 6.0.11\r\nASPnet core: 6.0.22\r\n\r\nBackend does not report any suspicious, but I can test this with some more aggressive logging settings as well, if you can provide them.",
        "createdAt": "2023-09-22T11:45:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48305#issuecomment-1731280688"
      },
      {
        "id": "IC_kwDOAQzde85nNPEo",
        "parentId": null,
        "author": "qwertie",
        "content": "This happens to me rather often, as Firefox on Windows 10 is my primary browser. Once the glitch appears on http://localhost:3000, it usually persists across different tabs until the browser is closed \u0026 restarted. Something peculiar about the \u0022WebSocket failed to connect\u0022 message is that it _doesn\u0027t_ appear on initial page load, it appears during reload, and when it appears it is always the very first message; notably, it appears _before_ the constructor for \u0060new signalR.HubConnectionBuilder()\u0060 is invoked.\r\n\r\nBut is it just a SignalR thing or are all websockets broken? Well, SignalR connections on different domains still work, so the problem is limited to a a particular domain, and maybe localhost only. I found that if I ran this code on Chrome:\r\n\r\n    let socket = new WebSocket(\u0022ws://localhost:5001/api/coordinator\u0022);\r\n    socket.onopen = function(e) { console.warn(\u0022Connection established\u0022, e); };\r\n    socket.onerror = function(e) { console.error(e); };\r\n\r\nIt immediately prints \u0022Connection established\u0022. Running the same code in Firefox (in its \u0022glitched\u0022 state), nothing happens (neither success nor error). So SignalR seems blameless.\r\n\r\nHowever, the SSE fallback doesn\u0027t happen after 1-2 minutes; it takes about 13 minutes and 20 seconds (800 seconds) which seems excessive! This is with @microsoft/signalr v6.0.7. When it finally does establish an SSE connection, something goes wrong and the connection fails afterward. The console output looks like this:\r\n\r\n~~~\r\nGET ws://localhost:5001/api/coordinator?id=ctDwol9eSfT2BzjvWpU9Pg [HTTP/1.1 404 Not Found 3ms]\r\nFirefox can\u2019t establish a connection to the server at ws://localhost:5001/api/coordinator?id=ctDwol9eSfT2BzjvWpU9Pg. [WebSocketTransport.ts:74](c:/Dev/Barreleye/UI/node_modules/@microsoft/signalr/src/WebSocketTransport.ts)\r\n[2023-09-22T14:20:44.381Z] Information: (WebSockets transport) There was an error with the transport. [Utils.ts:199](c:/Dev/Barreleye/UI/node_modules/@microsoft/signalr/src/Utils.ts)\r\n[2023-09-22T14:20:44.382Z] Error: Failed to start the transport \u0027WebSockets\u0027: Error: WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled. [localhost:3000:2367:25](http://localhost:3000/)\r\n[2023-09-22T14:20:44.399Z] Information: SSE connected to http://localhost:5001/api/coordinator?id=dnZ0lqjAl6EVx8EJjfCn-Q [Utils.ts:199](c:/Dev/Barreleye/UI/node_modules/@microsoft/signalr/src/Utils.ts)\r\nXHR POST http://localhost:5001/api/coordinator?id=dnZ0lqjAl6EVx8EJjfCn-Q [HTTP/1.1 404 Not Found 14997ms]\r\n[2023-09-22T14:20:59.400Z] Error: Connection disconnected with error \u0027Error: Server returned handshake error: Handshake was canceled.\u0027. [localhost:3000:2367:25](http://localhost:3000/)\r\nUncaught (in promise) Error: Server returned handshake error: Handshake was canceled.\r\n    _processHandshakeResponse HubConnection.ts:614\r\n    _processIncomingData HubConnection.ts:536\r\n    node_modules vendors-node_modules_microsoft_signalr_dist_esm_HubConnectionBuilder_js-node_modules_mui_icon-f68620.chunk.js:1447\r\n    node_modules vendors-node_modules_microsoft_signalr_dist_esm_HubConnectionBuilder_js-node_modules_mui_icon-f68620.chunk.js:3227\r\n    node_modules vendors-node_modules_microsoft_signalr_dist_esm_HubConnectionBuilder_js-node_modules_mui_icon-f68620.chunk.js:3222\r\n    connect ServerSentEventsTransport.ts:51\r\n    _startTransport HttpConnection.ts:438\r\n    _createTransport HttpConnection.ts:393\r\n[HubConnection.ts:614](c:/Dev/Barreleye/UI/node_modules/@microsoft/signalr/src/HubConnection.ts)\r\nFailed to connect to /api/coordinator; will retry. Error: No Connection with that ID: Status code \u0027404\u0027\r\n~~~\r\n\r\nNote 1: After the \u0022SSE connected\u0022 message, it pauses for a few seconds before the next message appears.\r\nNote 2: the last message comes from a \u0060catch\u0060 block I put around the call to \u0060signalR.HubConnection.start()\u0060.\r\n\r\nIt looks like the server (Microsoft.AspNetCore.SignalR.Core.dll in dotnet\\shared\\Microsoft.AspNetCore.App\\7.0.7 folder) is rejecting the SSE connection attempt, but I don\u0027t know why. I haven\u0027t added any configuration to disable SSE (I just call \u0060IServiceCollection.AddSignalR();\u0060 and my Hub has an uninteresting constructor.)",
        "createdAt": "2023-09-22T14:29:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48305#issuecomment-1731522856"
      },
      {
        "id": "IC_kwDOAQzde85nN5aq",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "The more logs the better, here are docs on getting server and client logs: https://learn.microsoft.com/aspnet/core/signalr/diagnostics?view=aspnetcore-7.0 (trace is the most verbose)",
        "createdAt": "2023-09-22T16:19:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48305#issuecomment-1731696298"
      },
      {
        "id": "IC_kwDOAQzde85nTdNa",
        "parentId": null,
        "author": "fabianeichfeldt",
        "content": "Please find my detailed logs below. We are using Authorization, I kept the Auth logs in place, to see that there is no general timing issue in network communication.\r\n[backend.log](https://github.com/dotnet/aspnetcore/files/12712799/backend.log)\r\n[frontend.log](https://github.com/dotnet/aspnetcore/files/12712803/frontend.log)\r\n\r\nhope this helps",
        "createdAt": "2023-09-25T08:20:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48305#issuecomment-1733153626"
      },
      {
        "id": "IC_kwDOAQzde85omeye",
        "parentId": null,
        "author": "fabianeichfeldt",
        "content": "Could someone meanwhile find the time to check the logs? Is there anything else required to tackle the issue?",
        "createdAt": "2023-10-10T10:24:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48305#issuecomment-1754918046"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85mhobc",
    "title": "Throw custom error types instead of generic errors inside the HubConnection class",
    "url": "https://github.com/dotnet/aspnetcore/issues/48362",
    "createdAt": "2023-05-22T17:09:51Z",
    "lastUpdated": "2024-05-31T00:43:04Z",
    "body": "## Background and Motivation\r\n\r\n\u003C!--\r\nWe welcome API proposals! We have a process to evaluate the value and shape of new API. There is an overview of our process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md). This template will help us gather the information we need to start the review process.\r\nFirst, please describe the purpose and value of the new API here.\r\n--\u003E\r\n\r\nThis is about the JavaScript SignalR client (\u0022dotnet/aspnetcore/src/SignalR/clients/ts/signalr\u0022).\r\n\r\nThe \u0060HubConnection\u0060 class may throw errors (i.e. with the message \u0022Error: Server returned handshake error: Handshake was canceled.\u0022). These errors propagate up to the application layer. Currently, it is challenging to reliably identify these errors as originating from SignalR because the \u0060HubConnection\u0060 class creates plain \u0060Error\u0060 types without any distinct characteristics. In our scenario, we have implemented a global error handler that notifies users visually when an unhandled error occurs.\r\n\r\nHowever, since SignalR errors can occur sporadically and independently of user actions, it is desirable to filter out these errors. Presently, we achieve this by checking if the error\u0027s message property contains a specific string, like the one mentioned earlier. Unfortunately, this approach is not reliable, as the error message can change at any time, and there are multiple variations.\r\n\r\nThe proposal is to follow best practices and define a custom error type and/or set the [cause field](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause#providing_structured_data_as_the_error_cause) for library specific errors. This will allow library consumer to properly catch errors thrown by the library.\r\n\r\nFrom MDN\r\n\u003E You might want to define your own error types deriving from Error to be able to throw new MyError() and use instanceof MyError to check the kind of error in the exception handler. This results in cleaner and more consistent error handling code.\r\n\u003E https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\r\n\r\nInterestingly, the Error.ts file already contains some error types; however, they seem to be exclusively used by the HTTP wrapper, leaving the other SignalR errors unaccounted for.\r\n\r\n## Proposed API\r\n1) Add a new error class (derived from \u0060Error\u0060) and set the \u0060name\u0060 field\r\n2) Change code that uses \u0060new Error\u0060 to use \u0060new HubConnectionError\u0060 instead\r\n\r\nUnfortunately, I don\u0027t understand why the existing error types use a strange prototype workaround. I have read that it is supposed to make \u0060instanceof\u0060 work correctly. However, in my tests, that didn\u0027t change anything, as \u0060instanceof\u0060 checks still don\u0027t work. Therefore, it seems like it doesn\u0027t do anything? I\u0027d be interested in the background on that.\r\n\r\nDue to this reason, I have not followed this pattern in this proposal. Instead, the name field in the constructor is set. While not perfect (i.e. other error types *might* use the same name), setting the name field is a common practice and essential for making the error identifiable during a catch.\r\n\r\n\u0060\u0060\u0060diff\r\n--- a/src/SignalR/clients/ts/signalr/src/Errors.ts\r\n\u002B\u002B\u002B b/src/SignalR/clients/ts/signalr/src/Errors.ts\r\n\u002B/** Error thrown by HubConnection class. */\r\n\u002Bexport class HubConnectionError extends Error {\r\n\u002B    /** Constructs a new instance of {@link @microsoft/signalr.HubConnectionError}.\r\n\u002B     *\r\n\u002B     * @param {string} errorMessage A descriptive error message.\r\n\u002B     */\r\n\u002B    constructor(errorMessage: string) {\r\n\u002B        super(errorMessage);\r\n\u002B\r\n\u002B        this.name = \u0022HubConnectionError\u0022;\r\n\u002B    }\r\n\u002B}\r\n\u002B\r\n--- a/src/SignalR/clients/ts/signalr/src/HubConnection.ts\r\n\u002B\u002B\u002B b/src/SignalR/clients/ts/signalr/src/HubConnection.ts\r\n-import { AbortError } from \u0022./Errors\u0022;\r\n\u002Bimport { AbortError, HubConnectionError } from \u0022./Errors\u0022;\r\nexport class HubConnection {\r\n             const message = \u0022Server returned handshake error: \u0022 \u002B responseMessage.error;\r\n             this._logger.log(LogLevel.Error, message);\r\n \r\n-            const error = new Error(message);\r\n\u002B            const error = new HubConnectionError(message);\r\n             this._handshakeRejecter(error);\r\n             throw error;\r\n         } else {\r\n\u0060\u0060\u0060\r\n\r\n## Usage Examples\r\n\r\nNow we can properly catch the error by checking the \u0060name\u0060 property that was set in the error constructor. Using \u0060instanceof\u0060 for error checks is known to be problematic so we avoid it.\r\n\r\n\u0060\u0060\u0060ts\r\ntry {\r\n    throw new HubConnectionError(\u0022test\u0022);\r\n}\r\ncatch (error: any) {\r\n    if (error.name === \u0022HubConnectionError\u0022) {\r\n        console.log(\u0027SignalR Error\u0027, error.name);\r\n    } else {\r\n        console.log(\u0027Other Error\u0027, error.name);\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n## Alternative Designs\r\n\r\nAs an alternative to introducing new error types, we could populate the \u0060cause\u0060 field mentioned earlier with a value or object structure that allows us to identify these error instances as SignalR errors.\r\n\r\n\u0060\u0060\u0060\r\nconst DEFAULT_ERROR_CAUSE = Object.freeze({\r\n    source: \u0027signalr\u0027,\r\n});\r\n\r\nfunction createError(message: string) {\r\n    throw new Error(message, { cause: DEFAULT_ERROR_CAUSE });\r\n}\r\n\r\n// ...\r\ncreateError(message);\r\n\u0060\u0060\u0060\r\n\u003C!--\r\nWere there other options you considered, such as alternative API shapes?\r\nHow does this compare to analogous APIs in other ecosystems and libraries?\r\n--\u003E\r\n\r\n## Risks\r\n\r\n\u003C!--\r\nPlease mention any risks that to your knowledge the API proposal might entail, such as breaking changes, performance regressions, etc.\r\n--\u003E\r\n\r\n- This change might be considered breaking, depending on how library consumers handle error instances.\r\n- Since the \u0060cause\u0060 property is not available in \u0022es2019\u0022 (introduced in es2022), it is likely unsuitable as it won\u0027t function on older browsers.\r\n\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "api-suggestion"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85c7QSX",
        "parentId": null,
        "author": "flensrocker",
        "content": "Maybe related to #39079 with the need to get the proper status codes from negotiation.",
        "createdAt": "2023-05-23T10:43:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48362#issuecomment-1559037079"
      },
      {
        "id": "IC_kwDOAQzde85_nd6-",
        "parentId": null,
        "author": "luga97",
        "content": "This looks like a potential good first issue for me. I would like to collaborate, If I can, there is some doc related about how to start? ",
        "createdAt": "2024-05-31T00:43:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48362#issuecomment-2141052606"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85ms4BK",
    "title": "Filter Outgoing Invocations in SignalR",
    "url": "https://github.com/dotnet/aspnetcore/issues/48401",
    "createdAt": "2023-05-24T01:43:52Z",
    "lastUpdated": "2024-11-27T00:05:52Z",
    "body": "\u003C!--\r\nThis template is useful to build consensus about whether work should be done, and if so, the high-level shape of how it should be approached. Use this before fixating on a particular implementation.\r\n--\u003E\r\n\r\n## Summary\r\n\r\nThis is a proposal to add a possible \u0060IClientFilter\u0060 to SignalR.\r\nThe goal here is to allow for engineers to filter messages being sent to clients connected to a SignalR hub, regardless of a prior hub invocation.\r\n\r\n## Motivation and goals\r\n\r\nMy main motivation to design this is to be able to collect more granular metrics regarding the messages being sent to clients like:\r\n* What transport is the client using?\r\n* What is the volume of each particular event being sent?\r\n\r\nThe implementation of given filter would allow for other scenarios like:\r\n* Tracking messages based on client/user;\r\n* Blocking a message from being sent;\r\n* Other verifications/validations done regarding a particular connection.\r\n\r\n## In scope\r\n\r\n* Middleware like filter to allow for code execution before/after a message is sent to a particular client;\r\n* Allow to block a message from being sent to a particular client;\r\n* Allow custom logic to run before/after each message is sent out;\r\n\r\n## Out of scope\r\n\r\n* The filter would apply only to \u0060HubMethodInvocationMessage\u0060s. Other message types, including messages used to control connection/flow would not run the filter;\r\n* Modification of a message being sent is also out of scope.\r\n\r\n## Risks / unknowns\r\n\r\nThe main risk here is the increased latency between a message being dispatched and it being actually sent throught a transport.\r\nAdding the possibility to run custom code before/after sending a message could increase CPU/Memory usage and slow down communication with clients.\r\nThe \u0060IHubFilter\u0060 is instantiated (or reused) for every hub invocation, but a single hub invocation could trigger \u0022countless\u0022 \u0060IClientFilter\u0060 executions when using \u0060All\u0060 or \u0060Except\u0060.\r\nRegardless, the engineer should have the possibility to weight pros and cons of adding such a code to his application. Perhaps the performance cost is worth the results.\r\n\r\n## Examples\r\n\r\n\u0060IClientFilter\u0060 could have a single method:\r\n\u0060\u0060\u0060csharp\r\npublic interface IClientFilter {\r\n    ValueTask OnSendAsync(ClientInvocationContext context,  Func\u003CClientInvocationContext, ValueTask\u003E next);\r\n}\r\n\u0060\u0060\u0060\r\nAnd be added to \u0060HubOptions\u0060 the same way a \u0060IHubFilter\u0060 is:\r\n\u0060\u0060\u0060csharp\r\nservices.AddSingalR(options =\u003E {\r\n    options.AddClientFilter\u003CMyFilter\u003E();\r\n    options.AddClientFilter(typeof(MyFilter));\r\n    options.AddClientFilter(new MyFilter());\r\n});\r\n\u0060\u0060\u0060\r\n\r\nNOTE: We could not simply use \u0060AddFilter\u0060 because it would collide with the current \u0060AddFilter(Type)\u0060 used for \u0060IHubFilter\u0060s.\r\n\r\nFrom here, each time a message is to be sent to a client, the method \u0060OnSendAsync\u0060 would be invoked as a middleware.\r\nIf an exception occur (much like happens with \u0060IHubFilter.InvokeMethodAsync\u0060, the message would not be sent.\r\nMessages sent from outside the hub instance, using \u0060IHubContext\u0060 should behave the same way.\r\n\r\n\u003C!--\r\n# Detailed design\r\n\r\nIt\u0027s often best not to fill this out until you get basic consensus about the above. When you do, consider adding an implementation proposal with the following headings:\r\n\r\nDetailed design\r\nDrawbacks\r\nConsidered alternatives\r\nOpen questions\r\nReferences\r\n\r\nIf there\u0027s one clear design you have consensus on, you could do that directly in a PR.\r\n--\u003E\r\n",
    "upvotes": 9,
    "labels": [
      "area-signalr",
      "design-proposal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85dATM6",
        "parentId": null,
        "author": "davidfowl",
        "content": "What\u2019s on the ClientInvocationContext?",
        "createdAt": "2023-05-24T02:09:08Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-1560359738"
      },
      {
        "id": "IC_kwDOAQzde85dATnp",
        "parentId": null,
        "author": "SuricateCan",
        "content": "I\u0027ve been going throught the source code the last few days and have a basic idea of how I\u0027d implement it.\r\nIt would be largely based on the current \u0060IHubFilter.InvokeMethodAsync\u0060 implementation:\r\n\u0060\u0060\u0060csharp\r\npublic interface IClientFilter {\r\n    ValueTask OnSendAsync(ClientInvocationContext context,  Func\u003CClientInvocationContext, ValueTask\u003E next);\r\n}\r\n\r\npublic class ClientInvocationContext {\r\n    public HubClientContext Context { get; } // this would have exactly the same public members as \u0060HubCallerContext\u0060 but with a less confusing name given the server is the actual caller here\r\n    public Hub Hub { get; } // I think this would be a single instance per \u0022proxy\u0022 call. For instance, \u0060Clients.All\u0060 would share the same instance for all clients targeted for the message.\r\n    // the rest would be pretty much the same as a \u0060HubInvocationContext\u0060 with a few name changes\r\n    public string MethodName { get; }\r\n    public IReadOnlyList\u003Cobject?\u003E MethodArguments { get; }\r\n    public IServiceProvider ServiceProvider { get; }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThe part in the code where things diverge a little is inside \u0060HubConnectionHandler\u0060. Here the filters would be sent to \u0060HubConnectionContext\u0060 during \u0060HubConnectionHandler.OnConnectedAsync\u0060 using the \u0060HubConnectionContextOptions\u0060.\r\n\r\nOn the constructor, we build the middleware invokation (much like the \u0060DefaultHubDispatcher\u0060 does for \u0060IHibFilters\u0060) and \u0022intercept\u0022 calls to both \u0060HubConnectionContext.WriteAsync\u0060 methods.\r\n\r\nTo preserve performance when no filters are declared, we \u0022short circuit\u0022 the call (again like the dispatcher does) and keep things running as usual.\r\n\r\nWhen either method is called we\u0027d have to check:\r\n* if a middleware exists; and\r\n* if the message is a \u0060HubMethodInvocationMessages\u0060.\r\n\r\nIf both are true, we\u0027d create a \u0060ClientInvocationContext\u0060 using either a \u0060HubMessage\u0060 or \u0060SerializedHubMessage\u0060 (using different internal constructors to preserve cache functionality) and call the middleware.\r\n\r\nThe hub instance may be a complication here because the connection instance lives way longer then the hub instances and it is not practical to keep one for each connection/handler.\r\nTo solve this, I think we could pass the hub instance with the \u0060WriteAsync\u0060 call, but that may break compatibility.",
        "createdAt": "2023-05-24T02:11:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-1560361449"
      },
      {
        "id": "IC_kwDOAQzde85dAip8",
        "parentId": null,
        "author": "davidfowl",
        "content": "Do we need the hub instance?",
        "createdAt": "2023-05-24T03:55:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-1560423036"
      },
      {
        "id": "IC_kwDOAQzde85dAjWl",
        "parentId": null,
        "author": "SuricateCan",
        "content": "You are right, maybe we don\u0027t actually need it, just it\u0027s name. I can\u0027t think of any uses for the instance, at least not in the scenarios I described.",
        "createdAt": "2023-05-24T04:00:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-1560425893"
      },
      {
        "id": "IC_kwDOAQzde85dAjq1",
        "parentId": null,
        "author": "SuricateCan",
        "content": "In this case, the class would look like this:\r\n\u0060\u0060\u0060csharp\r\npublic class ClientInvocationContext {\r\n    public HubClientContext Context { get; }\r\n    public string HubName { get; }\r\n    public string MethodName { get; }\r\n    public IReadOnlyList\u003Cobject?\u003E MethodArguments { get; }\r\n    public IServiceProvider ServiceProvider { get; }\r\n}\r\n\u0060\u0060\u0060",
        "createdAt": "2023-05-24T04:02:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-1560427189"
      },
      {
        "id": "IC_kwDOAQzde85diptI",
        "parentId": null,
        "author": "SuricateCan",
        "content": "Hi @davidfowl, it has been almost a week. Do you want me to draft something so we can continue to discuss?",
        "createdAt": "2023-05-31T01:39:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-1569364808"
      },
      {
        "id": "IC_kwDOAQzde85djLgU",
        "parentId": null,
        "author": "davidfowl",
        "content": "@BrennanConroy can you take a look at the proposal?",
        "createdAt": "2023-05-31T05:05:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-1569503252"
      },
      {
        "id": "IC_kwDOAQzde85uyYcW",
        "parentId": null,
        "author": "davidfowl",
        "content": "@SuricateCan Are you still interested in contributing?",
        "createdAt": "2023-12-16T03:35:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-1858701078"
      },
      {
        "id": "IC_kwDOAQzde85uyvOU",
        "parentId": null,
        "author": "SuricateCan",
        "content": "@davidfowl yes, I\u0027m still interested. ",
        "createdAt": "2023-12-16T11:24:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-1858794388"
      },
      {
        "id": "IC_kwDOAQzde8560VxM",
        "parentId": null,
        "author": "SaraEzra",
        "content": "Is the change going to come in soon? I need it too",
        "createdAt": "2024-04-17T07:13:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-2060541004"
      },
      {
        "id": "IC_kwDOAQzde8560WoI",
        "parentId": null,
        "author": "davidfowl",
        "content": "No the change is not coming soon, but adding an upvote helps us prioritize so add a \uD83D\uDC4D\uD83C\uDFFE ",
        "createdAt": "2024-04-17T07:15:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-2060544520"
      },
      {
        "id": "IC_kwDOAQzde8560aFK",
        "parentId": null,
        "author": "SaraEzra",
        "content": "Ok.\r\nHow can I still filter the messages that go out from SignalR to clients? \r\nHubLifetimeManager does not work with Azure SignalR",
        "createdAt": "2024-04-17T07:23:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-2060558666"
      },
      {
        "id": "IC_kwDOAQzde8560bOO",
        "parentId": null,
        "author": "davidfowl",
        "content": "You can\u0027t, the feature doesn\u0027t exist today, hence this issue. The only thing you can do is send to individual connections.",
        "createdAt": "2024-04-17T07:26:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-2060563342"
      },
      {
        "id": "IC_kwDOAQzde8560c5B",
        "parentId": null,
        "author": "SaraEzra",
        "content": "What does send to individual connections mean?\r\nHow can I catch the message before it is sent?",
        "createdAt": "2024-04-17T07:29:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-2060570177"
      },
      {
        "id": "IC_kwDOAQzde8560dyG",
        "parentId": null,
        "author": "davidfowl",
        "content": "Sending to individual connections means you don\u0027t get to use Clients.All/Group/User, and instead you have to use \u0060Clients.Client(connectionId)\u0060. Which also means you need to track connection ids on the server, so that you can filter before sending to them.",
        "createdAt": "2024-04-17T07:31:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-2060573830"
      },
      {
        "id": "IC_kwDOAQzde8560gEP",
        "parentId": null,
        "author": "SaraEzra",
        "content": "It\u0027s irrelevant to me :(\r\nI hope it comes in soon",
        "createdAt": "2024-04-17T07:36:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48401#issuecomment-2060583183"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85noZWb",
    "title": "Map hubs with attributes",
    "url": "https://github.com/dotnet/aspnetcore/issues/48590",
    "createdAt": "2023-06-02T18:39:05Z",
    "lastUpdated": "2024-03-11T05:15:15Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to route hubs manually in programs,cs\n\n### Describe the solution you\u0027d like\n\nIt would be great if hubs can be mapped with \r\n\u0060\u0060\u0060\r\n[Hub]\r\n[Route(\u0022/chathub\u0022)]\r\npublic class ChatHub : Hub\r\n\u0060\u0060\u0060\r\nsimilar to controllers\r\n\u0060\u0060\u0060\r\n[ApiController]\r\n[Route(\u0022[controller]\u0022)]\r\npublic class WeatherForecastController : ControllerBase\r\n\u0060\u0060\u0060\r\ninstead of \u0060app.MapHub\u003CChatHub\u003E(\u0022/chathub\u0022);\u0060 in programs.cs\r\n\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85d5s2Q",
        "parentId": null,
        "author": "davidfowl",
        "content": "We have no plans to add support for scanning for hubs via an attribute within an assembly. It should be possible to build something like this using reflection. \r\n\r\n\u0060\u0060\u0060C#\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.SignalR;\r\nusing System.Reflection;\r\n\r\npublic static class MapAllHubsExtensions\r\n{\r\n    public static IEndpointConventionBuilder MapHubs(this IEndpointRouteBuilder routes)\r\n    {\r\n        var mapHub = typeof(HubEndpointRouteBuilderExtensions).GetMethod(nameof(HubEndpointRouteBuilderExtensions.MapHub), new[] { typeof(IEndpointRouteBuilder), typeof(string) })\r\n            ?? throw new Exception(\u0022Could not find MapHub method\u0022);\r\n\r\n        var group = routes.MapGroup(\u0022\u0022);\r\n\r\n        foreach (var t in typeof(Program).Assembly.GetTypes())\r\n        {\r\n            if (typeof(Hub).IsAssignableFrom(t) \u0026\u0026 \r\n                t.IsPublic \u0026\u0026\r\n                t.GetCustomAttribute\u003CRouteAttribute\u003E() is { } attribute)\r\n            {\r\n                mapHub.MakeGenericMethod(t).Invoke(null, new object[] { group, attribute.Template });\r\n            }\r\n        }\r\n\r\n        return group;\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\nThat would enable something like this:\r\n\r\n\u0060\u0060\u0060C#\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.AspNetCore.SignalR;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddSignalR();\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapHubs();\r\n\r\napp.Run();\r\n\r\n[Route(\u0022/chat\u0022)]\r\npublic class ChatHub : Hub\r\n{\r\n\r\n}\r\n\u0060\u0060\u0060\r\n\r\nAssembly scanning at runtime by default will break future plans to do ahead of time compilation, we don\u0027t want this to be a part of any experience in ASP.NET Core outside of MVC (which has this unfortunate default behavior). We can revisit this once we are able to replace runtime discovery with compile time source generation.",
        "createdAt": "2023-06-04T05:45:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48590#issuecomment-1575406992"
      },
      {
        "id": "IC_kwDOAQzde85eEUm1",
        "parentId": null,
        "author": "Kiryuumaru",
        "content": "Oh, thankyou for this workaround",
        "createdAt": "2023-06-06T08:36:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48590#issuecomment-1578191285"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85oipw1",
    "title": "Casing Consistency Between SignalR Clients",
    "url": "https://github.com/dotnet/aspnetcore/issues/48746",
    "createdAt": "2023-06-13T02:26:53Z",
    "lastUpdated": "2024-02-13T01:33:40Z",
    "body": "\u003C!--\r\nThis template is useful to build consensus about whether work should be done, and if so, the high-level shape of how it should be approached. Use this before fixating on a particular implementation.\r\n--\u003E\r\n\r\n## Summary\r\n\r\nAt the moment, we have 4 officially supported versions for SignalR Clients. Two of these clients register handlers as case insensitive and the other two don\u0027t.\r\n\r\nCase sensitive clients: C# and Java\r\nCase insensitive clients: JS and C\u002B\u002B\r\n\r\n## Motivation and goals\r\n\r\nThe issue here is consistency between implementations. When integrate testing my backend I found the difference between c# and js clients, wich lead me to false positives tests.\r\n\r\n## In scope\r\n\r\nThe proposal here is to make all clients case insensitive when registering a handler, that way, we can expect all clients to behave the same way.\r\n\r\n## Out of scope\r\n\r\nThe idea is to be more flexible, so making them all case sensitive is out of scope.\r\n\r\n## Risks / unknowns\r\n\r\nDespite being more flexible, I believe in some edge cases, we may have older clients registering both handlers to match casing.\r\n\r\n## Examples\r\n\r\nNo matter what SignalR Client my hub client decides to use, I expect the same behavior.\r\nThe following declarations should be about the same invocation:\r\n\r\n\u0060\u0060\u0060csharp\r\n// C#\r\nconnection.On(\u0022MyMethod\u0022, MyMethodHandler);\r\nconnection.On(\u0022mymethod\u0022, MyMethodHandler);\r\n\u0060\u0060\u0060\r\n\u0060\u0060\u0060cpp\r\n//Java\r\nconnection.on(\u0022MyMethod\u0022, myMethodHandler);\r\nconnection.on(\u0022mymethod\u0022, myMethodHandler);\r\n\u0060\u0060\u0060\r\n\r\n### Current Implementations\r\n\r\nThe Javascript client, register the handlers with lower case target name:\r\nhttps://github.com/dotnet/aspnetcore/blob/239b00d00cb271ab3719ef3843570727778c11f6/src/SignalR/clients/ts/signalr/src/HubConnection.ts#L468\r\n\r\nThe C\u002B\u002B client uses an unordered map with case insensitive comparers:\r\nhttps://github.com/aspnet/SignalR-Client-Cpp/blob/facb478884450ee805a21e8e794dec4c156e3a11/src/signalrclient/hub_connection_impl.h#L59\r\n\r\nThe Java client uses a hash map:\r\nhttps://github.com/dotnet/aspnetcore/blob/239b00d00cb271ab3719ef3843570727778c11f6/src/SignalR/clients/java/signalr/core/src/main/java/com/microsoft/signalr/CallbackMap.java#L14\r\n\r\nAnd the C# client uses a concurrent dictionary with ordinal string comparer:\r\nhttps://github.com/dotnet/aspnetcore/blob/239b00d00cb271ab3719ef3843570727778c11f6/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs#L78\r\n\r\n\u003C!--\r\n# Detailed design\r\n\r\nIt\u0027s often best not to fill this out until you get basic consensus about the above. When you do, consider adding an implementation proposal with the following headings:\r\n\r\nDetailed design\r\nDrawbacks\r\nConsidered alternatives\r\nOpen questions\r\nReferences\r\n\r\nIf there\u0027s one clear design you have consensus on, you could do that directly in a PR.\r\n--\u003E\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "design-proposal"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85oivyK",
    "title": "Allow for SignalR Clients to Handle Unregistered Handlers",
    "url": "https://github.com/dotnet/aspnetcore/issues/48747",
    "createdAt": "2023-06-13T02:57:46Z",
    "lastUpdated": "2024-02-13T01:33:37Z",
    "body": "\u003C!--\r\nThis template is useful to build consensus about whether work should be done, and if so, the high-level shape of how it should be approached. Use this before fixating on a particular implementation.\r\n--\u003E\r\n\r\n## Summary\r\n\r\nWhile consuming a SignalR Hub, we have no way of handling \u0022unknown\u0022 invocations using the current API.\r\nThe idea of the proposal is to allow for a \u0022fallback\u0022 handler to either handle the invocation, basically turning an unknow invocation into a handled one, or pass it back to the engine for logging/treatment.\r\n\r\n## Motivation and goals\r\n\r\nI want ot be able to trace every message received by my client, it being a deliberate part of my implementation or not.\r\nA fallback method would allow me to monitor server changes, track missing features/bugs and improve security by knowing \u0022exaclty\u0022 what I am receiving.\r\n\r\n## In scope\r\n\r\nA method registration for fallback handling or a middleware like approach were I can centrilize monitoring logic and handle \u0022unknown\u0022 invocations.\r\n\r\n## Out of scope\r\n\r\nI expect no changes in current behavior, so it being register or not, the client should behave the same.\r\n\r\n## Risks / unknowns\r\n\r\nI think the risk here depends on how we implement it. If we delegate \u0022too much\u0022 power to the fallback or middleware, we may break the protocol when the server is expecting a response.\r\n\r\n## Examples\r\n\r\nI\u0027ll limit the examples using C#.\r\n\u0060\u0060\u0060csharp\r\n// For registering a fallback approach\r\nconnection.OnUnregisteredInvocation \u002B= async (InvocationMessage invocation) =\u003E /*...*/;\r\n// or\r\nconnection.OnUnregistered(async (InvocationMessage invocation) =\u003E /*...*/);\r\n\r\n// For registering a middleware, we could use the builder\r\nconnectionBuilder.WithMiddleware\u003CMyMiddleware\u003E();\r\n// or\r\nconnectionBuilder.WithMiddleware(new MyMiddleware());\r\n\u0060\u0060\u0060\r\n\r\nMaybe instead of \u0022Middleware\u0022 we can use \u0022Filter\u0022:\r\n\r\n\u0060\u0060\u0060csharp\r\nconnectionBuilder.WithFilter\u003CMyFilter\u003E();\r\n// or\r\nconnectionBuilder.WithFilter(new MyFilter());\r\n\u0060\u0060\u0060\r\n\r\n\u003C!--\r\n# Detailed design\r\n\r\nIt\u0027s often best not to fill this out until you get basic consensus about the above. When you do, consider adding an implementation proposal with the following headings:\r\n\r\nDetailed design\r\nDrawbacks\r\nConsidered alternatives\r\nOpen questions\r\nReferences\r\n\r\nIf there\u0027s one clear design you have consensus on, you could do that directly in a PR.\r\n--\u003E\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "design-proposal"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85wg-8l",
        "parentId": null,
        "author": "fpdave100",
        "content": "Would improve development productivity and diagnostics significantly.  It cab e difficult to diagnose when a msg goes missing\r\n\u002B1",
        "createdAt": "2024-01-11T18:04:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/48747#issuecomment-1887694629"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85p-fe0",
    "title": "Consider providing override for platform detection in JS/TS SignalR client",
    "url": "https://github.com/dotnet/aspnetcore/issues/49065",
    "createdAt": "2023-06-28T01:12:39Z",
    "lastUpdated": "2025-01-06T13:26:58Z",
    "body": "An internal team reached out with a problem they are experiencing with our platform detection logic:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/7918436a914ac1cbafa94a359e435c67535c8159/src/SignalR/clients/ts/signalr/src/Utils.ts#L40C9-L40C9\r\n\r\nLocally this works, but they are seeing a problem in production where it is detecting that it is in the browser instead of Node. This could possibly be due to global namespace pollution from another package that is impacting their code that runs locally.\r\n\r\nThey asked whether it would be possible to provide the ability to override the platform detection logic.\r\n\r\nAnother possibility is that we could see whether there is a better way to detect that we are running in Node vs. looking for the presence of the window global variable.",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85gGRR3",
        "parentId": null,
        "author": "mitchdenny",
        "content": "After looking at the way that \u0060\u0060\u0060Platform.isNode\u0060\u0060\u0060 (and friends) are used. I think plumbing through some kind of override from the top level APIs would be pretty ugly with lots of code churn in the library. Given the problem here is global namespace polution - perhaps a little bit more global namespace solution could be our salvation?\r\n\r\nWhat if we allowed someone to set global variables:\r\n\r\n\u0060\u0060\u0060js\r\nsignalRPlatformDetectionOverride = \u0022node\u0022;\r\n\u0060\u0060\u0060\r\n\r\nThen \u0060\u0060\u0060Platform.isNode\u0060\u0060\u0060 and friends would check this as part of its logic.",
        "createdAt": "2023-06-29T00:04:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49065#issuecomment-1612256375"
      },
      {
        "id": "IC_kwDOAQzde86QMm3W",
        "parentId": null,
        "author": "josep-llodra",
        "content": "Today I needed something like this:\n\n\u0060\u0060\u0060js\nsignalRPlatformDetectionOverride = \u0022browser\u0022;\n\u0060\u0060\u0060\n\nWhy? I am using Electron and I need it to have \u0060nodeIntegration: true\u0060 and \u0060contextIsolation: false\u0060.\n\nHence, \u0060Platform.isNode\u0060 returns \u0060true\u0060, and \u0060require(\u0027ws\u0027)\u0060 throws.\n\nSo, I manually modified the \u0060Platform\u0060 class to return what I needed and works perfectly.",
        "createdAt": "2024-10-17T11:05:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49065#issuecomment-2419224022"
      },
      {
        "id": "IC_kwDOAQzde86ZXok_",
        "parentId": null,
        "author": "jjjaniszewski",
        "content": "I had a same issue as above. I\u0027m trying to use SignalR inside renderer of Electron application. For me it throws with require(\u0027eventsource\u0027). Initially i tried to import it from preload script but it only causes chain reaction of require problems.\n\nFor now i have solved it with hacky monkey patching:\n\u0060\u0060\u0060\nimport {Platform} from \u0027@microsoft/signalr/dist/esm/Utils\u0027;\n\n// Override the methods\nObject.defineProperty(Platform, \u0027isNode\u0027, {\n  get: () =\u003E false,\n  configurable: true,\n});\n\nObject.defineProperty(Platform, \u0027isBrowser\u0027, {\n  get: () =\u003E true,\n  configurable: true,\n});\n\u0060\u0060\u0060\n\nI\u0027m not quite sure what should be proper solution but probably something like:\n\u0060\u0060\u0060\nstatic get isNode() {\n  return window == undefined \u0026\u0026 typeof process !== \u0022undefined\u0022 \u0026\u0026 process.release \u0026\u0026 process.release.name === \u0022node\u0022;\n}\n\u0060\u0060\u0060",
        "createdAt": "2025-01-06T13:26:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49065#issuecomment-2573109567"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85qp5h-",
    "title": "Expose a StateChanged event to notify so that the client UI can accuretly display the current connection state.",
    "url": "https://github.com/dotnet/aspnetcore/issues/49219",
    "createdAt": "2023-07-05T11:37:08Z",
    "lastUpdated": "2024-02-13T01:31:14Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI am trying to display the current status of the \u0060HubConnection\u0060 of SignalR in a .NET UI.\r\nThe problem is it can transition to different states and in the end I only have access to the underlying actual state.\r\nIt would be beneficial to notify about state transitions so that the UI can acuretly reflect the actual connection sate.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nExpose a \u0060StateChanged\u0060 event that notifies about the underlying connection state changes.\r\n\r\nNOTE: This was already done here:\r\n[State Changed Implementation](https://github.com/SignalR/SignalR/blob/f3600c71f83d8312ad61bced0ca547795734d51e/src/Microsoft.AspNet.SignalR.Client/Connection.cs)\r\n\r\n\r\n### Additional context\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85g2AQy",
        "parentId": null,
        "author": "mitchdenny",
        "content": "We already have \u0060\u0060\u0060Closed\u0060\u0060\u0060, \u0060\u0060\u0060Reconnecting\u0060\u0060\u0060, and \u0060\u0060\u0060Reconnected\u0060\u0060\u0060 events - do these not work for you?",
        "createdAt": "2023-07-07T05:28:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49219#issuecomment-1624769586"
      },
      {
        "id": "IC_kwDOAQzde85g2AX0",
        "parentId": null,
        "author": "??",
        "content": "Hi @okipol88. We have added the \u0022Needs: Author Feedback\u0022 label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
        "createdAt": "2023-07-07T05:29:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49219#issuecomment-1624770036"
      },
      {
        "id": "IC_kwDOAQzde85hG1Fu",
        "parentId": null,
        "author": "okipol88",
        "content": "\u003E We already have \u0060Closed\u0060, \u0060Reconnecting\u0060, and \u0060Reconnected\u0060 events - do these not work for you?\r\n\r\nWhen the initial connection is made we do not see the transition between \u0060Disconnected\u0060 to \u0060Connecting\u0060, especially given poor network quality. None of the mentioned events is fired then.",
        "createdAt": "2023-07-10T15:19:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49219#issuecomment-1629180270"
      },
      {
        "id": "IC_kwDOAQzde85hJYdh",
        "parentId": null,
        "author": "mitchdenny",
        "content": "You can infer those states. If you haven\u0027t called \u0060\u0060\u0060StartAsync(...)\u0060\u0060\u0060 then the state is \u0060\u0060\u0060Disconnected\u0060\u0060\u0060. Once you call \u0060\u0060\u0060StartAsync(...)\u0060\u0060\u0060 but before it is returned the state is \u0060\u0060\u0060Connecting\u0060\u0060\u0060 and once \u0060\u0060\u0060StartAsync(...)\u0060\u0060\u0060 returns the state is connected.\r\n\r\nI can see why it might be more convient particularly for driving UI elements to expose an event for this though.",
        "createdAt": "2023-07-10T23:06:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49219#issuecomment-1629849441"
      },
      {
        "id": "IC_kwDOAQzde85hRv2N",
        "parentId": null,
        "author": "mitchdenny",
        "content": "@halter73 is that a thumbs up for my way of inferring the state, or adding some extra events in for the states that need to be inferred in this way :)",
        "createdAt": "2023-07-12T08:07:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49219#issuecomment-1632042381"
      },
      {
        "id": "IC_kwDOAQzde85hXg0E",
        "parentId": null,
        "author": "okipol88",
        "content": "@mitchdenny Yes you can. That also means different people will implement their infer / state sync in a potentially different way. \r\nWhy not have this connection state changed event? Alternatively Connecting, Connected, Disconnected/Closed. Adding info about initial or subsequent or event a retry count to the event should cover the scenarios.",
        "createdAt": "2023-07-13T05:07:23Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49219#issuecomment-1633553668"
      },
      {
        "id": "IC_kwDOAQzde85iKvaW",
        "parentId": null,
        "author": "mitchdenny",
        "content": "Any further input @halter73 or @BrennanConroy? @okipol88 pending feedback from the rest of the team I am going to put this on the backlog. I see this as been a potentially useful change but I want to make sure that there wasn\u0027t some reason it was removed given the feature used to be in older versions of SignalR.",
        "createdAt": "2023-07-23T23:02:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49219#issuecomment-1646982806"
      },
      {
        "id": "IC_kwDOAQzde85iKvbb",
        "parentId": null,
        "author": "??",
        "content": "We\u0027ve moved this issue to the Backlog milestone. This means that it is not going to be worked on for the coming release. We will reassess the backlog following the current release and consider this item at that time. To learn more about our issue management process and to have better expectation regarding different types of issues you can read our [Triage Process](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-07-23T23:02:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49219#issuecomment-1646982875"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85rUYB5",
    "title": "Improve SignalR hubs and client debugging",
    "url": "https://github.com/dotnet/aspnetcore/issues/49354",
    "createdAt": "2023-07-12T08:54:32Z",
    "lastUpdated": "2024-02-13T01:30:42Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWork is happening to improve debugging in ASP.NET Core. For example, \u0060HttpContext\u0060 and friends has been improved, and [MVC has been improved](https://github.com/dotnet/aspnetcore/pull/49353).\n\n### Describe the solution you\u0027d like\n\nWork should be put into improving SignalR hubs and the .NET SignalR client debugging.\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85rtnqh",
    "title": "Allow overriding SignalR\u0027s Redis backplane channel\u0027s prefix instead of relying on hub class\u0027 name",
    "url": "https://github.com/dotnet/aspnetcore/issues/49457",
    "createdAt": "2023-07-17T07:00:40Z",
    "lastUpdated": "2024-02-13T01:30:07Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am using SignalR infrastructure with Redis backplane. Since projects are part of the same solution, the most efficient way (code-wise) is to have the specific hub\u0027s class implementation shared between the various components. The problem is that this class has to contain certain implementation or reference(s) to other components within the solution, which aren\u0027t needed or can\u0027t be shared with all hub\u0027s using parties. That leads to the necessity to copy\u0026paste the hub class\u0027 definition on multiple projects within the solution, under the same namespace. That leads to compile-time warnings as the (hub) class defined on one project overlaps with the (hub) class on another one. \n\n### Describe the solution you\u0027d like\n\nOne way to deal with the problem is to modify this part:\r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/240377059ec25b4d9d86d4188a26722e55edc5a1/src/SignalR/server/StackExchangeRedis/src/RedisHubLifetimeManager.cs#L74\r\n\r\nInstead of always using the hub class\u0027 FullName to form the Redis prefix for the channel, to have a way to override it via options. This would allow different Hub classes (containing their specific implementation needs) to communicate without the need of class name overlapping.\n\n### Additional context\n\nI\u0027ll try to be more precise about my actual issue. I need to use the hub to interface a front-end application (Angular based). Some activities that are started via the front-end (through a hub class that\u0027s part of an ASP Core web application) are completed on back-end instances. Those back-end instances must have a way to notify the caller or broadcast the result of the back-end handled operation to interested parties. Therefore I need two quite different hub class implementations - one to be integrated on the web infrastructure, which only knows how to trigger an operation and another one, for the back-end components that have very different dependency requirements to be able to push notifications to the hub-connected clients. I had already achieved it by using the same hub class name and suppressed the compile time CS0436 warnings, but that seems flimsy.",
    "upvotes": 1,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde85tNJqg",
    "title": "SignalR-Client-Cpp will not compile with gcc 13",
    "url": "https://github.com/dotnet/aspnetcore/issues/49784",
    "createdAt": "2023-08-01T23:23:11Z",
    "lastUpdated": "2024-08-28T19:47:56Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhen using gcc 13 compiler, the compiler finds fault with 2 files and stops compilation. The errors are because the newer compiler appears to be stricter about checking #include dependencies.\r\n\r\n\r\n### Expected Behavior\r\n\r\nThe library should build when using gcc 13.\r\n\r\nA forked version with specified changes is available at https://github.com/mprather/SignalR-Client-Cpp-gcc-13-fix for review.  I manually tested these changes and was able to build the library.\r\n\r\n### Steps To Reproduce\r\nEnsure that gcc 13 is installed and set as the default version. This way when vcpkg is called, it will use the correct compiler version.\r\n\r\n1. Call \u0060vcpkg install microsoft-signalr\u0060.\r\n2. Compilation will break due to 2 issues.\r\n    1. In cancellation_token_source.h, an include to \u003Cstring\u003E is needed b/c std::string is used on line 40.\r\n    2. In signalr_value.h, an include to \u003Ccstdint\u003E is needed as it appears it is no longer automatically included as a result of using cstddef.\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde8583bA0",
        "parentId": null,
        "author": "mprather",
        "content": "Can signalr-cppp team tag the repo and update the vcpkg release? The current vcpkg release has been broken for over 10 months on distros like Alpine and Arch, which use newer compilers. The fix was accepted last Aug and it\u0027s literally unused.",
        "createdAt": "2024-05-05T18:23:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49784#issuecomment-2094903348"
      },
      {
        "id": "IC_kwDOAQzde86KDVHL",
        "parentId": null,
        "author": "mprather",
        "content": "Update for the curious. As of Aug 28, 2024, this still has not been officially incorporated within a tagged release. However, the vcpkg team has gone ahead included the commit that contains this fix as a port update. The fix is now available in vcpkg release 2024.08.23.",
        "createdAt": "2024-08-28T19:47:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/49784#issuecomment-2316128715"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85upzjO",
    "title": "Quarantine LongPollingUsesHttp2ByDefault",
    "url": "https://github.com/dotnet/aspnetcore/issues/50180",
    "createdAt": "2023-08-18T10:09:04Z",
    "lastUpdated": "2024-02-13T01:26:46Z",
    "body": "\u003C!--\r\nNote this issue template is specifically for failing tests within the dotnet/aspnetcore repo.\r\n--\u003E\r\n\r\n## Failing Test(s)\r\n\r\n\u003C!--\r\nProvide the fully qualified name(s) of the failing tests.\r\n--\u003E\r\n\r\nMicrosoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.LongPollingUsesHttp2ByDefault\r\n\r\nThis seems to have been failing a couple of times per day in the last week.\r\n\r\n## Error Message\r\n\r\n\u003C!--\r\nProvide the error message associated with the test failure, if applicable.\r\n--\u003E\r\n\r\n\u0060\u0060\u0060text\r\nAssert.Contains() Failure\r\nNot found: (filter expression)\r\nIn value:  ConcurrentQueue\u003CWriteContext\u003E [Information Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer: Starting test server..., Debug Microsoft.Extensions.Hosting.Internal.Host: Hosting starting, Debug Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver: Repository contains no viable default key. Caller should generate a key with immediate activation., Debug Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider: Policy resolution states that a new key should be added to the key ring., Information Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager: Creating key {a5c380c2-dc5d-40e8-bae9-90f566dbd955} with creation date 2023-08-17 21:42:00Z, activation date 2023-08-17 21:42:00Z, and expiration date 2023-11-15 21:42:00Z., ...]\r\n\u0060\u0060\u0060\r\n\r\n## Stacktrace\r\n\r\n\u003Cdetails\u003E\r\n\u003C!--\r\nProvide the stack trace associated with the test failure, if applicable.\r\n--\u003E\r\n\r\n\u0060\u0060\u0060text\r\nat Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.LongPollingUsesHttp2ByDefault() in /_/src/SignalR/clients/csharp/Client/test/FunctionalTests/HubConnectionTests.cs:line 2402\r\n--- End of stack trace from previous location ---\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n\r\n## Logs\r\n\r\n\u003Cdetails\u003E\r\n\u003C!--\r\nIf this is a Helix test failure, include the text of the .log artifact from the failing test.\r\nNote that you have to be signed in to Azure DevOps to see the test artifacts.\r\n--\u003E\r\n\r\n\u0060\u0060\u0060text\r\n[0.002s] [TestLifetime] [Information] Starting test LongPollingUsesHttp2ByDefault at 2023-08-17T21:42:00\r\n[0.004s] [Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer] [Information] Starting test server...\r\n[0.004s] [Microsoft.Extensions.Hosting.Internal.Host] [Debug] Hosting starting\r\n[0.005s] [Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver] [Debug] Repository contains no viable default key. Caller should generate a key with immediate activation.\r\n[0.005s] [Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider] [Debug] Policy resolution states that a new key should be added to the key ring.\r\n[0.005s] [Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager] [Information] Creating key {a5c380c2-dc5d-40e8-bae9-90f566dbd955} with creation date 2023-08-17 21:42:00Z, activation date 2023-08-17 21:42:00Z, and expiration date 2023-11-15 21:42:00Z.\r\n[0.005s] [Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager] [Debug] Descriptor deserializer type for key {a5c380c2-dc5d-40e8-bae9-90f566dbd955} is \u0027Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\u0027.\r\n[0.005s] [Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager] [Debug] No key escrow sink found. Not writing key {a5c380c2-dc5d-40e8-bae9-90f566dbd955} to escrow.\r\n[0.005s] [Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager] [Warning] No XML encryptor configured. Key {a5c380c2-dc5d-40e8-bae9-90f566dbd955} may be persisted to storage in unencrypted form.\r\n[0.005s] [Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager] [Debug] Key cache expiration token triggered by \u0027CreateNewKey\u0027 operation.\r\n[0.005s] [Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager] [Debug] Found key {a5c380c2-dc5d-40e8-bae9-90f566dbd955}.\r\n[0.005s] [Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver] [Debug] Considering key {a5c380c2-dc5d-40e8-bae9-90f566dbd955} with expiration date 2023-11-15 21:42:00Z as default key.\r\n[0.005s] [Microsoft.AspNetCore.DataProtection.TypeForwardingActivator] [Debug] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[0.005s] [Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ManagedAuthenticatedEncryptorFactory] [Debug] Using managed symmetric algorithm \u0027System.Security.Cryptography.Aes\u0027.\r\n[0.005s] [Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ManagedAuthenticatedEncryptorFactory] [Debug] Using managed keyed hash algorithm \u0027System.Security.Cryptography.HMACSHA256\u0027.\r\n[0.005s] [Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider] [Debug] Using key {a5c380c2-dc5d-40e8-bae9-90f566dbd955} as the default key.\r\n[0.005s] [Microsoft.AspNetCore.DataProtection.Internal.DataProtectionHostedService] [Debug] Key ring with default key {a5c380c2-dc5d-40e8-bae9-90f566dbd955} was loaded during application startup.\r\n[0.006s] [Microsoft.AspNetCore.SignalR.Internal.DefaultHubProtocolResolver] [Debug] Registered SignalR Protocol: json, implemented by Microsoft.AspNetCore.SignalR.Protocol.JsonHubProtocol.\r\n[0.006s] [Microsoft.AspNetCore.SignalR.Internal.DefaultHubProtocolResolver] [Debug] Registered SignalR Protocol: messagepack, implemented by Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocol.\r\n[0.030s] [Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware] [Information] Certificate with thumbprint 470543E0FC19F3D4355457A8C22E78919EA9AA66 lacks the subjectAlternativeName (SAN) extension and may not be accepted by browsers.\r\n[0.030s] [Microsoft.Hosting.Lifetime] [Information] Now listening on: https://127.0.0.1:36973\r\n[0.030s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Debug] Loaded hosting startup assembly Microsoft.AspNetCore.SignalR.Client.FunctionalTests\r\n[0.030s] [Microsoft.Hosting.Lifetime] [Information] Application started. Press Ctrl\u002BC to shut down.\r\n[0.030s] [Microsoft.Hosting.Lifetime] [Information] Hosting environment: Production\r\n[0.030s] [Microsoft.Hosting.Lifetime] [Information] Content root path: /datadisks/disk1/work/A83B091C/w/C86E0AEA/e\r\n[0.030s] [Microsoft.Extensions.Hosting.Internal.Host] [Debug] Hosting started\r\n[0.030s] [Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer] [Information] Test Server started\r\n[0.031s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Starting HubConnection.\r\n[0.031s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Starting HttpConnection.\r\n[0.031s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Establishing connection with server at \u0027https://127.0.0.1:36973/default\u0027.\r\n[0.031s] [Microsoft.AspNetCore.Server.Kestrel.Connections] [Debug] Connection id \u00220HMSVDAK4MDE1\u0022 accepted.\r\n[0.032s] [Microsoft.AspNetCore.Server.Kestrel.Connections] [Debug] Connection id \u00220HMSVDAK4MDE1\u0022 started.\r\n[0.034s] [Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware] [Debug] Connection 0HMSVDAK4MDE1 established using the following protocol: Tls13\r\n[0.035s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request starting HTTP/2 POST https://127.0.0.1:36973/default/negotiate?negotiateVersion=1 - - 0\r\n[0.036s] [Microsoft.AspNetCore.Routing.Matching.DfaMatcher] [Debug] 1 candidate(s) found for the request path \u0027/default/negotiate\u0027\r\n[0.036s] [Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware] [Debug] Request matched endpoint \u0027/default/negotiate\u0027\r\n[0.036s] [Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler] [Debug] AuthenticationScheme: Bearer was not authenticated.\r\n[0.036s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executing endpoint \u0027/default/negotiate\u0027\r\n[0.036s] [Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager] [Debug] New connection 5_xfEPKDRsQ8Upgv4TgmuQ created.\r\n[0.036s] [Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Sending negotiation response.\r\n[0.036s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executed endpoint \u0027/default/negotiate\u0027\r\n[0.036s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request finished HTTP/2 POST https://127.0.0.1:36973/default/negotiate?negotiateVersion=1 - 200 316 application/json 1.4037ms\r\n[0.037s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Established connection \u00275_xfEPKDRsQ8Upgv4TgmuQ\u0027 with the server.\r\n[0.037s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Skipping transport WebSockets because it was disabled by the client.\r\n[0.037s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Skipping transport ServerSentEvents because it was disabled by the client.\r\n[0.037s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Starting transport \u0027LongPolling\u0027 with Url: https://127.0.0.1:36973/default.\r\n[0.037s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Information] Starting transport. Transfer mode: Text.\r\n[0.037s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request starting HTTP/2 GET https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - - -\r\n[0.038s] [Microsoft.AspNetCore.Routing.Matching.DfaMatcher] [Debug] 1 candidate(s) found for the request path \u0027/default\u0027\r\n[0.039s] [Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware] [Debug] Request matched endpoint \u0027/default\u0027\r\n[0.039s] [Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler] [Debug] AuthenticationScheme: Bearer was not authenticated.\r\n[0.039s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executing endpoint \u0027/default\u0027\r\n[0.039s] [Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Establishing new connection.\r\n[0.039s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executed endpoint \u0027/default\u0027\r\n[0.039s] [Microsoft.AspNetCore.SignalR.HubConnectionHandler] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - OnConnectedAsync started.\r\n[0.039s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request finished HTTP/2 GET https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - 200 0 application/octet-stream 1.8908ms\r\n[0.039s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Starting receive loop.\r\n[0.039s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Starting the send loop.\r\n[0.039s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Transport \u0027LongPolling\u0027 started.\r\n[0.039s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Information] HttpConnection Started.\r\n[0.039s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Information] Using HubProtocol \u0027json v1\u0027.\r\n[0.039s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending Hub Handshake.\r\n[0.039s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Sending 32 bytes to the server using url: https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw.\r\n[0.039s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request starting HTTP/2 GET https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - - -\r\n[0.040s] [Microsoft.AspNetCore.Routing.Matching.DfaMatcher] [Debug] 1 candidate(s) found for the request path \u0027/default\u0027\r\n[0.040s] [Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware] [Debug] Request matched endpoint \u0027/default\u0027\r\n[0.040s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request starting HTTP/2 POST https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - - 32\r\n[0.040s] [Microsoft.AspNetCore.Routing.Matching.DfaMatcher] [Debug] 1 candidate(s) found for the request path \u0027/default\u0027\r\n[0.040s] [Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware] [Debug] Request matched endpoint \u0027/default\u0027\r\n[0.042s] [Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler] [Debug] AuthenticationScheme: Bearer was not authenticated.\r\n[0.042s] [Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler] [Debug] AuthenticationScheme: Bearer was not authenticated.\r\n[0.042s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executing endpoint \u0027/default\u0027\r\n[0.042s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Connection id \u00220HMSVDAK4MDE1\u0022, Request id \u00220HMSVDAK4MDE1:00000007\u0022: started reading request body.\r\n[0.042s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Connection id \u00220HMSVDAK4MDE1\u0022, Request id \u00220HMSVDAK4MDE1:00000007\u0022: done reading request body.\r\n[0.042s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executed endpoint \u0027/default\u0027\r\n[0.042s] [Microsoft.AspNetCore.SignalR.Internal.DefaultHubProtocolResolver] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Found protocol implementation for requested protocol: json.\r\n[0.042s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request finished HTTP/2 POST https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - 200 0 text/plain 2.0238ms\r\n[0.042s] [Microsoft.AspNetCore.SignalR.HubConnectionContext] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Completed connection handshake. Using HubProtocol \u0027json\u0027.\r\n[0.042s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Message(s) sent successfully.\r\n[0.042s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executing endpoint \u0027/default\u0027\r\n[0.042s] [Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Resuming existing connection.\r\n[0.042s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executed endpoint \u0027/default\u0027\r\n[0.042s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request finished HTTP/2 GET https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - 200 3 application/octet-stream 2.7948ms\r\n[0.042s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Received messages from the server.\r\n[0.042s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Handshake with server complete.\r\n[0.042s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Receive loop starting.\r\n[0.043s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Information] HubConnection started.\r\n[0.043s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request starting HTTP/2 GET https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - - -\r\n[0.043s] [Microsoft.AspNetCore.Routing.Matching.DfaMatcher] [Debug] 1 candidate(s) found for the request path \u0027/default\u0027\r\n[0.043s] [Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware] [Debug] Request matched endpoint \u0027/default\u0027\r\n[0.043s] [Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler] [Debug] AuthenticationScheme: Bearer was not authenticated.\r\n[0.043s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executing endpoint \u0027/default\u0027\r\n[0.043s] [Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Resuming existing connection.\r\n[0.047s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Registering Invocation ID \u00271\u0027 for tracking.\r\n[0.047s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending InvocationMessage message \u00271\u0027.\r\n[0.047s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending InvocationMessage message \u00271\u0027 completed.\r\n[0.047s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Sending 72 bytes to the server using url: https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw.\r\n[0.048s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request starting HTTP/2 POST https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - - 72\r\n[0.048s] [Microsoft.AspNetCore.Routing.Matching.DfaMatcher] [Debug] 1 candidate(s) found for the request path \u0027/default\u0027\r\n[0.048s] [Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware] [Debug] Request matched endpoint \u0027/default\u0027\r\n[0.048s] [Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler] [Debug] AuthenticationScheme: Bearer was not authenticated.\r\n[0.048s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executing endpoint \u0027/default\u0027\r\n[0.048s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Connection id \u00220HMSVDAK4MDE1\u0022, Request id \u00220HMSVDAK4MDE1:0000000B\u0022: started reading request body.\r\n[0.048s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Connection id \u00220HMSVDAK4MDE1\u0022, Request id \u00220HMSVDAK4MDE1:0000000B\u0022: done reading request body.\r\n[0.048s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executed endpoint \u0027/default\u0027\r\n[0.048s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request finished HTTP/2 POST https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - 200 0 text/plain 0.3202ms\r\n[0.048s] [Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Received hub invocation: InvocationMessage { InvocationId: \u00221\u0022, Target: \u0022GetHttpProtocol\u0022, Arguments: [  ], StreamIds: [  ] }.\r\n[0.048s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executed endpoint \u0027/default\u0027\r\n[0.048s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request finished HTTP/2 GET https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - 200 48 application/octet-stream 5.7692ms\r\n[0.049s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Message(s) sent successfully.\r\n[0.049s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Received messages from the server.\r\n[0.049s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Processing 48 byte message from server.\r\n[0.049s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending CloseMessage message.\r\n[0.049s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending CloseMessage message completed.\r\n[0.049s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Sending 11 bytes to the server using url: https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw.\r\n[0.049s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Stopping HubConnection.\r\n[0.049s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Terminating receive loop.\r\n[0.049s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Waiting for the receive loop to terminate.\r\n[0.049s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Disposing HttpConnection.\r\n[0.049s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Information] Transport is stopping.\r\n[0.049s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request starting HTTP/2 GET https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - - -\r\n[0.049s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request starting HTTP/2 POST https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - - 11\r\n[0.049s] [Microsoft.AspNetCore.Routing.Matching.DfaMatcher] [Debug] 1 candidate(s) found for the request path \u0027/default\u0027\r\n[0.049s] [Microsoft.AspNetCore.Routing.Matching.DfaMatcher] [Debug] 1 candidate(s) found for the request path \u0027/default\u0027\r\n[0.049s] [Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware] [Debug] Request matched endpoint \u0027/default\u0027\r\n[0.049s] [Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware] [Debug] Request matched endpoint \u0027/default\u0027\r\n[0.049s] [Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler] [Debug] AuthenticationScheme: Bearer was not authenticated.\r\n[0.049s] [Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler] [Debug] AuthenticationScheme: Bearer was not authenticated.\r\n[0.049s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executing endpoint \u0027/default\u0027\r\n[0.049s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executing endpoint \u0027/default\u0027\r\n[0.049s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Connection id \u00220HMSVDAK4MDE1\u0022, Request id \u00220HMSVDAK4MDE1:0000000F\u0022: started reading request body.\r\n[0.049s] [Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Resuming existing connection.\r\n[0.049s] [Microsoft.AspNetCore.Server.Kestrel] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Connection id \u00220HMSVDAK4MDE1\u0022, Request id \u00220HMSVDAK4MDE1:0000000F\u0022: done reading request body.\r\n[0.050s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executed endpoint \u0027/default\u0027\r\n[0.050s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request finished HTTP/2 GET https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - 200 11 application/octet-stream 0.3792ms\r\n[0.050s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Received messages from the server.\r\n[0.050s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request starting HTTP/2 GET https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - - -\r\n[0.050s] [Microsoft.AspNetCore.Routing.Matching.DfaMatcher] [Debug] 1 candidate(s) found for the request path \u0027/default\u0027\r\n[0.050s] [Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware] [Debug] Request matched endpoint \u0027/default\u0027\r\n[0.050s] [Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler] [Debug] AuthenticationScheme: Bearer was not authenticated.\r\n[0.050s] [Microsoft.AspNetCore.SignalR.HubConnectionHandler] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - OnConnectedAsync ending.\r\n[0.050s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executing endpoint \u0027/default\u0027\r\n[0.050s] [Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Resuming existing connection.\r\n[0.050s] [Microsoft.AspNetCore.Http.Connections.Internal.Transports.LongPollingTransport] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Terminating Long Polling connection by sending 204 response.\r\n[0.050s] [Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager] [Debug] 5_xfEPKDRsQ8Upgv4TgmuQ - Removing connection atqf0rAc6TlVMPV-oRFWpw from the list of connections.\r\n[0.050s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executed endpoint \u0027/default\u0027\r\n[0.050s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request finished HTTP/2 GET https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - 204 - text/plain 0.3244ms\r\n[0.051s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] The server is closing the connection.\r\n[0.051s] [Microsoft.AspNetCore.Routing.EndpointMiddleware] [Information] Executed endpoint \u0027/default\u0027\r\n[0.051s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Receive loop stopped.\r\n[0.051s] [Microsoft.AspNetCore.Hosting.Diagnostics] [Information] Request finished HTTP/2 POST https://127.0.0.1:36973/default?id=atqf0rAc6TlVMPV-oRFWpw - 200 0 text/plain 1.3198ms\r\n[0.051s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Message(s) sent successfully.\r\n[0.051s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Send loop canceled.\r\n[0.051s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Send loop stopped.\r\n[0.051s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Transport stopped.\r\n[0.051s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Information] HttpConnection Disposed.\r\n[0.051s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Canceling all outstanding invocations.\r\n[0.051s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] HubConnection stopped.\r\n[0.051s] [Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer] [Information] Start shutting down test server\r\n[0.051s] [Microsoft.Extensions.Hosting.Internal.Host] [Debug] Hosting stopping\r\n[0.051s] [Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets] [Debug] Connection id \u00220HMSVDAK4MDE1\u0022 received FIN.\r\n[0.051s] [Microsoft.AspNetCore.Server.Kestrel.Http2] [Debug] Connection id \u00220HMSVDAK4MDE1\u0022 is closed. The last processed stream ID was 17.\r\n[0.051s] [Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets] [Debug] Connection id \u00220HMSVDAK4MDE1\u0022 sending FIN because: \u0022The Socket transport\u0027s send loop completed gracefully.\u0022\r\n[0.051s] [Microsoft.AspNetCore.Server.Kestrel.Http2] [Debug] The connection queue processing loop for 0HMSVDAK4MDE1 completed.\r\n[0.052s] [Microsoft.AspNetCore.Server.Kestrel.Connections] [Debug] Connection id \u00220HMSVDAK4MDE1\u0022 stopped.\r\n[0.053s] [Microsoft.Hosting.Lifetime] [Information] Application is shutting down...\r\n[0.053s] [Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer] [Information] Test server shut down\r\n[0.053s] [Microsoft.Extensions.Hosting.Internal.Host] [Debug] Hosting stopped\r\n[0.057s] [Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests] [Error] Test threw an exception.\r\nXunit.Sdk.ContainsException: Assert.Contains() Failure\r\nNot found: (filter expression)\r\nIn value:  ConcurrentQueue\u003CWriteContext\u003E [Information Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer: Starting test server..., Debug Microsoft.Extensions.Hosting.Internal.Host: Hosting starting, Debug Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver: Repository contains no viable default key. Caller should generate a key with immediate activation., Debug Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider: Policy resolution states that a new key should be added to the key ring., Information Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager: Creating key {a5c380c2-dc5d-40e8-bae9-90f566dbd955} with creation date 2023-08-17 21:42:00Z, activation date 2023-08-17 21:42:00Z, and expiration date 2023-11-15 21:42:00Z., ...]\r\n   at Xunit.Assert.Contains[T](IEnumerable\u00601 collection, Predicate\u00601 filter) in /_/src/xunit.assert/Asserts/CollectionAsserts.cs:line 264\r\n   at Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.LongPollingUsesHttp2ByDefault() in /_/src/SignalR/clients/csharp/Client/test/FunctionalTests/HubConnectionTests.cs:line 2402\r\n   at Xunit.Sdk.TestInvoker\u00601.\u003C\u003Ec__DisplayClass48_0.\u003C\u003CInvokeTestMethodAsync\u003Eb__1\u003Ed.MoveNext() in /_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs:line 264\r\n--- End of stack trace from previous location ---\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func\u00601 asyncAction) in /_/src/xunit.execution/Sdk/Frameworks/ExecutionTimer.cs:line 48\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(Func\u00601 code) in /_/src/xunit.core/Sdk/ExceptionAggregator.cs:line 90\r\n[0.057s] [TestLifetime] [Information] Finished test LongPollingUsesHttp2ByDefault in 0.0548184s\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n## Build\r\n\r\n\u003C!--\r\nProvide a link to the build where the test failure occurred.\r\n--\u003E\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=377933",
    "upvotes": 0,
    "labels": [
      "test-failure",
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85kYj8K",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Dupe of https://github.com/dotnet/aspnetcore/issues/49966 but I\u0027ll close that one.\r\n\r\nIn the future please include logs. AzDo builds disappear after ~2 weeks so we lose the logs.",
        "createdAt": "2023-08-18T16:31:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50180#issuecomment-1684160266"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85xD8B7",
    "title": "Covariant THub-Parameter for IHubContext",
    "url": "https://github.com/dotnet/aspnetcore/issues/50705",
    "createdAt": "2023-09-14T15:48:45Z",
    "lastUpdated": "2024-05-13T09:00:32Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nRight now, the THub-Paramter of [IHubContext\u003CTHub, T\u003E](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/server/Core/src/IHubContext%60T.cs) isn\u0027t covariant what makes the following cast invalid:\r\n\r\n\u0060\u0060\u0060\r\nIHubContext\u003CConcreteHub, IHubClient\u003E? concrete = null;\r\nIHubContext\u003CHub\u003CIHubClient\u003E, IHubClient\u003E? loose = null;\r\n\r\nloose = concrete;\r\n\u0060\u0060\u0060\r\n\r\nI need this because I\u0027d like to redirect the HubContext to my concrete\u0027s hub context without needing to know the concrete type for consumers:\r\n\r\n\r\n\u0060serviceCollection.AddSingleton\u003CIHubContext\u003CHub\u003CIHubClient\u003E, IHubClient\u003E\u003E(sp =\u003E sp.GetRequiredService\u003CIHubContext\u003CConcreteHub, IHubClient\u003E\u003E());\u0060\r\n\r\nThis also maybe is a bit related to https://github.com/dotnet/aspnetcore/issues/41538? Is there a reason for not making it covariant? A soon fix would be awesome.\n\n### Describe the solution you\u0027d like\n\nQuite easy:  \u0060public interface IHubContext\u003Cout THub, T\u003E\u0060\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85mgb5z",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "More related to https://github.com/dotnet/aspnetcore/issues/30167#issuecomment-804253099. We added support for \u0060IHubContext\u003CTHub\u003E\u0060 -\u003E \u0060IHubContext\u0060 as well as making \u0060IHubContext\u003CTHub\u003E\u0060 -\u003E \u0060IHubContext\u003CHub\u003E\u0060 work, but didn\u0027t do the same for \u0060IHubContext\u003CTHub, T\u003E\u0060 since it was a bit more complex and wasn\u0027t being explicitly asked for.",
        "createdAt": "2023-09-14T16:31:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50705#issuecomment-1719778931"
      },
      {
        "id": "IC_kwDOAQzde85mghdY",
        "parentId": null,
        "author": "angelaki",
        "content": "Oh wow, that actually already is a bit older. Any issues with just making it covariant? Guess that\u0027d be the easiest solution?",
        "createdAt": "2023-09-14T16:49:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50705#issuecomment-1719801688"
      },
      {
        "id": "IC_kwDOAQzde85856uz",
        "parentId": null,
        "author": "angelaki",
        "content": "Sorry for pinging, but been a while. Any news on this?",
        "createdAt": "2024-05-06T09:31:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50705#issuecomment-2095557555"
      },
      {
        "id": "IC_kwDOAQzde8589nqN",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "You\u0027re welcome to try it out and open a pull request if it works. We\u0027d likely want a similar test to:\r\nhttps://github.com/dotnet/aspnetcore/blob/da3aa27233a2cec2f6780884f71934b2f5e686ce/src/SignalR/server/SignalR/test/HubConnectionHandlerTests.cs#L4623",
        "createdAt": "2024-05-06T17:13:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50705#issuecomment-2096528013"
      },
      {
        "id": "IC_kwDOAQzde859Meej",
        "parentId": null,
        "author": "angelaki",
        "content": "I\u0027ve created this pretty simple PR right now. Seems right to me, since the not generic version has a covariant parameter, too. But actually no idea what kind of test to implement for it? And ... tbh ... Guess I (or even my machine) won\u0027t make this super huge project build within a day.",
        "createdAt": "2024-05-08T12:02:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50705#issuecomment-2100422563"
      },
      {
        "id": "IC_kwDOAQzde859Okj_",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Basically copy the test in https://github.com/dotnet/aspnetcore/blob/da3aa27233a2cec2f6780884f71934b2f5e686ce/src/SignalR/server/SignalR/test/HubConnectionHandlerTests.cs#L4623 but instead of using \u0060MethodHub\u0060, use \u0060HubT\u0060.\r\n\r\n\u003E Guess I (or even my machine) won\u0027t make this super huge project build within a day.\r\n\r\nYou could try using [CodeSpaces on GitHub](https://github.com/dotnet/aspnetcore/blob/main/docs/BuildFromSource.md#codespaces-on-github) which would build in the cloud.",
        "createdAt": "2024-05-08T16:36:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50705#issuecomment-2100971775"
      },
      {
        "id": "IC_kwDOAQzde859lq1B",
        "parentId": null,
        "author": "angelaki",
        "content": "Don\u0027t get me wrong, I really appreciate your effort helping me running this project. And maybe one day I\u0027ll become a great ASP.Net contributor ;) But Codespace won\u0027t let me choose a machine and I guess you have all that projects up and running? If you could add that requested test, I\u0027d be super thankful :)",
        "createdAt": "2024-05-13T09:00:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50705#issuecomment-2107026753"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85xR04P",
    "title": "Lack of SignalR typescript client release notes",
    "url": "https://github.com/dotnet/aspnetcore/issues/50772",
    "createdAt": "2023-09-18T09:10:46Z",
    "lastUpdated": "2024-02-13T01:24:00Z",
    "body": "I\u0027m unable to find any kind of release notes for the TS library of SignalR. There\u0027s not even a readme here:\r\nhttps://github.com/dotnet/aspnetcore/tree/main/src/SignalR/clients/ts\r\n\r\nAnd no links to changelogs here either:\r\nhttps://www.npmjs.com/package/@microsoft/signalr\r\n\r\nI can see the versions numbers go up... no idea what has changed.\r\n",
    "upvotes": 13,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85o7FRI",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E There\u0027s not even a readme here:\r\n\u003E https://github.com/dotnet/aspnetcore/tree/main/src/SignalR/clients/ts\r\n\r\nWell the readme would be in the individual projects, so:\r\nhttps://github.com/dotnet/aspnetcore/tree/main/src/SignalR/clients/ts/signalr\r\nBut I could see it being useful to include a readme in the clients/ts/ folder just to give some info about the folder structure and what is there.\r\n\r\n\u003E I\u0027m unable to find any kind of release notes for the TS library of SignalR\r\n\r\nBecause we\u0027re a large repo that contains a lot more than just the TS library for SignalR there is no easy way to generate (and provide) release notes. Github also doesn\u0027t support diffing between versions for a specific directory. The closest you could get is manually looking at the commits from two releases.\r\ne.g. https://github.com/dotnet/aspnetcore/commits/release/7.0/src/SignalR/clients/ts/signalr and https://github.com/dotnet/aspnetcore/commits/release/8.0/src/SignalR/clients/ts/signalr\r\nLooks like there were ~13 commits to the @microsoft/signalr project between 7.0 and 8.0",
        "createdAt": "2023-10-12T20:25:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50772#issuecomment-1760318536"
      },
      {
        "id": "IC_kwDOAQzde85sAntA",
        "parentId": null,
        "author": "rallets",
        "content": "Hi I agree with @alex-airbox, @BrennanConroy  ! I would like to update a typescript client app and I struggled to find some info about what is changed between 7 and 8... Breaking changes? It\u0027s safe to upgrade? What is the migration process? What should I test? and so on. Very very bad DX. It\u0027s a standard for each npm package to point to a changelog/release note. If you want JavaScript/typescript to embrace signalr this is a minimum level of info to provide. I cannot spend hours every time I need to upgrade, not only for major versions, but also for bug fix and minor changes. I expect a little bit more from Microsoft to be honest. \r\nOr is signalr been deprecated and we need to look to something else? Because the message you send out is exactly this: **we don\u0027t have time to support this package**.",
        "createdAt": "2023-11-15T09:34:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50772#issuecomment-1812101952"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85xiN2X",
    "title": "When using Microsoft.AspNetCore.SignalR.Client with the .NET framework with a transport of Server Sent Events (SSE) stopping a connection takes a long time",
    "url": "https://github.com/dotnet/aspnetcore/issues/50839",
    "createdAt": "2023-09-20T11:34:10Z",
    "lastUpdated": "2024-02-13T01:23:43Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nUsing Microsoft.AspNetCore.SignalR.Client with the .NET framework and setting the transport to Server Sent Events (SSE) takes a long time to stop a connection (~10 seconds).\r\n\r\nThis seems to occur from 5.* versions of the library onwards.\r\nI don\u0027t get this behaviour with other transports or if I use a .NET 6 or 7 client.\n\n### Expected Behavior\n\nStopping an SSE connection should take a similar amount of time to stopping a web sockets or long polling connection.\n\n### Steps To Reproduce\n\nMinimal example given here using .NET 6 for the server and .NET Framework 4.7.2 for the client:\r\nhttps://github.com/gklittlejohn/signalrserversentevents\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.400\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85nAIcl",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E This seems to occur from 5.* versions of the library onwards.\r\nI don\u0027t get this behaviour with other transports or if I use a .NET 6 or 7 client.\r\n\r\nCould you explain this? What exact versions work and don\u0027t work? How can 5.x\u002B not work but 6 and 7 do?",
        "createdAt": "2023-09-20T16:36:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50839#issuecomment-1728087845"
      },
      {
        "id": "IC_kwDOAQzde85nAQPw",
        "parentId": null,
        "author": "gklittlejohn",
        "content": "This is a summary of what I have tested:\r\n\r\n|  Target Framework |   Microsoft.AspNetCore.SignalR.Client Version |  SSE issue present |\r\n|---|---|---|\r\n| net472  |  3.1.3.2 (and below) |  No |\r\n| net472 |  5.0.0 to 7.0.11 |  Yes |\r\n| net481 |  7.0.11 |  Yes |\r\n| net6.0  |  7.0.11 |  No |\r\n|  net7.0 |  7.0.11 | No   |\r\n\r\nTo summarise the Microsoft.AspNetCore.SignalR.Client library (for versions 5.0.0 to 7.0.11) being used by an application targeting the .NET Framework exhibits this issue (for connections using SSE, await connection.StopAsync(); takes a long time to complete.).",
        "createdAt": "2023-09-20T17:00:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50839#issuecomment-1728119792"
      },
      {
        "id": "IC_kwDOAQzde85nAS1U",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Ah, this sounds very similar to https://github.com/dotnet/aspnetcore/issues/32900\r\nThe fix was to add a binding redirect for System.Buffers like described in https://github.com/dotnet/runtime/issues/38782#issuecomment-659550567\r\n\r\nIf that doesn\u0027t work for you, could you share trace levels logs from the client?\r\nhttps://learn.microsoft.com/aspnet/core/signalr/diagnostics?view=aspnetcore-7.0#net-client-logging",
        "createdAt": "2023-09-20T17:08:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50839#issuecomment-1728130388"
      },
      {
        "id": "IC_kwDOAQzde85nAkPb",
        "parentId": null,
        "author": "gklittlejohn",
        "content": "I\u0027m not sure it\u0027s #32900, it is already generating binding redirects and if I add them manually it doesn\u0027t seem to make a difference.\r\n\r\nHere are the logs, note the 16 second gap between messages.\r\n\r\n\u0060\u0060\u0060json\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:42,\u0022LogLevel\u0022:\u0022Trace\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Waiting on Connection Lock in StartAsyncInner (/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs:247).\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Waiting on Connection Lock in StartAsyncInner (/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs:247).\u0022,\u0022MethodName\u0022:\u0022StartAsyncInner\u0022,\u0022FilePath\u0022:\u0022/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs\u0022,\u0022LineNumber\u0022:247,\u0022{OriginalFormat}\u0022:\u0022Waiting on Connection Lock in {MethodName} ({FilePath}:{LineNumber}).\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:80,\u0022LogLevel\u0022:\u0022Trace\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022The HubConnection is attempting to transition from the Disconnected state to the Connecting state.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022The HubConnection is attempting to transition from the Disconnected state to the Connecting state.\u0022,\u0022ExpectedState\u0022:\u0022Disconnected\u0022,\u0022NewState\u0022:\u0022Connecting\u0022,\u0022{OriginalFormat}\u0022:\u0022The HubConnection is attempting to transition from the {ExpectedState} state to the {NewState} state.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:41,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Starting HubConnection.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Starting HubConnection.\u0022,\u0022{OriginalFormat}\u0022:\u0022Starting HubConnection.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:1,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.HttpConnection\u0022,\u0022Message\u0022:\u0022Starting HttpConnection.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Starting HttpConnection.\u0022,\u0022{OriginalFormat}\u0022:\u0022Starting HttpConnection.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:8,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.HttpConnection\u0022,\u0022Message\u0022:\u0022Establishing connection with server at \\u0027https://localhost:7255/chatHub\\u0027.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Establishing connection with server at \\u0027https://localhost:7255/chatHub\\u0027.\u0022,\u0022Url\u0022:\u0022https://localhost:7255/chatHub\u0022,\u0022{OriginalFormat}\u0022:\u0022Establishing connection with server at \\u0027{Url}\\u0027.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:1,\u0022LogLevel\u0022:\u0022Trace\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.LoggingHttpMessageHandler\u0022,\u0022Message\u0022:\u0022Sending HTTP request POST \\u0027https://localhost:7255/chatHub/negotiate?negotiateVersion=1\\u0027.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Sending HTTP request POST \\u0027https://localhost:7255/chatHub/negotiate?negotiateVersion=1\\u0027.\u0022,\u0022RequestMethod\u0022:\u0022POST\u0022,\u0022RequestUrl\u0022:\u0022https://localhost:7255/chatHub/negotiate?negotiateVersion=1\u0022,\u0022{OriginalFormat}\u0022:\u0022Sending HTTP request {RequestMethod} \\u0027{RequestUrl}\\u0027.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:9,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.HttpConnection\u0022,\u0022Message\u0022:\u0022Established connection \\u0027wktAK5J_LxzGN7uFXkUN-A\\u0027 with the server.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Established connection \\u0027wktAK5J_LxzGN7uFXkUN-A\\u0027 with the server.\u0022,\u0022ConnectionId\u0022:\u0022wktAK5J_LxzGN7uFXkUN-A\u0022,\u0022{OriginalFormat}\u0022:\u0022Established connection \\u0027{ConnectionId}\\u0027 with the server.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:14,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.HttpConnection\u0022,\u0022Message\u0022:\u0022Skipping transport WebSockets because it was disabled by the client.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Skipping transport WebSockets because it was disabled by the client.\u0022,\u0022TransportName\u0022:\u0022WebSockets\u0022,\u0022{OriginalFormat}\u0022:\u0022Skipping transport {TransportName} because it was disabled by the client.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:7,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.HttpConnection\u0022,\u0022Message\u0022:\u0022Starting transport \\u0027ServerSentEvents\\u0027 with Url: https://localhost:7255/chatHub.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Starting transport \\u0027ServerSentEvents\\u0027 with Url: https://localhost:7255/chatHub.\u0022,\u0022Transport\u0022:\u0022ServerSentEvents\u0022,\u0022Url\u0022:\u0022https://localhost:7255/chatHub\u0022,\u0022{OriginalFormat}\u0022:\u0022Starting transport \\u0027{Transport}\\u0027 with Url: {Url}.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:1,\u0022LogLevel\u0022:\u0022Information\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Starting transport. Transfer mode: Text.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Starting transport. Transfer mode: Text.\u0022,\u0022TransferFormat\u0022:\u0022Text\u0022,\u0022{OriginalFormat}\u0022:\u0022Starting transport. Transfer mode: {TransferFormat}.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:1,\u0022LogLevel\u0022:\u0022Trace\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.LoggingHttpMessageHandler\u0022,\u0022Message\u0022:\u0022Sending HTTP request GET \\u0027https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA\\u0027.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Sending HTTP request GET \\u0027https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA\\u0027.\u0022,\u0022RequestMethod\u0022:\u0022GET\u0022,\u0022RequestUrl\u0022:\u0022https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA\u0022,\u0022{OriginalFormat}\u0022:\u0022Sending HTTP request {RequestMethod} \\u0027{RequestUrl}\\u0027.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:3,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Starting receive loop.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Starting receive loop.\u0022,\u0022{OriginalFormat}\u0022:\u0022Starting receive loop.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:9,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Received 3 bytes. Parsing SSE frame.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Received 3 bytes. Parsing SSE frame.\u0022,\u0022Count\u0022:3,\u0022{OriginalFormat}\u0022:\u0022Received {Count} bytes. Parsing SSE frame.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:100,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Starting the send loop.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Starting the send loop.\u0022,\u0022{OriginalFormat}\u0022:\u0022Starting the send loop.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:18,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.HttpConnection\u0022,\u0022Message\u0022:\u0022Transport \\u0027ServerSentEvents\\u0027 started.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Transport \\u0027ServerSentEvents\\u0027 started.\u0022,\u0022Transport\u0022:\u0022ServerSentEvents\u0022,\u0022{OriginalFormat}\u0022:\u0022Transport \\u0027{Transport}\\u0027 started.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:3,\u0022LogLevel\u0022:\u0022Information\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.HttpConnection\u0022,\u0022Message\u0022:\u0022HttpConnection Started.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022HttpConnection Started.\u0022,\u0022{OriginalFormat}\u0022:\u0022HttpConnection Started.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:24,\u0022LogLevel\u0022:\u0022Information\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Using HubProtocol \\u0027json v1\\u0027.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Using HubProtocol \\u0027json v1\\u0027.\u0022,\u0022Protocol\u0022:\u0022json\u0022,\u0022Version\u0022:1,\u0022{OriginalFormat}\u0022:\u0022Using HubProtocol \\u0027{Protocol} v{Version}\\u0027.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:28,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Sending Hub Handshake.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Sending Hub Handshake.\u0022,\u0022{OriginalFormat}\u0022:\u0022Sending Hub Handshake.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:103,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Sending 32 bytes to the server using url: https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Sending 32 bytes to the server using url: https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA.\u0022,\u0022Count\u0022:32,\u0022Url\u0022:\u0022https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA\u0022,\u0022{OriginalFormat}\u0022:\u0022Sending {Count} bytes to the server using url: {Url}.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:1,\u0022LogLevel\u0022:\u0022Trace\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.LoggingHttpMessageHandler\u0022,\u0022Message\u0022:\u0022Sending HTTP request POST \\u0027https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA\\u0027.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Sending HTTP request POST \\u0027https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA\\u0027.\u0022,\u0022RequestMethod\u0022:\u0022POST\u0022,\u0022RequestUrl\u0022:\u0022https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA\u0022,\u0022{OriginalFormat}\u0022:\u0022Sending HTTP request {RequestMethod} \\u0027{RequestUrl}\\u0027.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:104,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Message(s) sent successfully.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Message(s) sent successfully.\u0022,\u0022{OriginalFormat}\u0022:\u0022Message(s) sent successfully.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:9,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Received 6 bytes. Parsing SSE frame.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Received 6 bytes. Parsing SSE frame.\u0022,\u0022Count\u0022:6,\u0022{OriginalFormat}\u0022:\u0022Received {Count} bytes. Parsing SSE frame.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:9,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Received 9 bytes. Parsing SSE frame.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Received 9 bytes. Parsing SSE frame.\u0022,\u0022Count\u0022:9,\u0022{OriginalFormat}\u0022:\u0022Received {Count} bytes. Parsing SSE frame.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:9,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Received 11 bytes. Parsing SSE frame.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Received 11 bytes. Parsing SSE frame.\u0022,\u0022Count\u0022:11,\u0022{OriginalFormat}\u0022:\u0022Received {Count} bytes. Parsing SSE frame.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:9,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Received 2 bytes. Parsing SSE frame.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Received 2 bytes. Parsing SSE frame.\u0022,\u0022Count\u0022:2,\u0022{OriginalFormat}\u0022:\u0022Received {Count} bytes. Parsing SSE frame.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:7,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Passing message to application. Payload size: 3.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Passing message to application. Payload size: 3.\u0022,\u0022Count\u0022:3,\u0022{OriginalFormat}\u0022:\u0022Passing message to application. Payload size: {Count}.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:39,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Handshake with server complete.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Handshake with server complete.\u0022,\u0022{OriginalFormat}\u0022:\u0022Handshake with server complete.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:59,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Sending PingMessage message.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Sending PingMessage message.\u0022,\u0022MessageType\u0022:\u0022PingMessage\u0022,\u0022{OriginalFormat}\u0022:\u0022Sending {MessageType} message.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:103,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Sending 11 bytes to the server using url: https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Sending 11 bytes to the server using url: https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA.\u0022,\u0022Count\u0022:11,\u0022Url\u0022:\u0022https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA\u0022,\u0022{OriginalFormat}\u0022:\u0022Sending {Count} bytes to the server using url: {Url}.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:1,\u0022LogLevel\u0022:\u0022Trace\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.LoggingHttpMessageHandler\u0022,\u0022Message\u0022:\u0022Sending HTTP request POST \\u0027https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA\\u0027.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Sending HTTP request POST \\u0027https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA\\u0027.\u0022,\u0022RequestMethod\u0022:\u0022POST\u0022,\u0022RequestUrl\u0022:\u0022https://localhost:7255/chatHub?id=mWzXluoRsVOUgk-2y0v7bA\u0022,\u0022{OriginalFormat}\u0022:\u0022Sending HTTP request {RequestMethod} \\u0027{RequestUrl}\\u0027.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:60,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Sending PingMessage message completed.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Sending PingMessage message completed.\u0022,\u0022MessageType\u0022:\u0022PingMessage\u0022,\u0022{OriginalFormat}\u0022:\u0022Sending {MessageType} message completed.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:104,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Message(s) sent successfully.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Message(s) sent successfully.\u0022,\u0022{OriginalFormat}\u0022:\u0022Message(s) sent successfully.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:47,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Receive loop starting.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Receive loop starting.\u0022,\u0022{OriginalFormat}\u0022:\u0022Receive loop starting.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:44,\u0022LogLevel\u0022:\u0022Information\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022HubConnection started.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022HubConnection started.\u0022,\u0022{OriginalFormat}\u0022:\u0022HubConnection started.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:80,\u0022LogLevel\u0022:\u0022Trace\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022The HubConnection is attempting to transition from the Connecting state to the Connected state.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022The HubConnection is attempting to transition from the Connecting state to the Connected state.\u0022,\u0022ExpectedState\u0022:\u0022Connecting\u0022,\u0022NewState\u0022:\u0022Connected\u0022,\u0022{OriginalFormat}\u0022:\u0022The HubConnection is attempting to transition from the {ExpectedState} state to the {NewState} state.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:20,\u0022LogLevel\u0022:\u0022Trace\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Releasing Connection Lock in StartAsyncInner (/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs:280).\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Releasing Connection Lock in StartAsyncInner (/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs:280).\u0022,\u0022MethodName\u0022:\u0022StartAsyncInner\u0022,\u0022FilePath\u0022:\u0022/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs\u0022,\u0022LineNumber\u0022:280,\u0022{OriginalFormat}\u0022:\u0022Releasing Connection Lock in {MethodName} ({FilePath}:{LineNumber}).\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:42,\u0022LogLevel\u0022:\u0022Trace\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Waiting on Connection Lock in StopAsyncCore (/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs:517).\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Waiting on Connection Lock in StopAsyncCore (/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs:517).\u0022,\u0022MethodName\u0022:\u0022StopAsyncCore\u0022,\u0022FilePath\u0022:\u0022/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs\u0022,\u0022LineNumber\u0022:517,\u0022{OriginalFormat}\u0022:\u0022Waiting on Connection Lock in {MethodName} ({FilePath}:{LineNumber}).\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:20,\u0022LogLevel\u0022:\u0022Trace\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Releasing Connection Lock in StopAsyncCore (/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs:574).\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Releasing Connection Lock in StopAsyncCore (/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs:574).\u0022,\u0022MethodName\u0022:\u0022StopAsyncCore\u0022,\u0022FilePath\u0022:\u0022/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs\u0022,\u0022LineNumber\u0022:574,\u0022{OriginalFormat}\u0022:\u0022Releasing Connection Lock in {MethodName} ({FilePath}:{LineNumber}).\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:52,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Stopping HubConnection.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Stopping HubConnection.\u0022,\u0022{OriginalFormat}\u0022:\u0022Stopping HubConnection.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:53,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Terminating receive loop.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Terminating receive loop.\u0022,\u0022{OriginalFormat}\u0022:\u0022Terminating receive loop.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:54,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Waiting for the receive loop to terminate.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Waiting for the receive loop to terminate.\u0022,\u0022{OriginalFormat}\u0022:\u0022Waiting for the receive loop to terminate.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:42,\u0022LogLevel\u0022:\u0022Trace\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Waiting on Connection Lock in HandleConnectionClose (/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs:1404).\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Waiting on Connection Lock in HandleConnectionClose (/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs:1404).\u0022,\u0022MethodName\u0022:\u0022HandleConnectionClose\u0022,\u0022FilePath\u0022:\u0022/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs\u0022,\u0022LineNumber\u0022:1404,\u0022{OriginalFormat}\u0022:\u0022Waiting on Connection Lock in {MethodName} ({FilePath}:{LineNumber}).\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:4,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.HttpConnection\u0022,\u0022Message\u0022:\u0022Disposing HttpConnection.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Disposing HttpConnection.\u0022,\u0022{OriginalFormat}\u0022:\u0022Disposing HttpConnection.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:6,\u0022LogLevel\u0022:\u0022Information\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Transport is stopping.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Transport is stopping.\u0022,\u0022{OriginalFormat}\u0022:\u0022Transport is stopping.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:102,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Send loop canceled.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Send loop canceled.\u0022,\u0022{OriginalFormat}\u0022:\u0022Send loop canceled.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:02Z\u0022,\u0022EventId\u0022:101,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Send loop stopped.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Send loop stopped.\u0022,\u0022{OriginalFormat}\u0022:\u0022Send loop stopped.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:18Z\u0022,\u0022EventId\u0022:9,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Received 6 bytes. Parsing SSE frame.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Received 6 bytes. Parsing SSE frame.\u0022,\u0022Count\u0022:6,\u0022{OriginalFormat}\u0022:\u0022Received {Count} bytes. Parsing SSE frame.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:18Z\u0022,\u0022EventId\u0022:5,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Receive loop canceled.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Receive loop canceled.\u0022,\u0022{OriginalFormat}\u0022:\u0022Receive loop canceled.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:18Z\u0022,\u0022EventId\u0022:4,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Receive loop stopped.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Receive loop stopped.\u0022,\u0022{OriginalFormat}\u0022:\u0022Receive loop stopped.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:19Z\u0022,\u0022EventId\u0022:2,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport\u0022,\u0022Message\u0022:\u0022Transport stopped.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Transport stopped.\u0022,\u0022{OriginalFormat}\u0022:\u0022Transport stopped.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:19Z\u0022,\u0022EventId\u0022:6,\u0022LogLevel\u0022:\u0022Information\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.Http.Connections.Client.HttpConnection\u0022,\u0022Message\u0022:\u0022HttpConnection Disposed.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022HttpConnection Disposed.\u0022,\u0022{OriginalFormat}\u0022:\u0022HttpConnection Disposed.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:19Z\u0022,\u0022EventId\u0022:46,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Canceling all outstanding invocations.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Canceling all outstanding invocations.\u0022,\u0022{OriginalFormat}\u0022:\u0022Canceling all outstanding invocations.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:19Z\u0022,\u0022EventId\u0022:11,\u0022LogLevel\u0022:\u0022Trace\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Shutting down connection.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Shutting down connection.\u0022,\u0022{OriginalFormat}\u0022:\u0022Shutting down connection.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:19Z\u0022,\u0022EventId\u0022:80,\u0022LogLevel\u0022:\u0022Trace\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022The HubConnection is attempting to transition from the Connected state to the Disconnected state.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022The HubConnection is attempting to transition from the Connected state to the Disconnected state.\u0022,\u0022ExpectedState\u0022:\u0022Connected\u0022,\u0022NewState\u0022:\u0022Disconnected\u0022,\u0022{OriginalFormat}\u0022:\u0022The HubConnection is attempting to transition from the {ExpectedState} state to the {NewState} state.\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:19Z\u0022,\u0022EventId\u0022:20,\u0022LogLevel\u0022:\u0022Trace\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022Releasing Connection Lock in HandleConnectionClose (/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs:1438).\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022Releasing Connection Lock in HandleConnectionClose (/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs:1438).\u0022,\u0022MethodName\u0022:\u0022HandleConnectionClose\u0022,\u0022FilePath\u0022:\u0022/_/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs\u0022,\u0022LineNumber\u0022:1438,\u0022{OriginalFormat}\u0022:\u0022Releasing Connection Lock in {MethodName} ({FilePath}:{LineNumber}).\u0022}}\r\n{\u0022Timestamp\u0022:\u00222023-09-20 17:54:19Z\u0022,\u0022EventId\u0022:21,\u0022LogLevel\u0022:\u0022Debug\u0022,\u0022Category\u0022:\u0022Microsoft.AspNetCore.SignalR.Client.HubConnection\u0022,\u0022Message\u0022:\u0022HubConnection stopped.\u0022,\u0022State\u0022:{\u0022Message\u0022:\u0022HubConnection stopped.\u0022,\u0022{OriginalFormat}\u0022:\u0022HubConnect on stopped.\u0022}}\r\n\u0060\u0060\u0060",
        "createdAt": "2023-09-20T18:00:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50839#issuecomment-1728201691"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85yBet7",
    "title": "SignalR C\u002B\u002B client",
    "url": "https://github.com/dotnet/aspnetcore/issues/50938",
    "createdAt": "2023-09-26T08:34:19Z",
    "lastUpdated": "2024-02-13T01:23:12Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI found a [c\u002B\u002B client repository](https://github.com/aspnet/SignalR-Client-Cpp) in the aspnet organization, is it supported?  \n\n### Describe the solution you\u0027d like\n\n--\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85ndmjZ",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "It\u0027s available on [vcpkg](https://vcpkg.io/en/) as an alpha. We are very likely to make breaking changes to it in the future and it isn\u0027t officially supported until it fully ships.",
        "createdAt": "2023-09-26T15:45:09Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50938#issuecomment-1735813337"
      },
      {
        "id": "IC_kwDOAQzde85nf7Lx",
        "parentId": null,
        "author": "Varorbc",
        "content": "Is there a roadmap for release?",
        "createdAt": "2023-09-26T23:08:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/50938#issuecomment-1736422129"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85yYthp",
    "title": "[FromBody]-Attribute not working for SignalR",
    "url": "https://github.com/dotnet/aspnetcore/issues/51014",
    "createdAt": "2023-09-29T11:12:47Z",
    "lastUpdated": "2024-02-13T01:22:50Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nAs already mentioned in this issue [ParamsFromDI](https://github.com/dotnet/aspnetcore/issues/39795), parameters now get resolved from DI by default. But unlike ASP.NET Core, the \u0060[FromBody]\u0060-attribute doesn\u0027t seam to override this behavior. So I\u0027m not able to post parameters of a type that exists in the DI container - or am I mistaken?\n\n### Expected Behavior\n\nSupport \u0060[FromBody]\u0060 argument in Hubs.\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.401\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85nxsEB",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "What do you expect \u0060FromBody\u0060 to do in SignalR? SignalR isn\u0027t a traditional HTTP request so \u0060FromBody\u0060 doesn\u0027t really make sense.",
        "createdAt": "2023-09-29T15:29:47Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51014#issuecomment-1741078785"
      },
      {
        "id": "IC_kwDOAQzde85nxwnG",
        "parentId": null,
        "author": "angelaki",
        "content": "Is there maybe another attribute that I dont know? I\u0027d reuse [FromBody] (just because conviniece).\r\n\r\nI\u0027d expect it to take the parameter from the payload (rather than DI).",
        "createdAt": "2023-09-29T15:42:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51014#issuecomment-1741097414"
      },
      {
        "id": "IC_kwDOAQzde85nxx7Y",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Oh I see. I\u0027d recommend turning off implicit DI resolution and explicitly using \u0060[FromService]\u0060 on the parameters you want to come from DI.\r\n\r\n\u0060\u0060\u0060csharp\r\nservices.AddSignalR(options =\u003E\r\n{\r\n    options.DisableImplicitFromServicesParameters = true;\r\n});\r\n\u0060\u0060\u0060",
        "createdAt": "2023-09-29T15:46:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51014#issuecomment-1741102808"
      },
      {
        "id": "IC_kwDOAQzde85nxyit",
        "parentId": null,
        "author": "angelaki",
        "content": "Sure thats what Im doing right now - since there\u0027s no other possibility. But AspNet.Core allows to set the [FromBody] attribute to force payload usage (rather that DI). Guess SignalR could use that, too.",
        "createdAt": "2023-09-29T15:48:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51014#issuecomment-1741105325"
      },
      {
        "id": "IC_kwDOAQzde85oJVjy",
        "parentId": null,
        "author": "marinasundstrom",
        "content": "There is no \u0022body\u0022 in SignalR, or in WebSockets, so in this case it would be a \u0060\u0060[FromPayload]\u0060\u0060, or similar.\r\n\r\nI understand, the issue with re-using a type, that is already registered in DI, as a contract for the payload. \r\n\r\nBut perhaps the simplest solution is to separate the cases, and have different types.",
        "createdAt": "2023-10-04T16:44:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51014#issuecomment-1747278066"
      },
      {
        "id": "IC_kwDOAQzde85oKzwT",
        "parentId": null,
        "author": "angelaki",
        "content": "@marinasundstrom I thought \u0060[FromBody]\u0060 comes from a lib that is shared with SignalR anyway - turns out it isn\u0027t. I just recommended to use \u0060[FromBody]\u0060 because\r\n\r\n- I thought it was in a shared assembly\r\n- It\u0027s pretty known in the .Net eco-system because of widespread use in MVC\r\n\r\nNever the less, why not just implement it analogous MVC? Being forced to use different types / turn of the default behavior just seams like a workaround to me. When the old behavior was\r\n\r\n\u003E Default from Payload, \u0060[FromService]\u0060 for DI\r\n\r\nWhy shouldn\u0027t the new behavior be\r\n\r\n\u003E Default from DI, \u0060[FromPayload]\u0060 for Payload?",
        "createdAt": "2023-10-04T21:25:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51014#issuecomment-1747663891"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85zWFVD",
    "title": "NewtonsoftJsonHubProtocol does not seem to respect setting for MaxDepth",
    "url": "https://github.com/dotnet/aspnetcore/issues/51254",
    "createdAt": "2023-10-10T11:52:29Z",
    "lastUpdated": "2024-02-13T01:21:51Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI have a signalR application that sends complex objects between client and server, and I recently reached a case where the default MaxDepth of json deserialization is not sufficient.\r\n\r\nMy application is failing with:\r\n\u0060\u0060\u0060\r\nClient disconnected. Connection Id:55dM9bnlnmLLNvlvgw05Tw. Exception: System.IO.InvalidDataException: Error reading JSON.\r\n       ---\u003E Newtonsoft.Json.JsonReaderException: The reader\u0027s MaxDepth of 64 has been exceeded. Path \u0027arguments[0].args.segment.children[9].children[1].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[7].children[0]\u0027, line 1, position 10348.\r\n         at Newtonsoft.Json.JsonReader.Push(JsonContainerType value)\r\n         at Newtonsoft.Json.JsonTextReader.ParseValue()\r\n         at Newtonsoft.Json.Linq.JContainer.ReadContentFrom(JsonReader r, JsonLoadSettings settings)\r\n         at Newtonsoft.Json.Linq.JContainer.ReadTokenFrom(JsonReader reader, JsonLoadSettings options)\r\n         at Newtonsoft.Json.Linq.JArray.Load(JsonReader reader, JsonLoadSettings settings)\r\n         at Microsoft.AspNetCore.SignalR.Protocol.NewtonsoftJsonHubProtocol.ParseMessage(Utf8BufferTextReader textReader, IInvocationBinder binder)\r\n         --- End of inner exception stack trace ---\r\n         at Microsoft.AspNetCore.SignalR.Protocol.NewtonsoftJsonHubProtocol.ParseMessage(Utf8BufferTextReader textReader, IInvocationBinder binder)\r\n         at Microsoft.AspNetCore.SignalR.Protocol.NewtonsoftJsonHubProtocol.TryParseMessage(ReadOnlySequence\u00601\u0026 input, IInvocationBinder binder, HubMessage\u0026 message)\r\n         at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.DispatchMessagesAsync(HubConnectionContext connection)\r\n         at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.RunHubAsync(HubConnectionContext connection)\r\n\u0060\u0060\u0060\r\nThat is all fine, until I tried to set the value to a higher value, and was unsuccessful in doing so, and the error still complains about the max depth of 64.\r\n\r\nI tried the following:\r\n1. Using the \u0022AddNewtonsoftJsonProtocol\u0022 extension method from Microsoft.Extensions.DependencyInjection.NewtonsoftJsonProtocolDependencyInjectionExtensions and setting options.PayloadSerializerSettings.MaxDepth to a higher value - this is not respected\r\n2. Implementing IConfigureOptions\u003CNewtonsoftJsonHubProtocolOptions\u003E in a custom class and setting options.PayloadSerializerSettings.MaxDepth to a higher value from inside the void Configure(NewtonsoftJsonHubProtocolOptions) method. Of course, also did the .ConfigureOptions\u003CMyCustomOptions\u003E on the IServiceCollection in ConfigureServices method of my Startup.cs\r\n3. I also got desperate and tried to do \u0060 JsonConvert.DefaultSettings = () =\u003E new JsonSerializerSettings { MaxDepth = 256 };\u0060 to use directly newtonsoft in the hope that it will respect the global default settings factory. Still no luck.\r\n\r\nAll my attempts ended up with the exact same error, complaining about the max depth of 64 being reached, and this causes my signalR connection to drop.\r\n\r\nPlease help with either providing the proper way to override that configuration, or help with a workaround (for example, is there a way to prevent signalR from deserializing my parameter, obtain somehow the raw content, and let my code handle the deserialization explicitly, in which case I can control the deserialization settings inline?\r\n\r\nLooking at the code, in the NewtonsoftJsonHubProtocol method ParseMessage, when doing the JArray.Load it does indeed seem like the PayloadSerializer member is not used. Please evaluate if this is right. (there might be other places, not just JArray handling, but this is the one that is a match for my scenario, according to the stack trace too)\r\n\r\nThank you!\r\n\r\n### Expected Behavior\r\n\r\nI expect to be able to change the value of MaxDepth used by the deserializer when handling the signalR messages so that I am not stuck with the default depth of 64 on the Newtonsoft Json protocol.\r\n\r\n### Steps To Reproduce\r\nSet up a project with SignalR and NewtonsoftJsonProtocol.\r\nSend a message from the client to the server with an object that has more than 64 levels of nesting. - expected to have it fail and disconnect.\r\nNow try to change the MaxDepth configuration on the protocol - it will still fail with the same error - that the MaxDepth of 64 was reached\r\n\r\n### Exceptions (if any)\r\n\u0060\u0060\u0060\r\nClient disconnected. Connection Id:55dM9bnlnmLLNvlvgw05Tw. Exception: System.IO.InvalidDataException: Error reading JSON.\r\n       ---\u003E Newtonsoft.Json.JsonReaderException: The reader\u0027s MaxDepth of 64 has been exceeded. Path \u0027arguments[0].args.segment.children[9].children[1].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[7].children[0]\u0027, line 1, position 10348.\r\n         at Newtonsoft.Json.JsonReader.Push(JsonContainerType value)\r\n         at Newtonsoft.Json.JsonTextReader.ParseValue()\r\n         at Newtonsoft.Json.Linq.JContainer.ReadContentFrom(JsonReader r, JsonLoadSettings settings)\r\n         at Newtonsoft.Json.Linq.JContainer.ReadTokenFrom(JsonReader reader, JsonLoadSettings options)\r\n         at Newtonsoft.Json.Linq.JArray.Load(JsonReader reader, JsonLoadSettings settings)\r\n         at Microsoft.AspNetCore.SignalR.Protocol.NewtonsoftJsonHubProtocol.ParseMessage(Utf8BufferTextReader textReader, IInvocationBinder binder)\r\n         --- End of inner exception stack trace ---\r\n         at Microsoft.AspNetCore.SignalR.Protocol.NewtonsoftJsonHubProtocol.ParseMessage(Utf8BufferTextReader textReader, IInvocationBinder binder)\r\n         at Microsoft.AspNetCore.SignalR.Protocol.NewtonsoftJsonHubProtocol.TryParseMessage(ReadOnlySequence\u00601\u0026 input, IInvocationBinder binder, HubMessage\u0026 message)\r\n         at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.DispatchMessagesAsync(HubConnectionContext connection)\r\n         at Microsoft.AspNetCore.SignalR.HubConnectionHandler\u00601.RunHubAsync(HubConnectionContext connection)\r\n\u0060\u0060\u0060\r\n### .NET Version\r\n\r\n7.0.401\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 1,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85op2aU",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Unfortunately this looks like a gap in the Newtonsoft.Json library\r\n\u003E Newtonsoft.Json.Linq.JArray.Load(JsonReader reader, JsonLoadSettings settings)\r\n\r\nYou can see that this uses a different settings type, and those settings don\u0027t have the option to specify depth. There is a recent issue opened on the Newtonsoft repo about the same problem: https://github.com/JamesNK/Newtonsoft.Json/issues/2900\r\n\r\nAs for a workaround. If you send the object as a string then your hub method can accept the string and parse it itself. e.g. I assume you\u0027re using the javascript client: \u0060connection.send(\u0022method\u0022, JSON.stringify(myObj));\u0060",
        "createdAt": "2023-10-10T16:31:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51254#issuecomment-1755801236"
      },
      {
        "id": "IC_kwDOAQzde85ouA86",
        "parentId": null,
        "author": "vlad-crisan",
        "content": "thank you @BrennanConroy for checking this out!\r\nis there any workaround that does not involve changing the client-side, and handle it purely on the server-side? \r\n\r\nI\u0027m thinking as a parallel to how Http Controllers work, where it\u0027s possible to not have the body represented as a parameter, and access it explicitly through the Http Context and read it however we want as raw content.\r\nIs there no such thing in SignalR? (basically to leave the server-side definition parameterless and try to obtain the values through different mechanics?)",
        "createdAt": "2023-10-11T06:26:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51254#issuecomment-1756892986"
      },
      {
        "id": "IC_kwDOAQzde85oz4lj",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E workaround that does not involve changing the client-side, and handle it purely on the server-side?\r\n\r\nMaybe. You could try accepting an \u0060object\u0060 in the hub method. That would use the serializer in Newtonsoft.Json which might respect the max depth property since we\u0027ll pass your options in. Then you would manually need to parse your object out.",
        "createdAt": "2023-10-11T19:52:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51254#issuecomment-1758431587"
      },
      {
        "id": "IC_kwDOAQzde85o2VgD",
        "parentId": null,
        "author": "vlad-crisan",
        "content": "\u003E Maybe. You could try accepting an \u0060object\u0060 in the hub method. That would use the serializer in Newtonsoft.Json which might respect the max depth property since we\u0027ll pass your options in. Then you would manually need to parse your object out.\r\n\r\nThat is how it\u0027s currently defined, and it goes through the failing flow described above.\r\nMaybe it would work correctly with concrete types, but our commands are quite dynamic and all come through the same entry point in the backend. Would be quite an ordeal to convert all the possible commands to concrete contracts and unique method names.\r\nMight try it out at some point though.",
        "createdAt": "2023-10-12T07:24:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51254#issuecomment-1759074307"
      },
      {
        "id": "IC_kwDOAQzde85rfMUW",
        "parentId": null,
        "author": "Ibmurai",
        "content": "We\u0027re hitting this problem too, and we\u0027ll have to do the string workaround.\r\nIt sucks :/ ",
        "createdAt": "2023-11-09T08:09:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51254#issuecomment-1803339030"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85zx-_5",
    "title": "Quarantine ServerWithOldProtocolVersionClientWithNewProtocolVersionWorksDoesNotAllowStatefulReconnect",
    "url": "https://github.com/dotnet/aspnetcore/issues/51361",
    "createdAt": "2023-10-13T19:01:08Z",
    "lastUpdated": "2024-02-13T01:21:20Z",
    "body": "## Failing Test(s)\r\n\r\n- Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.ServerWithOldProtocolVersionClientWithNewProtocolVersionWorksDoesNotAllowStatefulReconnect\r\n\r\n\r\n\r\n## Error Message\r\n\r\n\u003C!--\r\nProvide the error message associated with the test failure, if applicable.\r\n--\u003E\r\n\r\n\u0060\u0060\u0060text\r\nAssert.Fail(): 1 error(s) logged.\r\nMicrosoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests - 0 - Xunit.Sdk.TrueException from test\r\n\r\nXunit.Sdk.TrueException: Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\nat Xunit.Assert.True(Nullable\u00601 condition, String userMessage) in //src/xunit.assert/Asserts/BooleanAsserts.cs:line 132\r\nat Xunit.Assert.True(Boolean condition) in //src/xunit.assert/Asserts/BooleanAsserts.cs:line 87\r\nat Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.ServerWithOldProtocolVersionClientWithNewProtocolVersionWorksDoesNotAllowStatefulReconnect() in //src/SignalR/clients/csharp/Client/test/FunctionalTests/HubConnectionTests.cs:line 2896\r\nat Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.ServerWithOldProtocolVersionClientWithNewProtocolVersionWorksDoesNotAllowStatefulReconnect() in //src/SignalR/clients/csharp/Client/test/FunctionalTests/HubConnectionTests.cs:line 2908\r\n\r\n\u0060\u0060\u0060\r\n\r\n## Stacktrace\r\n\r\n\u003Cdetails\u003E\r\n\r\n\u0060\u0060\u0060text\r\n   at Microsoft.AspNetCore.SignalR.Tests.VerifyNoErrorsScope.Dispose() in D:\\a\\_work\\1\\s\\src\\Shared\\SignalR\\VerifyNoErrorScope.cs:line 47\r\n   at Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer\u00601.DisposeAsync()\r\n   at Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer\u00601.DisposeAsync() in D:\\a\\_work\\1\\s\\src\\Shared\\SignalR\\InProcessTestServer.cs:line 164\r\n   at Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.ServerWithOldProtocolVersionClientWithNewProtocolVersionWorksDoesNotAllowStatefulReconnect() in /_/src/SignalR/clients/csharp/Client/test/FunctionalTests/HubConnectionTests.cs:line 2910\r\n--- End of stack trace from previous location ---\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n\r\n## Logs\r\n\r\n\u003Cdetails\u003E\r\n\u003C!--\r\nIf this is a Helix test failure, include the text of the .log artifact from the failing test.\r\nNote that you have to be signed in to Azure DevOps to see the test artifacts.\r\n--\u003E\r\n\r\n\u0060\u0060\u0060text\r\n| [0.003s] TestLifetime Information: Starting test ServerWithOldProtocolVersionClientWithNewProtocolVersionWorksDoesNotAllowStatefulReconnect at 2023-10-12T23:46:49\r\n| [0.005s] Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer Information: Starting test server...\r\n| [0.005s] Microsoft.Extensions.Hosting.Internal.Host Debug: Hosting starting\r\n| [0.005s] Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver Debug: Repository contains no viable default key. Caller should generate a key with immediate activation.\r\n| [0.005s] Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider Debug: Policy resolution states that a new key should be added to the key ring.\r\n| [0.005s] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager Information: Creating key {95e4856c-dd5c-4a9c-90f4-8ba48f5e65fe} with creation date 2023-10-12 23:46:49Z, activation date 2023-10-12 23:46:49Z, and expiration date 2024-01-10 23:46:49Z.\r\n| [0.005s] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager Debug: Descriptor deserializer type for key {95e4856c-dd5c-4a9c-90f4-8ba48f5e65fe} is \u0027Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\u0027.\r\n| [0.005s] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager Debug: No key escrow sink found. Not writing key {95e4856c-dd5c-4a9c-90f4-8ba48f5e65fe} to escrow.\r\n| [0.005s] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager Warning: No XML encryptor configured. Key {95e4856c-dd5c-4a9c-90f4-8ba48f5e65fe} may be persisted to storage in unencrypted form.\r\n| [0.005s] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager Debug: Key cache expiration token triggered by \u0027CreateNewKey\u0027 operation.\r\n| [0.005s] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager Debug: Found key {95e4856c-dd5c-4a9c-90f4-8ba48f5e65fe}.\r\n| [0.005s] Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver Debug: Considering key {95e4856c-dd5c-4a9c-90f4-8ba48f5e65fe} with expiration date 2024-01-10 23:46:49Z as default key.\r\n| [0.005s] Microsoft.AspNetCore.DataProtection.TypeForwardingActivator Debug: Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n| [0.005s] Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ManagedAuthenticatedEncryptorFactory Debug: Using managed symmetric algorithm \u0027System.Security.Cryptography.Aes\u0027.\r\n| [0.005s] Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ManagedAuthenticatedEncryptorFactory Debug: Using managed keyed hash algorithm \u0027System.Security.Cryptography.HMACSHA256\u0027.\r\n| [0.005s] Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider Debug: Using key {95e4856c-dd5c-4a9c-90f4-8ba48f5e65fe} as the default key.\r\n| [0.005s] Microsoft.AspNetCore.DataProtection.Internal.DataProtectionHostedService Debug: Key ring with default key {95e4856c-dd5c-4a9c-90f4-8ba48f5e65fe} was loaded during application startup.\r\n| [0.006s] Microsoft.AspNetCore.SignalR.Internal.DefaultHubProtocolResolver Debug: Registered SignalR Protocol: json, implemented by Microsoft.AspNetCore.SignalR.Protocol.JsonHubProtocol.\r\n| [0.006s] Microsoft.AspNetCore.SignalR.Internal.DefaultHubProtocolResolver Debug: Registered SignalR Protocol: messagepack, implemented by Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocol.\r\n| [0.024s] Microsoft.Hosting.Lifetime Information: Now listening on: http://127.0.0.1:34713\r\n| [0.024s] Microsoft.AspNetCore.Hosting.Diagnostics Debug: Loaded hosting startup assembly Microsoft.AspNetCore.SignalR.Client.FunctionalTests\r\n| [0.024s] Microsoft.Hosting.Lifetime Information: Application started. Press Ctrl\u002BC to shut down.\r\n| [0.024s] Microsoft.Hosting.Lifetime Information: Hosting environment: Production\r\n| [0.024s] Microsoft.Hosting.Lifetime Information: Content root path: /datadisks/disk1/work/9C1F0899/w/938A088A/e\r\n| [0.024s] Microsoft.Extensions.Hosting.Internal.Host Debug: Hosting started\r\n| [0.024s] Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer Information: Test Server started\r\n| [0.025s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Starting HubConnection.\r\n| [0.025s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Starting HttpConnection.\r\n| [0.025s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Establishing connection with server at \u0027http://127.0.0.1:34713/default\u0027.\r\n| [0.025s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMUBFLFMF2D0\u0022 accepted.\r\n| [0.025s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMUBFLFMF2D0\u0022 started.\r\n| [0.025s] Microsoft.AspNetCore.Hosting.Diagnostics Information: Request starting HTTP/1.1 POST http://127.0.0.1:34713/default/negotiate?negotiateVersion=1\u0026useStatefulReconnect=true - - 0\r\n| [0.026s] Microsoft.AspNetCore.Routing.Matching.DfaMatcher Debug: 1 candidate(s) found for the request path \u0027/default/negotiate\u0027\r\n| [0.026s] Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware Debug: Request matched endpoint \u0027/default/negotiate\u0027\r\n| [0.026s] Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler Debug: AuthenticationScheme: Bearer was not authenticated.\r\n| [0.026s] Microsoft.AspNetCore.Routing.EndpointMiddleware Information: Executing endpoint \u0027/default/negotiate\u0027\r\n| [0.026s] Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager Debug: New connection Anfgo1hButY7kW2c02oK_A created.\r\n| [0.026s] Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher Debug: Anfgo1hButY7kW2c02oK_A - Sending negotiation response.\r\n| [0.026s] Microsoft.AspNetCore.Routing.EndpointMiddleware Information: Executed endpoint \u0027/default/negotiate\u0027\r\n| [0.027s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMUBFLFMF2D0\u0022 completed keep alive response.\r\n| [0.027s] Microsoft.AspNetCore.Hosting.Diagnostics Information: Request finished HTTP/1.1 POST http://127.0.0.1:34713/default/negotiate?negotiateVersion=1\u0026useStatefulReconnect=true - 200 344 application/json 1.3611ms\r\n| [0.027s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Established connection \u0027Anfgo1hButY7kW2c02oK_A\u0027 with the server.\r\n| [0.027s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Starting transport \u0027WebSockets\u0027 with Url: http://127.0.0.1:34713/default.\r\n| [0.027s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Information: Starting transport. Transfer mode: Text. Url: \u0027ws://127.0.0.1:34713/default?id=sw1w7MDgjMeOhdHDtGz-Sg\u0027.\r\n| [0.028s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMUBFLFMF2D1\u0022 accepted.\r\n| [0.028s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMUBFLFMF2D1\u0022 started.\r\n| [0.028s] Microsoft.AspNetCore.Hosting.Diagnostics Information: Request starting HTTP/1.1 GET http://127.0.0.1:34713/default?id=sw1w7MDgjMeOhdHDtGz-Sg - - -\r\n| [0.030s] Microsoft.AspNetCore.Routing.Matching.DfaMatcher Debug: 1 candidate(s) found for the request path \u0027/default\u0027\r\n| [0.030s] Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware Debug: Request matched endpoint \u0027/default\u0027\r\n| [0.030s] Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler Debug: AuthenticationScheme: Bearer was not authenticated.\r\n| [0.030s] Microsoft.AspNetCore.Routing.EndpointMiddleware Information: Executing endpoint \u0027/default\u0027\r\n| [0.030s] Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: Anfgo1hButY7kW2c02oK_A - Socket opened using Sub-Protocol: \u0027(null)\u0027.\r\n| [0.030s] Microsoft.AspNetCore.SignalR.HubConnectionHandler Debug: Anfgo1hButY7kW2c02oK_A - OnConnectedAsync started.\r\n| [0.030s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Started transport.\r\n| [0.030s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Transport \u0027WebSockets\u0027 started.\r\n| [0.030s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Information: HttpConnection Started.\r\n| [0.031s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: HubProtocol \u0027json v1\u0027 does not support Stateful Reconnect. Disabling the feature.\r\n| [0.031s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: Using HubProtocol \u0027json v1\u0027.\r\n| [0.031s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending Hub Handshake.\r\n| [0.031s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Received message from application. Payload size: 32.\r\n| [0.031s] Microsoft.AspNetCore.SignalR.Internal.DefaultHubProtocolResolver Debug: Anfgo1hButY7kW2c02oK_A - Found protocol implementation for requested protocol: json.\r\n| [0.031s] Microsoft.AspNetCore.SignalR.HubConnectionContext Debug: Anfgo1hButY7kW2c02oK_A - HubProtocol \u0027json v1\u0027 does not support Stateful Reconnect. Disabling the feature.\r\n| [0.031s] Microsoft.AspNetCore.SignalR.HubConnectionContext Debug: Anfgo1hButY7kW2c02oK_A - Completed connection handshake. Using HubProtocol \u0027json\u0027.\r\n| [0.031s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Message received. Type: Text, size: 3, EndOfMessage: True.\r\n| [0.031s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Handshake with server complete.\r\n| [0.031s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending PingMessage message.\r\n| [0.031s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending PingMessage message completed.\r\n| [0.031s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Received message from application. Payload size: 11.\r\n| [0.032s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Receive loop starting.\r\n| [0.032s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: HubConnection started.\r\n| [0.035s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Registering Invocation ID \u00271\u0027 for tracking.\r\n| [0.035s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending InvocationMessage message \u00271\u0027.\r\n| [0.035s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending InvocationMessage message \u00271\u0027 completed.\r\n| [0.035s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Received message from application. Payload size: 70.\r\n| [0.035s] Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher Debug: Anfgo1hButY7kW2c02oK_A - Received hub invocation: InvocationMessage { InvocationId: \u00221\u0022, Target: \u0022Echo\u0022, Arguments: [ SignalR ], StreamIds: [  ] }.\r\n| [0.035s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Message received. Type: Text, size: 49, EndOfMessage: True.\r\n| [0.035s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Processing 49 byte message from server.\r\n| [0.036s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \u00220HMUBFLFMF2D1\u0022 received FIN.\r\n| [0.036s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \u00220HMUBFLFMF2D1\u0022 sending FIN because: \u0022The Socket transport\u0027s send loop completed gracefully.\u0022\r\n| [0.036s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Receive loop stopped.\r\n| [0.036s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMUBFLFMF2D1\u0022 disconnecting.\r\n| [0.036s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Send loop stopped.\r\n| [0.036s] Microsoft.AspNetCore.SignalR.Client.HubConnection Error: The server connection was terminated with an error.\r\n| System.Net.WebSockets.WebSocketException (0x80004005): The remote party closed the WebSocket connection without completing the close handshake.\r\n|  ---\u003E System.IO.IOException: Unable to read data from the transport connection: Operation canceled.\r\n|  ---\u003E System.Net.Sockets.SocketException (125): Operation canceled\r\n|    --- End of inner exception stack trace ---\r\n|    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource\u003CSystem.Int32\u003E.GetResult(Int16 token)\r\n|    at System.Net.Http.HttpConnection.ReadAsync(Memory\u00601 destination)\r\n|    at System.Net.Http.HttpConnection.RawConnectionStream.ReadAsync(Memory\u00601 buffer, CancellationToken cancellationToken)\r\n|    at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource\u003CTResult\u003E.GetResult(Int16 token)\r\n|    at System.Net.WebSockets.ManagedWebSocket.ReceiveAsyncPrivate[TResult](Memory\u00601 payloadBuffer, CancellationToken cancellationToken)\r\n|    at System.Net.WebSockets.ManagedWebSocket.ReceiveAsyncPrivate[TResult](Memory\u00601 payloadBuffer, CancellationToken cancellationToken)\r\n|    at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource\u003CTResult\u003E.GetResult(Int16 token)\r\n|    at Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport.StartReceiving(WebSocket socket) in /_/src/SignalR/clients/csharp/Http.Connections.Client/src/Internal/WebSocketsTransport.cs:line 443\r\n|    at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n|    at Microsoft.AspNetCore.SignalR.Client.HubConnection.ReceiveLoop(ConnectionState connectionState)\r\n| [0.037s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Disposing HttpConnection.\r\n| [0.037s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Information: Transport is stopping.\r\n| [0.037s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Transport stopped.\r\n| [0.037s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Information: HttpConnection Disposed.\r\n| [0.037s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Canceling all outstanding invocations.\r\n| [0.037s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \u00220HMUBFLFMF2D0\u0022 received FIN.\r\n| [0.037s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMUBFLFMF2D0\u0022 disconnecting.\r\n| [0.037s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMUBFLFMF2D0\u0022 stopped.\r\n| [0.037s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \u00220HMUBFLFMF2D0\u0022 sending FIN because: \u0022The Socket transport\u0027s send loop completed gracefully.\u0022\r\n| [0.037s] Microsoft.AspNetCore.SignalR.Client.HubConnection Error: Connection is shutting down due to an error.\r\n| System.Net.WebSockets.WebSocketException (0x80004005): The remote party closed the WebSocket connection without completing the close handshake.\r\n|  ---\u003E System.IO.IOException: Unable to read data from the transport connection: Operation canceled.\r\n|  ---\u003E System.Net.Sockets.SocketException (125): Operation canceled\r\n|    --- End of inner exception stack trace ---\r\n|    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource\u003CSystem.Int32\u003E.GetResult(Int16 token)\r\n|    at System.Net.Http.HttpConnection.ReadAsync(Memory\u00601 destination)\r\n|    at System.Net.Http.HttpConnection.RawConnectionStream.ReadAsync(Memory\u00601 buffer, CancellationToken cancellationToken)\r\n|    at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource\u003CTResult\u003E.GetResult(Int16 token)\r\n|    at System.Net.WebSockets.ManagedWebSocket.ReceiveAsyncPrivate[TResult](Memory\u00601 payloadBuffer, CancellationToken cancellationToken)\r\n|    at System.Net.WebSockets.ManagedWebSocket.ReceiveAsyncPrivate[TResult](Memory\u00601 payloadBuffer, CancellationToken cancellationToken)\r\n|    at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource\u003CTResult\u003E.GetResult(Int16 token)\r\n|    at Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport.StartReceiving(WebSocket socket) in /_/src/SignalR/clients/csharp/Http.Connections.Client/src/Internal/WebSocketsTransport.cs:line 443\r\n|    at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n|    at Microsoft.AspNetCore.SignalR.Client.HubConnection.ReceiveLoop(ConnectionState connectionState)\r\n| [0.038s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Invoking the Closed event handler.\r\n| [0.038s] Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: Anfgo1hButY7kW2c02oK_A - Socket connection closed prematurely.\r\n| System.Net.WebSockets.WebSocketException (0x80004005): The remote party closed the WebSocket connection without completing the close handshake.\r\n|    at System.Net.WebSockets.ManagedWebSocket.ThrowEOFUnexpected()\r\n|    at System.Net.WebSockets.ManagedWebSocket.EnsureBufferContainsAsync(Int32 minimumRequiredBytes, CancellationToken cancellationToken)\r\n|    at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n|    at System.Net.WebSockets.ManagedWebSocket.ReceiveAsyncPrivate[TResult](Memory\u00601 payloadBuffer, CancellationToken cancellationToken)\r\n|    at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource\u003CTResult\u003E.GetResult(Int16 token)\r\n|    at Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsServerTransport.StartReceiving(WebSocket socket) in /_/src/SignalR/common/Http.Connections/src/Internal/Transports/WebSocketsServerTransport.cs:line 140\r\n| [0.039s] Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: Anfgo1hButY7kW2c02oK_A - Waiting for the application to finish sending data.\r\n| [0.039s] Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: Anfgo1hButY7kW2c02oK_A - Socket closed.\r\n| [0.040s] Microsoft.AspNetCore.SignalR.HubConnectionHandler Debug: Anfgo1hButY7kW2c02oK_A - OnConnectedAsync ending.\r\n| [0.040s] Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager Debug: Anfgo1hButY7kW2c02oK_A - Removing connection sw1w7MDgjMeOhdHDtGz-Sg from the list of connections.\r\n| [0.040s] Microsoft.AspNetCore.Routing.EndpointMiddleware Information: Executed endpoint \u0027/default\u0027\r\n| [0.040s] Microsoft.AspNetCore.Hosting.Diagnostics Information: Request finished HTTP/1.1 GET http://127.0.0.1:34713/default?id=sw1w7MDgjMeOhdHDtGz-Sg - 101 - - 11.5991ms\r\n| [0.040s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMUBFLFMF2D1\u0022 stopped.\r\n| [0.039s] Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests Error: Xunit.Sdk.TrueException from test\r\n| Xunit.Sdk.TrueException: Assert.True() Failure\r\n| Expected: True\r\n| Actual:   False\r\n|    at Xunit.Assert.True(Nullable\u00601 condition, String userMessage) in /_/src/xunit.assert/Asserts/BooleanAsserts.cs:line 132\r\n|    at Xunit.Assert.True(Boolean condition) in /_/src/xunit.assert/Asserts/BooleanAsserts.cs:line 87\r\n|    at Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.ServerWithOldProtocolVersionClientWithNewProtocolVersionWorksDoesNotAllowStatefulReconnect() in /_/src/SignalR/clients/csharp/Client/test/FunctionalTests/HubConnectionTests.cs:line 2896\r\n| [0.042s] Microsoft.Extensions.Hosting.Internal.Host Debug: Hosting stopping\r\n| [0.042s] Microsoft.Hosting.Lifetime Information: Application is shutting down...\r\n| [0.042s] Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer Information: Test server shut down\r\n| [0.042s] Microsoft.Extensions.Hosting.Internal.Host Debug: Hosting stopped\r\n| [0.047s] Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests Error: Test threw an exception.\r\n| Xunit.Sdk.FailException: Assert.Fail(): 1 error(s) logged.\r\n| Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests - 0 - Xunit.Sdk.TrueException from test\r\n| ===================\r\n| Xunit.Sdk.TrueException: Assert.True() Failure\r\n| Expected: True\r\n| Actual:   False\r\n|    at Xunit.Assert.True(Nullable\u00601 condition, String userMessage) in /_/src/xunit.assert/Asserts/BooleanAsserts.cs:line 132\r\n|    at Xunit.Assert.True(Boolean condition) in /_/src/xunit.assert/Asserts/BooleanAsserts.cs:line 87\r\n|    at Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.ServerWithOldProtocolVersionClientWithNewProtocolVersionWorksDoesNotAllowStatefulReconnect() in /_/src/SignalR/clients/csharp/Client/test/FunctionalTests/HubConnectionTests.cs:line 2896\r\n|    at Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.ServerWithOldProtocolVersionClientWithNewProtocolVersionWorksDoesNotAllowStatefulReconnect() in /_/src/SignalR/clients/csharp/Client/test/FunctionalTests/HubConnectionTests.cs:line 2908\r\n| ===================\r\n|    at Xunit.Assert.Fail(String message) in /_/src/xunit.assert/Asserts/FailAsserts.cs:line 28\r\n|    at Microsoft.AspNetCore.SignalR.Tests.VerifyNoErrorsScope.Dispose() in D:\\a\\_work\\1\\s\\src\\Shared\\SignalR\\VerifyNoErrorScope.cs:line 47\r\n|    at Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer\u00601.DisposeAsync()\r\n|    at Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer\u00601.DisposeAsync() in D:\\a\\_work\\1\\s\\src\\Shared\\SignalR\\InProcessTestServer.cs:line 164\r\n|    at Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.ServerWithOldProtocolVersionClientWithNewProtocolVersionWorksDoesNotAllowStatefulReconnect() in /_/src/SignalR/clients/csharp/Client/test/FunctionalTests/HubConnectionTests.cs:line 2910\r\n|    at Xunit.Sdk.TestInvoker\u00601.\u003C\u003Ec__DisplayClass48_0.\u003C\u003CInvokeTestMethodAsync\u003Eb__1\u003Ed.MoveNext() in /_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs:line 264\r\n| --- End of stack trace from previous location ---\r\n|    at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func\u00601 asyncAction) in /_/src/xunit.execution/Sdk/Frameworks/ExecutionTimer.cs:line 48\r\n|    at Xunit.Sdk.ExceptionAggregator.RunAsync(Func\u00601 code) in /_/src/xunit.core/Sdk/ExceptionAggregator.cs:line 90\r\n| [0.048s] TestLifetime Information: Finished test ServerWithOldProtocolVersionClientWithNewProtocolVersionWorksDoesNotAllowStatefulReconnect in 0.0453134s\r\n\r\n\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n## Build\r\n\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=437009\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=9714588\u0026resultId=123572\u0026paneView=attachments\r\n",
    "upvotes": 0,
    "labels": [
      "test-failure",
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde850ncd1",
    "title": "Add activities to SignalR invocations",
    "url": "https://github.com/dotnet/aspnetcore/issues/51557",
    "createdAt": "2023-10-23T07:07:16Z",
    "lastUpdated": "2024-09-11T22:58:47Z",
    "body": "Today SignalR invocations do not have any activity associated with them. We currently piggy-back on the default ASP.NET Core activity and it\u0027s not great for invocations over the websocket. We should add an activity following the [semantic conventions for rpc](https://opentelemetry.io/docs/specs/semconv/rpc/rpc-spans/).\r\n\r\nOpen questions:\r\n- Should we do this tracing in all directions? Client to server and server to client? \r\n- Do we use message headers to pass this state across the wire seamlessly? This will impact the performance of invocations.\r\n\r\ncc @BrennanConroy ",
    "upvotes": 13,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85p1Sdf",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Related\r\nhttps://github.com/dotnet/aspnetcore/issues/18711\r\nhttps://github.com/dotnet/aspnetcore/issues/40763",
        "createdAt": "2023-10-23T16:31:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51557#issuecomment-1775576927"
      },
      {
        "id": "IC_kwDOAQzde85rtEMm",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 9 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2023-11-12T02:05:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51557#issuecomment-1806975782"
      },
      {
        "id": "IC_kwDOAQzde85w6BMM",
        "parentId": null,
        "author": "VincentH-Net",
        "content": "\u003E Should we do this tracing in all directions? Client to server and server to client?\r\n\r\nYes please. Bidirectional tracing is useful in scenario\u0027s like IoT devices with local intelligent hubs plus cloud (a project I am working on). Or like in [this chat app example trace](https://twitter.com/vincenth_net/status/1747214763996672337), 2 app instances connected to the cloud backend with SignalR. It is helpful to see the true end2end flow and timings.\r\n\r\n\r\n",
        "createdAt": "2024-01-16T18:12:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51557#issuecomment-1894257420"
      },
      {
        "id": "IC_kwDOAQzde857GjCP",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "Still planning to do this in 9.",
        "createdAt": "2024-04-18T20:59:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51557#issuecomment-2065313935"
      },
      {
        "id": "IC_kwDOAQzde85_UY3B",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "The activity source \u0060\u0022Microsoft.AspNetCore.SignalR.Server\u0022\u0060 can now be listened to on server applications.\r\n\r\n- [x] Server activity source (\u0022Microsoft.AspNetCore.SignalR.Server\u0022)\r\n- [x] Client activity source (\u0022Microsoft.AspNetCore.SignalR.Client\u0022)\r\n- [x] Hub method events\r\n- [ ] Client method events\r\n- [ ] Distributed tracing (trace ids sent between client and server)\r\n  - [x] Client to Server\r\n    - [ ] TS Client\r\n    - [x] .NET Client\r\n    - [ ] Java Client\r\n  - [ ] Server to Client",
        "createdAt": "2024-05-28T20:28:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51557#issuecomment-2136051137"
      },
      {
        "id": "IC_kwDOAQzde86LvCX8",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "Lots of progress on this in .NET 9. Moving to 10 for the rest.",
        "createdAt": "2024-09-11T18:14:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51557#issuecomment-2344363516"
      },
      {
        "id": "IC_kwDOAQzde86LvGUZ",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "Actually, this might be worth reconsidering a bit more thoughtfully to decide which parts to prioritize. Un-milestoning for now (cc @BrennanConroy @JamesNK)",
        "createdAt": "2024-09-11T18:23:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/51557#issuecomment-2344379673"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde851TIix",
    "title": "Azure Web App Autoscale Instances can\u0027t connect to Redis for SignalR - StackExchangeRedis",
    "url": "https://github.com/dotnet/aspnetcore/issues/51740",
    "createdAt": "2023-10-30T09:55:35Z",
    "lastUpdated": "2024-02-13T01:19:14Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nUsing StackExchangeRedis 6.0.21 when deploying my API to an Azure web app with autoscale enabled only the first instance of the web app connects to the Redis cache, the rest of the span-up instances fail to connect with the following error:\r\n\r\n\u0060\u0060\u0060\r\nSocketFailure on redis-xxx.redis.cache.windows.net:6380/Subscription\r\nIdle/Faulted, last: PING, \r\norigin: ReadFromPipe, \r\noutstanding: 0, last-read: 26s ago, \r\nlast-write: 26s ago, \r\nkeep-alive: 60s, state: ConnectedEstablished, mgr: 9 of 10 available, in: 0, \r\nlast-heartbeat: 0s ago, last-mbeat: 0s ago, global: 0s ago, v: 2.6.122.38350 \r\n---\u003E Unable to read data from the transport connection: Connection reset by peer. \r\n---\u003E Connection reset by peer\r\n\u0060\u0060\u0060\r\n\r\n### Expected Behavior\r\n\r\nAll of the web app instances using SignalR with Redis backplane should be able to connect to Redis\r\n\r\n### Steps To Reproduce\r\n\r\n- Create c# application with SignalR hubs and StackExchangeRedis 6.0.21\r\n- Deploy application for Azure web app with more than 1 instance\r\n\r\nExpected:\r\nOnly 1 instance will connect to SignalR, the rest will fail to connect\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n6.0.21\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde8514Av3",
    "title": "SignalR ts client transport has unexpected behaviour about transport when calling withUrl() twice",
    "url": "https://github.com/dotnet/aspnetcore/issues/51876",
    "createdAt": "2023-11-05T03:40:50Z",
    "lastUpdated": "2024-02-13T01:18:25Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nIn my project I basically do this:\r\n\u0060\u0060\u0060\r\nconst hubConnectionBuilder = new signalR.HubConnectionBuilder();\r\nconst connectionBuilder = hubConnectionBuilder\r\n.withUrl(\u0022http://example.com/1\u0022, {transport: HttpTransportType.LongPolling})\r\n.build();\r\n\u0060\u0060\u0060\r\n\r\nand at a later point I just want to change the URL so I call:\r\n\u0060connectionBuilder.withUrl(\u0022http://example.com/2\u0022)\u0060\r\n\r\nFor me unexpectedly this changes the transport back to original and tries websockets for http://example.com/2 but websockets are blocked so it fails.\r\n\r\nI proposed this PR to change this behaviour:\r\nhttps://github.com/dotnet/aspnetcore/pull/51875\r\n\r\nI am new here so I don\u0027t expect this pullrequest to be flawless or maybe it won\u0027t even get accepted because the behaviour is as designed.\r\n\r\nPS: Can you give me a tip how to run the SignalR/ts/signalr tests I\u0027d appreciate it. Wrote the test but didn\u0027t know how to execute it except by creating a Pullrequest... Also not sure if my log line really works because it is nullable until build()\n\n### Expected Behavior\n\ncalling withUrl() second time without the optional parameter will not overwrite transport from LongPolling with undefined\n\n### Steps To Reproduce\n\nhttps://github.com/dotnet/aspnetcore/pull/51875\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n\u0022@microsoft/signalr\u0022: \u0022^7.0.5\u0022,\n\n### Anything else?\n\nIn debug logging I receive this unexpected logging:\r\nDebug: Selecting transport \u0027WebSockets\u0027.\r\n-\u003E altough I\u0027ve selected LongPolling on first withUrl() call and didn\u0027t specify it in second withUrl call",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde8524Um3",
    "title": "\u0022Error: URL.pathname not implemented signalr\u0022 - @microsoft/signalr V8.0.0 on React-Native 0.72.7 ",
    "url": "https://github.com/dotnet/aspnetcore/issues/52071",
    "createdAt": "2023-11-15T10:21:11Z",
    "lastUpdated": "2024-07-27T09:01:52Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nHi,\r\n\r\nI updated the @microsoft/signalr package on my react-native app from V7.0.12 to V8.0.0 and it stopped working after the update.\r\nThe connection is failing when firing the start() method.\r\nThe error: \u0022Error: URL.pathname not implemented signalr\u0022.\r\n\r\nThis is the code (which works fine with V7.0.12):\r\n\r\n        let hubConnection = new HubConnectionBuilder()\r\n            .withUrl(\u0060${CONFIG.MOBILE_SERVER_BASE_URL}/${hubName}\u0060, { transport: HttpTransportType.WebSockets })\r\n            .build();\r\n\r\n        hubConnection.start()\r\n            .then(() =\u003E {\r\n                ...\r\n            })\r\n            .catch((error) =\u003E {\r\n                ...\r\n            });\r\n\r\nThanks\r\n\r\n### Expected Behavior\r\n\r\nFix this bug\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 7,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85spR2I",
        "parentId": null,
        "author": "Philip970",
        "content": "I have the same issue",
        "createdAt": "2023-11-22T13:20:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-1822760328"
      },
      {
        "id": "IC_kwDOAQzde85tDksR",
        "parentId": null,
        "author": "elandref93",
        "content": "Same issue here",
        "createdAt": "2023-11-28T11:38:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-1829653265"
      },
      {
        "id": "IC_kwDOAQzde85tD73a",
        "parentId": null,
        "author": "ruchishah848",
        "content": "Can anyone help to solve this error, I\u0027m also getting the same error.\r\n",
        "createdAt": "2023-11-28T12:30:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-1829748186"
      },
      {
        "id": "IC_kwDOAQzde85tgiBb",
        "parentId": null,
        "author": "DanShepherd27",
        "content": "same error for me as well with version 8.0.0",
        "createdAt": "2023-12-02T20:18:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-1837244507"
      },
      {
        "id": "IC_kwDOAQzde85tqabl",
        "parentId": null,
        "author": "SapsayArtyom",
        "content": "same error for me as well with version 8.0.0",
        "createdAt": "2023-12-05T01:18:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-1839834853"
      },
      {
        "id": "IC_kwDOAQzde85uPiEb",
        "parentId": null,
        "author": "rajsawhoney",
        "content": "same error with version 8.0.0",
        "createdAt": "2023-12-11T08:43:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-1849565467"
      },
      {
        "id": "IC_kwDOAQzde85ubmqJ",
        "parentId": null,
        "author": "austinGENEreeve",
        "content": "Same issue, reverting back to v7 fixed it for me. Looks like something is wrong in v8 for react native",
        "createdAt": "2023-12-12T20:09:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-1852729993"
      },
      {
        "id": "IC_kwDOAQzde85uvosl",
        "parentId": null,
        "author": "vvadyak",
        "content": "The same issue is reproducible with v8.0.0 of @microsoft/signalr package in the React Native environment.\r\nWorks well after rolling back to v7.0.12.",
        "createdAt": "2023-12-15T14:34:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-1857981221"
      },
      {
        "id": "IC_kwDOAQzde85u_KVK",
        "parentId": null,
        "author": "vasafix",
        "content": "Installing https://www.npmjs.com/package/react-native-url-polyfill did the trick for me",
        "createdAt": "2023-12-19T03:31:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-1862051146"
      },
      {
        "id": "IC_kwDOAQzde85vZLaT",
        "parentId": null,
        "author": "erez-unitronics",
        "content": "@vasafix Thanks! your solution works for me",
        "createdAt": "2023-12-25T09:03:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-1868871315"
      },
      {
        "id": "IC_kwDOAQzde8507wx1",
        "parentId": null,
        "author": "abdulwahid211",
        "content": "\u003E Installing https://www.npmjs.com/package/react-native-url-polyfill did the trick for me\r\n\r\nI installed it, it did not resolve the issue. What did you exactly?\r\n",
        "createdAt": "2024-02-23T18:46:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-1961823349"
      },
      {
        "id": "IC_kwDOAQzde8509lly",
        "parentId": null,
        "author": "vasafix",
        "content": "@abdulwahid211 Did you add \r\n\u0060import \u0027react-native-url-polyfill/auto\u0027;\u0060\r\nin your entry-poin as per documentation? \r\nhttps://www.npmjs.com/package/react-native-url-polyfill#option-1-simple\r\nother than that, I don\u0027t know where could be the problem\r\n",
        "createdAt": "2024-02-24T08:49:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-1962301810"
      },
      {
        "id": "IC_kwDOAQzde852MKWn",
        "parentId": null,
        "author": "tkyr-hh",
        "content": "\u003E Installing https://www.npmjs.com/package/react-native-url-polyfill did the trick for me\r\n\r\nThanks for your help!.",
        "createdAt": "2024-03-07T08:22:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-1982899623"
      },
      {
        "id": "IC_kwDOAQzde854-iah",
        "parentId": null,
        "author": "ramkumar457",
        "content": "Installing https://www.npmjs.com/package/react-native-url-polyfill did the trick for me\r\n\r\nThanks for your help!.",
        "createdAt": "2024-04-01T12:08:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-2029659809"
      },
      {
        "id": "IC_kwDOAQzde86GWpTg",
        "parentId": null,
        "author": "hoangnv170752",
        "content": "Thanks, it works for me @vasafix ",
        "createdAt": "2024-07-27T09:01:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52071#issuecomment-2254083296"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde8535Lwc",
    "title": "SignalR Json Protocol version upgraded to version 2 generates problems with old servers on BlazorApps",
    "url": "https://github.com/dotnet/aspnetcore/issues/52385",
    "createdAt": "2023-11-27T04:49:07Z",
    "lastUpdated": "2024-02-13T01:14:57Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nHi!\r\n\r\nI\u0027m mantaining this library https://www.nuget.org/packages/ABnet.WarehouseSimulator.Client which depends on Microsoft.AspNetCore.SignalR.Client \u003E 7.0.11 .\r\n\r\nI\u0027m facing some problems when using this library on Blazor Apps running .NET 8 because it is forcing to use JSON Protocol 2, even though the library does not have any reference to the StatefulReconnect. I think this may be a bug related to it.\r\n\r\nThis is the source code of the library related to this bug:\r\n\r\n\u0060\u0060\u0060csharp\r\n hubConnection = new HubConnectionBuilder()\r\n     .ConfigureLogging(hubLoggingOptions ?? ((loggingBuilder) =\u003E\r\n     {\r\n         loggingBuilder.SetMinimumLevel(LogLevel.Information);\r\n         loggingBuilder.AddConsole();\r\n     }))\r\n     .WithUrl($\u0022{options.ServerAddress}/hubs/adapter\u0022, options =\u003E\r\n     {\r\n         options.Headers.Add(\u0022X-API-Key\u0022, this.options.ApiKey);\r\n         options.CloseTimeout = TimeSpan.FromSeconds(10);\r\n     })\r\n     .WithAutomaticReconnect()\r\n     .Build();\r\n\u0060\u0060\u0060\r\n\r\nAnd these are the logs when running one Blazor App project which uses this library under .NET 8.0:\r\n\u0060\u0060\u0060bash\r\ninfo: Microsoft.AspNetCore.Http.Connections.Client.HttpConnection[3]\r\n      HttpConnection Started.\r\ninfo: Microsoft.AspNetCore.SignalR.Client.HubConnection[24]\r\n      Using HubProtocol \u0027json v2\u0027.\r\nfail: Microsoft.AspNetCore.SignalR.Client.HubConnection[36]\r\n      Server returned handshake error: The server does not support version 2 of the \u0027json\u0027 protocol.\r\ninfo: Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport[11]\r\n      WebSocket closed by the server. Close status NormalClosure.\r\nfail: Microsoft.AspNetCore.SignalR.Client.HubConnection[43]\r\n      Error starting connection.\r\n      Microsoft.AspNetCore.SignalR.HubException: Unable to complete handshake with the server due to an error: The server does not support version 2 of the \u0027json\u0027 protocol.\r\n         at Microsoft.AspNetCore.SignalR.Client.HubConnection.HandshakeAsync(ConnectionState startingConnectionState, CancellationToken cancellationToken)\r\n         at Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsyncCore(CancellationToken cancellationToken)\r\ninfo: Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport[6]\r\n      Transport is stopping.\r\ninfo: Microsoft.AspNetCore.Http.Connections.Client.HttpConnection[6]\r\n      HttpConnection Disposed.\r\n\u0060\u0060\u0060\r\n\r\nWhen running the BlazorApp  under .NET 7.0 it uses Json Protocol 1 and the error doesn\u0027t occurs:\r\n\u0060\u0060\u0060bash\r\ninfo: Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport[1]\r\n      Starting transport. Transfer mode: Text. Url: \u0027wss://simulator-runner-01.abnet.dev/hubs/adapter?id=h1GZgyS5EkE4ZfIj8co22A\u0027.\r\ninfo: Microsoft.AspNetCore.Http.Connections.Client.HttpConnection[3]\r\n      HttpConnection Started.\r\ninfo: Microsoft.AspNetCore.SignalR.Client.HubConnection[24]\r\n      Using HubProtocol \u0027json v1\u0027.\r\ninfo: Microsoft.AspNetCore.SignalR.Client.HubConnection[44]\r\n      HubConnection started.\r\n\u0060\u0060\u0060\r\n\r\nI think my issue is directly related to the PR #50442 , right?\r\n\r\nWasn\u0027t it solved already or am I missing something?\r\n\r\n### Expected Behavior\r\n\r\nI was expecting SignalR HubConnectionBuilder to keep using JsonProtocol version 1 if I\u0027m not using StatefulReconnect and the server that it is trying to connect to doesn\u0027t supports Json Version 2.\r\n\r\n### Steps To Reproduce\r\n\r\nCreated this repo. More details on ReadMe:\r\n\r\nhttps://github.com/guilhermecampello/SignalRJsonProtocolTest/tree/master\r\n\r\n### Exceptions (if any)\r\n\r\nfail: Microsoft.AspNetCore.SignalR.Client.HubConnection[36]\r\nServer returned handshake error: The server does not support version 2 of the \u0027json\u0027 protocol.\r\n\r\n### .NET Version\r\n8.0.100\r\n\r\n### Anything else?\r\n\r\nApparently this bug only happens on Blazor Apps. On console applications I wasn\u0027t able to reproduce.",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85wn1oo",
        "parentId": null,
        "author": "jmmmartinmarcos",
        "content": "Hi everyone,\r\n\r\nI am experiencing the same problem. I am not using Blazor but still working with ASP.NET Core Web Application projects.",
        "createdAt": "2024-01-12T15:18:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52385#issuecomment-1889491496"
      },
      {
        "id": "IC_kwDOAQzde85wxZyy",
        "parentId": null,
        "author": "jmmmartinmarcos",
        "content": "Worked after upgrading the SignalR client library to version 8.0.1",
        "createdAt": "2024-01-15T11:35:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52385#issuecomment-1891998898"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde853_CuE",
    "title": "Flaky test ChangingUserNameDuringReconnectLogsWarning",
    "url": "https://github.com/dotnet/aspnetcore/issues/52408",
    "createdAt": "2023-11-27T20:10:50Z",
    "lastUpdated": "2024-02-13T01:14:49Z",
    "body": "\u003C!--\r\nNote this issue template is specifically for failing tests within the dotnet/aspnetcore repo.\r\n--\u003E\r\n\r\n## Failing Test(s)\r\n\r\n\u003C!--\r\nProvide the fully qualified name(s) of the failing tests.\r\n--\u003E\r\n\r\n- Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.ChangingUserNameDuringReconnectLogsWarning\r\n\r\n## Error Message\r\n\r\n\u003C!--\r\nProvide the error message associated with the test failure, if applicable.\r\n--\u003E\r\n\r\n\u0060\u0060\u0060text\r\nAssert.Fail(): 1 error(s) logged.\r\nMicrosoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport - ErrorSendingMessage - Error while sending a message.\r\n\r\nSystem.Net.WebSockets.WebSocketException (0x80004005): The remote party closed the WebSocket connection without completing the close handshake.\r\n---\u003E System.IO.IOException: Cannot access a closed stream.\r\nat System.Net.WebSockets.ManagedWebSocket.SendFrameFallbackAsync(MessageOpcode opcode, Boolean endOfMessage, Boolean disableCompression, ReadOnlyMemory1 payloadBuffer, Task lockTask, CancellationToken cancellationToken)    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine\u0026 stateMachine)    at System.Net.WebSockets.ManagedWebSocket.SendAsync(ReadOnlyMemory1 buffer, WebSocketMessageType messageType, WebSocketMessageFlags messageFlags, CancellationToken cancellationToken)\r\nat Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport.StartSending(WebSocket socket, Boolean ignoreFirstCanceled)\r\nat System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\r\nat System.Runtime.CompilerServices.AsyncTaskMethodBuilder1.AsyncStateMachineBox1.MoveNext(Thread threadPoolThread)\r\nat System.Threading.ThreadPoolWorkQueue.Dispatch()\r\nat System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n--- End of stack trace from previous location ---\r\nat System.Net.WebSockets.ManagedWebSocket.SendFrameFallbackAsync(MessageOpcode opcode, Boolean endOfMessage, Boolean disableCompression, ReadOnlyMemory1 payloadBuffer, Task lockTask, CancellationToken cancellationToken)    at System.Net.WebSockets.ManagedWebSocket.SendFrameFallbackAsync(MessageOpcode opcode, Boolean endOfMessage, Boolean disableCompression, ReadOnlyMemory1 payloadBuffer, Task lockTask, CancellationToken cancellationToken)\r\nat Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport.StartSending(WebSocket socket, Boolean ignoreFirstCanceled) in /_/src/SignalR/clients/csharp/Http.Connections.Client/src/Internal/WebSocketsTransport.cs:line 562\r\n\u0060\u0060\u0060\r\n\r\n## Stacktrace\r\n\r\n\u003Cdetails\u003E\r\n\u003C!--\r\nProvide the stack trace associated with the test failure, if applicable.\r\n--\u003E\r\n\r\n\u0060\u0060\u0060text\r\n   at Microsoft.AspNetCore.SignalR.Tests.VerifyNoErrorsScope.Dispose() in D:\\a\\_work\\1\\s\\src\\Shared\\SignalR\\VerifyNoErrorScope.cs:line 47\r\n   at Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer\u00601.DisposeAsync()\r\n   at Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer\u00601.DisposeAsync() in D:\\a\\_work\\1\\s\\src\\Shared\\SignalR\\InProcessTestServer.cs:line 163\r\n   at Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.ChangingUserNameDuringReconnectLogsWarning() in /_/src/SignalR/clients/csharp/Client/test/FunctionalTests/HubConnectionTests.cs:line 2740\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n\r\n## Logs\r\n\r\n\u003Cdetails\u003E\r\n\u003C!--\r\nIf this is a Helix test failure, include the text of the .log artifact from the failing test.\r\nNote that you have to be signed in to Azure DevOps to see the test artifacts.\r\n--\u003E\r\n\r\n\u0060\u0060\u0060text\r\n2023-11-27T18:32:45.6844128Z [xUnit.net 00:00:57.12]     Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.ChangingUserNameDuringReconnectLogsWarning [FAIL]\r\n2023-11-27T18:32:45.6989300Z [xUnit.net 00:00:57.17]       Stack Trace:\r\n2023-11-27T18:32:45.6989423Z [xUnit.net 00:00:57.17]         D:\\a\\_work\\1\\s\\src\\Shared\\SignalR\\VerifyNoErrorScope.cs(47,0): at Microsoft.AspNetCore.SignalR.Tests.VerifyNoErrorsScope.Dispose()\r\n2023-11-27T18:32:45.6991374Z [xUnit.net 00:00:57.17]            at Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer\u00601.DisposeAsync()\r\n2023-11-27T18:32:45.6991440Z [xUnit.net 00:00:57.19]         D:\\a\\_work\\1\\s\\src\\Shared\\SignalR\\InProcessTestServer.cs(163,0): at Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer\u00601.DisposeAsync()\r\n2023-11-27T18:32:45.6991469Z [xUnit.net 00:00:57.19]         /_/src/SignalR/clients/csharp/Client/test/FunctionalTests/HubConnectionTests.cs(2740,0): at Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.ChangingUserNameDuringReconnectLogsWarning()\r\n2023-11-27T18:32:45.6991518Z [xUnit.net 00:00:57.19]         --- End of stack trace from previous location ---\r\n2023-11-27T18:32:45.6991543Z [xUnit.net 00:00:57.19]       Output:\r\n2023-11-27T18:32:45.6991567Z [xUnit.net 00:00:57.19]         | [0.000s] TestLifetime Information: Starting test ChangingUserNameDuringReconnectLogsWarning at 2023-11-27T18:32:45\r\n2023-11-27T18:32:45.6991798Z [xUnit.net 00:00:57.19]         | [0.002s] Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer Information: Starting test server...\r\n2023-11-27T18:32:45.6991842Z [xUnit.net 00:00:57.19]         | [0.002s] Microsoft.Extensions.Hosting.Internal.Host Debug: Hosting starting\r\n2023-11-27T18:32:45.6991874Z [xUnit.net 00:00:57.19]         | [0.003s] Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver Debug: Repository contains no viable default key. Caller should generate a key with immediate activation.\r\n2023-11-27T18:32:45.6991905Z [xUnit.net 00:00:57.19]         | [0.003s] Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider Debug: Policy resolution states that a new key should be added to the key ring.\r\n2023-11-27T18:32:45.6991939Z [xUnit.net 00:00:57.19]         | [0.003s] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager Information: Creating key {7182e3d8-41fd-4d14-8423-9d40fbc37f75} with creation date 2023-11-27 18:32:45Z, activation date 2023-11-27 18:32:45Z, and expiration date 2024-02-25 18:32:45Z.\r\n2023-11-27T18:32:45.6994244Z [xUnit.net 00:00:57.19]         | [0.003s] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager Debug: Descriptor deserializer type for key {7182e3d8-41fd-4d14-8423-9d40fbc37f75} is \u0027Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\u0027.\r\n2023-11-27T18:32:45.7287668Z [xUnit.net 00:00:57.19]         | [0.003s] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager Debug: No key escrow sink found. Not writing key {7182e3d8-41fd-4d14-8423-9d40fbc37f75} to escrow.\r\n2023-11-27T18:32:45.7343632Z [xUnit.net 00:00:57.19]         | [0.003s] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager Warning: No XML encryptor configured. Key {7182e3d8-41fd-4d14-8423-9d40fbc37f75} may be persisted to storage in unencrypted form.\r\n2023-11-27T18:32:45.7343805Z [xUnit.net 00:00:57.19]         | [0.003s] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager Debug: Key cache expiration token triggered by \u0027CreateNewKey\u0027 operation.\r\n2023-11-27T18:32:45.7343837Z [xUnit.net 00:00:57.19]         | [0.003s] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager Debug: Found key {7182e3d8-41fd-4d14-8423-9d40fbc37f75}.\r\n2023-11-27T18:32:45.7348655Z [xUnit.net 00:00:57.19]         | [0.003s] Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver Debug: Considering key {7182e3d8-41fd-4d14-8423-9d40fbc37f75} with expiration date 2024-02-25 18:32:45Z as default key.\r\n2023-11-27T18:32:45.7349765Z [xUnit.net 00:00:57.19]         | [0.003s] Microsoft.AspNetCore.DataProtection.TypeForwardingActivator Debug: Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n2023-11-27T18:32:45.7350008Z [xUnit.net 00:00:57.20]         | [0.003s] Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ManagedAuthenticatedEncryptorFactory Debug: Using managed symmetric algorithm \u0027System.Security.Cryptography.Aes\u0027.\r\n2023-11-27T18:32:45.7350042Z [xUnit.net 00:00:57.20]         | [0.003s] Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ManagedAuthenticatedEncryptorFactory Debug: Using managed keyed hash algorithm \u0027System.Security.Cryptography.HMACSHA256\u0027.\r\n2023-11-27T18:32:45.7361333Z [xUnit.net 00:00:57.20]         | [0.003s] Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingProvider Debug: Using key {7182e3d8-41fd-4d14-8423-9d40fbc37f75} as the default key.\r\n2023-11-27T18:32:45.7370306Z [xUnit.net 00:00:57.20]         | [0.003s] Microsoft.AspNetCore.DataProtection.Internal.DataProtectionHostedService Debug: Key ring with default key {7182e3d8-41fd-4d14-8423-9d40fbc37f75} was loaded during application startup.\r\n2023-11-27T18:32:45.7381524Z [xUnit.net 00:00:57.20]         | [0.003s] Microsoft.AspNetCore.SignalR.Internal.DefaultHubProtocolResolver Debug: Registered SignalR Protocol: json, implemented by Microsoft.AspNetCore.SignalR.Protocol.JsonHubProtocol.\r\n2023-11-27T18:32:45.7392960Z [xUnit.net 00:00:57.20]         | [0.004s] Microsoft.AspNetCore.SignalR.Internal.DefaultHubProtocolResolver Debug: Registered SignalR Protocol: messagepack, implemented by Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocol.\r\n2023-11-27T18:32:45.7771049Z [xUnit.net 00:00:57.20]         | [0.022s] Microsoft.Hosting.Lifetime Information: Now listening on: http://127.0.0.1:33165\r\n2023-11-27T18:32:45.7831652Z [xUnit.net 00:00:57.20]         | [0.022s] Microsoft.AspNetCore.Hosting.Diagnostics Debug: Loaded hosting startup assembly Microsoft.AspNetCore.SignalR.Client.FunctionalTests\r\n2023-11-27T18:32:45.7831766Z [xUnit.net 00:00:57.20]         | [0.022s] Microsoft.Hosting.Lifetime Information: Application started. Press Ctrl\u002BC to shut down.\r\n2023-11-27T18:32:45.7831802Z [xUnit.net 00:00:57.20]         | [0.022s] Microsoft.Hosting.Lifetime Information: Hosting environment: Production\r\n2023-11-27T18:32:45.7831831Z [xUnit.net 00:00:57.20]         | [0.022s] Microsoft.Hosting.Lifetime Information: Content root path: /datadisks/disk1/work/BD8109E1/w/B561098B/e\r\n2023-11-27T18:32:45.7831861Z [xUnit.net 00:00:57.20]         | [0.022s] Microsoft.Extensions.Hosting.Internal.Host Debug: Hosting started\r\n2023-11-27T18:32:45.7831894Z [xUnit.net 00:00:57.20]         | [0.022s] Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer Information: Test Server started\r\n2023-11-27T18:32:45.7836471Z [xUnit.net 00:00:57.20]         | [0.023s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Starting HubConnection.\r\n2023-11-27T18:32:45.7841884Z [xUnit.net 00:00:57.21]         | [0.023s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Starting HttpConnection.\r\n2023-11-27T18:32:45.7853265Z [xUnit.net 00:00:57.21]         | [0.023s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Establishing connection with server at \u0027http://127.0.0.1:33165/default\u0027.\r\n2023-11-27T18:32:45.7866384Z [xUnit.net 00:00:57.21]         | [0.023s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPJ\u0022 accepted.\r\n2023-11-27T18:32:45.8432062Z [xUnit.net 00:00:57.21]         | [0.023s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPJ\u0022 started.\r\n2023-11-27T18:32:45.8441231Z [xUnit.net 00:00:57.21]         | [0.023s] Microsoft.AspNetCore.Hosting.Diagnostics Information: Request starting HTTP/1.1 POST http://127.0.0.1:33165/default/negotiate?negotiateVersion=1\u0026useStatefulReconnect=true - - 0\r\n2023-11-27T18:32:45.8451330Z [xUnit.net 00:00:57.21]         | [0.024s] Microsoft.AspNetCore.Routing.Matching.DfaMatcher Debug: 1 candidate(s) found for the request path \u0027/default/negotiate\u0027\r\n2023-11-27T18:32:45.8518366Z [xUnit.net 00:00:57.21]         | [0.024s] Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware Debug: Request matched endpoint \u0027/default/negotiate\u0027\r\n2023-11-27T18:32:45.8518434Z [xUnit.net 00:00:57.21]         | [0.024s] Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler Debug: AuthenticationScheme: Bearer was not authenticated.\r\n2023-11-27T18:32:45.8518463Z [xUnit.net 00:00:57.21]         | [0.024s] Microsoft.AspNetCore.Routing.EndpointMiddleware Information: Executing endpoint \u0027/default/negotiate\u0027\r\n2023-11-27T18:32:45.8518496Z [xUnit.net 00:00:57.21]         | [0.024s] Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager Debug: New connection nV2KQoE1d7SsYFtDC_6feQ created.\r\n2023-11-27T18:32:45.8518528Z [xUnit.net 00:00:57.21]         | [0.024s] Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher Debug: nV2KQoE1d7SsYFtDC_6feQ - Sending negotiation response.\r\n2023-11-27T18:32:45.8518561Z [xUnit.net 00:00:57.21]         | [0.024s] Microsoft.AspNetCore.Routing.EndpointMiddleware Information: Executed endpoint \u0027/default/negotiate\u0027\r\n2023-11-27T18:32:45.8518646Z [xUnit.net 00:00:57.21]         | [0.024s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPJ\u0022 completed keep alive response.\r\n2023-11-27T18:32:45.8518742Z [xUnit.net 00:00:57.21]         | [0.025s] Microsoft.AspNetCore.Hosting.Diagnostics Information: Request finished HTTP/1.1 POST http://127.0.0.1:33165/default/negotiate?negotiateVersion=1\u0026useStatefulReconnect=true - 200 344 application/json 1.2709ms\r\n2023-11-27T18:32:45.8525888Z [xUnit.net 00:00:57.21]         | [0.025s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Established connection \u0027nV2KQoE1d7SsYFtDC_6feQ\u0027 with the server.\r\n2023-11-27T18:32:45.8536352Z [xUnit.net 00:00:57.21]         | [0.025s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Starting transport \u0027WebSockets\u0027 with Url: http://127.0.0.1:33165/default.\r\n2023-11-27T18:32:45.8962574Z [xUnit.net 00:00:57.21]         | [0.025s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Information: Starting transport. Transfer mode: Text. Url: \u0027ws://127.0.0.1:33165/default?id=Id7H2ys0JE7Oz0oVooVktg\u0027.\r\n2023-11-27T18:32:45.8968822Z [xUnit.net 00:00:57.21]         | [0.026s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPK\u0022 accepted.\r\n2023-11-27T18:32:45.9031963Z [xUnit.net 00:00:57.21]         | [0.026s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPK\u0022 started.\r\n2023-11-27T18:32:45.9032057Z [xUnit.net 00:00:57.21]         | [0.026s] Microsoft.AspNetCore.Hosting.Diagnostics Information: Request starting HTTP/1.1 GET http://127.0.0.1:33165/generateJwtToken/test1 - - -\r\n2023-11-27T18:32:45.9032287Z [xUnit.net 00:00:57.21]         | [0.027s] Microsoft.AspNetCore.Routing.Matching.DfaMatcher Debug: 1 candidate(s) found for the request path \u0027/generateJwtToken/test1\u0027\r\n2023-11-27T18:32:45.9037193Z [xUnit.net 00:00:57.21]         | [0.027s] Microsoft.AspNetCore.Routing.Matching.DfaMatcher Debug: Endpoint \u0027HTTP: GET /generateJwtToken/{name?}\u0027 with route pattern \u0027/generateJwtToken/{name?}\u0027 is valid for the request path \u0027/generateJwtToken/test1\u0027\r\n2023-11-27T18:32:45.9037830Z [xUnit.net 00:00:57.21]         | [0.027s] Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware Debug: Request matched endpoint \u0027HTTP: GET /generateJwtToken/{name?}\u0027\r\n2023-11-27T18:32:45.9037999Z [xUnit.net 00:00:57.21]         | [0.027s] Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler Debug: AuthenticationScheme: Bearer was not authenticated.\r\n2023-11-27T18:32:45.9038031Z [xUnit.net 00:00:57.21]         | [0.027s] Microsoft.AspNetCore.Routing.EndpointMiddleware Information: Executing endpoint \u0027HTTP: GET /generateJwtToken/{name?}\u0027\r\n2023-11-27T18:32:45.9048664Z [xUnit.net 00:00:57.21]         | [0.028s] Microsoft.AspNetCore.Routing.EndpointMiddleware Information: Executed endpoint \u0027HTTP: GET /generateJwtToken/{name?}\u0027\r\n2023-11-27T18:32:45.9059365Z [xUnit.net 00:00:57.25]         | [0.028s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPK\u0022 completed keep alive response.\r\n2023-11-27T18:32:45.9059445Z [xUnit.net 00:00:57.25]         | [0.028s] Microsoft.AspNetCore.Hosting.Diagnostics Information: Request finished HTTP/1.1 GET http://127.0.0.1:33165/generateJwtToken/test1 - 200 - - 1.9957ms\r\n2023-11-27T18:32:45.9065084Z [xUnit.net 00:00:57.25]         | [0.028s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPL\u0022 accepted.\r\n2023-11-27T18:32:45.9922036Z [xUnit.net 00:00:57.25]         | [0.028s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPL\u0022 started.\r\n2023-11-27T18:32:45.9922192Z [xUnit.net 00:00:57.25]         | [0.029s] Microsoft.AspNetCore.Hosting.Diagnostics Information: Request starting HTTP/1.1 GET http://127.0.0.1:33165/default?id=Id7H2ys0JE7Oz0oVooVktg - - -\r\n2023-11-27T18:32:45.9922221Z [xUnit.net 00:00:57.25]         | [0.029s] Microsoft.AspNetCore.Routing.Matching.DfaMatcher Debug: 1 candidate(s) found for the request path \u0027/default\u0027\r\n2023-11-27T18:32:45.9922249Z [xUnit.net 00:00:57.25]         | [0.029s] Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware Debug: Request matched endpoint \u0027/default\u0027\r\n2023-11-27T18:32:45.9922275Z [xUnit.net 00:00:57.25]         | [0.030s] Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler Debug: Successfully validated the token.\r\n2023-11-27T18:32:45.9922302Z [xUnit.net 00:00:57.25]         | [0.030s] Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler Debug: AuthenticationScheme: Bearer was successfully authenticated.\r\n2023-11-27T18:32:45.9922410Z [xUnit.net 00:00:57.25]         | [0.030s] Microsoft.AspNetCore.Routing.EndpointMiddleware Information: Executing endpoint \u0027/default\u0027\r\n2023-11-27T18:32:45.9922438Z [xUnit.net 00:00:57.25]         | [0.031s] Microsoft.AspNetCore.SignalR.HubConnectionHandler Debug: nV2KQoE1d7SsYFtDC_6feQ - OnConnectedAsync started.\r\n2023-11-27T18:32:45.9922463Z [xUnit.net 00:00:57.25]         | [0.031s] Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: nV2KQoE1d7SsYFtDC_6feQ - Socket opened using Sub-Protocol: \u0027(null)\u0027.\r\n2023-11-27T18:32:45.9922490Z [xUnit.net 00:00:57.25]         | [0.031s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Started transport.\r\n2023-11-27T18:32:45.9922562Z [xUnit.net 00:00:57.25]         | [0.031s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Transport \u0027WebSockets\u0027 started.\r\n2023-11-27T18:32:45.9922591Z [xUnit.net 00:00:57.25]         | [0.031s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Information: HttpConnection Started.\r\n2023-11-27T18:32:45.9922616Z [xUnit.net 00:00:57.25]         | [0.031s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: Using HubProtocol \u0027json v2\u0027.\r\n2023-11-27T18:32:45.9937212Z [xUnit.net 00:00:57.25]         | [0.031s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending Hub Handshake.\r\n2023-11-27T18:32:45.9937286Z [xUnit.net 00:00:57.25]         | [0.031s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Received message from application. Payload size: 32.\r\n2023-11-27T18:32:45.9937314Z [xUnit.net 00:00:57.25]         | [0.031s] Microsoft.AspNetCore.SignalR.Internal.DefaultHubProtocolResolver Debug: nV2KQoE1d7SsYFtDC_6feQ - Found protocol implementation for requested protocol: json.\r\n2023-11-27T18:32:45.9937400Z [xUnit.net 00:00:57.25]         | [0.031s] Microsoft.AspNetCore.SignalR.HubConnectionContext Debug: nV2KQoE1d7SsYFtDC_6feQ - Completed connection handshake. Using HubProtocol \u0027json\u0027.\r\n2023-11-27T18:32:45.9942332Z [xUnit.net 00:00:57.25]         | [0.031s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Message received. Type: Text, size: 3, EndOfMessage: True.\r\n2023-11-27T18:32:45.9948252Z [xUnit.net 00:00:57.25]         | [0.031s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Handshake with server complete.\r\n2023-11-27T18:32:46.1535776Z [xUnit.net 00:00:57.25]         | [0.031s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending PingMessage message.\r\n2023-11-27T18:32:46.1535914Z [xUnit.net 00:00:57.25]         | [0.032s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending PingMessage message completed.\r\n2023-11-27T18:32:46.1535943Z [xUnit.net 00:00:57.25]         | [0.032s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Received message from application. Payload size: 11.\r\n2023-11-27T18:32:46.1535974Z [xUnit.net 00:00:57.25]         | [0.032s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Receive loop starting.\r\n2023-11-27T18:32:46.1536002Z [xUnit.net 00:00:57.25]         | [0.032s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: HubConnection started.\r\n2023-11-27T18:32:46.1536027Z [xUnit.net 00:00:57.25]         | [0.034s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \u00220HMVFESFBPCPL\u0022 received FIN.\r\n2023-11-27T18:32:46.1536111Z [xUnit.net 00:00:57.25]         | [0.034s] Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: nV2KQoE1d7SsYFtDC_6feQ - Socket connection closed prematurely.\r\n2023-11-27T18:32:46.1536141Z [xUnit.net 00:00:57.25]         | System.Net.WebSockets.WebSocketException (0x80004005): The remote party closed the WebSocket connection without completing the close handshake.\r\n2023-11-27T18:32:46.1536167Z [xUnit.net 00:00:57.26]         |    at System.Net.WebSockets.ManagedWebSocket.ThrowEOFUnexpected()\r\n2023-11-27T18:32:46.1555733Z [xUnit.net 00:00:57.26]         |    at System.Net.WebSockets.ManagedWebSocket.EnsureBufferContainsAsync(Int32 minimumRequiredBytes, CancellationToken cancellationToken)\r\n2023-11-27T18:32:46.1555817Z [xUnit.net 00:00:57.26]         |    at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n2023-11-27T18:32:46.1555851Z [xUnit.net 00:00:57.26]         |    at System.Net.WebSockets.ManagedWebSocket.ReceiveAsyncPrivate[TResult](Memory\u00601 payloadBuffer, CancellationToken cancellationToken)\r\n2023-11-27T18:32:46.1555879Z [xUnit.net 00:00:57.26]         |    at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource\u003CTResult\u003E.GetResult(Int16 token)\r\n2023-11-27T18:32:46.1555908Z [xUnit.net 00:00:57.26]         |    at Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsServerTransport.StartReceiving(WebSocket socket) in /_/src/SignalR/common/Http.Connections/src/Internal/Transports/WebSocketsServerTransport.cs:line 140\r\n2023-11-27T18:32:46.1556045Z [xUnit.net 00:00:57.26]         | [0.034s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Receive loop errored.\r\n2023-11-27T18:32:46.1556079Z [xUnit.net 00:00:57.26]         | System.Net.WebSockets.WebSocketException (0x80004005): The remote party closed the WebSocket connection without completing the close handshake.\r\n2023-11-27T18:32:46.1556108Z [xUnit.net 00:00:57.26]         |  ---\u003E System.IO.IOException: Unable to read data from the transport connection: Operation canceled.\r\n2023-11-27T18:32:46.1556132Z [xUnit.net 00:00:57.26]         |  ---\u003E System.Net.Sockets.SocketException (125): Operation canceled\r\n2023-11-27T18:32:46.1556161Z [xUnit.net 00:00:57.26]         |    --- End of inner exception stack trace ---\r\n2023-11-27T18:32:46.1556262Z [xUnit.net 00:00:57.26]         |    at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource\u003CSystem.Int32\u003E.GetResult(Int16 token)\r\n2023-11-27T18:32:46.1556291Z [xUnit.net 00:00:57.26]         |    at System.Net.Http.HttpConnection.ReadAsync(Memory\u00601 destination)\r\n2023-11-27T18:32:46.1556416Z [xUnit.net 00:00:57.26]         |    at System.Net.Http.HttpConnection.RawConnectionStream.ReadAsync(Memory\u00601 buffer, CancellationToken cancellationToken)\r\n2023-11-27T18:32:46.1556450Z [xUnit.net 00:00:57.26]         |    at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource\u003CTResult\u003E.GetResult(Int16 token)\r\n2023-11-27T18:32:46.1556481Z [xUnit.net 00:00:57.26]         |    at System.Net.WebSockets.ManagedWebSocket.ReceiveAsyncPrivate[TResult](Memory\u00601 payloadBuffer, CancellationToken cancellationToken)\r\n2023-11-27T18:32:46.2663327Z [xUnit.net 00:00:57.26]         |    at System.Net.WebSockets.ManagedWebSocket.ReceiveAsyncPrivate[TResult](Memory\u00601 payloadBuffer, CancellationToken cancellationToken)\r\n2023-11-27T18:32:46.2663490Z [xUnit.net 00:00:57.26]         |    at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource\u003CTResult\u003E.GetResult(Int16 token)\r\n2023-11-27T18:32:46.2663527Z [xUnit.net 00:00:57.31]         |    at Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport.StartReceiving(WebSocket socket) in /_/src/SignalR/clients/csharp/Http.Connections.Client/src/Internal/WebSocketsTransport.cs:line 443\r\n2023-11-27T18:32:46.2663584Z [xUnit.net 00:00:57.31]         | [0.035s] Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: nV2KQoE1d7SsYFtDC_6feQ - Waiting for the application to finish sending data.\r\n2023-11-27T18:32:46.2663616Z [xUnit.net 00:00:57.31]         | [0.035s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Receive loop stopped.\r\n2023-11-27T18:32:46.2663862Z [xUnit.net 00:00:57.31]         | [0.035s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \u00220HMVFESFBPCPL\u0022 sending FIN because: \u0022The Socket transport\u0027s send loop completed gracefully.\u0022\r\n2023-11-27T18:32:46.2663918Z [xUnit.net 00:00:57.31]         | [0.035s] Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: nV2KQoE1d7SsYFtDC_6feQ - Socket closed.\r\n2023-11-27T18:32:46.2663957Z [xUnit.net 00:00:57.31]         | [0.035s] Microsoft.AspNetCore.Routing.EndpointMiddleware Information: Executed endpoint \u0027/default\u0027\r\n2023-11-27T18:32:46.2663993Z [xUnit.net 00:00:57.31]         | [0.035s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPL\u0022 disconnecting.\r\n2023-11-27T18:32:46.2664023Z [xUnit.net 00:00:57.31]         | [0.035s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Send loop stopped.\r\n2023-11-27T18:32:46.2664058Z [xUnit.net 00:00:57.31]         | [0.035s] Microsoft.AspNetCore.Hosting.Diagnostics Information: Request finished HTTP/1.1 GET http://127.0.0.1:33165/default?id=Id7H2ys0JE7Oz0oVooVktg - 101 - - 6.6979ms\r\n2023-11-27T18:32:46.2664166Z [xUnit.net 00:00:57.31]         | [0.035s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPL\u0022 stopped.\r\n2023-11-27T18:32:46.2664201Z [xUnit.net 00:00:57.31]         | [0.035s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Information: Starting transport. Transfer mode: Text. Url: \u0027ws://127.0.0.1:33165/default?id=Id7H2ys0JE7Oz0oVooVktg\u0027.\r\n2023-11-27T18:32:46.2664299Z [xUnit.net 00:00:57.31]         | [0.036s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPM\u0022 accepted.\r\n2023-11-27T18:32:46.2664331Z [xUnit.net 00:00:57.31]         | [0.036s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPM\u0022 started.\r\n2023-11-27T18:32:46.2664422Z [xUnit.net 00:00:57.31]         | [0.036s] Microsoft.AspNetCore.Hosting.Diagnostics Information: Request starting HTTP/1.1 GET http://127.0.0.1:33165/generateJwtToken/test2 - - -\r\n2023-11-27T18:32:46.2664455Z [xUnit.net 00:00:57.31]         | [0.036s] Microsoft.AspNetCore.Routing.Matching.DfaMatcher Debug: 1 candidate(s) found for the request path \u0027/generateJwtToken/test2\u0027\r\n2023-11-27T18:32:46.3295970Z [xUnit.net 00:00:57.31]         | [0.036s] Microsoft.AspNetCore.Routing.Matching.DfaMatcher Debug: Endpoint \u0027HTTP: GET /generateJwtToken/{name?}\u0027 with route pattern \u0027/generateJwtToken/{name?}\u0027 is valid for the request path \u0027/generateJwtToken/test2\u0027\r\n2023-11-27T18:32:46.3296143Z [xUnit.net 00:00:57.31]         | [0.036s] Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware Debug: Request matched endpoint \u0027HTTP: GET /generateJwtToken/{name?}\u0027\r\n2023-11-27T18:32:46.3296182Z [xUnit.net 00:00:57.31]         | [0.036s] Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler Debug: AuthenticationScheme: Bearer was not authenticated.\r\n2023-11-27T18:32:46.3296215Z [xUnit.net 00:00:57.31]         | [0.036s] Microsoft.AspNetCore.Routing.EndpointMiddleware Information: Executing endpoint \u0027HTTP: GET /generateJwtToken/{name?}\u0027\r\n2023-11-27T18:32:46.3296301Z [xUnit.net 00:00:57.31]         | [0.036s] Microsoft.AspNetCore.Routing.EndpointMiddleware Information: Executed endpoint \u0027HTTP: GET /generateJwtToken/{name?}\u0027\r\n2023-11-27T18:32:46.3296335Z [xUnit.net 00:00:57.31]         | [0.036s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPM\u0022 completed keep alive response.\r\n2023-11-27T18:32:46.3296968Z [xUnit.net 00:00:57.31]         | [0.036s] Microsoft.AspNetCore.Hosting.Diagnostics Information: Request finished HTTP/1.1 GET http://127.0.0.1:33165/generateJwtToken/test2 - 200 - - 0.3546ms\r\n2023-11-27T18:32:46.3302839Z [xUnit.net 00:00:57.31]         | [0.036s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPN\u0022 accepted.\r\n2023-11-27T18:32:46.3303501Z [xUnit.net 00:00:57.31]         | [0.036s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPN\u0022 started.\r\n2023-11-27T18:32:46.3315148Z [xUnit.net 00:00:57.31]         | [0.036s] Microsoft.AspNetCore.Hosting.Diagnostics Information: Request starting HTTP/1.1 GET http://127.0.0.1:33165/default?id=Id7H2ys0JE7Oz0oVooVktg - - -\r\n2023-11-27T18:32:46.3315760Z [xUnit.net 00:00:57.31]         | [0.037s] Microsoft.AspNetCore.Routing.Matching.DfaMatcher Debug: 1 candidate(s) found for the request path \u0027/default\u0027\r\n2023-11-27T18:32:46.3316292Z [xUnit.net 00:00:57.31]         | [0.037s] Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware Debug: Request matched endpoint \u0027/default\u0027\r\n2023-11-27T18:32:46.3322767Z [xUnit.net 00:00:57.31]         | [0.037s] Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler Debug: Successfully validated the token.\r\n2023-11-27T18:32:46.3323125Z [xUnit.net 00:00:57.31]         | [0.037s] Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler Debug: AuthenticationScheme: Bearer was successfully authenticated.\r\n2023-11-27T18:32:46.3330515Z [xUnit.net 00:00:57.31]         | [0.037s] Microsoft.AspNetCore.Routing.EndpointMiddleware Information: Executing endpoint \u0027/default\u0027\r\n2023-11-27T18:32:46.3330769Z [xUnit.net 00:00:57.31]         | [0.037s] Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher Warning: nV2KQoE1d7SsYFtDC_6feQ - The name of the user changed from \u0027test1\u0027 to \u0027test2\u0027.\r\n2023-11-27T18:32:46.3797467Z [xUnit.net 00:00:57.31]         | [0.037s] Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: nV2KQoE1d7SsYFtDC_6feQ - Socket opened using Sub-Protocol: \u0027(null)\u0027.\r\n2023-11-27T18:32:46.3797613Z [xUnit.net 00:00:57.31]         | [0.037s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Started transport.\r\n2023-11-27T18:32:46.4706539Z [xUnit.net 00:00:57.31]         | [0.039s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Received message from application. Payload size: 26.\r\n2023-11-27T18:32:46.4706779Z [xUnit.net 00:00:57.31]         | [0.039s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Message received. Type: Text, size: 26, EndOfMessage: True.\r\n2023-11-27T18:32:46.4706814Z [xUnit.net 00:00:57.31]         | [0.039s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Processing 26 byte message from server.\r\n2023-11-27T18:32:46.4706848Z [xUnit.net 00:00:57.31]         | [0.040s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending CloseMessage message.\r\n2023-11-27T18:32:46.4706878Z [xUnit.net 00:00:57.31]         | [0.040s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Sending CloseMessage message completed.\r\n2023-11-27T18:32:46.4706908Z [xUnit.net 00:00:57.31]         | [0.040s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Received message from application. Payload size: 11.\r\n2023-11-27T18:32:46.4707031Z [xUnit.net 00:00:57.31]         | [0.040s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Stopping HubConnection.\r\n2023-11-27T18:32:46.4707064Z [xUnit.net 00:00:57.37]         | [0.040s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Terminating receive loop.\r\n2023-11-27T18:32:46.4707196Z [xUnit.net 00:00:57.37]         | [0.040s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Waiting for the receive loop to terminate.\r\n2023-11-27T18:32:46.4707231Z [xUnit.net 00:00:57.37]         | [0.040s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Disposing HttpConnection.\r\n2023-11-27T18:32:46.4707263Z [xUnit.net 00:00:57.37]         | [0.040s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Information: Transport is stopping.\r\n2023-11-27T18:32:46.4707295Z [xUnit.net 00:00:57.37]         | [0.040s] Microsoft.AspNetCore.SignalR.HubConnectionHandler Debug: nV2KQoE1d7SsYFtDC_6feQ - OnConnectedAsync ending.\r\n2023-11-27T18:32:46.4707329Z [xUnit.net 00:00:57.37]         | [0.040s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Send loop stopped.\r\n2023-11-27T18:32:46.4707442Z [xUnit.net 00:00:57.37]         | [0.040s] Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: nV2KQoE1d7SsYFtDC_6feQ - Waiting for the client to close the socket.\r\n2023-11-27T18:32:46.4707478Z [xUnit.net 00:00:57.37]         | [0.040s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \u00220HMVFESFBPCPN\u0022 received FIN.\r\n2023-11-27T18:32:46.4707513Z [xUnit.net 00:00:57.37]         | [0.040s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \u00220HMVFESFBPCPN\u0022 reset.\r\n2023-11-27T18:32:46.4707543Z [xUnit.net 00:00:57.37]         | [0.040s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \u00220HMVFESFBPCPN\u0022 sending RST because: \u0022Broken pipe\u0022\r\n2023-11-27T18:32:46.4707575Z [xUnit.net 00:00:57.37]         | [0.041s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Receive loop canceled.\r\n2023-11-27T18:32:46.4707608Z [xUnit.net 00:00:57.37]         | [0.041s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Receive loop stopped.\r\n2023-11-27T18:32:46.4707639Z [xUnit.net 00:00:57.37]         | [0.041s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Debug: Transport stopped.\r\n2023-11-27T18:32:46.4707777Z [xUnit.net 00:00:57.37]         | [0.041s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Information: HttpConnection Disposed.\r\n2023-11-27T18:32:46.4707817Z [xUnit.net 00:00:57.37]         | [0.041s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Canceling all outstanding invocations.\r\n2023-11-27T18:32:46.4707851Z [xUnit.net 00:00:57.37]         | [0.041s] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: HubConnection stopped.\r\n2023-11-27T18:32:46.5243796Z [xUnit.net 00:00:57.37]         | [0.041s] Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer Information: Start shutting down test server\r\n2023-11-27T18:32:46.5244005Z [xUnit.net 00:00:57.37]         | [0.041s] Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: nV2KQoE1d7SsYFtDC_6feQ - Socket connection closed prematurely.\r\n2023-11-27T18:32:46.5244033Z [xUnit.net 00:00:57.37]         | System.Net.WebSockets.WebSocketException (0x80004005): The remote party closed the WebSocket connection without completing the close handshake.\r\n2023-11-27T18:32:46.5244061Z [xUnit.net 00:00:57.37]         |  ---\u003E Microsoft.AspNetCore.Connections.ConnectionResetException: Broken pipe\r\n2023-11-27T18:32:46.5244087Z [xUnit.net 00:00:57.37]         |  ---\u003E System.Net.Sockets.SocketException (32): Broken pipe\r\n2023-11-27T18:32:46.5244112Z [xUnit.net 00:00:57.37]         |    --- End of inner exception stack trace ---\r\n2023-11-27T18:32:46.5244136Z [xUnit.net 00:00:57.37]         |    at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n2023-11-27T18:32:46.5244318Z [xUnit.net 00:00:57.37]         |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1UpgradeMessageBody.ReadAsyncInternalAwaited(ValueTask\u00601 readTask, CancellationToken cancellationToken)\r\n2023-11-27T18:32:46.5244346Z [xUnit.net 00:00:57.37]         |    at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource\u003CTResult\u003E.GetResult(Int16 token)\r\n2023-11-27T18:32:46.5244371Z [xUnit.net 00:00:57.37]         |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.ReadAsyncInternal(Memory\u00601 destination, CancellationToken cancellationToken) in /_/src/Servers/Kestrel/Core/src/Internal/Http/HttpRequestStream.cs:line 118\r\n2023-11-27T18:32:46.5244416Z [xUnit.net 00:00:57.37]         |    at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource\u003CTResult\u003E.GetResult(Int16 token)\r\n2023-11-27T18:32:46.5244441Z [xUnit.net 00:00:57.37]         |    at System.Net.WebSockets.ManagedWebSocket.ReceiveAsyncPrivate[TResult](Memory\u00601 payloadBuffer, CancellationToken cancellationToken)\r\n2023-11-27T18:32:46.5244534Z [xUnit.net 00:00:57.37]         |    at System.Net.WebSockets.ManagedWebSocket.ReceiveAsyncPrivate[TResult](Memory\u00601 payloadBuffer, CancellationToken cancellationToken)\r\n2023-11-27T18:32:46.5244559Z [xUnit.net 00:00:57.37]         |    at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource\u003CTResult\u003E.GetResult(Int16 token)\r\n2023-11-27T18:32:46.5244618Z [xUnit.net 00:00:57.37]         |    at Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsServerTransport.StartReceiving(WebSocket socket) in /_/src/SignalR/common/Http.Connections/src/Internal/Transports/WebSocketsServerTransport.cs:line 140\r\n2023-11-27T18:32:46.5244664Z [xUnit.net 00:00:57.37]         | [0.041s] Microsoft.Extensions.Hosting.Internal.Host Debug: Hosting stopping\r\n2023-11-27T18:32:46.5244689Z [xUnit.net 00:00:57.37]         | [0.041s] Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport Debug: nV2KQoE1d7SsYFtDC_6feQ - Socket closed.\r\n2023-11-27T18:32:46.5244713Z [xUnit.net 00:00:57.37]         | [0.042s] Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager Debug: nV2KQoE1d7SsYFtDC_6feQ - Removing connection Id7H2ys0JE7Oz0oVooVktg from the list of connections.\r\n2023-11-27T18:32:46.5244763Z [xUnit.net 00:00:57.37]         | [0.042s] Microsoft.AspNetCore.Routing.EndpointMiddleware Information: Executed endpoint \u0027/default\u0027\r\n2023-11-27T18:32:46.5598049Z [xUnit.net 00:00:57.37]         | [0.042s] Microsoft.AspNetCore.Hosting.Diagnostics Information: Request finished HTTP/1.1 GET http://127.0.0.1:33165/default?id=Id7H2ys0JE7Oz0oVooVktg - 101 - - 5.1190ms\r\n2023-11-27T18:32:46.5598181Z [xUnit.net 00:00:57.37]         | [0.042s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPN\u0022 disconnecting.\r\n2023-11-27T18:32:46.5598208Z [xUnit.net 00:00:57.37]         | [0.042s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPN\u0022 stopped.\r\n2023-11-27T18:32:46.5598293Z [xUnit.net 00:00:57.37]         | [0.042s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \u00220HMVFESFBPCPJ\u0022 received FIN.\r\n2023-11-27T18:32:46.5598319Z [xUnit.net 00:00:57.42]         | [0.042s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPJ\u0022 disconnecting.\r\n2023-11-27T18:32:46.5598347Z [xUnit.net 00:00:57.42]         | [0.042s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPJ\u0022 stopped.\r\n2023-11-27T18:32:46.5598529Z [xUnit.net 00:00:57.42]         | [0.042s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \u00220HMVFESFBPCPJ\u0022 sending FIN because: \u0022The Socket transport\u0027s send loop completed gracefully.\u0022\r\n2023-11-27T18:32:46.5598560Z [xUnit.net 00:00:57.43]         | [0.045s] Microsoft.Hosting.Lifetime Information: Application is shutting down...\r\n2023-11-27T18:32:46.5598585Z [xUnit.net 00:00:57.43]         | [0.046s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPK\u0022 disconnecting.\r\n2023-11-27T18:32:46.5603971Z [xUnit.net 00:00:57.43]         | [0.046s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPK\u0022 stopped.\r\n2023-11-27T18:32:46.5608604Z [xUnit.net 00:00:57.43]         | [0.046s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPM\u0022 disconnecting.\r\n2023-11-27T18:32:46.5613258Z [xUnit.net 00:00:57.43]         | [0.046s] Microsoft.AspNetCore.Server.Kestrel.Connections Debug: Connection id \u00220HMVFESFBPCPM\u0022 stopped.\r\n2023-11-27T18:32:46.5716530Z [xUnit.net 00:00:57.43]         | [0.046s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \u00220HMVFESFBPCPK\u0022 sending FIN because: \u0022The Socket transport\u0027s send loop completed gracefully.\u0022\r\n2023-11-27T18:32:46.5722067Z [xUnit.net 00:00:57.43]         | [0.046s] Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets Debug: Connection id \u00220HMVFESFBPCPM\u0022 sending FIN because: \u0022The Socket transport\u0027s send loop completed gracefully.\u0022\r\n2023-11-27T18:32:46.5726748Z [xUnit.net 00:00:57.43]         | [0.046s] Microsoft.AspNetCore.SignalR.Tests.InProcessTestServer Information: Test server shut down\r\n2023-11-27T18:32:46.5731457Z [xUnit.net 00:00:57.43]         | [0.046s] Microsoft.Extensions.Hosting.Internal.Host Debug: Hosting stopped\r\n2023-11-27T18:32:46.5780920Z [xUnit.net 00:00:57.43]         | [0.051s] TestLifetime Information: Finished test ChangingUserNameDuringReconnectLogsWarning in 0.0502106s\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n## Build\r\n\r\n\u003C!--\r\nProvide a link to the build where the test failure occurred.\r\n--\u003E\r\n\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=481329",
    "upvotes": 0,
    "labels": [
      "test-failure",
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85s_OKu",
        "parentId": null,
        "author": "amcasey",
        "content": "Note that the linked build is for a PR that removes the test from the helix retry list and repeats the flaky test 100 times.",
        "createdAt": "2023-11-27T20:11:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52408#issuecomment-1828512430"
      },
      {
        "id": "IC_kwDOAQzde85s_OLn",
        "parentId": null,
        "author": "amcasey",
        "content": "If we decide that flakiness is acceptable, unquarantine the test, add a comment explaining what makes it flaky, and ensure it\u0027s in the helix retry list.",
        "createdAt": "2023-11-27T20:11:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52408#issuecomment-1828512487"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde855JiMQ",
    "title": "SignalR | Electron | CookieJar is creating issue with Electron .Net App \u002B Angular 14",
    "url": "https://github.com/dotnet/aspnetcore/issues/52656",
    "createdAt": "2023-12-08T12:06:45Z",
    "lastUpdated": "2024-05-17T08:56:54Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI am using Electron.Net as backend and Angular as frontend to initiate System App. When I am trying to setup connection with HubConnectionBuilder, I am getting issue:\r\n\r\nCookieJar is not a constructor\r\n\r\nFor Further research, I got to realize that this issue arises due to its requirement of fetch-cookie in DefaultHttpClient.ts file in @microsoft/signalR package. For now, I have used downgraded version of it, but will be looking for solution with latest version 8.0.0.\r\nMy frontend code is like below:\r\n\r\n this.hubConnectionBuilder = new HubConnectionBuilder()\r\n      .configureLogging(LogLevel.Information)\r\n      .withUrl(\u0022http://localhost:4200/ABCD\u0022)\r\n      .build()\r\n\r\n### Expected Behavior\r\n\r\n_No response_\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n6.0.414\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 3,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde850qOdi",
        "parentId": null,
        "author": "universal",
        "content": "i ran into a similar issue with an electron app when upgrading from signalr 6 to 8. \r\n\r\nafter adding \r\n\u0060\u0060\u0060\r\n  \u0022resolutions\u0022: {\r\n    \u0022tough-cookie\u0022: \u00224.1.3\u0022\r\n  }\r\n\u0060\u0060\u0060\r\n\r\nto my package.json it appears to be working again!\r\n\r\nDuring debugging this I noticed that the call to CookieJar.getCookieString(...) had the callback and the url in a different order, than the code seemed to expect it.\r\nWithout the additional resolution restriction in my project (lerna monorepo) I end up with multiple different versions of tough-cookie and something along the way goes haywire...\r\n\r\nIt appears that somehow the wrong (old) version gets required...\r\n\r\n# Output with the resolution restriction\r\n\u0060\u0060\u0060txt\r\nyarn why tough-cookie\r\nyarn why v1.22.19\r\n[1/4] Why do we have the module \u0022tough-cookie\u0022...?\r\n[2/4] Initialising dependency graph...\r\nwarning Resolution field \u0022tough-cookie@4.1.3\u0022 is incompatible with requested version \u0022tough-cookie@^3.0.1\u0022\r\nwarning Resolution field \u0022tough-cookie@4.1.3\u0022 is incompatible with requested version \u0022tough-cookie@~2.5.0\u0022\r\nwarning Resolution field \u0022tough-cookie@4.1.3\u0022 is incompatible with requested version \u0022tough-cookie@^2.3.3\u0022\r\n[3/4] Finding dependency...\r\n[4/4] Calculating file sizes...\r\n=\u003E Found \u0022tough-cookie@4.1.3\u0022\r\ninfo Reasons this module exists\r\n   - \u0022_project_#jest-environment-jsdom#jsdom\u0022 depends on it\r\n   - Hoisted from \u0022_project_#jest-environment-jsdom#jsdom#tough-cookie\u0022\r\n   - Hoisted from \u0022_project_#@app#infrastructure#@microsoft#signalr#fetch-cookie#tough-cookie\u0022\r\n   - Hoisted from \u0022_project_#jest-jasmine2#jest-runtime#jest-config#jest-environment-jsdom#jsdom#tough-cookie\u0022\r\n   - Hoisted from \u0022_project_#jest-jasmine2#jest-runtime#jest-config#jest-environment-jsdom#jsdom#request-promise-native#tough-cookie\u0022\r\n   - Hoisted from \u0022_project_#@app#infrastructure#@jest-runner#electron#jest-runner#jest-config#jest-environment-jsdom#jsdom#tough-cookie\u0022\r\n   - Hoisted from \u0022_project_#jest-jasmine2#jest-runtime#jest-config#jest-environment-jsdom#jsdom#request#tough-cookie\u0022\r\ninfo Disk size without dependencies: \u0022160KB\u0022\r\ninfo Disk size with unique dependencies: \u0022784KB\u0022\r\ninfo Disk size with transitive dependencies: \u0022828KB\u0022\r\ninfo Number of shared dependencies: 5\r\nDone in 0.62s.\r\n\u0060\u0060\u0060\r\n\r\n# Output without the additional resolution restriction:\r\n\r\n\u0060\u0060\u0060txt\r\nyarn why tough-cookie\r\nyarn why v1.22.19\r\n[1/4] Why do we have the module \u0022tough-cookie\u0022...?\r\n[2/4] Initialising dependency graph...\r\n[3/4] Finding dependency...\r\n[4/4] Calculating file sizes...\r\n=\u003E Found \u0022tough-cookie@2.5.0\u0022\r\ninfo Has been hoisted to \u0022tough-cookie\u0022\r\ninfo Reasons this module exists\r\n   - \u0022workspace-aggregator-0efcd8c3-fafa-44cd-9736-47bb72ea7074\u0022 depends on it\r\n   - Hoisted from \u0022_project_#jest-jasmine2#jest-runtime#jest-config#jest-environment-jsdom#jsdom#request-promise-native#tough-cookie\u0022\r\n   - Hoisted from \u0022_project_#jest-jasmine2#jest-runtime#jest-config#jest-environment-jsdom#jsdom#request#tough-cookie\u0022\r\ninfo Disk size without dependencies: \u0022108KB\u0022\r\ninfo Disk size with unique dependencies: \u0022632KB\u0022\r\ninfo Disk size with transitive dependencies: \u0022632KB\u0022\r\ninfo Number of shared dependencies: 2\r\n=\u003E Found \u0022jsdom#tough-cookie@4.1.3\u0022\r\ninfo This module exists because \u0022_project_#jest-environment-jsdom#jsdom\u0022 depends on it.\r\ninfo Disk size without dependencies: \u0022136KB\u0022\r\ninfo Disk size with unique dependencies: \u0022760KB\u0022\r\ninfo Disk size with transitive dependencies: \u0022804KB\u0022\r\ninfo Number of shared dependencies: 5\r\n=\u003E Found \u0022fetch-cookie#tough-cookie@4.1.3\u0022\r\ninfo This module exists because \u0022_project_#@app#infrastructure#@microsoft#signalr#fetch-cookie\u0022 depends on it.\r\ninfo Disk size without dependencies: \u0022136KB\u0022\r\ninfo Disk size with unique dependencies: \u0022760KB\u0022\r\ninfo Disk size with transitive dependencies: \u0022804KB\u0022\r\ninfo Number of shared dependencies: 5\r\n=\u003E Found \u0022jest-jasmine2#tough-cookie@3.0.1\u0022\r\ninfo Reasons this module exists\r\n   - \u0022_project_#jest-jasmine2#jest-runtime#jest-config#jest-environment-jsdom#jsdom\u0022 depends on it\r\n   - Hoisted from \u0022_project_#jest-jasmine2#jest-runtime#jest-config#jest-environment-jsdom#jsdom#tough-cookie\u0022\r\ninfo Disk size without dependencies: \u0022112KB\u0022\r\ninfo Disk size with unique dependencies: \u0022652KB\u0022\r\ninfo Disk size with transitive dependencies: \u0022652KB\u0022\r\ninfo Number of shared dependencies: 3\r\n=\u003E Found \u0022@jest-runner/electron#tough-cookie@3.0.1\u0022\r\ninfo Reasons this module exists\r\n   - \u0022_project_#@app#infrastructure#@jest-runner#electron#jest-runner#jest-config#jest-environment-jsdom#jsdom\u0022 depends on it\r\n   - Hoisted from \u0022_project_#@app#infrastructure#@jest-runner#electron#jest-runner#jest-config#jest-environment-jsdom#jsdom#tough-cookie\u0022\r\ninfo Disk size without dependencies: \u0022112KB\u0022\r\ninfo Disk size with unique dependencies: \u0022652KB\u0022\r\ninfo Disk size with transitive dependencies: \u0022652KB\u0022\r\ninfo Number of shared dependencies: 3\r\nDone in 0.58s.\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2024-02-21T16:35:14Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52656#issuecomment-1957226338"
      },
      {
        "id": "IC_kwDOAQzde850qUM5",
        "parentId": null,
        "author": "universal",
        "content": "adding an explicit dependency to \u0060\u0022tough-cookie\u0022: \u0022^4.1.3\u0022\u0060 in the electron project appears to also be working. (lerna monorepo...)\r\n\r\nadding trace log if someone ends up googling for this error...\r\n\r\n\u0060\u0060\u0060txt\r\n@app/infrastructure: [2024-02-21T16:43:22.245Z] Debug: Starting HubConnection.\r\n@app/infrastructure: [2024-02-21T16:43:22.245Z] Debug: Starting connection with transfer format \u0027Text\u0027.\r\n@app/infrastructure: [2024-02-21T16:43:22.245Z] Debug: Sending negotiation request: https://some-domain.non-existent/somehub/negotiate?negotiateVersion=1.\r\n@app/infrastructure: [2024-02-21T16:43:22.246Z] Debug: HubConnection failed to start successfully because of error \u0027Error: Failed to complete negotiation with the server: TypeError: Cannot read properties of undefined (reading \u0027secure\u0027)\u0027.\r\n@app/infrastructure: [2024-02-21T16:43:22.246Z] Warning: Error from HTTP request. TypeError: Cannot read properties of undefined (reading \u0027secure\u0027).\r\n@app/infrastructure: [2024-02-21T16:43:22.246Z] Error: Failed to complete negotiation with the server: TypeError: Cannot read properties of undefined (reading \u0027secure\u0027)\r\n@app/infrastructure: [2024-02-21T16:43:22.246Z] Error: Failed to start the connection: Error: Failed to complete negotiation with the server: TypeError: Cannot read properties of undefined (reading \u0027secure\u0027)\r\n\u0060\u0060\u0060",
        "createdAt": "2024-02-21T16:42:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52656#issuecomment-1957249849"
      },
      {
        "id": "IC_kwDOAQzde851Zw4b",
        "parentId": null,
        "author": "danluc",
        "content": "\r\n\r\n\r\n\u003E adding an explicit dependency to \u0060\u0022tough-cookie\u0022: \u0022^4.1.3\u0022\u0060 in the electron project appears to also be working. (lerna monorepo...)\r\n\u003E \r\n\u003E adding trace log if someone ends up googling for this error...\r\n\u003E \r\n\u003E \u0060\u0060\u0060\r\n\u003E @app/infrastructure: [2024-02-21T16:43:22.245Z] Debug: Starting HubConnection.\r\n\u003E @app/infrastructure: [2024-02-21T16:43:22.245Z] Debug: Starting connection with transfer format \u0027Text\u0027.\r\n\u003E @app/infrastructure: [2024-02-21T16:43:22.245Z] Debug: Sending negotiation request: https://some-domain.non-existent/somehub/negotiate?negotiateVersion=1.\r\n\u003E @app/infrastructure: [2024-02-21T16:43:22.246Z] Debug: HubConnection failed to start successfully because of error \u0027Error: Failed to complete negotiation with the server: TypeError: Cannot read properties of undefined (reading \u0027secure\u0027)\u0027.\r\n\u003E @app/infrastructure: [2024-02-21T16:43:22.246Z] Warning: Error from HTTP request. TypeError: Cannot read properties of undefined (reading \u0027secure\u0027).\r\n\u003E @app/infrastructure: [2024-02-21T16:43:22.246Z] Error: Failed to complete negotiation with the server: TypeError: Cannot read properties of undefined (reading \u0027secure\u0027)\r\n\u003E @app/infrastructure: [2024-02-21T16:43:22.246Z] Error: Failed to start the connection: Error: Failed to complete negotiation with the server: TypeError: Cannot read properties of undefined (reading \u0027secure\u0027)\r\n\u003E \u0060\u0060\u0060\r\n\r\nwhere did you put this?\r\nCould you show the complete path?\r\nI have the same problem",
        "createdAt": "2024-02-28T19:22:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52656#issuecomment-1969688091"
      },
      {
        "id": "IC_kwDOAQzde851dOmt",
        "parentId": null,
        "author": "universal",
        "content": "\u003E where did you put this? Could you show the complete path? I have the same problem\r\n\r\nthe log level can be set in the connection constructor like this:\r\n\r\n\u0060\u0060\u0060\r\nthis.connection = new signalR.HubConnectionBuilder()\r\n      .withAutomaticReconnect({\r\n        nextRetryDelayInMilliseconds: () =\u003E\r\n          1000 \u002B (Math.random() * 100)\r\n      })\r\n      .configureLogging(signalR.LogLevel.Trace)\r\n      .withUrl(this.options.url.href)\r\n      .build()\r\n\u0060\u0060\u0060\r\n\r\nand tough-cookie dependency is added to the package.json, for me in \u0060packages/infrastructure/package.json\u0060\r\n\r\n\u0060\u0060\u0060\r\n...\r\n  \u0022dependencies\u0022: {\r\n    \u0022@app/services\u0022: \u0022^1.3.0\u0022,\r\n    \u0022@microsoft/signalr\u0022: \u0022^8.0.0\u0022,\r\n    \u0022electron-unhandled\u0022: \u0022^4.0.1\u0022,\r\n    \u0022tough-cookie\u0022: \u0022^4.1.3\u0022\r\n  },\r\n...\r\n\u0060\u0060\u0060\r\n",
        "createdAt": "2024-02-29T07:55:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52656#issuecomment-1970596269"
      },
      {
        "id": "IC_kwDOAQzde851f8hO",
        "parentId": null,
        "author": "danluc",
        "content": "\u003E \u003E onde voc\u00EA colocou isso? Voc\u00EA poderia mostrar o caminho completo? Eu tenho o mesmo problema\r\n\u003E \r\n\u003E o n\u00EDvel de log pode ser definido no construtor de conex\u00E3o assim:\r\n\u003E \r\n\u003E \u0060\u0060\u0060\r\n\u003E this.connection = new signalR.HubConnectionBuilder()\r\n\u003E       .withAutomaticReconnect({\r\n\u003E         nextRetryDelayInMilliseconds: () =\u003E\r\n\u003E           1000 \u002B (Math.random() * 100)\r\n\u003E       })\r\n\u003E       .configureLogging(signalR.LogLevel.Trace)\r\n\u003E       .withUrl(this.options.url.href)\r\n\u003E       .build()\r\n\u003E \u0060\u0060\u0060\r\n\u003E \r\n\u003E e a depend\u00EAncia de cookies resistentes \u00E9 adicionada ao package.json, para mim em\u0060packages/infrastructure/package.json\u0060\r\n\u003E \r\n\u003E \u0060\u0060\u0060\r\n\u003E ...\r\n\u003E   \u0022dependencies\u0022: {\r\n\u003E     \u0022@app/services\u0022: \u0022^1.3.0\u0022,\r\n\u003E     \u0022@microsoft/signalr\u0022: \u0022^8.0.0\u0022,\r\n\u003E     \u0022electron-unhandled\u0022: \u0022^4.0.1\u0022,\r\n\u003E     \u0022tough-cookie\u0022: \u0022^4.1.3\u0022\r\n\u003E   },\r\n\u003E ...\r\n\u003E \u0060\u0060\u0060\r\n\r\ndoes not work,\r\nbut thanks for the help",
        "createdAt": "2024-02-29T14:51:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52656#issuecomment-1971308622"
      },
      {
        "id": "IC_kwDOAQzde851mryr",
        "parentId": null,
        "author": "danluc",
        "content": "\u003E \u003E where did you put this? Could you show the complete path? I have the same problem\r\n\u003E \r\n\u003E the log level can be set in the connection constructor like this:\r\n\u003E \r\n\u003E \u0060\u0060\u0060\r\n\u003E this.connection = new signalR.HubConnectionBuilder()\r\n\u003E       .withAutomaticReconnect({\r\n\u003E         nextRetryDelayInMilliseconds: () =\u003E\r\n\u003E           1000 \u002B (Math.random() * 100)\r\n\u003E       })\r\n\u003E       .configureLogging(signalR.LogLevel.Trace)\r\n\u003E       .withUrl(this.options.url.href)\r\n\u003E       .build()\r\n\u003E \u0060\u0060\u0060\r\n\u003E \r\n\u003E and tough-cookie dependency is added to the package.json, for me in \u0060packages/infrastructure/package.json\u0060\r\n\u003E \r\n\u003E \u0060\u0060\u0060\r\n\u003E ...\r\n\u003E   \u0022dependencies\u0022: {\r\n\u003E     \u0022@app/services\u0022: \u0022^1.3.0\u0022,\r\n\u003E     \u0022@microsoft/signalr\u0022: \u0022^8.0.0\u0022,\r\n\u003E     \u0022electron-unhandled\u0022: \u0022^4.0.1\u0022,\r\n\u003E     \u0022tough-cookie\u0022: \u0022^4.1.3\u0022\r\n\u003E   },\r\n\u003E ...\r\n\u003E \u0060\u0060\u0060\r\n\r\nI downgraded @microsoft/signalr 8 to 6.0.1 and it worked",
        "createdAt": "2024-03-01T12:08:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52656#issuecomment-1973075115"
      },
      {
        "id": "IC_kwDOAQzde85-MAWG",
        "parentId": null,
        "author": "reworc",
        "content": "I have a similar issue after upgrading to version 8.0.0 (Angular v17 with ASP.NET mono repo) (cf. https://github.com/visualengineers/reflex)\r\nThe issue only arises when packaging the app with Electron.NET, running angular in dev environment works.\r\nFor me, only downgrading to Version 6.0.1 solved the issue",
        "createdAt": "2024-05-17T08:56:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52656#issuecomment-2117076358"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde856HlHe",
    "title": "Nullpointer exception in SignalR Java SDK 8.0.0 HubConnection class",
    "url": "https://github.com/dotnet/aspnetcore/issues/52907",
    "createdAt": "2023-12-19T14:46:22Z",
    "lastUpdated": "2025-01-06T19:05:49Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nAfter updating the SignalR SDK to 8.0.0 in our Android app, we are receiving app crashes in Google Firebase Crashlytics.\r\n\r\n\u0060\u0060\u0060\r\nFatal Exception: java.lang.NullPointerException: Attempt to invoke interface method \u0027rf.a com.microsoft.signalr.Transport.stop()\u0027 on a null object reference\r\n       at com.microsoft.signalr.HubConnection.lambda$stop$16(HubConnection.java:448)\r\n       at io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver.onComplete(CallbackCompletableObserver.java:53)\r\n       at io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorComplete$OnError.onError(CompletableOnErrorComplete.java:64)\r\n       at io.reactivex.rxjava3.subjects.CompletableSubject.onError(CompletableSubject.java:126)\r\n       at com.microsoft.signalr.HubConnection.lambda$start$12(HubConnection.java:358)\r\n       at io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver.onError(CallbackCompletableObserver.java:64)\r\n       at io.reactivex.rxjava3.internal.operators.single.SingleFlatMapCompletable$FlatMapCompletableObserver.onError(SingleFlatMapCompletable.java:97)\r\n       at io.reactivex.rxjava3.internal.observers.ResumeSingleObserver.onError(ResumeSingleObserver.java:51)\r\n       at io.reactivex.rxjava3.internal.operators.single.SingleFlatMap$SingleFlatMapCallback.onError(SingleFlatMap.java:91)\r\n       at io.reactivex.rxjava3.internal.operators.single.SingleMap$MapSingleObserver.onError(SingleMap.java:70)\r\n       at io.reactivex.rxjava3.subjects.SingleSubject.onError(SingleSubject.java:153)\r\n       at com.microsoft.signalr.DefaultHttpClient$2.onFailure(DefaultHttpClient.java:149)\r\n       at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:525)\r\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\r\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:644)\r\n       at java.lang.Thread.run(Thread.java:1012)\r\n\u0060\u0060\u0060\r\n\r\n### Expected Behavior\r\n\r\nCheck for null before accessing the class to avoid null pointer exception.\r\n\r\n### Steps To Reproduce\r\n\r\n\u0060\u0060\u0060\r\nclass MainActivity : ComponentActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val hubConnection: HubConnection = HubConnectionBuilder\r\n            .create(\u0022https://someInvalidUrl\u0022)\r\n            .build()\r\n\r\n        hubConnection.start()\r\n            .subscribe({\r\n                Log.d(\u0022SomeTag\u0022, \u0022Successfully connected to Webserver\u0022)\r\n            }, { e -\u003E\r\n                Log.e(\u0022SomeTag\u0022, \u0022Failed to start connection: ${e.message}\u0022)\r\n            })\r\n\r\n        hubConnection.stop()  // \u003C------ this leads to app crash\r\n            .subscribe({ \r\n                Log.d(\u0022SomeTag\u0022, \u0022HubConnection Stop Success\u0022)\r\n            }, {\r\n                Log.e(\u0022SomeTag\u0022, \u0022HubConnection Stop Failed: ${it.message}\u0022)\r\n            })\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\nAndroid code example is attached:\r\n[SignalRBugForGithub.zip](https://github.com/dotnet/aspnetcore/files/13779913/SignalRBugForGithub.zip)\r\n\r\n",
    "upvotes": 3,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85wELM5",
        "parentId": null,
        "author": "bunjix",
        "content": "Got the same issue for high number of users in production ",
        "createdAt": "2024-01-07T19:00:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52907#issuecomment-1880142649"
      },
      {
        "id": "IC_kwDOAQzde856tDsR",
        "parentId": null,
        "author": "pdapnz",
        "content": "We also encountered this problem. This situation occurs not only in the case of an incorrect URL. Also, these failures are observed when the Internet is slow and unstable, and when the network is switched from GSM to Wifi. \r\n\r\nIn version 7.x, the try catch block helped, but in version 8.x the application crashes, even despite the exception being processed.\r\n\r\n\u0060\u0060\u0060\r\n        try {\r\n            mHubConnection.stop().blockingAwait();\r\n        } catch (Exception e) {\r\n            Timber.e(e);\r\n            mCrashLogger.logException(e);\r\n        }\r\n\u0060\u0060\u0060\r\n\r\nAre there any ideas what this might be related to? Could RxJava\u0027s application-side exception handling be inconsistent? On the server side, we could not detect such failures in the logs.",
        "createdAt": "2024-04-16T09:20:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52907#issuecomment-2058631953"
      },
      {
        "id": "IC_kwDOAQzde86YzzU4",
        "parentId": null,
        "author": "nuhkoca",
        "content": "Same, any update here?",
        "createdAt": "2024-12-27T13:44:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52907#issuecomment-2563716408"
      },
      {
        "id": "IC_kwDOAQzde86Y4dSf",
        "parentId": null,
        "author": "nuhkoca",
        "content": "cc @wtgodbe  ",
        "createdAt": "2024-12-30T01:30:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52907#issuecomment-2564936863"
      },
      {
        "id": "IC_kwDOAQzde86ZaBWL",
        "parentId": null,
        "author": "wtgodbe",
        "content": "@adityamandaleeka @BrennanConroy who owns the Java SignalR client these days?",
        "createdAt": "2025-01-06T19:05:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/52907#issuecomment-2573735307"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde856kzga",
    "title": "SignalR - Getting user claims through dependency injection",
    "url": "https://github.com/dotnet/aspnetcore/issues/53014",
    "createdAt": "2023-12-26T14:38:16Z",
    "lastUpdated": "2024-04-29T22:25:57Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nHow can I get current user claims outside of a \u0060Hub\u0060?\r\n\r\nMy usecase is a multy tenant application where EF Core \u0060DbContext\u0060 is seeded with a \u0060TenantId\u0060 value that in the case of a HTTP request is being extracted within \u0060DbContext\u0060 constructor from current user claims by injecting \u0060IHttpContextAccessor \u0060into the \u0060DbContext\u0060 constructor and then finding the necessary user claim as follows \u0060IHttpContextAccessor.HttpContext.User.Claims.FirstOrDefault(x =\u003E x.Type == \u0022tenantId\u0022).Value\u0060 but I could not find a way of doing an analogous approach in the case of SignalR Hub method call, that is, I could not find a way of injecting current user claims via dependency injection in the case of a SignalR Hub method call in a similar way like it is possible in the conext of HTTP call (as I have described above). So the question is whether there is a way to access \u0060HubCallerContext\u0060 or at least \u0060ClaimsPrincipal\u0060 through a service outside of a Hub?\r\n\r\nThe only related info I could find is the following comment from @analogrelay ([here is the link to it](https://github.com/dotnet/aspnetcore/issues/12535#issuecomment-514900103)):\r\n\r\n\u003E This is by design. There is no active HTTP request in your application when using Azure SignalR.\r\nIf what you\u0027re trying to do is access claims on the user, those should have been copied over to the HubCallerContext.User property (accessible via the Context property on your Hub).\r\n\r\n\r\n\r\n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde857RhMj",
        "parentId": null,
        "author": "seble-nigussie",
        "content": "I\u0027m facing the same issue. @co-dax have you found a solution for this?",
        "createdAt": "2024-04-21T20:32:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53014#issuecomment-2068189987"
      },
      {
        "id": "IC_kwDOAQzde858NCYf",
        "parentId": null,
        "author": "co-dax",
        "content": "@seble-nigussie you can accomplish this using hub filter.",
        "createdAt": "2024-04-29T22:25:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53014#issuecomment-2083792415"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde856-SPu",
    "title": "Update SignalR TransportProtocols doc",
    "url": "https://github.com/dotnet/aspnetcore/issues/53103",
    "createdAt": "2024-01-03T02:00:04Z",
    "lastUpdated": "2024-02-13T01:08:19Z",
    "body": "\u003E Is there an up-to-date documentation for implementors about this feature?\r\n\u003E \r\n\u003E - Main branch\u0027s [TransportProtocols](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md) spec looks very out of date.\r\n\u003E - [This version](https://github.com/dotnet/aspnetcore/blob/58c06cf5813746835d2dd34355ff10ce15c3c38a/src/SignalR/docs/specs/TransportProtocols.md) has some detail about the framing too, but i don\u0027t know how trustworthy the information.\r\n\r\n_Originally posted by @Benedicht in https://github.com/dotnet/aspnetcore/issues/46691#issuecomment-1874271722_\r\n            ",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85vvqmt",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "@BrennanConroy ",
        "createdAt": "2024-01-03T02:02:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53103#issuecomment-1874766253"
      },
      {
        "id": "IC_kwDOAQzde85vws8z",
        "parentId": null,
        "author": "Benedicht",
        "content": "Thanks @adityamandaleeka !",
        "createdAt": "2024-01-03T09:03:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53103#issuecomment-1875038003"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde857hNVZ",
    "title": "[Java Client] No proguard file declaring that we need to keep class members",
    "url": "https://github.com/dotnet/aspnetcore/issues/53238",
    "createdAt": "2024-01-09T12:41:47Z",
    "lastUpdated": "2024-02-13T01:05:50Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nAll Android apps with updated tooling will now use R8 full mode. I do however find it odd that this issue is only occuring for me but I\u0027ll post it here and see whether it gets upvoted or not.\r\n\r\n**TL;DR:**\r\nMinified app does not get SignalR messages. Reason seems to be the class com.microsoft.signalr.HandshakeResponseMessage.\r\n\r\n### Expected Behavior\r\n\r\nSolution is to add the following to either your app\u0027s proguard file or if you have a more module heavy project like I do, add it to your consumer file:\r\n\u0060-keepclassmembers class com.microsoft.signalr.HandshakeResponseMessage\u0060\r\n\r\nThis could of coarse be me doing something wrong but keeping the class members of this particular class works and I can\u0027t find any proguard rules in this repository for the java client or when inspecting the library files.\r\n\r\nThe rule can likely be more specific and the SignalR client is still quite new to me but figured there must be someone else out there struggling with this \uD83D\uDE05\r\n\r\n### Steps To Reproduce\r\n\r\nAndroid project with minification enabled that subscribes to some SignalR channel.\r\n\r\n### Exceptions (if any)\r\n\r\nNone actually. This was a very frustrating thing to figure out as the issue was silent.\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\nSignalR java client versions tested: 8.0.0, 7.0.0 and 7.0.14\r\nAndroid Gradle Plugin: 8.1.4",
    "upvotes": 1,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde858UBlA",
    "title": "SignalR .NET client telemetry",
    "url": "https://github.com/dotnet/aspnetcore/issues/53429",
    "createdAt": "2024-01-17T07:58:40Z",
    "lastUpdated": "2024-09-11T18:12:46Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nThe SignalR .NET client doesn\u0027t have telemetry. This is a gap compared to .NET clients for HTTP and RPC. \u0060HttpClient\u0060 and \u0060GrpcChannel\u0060 have metrics and activities for tracking usage.\n\n### Describe the solution you\u0027d like\n\nSignalR .NET client should have metrics:\r\n\r\n* Conenction-level metrics. This would be similar to the metrics offered on the server.\r\n* Invocation-level metrics. e.g. current active invocations, invocation duration\r\n\r\nAnd it should create an activity for invocations so they show up in tracing.\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85xEELw",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E And it should create an activity for invocations so they show up in tracing.\r\n\r\nTracked by https://github.com/dotnet/aspnetcore/issues/51557\r\n\r\n\u003E SignalR .NET client should have metrics:\r\n\r\nTracked by https://github.com/dotnet/aspnetcore/issues/2461\r\nIf you have specific ones add them to the issue.",
        "createdAt": "2024-01-17T21:40:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53429#issuecomment-1896891120"
      },
      {
        "id": "IC_kwDOAQzde85xHQ4o",
        "parentId": null,
        "author": "JamesNK",
        "content": "I made this issue because so far all the discussion I\u0027ve seen is about server improvements. It can be closed if the other metrics and tracing issues cover both client and server.",
        "createdAt": "2024-01-18T03:33:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53429#issuecomment-1897729576"
      },
      {
        "id": "IC_kwDOAQzde85yVeY5",
        "parentId": null,
        "author": "adityamandaleeka",
        "content": "I suggest moving any client-specific stuff from #2461 to here and closing that one. That issue is long and largely stale.",
        "createdAt": "2024-01-31T02:00:19Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53429#issuecomment-1918232121"
      },
      {
        "id": "IC_kwDOAQzde85yVea8",
        "parentId": null,
        "author": "??",
        "content": "Thanks for contacting us.\n\nWe\u0027re moving this issue to the \u0060.NET 9 Planning\u0060 milestone for future evaluation / consideration. We would like to keep this around to collect more feedback, which can help us with prioritizing this work. We will re-evaluate this issue, during our next planning meeting(s). \nIf we later determine, that the issue has no community involvement, or it\u0027s very rare and low-impact issue, we will close it - so that the team can focus on more important and high impact issues.\nTo learn more about what to expect next and how this issue will be handled you can read more about our triage process [here](https://github.com/dotnet/aspnetcore/blob/main/docs/TriageProcess.md).",
        "createdAt": "2024-01-31T02:00:30Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53429#issuecomment-1918232252"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde859VPGI",
    "title": "Flaky test SignalR.StackExchangeRedis.Tests.RedisEndToEndTests.CanSendAndReceiveUserMessagesUserNameWithPatternIsTreatedAsLiteral",
    "url": "https://github.com/dotnet/aspnetcore/issues/53644",
    "createdAt": "2024-01-26T18:42:55Z",
    "lastUpdated": "2024-08-19T18:49:18Z",
    "body": "## Failing Test(s)\r\n\r\n\u003C!--\r\nProvide the fully qualified name(s) of the failing tests.\r\n--\u003E\r\n\r\n- Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests.CanSendAndReceiveUserMessagesUserNameWithPatternIsTreatedAsLiteral(transportType: LongPolling, protocolName: \u0022json\u0022)\r\n\r\n## Error Message\r\n\r\n\u0060\u0060\u0060text\r\n2024-01-24T22:41:21.1022920Z  | [30.025s] Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests Error: Test threw an exception.\r\n2024-01-24T22:41:21.1022953Z  | System.TimeoutException: The operation has timed out.\r\n2024-01-24T22:41:21.1022984Z  |    at Microsoft.AspNetCore.InternalTesting.TaskExtensions.TimeoutAfter[T](Task\u00601 task, TimeSpan timeout, String filePath, Int32 lineNumber) in /_/src/Shared/TaskExtensions.cs:line 88\r\n2024-01-24T22:41:21.1023014Z  |    at Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests.CanSendAndReceiveUserMessagesUserNameWithPatternIsTreatedAsLiteral(HttpTransportType transportType, String protocolName) in /_/src/SignalR/server/StackExchangeRedis/test/RedisEndToEnd.cs:line 203\r\n2024-01-24T22:41:21.1023065Z  |    at Xunit.Sdk.TestInvoker\u00601.\u003C\u003Ec__DisplayClass48_0.\u003C\u003CInvokeTestMethodAsync\u003Eb__1\u003Ed.MoveNext() in /_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs:line 264\r\n2024-01-24T22:41:21.1023095Z  | --- End of stack trace from previous location ---\r\n2024-01-24T22:41:21.1023290Z  |    at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func\u00601 asyncAction) in /_/src/xunit.execution/Sdk/Frameworks/ExecutionTimer.cs:line 48\r\n2024-01-24T22:41:21.1023332Z  |    at Xunit.Sdk.ExceptionAggregator.RunAsync(Func\u00601 code) in /_/src/xunit.core/Sdk/ExceptionAggregator.cs:line 90\r\n\u0060\u0060\u0060\r\n\r\n## Logs\r\n\r\n\u003Cdetails\u003E\r\n\u003C!--\r\nIf this is a Helix test failure, include the text of the .log artifact from the failing test.\r\nNote that you have to be signed in to Azure DevOps to see the test artifacts.\r\n--\u003E\r\n\r\n\u0060\u0060\u0060text\r\n[0.004s] [TestLifetime] [Information] Starting test CanSendAndReceiveUserMessagesUserNameWithPatternIsTreatedAsLiteral-LongPolling-json at 2024-01-24T22:40:50\r\n[0.005s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Registering handler for client method \u0027Echo\u0027.\r\n[0.005s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Registering handler for client method \u0027Echo\u0027.\r\n[0.005s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Starting HubConnection.\r\n[0.005s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Starting HttpConnection.\r\n[0.005s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Establishing connection with server at \u0027http://127.0.0.1:34291/echo\u0027.\r\n[0.006s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Established connection \u0027oAS76lqCe9uDPjEGXvIJew\u0027 with the server.\r\n[0.006s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Skipping transport WebSockets because it was disabled by the client.\r\n[0.007s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Skipping transport ServerSentEvents because it was disabled by the client.\r\n[0.007s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Starting transport \u0027LongPolling\u0027 with Url: http://127.0.0.1:34291/echo.\r\n[0.007s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Information] Starting transport. Transfer mode: Text.\r\n[0.007s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Starting receive loop.\r\n[0.008s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Starting the send loop.\r\n[0.008s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Transport \u0027LongPolling\u0027 started.\r\n[0.008s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Information] HttpConnection Started.\r\n[0.008s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Information] Using HubProtocol \u0027json v1\u0027.\r\n[0.008s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending Hub Handshake.\r\n[0.008s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Sending 32 bytes to the server using url: http://127.0.0.1:34291/echo?id=0f_Eu8cMZISKhepDiIYQNw.\r\n[0.009s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Message(s) sent successfully.\r\n[0.010s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Received messages from the server.\r\n[0.010s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Handshake with server complete.\r\n[0.010s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Receive loop starting.\r\n[0.010s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Information] HubConnection started.\r\n[0.011s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Starting HubConnection.\r\n[0.011s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Starting HttpConnection.\r\n[0.011s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Establishing connection with server at \u0027http://127.0.0.1:40429/echo\u0027.\r\n[0.013s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Established connection \u0027LuyWGlgPK025txAjCLSS0g\u0027 with the server.\r\n[0.013s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Skipping transport WebSockets because it was disabled by the client.\r\n[0.013s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Skipping transport ServerSentEvents because it was disabled by the client.\r\n[0.013s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Starting transport \u0027LongPolling\u0027 with Url: http://127.0.0.1:40429/echo.\r\n[0.013s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Information] Starting transport. Transfer mode: Text.\r\n[0.014s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Starting receive loop.\r\n[0.014s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Starting the send loop.\r\n[0.014s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Transport \u0027LongPolling\u0027 started.\r\n[0.014s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Information] HttpConnection Started.\r\n[0.014s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Information] Using HubProtocol \u0027json v1\u0027.\r\n[0.014s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending Hub Handshake.\r\n[0.014s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Sending 32 bytes to the server using url: http://127.0.0.1:40429/echo?id=rrKj3yvck6hzRkoNIMQF9w.\r\n[0.016s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Received messages from the server.\r\n[0.017s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Handshake with server complete.\r\n[0.016s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Message(s) sent successfully.\r\n[0.017s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Receive loop starting.\r\n[0.017s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Information] HubConnection started.\r\n[0.017s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Registering Invocation ID \u00271\u0027 for tracking.\r\n[0.017s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending InvocationMessage message \u00271\u0027.\r\n[0.017s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending InvocationMessage message \u00271\u0027 completed.\r\n[0.017s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Sending 88 bytes to the server using url: http://127.0.0.1:40429/echo?id=rrKj3yvck6hzRkoNIMQF9w.\r\n[0.019s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Message(s) sent successfully.\r\n[0.020s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Received messages from the server.\r\n[0.020s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Processing 44 byte message from server.\r\n[30.026s] [Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests] [Error] Test threw an exception.\r\nSystem.TimeoutException: The operation has timed out.\r\n   at Microsoft.AspNetCore.InternalTesting.TaskExtensions.TimeoutAfter[T](Task\u00601 task, TimeSpan timeout, String filePath, Int32 lineNumber) in /_/src/Shared/TaskExtensions.cs:line 88\r\n   at Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests.CanSendAndReceiveUserMessagesUserNameWithPatternIsTreatedAsLiteral(HttpTransportType transportType, String protocolName) in /_/src/SignalR/server/StackExchangeRedis/test/RedisEndToEnd.cs:line 203\r\n   at Xunit.Sdk.TestInvoker\u00601.\u003C\u003Ec__DisplayClass48_0.\u003C\u003CInvokeTestMethodAsync\u003Eb__1\u003Ed.MoveNext() in /_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs:line 264\r\n--- End of stack trace from previous location ---\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func\u00601 asyncAction) in /_/src/xunit.execution/Sdk/Frameworks/ExecutionTimer.cs:line 48\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(Func\u00601 code) in /_/src/xunit.core/Sdk/ExceptionAggregator.cs:line 90\r\n[30.026s] [TestLifetime] [Information] Finished test CanSendAndReceiveUserMessagesUserNameWithPatternIsTreatedAsLiteral-LongPolling-json in 30.0236305s\r\n\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n## Build\r\n\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=539561\u0026view=logs\u0026jobId=3f6d4e0f-1b71-56b5-361e-d95b6e6da15a\r\n",
    "upvotes": 0,
    "labels": [
      "test-failure",
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86I7Mt_",
        "parentId": null,
        "author": "amcasey",
        "content": "https://dev.azure.com/dnceng-public/public/_build/results?buildId=778864",
        "createdAt": "2024-08-19T18:49:17Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53644#issuecomment-2297219967"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde859x2JA",
    "title": "OnConnectedAsync ist sometimes called with the wrong HubConnectionContext",
    "url": "https://github.com/dotnet/aspnetcore/issues/53731",
    "createdAt": "2024-01-31T14:26:27Z",
    "lastUpdated": "2024-02-02T16:43:02Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI have a c# SignalR Server and Client.\r\n\r\nThe connections are authenticated via a AuthenticationHandler that checks a http header and sets NameIdentifier claim on success.\r\n\r\nI have overridden OnConnectedAsync like this:\r\n\r\n\u0060\u0060\u0060c#\r\npublic override Task OnConnectedAsync()\r\n{\r\n    Logger.LogDebug(\u0022OnConnectedAsync {UserIdentifier} {ConnectionId}\u0022, Context.UserIdentifier, Context.ConnectionId);\r\n    return Task.CompletedTask;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nNow i have 12 Clients connecting sequencially to the Host, everything works fine, i see 12 different Users and ConnectionIds in the log.\r\n\r\nWhen i now restart the host, all 12 clients get disconnected an they reconnects after a few seconds. All nearly exact at the same time.\r\n\r\nNow i can see 12 log entries in my log, but not all entries have different connection Ids. Some times there are 12 log entrys with the same ConnectionId and the Same UserIdentifier, sometimes 2 or 3 Different ConnectionIds. \r\n\r\nBut there are always Exact 12 Log entrys and all clients are connected. \r\n\r\nLog looks like this\r\n\r\n\u0060\u0060\u0060\r\nOnConnectedAsync bx-1112-a15b Auh6pXikG_Z_yv-DKd2f7w\r\nOnConnectedAsync bx-6d0d-a085 lAHrxx264qEiy3DVGyBr3A\r\nOnConnectedAsync bx-6d0d-a085 lAHrxx264qEiy3DVGyBr3A\r\nOnConnectedAsync bx-6d0d-a085 lAHrxx264qEiy3DVGyBr3A\r\nOnConnectedAsync bx-6d0d-a085 lAHrxx264qEiy3DVGyBr3A\r\nOnConnectedAsync bx-6d0d-a085 lAHrxx264qEiy3DVGyBr3A\r\nOnConnectedAsync bx-6d0d-a085 lAHrxx264qEiy3DVGyBr3A\r\nOnConnectedAsync bx-6d0d-a085 lAHrxx264qEiy3DVGyBr3A\r\nOnConnectedAsync bx-6d0d-a085 lAHrxx264qEiy3DVGyBr3A\r\nOnConnectedAsync bx-6d0d-a085 lAHrxx264qEiy3DVGyBr3A\r\nOnConnectedAsync bx-6d0d-a085 lAHrxx264qEiy3DVGyBr3A\r\nOnConnectedAsync bx-6d0d-a085 lAHrxx264qEiy3DVGyBr3A\r\n\u0060\u0060\u0060 \r\n\r\n\r\n\r\n\r\n\r\n\r\n### Expected Behavior\r\n\r\nThe resulting log should look more like this\r\n\r\n\u0060\u0060\u0060\r\nOnConnectedAsync bx-559c-bf6b -AuuForEsEmkekc7zl-MFg\r\nOnConnectedAsync bx-8136-3d61 vGzZ3ueAEfXoywbvPRCe8w\r\nOnConnectedAsync bx-a879-10bf q3R7KdUJNBIJX9NsCEZjUg\r\nOnConnectedAsync bx-1112-a15b APXIiXndlvToA7EGRGp6Sg\r\nOnConnectedAsync bx-6d0d-a085 vnigiIvux6uZTFUdJ8jaZQ\r\nOnConnectedAsync bx-5074-7cdf UxnUyiiDnNExL9Zsi2BZGQ\r\nOnConnectedAsync bx-ab74-7078 v_w2XHaL2hWFsdEz0biTFQ\r\nOnConnectedAsync bx-f865-0aa5 hwKVxqG_PcHlhnBxTF7mnQ\r\nOnConnectedAsync bx-078b-ba40 iZ4v7sCklCsSa1fYGBHTBA\r\nOnConnectedAsync bx-4bb1-2f20 ymKoUF7OU0lwu1_otgkvkg\r\nOnConnectedAsync bx-e8fa-cae0 GOVZoyQrHQH22qb5BiQi7g\r\nOnConnectedAsync bx-8136-3d61 NRqC5IIPIBAL2Dz4fJH_kA\r\n\u0060\u0060\u0060 \r\n\r\nthis.Context shoult point to the correct HubConnectionContext inside OnConnectedAsync\r\n\r\n### Steps To Reproduce\r\n\r\nIf you need ist, i can try to make a small sample Project that reproduces the problem.  If you have questione or any ideas what i can try, feel free to ask me. \r\n\r\n### Exceptions (if any)\r\n\r\nI have tested the behavior on different Computers and it seems that there are no problems when the Host ist running on a very slow machine\r\n\r\n### .NET Version\r\n\r\nMicrosoft.AspNetCore.App 8.0.1\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85yac5F",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E If you need ist, i can try to make a small sample Project that reproduces the problem. If you have questione or any ideas what i can try, feel free to ask me.\r\n\r\nYep we\u0027re going to need a minimal repro. ",
        "createdAt": "2024-01-31T17:06:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53731#issuecomment-1919536709"
      },
      {
        "id": "IC_kwDOAQzde85ycRL4",
        "parentId": null,
        "author": "Machibuse",
        "content": "\u003E \u003E If you need ist, i can try to make a small sample Project that reproduces the problem. If you have questione or any ideas what i can try, feel free to ask me.\r\n\u003E \r\n\u003E Yep we\u0027re going to need a minimal repro.\r\n\r\nok, i will try to create one ",
        "createdAt": "2024-01-31T21:37:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53731#issuecomment-1920013048"
      },
      {
        "id": "IC_kwDOAQzde85yo64J",
        "parentId": null,
        "author": "Machibuse",
        "content": "Hi I have written a small sample Project zu reproduce the problem\r\n\r\nhttps://github.com/Machibuse/SignalRTest/tree/main\r\n\r\nThere is a test.bat file for testing. \r\n\r\n- It compiles Host and client\r\n- It starts 20 clients to connect to the host with usernames \u0022user01\u0022 to \u0022user20\u0022 connectiong to http://localhost:32638/myhub\r\n- Then starting the Hub\r\n- All 20 Clients get connected\r\n\r\nThe Log in the Server in OnConnectedAsync looks lite this\r\n\r\nMyHub created\r\nOnConnectedAsync user02 yJ4pu51S3HShegvfZPoZvw\r\nOnConnectedAsync user02 yJ4pu51S3HShegvfZPoZvw\r\nOnConnectedAsync user02 yJ4pu51S3HShegvfZPoZvw\r\nOnConnectedAsync user02 yJ4pu51S3HShegvfZPoZvw\r\nOnConnectedAsync user06 PVKgmTt0IqkWZtGV3npesw\r\nOnConnectedAsync user07 nhYiJUEXfm1i7p2TF_dPkw\r\nOnConnectedAsync user05 RAXwkw3wNpIIpcu8xJ9Dmw\r\nOnConnectedAsync user10 iK4eBbE02PURlTfItvODIA\r\nOnConnectedAsync user11 S29TN3g6PoCcSOlKP6Gxpg\r\nOnConnectedAsync user08 TlBxt29NnzNv2DbwW1DJzQ\r\nOnConnectedAsync user12 OIGlPesL4sNwmjkf18KItg\r\nOnConnectedAsync user13 4mSyzMfQDh8gSgeldy8F5A\r\nOnConnectedAsync user09 ULmuhLVtFgy16DGfLKmJhw\r\nOnConnectedAsync user15 GA1OKXmBd1EUuDmROJEl_Q\r\nOnConnectedAsync user14 Cgbyb5Ip2wlG7HltYL5Umw\r\nOnConnectedAsync user19 F3B4Lub1B9jsjvLdqAmOjg\r\nOnConnectedAsync user18 s_B9QGAFzccmTA9uvWWxpQ\r\nOnConnectedAsync user20 Sr_et6mDwQNlTHIpcgkb_Q\r\nOnConnectedAsync user16 rzFwPOKtlK9g95FgXcre9w\r\nOnConnectedAsync user17 ooGFcnpOUPKD35uJusfMgg\r\n\r\nYou see in my sample OnConnectedAsync for user02 called 4 times, OnConnectedAsync for user 01 03 and 04 are missing.\r\n\r\nyou can press any key to stop and restart the hub and somthing like this happens again, exactly 20 on connected events but not 20 different connections\r\n\r\nOnConnectedAsync user10 ili3BMKdilmaCxz5bKhcIA\r\nOnConnectedAsync user10 ili3BMKdilmaCxz5bKhcIA\r\nOnConnectedAsync user10 ili3BMKdilmaCxz5bKhcIA\r\nOnConnectedAsync user01 bFlau9P62ZUOgato2g5xNQ\r\nOnConnectedAsync user10 ili3BMKdilmaCxz5bKhcIA\r\nOnConnectedAsync user10 ili3BMKdilmaCxz5bKhcIA\r\nOnConnectedAsync user08 ZGYH9CPQc8mw0jzxuwqFlg\r\nOnConnectedAsync user06 GiTMbOfrUklQtHGeROSSbA\r\nOnConnectedAsync user15 yq3uchIYIYdUpEbOCL-1ag\r\nOnConnectedAsync user07 J3xfJTQTMjms75y-RqSHHw\r\nOnConnectedAsync user07 J3xfJTQTMjms75y-RqSHHw\r\nOnConnectedAsync user11 0QhIAAQU7Bh0XMjYIF2YTg\r\nOnConnectedAsync user04 5Sqt-n879UnBQ5HmTtlx8w\r\nOnConnectedAsync user19 yaGnYkB2VDzk-9NNQH20hg\r\nOnConnectedAsync user16 vQQFUuTsYgAfnep-sAtqCQ\r\nOnConnectedAsync user18 NKOPyNByuyuSAFAo4KSXlg\r\nOnConnectedAsync user09 85Hjxb4mLlENeGpl6ybHzQ\r\nOnConnectedAsync user17 MpD0PJMEfDjBvD5crqXj6Q\r\nOnConnectedAsync user14 rn0VsE4l7X4n3TMXGbO7xw\r\nOnConnectedAsync user13 V12dbdJ1nHchMzgR1yxNew\r\n\r\n",
        "createdAt": "2024-02-02T08:37:59Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53731#issuecomment-1923329545"
      },
      {
        "id": "IC_kwDOAQzde85yo96H",
        "parentId": null,
        "author": "Machibuse",
        "content": "Problem stays the same is you remove the Authentication part  \r\n\r\n20 OnConnectedAsync events, but xj0RG1C-AYAGQS9Q7wNmQQ is connected 9 times\r\n\r\nOnConnectedAsync  xj0RG1C-AYAGQS9Q7wNmQQ\r\nOnConnectedAsync  xj0RG1C-AYAGQS9Q7wNmQQ\r\nOnConnectedAsync  xj0RG1C-AYAGQS9Q7wNmQQ\r\nOnConnectedAsync  xj0RG1C-AYAGQS9Q7wNmQQ\r\nOnConnectedAsync  xj0RG1C-AYAGQS9Q7wNmQQ\r\nOnConnectedAsync  xj0RG1C-AYAGQS9Q7wNmQQ\r\nOnConnectedAsync  xj0RG1C-AYAGQS9Q7wNmQQ\r\nOnConnectedAsync  xj0RG1C-AYAGQS9Q7wNmQQ\r\nOnConnectedAsync  xj0RG1C-AYAGQS9Q7wNmQQ\r\nOnConnectedAsync  6ORsez4_f6XWOWUL2z1jUg\r\nOnConnectedAsync  S0di3pluUE0KqUJeRTOTLg\r\nOnConnectedAsync  g576e19kkDYXVfIy5l1k6A\r\nOnConnectedAsync  iEzyUH4X9vIR8li5iL2qVA\r\nOnConnectedAsync  R2XQJzjLef8rVwhChMuRQg\r\nOnConnectedAsync  nI82pY9Gxa7Q6e9AqOgBSA\r\nOnConnectedAsync  VABSUGrt8N9JKuwhdNlm-w\r\nOnConnectedAsync  46tzPWYyN2acOCCejNNB2Q\r\nOnConnectedAsync  ndCaeFqZhaJEatneZq9zGg\r\nOnConnectedAsync  CWdtv6bo_889VcQGDGNkyg\r\nOnConnectedAsync  n3AB4uo5n2Xf28x0vwZQ5w",
        "createdAt": "2024-02-02T08:45:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53731#issuecomment-1923341959"
      },
      {
        "id": "IC_kwDOAQzde85ypGA6",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Problem stays the same is you remove the Authentication part\r\n\r\nCan you remove it then?",
        "createdAt": "2024-02-02T09:07:50Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53731#issuecomment-1923375162"
      },
      {
        "id": "IC_kwDOAQzde85ypHsP",
        "parentId": null,
        "author": "Machibuse",
        "content": "\u003E \u003E Problem stays the same is you remove the Authentication part\r\n\u003E \r\n\u003E Can you remove it then?\r\n\r\ni found the problem\r\n\r\n\u0060\u0060\u0060\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.Services.AddSignalR();\r\nbuilder.Services.AddSingleton\u003CMyHub\u003E();\r\nbuilder.WebHost.UseUrls(\u0022http://*:32638/\u0022);\r\n\r\nvar app = builder.Build();\r\n\r\napp.MapHub\u003CMyHub\u003E(\u0022/myhub\u0022);\r\n\r\nvar task = app.RunAsync();\r\n\u0060\u0060\u0060\r\n\r\nwhen i remove the line \r\n\r\nbuilder.Services.AddSingleton\u003CMyHub\u003E();\r\n\r\nit works as expected. i will commit a smaller version\r\n",
        "createdAt": "2024-02-02T09:12:20Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53731#issuecomment-1923382031"
      },
      {
        "id": "IC_kwDOAQzde85ypI8p",
        "parentId": null,
        "author": "davidfowl",
        "content": "@BrennanConroy we should just throw when people add singleton hubs. This is a foot gun. @Machibuse hubs are supposed to be transient. ",
        "createdAt": "2024-02-02T09:15:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53731#issuecomment-1923387177"
      },
      {
        "id": "IC_kwDOAQzde85ypRB7",
        "parentId": null,
        "author": "Machibuse",
        "content": "ok, i have updated the repo.\r\n\r\ni think this could be fatal also for other people.  I can use AddSingleton and everything works fine for a long Time, and users did not detect that they have problems.  Because they only occures when there are many connections at the same time.\r\n\r\ni hope it is possible for you to detect this for you an raise an error, to beware other people from the same \u0022 foot gun\u0022 :-)\r\n",
        "createdAt": "2024-02-02T09:33:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53731#issuecomment-1923420283"
      },
      {
        "id": "IC_kwDOAQzde85ysbOx",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E @BrennanConroy we should just throw when people add singleton hubs.\r\n\r\nI tried in the past https://github.com/dotnet/aspnetcore/pull/40396",
        "createdAt": "2024-02-02T16:43:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/53731#issuecomment-1924248497"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde85_eBp-",
    "title": "Allow to check the maximum size of the SignalR message on the client side",
    "url": "https://github.com/dotnet/aspnetcore/issues/54068",
    "createdAt": "2024-02-16T12:58:21Z",
    "lastUpdated": "2024-02-16T13:22:52Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI am trying to handle in the client that if the message to send exceeds the maximum message size allowed in the server I can show at least a log so that if the connection fails at least I can know the cause.\r\n\r\nI know that using on the server side \u0060EnableDetailedErrors = true\u0060 could achieve the same but that property is very generic and if any other error occurs I don\u0027t want it to expose information that could be sensitive.\r\n\r\nThat is why I am doing some reverse engineering and although it is not pretty, I think there is no other alternative to do this as of today:\r\n\r\n\u0060\u0060\u0060csharp\r\nstatic int InvocationMessageByteCount(HubConnection hubConnection, string invocationId, string target, object[] arguments)\r\n{\r\n    IHubProtocol hubProtocol = (IHubProtocol)hubConnection.GetType()\r\n        .GetField(\u0022_protocol\u0022, BindingFlags.NonPublic | BindingFlags.Instance)\r\n        .GetValue(hubConnection);\r\n\r\n    InvocationMessage invocationMessage = new(invocationId, target, arguments);\r\n\r\n    ArrayBufferWriter\u003Cbyte\u003E data = new();\r\n\r\n    hubProtocol.WriteMessage(invocationMessage, data);\r\n\r\n    return data.WrittenCount;\r\n}\r\n\u0060\u0060\u0060\r\n\r\nAnd to know if it exceeds the message size limit is simply to make a check of that value: \u0022byteCount \u003E 32768\u0022 (default value of the server).\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nThat there is an API similar to the method I have made included by default.\r\n\r\n### Additional context\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86AU1zP",
    "title": "SignalR SauceLab tests no longer running ",
    "url": "https://github.com/dotnet/aspnetcore/issues/54218",
    "createdAt": "2024-02-25T21:22:30Z",
    "lastUpdated": "2024-02-25T21:22:35Z",
    "body": "Another artifact of moving to npm is the SignalR daily tests that run on SauceLabs, no longer run.\r\nhttps://github.com/dotnet/aspnetcore/commit/8c27269b1947d74248893c239bd6a9d103fcfd0c#diff-953cb0bf787a7165b358699768f2c191c72154a23a35375e967d3bba5e5e43e1L41\r\n\r\ncc @javiercn ",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86BIomp",
    "title": "SignalR redis perf : consider sharded pub/sub when available",
    "url": "https://github.com/dotnet/aspnetcore/issues/54344",
    "createdAt": "2024-03-04T10:42:31Z",
    "lastUpdated": "2024-05-28T00:00:00Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nShort version: consider integrating with https://github.com/StackExchange/StackExchange.Redis/pull/2498/ (when deployed) to exploit \u0060SSUBSCRIBE\u0060/\u0060SPUBLISH\u0060 when appropriate\r\n\r\nJustification: overall system performance by reducing overheads in redis-cluster (no client-specific performance impact, but the reduced server load should measurably improve overall system throughput - especially in large clusters and where multiple channels are in use, since the number of server-to-server connections is super-linear vs node count)\r\n\r\n---\r\n\r\nSignalR on redis makes extensive use of \u0060SUBSCRIBE\u0060 / \u0060PUBLISH\u0060; on redis vanilla, that is simple, but in \u0022cluster\u0022 mode (for highly scalable or redundant environments), these operate in a simple scatter/web mode - which is to say: a subscriber can connect to any server, and a publisher can publish on any server - the server will use inter-node gossip to route the messages everywhere. This is simple and easy, but has additional overheads:\r\n\r\n- lots of inter-server communication to get data everywhere\r\n- possible unnecessary delays and ordering concerns\r\n\r\nThese overheads seem directly relevant to high throughput SignalR scenarios.\r\n\r\nTo reduce these overheads, Redis 7 adds [\u0060SSUBSCRIBE\u0060](https://redis.io/commands/ssubscribe/) and [\u0060SPUBLISH\u0060](https://redis.io/commands/spublish/) - the sharded variant of pub/sub - *without* chaos mode. This means that clients need to subscribe and publish using standard routing. Because of the risk of undelivered messages, and the fact that it is Redis 7 only: even though SE.Redis *already* routes using the channel, we do not default to \u0060SSUBSCRIBE\u0060 / \u0060SPUBLISH\u0060.\r\n\r\nSupport for this feature is added in https://github.com/StackExchange/StackExchange.Redis/pull/2498/ ; note that you should ideally use configuration and/or feature detection (it has been added to the features API) and switch between \u0060RedisChannel.Literal\u0060 and \u0060RedisChannel.Sharded\u0060.\r\n\r\nNote also that there is a migration caveat: if migrating to enable the use of sharded, then in a hybrid app-cluster (i.e. some nodes updated, some not), the nodes using shaded vs vanilla usage might not cooperate nicely\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nconsider using the new API when available\r\n\r\n### Additional context\r\n\r\n1. note that *pattern* (glob, wildcard, etc) channel subscriptions cannot be sharded; they *must* use the web/chaos mode\r\n2. note that \u0060SPUBLISH\u0060/\u0060SSUBSCRIBE\u0060 require either a server capability test or an enable/disable toggle (either server-version based, or by attempting \u0060SPUBLISH {random guid} {whatever}\u0060 and observing \u0060-ERR unknown command \u0027spublish\u0027\u0060)\r\n3. note that \u0060SPUBLISH\u0060/\u0060SSUBSCRIBE\u0060 are fine to use on standalone (non-cluster) redis\r\n4. note that \u0060SPUBLISH\u0060 and \u0060PUBLISH\u0060 are effectively isolated; a client connecting via \u0060SUBSCRIBE foo\u0060 *will not* get a message published via \u0060SPUBLISH foo bar\u0060, etc; this means that nodes in an application must agree on the strategy being used\r\n\r\nSide note: since this requires a lib bump, you might *also* want to consider whether enabling RESP3 is appropriate; RESP3 halves the number of sockets required for pub/sub environments; see [RESP3 and StackExchange.Redis](https://stackexchange.github.io/StackExchange.Redis/Resp3) for more info including necessary considerations",
    "upvotes": 1,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde8519mPf",
        "parentId": null,
        "author": "mgravell",
        "content": "@davidfowl  for curiosity ^^^ ",
        "createdAt": "2024-03-05T15:49:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54344#issuecomment-1979081695"
      },
      {
        "id": "IC_kwDOAQzde858dH_b",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Any ETA on the feature being added since the PR has been open for almost a year?",
        "createdAt": "2024-05-01T05:40:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/54344#issuecomment-2088009691"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86F6Tgc",
    "title": "Expose more groups features in signalR",
    "url": "https://github.com/dotnet/aspnetcore/issues/55165",
    "createdAt": "2024-04-16T18:28:55Z",
    "lastUpdated": "2024-05-01T11:43:12Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n_No response_\n\n### Describe the solution you\u0027d like\n\nThe [IGroupManager](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/server/Core/src/IGroupManager.cs) should expose more methods for better utilizing the groups and connections. Subsequently, the [HubLifetimeManager](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/server/Core/src/HubLifetimeManager.cs).\r\n\r\n1. It should allow to get the groups by a connection (something like \u0060GetGroupsByConnection\u0060).\r\n2. It should allow to get the connections by a group (something like \u0060GetConnectionsByGroup\u0060).\r\n\r\nThese will allow better control over the connection and its groups, for instance if we have added a connection to a group and later we want to clear all the groups - this will allow us to get the list of the groups and remove the connection from them.\r\n\r\n\n\n### Additional context\n\n_No response_",
    "upvotes": 3,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde858eV9g",
        "parentId": null,
        "author": "NaNgets",
        "content": "If I will make a pull request for it, will it be considered?\r\n\r\nThere are no responses so I don\u0027t want to work and be overlooked.",
        "createdAt": "2024-05-01T11:43:11Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55165#issuecomment-2088329056"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86GN2H3",
    "title": "Select the protocol to be used by Signalr",
    "url": "https://github.com/dotnet/aspnetcore/issues/55210",
    "createdAt": "2024-04-18T23:34:47Z",
    "lastUpdated": "2024-04-21T22:58:01Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nConnecting clients fail when scaling in during autoscaling.\n\n### Describe the solution you\u0027d like\n\nWe want to be able to select the protocol to be used by Signalr, and by selecting long polling, we want to be able to scale in when autoscaling. Connecting users without errors.\n\n### Additional context\n\nWe plan to use Blazor Server. One of the challenges is that it is difficult to scale in.",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde857M6x9",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E Connecting clients fail when scaling in during autoscaling.\r\n\r\nSo when reducing machines you get connection failures, presumably because the client(s) were connected to the machines that are no longer provisioned? That\u0027s not really something SignalR can do anything about.\r\n\r\n\u003E by selecting long polling, we want to be able to scale in when autoscaling\r\n\r\nI don\u0027t see the relationship here. Why is long polling important to autoscaling?",
        "createdAt": "2024-04-19T17:18:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55210#issuecomment-2066984061"
      },
      {
        "id": "IC_kwDOAQzde857RtiI",
        "parentId": null,
        "author": "n2029-ndensan",
        "content": "If it is not a problem with the protocol, is there a problem with the implementation of SignalR on the application side? The state is maintained in memory on the server side. If it is retained, it cannot be stored in external resources such as DB or Redis.If the state is retained in server memory and it takes time to change the SignalR implementation, is it possible to monitor whether SignalR is connected? With AzureMonitor etc.If connection monitoring is possible, I think it would be possible to temporarily disconnect SignalR with SSR and scale in when there is no SignalR connection.",
        "createdAt": "2024-04-21T22:58:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55210#issuecomment-2068240520"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86Gh0Nn",
    "title": "\u0060/*#__PURE__*/\u0060 annotations dont work well with Vite / Rollup",
    "url": "https://github.com/dotnet/aspnetcore/issues/55286",
    "createdAt": "2024-04-22T16:46:17Z",
    "lastUpdated": "2025-01-16T07:49:28Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nrunning \u0060vite build\u0060 thows warnings about pure annotations\r\n\r\n\u0060\u0060\u0060\r\n1\u003E  node_modules/@microsoft/signalr/dist/esm/Utils.js (189:0): A comment\r\n1\u003E\r\n1\u003E  \u0022/*#__PURE__*/\u0022\r\n1\u003E\r\n1\u003E  in \u0022node_modules/@microsoft/signalr/dist/esm/Utils.js\u0022 contains an annotation that Rollup cannot interpret due to the position of the comment. The comment will be removed to avoid issues.\r\n\u0060\u0060\u0060\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
    "upvotes": 13,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde857gIyo",
        "parentId": null,
        "author": "daomtthuan",
        "content": "\u002B1\r\n\r\nIt was fixed at this\r\nhttps://github.com/rollup/rollup/issues/5324\r\n\r\nhmm, or not \uD83E\uDD14",
        "createdAt": "2024-04-23T11:08:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55286#issuecomment-2072022184"
      },
      {
        "id": "IC_kwDOAQzde858qbRz",
        "parentId": null,
        "author": "drewkill32",
        "content": "I\u0027m having the issue and it it a bug in the javascript signalR client. Rollup expects the \u0022/*#__PURE__*/\u0022 annotations on function calls or constructor invocation, not on module function declaration. [Rollup REPL](https://rollupjs.org/repl/?version=4.5.0\u0026shareable=JTdCJTIyZXhhbXBsZSUyMiUzQSUyMiUyMiUyQyUyMm1vZHVsZXMlMjIlM0ElNUIlN0IlMjJjb2RlJTIyJTNBJTIyJTJGJTJGJTIwZXNsaW50LWRpc2FibGUtbmV4dC1saW5lJTIwc3BhY2VkLWNvbW1lbnQlNUNuJTJGKiUyM19fUFVSRV9fKiUyRiUyMGZ1bmN0aW9uJTIwZ2V0T3NOYW1lKCklMjAlN0IlNUNuJTIwJTIwJTIwJTIwaWYlMjAoUGxhdGZvcm0uaXNOb2RlKSUyMCU3QiU1Q24lMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzd2l0Y2glMjAocHJvY2Vzcy5wbGF0Zm9ybSklMjAlN0IlNUNuJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwY2FzZSUyMCU1QyUyMndpbjMyJTVDJTIyJTNBJTVDbiUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHJldHVybiUyMCU1QyUyMldpbmRvd3MlMjBOVCU1QyUyMiUzQiU1Q24lMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBjYXNlJTIwJTVDJTIyZGFyd2luJTVDJTIyJTNBJTVDbiUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHJldHVybiUyMCU1QyUyMm1hY09TJTVDJTIyJTNCJTVDbiUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGNhc2UlMjAlNUMlMjJsaW51eCU1QyUyMiUzQSU1Q24lMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjByZXR1cm4lMjAlNUMlMjJMaW51eCU1QyUyMiUzQiU1Q24lMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBkZWZhdWx0JTNBJTVDbiUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHJldHVybiUyMHByb2Nlc3MucGxhdGZvcm0lM0IlNUNuJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTdEJTVDbiUyMCUyMCUyMCUyMCU3RCU1Q24lMjAlMjAlMjAlMjBlbHNlJTIwJTdCJTVDbiUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHJldHVybiUyMCU1QyUyMiU1QyUyMiUzQiU1Q24lMjAlMjAlMjAlMjAlN0QlNUNuJTdEJTIyJTJDJTIyaXNFbnRyeSUyMiUzQXRydWUlMkMlMjJuYW1lJTIyJTNBJTIybWFpbi5qcyUyMiU3RCU1RCUyQyUyMm9wdGlvbnMlMjIlM0ElN0IlN0QlN0Q=)\r\n\r\nI created PR #55496 ",
        "createdAt": "2024-05-02T20:26:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55286#issuecomment-2091496563"
      },
      {
        "id": "IC_kwDOAQzde86B3NZQ",
        "parentId": null,
        "author": "mityaua",
        "content": "Still actual.",
        "createdAt": "2024-06-19T13:32:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55286#issuecomment-2178733648"
      },
      {
        "id": "IC_kwDOAQzde86MsgJv",
        "parentId": null,
        "author": "vito-rubino",
        "content": "I confirm this is still an issue in SignalR",
        "createdAt": "2024-09-19T09:24:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55286#issuecomment-2360476271"
      },
      {
        "id": "IC_kwDOAQzde86WBwXQ",
        "parentId": null,
        "author": "nichita-pasecinic",
        "content": "Actual for now, vite \u0026 rollup throws a warning for such comments",
        "createdAt": "2024-12-04T11:24:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55286#issuecomment-2517042640"
      },
      {
        "id": "IC_kwDOAQzde86YbSEl",
        "parentId": null,
        "author": "rogerfar",
        "content": "If you want to hide this warning you can use this vite plugin:\n\n\u0060\u0060\u0060javascript\nexport default defineConfig({\n  plugins: [\n    {\n      // Removes pure annotations from SignalR: https://github.com/dotnet/aspnetcore/issues/55286\n      name: \u0027remove-pure-annotations\u0027,\n      enforce: \u0027pre\u0027,\n      transform(code, id) {\n        if (id.includes(\u0027node_modules/@microsoft/signalr\u0027)) {\n          return code.replace(/\\/\\*#__PURE__\\*\\//g, \u0027\u0027);\n        }\n        return null;\n      }\n    }\n  ],\n});\n\n\u0060\u0060\u0060",
        "createdAt": "2024-12-20T16:08:43Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55286#issuecomment-2557288741"
      },
      {
        "id": "IC_kwDOAQzde86YfvfY",
        "parentId": null,
        "author": "daomtthuan",
        "content": "\u003E If you want to hide this warning you can use this vite plugin:\n\u003E \n\u003E export default defineConfig({\n\u003E   plugins: [\n\u003E     {\n\u003E       // Removes pure annotations from SignalR: https://github.com/dotnet/aspnetcore/issues/55286\n\u003E       name: \u0027remove-pure-annotations\u0027,\n\u003E       enforce: \u0027pre\u0027,\n\u003E       transform(code, id) {\n\u003E         if (id.includes(\u0027node_modules/@microsoft/signalr\u0027)) {\n\u003E           return code.replace(/\\/\\*#__PURE__\\*\\//g, \u0027\u0027);\n\u003E         }\n\u003E         return null;\n\u003E       }\n\u003E     }\n\u003E   ],\n\u003E });\n\nyeah I am using this way to remove warnings.",
        "createdAt": "2024-12-22T13:30:15Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55286#issuecomment-2558457816"
      },
      {
        "id": "IC_kwDOAQzde86aqLAU",
        "parentId": null,
        "author": "moritz-baecker-integra",
        "content": "\u003E \u003E If you want to hide this warning you can use this vite plugin:\n\u003E \u003E export default defineConfig({\n\u003E \u003E plugins: [\n\u003E \u003E {\n\u003E \u003E // Removes pure annotations from SignalR: https://github.com/[/issues/55286](https://github.com/dotnet/aspnetcore/issues/55286)\n\u003E \u003E name: \u0027remove-pure-annotations\u0027,\n\u003E \u003E enforce: \u0027pre\u0027,\n\u003E \u003E transform(code, id) {\n\u003E \u003E if (id.includes(\u0027node_modules/@microsoft/signalr\u0027)) {\n\u003E \u003E return code.replace(//*#**PURE***//g, \u0027\u0027);\n\u003E \u003E }\n\u003E \u003E return null;\n\u003E \u003E }\n\u003E \u003E }\n\u003E \u003E ],\n\u003E \u003E });\n\nThank you. Maybe interesting for others to generate SourceMaps for this modified code im using Magic-String:\n\n\u0060\u0060\u0060    \n{\n      // Removes pure annotations from SignalR: https://github.com/dotnet/aspnetcore/issues/55286\n      name: \u0027remove-pure-annotations\u0027,\n      enforce: \u0027pre\u0027,\n      transform(code, id) {\n        if (id.includes(\u0027node_modules/@microsoft/signalr\u0027)) {\n          const magicString = new MagicString(code);\n          const modifiedCode = code.replace(/\\/\\*#__PURE__\\*\\//g, \u0027\u0027);\n    \n          if (modifiedCode !== code) {\n            magicString.overwrite(0, code.length, modifiedCode);\n    \n            return {\n              code: magicString.toString(),\n              map: magicString.generateMap({ hires: true }),\n            };\n          }\n        }\n      }\n    }\n\u0060\u0060\u0060",
        "createdAt": "2025-01-16T07:48:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55286#issuecomment-2594746388"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86H7zxT",
    "title": "(SignalR): Support custom output formatter",
    "url": "https://github.com/dotnet/aspnetcore/issues/55546",
    "createdAt": "2024-05-06T10:58:15Z",
    "lastUpdated": "2024-05-06T22:10:29Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI want to be able to have more control over object serialization. Using MVC I\u0027m able to serialize only interface properties / support polymorphism etc. using a custom output formatter. SignalR passes the value (as object, not generic so even the type info gets lost) to a \u0060JsonSerializeObject\u0060 method so no chance for a clean solution here.\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nIt would be nice if some kind of \u0022output / input formatter\u0022 (analogous MVC) could be set. It sure behaves a bit different here, since there is no defined encoding (like HTTP has) but still an input / output-formatter would be great. Maybe not a list but just a single instance (with your one as default fallback).\r\n\r\n### Additional context\r\n\r\nBtw.: your \u0060JsonHubProtocolOptions\u0060 has still setable \u0060PayloadSerializerOptions\u0060. Guess that should be marked readonly (#27727).",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86IERQu",
    "title": "Stateful reconnect doesn\u0027t work as expected when using Redis backplane",
    "url": "https://github.com/dotnet/aspnetcore/issues/55575",
    "createdAt": "2024-05-07T10:03:44Z",
    "lastUpdated": "2024-05-09T09:42:52Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nStateful reconnect requires that both client and server calculate the same sequence Id so when the reconnect happen they can resume on the right message, but when using Redis as backplane a different code path is used, which ends up causing some messages not being accounted for in the server side and creating a discrepancy that leads to lost messages on reconnect.\r\nThe whole sequence Id calculation happens in MessageBuffer class, which increases the Id every time an invocation message is sent (in WriteAsyncCore), skipping the count otherwise. \r\n\r\nThe problem is that when using Redis, the message comes as a SerializedHubMessage using a constructor that doesn\u0027t set the Message property, so when MessageBuffer tries to determine if it\u0027s an invocation message, \u0060is\u0060 operator returns false as the message is null, and thus this message doesn\u0027t increment the sequence Id.\r\nOn the client side is read correctly, identified as an Invocation, and increments the sequence Id, create a discrepancy that will essentially break stateful reconnect.\r\n\n\n### Expected Behavior\n\nSequence Id is kept in sync in both client side and server side. This is critical for stateful reconnect to work properly.\n\n### Steps To Reproduce\n\n1. Create a new SignalR core project, with Redis backplane.\r\n2. Enable stateful reconnect on both client and server.\r\n3. Send a message to all users (or a group), so it\u0027s sent through the backplane.\r\n4. Observe how _totalMessageCount in MessageBuffer in server side is not incremented with SerializedHubMessage coming from Redis backplane.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.3\n\n### Anything else?\n\nThe issue is pretty easy to spot once you know where to look.\r\n\r\nObserve here how MessageBuffer.cs:124 expects Message property to be not null.\r\n![image](https://github.com/dotnet/aspnetcore/assets/68167947/2dc248bd-f71d-42f1-a6a3-752cb7b3d0dd)\r\n\r\nObserve here the constructor in SerializedHubMessage.cs:27 that is used by Redis backplane. No assignment of Message property.\r\n![image](https://github.com/dotnet/aspnetcore/assets/68167947/43120aec-ec28-49e9-b785-4f7102f3a842)\r\n\r\nObserve here how MessageBuffer.cs:161 checks message using \u0060is\u0060 operator that will yield false as it is null, not incrementing the sequence Id as it should have.\r\n![image](https://github.com/dotnet/aspnetcore/assets/68167947/4d08aa6c-5e54-4bf3-bf6f-7f263f34e721)\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde859TtQT",
        "parentId": null,
        "author": "ruben-ivre",
        "content": "So far I have a workaround it that is to change that WriteAsync function to create an empty invocation message if hubMessage.Message is null, which works for my use case, but it\u0027s not a very good solution.\r\n![image](https://github.com/dotnet/aspnetcore/assets/68167947/cffec415-e042-4ecd-bcf6-74c9f6b2e2e0)\r\n\r\nProbably a better option would be to add some info to SerializedHubMessage to be able to reconstruct the proper message type. If you can point me to a proper solution, I can work on that.",
        "createdAt": "2024-05-09T09:42:28Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55575#issuecomment-2102318099"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86InBUn",
    "title": "Allow more granular return types in signalR",
    "url": "https://github.com/dotnet/aspnetcore/issues/55683",
    "createdAt": "2024-05-13T06:25:07Z",
    "lastUpdated": "2024-05-13T18:42:33Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\n_No response_\r\n\r\n### Describe the solution you\u0027d like\r\n\r\nCurrently you can only return a type and in the [DefaultHubDispatcher](https://github.com/dotnet/aspnetcore/blob/0e7349e41a112a0c62f364ce9666a1a7dd4dc2fd/src/SignalR/server/Core/src/Internal/DefaultHubDispatcher.cs#L397) it forwards it to a [CompletionMessage](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/common/SignalR.Common/src/Protocol/CompletionMessage.cs) while indicating the result or error.\r\n\r\nThis way, we can\u0027t return a type which should be handled as an error (like an error action result) so to eliminate the use of \u0060throw\u0060, nor we can return an object which will decide the return type upon processing (e.g. type unions such as in OneOf package).\r\n\r\nI suggest we support another general return type of CompletionMessage whilst overriding the \u0060InvocationId\u0060 (or create a new class with similar properties for result and error) which will allow this sort of behavior.\r\n\r\nThis will allow the application to better control the returned data (result or error).\r\n\r\n### Additional context\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde859ktRS",
        "parentId": null,
        "author": "davidfowl",
        "content": "That code sample is pointing at the wrong SignalR implementation. Did you intend to file an issue on https://github.com/SignalR/SignalR? If yes, I can tell you that implementation in not being evolved anymore.",
        "createdAt": "2024-05-13T06:45:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55683#issuecomment-2106774610"
      },
      {
        "id": "IC_kwDOAQzde859kwd2",
        "parentId": null,
        "author": "NaNgets",
        "content": "My bad, I\u0027ll have to look further for the correct implementation in the current code, will update the issue ASAP.",
        "createdAt": "2024-05-13T06:54:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55683#issuecomment-2106787702"
      },
      {
        "id": "IC_kwDOAQzde859k6o3",
        "parentId": null,
        "author": "davidfowl",
        "content": "If you\u0027re going to update the issue, I\u0027d suggest also explaining the \u0022why\u0022. I have no idea what you are trying to accomplish from reading this issue. ",
        "createdAt": "2024-05-13T07:19:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55683#issuecomment-2106829367"
      },
      {
        "id": "IC_kwDOAQzde859lfiw",
        "parentId": null,
        "author": "NaNgets",
        "content": "As I said - two scenarios I want to handle:\r\n\r\n1) Enable returning errors without throwing them. As you know - \u0060throw\u0060 has some effect on the efficiency of the call. In the API we can return an ActionResult which will result in an HTTP error, so why not return a type which will be processed and handled as an error? Thus enabling to \u0027return\u0027 the error without throwing it.\r\n\r\n2) Enable multiple types return. I have a class, e.g. \u0060ActionResult\u003CT1, T2\u003E\u0060, which on API returns the type which is filled, only one (T1 or T2). In signalR I can\u0027t return that type because it will be parsed with properties I don\u0027t need\\want. So I would like to be able to return a dynamic type but without the \u0060dynamic\u0060 keyword, something more strong-typed, in which I might have something like \u0060GetResult\u0060 which will either return the type or an error, and be handled accordingly.",
        "createdAt": "2024-05-13T08:38:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55683#issuecomment-2106980528"
      },
      {
        "id": "IC_kwDOAQzde859mBQQ",
        "parentId": null,
        "author": "NaNgets",
        "content": "@davidfowl updated.",
        "createdAt": "2024-05-13T09:44:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55683#issuecomment-2107118608"
      },
      {
        "id": "IC_kwDOAQzde859psvV",
        "parentId": null,
        "author": "davidfowl",
        "content": "\u003E Enable returning errors without throwing them. As you know - throw has some effect on the efficiency of the call. In the API we can return an ActionResult which will result in an HTTP error, so why not return a type which will be processed and handled as an error? Thus enabling to \u0027return\u0027 the error without throwing it.\r\n\r\nYou can do this already without changes to the protocol or code. Return an object with 2 values.\r\n\r\n\u003E Enable multiple types return. I have a class, e.g. ActionResult\u003CT1, T2\u003E, which on API returns the type which is filled, only one (T1 or T2). In signalR I can\u0027t return that type because it will be parsed with properties I don\u0027t need\\want. So I would like to be able to return a dynamic type but without the dynamic keyword, something more strong-typed, in which I might have something like GetResult which will either return the type or an error, and be handled accordingly.\r\n\r\nI\u0027m not understanding this part.\r\n\r\nCan you share a code sample for what you want to write on the server and client using the existing SignalR APIs (Using the JavaScript client)? That would also help us understand if there\u0027s an associated protocol change required.\r\n\r\nFWIW: The wire protocol is documented here https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/HubProtocol.md. I\u0027m not sure yet how your proposal affects either the API or the wire protocol based on your description.\r\n",
        "createdAt": "2024-05-13T15:53:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55683#issuecomment-2108083157"
      },
      {
        "id": "IC_kwDOAQzde859rgey",
        "parentId": null,
        "author": "NaNgets",
        "content": "My proposal doesn\u0027t affect the API or the wire protocol, it affects the DefaultHubDispatcher in which it will allow for more fine-grained return types.\r\n\r\nI want to be able to return an error and it will be treated as an error, instead of throwing it, how is returning an object with 2 values does that?\r\n\r\nIn my view, having a new interface called \u0060IHubInvocationMessageConvertable\u0060 which will have a method called \u0060ConvertToMessage()\u0060 which will return a HubMessage, and if the return type is this new interface then the DefaultHubDispatcher should send it instead of wrapping it.\r\n\r\ne.g.:\r\n\u0060\u0060\u0060\r\npublic MyMessageClass : IHubInvocationMessageConvertable\r\n{\r\n    public Exception? _error;\r\n    public int? _item1;\r\n    public string? _item2;\r\n    ...\r\n    public HubMessage ConvertToMessage()\r\n    {\r\n        if (this._error != null)\r\n        {\r\n            return CompletionMessage.WithError(...);\r\n        }\r\n        if (this._item1 != null)\r\n        {\r\n             return CompletionMessage.WithResult(this._item1);\r\n        }\r\n        if (this._item2 != null)\r\n        {\r\n             return CompletionMessage.WithResult(this._item2);\r\n        }\r\n        // return error here...\r\n    }\r\n}\r\n\u0060\u0060\u0060\r\n\r\n\u0060\u0060\u0060\r\npublic async Task\u003CMyMessageClass\u003E MyTask(int num)\r\n{\r\n    if (num \u003C 0)\r\n    {\r\n        return new MyMessageClass(error: new OutOfRangeException(...));\r\n    }\r\n    if (num == 0)\r\n    {\r\n        return new MyMessageClass(item2: \u0022The number is 0\u0022);\r\n    }\r\n    return new MyMessageClass(item1: num * 2);\r\n}\r\n\u0060\u0060\u0060\r\n\r\nAnd in DefaultHubDispatcher if the item is of the interface type, call the convert method, override the invocation ID and send it.\r\n\r\nThis allows me full control of the returned result or error.",
        "createdAt": "2024-05-13T18:42:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55683#issuecomment-2108557234"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86JFhji",
    "title": "SignalR - SSE/LongPoll Close connection returns 404",
    "url": "https://github.com/dotnet/aspnetcore/issues/55750",
    "createdAt": "2024-05-16T09:59:16Z",
    "lastUpdated": "2024-05-20T12:10:35Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nClient - signalR 8.0.0 (typescript/browser)\r\nServer - 8.0.4\r\n\r\nI have a browser client that connect to SignalR hub via Server-Sent events (My reverse proxy does not support websockets)\r\nThe communication works well.\r\n1) Client connects\r\n2) Sends some data via \u0060invoke\u0060 function\r\n3) Once all data is transfered the client calls \u0060connection.stop()\u0060, which generates POST request to a hub with 404/\u0060No Connection with that ID\u0060 response\r\n4) It seems that the server successfully closes the connection but returns 404 with \r\n\r\nServer logs from close call:\r\n\u0060\u0060\u0060\r\n[11:51:38.482 INF] Microsoft.AspNetCore.Hosting.Diagnostics - Request starting HTTP/2 POST https://localhost:56480/hubs/plansExport?id=njAzClV6o81z9cB3kHElpg - text/plain;charset=UTF-8 11\r\n[11:51:38.488 DBG] Microsoft.AspNetCore.Routing.Matching.DfaMatcher - 2 candidate(s) found for the request path \u0027/hubs/plansExport\u0027\r\n[11:51:38.510 DBG] Microsoft.AspNetCore.Routing.Matching.DfaMatcher - Endpoint \u0027/hubs/plansExport\u0027 with route pattern \u0027/hubs/plansExport\u0027 is valid for the request path \u0027/hubs/plansExport\u0027\r\n[11:51:40.829 DBG] Microsoft.AspNetCore.Routing.Matching.DfaMatcher - Endpoint \u0027Fallback {*path:nonfile}\u0027 with route pattern \u0027{*path:nonfile}\u0027 is valid for the request path \u0027/hubs/plansExport\u0027\r\n[11:51:40.845 DBG] Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware - Request matched endpoint \u0027/hubs/plansExport\u0027\r\n[11:51:40.970 DBG] Microsoft.AspNetCore.SignalR.HubConnectionHandler - OnConnectedAsync ending.\r\n[11:51:41.844 DBG] Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager - Removing connection njAzClV6o81z9cB3kHElpg from the list of connections.\r\n[11:51:41.853 INF] Microsoft.AspNetCore.Routing.EndpointMiddleware - Executing endpoint \u0027/hubs/plansExport\u0027\r\n[11:51:41.863 INF] Microsoft.AspNetCore.Routing.EndpointMiddleware - Executed endpoint \u0027/hubs/plansExport\u0027\r\n[11:51:42.627 INF] Microsoft.AspNetCore.Hosting.Diagnostics - Request finished HTTP/2 GET https://localhost:56480/hubs/plansExport?id=njAzClV6o81z9cB3kHElpg - 200 null text/event-stream 12650.3697ms\r\n[11:51:42.627 INF] Microsoft.AspNetCore.Routing.EndpointMiddleware - Executed endpoint \u0027/hubs/plansExport\u0027\r\n[11:51:42.671 INF] Microsoft.AspNetCore.Hosting.Diagnostics - Request finished HTTP/2 POST https://localhost:56480/hubs/plansExport?id=njAzClV6o81z9cB3kHElpg - 404 null text/plain 4188.9645ms\r\n\u0060\u0060\u0060\r\n\r\nIn logs I can see\r\n - 11:51:38.482 Close request starting\r\n - 11:51:41.844 Connection removed\r\n - 11:51:42.627 SSE connection closed\r\n - 11:51:42.671 Close request finished with 404\r\n\r\n- My hub url has a custom query parameter but removing it does not seem to make any change\r\n- I have multiple server instances, but the communication works well except the close call\r\n- The same happens when using Long-Poll\r\n- The same happens with other versions on client/server\r\n- The app is running in linux/docker in production and the same happens when debugging locally with Windows\r\n\r\nThere is no visible issue for a users, The only thing is that this 404 generates \u0060Failed to Fetch\u0060 exception \u002B error log which gets collected by a monitoring tools in both client and server.\r\n\r\nPossibly related issues:\r\n - https://github.com/dotnet/aspnetcore/issues/5350\r\n - https://github.com/dotnet/aspnetcore/issues/27584\r\n\r\n### Expected Behavior\r\n\r\nClose connection should return 2xx if there is no error.\r\n\r\n\r\n### Steps To Reproduce\r\n\r\nI am not able to reproduce it on small/new project.\r\nMy application is pretty big. I tried removing all code that is not needed and all middlewares except the minimal needed ones (authorization, session, routing, ...) but the issue still occurs\r\n\r\nEDIT: I somehow managed to reporoduce it - https://github.com/omorsky-pcor/signalr_close_404\r\nIt returns 404 randomly (about 1 out of 10 close calls) with empty content.\r\nThe \u0060No Connection with that ID\u0060 is even less frequent\r\n\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.4\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85-NXtM",
        "parentId": null,
        "author": "omorsky-pcor",
        "content": "I did some debugging and (I might be completely wrong) here are my thoughts\r\n\r\nThere is long running GET (SSE) request.\r\n- This requests creates a \u0060HttpConnectionContext\u0060 object and registers it in \u0060HttpConnectionManager\u0060 - https://github.com/dotnet/aspnetcore/blob/8486d31e24f30e3fa1809a95699a0adc16f448d7/src/SignalR/common/Http.Connections/src/Internal/HttpConnectionDispatcher.cs#L135\r\n  - This line creates some connection internal stuff including \u0060ApplicationTask\u0060 which is completed once the connection closes\r\nhttps://github.com/dotnet/aspnetcore/blob/8486d31e24f30e3fa1809a95699a0adc16f448d7/src/SignalR/common/Http.Connections/src/Internal/HttpConnectionDispatcher.cs#L156\r\n  - And this line waits for the connection to close and then removes it from \u0060HttpConnectionManager\u0060 https://github.com/dotnet/aspnetcore/blob/8486d31e24f30e3fa1809a95699a0adc16f448d7/src/SignalR/common/Http.Connections/src/Internal/HttpConnectionDispatcher.cs#L158\r\n  - so after all this happens the connection is removed from the manager\r\n\r\nOnce the client calls \u0060stop\u0060 there is a new POST request with MessageType=Close\r\n - This call is processed by \u0060HttpConnectionDispatcher.ProcessSend\u0060 but the connection does not exist anymore\r\nhttps://github.com/dotnet/aspnetcore/blob/8486d31e24f30e3fa1809a95699a0adc16f448d7/src/SignalR/common/Http.Connections/src/Internal/HttpConnectionDispatcher.cs#L451\r\n\r\nNow the question is who closes the long running SSE connection. From looking into ts client sources it seems that it is a client that closes SSE connection\r\n\r\n- \u0060HubConnection.stop() -\u003E HubConnection._stopInternal() =\u003E HttpConnection.stop() -\u003E HttpConnection._stopInternal() =\u003E ServerSentEventsTransport.stop() -\u003E ServerSentEventsTransport._close() \u0060\r\n- https://github.com/dotnet/aspnetcore/blob/8486d31e24f30e3fa1809a95699a0adc16f448d7/src/SignalR/clients/ts/signalr/src/ServerSentEventsTransport.ts#L121\r\n\r\nNow the issue seems to be a race-condition/not awaiting \u0060_sendCloseMessage()\u0060 in \u0060HubConnection._stopInternal() \u0060\r\n- https://github.com/dotnet/aspnetcore/blob/8486d31e24f30e3fa1809a95699a0adc16f448d7/src/SignalR/clients/ts/signalr/src/HubConnection.ts#L345\r\n\r\n\r\nI will try to build custom client/reproduce it reliably using some network limiting in a browser.\r\nI don\u0027t know what a proper solution should be. There is intentional comment/eslint to not await a close message. Also it does not feel right to have two \u0022independent\u0022 methods to do conceptually the same thing.\r\n",
        "createdAt": "2024-05-17T11:54:54Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55750#issuecomment-2117434188"
      },
      {
        "id": "IC_kwDOAQzde85-Ybri",
        "parentId": null,
        "author": "omorsky-pcor",
        "content": "I was able to reliably reproduce the issue by adding a middleware like this\r\n\u0060\u0060\u0060\r\napp.Use(async (context, next) =\u003E\r\n        {\r\n            await Task.Delay(500);\r\n            await next();\r\n        });\r\n\u0060\u0060\u0060\r\nhere is a repository with a sample https://github.com/omorsky-pcor/signalr_close_404",
        "createdAt": "2024-05-20T12:10:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55750#issuecomment-2120334050"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86JPCh_",
    "title": "Call \u0060onClosed\u0060 or provide an \u0060onStopped\u0060 method to be called when the connection is stopped in certain cases",
    "url": "https://github.com/dotnet/aspnetcore/issues/55765",
    "createdAt": "2024-05-17T10:54:45Z",
    "lastUpdated": "2024-05-19T13:06:12Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI was running a Flutter app that uses on its android side the signalr java client.\r\nIn the android side (the java client), I listen to the [onClosed](https://github.com/dotnet/aspnetcore/blob/35e82e671453ee06e5a152b5cc69e0e355d60ec6/src/SignalR/clients/java/signalr/core/src/main/java/com/microsoft/signalr/HubConnection.java#L856) callback from the java client to schedule automatice reconnects in my app.\r\nI was doing a heavy download on my wifi network which was taking the bandwidth from all other apps including my app mentioned above, so the [activatePingTimer](https://github.com/dotnet/aspnetcore/blob/35e82e671453ee06e5a152b5cc69e0e355d60ec6/src/SignalR/clients/java/signalr/core/src/main/java/com/microsoft/signalr/HubConnection.java#L1466) method appears to have timedout and called the [private stop method](https://github.com/dotnet/aspnetcore/blob/35e82e671453ee06e5a152b5cc69e0e355d60ec6/src/SignalR/clients/java/signalr/core/src/main/java/com/microsoft/signalr/HubConnection.java#L1473C29-L1473C105).\r\nThe problem is that this private \u0060stop\u0060 method, does not call the \u0060onClosed\u0060 callback registered by my app, so my app never knew the connection was closed so that it can reschedule an auto-reconnect.\r\nI know that the \u0060onClosed\u0060 callback is documented as \r\n\u003E Registers a callback to run when the connection is closed.\r\n\r\nBut does not this case indicate that connection is closed?\r\nIf this is a bug, then the private \u0060stop\u0060 method should call the \u0060onClosed\u0060 callbacks.\r\nElse if this is how its intended to work, then can you provide a way to listen to when the connection stops? \r\n(Whats the difference anyway between \u0022stop\u0022 and \u0022close\u0022, other than that \u0022close\u0022 disposes the resources associated with the object?)\r\n\r\n### Expected Behavior\r\n\r\n_No response_\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\nHere is a part of the logs\r\n\u0060\u0060\u0060\r\nI/HubConnection( 2748): HubConnection started.\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nE/HubConnection( 2748): HubConnection disconnected with an error: Server timeout elapsed without receiving a message from the server..\r\nI/OkHttpWebSocketWrapper( 2748): WebSocket closing with status code \u00271000\u0027 and reason \u0027\u0027.\r\nE/HubConnection( 2748): HubConnection disconnected with an error Server timeout elapsed without receiving a message from the server..\r\nI/HubConnection( 2748): HubConnection stopped.\r\nI/WebSocketTransport( 2748): WebSocket connection stopped.\r\n\u0060\u0060\u0060\r\n(I removed my app logs from the logs above)\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86Kgi5H",
    "title": "Retry CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser",
    "url": "https://github.com/dotnet/aspnetcore/issues/55954",
    "createdAt": "2024-05-29T16:52:25Z",
    "lastUpdated": "2024-09-23T20:56:18Z",
    "body": "\u003C!--\r\nNote this issue template is specifically for failing tests within the dotnet/aspnetcore repo.\r\n--\u003E\r\n\r\n## Failing Test(s)\r\n\r\n\u003C!--\r\nProvide the fully qualified name(s) of the failing tests.\r\n--\u003E\r\n\r\n- Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests.CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser(transportType: WebSockets, protocolName: \u0022messagepack\u0022)\r\n\r\n## Error Message\r\n\r\n\u003C!--\r\nProvide the error message associated with the test failure, if applicable.\r\n--\u003E\r\n\r\n\u0060\u0060\u0060text\r\nSystem.TimeoutException : The operation has timed out.\r\n\u0060\u0060\u0060\r\n\r\n## Stacktrace\r\n\r\n\u003Cdetails\u003E\r\n\u003C!--\r\nProvide the stack trace associated with the test failure, if applicable.\r\n--\u003E\r\n\r\n\u0060\u0060\u0060text\r\n   at Microsoft.AspNetCore.InternalTesting.TaskExtensions.TimeoutAfter[T](Task\u00601 task, TimeSpan timeout, String filePath, Int32 lineNumber) in /_/src/Shared/TaskExtensions.cs:line 88\r\n   at Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests.CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser(HttpTransportType transportType, String protocolName) in /_/src/SignalR/server/StackExchangeRedis/test/RedisEndToEnd.cs:line 111\r\n--- End of stack trace from previous location ---\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n\r\n## Logs\r\n\r\n\u003Cdetails\u003E\r\n\u003C!--\r\nIf this is a Helix test failure, include the text of the .log artifact from the failing test.\r\nNote that you have to be signed in to Azure DevOps to see the test artifacts.\r\n--\u003E\r\n\r\n\u0060\u0060\u0060text\r\n[0.001s] [TestLifetime] [Information] Starting test CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser-WebSockets-messagepack at 2024-05-29T00:46:50\r\n[0.001s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Registering handler for client method \u0027Echo\u0027.\r\n[0.001s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Registering handler for client method \u0027Echo\u0027.\r\n[0.002s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Starting HubConnection.\r\n[0.002s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Starting HttpConnection.\r\n[0.002s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Establishing connection with server at \u0027http://127.0.0.1:36393/echo\u0027.\r\n[0.003s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Established connection \u0027O8zhvX0zx-HWpX2dnRwpFQ\u0027 with the server.\r\n[0.003s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Starting transport \u0027WebSockets\u0027 with Url: http://127.0.0.1:36393/echo.\r\n[0.003s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Information] Starting transport. Transfer mode: Binary. Url: \u0027ws://127.0.0.1:36393/echo?id=MQVUtD1Wxoh_BJ4FzWajcQ\u0027.\r\n[0.004s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Debug] Started transport.\r\n[0.004s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Transport \u0027WebSockets\u0027 started.\r\n[0.004s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Information] HttpConnection Started.\r\n[0.004s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Information] Using HubProtocol \u0027messagepack v1\u0027.\r\n[0.004s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending Hub Handshake.\r\n[0.004s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Debug] Received message from application. Payload size: 39.\r\n[0.005s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Debug] Message received. Type: Binary, size: 3, EndOfMessage: True.\r\n[0.005s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Handshake with server complete.\r\n[0.005s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending PingMessage message.\r\n[0.005s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending PingMessage message completed.\r\n[0.005s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Receive loop starting.\r\n[0.005s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Information] HubConnection started.\r\n[0.006s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Debug] Received message from application. Payload size: 3.\r\n[0.006s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Starting HubConnection.\r\n[0.006s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Starting HttpConnection.\r\n[0.006s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Establishing connection with server at \u0027http://127.0.0.1:44495/echo\u0027.\r\n[0.007s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Established connection \u0027vL7yeQOroXbjB4bXcStBzA\u0027 with the server.\r\n[0.007s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Starting transport \u0027WebSockets\u0027 with Url: http://127.0.0.1:44495/echo.\r\n[0.007s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Information] Starting transport. Transfer mode: Binary. Url: \u0027ws://127.0.0.1:44495/echo?id=-raO5cVU1otunWX1QidbHg\u0027.\r\n[0.008s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Debug] Started transport.\r\n[0.008s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Transport \u0027WebSockets\u0027 started.\r\n[0.008s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Information] HttpConnection Started.\r\n[0.008s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Information] Using HubProtocol \u0027messagepack v1\u0027.\r\n[0.008s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending Hub Handshake.\r\n[0.008s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Debug] Received message from application. Payload size: 39.\r\n[0.009s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Debug] Message received. Type: Binary, size: 3, EndOfMessage: True.\r\n[0.009s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Handshake with server complete.\r\n[0.009s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending PingMessage message.\r\n[0.009s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending PingMessage message completed.\r\n[0.009s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Receive loop starting.\r\n[0.009s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Information] HubConnection started.\r\n[0.009s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Registering Invocation ID \u00271\u0027 for tracking.\r\n[0.009s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending InvocationMessage message \u00271\u0027.\r\n[0.009s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending InvocationMessage message \u00271\u0027 completed.\r\n[0.009s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Debug] Received message from application. Payload size: 40.\r\n[0.011s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Debug] Message received. Type: Binary, size: 34, EndOfMessage: True.\r\n[0.011s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Processing 34 byte message from server.\r\n[15.006s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending PingMessage message.\r\n[15.006s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending PingMessage message completed.\r\n[15.006s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Debug] Received message from application. Payload size: 3.\r\n[15.010s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending PingMessage message.\r\n[15.010s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending PingMessage message completed.\r\n[15.010s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Debug] Received message from application. Payload size: 3.\r\n[15.310s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Debug] Message received. Type: Binary, size: 3, EndOfMessage: True.\r\n[15.310s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Processing 3 byte message from server.\r\n[15.512s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport] [Debug] Message received. Type: Binary, size: 3, EndOfMessage: True.\r\n[15.513s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Processing 3 byte message from server.\r\n[30.011s] [Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests] [Error] Test threw an exception.\r\nSystem.TimeoutException: The operation has timed out.\r\n   at Microsoft.AspNetCore.InternalTesting.TaskExtensions.TimeoutAfter[T](Task\u00601 task, TimeSpan timeout, String filePath, Int32 lineNumber) in /_/src/Shared/TaskExtensions.cs:line 88\r\n   at Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests.CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser(HttpTransportType transportType, String protocolName) in /_/src/SignalR/server/StackExchangeRedis/test/RedisEndToEnd.cs:line 111\r\n   at Xunit.Sdk.TestInvoker\u00601.\u003C\u003Ec__DisplayClass48_0.\u003C\u003CInvokeTestMethodAsync\u003Eb__1\u003Ed.MoveNext() in /_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs:line 264\r\n--- End of stack trace from previous location ---\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func\u00601 asyncAction) in /_/src/xunit.execution/Sdk/Frameworks/ExecutionTimer.cs:line 48\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(Func\u00601 code) in /_/src/xunit.core/Sdk/ExceptionAggregator.cs:line 90\r\n[30.012s] [TestLifetime] [Information] Finished test CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser-WebSockets-messagepack in 30.0112432s\r\n\u0060\u0060\u0060\r\n\u003C/details\u003E\r\n\r\n## Build\r\n\r\n\u003C!--\r\nProvide a link to the build where the test failure occurred.\r\n--\u003E\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=690412",
    "upvotes": 0,
    "labels": [
      "test-failure",
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde85_bTRI",
        "parentId": null,
        "author": "amcasey",
        "content": "https://github.com/dotnet/aspnetcore/pull/55935 and https://github.com/dotnet/aspnetcore/issues/20040#issuecomment-1487696288",
        "createdAt": "2024-05-29T16:52:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55954#issuecomment-2137863240"
      },
      {
        "id": "IC_kwDOAQzde86NOapm",
        "parentId": null,
        "author": "eerhardt",
        "content": "This has failed again in https://helixre107v0xd1eu3ibi6ka.blob.core.windows.net/dotnet-aspnetcore-refs-heads-release-90-rc2-31a327fe05f2417f89/Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests--net9.0/1/console.1692c067.log?helixlogtype=result. Re-opening this issue. If it fails again we should re-add the retry.",
        "createdAt": "2024-09-23T20:56:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/55954#issuecomment-2369366630"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86K60lC",
    "title": "SignalR message delivery to Clients.All stops working and doesn\u0027t resume without Application Restart",
    "url": "https://github.com/dotnet/aspnetcore/issues/56032",
    "createdAt": "2024-06-03T09:45:58Z",
    "lastUpdated": "2024-06-03T09:47:00Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWe have a SignalR hub that we use to share domain events with our frontend UIs, some of these events are dispatched to all clients using \u0060IHubContext\u003CTHub\u003E.Clients.All\u0060.\r\n\r\nOur hub is setup to use the Redis backplane and the client is a javascript application using Angular.\r\n\r\nWe keep occasionally hitting an issue where messages sent specifically to all just stop being delivered after an indeterminate amount of time with the application running. When this happens messages sent via other channels such as to a specific user or connectionId are delivered as expected and it\u0027s only the messages to \u0060All\u0060 that are dropped.\r\n\r\nInvestigating it appears that the message does in fact reach the Redis channel as I can see in the Verbose logs for SignalR \u0060Publishing message to Redis channel \u0022\u003COmitted\u003E.Hubs.NotificationHub:all\u0022.\u0060 and subsequently \u0060Received message from Redis channel \u0022\u003COmitted\u003E.NotificationHub:all\u0022.\u0060. Additionally, manually subscribing to the channel in Redis shows the message being delivered at least on the Redis layer.\r\n\r\nHowever, the connected client does not receive the message at all even though during the time when the message was \u0022sent\u0022 it\u0027s received pings and specifically targeted messages for that user.\r\n\r\n### Expected Behavior\r\n\r\nThroughout the runtime of the application delivery of messages sent to \u0060All\u0060 continue to work as expected.\r\n\r\n### Steps To Reproduce\r\n\r\nDue to it being an issue that happens after a few hours or two of usage on the service, I haven\u0027t been able to create a repro. If that\u0027s an issue let me know and I\u0027ll try my best to see if I can replicate it.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n8.0.203\r\n\r\n### Anything else?\r\n\r\nUsing \u0060Microsoft.AspNetCore.SignalR.StackExchangeRedis\u0060",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86Lxrly",
    "title": "Consider creating Minimal Hubs",
    "url": "https://github.com/dotnet/aspnetcore/issues/56182",
    "createdAt": "2024-06-11T00:00:45Z",
    "lastUpdated": "2024-06-11T00:00:45Z",
    "body": "Or Hub Events, or Hub APIs. Name to be bike-shedded.\r\n\r\nTaking heavy inspiration from Minimal APIs and the comparison it has with MVC Controllers, we can apply the same idea to Hubs (which people compare to Controllers).\r\n\r\nThe general idea is that we can map a \u0022Hub\u0022 and let the user add endpoints to that \u0022Hub\u0022. The \u0022Hub\u0022 would look similar to a Group in Minimal APIs and the endpoints look similar to \u0060MapGet\u0060, \u0060MapPost\u0060, etc. with a user provided delegate that is interpreted by something like RequestDelegateFactory (HubDelegateFactory?).\r\n\r\n\u0060\u0060\u0060csharp\r\nvar myHub = app.MapHubName(\u0022/myHub\u0022);\r\nmyHub.Map(\u0022Echo\u0022, (string message) =\u003E message);\r\n\u0060\u0060\u0060\r\n\r\nSome interesting aspects to note:\r\n* There is no user provided \u0060Hub\u0060 type any more\r\n  - Should we allow mixing with a \u0060Hub\u0060? \u0060var myHub = app.MapHubName\u003COtherHub\u003E(\u0022/myHub\u0022);\u0060 First instinct is no.\r\n  - Technically this would allow libraries to add methods to a Hub\r\n* \u0060IHubContext\u0060 would need to be accessed via KeyedDI for background services/other app code\r\n  - \u0060[KeyedService(\u0022myHub\u0022)] IHubContext\u0060\r\n* Properties from the \u0060Hub\u0060 will need to be automatically injected into user delegates\r\n  - Sadly less discoverable than \u0060Hub\u0060 where you can just access \u0060this.Context\u0060 etc.\r\n  - \u0060IHubCallerClients\u0060, \u0060HubCallerContext\u0060, \u0060IGroupManager\u0060\r\n  - \u0060IHubContext\u0060 could also be automatically injected without using \u0060KeyedService\u0060 if we wanted\r\n* In the example below I show a new hub filter type that is similar to \u0060AddEndpointFilter\u0060 where you can add it to a specific API call instead of the entire \u0060Hub\u0060. Seems like an optional feature we can add regardless of \u0022Minimal Hubs\u0022\r\n\r\nExample program showing some of the ways you can do things:\r\n\u0060\u0060\u0060csharp\r\n// Can apply endpoint metadata like usual\r\nvar hub = app.MapHubName(\u0022/myHub\u0022)\r\n    .AddMessagePackProtocol()\r\n    .AddStackExchangeRedis()\r\n    .RequireAuthorization()\r\n    .AddFilter\u003CMyHubFilter\u003E();\r\n\r\nvar logger = app.Services.GetService\u003CILogger\u003E();\r\n\r\nhub.Map(\u0022Broadcast\u0022, async (string message, IHubCallerClients clients) =\u003E\r\n{\r\n    await clients.All.SendAsync(\u0022Broadcast\u0022, message);\r\n});\r\n\r\nhub.Map(\u0022EchoV1\u0022, (string message) =\u003E\r\n{\r\n    // :O captured variable\r\n    logger.LogInformation(\u0022Echo {Message}\u0022, message);\r\n    return message;\r\n});\r\n\r\n// Auto-inject IHubCallerClients and HubCallerContext\r\n// Less discoverable than having a strongly typed Hub where they are just properties on the class\r\nhub.Map(\u0022EchoV2\u0022, async (string message, IHubCallerClients clients, HubCallerContext self) =\u003E\r\n{\r\n    await clients.Client(self.ConnectionId).SendAsync(\u0022Echo\u0022, message);\r\n});\r\n\r\nhub.Map(\u0022Add\u0022, (int x, int y, ILogger injectedLogger) =\u003E\r\n{\r\n    injectedLogger.LogInformation(\u0022Adding {X} and {Y}\u0022, x, y);\r\n    return x \u002B y;\r\n}).AddFilter(context =\u003E\r\n{\r\n    // This is a completely different filter from what we have today. The way its written it\u0027s input only and method specific. Just a thought experiment.\r\n    context.Arguments[0] = 10;\r\n});\r\n\r\n// KeyedService automatically created and named based on MapHubName. We could also automatically deduce this is IHubContext from \u0022myHub\u0022 because of the builder type.\r\n// But it shows how someone could reference this IHubContext from other areas of the code (since there isn\u0027t a Hub type).\r\nhub.Map(\u0022hubContext\u0022, async ([KeyedService(\u0022myHub\u0022)] IHubContext hubContext) =\u003E\r\n{\r\n    await hubContext.Clients.All.SendAsync(\u0022Echo\u0022, \u0022test\u0022);\r\n});\r\n\r\napp.Run();\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86MD1Ah",
    "title": "Weird file created during webpack when upgrading to SignalR 8.0.0",
    "url": "https://github.com/dotnet/aspnetcore/issues/56213",
    "createdAt": "2024-06-12T23:03:07Z",
    "lastUpdated": "2024-06-13T10:04:44Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWe upgraded to SignalR v8.0 and are using webpack to bundle our application script files. Webpack is now generating a weird bundle file named _ffca-_26cd-_6695-_e09b-_b4de-_fcc7.js with the following contents:\r\n\r\n\u0060\u0060\u0060\r\n(self.webpackChunkverify=self.webpackChunkverify||[]).push([[\u0022_ffca-_26cd-_6695-_e09b-_b4de-_fcc7\u0022],{\u0022?ffca\u0022:\r\n/*!**********************************!*\\\r\n  !*** abort-controller (ignored) ***!\r\n  \\**********************************/()=\u003E{},\u0022?26cd\u0022:\r\n/*!*****************************!*\\\r\n  !*** eventsource (ignored) ***!\r\n  \\*****************************/()=\u003E{},\u0022?6695\u0022:\r\n/*!******************************!*\\\r\n  !*** fetch-cookie (ignored) ***!\r\n  \\******************************/()=\u003E{},\u0022?e09b\u0022:\r\n/*!****************************!*\\\r\n  !*** node-fetch (ignored) ***!\r\n  \\****************************/()=\u003E{},\u0022?b4de\u0022:\r\n/*!******************************!*\\\r\n  !*** tough-cookie (ignored) ***!\r\n  \\******************************/()=\u003E{},\u0022?fcc7\u0022:\r\n/*!********************!*\\\r\n  !*** ws (ignored) ***!\r\n  \\********************/()=\u003E{}}]);\r\n\u0060\u0060\u0060\r\nThe files listed in this bundle are all the dependencies listed for the signalR package.\r\n\r\nWe now have to include this additional script file on our page to get our scripts to work. So, we have reverted to 7.0.14 for the time being until we can figure out what is going on here.\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86McUs9",
    "title": "TypeScript SignalR client (@microsoft/signalr) automatic reconnection sometimes not working",
    "url": "https://github.com/dotnet/aspnetcore/issues/56260",
    "createdAt": "2024-06-17T02:56:02Z",
    "lastUpdated": "2024-06-17T02:56:06Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nThe hub connection has been set \u0060withAutomaticReconnect\u0060 infinitely with \u002210 seconds delay\u0022, but the client SOMETIMES tries auto reconnecting ONCE only and then does not continue the reconnection anymore when the connection is not yet resumed. No more response is given after the first attempt. No error has been thrown. The hub connection state remains \u0060Reconnecting\u0060.\r\n\r\nThe log is like the following:\r\n\u0060\u0060\u0060\r\nSignalR =\u003E Started\r\n\r\n... \r\n\r\nSignalR =\u003E Reconnecting...\r\nSignalR =\u003E Auto reconnecting... Attempt: 1, Retry reason: {}\r\n\u0060\u0060\u0060\r\n\r\nNo more log after all.\r\n\r\nWhen call custom method \u0060probeConnectionState()\u0060 to check the state, it still shows\r\n\u0060\u0060\u0060\r\nSignalRService =\u003E State: Reconnecting\r\n\u0060\u0060\u0060\n\n### Expected Behavior\n\nThe SignalR client keeps reconnecting to the hub automatically and when the connection is not yet resumed, and gives response when it tries auto reconnecting.\r\n\r\nThe log should be like:\r\n\u0060\u0060\u0060\r\nSignalR =\u003E Started\r\n\r\n...\r\n\r\nSignalR =\u003E Reconnecting...\r\nSignalR =\u003E Auto reconnecting... Attempt: 1, Retry reason: {}\r\n\r\n... (After 10 seconds)\r\n\r\nSignalR =\u003E Auto reconnecting... Attempt: 2, Retry reason: {}\r\n\r\n... (After 10 seconds)\r\n\r\nSignalR =\u003E Auto reconnecting... Attempt: 3, Retry reason: {}\r\n\r\n... (Infinitely until reconnected)\r\n\r\nSignalR =\u003E Reconnected\r\n\u0060\u0060\u0060\r\n\r\nWhen call probeConnectionState() to check the state during reconnection, it should show\r\n\u0060\u0060\u0060\r\nSignalRService =\u003E State: Reconnecting\r\n\u0060\u0060\u0060\n\n### Steps To Reproduce\n\n\u0060\u0060\u0060\r\nvar hubConnection = new HubConnectionBuilder()\r\n      .withUrl(process.env.SIGNALR_ENDPOINT)\r\n      .configureLogging(LogLevel.Information)\r\n      .withAutomaticReconnect(\r\n        {\r\n          nextRetryDelayInMilliseconds: retryContext =\u003E {\r\n            console.log(\u0060SignalR =\u003E Auto reconnecting... Attempt: ${JSON.stringify((retryContext.previousRetryCount \u002B 1))}, Retry reason: ${JSON.stringify(retryContext.retryReason)}\u0060);\r\n            return 10000; // Set 10 seconds delay in each reconnection, and retry infinitely without passing null\r\n          },\r\n        }\r\n      )\r\n      .build();\r\n\r\nhubConnection.serverTimeoutInMilliseconds = 300000;\r\nhubConnection.keepAliveIntervalInMilliseconds = 10000;\r\n\r\nhubConnection.onreconnecting(err =\u003E {\r\n  console.log(\u0022SignalR =\u003E Reconnecting...\u0022);\r\n})\r\n\r\nhubConnection.onreconnected(connId =\u003E {\r\n  console.log(\u0022SignalR =\u003E Reconnected\u0022);\r\n})\r\n\r\nhubConnection.onclosed(err =\u003E {\r\n  console.log(\u0022SignalR =\u003E Closed\u0022);\r\n});\r\n\r\nawait hubConnection.start().then( _ =\u003E {\r\n  console.log(\u0022SignalR =\u003E Started\u0022);\r\n});\r\n\r\nfunction probeConnectionState() {\r\n   if (hubConnection.state == HubConnectionState.Connected) {\r\n      console.log(\u0060SignalRService =\u003E State: Connected\u0060);\r\n      return;\r\n   }\r\n   if (hubConnection.state == HubConnectionState.Connecting) {\r\n      console.log(\u0060SignalRService =\u003E State: Connecting\u0060);\r\n      return;\r\n   }\r\n   if (hubConnection.state == HubConnectionState.Reconnecting) {\r\n      console.log(\u0060SignalRService =\u003E State: Reconnecting\u0060);\r\n      return;\r\n   }\r\n   if (hubConnection.state == HubConnectionState.Disconnecting) {\r\n      console.log(\u0060SignalRService =\u003E State: Disconnecting\u0060);\r\n      return;\r\n   }\r\n   if (hubConnection.state == HubConnectionState.Disconnected) {\r\n      console.log(\u0060SignalRService =\u003E State: Disconnected\u0060);\r\n      return;\r\n   }\r\n   console.log(\u0060SignalRService =\u003E State: Unknown\u0060);\r\n}\r\n\u0060\u0060\u0060\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.0\n\n### Anything else?\n\nFramework: \u0060typescript 4.8.3\u0060\r\nPackage: \u0060@microsoft/signalr 8.0.0\u0060",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86MoqEC",
    "title": "AccessTokenFactory improvement options",
    "url": "https://github.com/dotnet/aspnetcore/issues/56290",
    "createdAt": "2024-06-18T10:05:19Z",
    "lastUpdated": "2024-06-18T10:05:22Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n_No response_\n\n### Describe the solution you\u0027d like\n\nIn the docs, it\u0027s recommended to refresh the accessToken within the AccessTokenFactory method. However, I have noticed that this method is called with every SignalR connection, regardless of the reason why that connection was required.\r\n\r\nIf this is an expensive (aka serverside) operation, it doesn\u0027t make sense to refresh the accessToken every time. Imagine a client with patchy internet having to reconnect, and that yielding an additional and unnecessary token refresh. Not only from the client\u0027s perspective, also in terms of server load, and latency for all clients on first connection.\r\n\r\nInstead, the accessToken should be cached until there is specifically a 401 exception, at which point it should be refreshed. At least there should be an option to do this. \r\n\r\nAlternatively, an optional boolean property could be passed into the AccessTokenFactory indicating whether the previous token has been found to be in valid.\r\n\r\nEither that, or it should be possible to catch 401 exceptions specifically on the HubConnection, which could in turn be configured to trigger a token refresh. Right now, the exception is simply plaintext. Perhaps adding a status code property would be enough.\r\n\r\nIn general, errors on the HubConnection are not possible to catch. The \u0027onclose\u0027 doesn\u0027t fire in case of all errors, so it\u0027s not the correct place for that, and there is no equivalent \u0027onerror\u0027. One way to fix this would be to add an \u0027onerror\u0027 event which includes the status code as part of the error.\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86MtJ7_",
    "title": "SignalR eats JSON serialization exceptions during streaming responses",
    "url": "https://github.com/dotnet/aspnetcore/issues/56303",
    "createdAt": "2024-06-18T20:25:12Z",
    "lastUpdated": "2024-06-18T20:25:55Z",
    "body": "### Is there an existing issue for this?\r\n\r\nThis somewhat feeds into #44383 but that\u0027s a more general tracking item.\r\n\r\n### Describe the bug\r\n\r\nI had a line of code using SignalR like this:\r\n\r\n    await foreach (var response in conn.StreamAsync\u003CChatResponse\u003E(\u0022Chat\u0022, req, cancellationToken))\r\n\r\nThe surprise I ran into was the server sent me a different JSON payload back, and the JSON object couldn\u0027t be deserialized. That\u0027s fine, but this serialization exception got converted to a StreamBindingFailureMessage with the exception stored. The surprise however is that doesn\u0027t get reported anywhere -- we hit the default case at https://github.com/dotnet/aspnetcore/blob/e558b051a9dcfe896e4c166be942f597c2575069/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs#L1183 and the exception is thrown away.\r\n\r\n### Expected Behavior\r\n\r\nThe exception is propagated somewhere to make this debuggable.\r\n### .NET Version\r\n\r\n8.0.6 of the SignalR library",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86M6heK",
    "title": "Provide access to signalr message size",
    "url": "https://github.com/dotnet/aspnetcore/issues/56338",
    "createdAt": "2024-06-20T10:59:14Z",
    "lastUpdated": "2024-12-10T13:39:02Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nCurrently there is a setting to limit maximum received message size:\r\n\r\n\u0060\u0060\u0060\r\nservices.AddSignalR(options =\u003E\r\n{\r\n    options.MaximumReceiveMessageSize = 32768;\r\n});\r\n\u0060\u0060\u0060\r\n\r\nHowever there is no any API to get actual message size. It could be useful when there is a need to track messages size and then provide it as a metric or use it any other way.\r\n\r\n\r\n\r\n\n\n### Describe the solution you\u0027d like\n\nIt would be nice to have message size information somewhere in places like \u0060HubInvocationContext\u0060, in order to get access to it from \u0060IHubFilter\u0060 implementation.\n\n### Additional context\n\n_No response_",
    "upvotes": 2,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86HAJvv",
        "parentId": null,
        "author": "fpdave100",
        "content": "This would be useful in case of very variable data item sizes.  I dont want to set the MaximumReceiveMessageSize to a large number as I read it impacts performance, so i want to see how close I am getting and maybe tune how many items I send in a message.\r\n\r\nThe ideal would be to get a recoverable error when sending so that I can change the number of items I send, so I can optimise my sending.\r\n\r\nMy case is streaming of log records from a client to the server.",
        "createdAt": "2024-08-02T09:30:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56338#issuecomment-2264964079"
      },
      {
        "id": "IC_kwDOAQzde86WRhd5",
        "parentId": null,
        "author": "Bond-Addict",
        "content": "I 100% agree with this, and I actually made a very detailed report similar.\nhttps://github.com/dotnet/aspnetcore/issues/59335\n\nIn case you don\u0027t get as immediate of a response, this is what they responded to me with.\nhttps://github.com/dotnet/aspnetcore/issues/59335#issuecomment-2521029996\n\nWhich IMO is not ideal, but at least having a range to target rather than any arbitrary value is definitely better. Based on my research over many hours and several days (how I gathered all that investigative info) this is an issue that a ton of people have a and a mechanism that is highly highly requested.  ",
        "createdAt": "2024-12-05T18:56:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56338#issuecomment-2521175929"
      },
      {
        "id": "IC_kwDOAQzde86WRykU",
        "parentId": null,
        "author": "Bond-Addict",
        "content": "I created an actual feature request that will completely address this. Please go over and upvote it if you have a chance.\n\nhttps://github.com/dotnet/aspnetcore/issues/59346",
        "createdAt": "2024-12-05T19:39:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56338#issuecomment-2521245972"
      },
      {
        "id": "IC_kwDOAQzde86Wtfxq",
        "parentId": null,
        "author": "boika",
        "content": "Actually I\u0027ve found the way to measure signalr message size, adding decorator for \u0060IHubProtocol\u0060. It doesn\u0027t look like right extension point, but it allows to get precise message size without any additional actions.\n\n**Decorator:**\n\u0060\u0060\u0060csharp\npublic sealed class HubProtocolMonitoringDecorator : IHubProtocol\n{\n    private readonly IHubProtocol _hubProtocol;\n\n    public string Name =\u003E _hubProtocol.Name;\n    public int Version =\u003E _hubProtocol.Version;\n    public TransferFormat TransferFormat =\u003E _hubProtocol.TransferFormat;\n\n    public HubProtocolMonitoringDecorator(IHubProtocol hubProtocol)\n    {\n        _hubProtocol = hubProtocol;\n    }\n\n    public void WriteMessage(HubMessage message, IBufferWriter\u003Cbyte\u003E output) =\u003E _hubProtocol.WriteMessage(message, output);\n\n    public ReadOnlyMemory\u003Cbyte\u003E GetMessageBytes(HubMessage message) =\u003E _hubProtocol.GetMessageBytes(message);\n\n    public bool IsVersionSupported(int version) =\u003E _hubProtocol.IsVersionSupported(version);\n\n    public bool TryParseMessage(ref ReadOnlySequence\u003Cbyte\u003E input, IInvocationBinder binder, out HubMessage message)\n    {\n        var size = input.Length;\n        var isParsed = _hubProtocol.TryParseMessage(ref input, binder, out message);\n\n        if (message is InvocationMessage invocationMessage) {\n            // TODO: track size, invocationMessage.Target\n        }\n\n        return isParsed;\n    }\n}\n\u0060\u0060\u0060\n\n**DI registration** (example for JSON protocol):\n\u0060\u0060\u0060csharp\nservices.AddSignalR()\n    .Services\n    .AddSingleton\u003CJsonHubProtocol\u003E()\n    .AddSingleton\u003CIHubProtocol\u003E(sp =\u003E new HubProtocolMonitoringDecorator(\n        sp.GetRequiredService\u003CJsonHubProtocol\u003E()));\n\u0060\u0060\u0060\n",
        "createdAt": "2024-12-09T16:04:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56338#issuecomment-2528509034"
      },
      {
        "id": "IC_kwDOAQzde86WwPG6",
        "parentId": null,
        "author": "Bond-Addict",
        "content": "Interesting. Do you know if it works with Blazor Server as well? Which .Net Version are you using?\n\nIt\u0027s definitely great if this works, but it still seems like additional work that shouldn\u0027t be needed to get access to something we should already have available.",
        "createdAt": "2024-12-09T19:37:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56338#issuecomment-2529227194"
      },
      {
        "id": "IC_kwDOAQzde86W2jZ3",
        "parentId": null,
        "author": "boika",
        "content": "@Bond-Addict, this is server-side code, and it will work with any client, Blazor as well. Example was created for .net8, but I guess it looks similar for other .net versions.",
        "createdAt": "2024-12-10T09:05:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56338#issuecomment-2530883191"
      },
      {
        "id": "IC_kwDOAQzde86W5iU6",
        "parentId": null,
        "author": "Bond-Addict",
        "content": "@boika I get that this isn\u0027t client side code. What I mean, is that in some versions (ex Blazor WebAssembly vs Blazor Server) setup is either like \n\u0060\u0060services.AddSignalR()\u0060\u0060 or \u0060\u0060builder.Services.AddSignalR()\u0060\u0060 and not every setup/config option from one is available on the other. ",
        "createdAt": "2024-12-10T13:39:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56338#issuecomment-2531665210"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86NPtnd",
    "title": "Setting the SignalR JSON encoder to JavaScriptEncoder.Default does not have any effect",
    "url": "https://github.com/dotnet/aspnetcore/issues/56419",
    "createdAt": "2024-06-24T09:24:17Z",
    "lastUpdated": "2024-07-15T19:39:40Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI\u0027ve noticed that setting the JSON encoder of a SignalR hub to \u0060JavaScriptEncoder.Default\u0060 does not have the desired effect of escaping certain characters. The output seems to be the same as when using \u0060UnsafeRelaxedJsonEscaping\u0060.\r\n\r\n\u0060\u0060\u0060csharp\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.Services\r\n    .AddSignalR()\r\n    .AddJsonProtocol(options =\u003E\r\n    {\r\n        options.PayloadSerializerOptions.Encoder = JavaScriptEncoder.Default;\r\n    });\r\n\r\nvar app = builder.Build();\r\napp.MapHub\u003CPersonHub\u003E(\u0022/person\u0022);\r\napp.Run();\r\n\u0060\u0060\u0060\r\n\r\nThis is what\u0027s being produced by the SignalR hub:\r\n\r\n\u0060\u0060\u0060json\r\n{\u0022firstName\u0022:\u0022Joey\u0022,\u0022lastName\u0022:\u0022\u003Cscript\u003Ealert(\u0027Bad Guy\u0027);\u003C/script\u003E\u0022}\r\n\u0060\u0060\u0060\r\n\r\nConfirmed that this is what is being sent over the wire (via Fiddler):\r\n\r\n![2024-06-24 10_06_18-Progress Telerik Fiddler Classic](https://github.com/dotnet/aspnetcore/assets/4798710/ac731d6b-18b6-4fc6-88d4-e3184a27831b)\r\n\r\n\n\n### Expected Behavior\n\nI would expect the output to be as follows:\r\n\r\n\u0060\u0060\u0060json\r\n{\u0022FirstName\u0022:\u0022Joey\u0022,\u0022LastName\u0022:\u0022\\u003Cscript\\u003Ealert(\\u0027Bad Guy\\u0027);\\u003C/script\\u003E\u0022}\r\n\u0060\u0060\u0060\n\n### Steps To Reproduce\n\nhttps://github.com/jdbrock/SignalREncodingRepro\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.302\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86E353k",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "The problem is that the encoder from PayloadSerializerOptions doesn\u0027t get used when calling the \u0060JsonSerializer.Serialize(ref writer, ..., payloadSerializerOptions)\u0060 overload. The options from the \u0060writer\u0060 get used instead.\r\n\r\nHowever, when looking at fixing this, I realized that while it would change what gets sent over the wire, the end result on both the .NET and Javascript side is that exact same string. You don\u0027t get an escaped string. So not sure how useful it would be to fix this if the only result is more bytes over the wire.",
        "createdAt": "2024-07-15T19:39:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56419#issuecomment-2229247460"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86NzK25",
    "title": "SignalR - Browser/TypeScript client - the Server-Sent Event keep alive ping fails to renew the access token if a 401 Unauthorized happens on the ping",
    "url": "https://github.com/dotnet/aspnetcore/issues/56494",
    "createdAt": "2024-06-27T20:05:36Z",
    "lastUpdated": "2024-07-12T13:31:53Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nIn the Browser/TypeScript SignalR client, the Server-Sent Event (SSE) keep alive ping fails to renew the access token (it fails to perform the existing retry logic and call the access token factory again) if a 401 Unauthorised happens on the ping.\r\n\r\nThis doesn\u0027t just affect the SSE ping... Similarly, when Long Polling connections are being reissued after they timeout, this same issue causes the Long Polling to unnecessarily go through a longer lifecycle where is  \u0027completes\u0027 / sets this._running to false and closes by calling this.raiseOnClose() - instead of a shorter lifecycle that keeps the _poll function looping in a running state.\r\n\r\nWhen an SSE keep alive ping happens (for example), AccessTokenHttpClient calls \u0060this._innerClient\u0060 to send a request.\r\nhttps://github.com/dotnet/aspnetcore/blob/94259788d58e16ba753900b4bf855a6aee08dcb1/src/SignalR/clients/ts/signalr/src/AccessTokenHttpClient.ts#L28\r\n\r\nThen FetchHttpClient throws an HttpError if the response is not Ok.\r\nhttps://github.com/dotnet/aspnetcore/blob/250b489a34b6c01509ed24b18b47b082d8ba4744/src/SignalR/clients/ts/signalr/src/FetchHttpClient.ts#L125\r\n\r\nAnd there be the problem, because that HttpError is not caught anywhere, so the existing retry logic in AccessTokenHttpClient is prevented from inspecting the response.statusCode for a 401 Unauthorized and performing a retry to get a new access token.\r\nhttps://github.com/dotnet/aspnetcore/blob/94259788d58e16ba753900b4bf855a6aee08dcb1/src/SignalR/clients/ts/signalr/src/AccessTokenHttpClient.ts#L30\r\n\r\n\u0060\u0060\u0060\r\n        const response = await this._innerClient.send(request);    // FetchHttpClient THROWS IN HERE\r\n\r\n        // SO THIS NEVER EXECUTES:\r\n        if (allowRetry \u0026\u0026 response.statusCode === 401 \u0026\u0026 this._accessTokenFactory) {\r\n            this._accessToken = await this._accessTokenFactory();\r\n            this._setAuthorizationHeader(request);\r\n            return await this._innerClient.send(request);\r\n        }\r\n\u0060\u0060\u0060\r\n\r\nGiven that it is existing retry logic that is not working as intended, I think this is a bug.\r\n\n\n### Expected Behavior\n\nThe existing retry code should execute as apparently intended and call the access token factory. \n\n### Steps To Reproduce\n\n1. Set up a hub connection (using the TypeScript client in a browser which has fetch available) with the option \u0060transport: HttpTransportType.ServerSentEvents,\u0060 \r\n2. Have a bearer access token with a lifetime shorter than the keep alive ping (or ensure that the ping will return a 401 Unauthorized)\r\n3. Let it run and wait for the keep alive ping to happen\r\n4. When the ping happens and a 401 is returned, the retry logic in AccessTokenHttpClient.ts does not execute because an HttpError is thrown \r\nhttps://github.com/dotnet/aspnetcore/blob/94259788d58e16ba753900b4bf855a6aee08dcb1/src/SignalR/clients/ts/signalr/src/AccessTokenHttpClient.ts#L30\r\n\n\n### Exceptions (if any)\n\nHttpError thrown by FetchHttpClient \r\n\r\nhttps://github.com/dotnet/aspnetcore/blob/250b489a34b6c01509ed24b18b47b082d8ba4744/src/SignalR/clients/ts/signalr/src/FetchHttpClient.ts#L125\n\n### .NET Version\n\n8.0.302\n\n### Anything else?\n\n\u0022@microsoft/signalr\u0022: \u0022^8.0.0\u0022,\r\n\r\nI see https://github.com/dotnet/aspnetcore/issues/5297 is somewhat related - not sure if that will change the logic or the  intended approach.\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86Ep_WI",
        "parentId": null,
        "author": "patelriki13",
        "content": "Any update on this issue?",
        "createdAt": "2024-07-12T13:31:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56494#issuecomment-2225599880"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86Q1QYb",
    "title": "@microsoft/signalr update from 8.0.0 to 8.0.7 webpack_require issue - angular 16 with module federation",
    "url": "https://github.com/dotnet/aspnetcore/issues/56989",
    "createdAt": "2024-07-25T12:47:53Z",
    "lastUpdated": "2024-11-07T15:13:51Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\n\r\nAfter the update from 8.0.0 to 8.0.7 the UI can not run after ng serve. Looks like the issue is the same as in the past: https://github.com/dotnet/aspnetcore/issues/49775\r\nAfter the UI runs with ng serve an error is thrown:\r\n![image](https://github.com/user-attachments/assets/f0606cfa-b539-4a03-bf9a-b318e863e8b8)\r\n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
    "upvotes": 1,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86SxnYD",
        "parentId": null,
        "author": "Erbenos",
        "content": "Same problem, different message in console (cause my setup is different with NX, so I don\u0027t \u0022ng\u0022 commands directly):\n\n\u0060\u0060\u0060\nlocalhost/:1 Access to script at \u0027node:module\u0027 from origin \u0027http://localhost:4200\u0027 has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: chrome, chrome-extension, chrome-untrusted, data, http, https, isolated-app\nnode:module:1 \n        \n        \n       Failed to load resource: net::ERR_FAILED\nmain.ts:9 ChunkLoadError: Loading chunk default-node_modules_microsoft_signalr_dist_esm_index_js failed.\n(error: http://localhost:4200/default-node_modules_microsoft_signalr_dist_esm_index_js.js)\n\u0060\u0060\u0060\n\n8.0.7 is broken, 8.0.0 is fine. As OP has noted, in past, I have had to use preview version of 8.0.0 to workaround similar problem (as the similar issue was in 7x, https://github.com/dotnet/aspnetcore/issues/49775), then when the actual 8.0.0 landed it worked fine. 8.0.7 is broken again.",
        "createdAt": "2024-11-07T15:10:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/56989#issuecomment-2462479875"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86Rwsw4",
    "title": "@microsoft SignalR 8.0.9. Failed to resolve module specifier \u0022module\u0022. Relative references must start with either \u0022/\u0022, \u0022./\u0022, or \u0022../\u0022",
    "url": "https://github.com/dotnet/aspnetcore/issues/57145",
    "createdAt": "2024-08-02T17:33:27Z",
    "lastUpdated": "2024-12-31T17:55:06Z",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nHey @BrennanConroy /Team\r\n\r\nI have been following up on this issue. This issue was resolved in 8.0.0. \r\n\r\nI am using Angular17 / Webpack and doing module federation by sharing signalr and so, I see this as first line in the bundled signalr module,\r\n\r\n\u0060\u0060\u0060\r\nimport { createRequire as __WEBPACK_EXTERNAL_createRequire } from \u0022module\u0022;\r\n\u0060\u0060\u0060\r\nWhen this file runs on browser, its thowing the error\r\n\r\n**_Uncaught TypeError: Failed to resolve module specifier \u0022module\u0022. Relative references must start with either \u0022/\u0022, \u0022./\u0022, or \u0022../\u0022._**\r\n\r\nThis is probably because of the below PR : [PR:5529](https://github.com/dotnet/aspnetcore/pull/55229) which reverted this [commit](https://github.com/dotnet/aspnetcore/commit/93520b67ad15b45b1fb39fe45fd97c06ebece7e7)\r\n\r\nCan you please help me with a work around for this issue?\r\n\r\n### Expected Behavior\r\n\r\nThis should not have node dynamic import releated code for angular broswer build.\r\n\r\n### Steps To Reproduce\r\n\r\n_No response_\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "upvotes": 1,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86HghD-",
        "parentId": null,
        "author": "eposbg",
        "content": "I am having absolutely the same issue with the same setup. Angular 17, module federation with webpack, signalR package version 8.0.7. Any update?",
        "createdAt": "2024-08-07T13:14:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57145#issuecomment-2273448190"
      },
      {
        "id": "IC_kwDOAQzde86JQSic",
        "parentId": null,
        "author": "zuccatoagustin84",
        "content": "same  problem, [ Angular 17, module federation with webpack, signalR package version 8.0.7. Any update?](https://github.com/dotnet/aspnetcore/issues/57145#issuecomment-2273448190)",
        "createdAt": "2024-08-21T18:53:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57145#issuecomment-2302748828"
      },
      {
        "id": "IC_kwDOAQzde86Jf9dl",
        "parentId": null,
        "author": "RebockraAtAtos",
        "content": "Same problem with Angular 17, module federation with webpack and version 8.0.7. Please provide an update. How do we fix this?",
        "createdAt": "2024-08-23T11:06:07Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57145#issuecomment-2306856805"
      },
      {
        "id": "IC_kwDOAQzde86JzLks",
        "parentId": null,
        "author": "RebockraAtAtos",
        "content": "Hello, unfortunately this is a blocking issue for our AI integration, since we want to be able stream model responses directly to the user interface. SignalR support for Angular is crucial to achieve this task. Please advise how to make it work for Angular 17 that is using module federation with webpack.",
        "createdAt": "2024-08-27T08:32:21Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57145#issuecomment-2311895340"
      },
      {
        "id": "IC_kwDOAQzde86LT6QN",
        "parentId": null,
        "author": "forefrontmartingrantz",
        "content": "I guess its because of this: https://github.com/dotnet/aspnetcore/issues/47674#issuecomment-2218136309",
        "createdAt": "2024-09-09T06:39:34Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57145#issuecomment-2337252365"
      },
      {
        "id": "IC_kwDOAQzde86RhdSp",
        "parentId": null,
        "author": "SanderBreivik",
        "content": "Any updates on this, we had to downgrade to 8.0.0 as a temp fix. @BrennanConroy I see that you pushed out the previous fix in [48154](https://github.com/dotnet/aspnetcore/pull/48154), is this something currently being looked at?",
        "createdAt": "2024-10-28T12:34:29Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57145#issuecomment-2441467049"
      },
      {
        "id": "IC_kwDOAQzde86Y-0uF",
        "parentId": null,
        "author": "bigcakes",
        "content": "Any updates on this issue?",
        "createdAt": "2024-12-31T17:18:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57145#issuecomment-2566605701"
      },
      {
        "id": "IC_kwDOAQzde86Y-56E",
        "parentId": null,
        "author": "eposbg",
        "content": "Update to angular 18 and thr newest version of the signalR package fixed the issue for me",
        "createdAt": "2024-12-31T17:55:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57145#issuecomment-2566626948"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86SjqYz",
    "title": "Pass  websocket closeEvent.code in \u0060WebSocketTransport\u0060 onClose event to consumer via new error type WebSocketError",
    "url": "https://github.com/dotnet/aspnetcore/issues/57258",
    "createdAt": "2024-08-10T00:36:51Z",
    "lastUpdated": "2024-08-10T00:36:54Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am trying to handle WebSocket disconnections reliably in my SignalR client. However, the current implementation of the [WebSocketTransport](https://github.com/dotnet/aspnetcore/blob/9518cf2c2152b9406efccd928d90e67793065dbe/src/SignalR/clients/ts/signalr/src/WebSocketTransport.ts#L177) in the SignalR TypeScript client SDK does not pass the \u0060closeEvent.code\u0060 to the consumer. This makes it difficult to distinguish between different types of disconnections and act accordingly, as the essential information provided by the WebSocket close event code is not accessible.\n\n### Describe the solution you\u0027d like\n\nI propose introducing a new error type, \u0060WebSocketError\u0060, which extends the \u0060Error\u0060 class. This error should capture the \u0060wasClean\u0060 and code fields from the \u0060closeEvent\u0060, similar to how the SDK currently handles \u0060HttpError\u0060 in [Errors.ts](https://github.com/dotnet/aspnetcore/blob/9518cf2c2152b9406efccd928d90e67793065dbe/src/SignalR/clients/ts/signalr/src/Errors.ts#L7) . This would allow consumers of the SDK to access these fields and handle WebSocket disconnections based on the specific close event code.\n\n### Additional context\n\n\r\nYou can find the current implementation in the following code references:\r\n- [WebSocketTransport.ts](https://github.com/dotnet/aspnetcore/blob/9518cf2c2152b9406efccd928d90e67793065dbe/src/SignalR/clients/ts/signalr/src/WebSocketTransport.ts#L176)\r\n- [HttpError in Errors.ts](https://github.com/dotnet/aspnetcore/blob/9518cf2c2152b9406efccd928d90e67793065dbe/src/SignalR/clients/ts/signalr/src/Errors.ts#L7)\r\n",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86UgWor",
    "title": "Discrepancy between SignalRConnectionInfo \u0026 object that is needed for the @microsoft/signalr lib",
    "url": "https://github.com/dotnet/aspnetcore/issues/57566",
    "createdAt": "2024-08-28T09:05:28Z",
    "lastUpdated": "2024-09-04T12:20:42Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen using a functionApp to set up a SignalR connection with a frontend, we get a **SignalRConnectionInfo** object from the **SignalRConnectionInfoInput** attribute on the function:\r\n\r\n\u0060\r\n    public sealed class SignalRConnectionInfo\r\n    {\r\n        public string Url { get; set; }\r\n        public string AccessToken { get; set; }\r\n    }\r\n\u0060\r\n\r\nWhen the **@microsoft/signalr** lib uses this object to start the connection, an error is thrown:\r\n\r\n _Error: Failed to start the connection: Error: None of the transports supported by the client are supported by the server._\r\n\r\nWhen changing the return object of the negotiate to have lowerCase properties, e.g. **url** and **accessToken** and send it to the client like that, the connection is started successfully.\n\n### Expected Behavior\n\nThe client lib should work with UpperCase properties\n\n### Steps To Reproduce\n\nFunctionApp function:\r\n\u0060\r\n   [Function(nameof(Negotiate))]\r\n   public SignalRConnectionInfo Negotiate(\r\n       [HttpTrigger(AuthorizationLevel.Anonymous)] HttpRequest req,\r\n       [SignalRConnectionInfoInput(HubName = _signalRHubName)] SignalRConnectionInfo connectionInfo)\r\n   {\r\n       return connectionInfo;\r\n   }\r\n\u0060\r\n\r\nclient (React):\r\n\u0060\r\nconst connection = new HubConnectionBuilder()\r\n        .withUrl(url, {\r\n          accessTokenFactory: fetchServiceToken,\r\n        })\r\n        .configureLogging(LogLevel.Information)\r\n        .withAutomaticReconnect()\r\n        .build();\r\nawait connection.start();\r\n\u0060\r\n\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86Kzyww",
        "parentId": null,
        "author": "DaveSmartEnt",
        "content": "@Swouterke thank you, I\u0027ve been trying to get past this today after migrating my project from c# 6 in-process to c# 8 isolated.\r\n\r\nI can confirm I had the exact same issue and changing property names to lowerCase fixed my issue. ",
        "createdAt": "2024-09-04T12:20:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57566#issuecomment-2328833072"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86UqTbg",
    "title": "using  garnet for ASP.NET Core SignalR scale-out",
    "url": "https://github.com/dotnet/aspnetcore/issues/57591",
    "createdAt": "2024-08-29T11:00:37Z",
    "lastUpdated": "2024-08-30T18:50:26Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n_No response_\n\n### Describe the solution you\u0027d like\n\nCurrent functionality with Redis as a backplane for ASP.NET Core SignalR scale-out is valuable and I think It would be beneficial to extend this functionality to support [Garnet](https://github.com/microsoft/garnet) as an alternative backplane option\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86KNBHJ",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Have you tried it and hit issues?\r\n\r\nGarnet supports many of the commands that Redis uses so can often \u0022just work\u0022 if you replace the redis connection string with a Garnet one. Since SignalR primarily uses PUBSUB, which [Garnet supports](https://microsoft.github.io/garnet/docs/commands/api-compatibility#pubsub), there probably aren\u0027t any issues with using Garnet.",
        "createdAt": "2024-08-29T19:10:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57591#issuecomment-2318668233"
      },
      {
        "id": "IC_kwDOAQzde86KaLMH",
        "parentId": null,
        "author": "amdnaji",
        "content": "Sound great , but what if we want to use Garnet directly without rely on Redis.",
        "createdAt": "2024-08-30T18:29:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57591#issuecomment-2322117383"
      },
      {
        "id": "IC_kwDOAQzde86KaQU_",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "You mean use GarnetClient instead of StachExchange.Redis.ConnectionMultiplexer? Then there\u0027d need to be a new implementation of the SignalR backplane.",
        "createdAt": "2024-08-30T18:43:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57591#issuecomment-2322138431"
      },
      {
        "id": "IC_kwDOAQzde86KaTJP",
        "parentId": null,
        "author": "amdnaji",
        "content": "Yes ,that what I meant a new Client implementation for Garnet .",
        "createdAt": "2024-08-30T18:50:24Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57591#issuecomment-2322149967"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86WNs5O",
    "title": "[Android]MessagePack Exception:The transport does not support the \u0027Binary\u0027 transfer",
    "url": "https://github.com/dotnet/aspnetcore/issues/57802",
    "createdAt": "2024-09-11T07:48:10Z",
    "lastUpdated": "2024-09-30T01:30:25Z",
    "body": "### Description\r\nI am using SignalR to connect to a server, but there is an exception when using MessagePack.\r\n\r\nComment out line 15,\u0027Exception\u0027 no longer pops up\r\n\r\nException.Message:\r\nUnable to connect to the server with any of the available transports. (ServerSentEvents failed: The transport does not support the \u0027Binary\u0027 transfer format.) (LongPolling failed: Error while copying content to a stream.)\r\n\r\n### Steps to Reproduce\r\n\r\n1. Open /Issue24710/Issue24710.sln\r\n2. deployment the project\r\n3. Click \u0022Click me\u0022\r\n4. Then an \u0027exception\u0027 message will appear\r\n\r\n### Link to public reproduction project repository\r\n\r\nhttps://github.com/BaY1251/MauiDebug.git\r\n\r\n### Version with bug\r\n\r\n8.0.82 SR8.2\r\n\r\n### Is this a regression from previous behavior?\r\n\r\nNot sure, did not test other versions\r\n\r\n### Last version that worked well\r\n\r\nUnknown/Other\r\n\r\n### Affected platforms\r\n\r\nAndroid\r\n\r\n### Affected platform versions\r\n\r\nAndroid7.1\r\n\r\n### Did you find any workaround?\r\n\r\n_No response_\r\n\r\n### Relevant log output\r\n\r\nStackTrace:\r\n\u0060\u0060\u0060\r\n   at Microsoft.AspNetCore.Http.Connections.Client.HttpConnection.SelectAndStartTransport(TransferFormat transferFormat, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Client.HttpConnection.StartAsyncCore(TransferFormat transferFormat, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Client.HttpConnection.StartAsync(TransferFormat transferFormat, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Client.HttpConnectionFactory.ConnectAsync(EndPoint endPoint, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Http.Connections.Client.HttpConnectionFactory.ConnectAsync(EndPoint endPoint, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsyncCore(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsyncInner(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsync(CancellationToken cancellationToken)\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86LuB8d",
        "parentId": null,
        "author": "jfversluis",
        "content": "Can you please give a bit more context? The linked repo has a lot of code, where do we look? What is the full error message? What have you tried already?",
        "createdAt": "2024-09-11T07:59:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57802#issuecomment-2344099613"
      },
      {
        "id": "IC_kwDOAQzde86LuB8h",
        "parentId": null,
        "author": "BaY1251",
        "content": "@jfversluis I have updated the context",
        "createdAt": "2024-09-11T08:56:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57802#issuecomment-2344099617"
      },
      {
        "id": "IC_kwDOAQzde86LuB8p",
        "parentId": null,
        "author": "ninachen03",
        "content": "@BaY1251 \r\nI didn\u0027t see the \u0027MessagePack Exception:The transport does not support the \u0027Binary\u0027 transfer\u0027 but show Connection failure when use VS 17.12.0. Preview2.0 Maui 8.0.82\r\n![image](https://github.com/user-attachments/assets/259b2166-ef95-4dc2-b1c1-106e2efb6ee9)\r\n",
        "createdAt": "2024-09-11T09:01:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57802#issuecomment-2344099625"
      },
      {
        "id": "IC_kwDOAQzde86LuH3S",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "https://stackoverflow.com/questions/74792022/why-does-the-android-version-of-my-maui-app-not-have-internet-access",
        "createdAt": "2024-09-11T16:26:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57802#issuecomment-2344123858"
      },
      {
        "id": "IC_kwDOAQzde86LxlZu",
        "parentId": null,
        "author": "BaY1251",
        "content": "\u003E @BaY1251 I didn\u0027t see the \u0027MessagePack Exception:The transport does not support the \u0027Binary\u0027 transfer\u0027 but show Connection failure when use VS 17.12.0. Preview2.0 Maui 8.0.82 ![image](https://private-user-images.githubusercontent.com/128687574/366378614-259b2166-ef95-4dc2-b1c1-106e2efb6ee9.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MjYxMDE3MzMsIm5iZiI6MTcyNjEwMTQzMywicGF0aCI6Ii8xMjg2ODc1NzQvMzY2Mzc4NjE0LTI1OWIyMTY2LWVmOTUtNGRjMi1iMWMxLTEwNmUyZWZiNmVlOS5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjQwOTEyJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI0MDkxMlQwMDM3MTNaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT00NGEzODEwNmRjYWVjNjVkNTllMGVlMmM2ODcxMDM5YTMyYjdjMmMxYWYxMGZmNWY2ZjhiM2E4ZWM5NzIwNmQwJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCZhY3Rvcl9pZD0wJmtleV9pZD0wJnJlcG9faWQ9MCJ9.nML6laOa-kqScaMGE_IJNKtwWHy7Mx0m7n7uqpXDucA)\r\n\r\n@ninachen03 A server with Message Pack enabled is required. Can someone help you build a simple server?",
        "createdAt": "2024-09-12T00:38:22Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57802#issuecomment-2345031278"
      },
      {
        "id": "IC_kwDOAQzde86N9-wM",
        "parentId": null,
        "author": "BaY1251",
        "content": "The last working version is VS-17.8.0",
        "createdAt": "2024-09-30T01:28:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/57802#issuecomment-2381835276"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86W4vSh",
    "title": "Socket Connection closed Prematurely ",
    "url": "https://github.com/dotnet/aspnetcore/issues/57919",
    "createdAt": "2024-09-17T15:23:47Z",
    "lastUpdated": "2024-09-17T15:23:51Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI am facing  issue where some of the websocket connections get removed because of Socket Exception closed Preamturely though the client has not closed the connection. \r\nMy workspace setup uses Traefik as External Load balancer to Kubernetes. \r\nI enabled verbose logging on SignalR server and I see that the client pings are not recorded before the exception is thrown. \r\nPlease guide me how to resolve the issue. Attaching below logs and exception : \r\n\r\n\r\n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\nSystem.Net.WebSockets.WebSocketException (0x80004005): The remote party closed the WebSocket connection without completing the close handshake. at System.Net.WebSockets.ManagedWebSocket.ThrowEOFUnexpected() at System.Net.WebSockets.ManagedWebSocket.EnsureBufferContainsAsync(Int32 minimumRequiredBytes, CancellationToken cancellationToken) at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token) at System.Net.WebSockets.ManagedWebSocket.ReceiveAsyncPrivate[TResult](Memory\u00601 payloadBuffer, CancellationToken cancellationToken) at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder\u00601.StateMachineBox\u00601.System.Threading.Tasks.Sources.IValueTaskSource\u003CTResult\u003E.GetResult(Int16 token) at Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsServerTransport.StartReceiving(WebSocket socket)\n\n### .NET Version\n\n8\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86ZI2ND",
    "title": "SignalR JavaScript client sometimes freeze at Connecting or Disconnecting state unexpectedly",
    "url": "https://github.com/dotnet/aspnetcore/issues/58260",
    "createdAt": "2024-10-07T03:58:00Z",
    "lastUpdated": "2024-11-01T02:02:56Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWhen calling \u0060hubConnection.start()\u0060, sometimes the client freezes at \u0060Connecting\u0060 state, and when calling \u0060hubConnection.stop()\u0060, sometimes the client freezes at \u0060Disconnecting\u0060 state. Unless the HubConnection instance is disposed and rebuilt.\r\n\n\n### Expected Behavior\n\nCalling \u0060hubConnection.start()\u0060 should let the client become \u0060Connected\u0060 state as soon as possible, while calling \u0060hubConnection.stop()\u0060 should let the client become \u0060Disconnected\u0060 state as soon as possible.\n\n### Steps To Reproduce\n\n\u0060\u0060\u0060ts\r\nimport { HubConnection, HubConnectionBuilder, HubConnectionState, LogLevel } from \u0022@microsoft/signalr\u0022;\r\n\r\nvar hubConnection: HubConnection;\r\n\r\nhubConnection = new HubConnectionBuilder()\r\n                                        .withUrl(\u0022\u003Cserver endpoint\u003E\u0022)\r\n                                        .configureLogging(LogLevel.Information)\r\n                                        .withServerTimeout(30000)\r\n                                        .withKeepAliveInterval(15000)\r\n                                        .withStatefulReconnect()\r\n                                        .build();\r\n\r\nawait hubConnection.start();\r\n\r\nfunction checkIfHubConnected(): boolean {\r\n    return hubConnection?.state == HubConnectionState.Connected ?? false;\r\n}\r\n\r\nfunction hubConnectionState() {\r\n    return hubConnection?.state;\r\n}\r\n\r\n\u0060\u0060\u0060\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.7\n\n### Anything else?\n\npackage.json\r\n\u0060\u0060\u0060json\r\n{\r\n   \u0022dependencies\u0022: {\r\n      \u0022@microsoft/signalr\u0022: \u0022^8.0.7\u0022\r\n   }\r\n}\r\n\u0060\u0060\u0060",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "Needs: Attention :wave:"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86O5gyK",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "What do you mean it \u0022freezes\u0022. If the client can\u0027t connect to the server it might take longer than usual for the HTTP request to fail.\r\n\r\nCan you show client and server logs when it \u0022freezes\u0022?",
        "createdAt": "2024-10-07T16:56:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2397441162"
      },
      {
        "id": "IC_kwDOAQzde86Pok4i",
        "parentId": null,
        "author": "tomfong",
        "content": "@BrennanConroy The hub connection sometimes disconnect due to network issue. When I try to manually reconnect the hub by the following code\n\u0060\u0060\u0060ts\nasync function manualReconnect() {\n  console.log(\u0060Calling manualReconnect()...\u0060);\n\n  if (hubConnection == null) {\n    console.log(\u0060connection state [null], skip starting reconnection\u0060);\n    return;\n  }\n  \n  if (hubConnection.state == HubConnectionState.Connected) {\n    console.log(\u0060connection state [Connected], skip starting reconnection\u0060);\n    return;\n  }\n  \n  if (hubConnection.state == HubConnectionState.Reconnecting) {\n    console.log(\u0060connection state [Reconnecting], skip starting reconnection\u0060);\n    return;\n  }\n  \n  if (hubConnection.state == HubConnectionState.Disconnecting) {\n    console.log(\u0060connection state [Disconnecting], skip starting reconnection\u0060);\n    return;\n  }\n  \n  if (hubConnection.state == HubConnectionState.Disconnected || hubConnection.state == HubConnectionState.Connecting) {\n    if (hubConnection.state == HubConnectionState.Connecting) {\n      console.log(\u0060connection state [Connecting], stopping connection...\u0060);\n      try {\n        await hubConnection.stop()\n          .then(_ =\u003E {\n            console.log(\u0060Connection stopped\u0060);\n          })\n          .catch(err =\u003E {\n            console.log(\u0060Failed to stop connection, err: ${JSON.stringify(err)}\u0060);\n          });\n      } catch (e) {\n        console.log(\u0060Failed to stop connection, e: ${JSON.stringify(e)}\u0060);\n      }\n    } else {\n      console.log(\u0060connection state [Disconnected]\u0060);\n    }\n  \n    console.log(\u0060Starting reconnection...\u0060);\n  \n    // Start reconnection\n    try {\n      await hubConnection.start()\n        .then(_ =\u003E {\n          console.log(\u0060reconnected!\u0060);\n          return;\n        })\n        .catch((err) =\u003E {\n          console.error(\u0060starting connection occurred error, err: ${JSON.stringify(err)}\u0060);\n          return;\n        });\n    } catch (e) {\n      console.error(\u0060starting connection occurred error, e: ${JSON.stringify(e)}\u0060);\n      return;\n    }\n  }\n}\n\u0060\u0060\u0060\n\nThe log of the first attempt:\n\u0060\u0060\u0060log\nCalling manualReconnect()...\nconnection state [Disconnected]\nStarting reconnection...\n\u0060\u0060\u0060\nand then nothing else.\n\nAfter around 30 minutes, I call \u0060manualReconnect()\u0060 again and the log shows:\n\u0060\u0060\u0060log\nCalling manualReconnect()...\nconnection state [Connecting], stopping connection...\n\u0060\u0060\u0060\nand then nothing else.\n\nAfter several minutes, I call \u0060manualReconnect()\u0060 again and the log shows:\n\u0060\u0060\u0060log\nCalling manualReconnect()...\nconnection state [Disconnecting], skip starting reconnection\n\u0060\u0060\u0060\n\nAnd after another several minutes, I call \u0060manualReconnect()\u0060 again and the log shows:\n\u0060\u0060\u0060log\nCalling manualReconnect()...\nconnection state [Disconnecting], skip starting reconnection\n\u0060\u0060\u0060\n\nTherefore, I determine the SignalR client \u0022freezing\u0022 at Connecting and Disconnecting states due to unknown reason.",
        "createdAt": "2024-10-14T02:19:27Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2409778722"
      },
      {
        "id": "IC_kwDOAQzde86PwupN",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Can you repro this consistently?\n\nPlease turn on logging (trace is best), also what do the network traces look like?",
        "createdAt": "2024-10-14T18:01:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2411915853"
      },
      {
        "id": "IC_kwDOAQzde86P9956",
        "parentId": null,
        "author": "tomfong",
        "content": "@BrennanConroy  It is running on NodeJS app. How to access the log and trace?",
        "createdAt": "2024-10-16T00:22:00Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2415386234"
      },
      {
        "id": "IC_kwDOAQzde86QFoxs",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "https://learn.microsoft.com/aspnet/core/signalr/diagnostics?view=aspnetcore-8.0#javascript-client-logging\n\nhttps://learn.microsoft.com/aspnet/core/signalr/diagnostics?view=aspnetcore-8.0#network-traces",
        "createdAt": "2024-10-16T16:54:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2417396844"
      },
      {
        "id": "IC_kwDOAQzde86QKyg4",
        "parentId": null,
        "author": "tomfong",
        "content": "@BrennanConroy After following the guide, I\u0027ve captured some logs that seem to be useful:\n\nHere was the log when I noticed the hub suddenly disconnected\n\u0060\u0060\u0060log\nSignalR Logger: [Debug] HttpConnection.stopConnection(undefined) called while in state Disconnecting.\nSignalR Logger: [Error] Connection disconnected with error \u0027Error: Server timeout elapsed without receiving a message from the server.\u0027.\nSignalR Logger: [Debug] HubConnection.connectionClosed(Error: Server timeout elapsed without receiving a message from the server.) called while in state Connected.\n\u0060\u0060\u0060\n\nThe log when I tried to manually reconnect the hub\n\u0060\u0060\u0060log\nCalling manualReconnect()...\nconnection state [Disconnected]\nStarting reconnection...\nSignalR Logger: [Debug] Starting HubConnection.\nSignalR Logger: [Debug] Starting connection with transfer format \u0027Text\u0027.\nSignalR Logger: [Debug] Sending negotiation request: https://\u003CHub Endpoint, Hidden\u003E/negotiate?negotiateVersion=1\u0026useStatefulReconnect=true.\nSignalR Logger: [Debug] Selecting transport \u0027WebSockets\u0027.\n\u0060\u0060\u0060\nand then the client looked like \u0022freezed\u0022.\n\nTherefore, after several minutes, I tried to manually reconnect the hub once more by calling \u0060manualReconnect()\u0060 and then the log:\n\u0060\u0060\u0060log\nCalling manualReconnect()...\nconnection state [Connecting], stopping connection...\nSignalR Logger: [Debug] Stopping HubConnection.\n\u0060\u0060\u0060\nand no more logs else.",
        "createdAt": "2024-10-17T07:14:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2418747448"
      },
      {
        "id": "IC_kwDOAQzde86QPxkX",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Could be https://github.com/websockets/ws/issues/1948. Since you\u0027re on node you\u0027re using the \u0022ws\u0022 npm package and it doesn\u0027t have a default handshake timeout.\n\nYou can test this by injecting a custom websocket constructor:\n\u0060\u0060\u0060javascript\nconnection = new HubConnectionBuilder().withUrl(\u0022url\u0022, {\n    WebSocket = MyWS\n}).build();\n\nclass MyWS extends WebSocket {\n    constructor(url, protocols, options) {\n        super(url, protocols, { ...options, handshakeTimeout : 10000 });\n    }\n}\n\u0060\u0060\u0060",
        "createdAt": "2024-10-17T17:00:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2420054295"
      },
      {
        "id": "IC_kwDOAQzde86QTfBS",
        "parentId": null,
        "author": "tomfong",
        "content": "@BrennanConroy This error occurred: \u0060Object literal may only specify known properties, and \u0027WebSocket\u0027 does not exist in type \u0027IHttpConnectionOptions\u0027\u0060, with code\n\n\u0060\u0060\u0060\n this._hubConnection = new HubConnectionBuilder()\n                                  .withUrl(process.env.SIGNALR_ENDPOINT, { WebSocket: CustomWebSocket })\n                                  .configureLogging(new CustomSignalRLogger())\n                                  .withServerTimeout(30000)\n                                  .withKeepAliveInterval(15000)\n                                  .withStatefulReconnect()\n                                  .build();\n\u0060\u0060\u0060",
        "createdAt": "2024-10-18T01:15:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2421026898"
      },
      {
        "id": "IC_kwDOAQzde86QUOyB",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u0060\u0060\u0060typescript\nIHttpConnectionOptions options;\n(options as any).WebSocket = CustomWebSocket;\nnew HubConnectionBuilder()\n   .withUrl(..., options)\n   .build();\n\u0060\u0060\u0060",
        "createdAt": "2024-10-18T03:25:03Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2421222529"
      },
      {
        "id": "IC_kwDOAQzde86Q_Ky6",
        "parentId": null,
        "author": "tomfong",
        "content": "@BrennanConroy I\u0027ve followed your suggestion and implemented related code. This time the log is quite different:\n\n\u0060\u0060\u0060\nSignalR Logger:  [Debug] Starting HubConnection.\nSignalR Logger:  [Debug] Starting connection with transfer format \u0027Text\u0027.\nSignalR Logger:  [Debug] Sending negotiation request: https://\u003CENDPOINT\u003E/hub/negotiate?negotiateVersion=1\u0026useStatefulReconnect=true.\nSignalR Logger:  [Debug] Selecting transport \u0027WebSockets\u0027.\nSignalR Logger:  [Information] (WebSockets transport) There was an error with the transport.\nSignalR Logger:  [Error] Failed to start the transport \u0027WebSockets\u0027: Error: WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.\nSignalR Logger:  [Debug] Selecting transport \u0027ServerSentEvents\u0027.\nSignalR Logger:  [Debug] Sending negotiation request: https://\u003CENDPOINT\u003E/hub/negotiate?negotiateVersion=1\u0026useStatefulReconnect=true.\n\u0060\u0060\u0060\n\nThen no more logs else.\n\n",
        "createdAt": "2024-10-23T14:47:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2432478394"
      },
      {
        "id": "IC_kwDOAQzde86RkK8C",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Did you wait \u003E100 seconds? We pass in a default timeout of 100 seconds to the negotiate call.\n\nWhat version of node are you using?",
        "createdAt": "2024-10-28T17:16:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2442178306"
      },
      {
        "id": "IC_kwDOAQzde86Rm2Ly",
        "parentId": null,
        "author": "tomfong",
        "content": "@BrennanConroy Yes, it always holds \u0060Connecting\u0060 state more than 100 seconds.\n\nThe node version is \u006020.15.1\u0060",
        "createdAt": "2024-10-28T23:45:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2442879730"
      },
      {
        "id": "IC_kwDOAQzde86Rm4gG",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Try using node v21\u002B. Version \u003C20 uses the node-fetch npm library, whereas 21\u002B uses the native fetch from node. Would narrow down what might be wrong.",
        "createdAt": "2024-10-28T23:54:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2442889222"
      },
      {
        "id": "IC_kwDOAQzde86RnXoS",
        "parentId": null,
        "author": "tomfong",
        "content": "@BrennanConroy But \u0060node-fetch\u0060 is one of the dependencies of \u0060@microsoft/signalr\u0060 8.0.7\n\n\u0060\u0060\u0060json\n    \u0022node_modules/@microsoft/signalr\u0022: {\n      \u0022version\u0022: \u00228.0.7\u0022,\n      \u0022resolved\u0022: \u0022https://registry.npmjs.org/@microsoft/signalr/-/signalr-8.0.7.tgz\u0022,\n      \u0022integrity\u0022: \u0022sha512-PHcdMv8v5hJlBkRHAuKG5trGViQEkPYee36LnJQx4xHOQ5LL4X0nEWIxOp5cCtZ7tu\u002B30quz5V3k0b1YNuc6lw==\u0022,\n      \u0022dependencies\u0022: {\n        \u0022abort-controller\u0022: \u0022^3.0.0\u0022,\n        \u0022eventsource\u0022: \u0022^2.0.2\u0022,\n        \u0022fetch-cookie\u0022: \u0022^2.0.3\u0022,\n        \u0022node-fetch\u0022: \u0022^2.6.7\u0022,\n        \u0022ws\u0022: \u0022^7.4.5\u0022\n      }\n    }\n\u0060\u0060\u0060\n\nHow about I restrict the client only using \u0060WebSocket\u0060 and disable \u0060SSE\u0060 and \u0060Long Polling\u0060? Do you think it will help?",
        "createdAt": "2024-10-29T02:06:39Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2443016722"
      },
      {
        "id": "IC_kwDOAQzde86SGZjY",
        "parentId": null,
        "author": "tomfong",
        "content": "Finally, my problem solved.\n\nHere is my solution to ensure that starting connection or reconnection would not be stuck at \u0060Connecting\u0060 state if any error occurred:\n\u0060\u0060\u0060ts\nclass CustomWebSocket extends WebSocket {\n  constructor(\n    address: string | URL,\n    protocols?: string | string[],\n    options?: WebSocket.ClientOptions | ClientRequestArgs,\n  ) {\n    super(address, protocols, { ...options, handshakeTimeout: 10000 });\n  }\n}\n\nconst options: IHttpConnectionOptions = {\n  transport: HttpTransportType.WebSockets,\n  skipNegotiation: true\n};\n(options as any).WebSocket = CustomWebSocket;\n\nthis._hubConnection = new HubConnectionBuilder()\n        .withUrl(process.env.SIGNALR_ENDPOINT, options)\n        .configureLogging(new CustomSignalRLogger())\n        .withServerTimeout(30000)\n        .withKeepAliveInterval(15000)\n        .withStatefulReconnect()\n        .build();\n\nawait this._hubConnection.start()\n\u0060\u0060\u0060\n\nHowever, I do think the package should provide official way to set \u0060handshakeTimeout\u0060, as well as the timeout of \u0060Server-Sent Event\u0060.",
        "createdAt": "2024-11-01T02:01:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58260#issuecomment-2451151064"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86ZdbaE",
    "title": "Support async callbacks in SignalR typescript client",
    "url": "https://github.com/dotnet/aspnetcore/issues/58309",
    "createdAt": "2024-10-09T03:20:02Z",
    "lastUpdated": "2024-10-11T17:22:14Z",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nWe have async listeners set up for onclose, onreconnecting, and onreconnected events, along with a logger to capture all SignalR messages. However, when an unhandled rejection occurs within the async listeners, it is not being passed back to the registered logger.\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "enhancement",
      "area-signalr",
      "api-approved"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86PITQx",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Please show an example. We don\u0027t even know what client you\u0027re using.",
        "createdAt": "2024-10-09T04:58:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58309#issuecomment-2401317937"
      },
      {
        "id": "IC_kwDOAQzde86POJDF",
        "parentId": null,
        "author": "sryarama",
        "content": "Here is the sample listener code. \n\n\u0060hubConnection.onclose( async (error) =\u003E {\n  if (isTokenValid) {\n     throw new Error(\u0022Invalid token\u0022);\n  } else {\n     await reconnect();\n  }\n});\u0060\n\nLets say if I don\u0027t have a valid token, I want to log an error in the telemetry. SignalR SDK is capturing the exception I throw above and not sending it through the logger I registered during initialization.",
        "createdAt": "2024-10-09T17:01:12Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58309#issuecomment-2402848965"
      },
      {
        "id": "IC_kwDOAQzde86POKyA",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Ok so you\u0027re using the typescript library. The exception is being passed to the logger:\nhttps://github.com/dotnet/aspnetcore/blob/80ac2ff6a4e223eb5a91112912dc5d53c093d47f/src/SignalR/clients/ts/signalr/src/HubConnection.ts#L864\nI\u0027m guessing you didn\u0027t call \u0060configureLogging(logger)\u0060 on the \u0060HubConnectionBuilder\u0060. But also, if you\u0027re explicitly throwing an exception just for it to be logged, why not just log instead of throwing.",
        "createdAt": "2024-10-09T17:04:44Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58309#issuecomment-2402856064"
      },
      {
        "id": "IC_kwDOAQzde86PQr2f",
        "parentId": null,
        "author": "sryarama",
        "content": "We registered the logger using configureLogging. And it is working as expected when I register the sync listeners like this \u0060hubConnection.onclose((error) =\u003E { });\u0060. Issue is only with async listeners \u0060hubConnection.onclose(async (error) =\u003E { });\u0060\n\nAbout explicitly throwing, its not that simple in our case. For easy understanding I gave the example like that.",
        "createdAt": "2024-10-09T22:08:55Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58309#issuecomment-2403515807"
      },
      {
        "id": "IC_kwDOAQzde86PQ1fq",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Oh I see, missed the fact that sync works and async doesn\u0027t. Async methods aren\u0027t currently supported for the callbacks. See the method signature:\n\u0060public onclose(callback: (error?: Error) =\u003E void): void\u0060\nIf you used a linter in typescript you might see warnings/errors when passing an async method to \u0060onclose\u0060. https://typescript-eslint.io/rules/no-misused-promises/\n\nObviously I don\u0027t know your code and how much control you have, but wrapping anything passed to \u0060onclose(...)\u0060 in a \u0060try {} catch{}\u0060 would fix your issue.",
        "createdAt": "2024-10-09T22:47:42Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58309#issuecomment-2403555306"
      },
      {
        "id": "IC_kwDOAQzde86PZt3F",
        "parentId": null,
        "author": "AshkanAfsharpour",
        "content": "Hi @BrennanConroy,\n\nAfter reviewing the current implementation of the SignalR TypeScript client, I\u2019ve identified that the method signatures for \u0060onclose\u0060, \u0060onreconnecting\u0060, and \u0060onreconnected\u0060 currently do not support async callbacks.\n\nTo resolve this, I propose updating the method signatures to support Promise\u003Cvoid\u003E for these callbacks, as shown below:\n\n\u0060\u0060\u0060\npublic onclose(callback: (error?: Error) =\u003E void | Promise\u003Cvoid\u003E): void;\n\u0060\u0060\u0060\n\n\nAdditionally, the \u0060_completeClose\u0060 method should be made \u0060async\u0060 and updated to properly await both synchronous and asynchronous callbacks.\n The current implementation:\nhttps://github.com/dotnet/aspnetcore/blob/80ac2ff6a4e223eb5a91112912dc5d53c093d47f/src/SignalR/clients/ts/signalr/src/HubConnection.ts#L861-L865\n\nWould be updated to this:\n\u0060\u0060\u0060\ntry {\n    for (const callback of this._closedCallbacks) {\n        await callback(error);\n    }\n} catch (e) {\n    this._logger.log(LogLevel.Error, \u0060An onclose callback called with error \u0027${error}\u0027 threw error \u0027${e}\u0027.\u0060);\n}\n\u0060\u0060\u0060\n\nI would be happy to submit a PR for this change, along with tests to cover both synchronous and asynchronous scenarios.",
        "createdAt": "2024-10-10T19:30:31Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58309#issuecomment-2405883333"
      },
      {
        "id": "IC_kwDOAQzde86Pavve",
        "parentId": null,
        "author": "dotnet-policy-service",
        "content": "Thank you for submitting this for API review. This will be reviewed by @dotnet/aspnet-api-review at the next meeting of the ASP.NET Core API Review group. Please ensure you take a look at [the API review process documentation](https://github.com/dotnet/aspnetcore/blob/main/docs/APIReviewProcess.md) and ensure that:\n\n* The PR contains changes to the reference-assembly that describe the API change. **Or**, you have included a snippet of reference-assembly-style code that illustrates the API change.\n* The PR describes the impact to users, both positive (useful new APIs) and negative (breaking changes).\n* Someone is assigned to \u0022champion\u0022 this change in the meeting, and they understand the impact and design of the change.\n\u003C!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003E",
        "createdAt": "2024-10-10T22:31:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58309#issuecomment-2406153182"
      },
      {
        "id": "IC_kwDOAQzde86PawY-",
        "parentId": null,
        "author": "halter73",
        "content": "API Review Notes:\n\n- Seems convenient. As noted, this mostly already works, but we should definitely update the logging logic to await if we\u0027re updating the signature.\n\nAPI Approved!\n\n\u0060\u0060\u0060diff\n- public onclose(callback: (error?: Error) =\u003E void): void;\n\u002B public onclose(callback: (error?: Error) =\u003E void | Promise\u003Cvoid\u003E): void;\n\n- public onreconnecting(callback: (error?: Error) =\u003E void): void;\n\u002B public onreconnecting(callback: (error?: Error) =\u003E void | Promise\u003Cvoid\u003E): void;\n\n- public onreconnected(callback: (connectionId?: string) =\u003E void): void;\n\u002B public onreconnected(callback: (connectionId?: string) =\u003E void | Promise\u003Cvoid\u003E): void;\n\u0060\u0060\u0060",
        "createdAt": "2024-10-10T22:33:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58309#issuecomment-2406155838"
      },
      {
        "id": "IC_kwDOAQzde86Payz1",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E try {\n\u003E     for (const callback of this._closedCallbacks) {\n\u003E         await callback(error);\n\u003E     }\n\u003E } catch (e) {\n\u003E     this._logger.log(LogLevel.Error, \u0060An onclose callback called with error \u0027${error}\u0027 threw error \u0027${e}\u0027.\u0060);\n\u003E }\n\nWe need to be careful about just awaiting inline. It would mean marking the entire method as async which then means awaiting it at all the call-sites. We might just want to fire-and-forget these callbacks. For example see the C# client\nhttps://github.com/dotnet/aspnetcore/blob/54c0cc8fa74e8196a2ce0711a20959143be7fb6f/src/SignalR/clients/csharp/Client.Core/src/HubConnection.cs#L1795-L1796",
        "createdAt": "2024-10-10T22:43:56Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58309#issuecomment-2406165749"
      },
      {
        "id": "IC_kwDOAQzde86PhKsF",
        "parentId": null,
        "author": "AshkanAfsharpour",
        "content": "Hey @halter73 and @BrennanConroy,\n\nThanks for the feedback! i get the concern about awaiting the callbacks directly and making the whole \u0060_completeClose\u0060 method \u0060async\u0060. Instead of that, im thinking of taking the fire-and-forget approach similar to what the C# client does. Here is what im proposing:\n\n1. Update the method signatures as we discussed:\n\u0060\u0060\u0060\npublic onclose(callback: (error?: Error) =\u003E void | Promise\u003Cvoid\u003E): void;\npublic onreconnecting(callback: (error?: Error) =\u003E void | Promise\u003Cvoid\u003E): void;\npublic onreconnected(callback: (connectionId?: string) =\u003E void | Promise\u003Cvoid\u003E): void;\n\u0060\u0060\u0060\n\n2. Instead of making \u0060_completeClose\u0060 \u0060async\u0060, I\u0027ll keep it sync and use a seperate \u0060_runCloseCallbacks\u0060 function to handle both sync and async callbacks. This way, we dont need to worry about changing all the call sites:\n\n\u0060\u0060\u0060\nprivate _completeClose(error?: Error): void {\n    if (this._connectionStarted) {\n        this._connectionState = HubConnectionState.Disconnected;\n        this._connectionStarted = false;\n        if (this._messageBuffer) {\n            this._messageBuffer._dispose(error ?? new Error(\u0022Connection closed.\u0022));\n            this._messageBuffer = undefined;\n        }\n\n        if (Platform.isBrowser) {\n            window.document.removeEventListener(\u0022freeze\u0022, this._freezeEventListener);\n        }\n\n        // Fire-and-forget the callbacks\n        this._runCloseCallbacks(error);\n    }\n}\n\nprivate async _runCloseCallbacks(error?: Error): Promise\u003Cvoid\u003E {\n    try {\n        for (const callback of this._closedCallbacks) {\n            await callback(error); // Await both sync and async callbacks\n        }\n    } catch (e) {\n        this._logger.log(LogLevel.Error, \u0060An onclose callback called with error \u0027${error}\u0027 threw error \u0027${e}\u0027.\u0060);\n    }\n}\n\u0060\u0060\u0060\nAnd also do the same for \u0060reconnecting\u0060 and \u0060reconnected\u0060 callbacks.\nhttps://github.com/dotnet/aspnetcore/blob/80ac2ff6a4e223eb5a91112912dc5d53c093d47f/src/SignalR/clients/ts/signalr/src/HubConnection.ts#L891-L896\n\nhttps://github.com/dotnet/aspnetcore/blob/80ac2ff6a4e223eb5a91112912dc5d53c093d47f/src/SignalR/clients/ts/signalr/src/HubConnection.ts#L924-L928\n\nLet me know if this looks good, and I\u2019ll go ahead and submit the PR.",
        "createdAt": "2024-10-11T17:22:13Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58309#issuecomment-2407836421"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86Zq5BG",
    "title": "WebSocket Errors Are Not Properly Handled in Safari Leading to Random Disconnects",
    "url": "https://github.com/dotnet/aspnetcore/issues/58336",
    "createdAt": "2024-10-10T09:02:03Z",
    "lastUpdated": "2024-10-14T09:00:05Z",
    "body": "**Background and Motivation**\nWhen using the @microsoft/signalr library with WebSocket transport in Safari, the connection randomly disconnects after 15-20 minutes of inactivity when the user switches tabs or stops interacting with the browser. This behavior is inconsistent with other browsers (e.g., Chrome, Firefox), where the connection remains stable under similar conditions.\n\nUpon investigation, I found that the WebSocket error handler in the library (webSocket.onerror) logs errors at the Information level and provides minimal information about the issue, making it difficult to identify the root cause. Furthermore, the library does not provide detailed error-handling logic to manage such WebSocket errors effectively or to implement custom reconnection strategies when these errors occur.\n\n**Steps to Reproduce**\n\n- Set up a SignalR connection using the @microsoft/signalr library with WebSocket transport.\n- Use the Safari browser and open a page that connects via SignalR.\n- Switch tabs or leave the browser inactive for 15-20 minutes.\n- Observe that the connection gets closed without detailed error information.\n\n**Environment**\n\n- Library version: @microsoft/signalr version 6.0.25\n- Browser: Safari (Version 17.6)\n- OS: macOS (Version 14.6.1)\n\n**Proposed Solution**\n\n- Improve the logging mechanism for WebSocket errors by including more details (e.g., WebSocket status, error type) and logging at a higher severity level (e.g., Error).\n- Expose the internal WebSocket instance or provide a way to attach custom event handlers (onerror, onclose) for better control over connection management.\n- Review the reconnection strategy in scenarios where Safari or other browsers close the WebSocket due to inactivity or tab suspension.\n\n**Proposed API**\n_Expected Behavior_\n\n- The library should provide more detailed error logging and allow users to access the internal WebSocket instance to add custom error handling.\n- Errors should be logged at a higher level (e.g., Error) to make them visible and actionable.\n- A mechanism should be available to manage WebSocket errors more robustly, particularly in browsers known for connection stability issues.\n\n**Actual Behavior**\n\n\u0060\u0060\u0060\nwebSocket.onerror = (event: Event) =\u003E {\n    let error: any = null;\n    // ErrorEvent is a browser-only type; we need to check if the type exists before using it\n    if (typeof ErrorEvent !== \u0022undefined\u0022 \u0026\u0026 event instanceof ErrorEvent) {\n        error = event.error;\n    } else {\n        error = \u0022There was an error with the transport\u0022;\n    }\n    this._logger.log(LogLevel.Information, \u0060(WebSockets transport) ${error}.\u0060);\n};\n\u0060\u0060\u0060\n\n\nThere is no built-in support for custom error handling for WebSocket errors, making it difficult to implement a solution that works across different browsers.\n\n**Usage Examples**\n\n\u0060\u0060\u0060\nimport { HubConnectionBuilder, LogLevel, HttpTransportType } from \u0022@microsoft/signalr\u0022;\n\n// Custom error handler\nfunction handleWebSocketError(error) {\n    console.error(\u0022Custom WebSocket error handler:\u0022, error);\n    // Custom logic to handle errors, such as reconnecting or logging details\n}\n\n// Custom reconnection handler\nfunction handleReconnection(attempt) {\n    console.log(\u0060Reconnection attempt #${attempt}\u0060);\n    // Custom logic for reconnection attempts, such as increasing delay intervals\n}\n\n// Create the connection\nconst connection = new HubConnectionBuilder()\n    .withUrl(\u0022/hub\u0022, {\n        transport: HttpTransportType.WebSockets,\n        errorHandler: handleWebSocketError, // Using the new error handler option\n        reconnectionHandler: handleReconnection, // Using the new reconnection handler option\n    })\n    .configureLogging(LogLevel.Information)\n    .withAutomaticReconnect()\n    .build();\n\n// Start the connection\nconnection.start().then(() =\u003E {\n    console.log(\u0022Connection started!\u0022);\n}).catch((err) =\u003E {\n    console.error(\u0022Failed to start connection:\u0022, err);\n});\n\u0060\u0060\u0060\n\nThank you for considering this issue!\n",
    "upvotes": 1,
    "labels": [
      "area-signalr",
      "api-suggestion"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86PrXUw",
        "parentId": null,
        "author": "M0ns1gn0r",
        "content": "The fact errors are logged at \u0060Information\u0060 level has really surprised me.",
        "createdAt": "2024-10-14T09:00:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58336#issuecomment-2410509616"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86aMhUM",
    "title": "After updating NET 8.0.8 and .NET SDK 8.0.400 SDK, Application fails with exception Could not load file or assembly \u0027Microsoft.AspNetCore.SignalR.Client.Core, Version=8.0.8.0\u0027.",
    "url": "https://github.com/dotnet/aspnetcore/issues/58429",
    "createdAt": "2024-10-10T09:02:24Z",
    "lastUpdated": "2024-12-03T23:45:37Z",
    "body": "After updating NET 8.0.8 and .NET SDK 8.0.400 SDK, Application fails with exception Could not load file or assembly \u0027Microsoft.AspNetCore.SignalR.Client.Core, Version=8.0.8.0\u0027.\n\nApplication loads the dls from installation location not from GAC. We have upgrade all third party dll 2 months back with version 8.0.0.\nApplication works fine un-till we install NET 8.0.8 and .NET SDK 8.0.400 SDK. with this installation we getting the exception for all third party dlls.\n\nCan anyone suggest or help us.\n\nMicrosoft.AspNetCore.SignalR.Client.Core should be update to version 8.08,\n\nsee exception msg: \u0022Could not load file or assembly \u0027Microsoft.AspNetCore.SignalR.Client.Core, Version=8.0.8.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\u0027",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "untriaged"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86PxuGT",
        "parentId": null,
        "author": "ybudiono",
        "content": "Any update on this? Because I\u0027m facing the same issue here, after upgrading to dotNet 8.0.8 Application fails to start with\nSystem.IO.FileNotFoundException: Could not load file or assembly \u0027NLog, Version=5.0.0.0, Culture=neutral, PublicKeyToken=5120e14c03d0593c\u0027. The system cannot find the file specified.\n\n\n\u003CEvent xmlns=\u0022http://schemas.microsoft.com/win/2004/08/events/event\u0022\u003E\n[-](https://github.com/dotnet/aspnetcore/issues/58429#) \u003CSystem\u003E\n  \u003CProvider Name=\u0022.NET Runtime\u0022 /\u003E \n  \u003CEventID Qualifiers=\u00220\u0022\u003E1026\u003C/EventID\u003E \n  \u003CLevel\u003E2\u003C/Level\u003E \n  \u003CTask\u003E0\u003C/Task\u003E \n  \u003CKeywords\u003E0x80000000000000\u003C/Keywords\u003E \n  \u003CTimeCreated SystemTime=\u00222024-10-05T22:07:42.4094625Z\u0022 /\u003E \n  \u003CEventRecordID\u003E38920921\u003C/EventRecordID\u003E \n  \u003CChannel\u003EApplication\u003C/Channel\u003E \n  \u003CSecurity /\u003E \n  \u003C/System\u003E\n[-](https://github.com/dotnet/aspnetcore/issues/58429#) \u003CEventData\u003E\n  \u003CData\u003EApplication: **.exe CoreCLR Version: 8.0.824.36612 .NET Version: 8.0.8 Description: The process was terminated due to an unhandled exception. Exception Info: System.IO.FileNotFoundException: Could not load file or assembly \u0027NLog, Version=5.0.0.0, Culture=neutral, PublicKeyToken=5120e14c03d0593c\u0027. The system cannot find the file specified. File name: \u0027NLog, Version=5.0.0.0, Culture=neutral, PublicKeyToken=5120e14c03d0593c\u0027 at **.Program.Main(String[] args) at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine\u0026 stateMachine) at **.Program.Main(String[] args) at **.Program.\u003CMain\u003E(String[] args)\u003C/Data\u003E \n  \u003C/EventData\u003E\n  \u003C/Event\u003E",
        "createdAt": "2024-10-14T03:55:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58429#issuecomment-2412175763"
      },
      {
        "id": "IC_kwDOAQzde86V9Elj",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Can you reduce the problem area by only updating to 8.0.8, test, and then reverting and only updating the SDK?",
        "createdAt": "2024-12-03T23:45:36Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58429#issuecomment-2515814755"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86edMvq",
    "title": "Signalr version 8.0.5 - If I have even one connected client, shutdown of the app is 30 seconds",
    "url": "https://github.com/dotnet/aspnetcore/issues/58947",
    "createdAt": "2024-11-14T11:01:27Z",
    "lastUpdated": "2025-01-13T18:43:28Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nThis is probably a duplicate of https://github.com/dotnet/aspnetcore/issues/53165 . Our application, whenever there  is at least one client connected needs 30 seconds from when the Asp.NET core receve the IsClosing from when the app is closed.\n\nThis is really annoying because we have software running as windows service, and having this long timeout sometimes generates problem.\n\nWe took the timing with IHostedLifecycleService and whenever there is a client connected the time between closing and closed is always 30 seconds (with a difference of max 100 milliseconds). \n\nWe are using version 8.0.5, and issue [#53165](https://github.com/dotnet/aspnetcore/issues/53165) is closed so I\u0027m expecting not to have this problem. \n\n### Expected Behavior\n\nWhen I shutdown my asp.net core application I do not want signalr block the shutdown for 30 seconds, because it causes problem.\n\nI\u0027m expecting also the possibility to force signalr to close everything and letting the application shutdown correctly.\n\n### Steps To Reproduce\n\nI do not have a minimal reproduction, it happens always on our software.\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n8.0.404\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr",
      "Needs: Attention :wave:"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86TqrwS",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Show server logs please, similar to what is in the issue you linked to\nhttps://github.com/dotnet/aspnetcore/issues/53165#issuecomment-1884978632",
        "createdAt": "2024-11-14T21:25:02Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58947#issuecomment-2477440018"
      },
      {
        "id": "IC_kwDOAQzde86Tt_oY",
        "parentId": null,
        "author": "alkampfergit",
        "content": "Ok here is what happened, this is the output of the console\n\n\u0060\u0060\u0060\n[10:11:42 INF][Jarvis.Host.Support.WebAppLifecycleManagerHostedService] ################### StopAsync completed in 7180 ms.\n[10:11:42 WRN][Orleans.Messaging] Dropping message Request [S10.0.0.39:40101:90666655 sys.svc.user.95B6CAE6/10.0.0.39:40101@90666655]-\u003E[S10.0.0.39:40101:90666655 management/0] Orleans.Runtime.IManagementGrain.GetRuntimeStatistics(Orleans.Runtime.SiloAddress[]) #5815 since this silo is blocking application messages\n[10:12:04 INF][Microsoft.AspNetCore.Routing.EndpointMiddleware] Executed endpoint \u0027/notification\u0027\n[10:12:04 INF][Microsoft.AspNetCore.Routing.EndpointMiddleware] Executed endpoint \u0027/chat\u0027\n[10:12:04 INF][Microsoft.AspNetCore.Hosting.Diagnostics] Request finished HTTP/2 CONNECT https://jarvis-uniquehost.codewrecks.com/notification?id=ewhvNu2JeTu1Jf3oaH3qRg - 200 null null 29973.9655ms\n[10:12:04 INF][Microsoft.AspNetCore.Hosting.Diagnostics] Request finished HTTP/2 CONNECT https://jarvis-uniquehost.codewrecks.com/chat?id=ARw59xut9nTlSsFXjp_orw - 200 null null 29974.0106ms\n[10:12:04 INF][Microsoft.AspNetCore.Server.Kestrel] Connection id \u00220HN85ALL3T7BF\u0022, Request id \u00220HN85ALL3T7BF:00000035\u0022: the application completed without reading the entire request body.\n[10:12:04 INF][Microsoft.AspNetCore.Server.Kestrel] Connection id \u00220HN85ALL3T7BF\u0022, Request id \u00220HN85ALL3T7BF:00000037\u0022: the application completed without reading the entire request body.\n[10:12:04 INF][Jarvis.Host.Support.WebAppLifecycleManagerHostedService] ###################  StoppedAsync completed in 30015 ms.\n[10:12:04 INF][Jarvis.Host.Support.WebAppLifecycleManagerHostedService] ################### OnStopped called in 30017 ms.\n\u0060\u0060\u0060\n\nThe first line shows that we closed all of our components after 7180 ms from when the IHost received CTRL\u002BC (mainly is orleans), then I have no log up to 30017 ms when all other logs arrives. As you can see we have logs of our two endpoints for signalr /notification and /chat\n\nI\u0027ve uploaded trace file where I trace evertying that happened in signalr and asp.net\n\n[trace_extended20241115.log](https://github.com/user-attachments/files/17772540/trace_extended20241115.log)\n\nEdit: Actually I\u0027ve solved sending to all client a special message on closing that forces clients to disconnect. Whit this code the application shutsdown at 7 seconds, not waiting the full 30 seconds of signalr.\n\n\u0060\u0060\u0060typescript\n        this.connection.on(\u0022ForceDisconnect\u0022, ()=\u003E {\n            console.log(\u0022ForceDisconnect notification signalr\u0022);\n            this.connection.stop();\n        });\n\u0060\u0060\u0060\n",
        "createdAt": "2024-11-15T09:14:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58947#issuecomment-2478307864"
      },
      {
        "id": "IC_kwDOAQzde86T06Hu",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "I see WebAppLifecycleManagerHostedService in your logs, is this an \u0060IHost\u0060/\u0060IWebHost\u0060 implementation and does it implement \u0060IHostApplicationLifetime\u0060? SignalR uses \u0060IHostApplicationLifetime.ApplicationStopping\u0060 to trigger connection disconnects.\n\nIf that doesn\u0027t help figure out the problem, could you enable trace logs for kestrel, hosting, signalr, and http.connections?",
        "createdAt": "2024-11-15T23:24:25Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58947#issuecomment-2480120302"
      },
      {
        "id": "IC_kwDOAQzde86UM1IS",
        "parentId": null,
        "author": "alkampfergit",
        "content": "The WebAppLifecycleManagerHostedService  is a simple IHostedLifecycleService that is used to detect application closing and closing all of the services of our application gracefully. Internally it uses IHostApplicationLifetime to register The application stopping, and it is in that specific method that we send disconnect explicitly to signalr client. Without explicit shutdown, the application closes always in 30 seconds.\n\n\n\n",
        "createdAt": "2024-11-19T17:58:16Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58947#issuecomment-2486391314"
      },
      {
        "id": "IC_kwDOAQzde86V9DeL",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E could you enable trace logs for kestrel, hosting, signalr, and http.connections?\n\nWere you able to capture these logs?",
        "createdAt": "2024-12-03T23:41:01Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58947#issuecomment-2515810187"
      },
      {
        "id": "IC_kwDOAQzde86WBOnz",
        "parentId": null,
        "author": "alkampfergit",
        "content": "Sorry I had some problem these days, I\u0027ll check the issue as soon as\r\npossible, thanks\r\n\r\nIl mer 4 dic 2024, 00:41 dotnet-policy-service[bot] \u003C\r\n***@***.***\u003E ha scritto:\r\n\r\n\u003E Hi @alkampfergit \u003Chttps://github.com/alkampfergit\u003E. We have added the\r\n\u003E \u0022Needs: Author Feedback\u0022 label to this issue, which indicates that we have\r\n\u003E an open question for you before we can take further action. This issue will\r\n\u003E be closed automatically in 7 days if we do not hear back from you by then -\r\n\u003E please feel free to re-open it if you come back to this issue after that\r\n\u003E time.\r\n\u003E\r\n\u003E \u2014\r\n\u003E Reply to this email directly, view it on GitHub\r\n\u003E \u003Chttps://github.com/dotnet/aspnetcore/issues/58947#issuecomment-2515810472\u003E,\r\n\u003E or unsubscribe\r\n\u003E \u003Chttps://github.com/notifications/unsubscribe-auth/AACXREL56GXPIT4FTZ64LWL2DY6TJAVCNFSM6AAAAABRYTYVNCVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDKMJVHAYTANBXGI\u003E\r\n\u003E .\r\n\u003E You are receiving this because you were mentioned.Message ID:\r\n\u003E ***@***.***\u003E\r\n\u003E\r\n",
        "createdAt": "2024-12-04T10:34:41Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58947#issuecomment-2516904435"
      },
      {
        "id": "IC_kwDOAQzde86XSuFU",
        "parentId": null,
        "author": "alkampfergit",
        "content": "@BrennanConroy \n\nAttached is another file log, let me know if you need still more loggers.\n\n[trace_extended20241212.log](https://github.com/user-attachments/files/18108440/trace_extended20241212.log)\n",
        "createdAt": "2024-12-12T09:02:57Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58947#issuecomment-2538266964"
      },
      {
        "id": "IC_kwDOAQzde86XX5yb",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Thanks for the logs, this looks like an issue we discovered a couple weeks ago and are planning on fixing soon. The root cause is that when the app starts shutting down it triggers \u0060ApplicationLifetime.ApplicationStopping\u0060 token which SignalR listens to and uses to close it\u0027s connections. Kestrel then runs and unbinds its connection listeners, but if there are new SignalR connections between when SignalR closes its connections and Kestrel unbinds the connection listener, those connections will succeed and block Kestrel finishing the close logic until the host timeout when it aborts the connections.\n\nFrom your logs, it looks like immediately after the shutdown starts a new connection comes in. Likely because your clients have reconnection logic to retry immediately on close. A possible workaround (if you own the client code) is to make them wait a short amount of time before reconnection.\n\u0060\u0060\u0060\n[10:01:39 DBG][Microsoft.Extensions.Hosting.Internal.Host] Hosting stopping \u003C--- shutdown starts\n[10:01:39 DBG][Microsoft.AspNetCore.Server.Kestrel.Http2] Trace id \u00220HN8QHE8EU5UM:00000013\u0022: HTTP/2 stream error \u0022\u0022INTERNAL_ERROR\u0022\u0022. A Reset is being sent to the stream.\nMicrosoft.AspNetCore.Connections.ConnectionAbortedException: The connection was aborted by the application.\n[10:01:39 DBG][Microsoft.AspNetCore.Server.Kestrel.Http2] Trace id \u00220HN8QHE8EU5UM:0000000F\u0022: HTTP/2 stream error \u0022\u0022INTERNAL_ERROR\u0022\u0022. A Reset is being sent to the stream.\nMicrosoft.AspNetCore.Connections.ConnectionAbortedException: The connection was aborted by the application.\n[10:01:39 DBG][Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport] Waiting for the application to finish sending data.\n[10:01:39 DBG][Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport] Waiting for the application to finish sending data.\n[10:01:39 DBG][Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport] Socket closed.\n[10:01:39 DBG][Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport] Socket closed.\n[10:01:39 DBG][Microsoft.AspNetCore.SignalR.HubConnectionHandler] OnConnectedAsync ending.\n[10:01:39 DBG][Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager] Removing connection LjD7biz82bV7jGQ7V57BDg from the list of connections.\n[10:01:39 INF][Microsoft.AspNetCore.Hosting.Diagnostics] Request starting HTTP/2 POST https://jarvis-uniquehost.codewrecks.com/chat/negotiate?negotiateVersion=1 - null 0 \u003C---- new connection comes in\n\u0060\u0060\u0060",
        "createdAt": "2024-12-12T17:52:58Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58947#issuecomment-2539625627"
      },
      {
        "id": "IC_kwDOAQzde86XYSAq",
        "parentId": null,
        "author": "alkampfergit",
        "content": "Yes you are true, we heavily depend on signalr so clients after a\r\ndisconnect, immediately try to reconnect.\r\n\r\nWe solved in a simple way, when we want to close, we send a message to all\r\nclients to ask to disconnect , this seems to fix the issue\r\n\r\nIl gio 12 dic 2024, 18:53 Brennan ***@***.***\u003E ha scritto:\r\n\r\n\u003E Thanks for the logs, this looks like an issue we discovered a couple weeks\r\n\u003E ago and are planning on fixing soon. The root cause is that when the app\r\n\u003E starts shutting down it triggers ApplicationLifetime.ApplicationStopping\r\n\u003E token which SignalR listens to and uses to close it\u0027s connections. Kestrel\r\n\u003E then runs and unbinds its connection listeners, but if there are new\r\n\u003E SignalR connections between when SignalR closes its connections and Kestrel\r\n\u003E unbinds the connection listener, those connections will succeed and block\r\n\u003E Kestrel finishing the close logic until the host timeout when it aborts the\r\n\u003E connections.\r\n\u003E\r\n\u003E From your logs, it looks like immediately after the shutdown starts a new\r\n\u003E connection comes in. Likely because your clients have reconnection logic to\r\n\u003E retry immediately on close. A possible workaround (if you own the client\r\n\u003E code) is to make them wait a short amount of time before reconnection.\r\n\u003E\r\n\u003E [10:01:39 DBG][Microsoft.Extensions.Hosting.Internal.Host] Hosting stopping \u003C--- shutdown starts\r\n\u003E [10:01:39 DBG][Microsoft.AspNetCore.Server.Kestrel.Http2] Trace id \u00220HN8QHE8EU5UM:00000013\u0022: HTTP/2 stream error \u0022\u0022INTERNAL_ERROR\u0022\u0022. A Reset is being sent to the stream.\r\n\u003E Microsoft.AspNetCore.Connections.ConnectionAbortedException: The connection was aborted by the application.\r\n\u003E [10:01:39 DBG][Microsoft.AspNetCore.Server.Kestrel.Http2] Trace id \u00220HN8QHE8EU5UM:0000000F\u0022: HTTP/2 stream error \u0022\u0022INTERNAL_ERROR\u0022\u0022. A Reset is being sent to the stream.\r\n\u003E Microsoft.AspNetCore.Connections.ConnectionAbortedException: The connection was aborted by the application.\r\n\u003E [10:01:39 DBG][Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport] Waiting for the application to finish sending data.\r\n\u003E [10:01:39 DBG][Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport] Waiting for the application to finish sending data.\r\n\u003E [10:01:39 DBG][Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport] Socket closed.\r\n\u003E [10:01:39 DBG][Microsoft.AspNetCore.Http.Connections.Internal.Transports.WebSocketsTransport] Socket closed.\r\n\u003E [10:01:39 DBG][Microsoft.AspNetCore.SignalR.HubConnectionHandler] OnConnectedAsync ending.\r\n\u003E [10:01:39 DBG][Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager] Removing connection LjD7biz82bV7jGQ7V57BDg from the list of connections.\r\n\u003E [10:01:39 INF][Microsoft.AspNetCore.Hosting.Diagnostics] Request starting HTTP/2 POST https://jarvis-uniquehost.codewrecks.com/chat/negotiate?negotiateVersion=1 - null 0 \u003C---- new connection comes in\r\n\u003E\r\n\u003E \u2014\r\n\u003E Reply to this email directly, view it on GitHub\r\n\u003E \u003Chttps://github.com/dotnet/aspnetcore/issues/58947#issuecomment-2539625627\u003E,\r\n\u003E or unsubscribe\r\n\u003E \u003Chttps://github.com/notifications/unsubscribe-auth/AACXREOKKHSQXUZCW63WA7T2FHEQ7AVCNFSM6AAAAABRYTYVNCVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDKMZZGYZDKNRSG4\u003E\r\n\u003E .\r\n\u003E You are receiving this because you were mentioned.Message ID:\r\n\u003E ***@***.***\u003E\r\n\u003E\r\n",
        "createdAt": "2024-12-12T18:24:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58947#issuecomment-2539724842"
      },
      {
        "id": "IC_kwDOAQzde86YtqBJ",
        "parentId": null,
        "author": "noelex",
        "content": "I\u0027m also facing this issue after upgrading to .NET 9.0, but with gRPC server streaming calls. The shutdown of the server application will be blocked if there\u0027s any active server streaming call when the shutdown is initiated.\n\nEven if I register to the \u0060IHostApplicationLifetime.ApplicationStopping\u0060 signal in the streaming method and abort the method when shutdown is requested, the shutdown will still be blocked for about 30 seconds.\n\nMy workaround for this is to block the shutdown until all ongoing requests are finished, so that ASP.NET Core can start shutdown without being blocked by the streaming call:\n\n\u0060\u0060\u0060csharp\ninternal interface IShutdownSignal\n{\n    void AddBlocker();\n    void RemoveBlocker();\n    CancellationToken ApplicationStopping { get; }\n}\n\nsealed class ShutdownSignal : IShutdownSignal, IDisposable\n{\n    private readonly CancellationTokenSource _cts = new();\n    private readonly SemaphoreSlim _sem = new(1, 1);\n\n    private long _blockers;\n\n    public ShutdownSignal(IHostApplicationLifetime lifetime)\n    {\n        _logger = logger;\n        lifetime.ApplicationStopping.Register(static (state) =\u003E\n        {\n            var self = (ShutdownSignal)state!;\n            self._cts.Cancel();\n            self._sem.Wait();\n        }, this);\n    }\n\n    public CancellationToken ApplicationStopping =\u003E _cts.Token;\n\n    public void AddBlocker()\n    {\n        if (Interlocked.Increment(ref _blockers) == 1)\n        {\n            _sem.Wait();\n        }\n    }\n\n    public void RemoveBlocker()\n    {\n        if (Interlocked.Decrement(ref _blockers) == 0)\n        {\n            _sem.Release();\n        }\n    }\n\n    public void Dispose()\n    {\n        _cts.Dispose();\n        _sem.Dispose();\n    }\n}\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060csharp\nbuilder.Services.AddSingleton\u003CIShutdownSignal, ShutdownSignal\u003E();\n\nawait using var app = builder.Build();\n\nvar ss = app.Services.GetRequiredService\u003CIShutdownSignal\u003E();\napp.Use(async (context, next) =\u003E\n{\n    try\n    {\n        ss.AddBlocker();\n        await next(context);\n    }\n    finally\n    {\n        ss.RemoveBlocker();\n    }\n});\n\u0060\u0060\u0060\n\n\u0060\u0060\u0060csharp\nprivate readonly IShutdownSignal _signal;\n\npublic override async Task ServerStream(RequestMessage request, IServerStreamWriter\u003CResponseMessage\u003E responseStream, ServerCallContext context)\n{\n    using var cts = CancellationTokenSource.CreateLinkedTokenSource(context.CancellationToken, _signal.ApplicationStopping);\n    await ServerStreamImpl(request, response, cts.Token);\n}\n\u0060\u0060\u0060",
        "createdAt": "2024-12-26T03:04:49Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58947#issuecomment-2562105417"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86eiSZE",
    "title": "Support SignalR scenarios with Blazor Server",
    "url": "https://github.com/dotnet/aspnetcore/issues/58962",
    "createdAt": "2024-11-14T19:08:27Z",
    "lastUpdated": "2024-12-03T18:12:05Z",
    "body": "For example, how to do pub/sub from a Blazor Server apps.\n\nBe able to host a new hub on the server and simulate loopback connections between the hubs or provide some other mechanism to subscribe to SignalR invocations on the server efficiently.",
    "upvotes": 1,
    "labels": [
      "enhancement",
      "area-signalr",
      "Blazor \u2665 SignalR",
      "Priority:2",
      "feature-blazor-server"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86Tp4zl",
        "parentId": null,
        "author": "nwoolls",
        "content": "If this is a new effort it would be nice if this method worked with Blazor auto render mode as well, so that the same code / experience can start with Blazor Server and then move to Blazor WASM once assets have been downloaded.",
        "createdAt": "2024-11-14T19:21:48Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/58962#issuecomment-2477231333"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86e-ZWB",
    "title": "SignalR - Ability to run middleware before the hub dispatcher",
    "url": "https://github.com/dotnet/aspnetcore/issues/59015",
    "createdAt": "2024-11-18T05:07:53Z",
    "lastUpdated": "2024-11-20T07:20:35Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWhen using web sockets, hub method invocations will silently fail in production if the request is invalid for one of the following reasons:\n- method does not exist\n- type mismatch\n- missing parameter\n- ...\n\nIn DEBUG mode we have such log:\n![Image](https://github.com/user-attachments/assets/e4046eeb-58ea-4d62-bebd-baa1ca5b8196)\n\nThis is a problem because we cannot \n- rate limit the bad method invocations\n- log such method invocation (a bad client could continuously make bad requests and they would be invisible)\n\nThe common solution to add middleware to the pipeline is via hub filters, but those run after the hub dispatcher, meaning they will never run in case of bad request.\n\n### Describe the solution you\u0027d like\n\nThe ability to run code before the hub dispatcher (or anywhere before the request failure, I do not know all the details of what happens before the hub filters), which would allow to implement extra behaviours (rate limiter, invocation logging, ...) even if the request is malformed.\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86T8PzX",
        "parentId": null,
        "author": "davidfowl",
        "content": "I\u0027m not sure we want a hook that allows users to write arbitrary code before we have a well-formed hub protocol message. I think we can instead improve the telemetry here and provide specific hooks for when methods don\u0027t exist. We don\u0027t want to expose all of the internal book keeping that SignalR does here as it restricts us from making certain optimizations. ",
        "createdAt": "2024-11-18T06:14:46Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59015#issuecomment-2482044119"
      },
      {
        "id": "IC_kwDOAQzde86T8d44",
        "parentId": null,
        "author": "SylvainGantois",
        "content": "Would that be possible for deserialization issues too?\nWe do constructor validation to prevent any invalid object to be constructed and while that works for HTTP we cannot catch those issues with SignalR (calls with a deserialization issue will fail early with the hub dispatcher).",
        "createdAt": "2024-11-18T06:56:06Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59015#issuecomment-2482101816"
      },
      {
        "id": "IC_kwDOAQzde86UKsPQ",
        "parentId": null,
        "author": "AshkanAfsharpour",
        "content": "I understand the concerns about exposing internal SingalR mechanics and the potential trade-offs with future optimizations, i would like to propose a focused solution:\n\n1. Introduce Specific Hooks for Common Failure Points:\n - A Hook for method resolution failures, allowing devs to log or handle scenarios where a method does not exist.\n - A hook for deserialization issues, enabling better error handling and logging for invalid or malformed data before the hub dispatcher process it.\n\n2. Enhance Telemetry:\n - Provide detailed telemetry for these failure points, including method resolution errors, type mismatches, and parameter issues. this would enable devs to monitor such events externally without affecting SignalR\u0027s internal flow.\n\n3. Extend Hub Filters (If feasible): \n - If it aligns with SignalR\u0027s lifecycle design, consider extending hub filters to include earlier stages of the request lifecycle (e.g., pre-dispatch), providing a more integrated and familiar way for developers to add custom logic.",
        "createdAt": "2024-11-19T14:12:04Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59015#issuecomment-2485830608"
      },
      {
        "id": "IC_kwDOAQzde86ULV7x",
        "parentId": null,
        "author": "davidfowl",
        "content": "We\u2019ll spend some time and see if we can come up with a solution that lets us have our cake and eat it too.",
        "createdAt": "2024-11-19T15:16:32Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59015#issuecomment-2486001393"
      },
      {
        "id": "IC_kwDOAQzde86UR0Lo",
        "parentId": null,
        "author": "SylvainGantois",
        "content": "Thank you for considering solutions for those use cases.",
        "createdAt": "2024-11-20T07:20:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59015#issuecomment-2487698152"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86giQ_B",
    "title": "Feature request to add correlation id to SignalR clients",
    "url": "https://github.com/dotnet/aspnetcore/issues/59156",
    "createdAt": "2024-11-26T06:29:05Z",
    "lastUpdated": "2024-11-26T06:29:11Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\n\n\n\n### Describe the solution you\u0027d like\n\nAzure SignalR team recently has some customers requesting for \u201Creconnect\u201D related metrics to evaluate the impact to their customers when the connections are interrupted by service maintenance events, for example, the latency between the disconnect and reconnect, the success rate of a connect attempt. \n \nHowever, from the service side, it is currently a little bit hard to correlate the reconnects if the hubconnection restarts because the connectionId is changed. We currently try with the same \u201CuserId\u201D and \u201CIP\u201D. I am wondering if it is valuable to append some \u201Ccorrelationid\u201D to a HubConnection in the client SDK by default, so that we could track the lifetime of the HubConnection when it re-starts? It could also be used to correlate the negotiate request to the app server with the negotiate/connect request to the SignalR service.\n\n\n### Additional context\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86h9G4w",
    "title": "SignalR Error when connect to http2 server with SkipNegotiation",
    "url": "https://github.com/dotnet/aspnetcore/issues/59303",
    "createdAt": "2024-12-04T09:50:34Z",
    "lastUpdated": "2024-12-04T09:50:38Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nWhen I use the dotnet SignarlR client to connect to an HTTP/2 server\n\n\u003E The SkipNegotation part is a bug.\n\n_Originally posted by @BrennanConroy in https://github.com/dotnet/aspnetcore/discussions/59278#discussioncomment-11451737_\n\n\n\n### Expected Behavior\n\nHTTP/2 should work as HTTP/1.1\n\n### Steps To Reproduce\n\nsample code\n\n\u0060\u0060\u0060cs\nawait using var connection = new HubConnectionBuilder()\n    .WithUrl(\u0022http://localhost:5001/hub/hello\u0022, options =\u003E\n    {\n        options.SkipNegotiation = true;\n        options.Transports = HttpTransportType.WebSockets;\n        options.WebSocketConfiguration = clientWebSocketOptions =\u003E\n        {\n            clientWebSocketOptions.HttpVersion = HttpVersion.Version20;\n            clientWebSocketOptions.HttpVersionPolicy = HttpVersionPolicy.RequestVersionOrLower;\n        };\n    })\n    .Build();\n\nawait connection.StartAsync();\n\u0060\u0060\u0060\n\nA complete sample with a server sample: \n\nhttps://github.com/WeihanLi/SamplesInPractice/blob/main/SignalRSample/SignalRClientSample/Program.cs\n\n\n1. cd \u0060SignalRServerSample\u0060 and \u0060dotnet run\u0060\n2. \u0060dotnet run\u0060 under \u0060SignalRClientSample\u0060 folder\n\n\n### Exceptions (if any)\n\n\u0060\u0060\u0060\nAn HttpMessageInvoker instance must be passed to ConnectAsync when using HTTP/2. (Parameter \u0027options\u0027)\n\n   at System.Net.WebSockets.WebSocketHandle.ConnectAsync(Uri uri, HttpMessageInvoker invoker, CancellationToken cancellationToken, ClientWebSocketOptions options)\n   at System.Net.WebSockets.ClientWebSocket.ConnectAsyncCore(Uri uri, HttpMessageInvoker invoker, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport.DefaultWebSocketFactory(WebSocketConnectionContext context, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport.StartAsync(Uri url, TransferFormat transferFormat, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Http.Connections.Client.HttpConnection.StartTransport(Uri connectUrl, HttpTransportType transportType, TransferFormat transferFormat, CancellationToken cancellationToken, Boolean useStatefulReconnect)\n   at Microsoft.AspNetCore.Http.Connections.Client.HttpConnection.SelectAndStartTransport(TransferFormat transferFormat, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Http.Connections.Client.HttpConnection.StartAsyncCore(TransferFormat transferFormat, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Http.Connections.Client.HttpConnection.StartAsync(TransferFormat transferFormat, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Http.Connections.Client.HttpConnectionFactory.ConnectAsync(EndPoint endPoint, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.Http.Connections.Client.HttpConnectionFactory.ConnectAsync(EndPoint endPoint, CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsyncCore(CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsyncInner(CancellationToken cancellationToken)\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsync(CancellationToken cancellationToken)\n\u0060\u0060\u0060\n\n### .NET Version\n\n9.0.100\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86iMs6N",
    "title": "Provide an extra private readonly property on the SignalR HubConnectionContext",
    "url": "https://github.com/dotnet/aspnetcore/issues/59346",
    "createdAt": "2024-12-05T19:34:46Z",
    "lastUpdated": "2024-12-23T12:14:41Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nCurrently there is no way for us to know way to calculate size of the payload content sent to signal r.\nAs confirmed in https://github.com/dotnet/aspnetcore/issues/59335#issuecomment-2521029996\n\nNot having any mechanism to determine this size makes it very difficult to accurately set the  \u0060\u0060MaximumReceiveMessageSize\u0060\u0060 for SignalR.\n\n### Describe the solution you\u0027d like\n\nAs we already have a bunch of private readonly properties we can inspect on the HubConnectionContext when we break on the \u0060\u0060InvalidDataException\u0060\u0060 inside \u0060\u0060DispatchMessagesAsync\u0060\u0060 while in debug mode with \u0060\u0060Common Language Runtime Exceptions\u0060\u0060 enabled as shown below.\n![Image](https://github.com/user-attachments/assets/0a51648e-5c46-4ec3-a0a0-9c48a7e84835)\n\nPlease add an additional private readonly property which only contains the buffer length that is used to compare against the \u0060\u0060maxMessageSize\u0060\u0060 inside\n\u0060\u0060\u0060\n   if (segment.Length \u003E maxMessageSize)\n   {\n       segment = segment.Slice(segment.Start, maxMessageSize);\n       overLength = true;\n   }\n\u0060\u0060\u0060\n\nThe ability to understand the message size sent to appropriately adjust the \u0060\u0060MaximumReceiveMessageSize\u0060\u0060 is highly requested, searched for and mentioned in Stackover and Reddit. \n\nWe don\u0027t need any sort of mechanism to calculate the payload size programmatically, but we do need a way to know what the \u0060\u0060MaximumReceiveMessageSize\u0060\u0060 is compared against to ensure we have a large enough ceiling while also not sacrificing performance.",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86WhBOL",
        "parentId": null,
        "author": "davidfowl",
        "content": "@BrennanConroy maybe a reasonable first step here is verbose logging to help people understand payload sizes ",
        "createdAt": "2024-12-07T16:33:38Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59346#issuecomment-2525238155"
      },
      {
        "id": "IC_kwDOAQzde86Wlk64",
        "parentId": null,
        "author": "Bond-Addict",
        "content": "\u003E @BrennanConroy maybe a reasonable first step here is verbose logging to help people understand payload sizes \n\nThat alone would be really helpful. I\u0027ve spent many hours going down deep rabbit holes, trying to find a way. I tried every solution i could find from Microsoft or any other blog that talked about SignalR Trace logging and couldn\u0027t get any necessary information to come through. I even went as far as cloning each of the Microsoft repos SignalR touches to try and visually step through all the classes and logic to try and get some kind of idea of what it\u0027s doing and how it\u0027s doing just to try and figure out a way to accurately calculate the payload size myself.",
        "createdAt": "2024-12-08T23:18:18Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59346#issuecomment-2526432952"
      },
      {
        "id": "IC_kwDOAQzde86YhDsE",
        "parentId": null,
        "author": "Bond-Addict",
        "content": "@davidfowl it\u0027s been a couple of weeks. Do you know if @BrennanConroy or any of the other SignalR devs have had a chance to review this?",
        "createdAt": "2024-12-23T02:52:05Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59346#issuecomment-2558802692"
      },
      {
        "id": "IC_kwDOAQzde86Yj5xI",
        "parentId": null,
        "author": "davidfowl",
        "content": "We\u0027re on vacation. In the new year.",
        "createdAt": "2024-12-23T11:49:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59346#issuecomment-2559548488"
      },
      {
        "id": "IC_kwDOAQzde86YkD6H",
        "parentId": null,
        "author": "Bond-Addict",
        "content": "\u003E We\u0027re on vacation. In the new year.\n\nTotally get that. Just trying to keep the Github bot from marking this as stale, not rush yall. Enjoy your time off! \uD83D\uDE04 ",
        "createdAt": "2024-12-23T12:14:40Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59346#issuecomment-2559590023"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86kWOCG",
    "title": "[SignalR][Client][TS] Unable to unsubscribe from SignalR connection state change events",
    "url": "https://github.com/dotnet/aspnetcore/issues/59626",
    "createdAt": "2024-12-24T06:49:27Z",
    "lastUpdated": "2025-01-03T12:17:37Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nI am integrating SignalR into my React code. Currently, there is no way to listen to all connection state changes. \nA workaround I found is to use \u0060onclose\u0060, \u0060onreconnecting\u0060 and \u0060onreconnected\u0060. However, there is no way to unsubscribe from these events.\n\nOn the client code, I preserve and reuse the connection instance. When a component needs to access the SignalR connection, it will get the same connection instance if one has already been created, and then subscribe to the changes. \nWhen the component unmounts, it has no way to unsubscribe so the stale handlers are stuck in the connection instance(\u0060this._closedCallbacks\u0060, \u0060this._reconnectingCallbacks\u0060, and \u0060this._reconnectedCallbacks\u0060). When the component is remounted, new handlers are added. This causes memory leak on the client side.\n\n### Describe the solution you\u0027d like\n\n- Add a way to unsubscribe from connection status change events. For example,\n    - Returns the unsubscribe function when calling \u0060onclose\u0060, \u0060onreconnecting\u0060, and \u0060onreconnected\u0060 (Preferred, the consumer doesn\u0027t have to cache the callback reference manually).\n    - Or provides \u0060offclose\u0060, \u0060offreconnecting\u0060, and \u0060offreconnected\u0060 (the naming can be changed).\n- Or add a new method \u0060onConnectionStateChange\u0060 which will be fired every time \u0060this._connectionState\u0060 changes and do one of the following,\n    - Returns the unsubscribe function (Preferred, the consumer doesn\u0027t have to cache the callback reference manually).\n    - Or provides \u0060offConnectionStateChange\u0060 (the naming can be changed).\n\n### Additional context\n\nThe issue can be addressed by updating this file \u0060src/SignalR/clients/ts/signalr/src/HubConnection.ts\u0060",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86kcOP3",
    "title": "SignalR client cannot connect to SignalR server",
    "url": "https://github.com/dotnet/aspnetcore/issues/59639",
    "createdAt": "2024-12-25T15:25:12Z",
    "lastUpdated": "2024-12-27T04:53:59Z",
    "body": "OS\uFF1AUbuntu 22.04\nSignalR Server: .net8.0\nSignalR.Client 7.0.10\nI use SignalR server to push messages to SignalR, but when there are many SignalR clients, it is easy for the SignalR client to be unable to connect to the SignalR server. This situation is easy to occur when the number of client connections exceeds 2000. I suspect it is related to the excessive number of client connections. I wonder if there is any recommended configuration for this?\n\nDue to special circumstances, distribution is not supported for the time being, and only one SignalR server can be used, so I hope it can support more client connections\n\n\u0060\u0060\u0060\n.AddSignalR(options =\u003E\n{\noptions.EnableDetailedErrors = true;\noptions.MaximumReceiveMessageSize = 1024 * 1024 * 10;\n})\n\napp.MapHub\u003CRelationHub\u003E(\u0022/relationhub\u0022, options =\u003E\n{\n// 1024 * 1024 * 10 = 10MB\noptions.ApplicationMaxBufferSize = 1024 * 1024 * 10;\noptions.TransportMaxBufferSize = 1024 * 1024 * 10;\n});\n\u0060\u0060\u0060\n\nThe server\u0027s CPU and memory are both below 20%, and the bandwidth performance is good.\n\n\u0060\u0060\u0060\nulimit -n\n65535\n\u0060\u0060\u0060\n",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86YvL-a",
        "parentId": null,
        "author": "zhenlei520",
        "content": "By adding logs, it was found that an error occurred when the client sent a message to the server. The error message was:\n\n\u0060\u0060\u0060\nException:System.TimeoutException: Server timeout (30000.00ms) elapsed without receiving a message from the server.\n\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.InvokeCoreAsyncCore(String methodName, Type returnType, Object[] args, CancellationToken cancellationToken)\n\n   at Microsoft.AspNetCore.SignalR.Client.HubConnection.InvokeCoreAsync(String methodName, Type returnType, Object[] args, CancellationToken cancellationToken)\n\u0060\u0060\u0060",
        "createdAt": "2024-12-26T11:28:35Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59639#issuecomment-2562506650"
      },
      {
        "id": "IC_kwDOAQzde86YvMf1",
        "parentId": null,
        "author": "zhenlei520",
        "content": "But I don\u0027t know why the client will time out when sending messages to the server. There is no problem with the network.",
        "createdAt": "2024-12-26T11:29:33Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59639#issuecomment-2562508789"
      },
      {
        "id": "IC_kwDOAQzde86YyQtE",
        "parentId": null,
        "author": "profimedica",
        "content": "Have you tried to skip negotiation?\nAre you sure the SSL is valid?\n\napp.MapHub\u003CRelationHub\u003E(\u0022/relationhub\u0022, options =\u003E\n{\n    // add your options and the SkipNegotiation.\n    options.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;\n    options.WebSockets = webSocketOptions =\u003E\n    {\n        webSocketOptions.SkipNegotiation = true;\n    };\n});",
        "createdAt": "2024-12-27T04:50:52Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59639#issuecomment-2563312452"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86kvKlP",
    "title": "Beta or stable release for SignalR-Client-Cpp",
    "url": "https://github.com/dotnet/aspnetcore/issues/59665",
    "createdAt": "2024-12-31T00:24:35Z",
    "lastUpdated": "2024-12-31T00:24:41Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nHello, it looks like the latest release of https://github.com/aspnet/SignalR-Client-Cpp is still in alpha.\n\nIs there any plan to release a beta or stable version of this project?\n\nAlso, is SignalR-Client-Cpp ready for use in production? If not, then the README should explicitly state that.\n\n### Describe the solution you\u0027d like\n\nMore clarity on the present and future suitability of SignalR-Client-Cpp for production applications.\n\n### Additional context\n\n_No response_",
    "upvotes": 3,
    "labels": [
      "area-signalr"
    ],
    "comments": []
  },
  {
    "id": "I_kwDOAQzde86k9-_D",
    "title": "Compatibility between Core SignalR server and Net 4 SignalR clients.",
    "url": "https://github.com/dotnet/aspnetcore/issues/59703",
    "createdAt": "2025-01-03T14:56:23Z",
    "lastUpdated": "2025-01-15T22:30:28Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nWe have a Net 4 winform providing a bridge between browsers and Windows TWAIN scanners.  It was migrated to Net Core and now the negotiate fails.  Research suggests this is because there is no compatibility option between Core and Net 4 SignalR servers and clients.  The impact is that it is not possible to update either the SignalR server or client without requiring a reinstall of the winform bridging component across the entire customer base.  This is a huge logistical issue.\n\n### Describe the solution you\u0027d like\n\nProvide a Net 4 SignalR compatibility mode for Core, or describe how Core can be configured for compatibility.\n\n### Additional context\n\nTrace:\n\nDebug: 2025-01-03 09:22:25.757 1 candidate(s) found for the request path \u0027/s/negotiate\u0027\nDebug: 2025-01-03 09:22:25.758 Request matched endpoint \u0027/s/negotiate\u0027\nDebug: 2025-01-03 09:22:25.760 The maximum request body size has been set to 104857600.\nInformation: 2025-01-03 09:22:25.761 Executing endpoint \u0027/s/negotiate\u0027\nInformation: 2025-01-03 09:22:25.763 Executed endpoint \u0027/s/negotiate\u0027\nInformation: 2025-01-03 09:22:25.764 Request finished HTTP/2 GET https://localhost:59754/s/negotiate?clientProtocol=2.1\u0026connectionData=%5B%7B%22name%22%3A%22s%22%7D%5D\u0026_=1735912793367 - 405 0 text/plain 14.2070ms",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86anlzz",
        "parentId": null,
        "author": "willdean",
        "content": "This was pretty much the exact issue which annoyed me several years ago to the extent that we abandoned SignalR altogether - we couldn\u0027t update all our clients and the servers they talked to simultaneously in a massive high-risk big-bang.\n\nHowever, I did once berate the SignalR guys about this at a conference and they pointed-out that the new (\u0022SignalR Core\u0022) client can actually run on old-style .NET framework.   So you could, in theory, gradually upgrade your clients to support both the old and new flavours of SignalR and only once you\u0027d done that would you need to switch over your server side.\n\nI doubt that helps you, and I am fully in agreement that this was an absolutely horrible decision - new SignalR _could_ have supported the old protocol, it just didn\u0027t, and presumably the fact that a web-browser can replace its client on a single refresh blinded them to the fact they\u0027d completely screwed-over their native client users.   The early days of \u0027core\u0027 were an absolute wild-west of casual compatibility breaks and this was one of the victims which never got fixed.",
        "createdAt": "2025-01-15T22:30:26Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59703#issuecomment-2594069747"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86lkfos",
    "title": "[NET 9] [Blazor/SignalR] \u0060InvalidOperationException\u0060: Trying to set an Activity that is not running",
    "url": "https://github.com/dotnet/aspnetcore/issues/59792",
    "createdAt": "2025-01-09T13:12:14Z",
    "lastUpdated": "2025-01-10T00:08:54Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nCurrently migrating my project to .NET 9 and noticed a bunch of \u0060InvalidOperationException\u0060s happening with my server-side blazor application:\n\n\u003E Trying to set an Activity that is not running\n\nThe seem to happen during SignalR message handling:\n\n\u003ESystem.Diagnostics.DiagnosticSource.dll!System.Diagnostics.Activity.NotifyError(System.Exception exception)\tC#\n \tSystem.Diagnostics.DiagnosticSource.dll!System.Diagnostics.Activity.ValidateSetCurrent(System.Diagnostics.Activity activity)\tC#\n \tSystem.Diagnostics.DiagnosticSource.dll!System.Diagnostics.Activity.Current.set(System.Diagnostics.Activity value)\tC#\n \tMicrosoft.AspNetCore.SignalR.Core.dll!Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u003CMicrosoft.AspNetCore.Components.Server.ComponentHub\u003E.Invoke.__ExecuteInvocation|22_0(Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u003CMicrosoft.AspNetCore.Components.Server.ComponentHub\u003E dispatcher, Microsoft.Extensions.Internal.ObjectMethodExecutor methodExecutor, Microsoft.AspNetCore.Components.Server.ComponentHub hub, object[] arguments, Microsoft.Extensions.DependencyInjection.AsyncServiceScope scope, Microsoft.AspNetCore.SignalR.IHubActivator\u003CMicrosoft.AspNetCore.Components.Server.ComponentHub\u003E hubActivator, Microsoft.AspNetCore.SignalR.HubConnectionContext connection, Microsoft.AspNetCore.SignalR.Protocol.HubMethodInvocationMessage hubMethodInvocationMessage, bool isStreamCall)\tC#\n \tMicrosoft.AspNetCore.SignalR.Core.dll!Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u003CMicrosoft.AspNetCore.Components.Server.ComponentHub\u003E.Invoke(Microsoft.AspNetCore.SignalR.Internal.HubMethodDescriptor descriptor, Microsoft.AspNetCore.SignalR.HubConnectionContext connection, Microsoft.AspNetCore.SignalR.Protocol.HubMethodInvocationMessage hubMethodInvocationMessage, bool isStreamResponse, bool isStreamCall)\tC#\n \tMicrosoft.AspNetCore.SignalR.Core.dll!Microsoft.AspNetCore.SignalR.Internal.ChannelBasedSemaphore.RunTask\u003C(Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u003CMicrosoft.AspNetCore.Components.Server.ComponentHub\u003E, Microsoft.AspNetCore.SignalR.Internal.HubMethodDescriptor, Microsoft.AspNetCore.SignalR.HubConnectionContext, Microsoft.AspNetCore.SignalR.Protocol.HubMethodInvocationMessage)\u003E(System.Func\u003C(Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u003CMicrosoft.AspNetCore.Components.Server.ComponentHub\u003E, Microsoft.AspNetCore.SignalR.Internal.HubMethodDescriptor, Microsoft.AspNetCore.SignalR.HubConnectionContext, Microsoft.AspNetCore.SignalR.Protocol.HubMethodInvocationMessage), System.Threading.Tasks.Task\u003Cbool\u003E\u003E callback, (Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u003CMicrosoft.AspNetCore.Components.Server.ComponentHub\u003E, Microsoft.AspNetCore.SignalR.Internal.HubMethodDescriptor, Microsoft.AspNetCore.SignalR.HubConnectionContext, Microsoft.AspNetCore.SignalR.Protocol.HubMethodInvocationMessage) state)\tC#\n \tMicrosoft.AspNetCore.SignalR.Core.dll!Microsoft.AspNetCore.SignalR.Internal.ChannelBasedSemaphore.RunAsync\u003C(Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u003CMicrosoft.AspNetCore.Components.Server.ComponentHub\u003E, Microsoft.AspNetCore.SignalR.Internal.HubMethodDescriptor, Microsoft.AspNetCore.SignalR.HubConnectionContext, Microsoft.AspNetCore.SignalR.Protocol.HubMethodInvocationMessage)\u003E(System.Func\u003C(Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u003CMicrosoft.AspNetCore.Components.Server.ComponentHub\u003E, Microsoft.AspNetCore.SignalR.Internal.HubMethodDescriptor, Microsoft.AspNetCore.SignalR.HubConnectionContext, Microsoft.AspNetCore.SignalR.Protocol.HubMethodInvocationMessage), System.Threading.Tasks.Task\u003Cbool\u003E\u003E callback, (Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u003CMicrosoft.AspNetCore.Components.Server.ComponentHub\u003E, Microsoft.AspNetCore.SignalR.Internal.HubMethodDescriptor, Microsoft.AspNetCore.SignalR.HubConnectionContext, Microsoft.AspNetCore.SignalR.Protocol.HubMethodInvocationMessage) state)\tC#\n \tMicrosoft.AspNetCore.SignalR.Core.dll!Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u003CMicrosoft.AspNetCore.Components.Server.ComponentHub\u003E.ProcessInvocation(Microsoft.AspNetCore.SignalR.HubConnectionContext connection, Microsoft.AspNetCore.SignalR.Protocol.HubMethodInvocationMessage hubMethodInvocationMessage, bool isStreamResponse)\tC#\n \tMicrosoft.AspNetCore.SignalR.Core.dll!Microsoft.AspNetCore.SignalR.Internal.DefaultHubDispatcher\u003CSystem.__Canon\u003E.DispatchMessageAsync(Microsoft.AspNetCore.SignalR.HubConnectionContext connection, Microsoft.AspNetCore.SignalR.Protocol.HubMessage hubMessage)\tC#\n \tMicrosoft.AspNetCore.SignalR.Core.dll!Microsoft.AspNetCore.SignalR.HubConnectionHandler\u003CMicrosoft.AspNetCore.Components.Server.ComponentHub\u003E.DispatchMessagesAsync(Microsoft.AspNetCore.SignalR.HubConnectionContext connection)\tC#\n\n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\nIt\u0027s a larger project so it will take some time to repro this. I just wonder this error is known already?\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n9.0.101\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86Z11vs",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E I just wonder this error is known already?\n\nNope, this is the first time someone has reported this.\n\n\u003E It\u0027s a larger project so it will take some time to repro this.\n\nThanks, in the meantime, are you able to hit this under a debugger? Is so it would be nice to get line numbers for where in \u0060DefaultHubDispatcher\u0060 the issue is occurring, and also if possible information about what method on \u0060ComponentHub\u0060 is being called.",
        "createdAt": "2025-01-09T18:49:10Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59792#issuecomment-2581027820"
      },
      {
        "id": "IC_kwDOAQzde86Z3kpG",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Never mind, figured it out and made a repro.",
        "createdAt": "2025-01-10T00:08:53Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59792#issuecomment-2581482054"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86llF5_",
    "title": "Self hosted signalr - TLS 1.3 problem",
    "url": "https://github.com/dotnet/aspnetcore/issues/59793",
    "createdAt": "2025-01-09T14:17:50Z",
    "lastUpdated": "2025-01-13T21:30:53Z",
    "body": "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nHi.\n\nI have problem with package @microsoft/signalr client for javascript -\u003E https://www.npmjs.com/package/@microsoft/signalr\nI use latest version 8.0.7.\n\nMy API is deployed on Azure and I set up self hosted signalR server on Kestrel. Problem exists during trying establishing connection with hub when we have minimum TLS version set to 1.3 on Azure. \n![Image](https://github.com/user-attachments/assets/ec34b21e-f415-4742-8fad-a175b1bfd76b)\n\nProblem:\n![Image](https://github.com/user-attachments/assets/c4765997-f667-463a-bd49-00f6e6e40963)\n\nWebsockets doesnt work, long pooling works.\n\nWhen we change TLS version to 1.2 on Azure then it starts working. \n\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n_No response_\n\n### Anything else?\n\n_No response_",
    "upvotes": 0,
    "labels": [
      "area-signalr"
    ],
    "comments": [
      {
        "id": "IC_kwDOAQzde86Z3LN1",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "\u003E Azure and I set up self hosted signalR server on Kestrel\n\nDeployed how? Is it in Azure App Service. Linux or Windows? If Windows, that would be using IIS not Kestrel, unless you\u0027re using OutOfProcess. Are you using a browser or Node?\n\nTLS with WebSockets shouldn\u0027t behave differently from other HTTP requests so this is very odd.",
        "createdAt": "2025-01-09T22:38:37Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59793#issuecomment-2581377909"
      },
      {
        "id": "IC_kwDOAQzde86Z5o1h",
        "parentId": null,
        "author": "skibos",
        "content": "Azure App Service on Linux (Kestrel)\n\nI use signalR in React Native app (nodejs example). \n\nIt looks like endpoint /negotiate return connectionId and connectionToken properly but then client can\u0027t connect to the websocket somehow.",
        "createdAt": "2025-01-10T08:14:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59793#issuecomment-2582023521"
      },
      {
        "id": "IC_kwDOAQzde86aRbFt",
        "parentId": null,
        "author": "BrennanConroy",
        "content": "Can repro websocket failures using the browser as well. This only seems to happen with specific configurations though. If you turn \u0060Http 2.0 Proxy\u0060 **on**, but have \u0060End-to-end TLS encryption\u0060 **off** it fails. But if you turn on \u0060End-to-end TLS encryption\u0060 it starts working, or if you turn off \u0060Http 2.0 Proxy\u0060.",
        "createdAt": "2025-01-13T21:30:51Z",
        "url": "https://github.com/dotnet/aspnetcore/issues/59793#issuecomment-2588258669"
      }
    ]
  },
  {
    "id": "I_kwDOAQzde86nIavo",
    "title": "Quarantine CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser",
    "url": "https://github.com/dotnet/aspnetcore/issues/59991",
    "createdAt": "2025-01-22T10:29:56Z",
    "lastUpdated": "2025-01-22T10:30:01Z",
    "body": "\u003C!--\nNote this issue template is specifically for failing tests within the dotnet/aspnetcore repo.\n--\u003E\n\n## Failing Test(s)\n\n\u003C!--\nProvide the fully qualified name(s) of the failing tests.\n--\u003E\n\n- Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests.CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser(transportType: LongPolling, protocolName: \u0022messagepack\u0022)\n\n## Error Message\n\n\u003C!--\nProvide the error message associated with the test failure, if applicable.\n--\u003E\n\n\u0060\u0060\u0060text\nSystem.TimeoutException : The operation has timed out.\n\u0060\u0060\u0060\n\n## Stacktrace\n\n\u003Cdetails\u003E\n\u003C!--\nProvide the stack trace associated with the test failure, if applicable.\n--\u003E\n\n\u0060\u0060\u0060text\n   at Microsoft.AspNetCore.InternalTesting.TaskExtensions.TimeoutAfter[T](Task\u00601 task, TimeSpan timeout, String filePath, Int32 lineNumber) in /_/src/Shared/TaskExtensions.cs:line 88\n   at Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests.CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser(HttpTransportType transportType, String protocolName) in /_/src/SignalR/server/StackExchangeRedis/test/RedisEndToEnd.cs:line 111\n--- End of stack trace from previous location ---\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n\n## Logs\n\n\u003Cdetails\u003E\n\u003C!--\nIf this is a Helix test failure, include the text of the .log artifact from the failing test.\nNote that you have to be signed in to Azure DevOps to see the test artifacts.\n--\u003E\n\n\u0060\u0060\u0060text\n[0.029s] [TestLifetime] [Information] Starting test CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser-LongPolling-messagepack at 2025-01-22T05:29:49\n[0.030s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Registering handler for client method \u0027Echo\u0027.\n[0.030s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Registering handler for client method \u0027Echo\u0027.\n[0.030s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Starting HubConnection.\n[0.030s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Starting HttpConnection.\n[0.030s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Establishing connection with server at \u0027http://127.0.0.1:35403/echo\u0027.\n[0.060s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Established connection \u0027bO9bh1_yEu9pd7Vc1yr8lg\u0027 with the server.\n[0.071s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Skipping transport WebSockets because it was disabled by the client.\n[0.071s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Skipping transport ServerSentEvents because it was disabled by the client.\n[0.071s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Starting transport \u0027LongPolling\u0027 with Url: http://127.0.0.1:35403/echo.\n[0.071s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Information] Starting transport. Transfer mode: Binary.\n[0.078s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Starting receive loop.\n[0.079s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Starting the send loop.\n[0.079s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Transport \u0027LongPolling\u0027 started.\n[0.079s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Information] HttpConnection Started.\n[0.079s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Information] Using HubProtocol \u0027messagepack v1\u0027.\n[0.079s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending Hub Handshake.\n[0.079s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Sending 39 bytes to the server using url: http://127.0.0.1:35403/echo?id=NfLI8JS9Rr9Yj_5hbSVpBQ.\n[0.096s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Message(s) sent successfully.\n[0.096s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Received messages from the server.\n[0.096s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Handshake with server complete.\n[0.096s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Receive loop starting.\n[0.097s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Information] HubConnection started.\n[0.102s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Starting HubConnection.\n[0.102s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Starting HttpConnection.\n[0.102s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Establishing connection with server at \u0027http://127.0.0.1:43471/echo\u0027.\n[0.124s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Established connection \u00279ewMejbJoWvrLEBrQHnjew\u0027 with the server.\n[0.124s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Skipping transport WebSockets because it was disabled by the client.\n[0.124s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Skipping transport ServerSentEvents because it was disabled by the client.\n[0.124s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Starting transport \u0027LongPolling\u0027 with Url: http://127.0.0.1:43471/echo.\n[0.124s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Information] Starting transport. Transfer mode: Binary.\n[0.126s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Starting receive loop.\n[0.126s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Starting the send loop.\n[0.126s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Debug] Transport \u0027LongPolling\u0027 started.\n[0.127s] [Microsoft.AspNetCore.Http.Connections.Client.HttpConnection] [Information] HttpConnection Started.\n[0.127s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Information] Using HubProtocol \u0027messagepack v1\u0027.\n[0.127s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending Hub Handshake.\n[0.127s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Sending 39 bytes to the server using url: http://127.0.0.1:43471/echo?id=2v13AlkZB4dzyQFZ58n0GQ.\n[0.131s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Message(s) sent successfully.\n[0.133s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Received messages from the server.\n[0.133s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Handshake with server complete.\n[0.133s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Receive loop starting.\n[0.133s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Information] HubConnection started.\n[0.134s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Registering Invocation ID \u00271\u0027 for tracking.\n[0.134s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending InvocationMessage message \u00271\u0027.\n[0.134s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Sending 37 bytes to the server using url: http://127.0.0.1:43471/echo?id=2v13AlkZB4dzyQFZ58n0GQ.\n[0.134s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Sending InvocationMessage message \u00271\u0027 completed.\n[0.135s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Message(s) sent successfully.\n[0.139s] [Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport] [Debug] Received messages from the server.\n[0.140s] [Microsoft.AspNetCore.SignalR.Client.HubConnection] [Debug] Processing 34 byte message from server.\n[30.142s] [Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests] [Error] Test threw an exception.\nSystem.TimeoutException: The operation has timed out.\n   at Microsoft.AspNetCore.InternalTesting.TaskExtensions.TimeoutAfter[T](Task\u00601 task, TimeSpan timeout, String filePath, Int32 lineNumber) in /_/src/Shared/TaskExtensions.cs:line 88\n   at Microsoft.AspNetCore.SignalR.StackExchangeRedis.Tests.RedisEndToEndTests.CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser(HttpTransportType transportType, String protocolName) in /_/src/SignalR/server/StackExchangeRedis/test/RedisEndToEnd.cs:line 111\n   at Xunit.Sdk.TestInvoker\u00601.\u003C\u003Ec__DisplayClass47_0.\u003C\u003CInvokeTestMethodAsync\u003Eb__1\u003Ed.MoveNext() in /_/src/xunit.execution/Sdk/Frameworks/Runners/TestInvoker.cs:line 259\n--- End of stack trace from previous location ---\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func\u00601 asyncAction) in /_/src/xunit.execution/Sdk/Frameworks/ExecutionTimer.cs:line 48\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(Func\u00601 code) in /_/src/xunit.core/Sdk/ExceptionAggregator.cs:line 90\n[30.142s] [TestLifetime] [Information] Finished test CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser-LongPolling-messagepack in 30.1412697s\n\u0060\u0060\u0060\n\u003C/details\u003E\n\n## Build\n\n\u003C!--\nProvide a link to the build where the test failure occurred.\n--\u003E\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=924728",
    "upvotes": 0,
    "labels": [
      "test-failure",
      "area-signalr"
    ],
    "comments": []
  }
]